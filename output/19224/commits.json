[
  {
    "sha": "0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTk2YTZlZWI1ZGRiODRjNzA5NWFlZDcxYmI3ZTY2NDVjMjc1ZjA3",
    "commit": {
      "author": {
        "name": "MIZUTA Takeshi",
        "email": "mizuta.takeshi@fujitsu.com",
        "date": "2020-06-08T07:37:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-06-09T13:06:15Z"
      },
      "message": "util: Don't reference errno when pthread fails.\n\nPthread library does not set errno.\nPthread library's errno is returned by return value.\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n\nGithub-Pull: #19194\nRebased-From: cb38b069b0f41b1a26264784b1c1303c8ac6ab08",
      "tree": {
        "sha": "aa312ce08c2e9b2fc30c0d11b3d8694e1c871cb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa312ce08c2e9b2fc30c0d11b3d8694e1c871cb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7fiXQACgkQLuufXMCV\nJsEHLg/9GSseacz4ktnUCg9/jadvqVcuSH/8JFv8rS96JzIRAlJscjHNtmxti8MA\nEjNXqUFOtvdAVwV/R0Z1o04WXzFjwZRePNGEvBEMh/6yYcmF/9eLJfR8v+IeGup7\neW6MNxo/xdaBUQhi+vcpgqln4M4M2JQYIKY+CZuOw88ua91vKQW68x2paR1PeLzL\nZL+i/0Wr1sffQ1Dak8n9MiWA7GgqNwHUiGd022oSfLbpyrPiQbEGD/Gc3Gl6mqFz\nmF7N/TNujgGLR8zNuaY6m1ddb1+DjBsG+tem/0R1F6+fKwZCc91AG89jCrXqzDzf\nmssunE1eZfg5u+hnVEm9x3oi1tDGtwLs3MLSGVK8PWgb0N3snONJTWKqfQkLEkoO\nUsDVOxuzJgsqlCP6QK2JHGRS40MutJ4QlNjLatUNUpds5d5TnZ4T7ZGgf/4nrEof\n7E2PJbUunihvBJnpZZz441YBo1kzeBTrkh54N0tsIsHKZRoLacr01HF9JCYARarv\nl4cov362ALIQNZV5dQu5GG1fm2QQGhiItAj2QmMVOntlaylJ8buH35I+8Az8+Uqm\nOvXgW67R+XciEpiG798FJF9yS0FyQvZ5rjja2L32bEI2ndNz7rdJialnyKxtcfIx\neDQ7sq3xgzbac34PCiKXoljW06mby1/KDswCGpb65/mYcP/p1dU=\n=v9H0\n-----END PGP SIGNATURE-----",
        "payload": "tree aa312ce08c2e9b2fc30c0d11b3d8694e1c871cb5\nparent cd32134bda3e4bf04e58dd7555ef8b9d4bf1175b\nauthor MIZUTA Takeshi <mizuta.takeshi@fujitsu.com> 1591601879 +0900\ncommitter fanquake <fanquake@gmail.com> 1591707975 +0800\n\nutil: Don't reference errno when pthread fails.\n\nPthread library does not set errno.\nPthread library's errno is returned by return value.\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n\nGithub-Pull: #19194\nRebased-From: cb38b069b0f41b1a26264784b1c1303c8ac6ab08\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0596a6eeb5ddb84c7095aed71bb7e6645c275f07/comments",
    "author": {
      "login": "miztake",
      "id": 9792095,
      "node_id": "MDQ6VXNlcjk3OTIwOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9792095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miztake",
      "html_url": "https://github.com/miztake",
      "followers_url": "https://api.github.com/users/miztake/followers",
      "following_url": "https://api.github.com/users/miztake/following{/other_user}",
      "gists_url": "https://api.github.com/users/miztake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miztake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miztake/subscriptions",
      "organizations_url": "https://api.github.com/users/miztake/orgs",
      "repos_url": "https://api.github.com/users/miztake/repos",
      "events_url": "https://api.github.com/users/miztake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miztake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd32134bda3e4bf04e58dd7555ef8b9d4bf1175b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32134bda3e4bf04e58dd7555ef8b9d4bf1175b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd32134bda3e4bf04e58dd7555ef8b9d4bf1175b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b6a7f3926d535464191d899afe175c05e5aef43f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0596a6eeb5ddb84c7095aed71bb7e6645c275f07/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0596a6eeb5ddb84c7095aed71bb7e6645c275f07/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
        "patch": "@@ -1155,8 +1155,9 @@ void ScheduleBatchPriority()\n {\n #ifdef SCHED_BATCH\n     const static sched_param param{};\n-    if (pthread_setschedparam(pthread_self(), SCHED_BATCH, &param) != 0) {\n-        LogPrintf(\"Failed to pthread_setschedparam: %s\\n\", strerror(errno));\n+    const int rc = pthread_setschedparam(pthread_self(), SCHED_BATCH, &param);\n+    if (rc != 0) {\n+        LogPrintf(\"Failed to pthread_setschedparam: %s\\n\", strerror(rc));\n     }\n #endif\n }"
      }
    ]
  },
  {
    "sha": "c219d21634b3eff537471c4d52e631679965d8d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjE5ZDIxNjM0YjNlZmY1Mzc0NzFjNGQ1MmU2MzE2Nzk5NjVkOGQ4",
    "commit": {
      "author": {
        "name": "sachinkm77",
        "email": "sachinkm77",
        "date": "2020-06-03T08:06:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-06-09T13:07:45Z"
      },
      "message": "build: improved output of configure for build OS\n\nGithub-Pull: #19152\nRebased-From: 0fef60c63d6d2f4df8e698936221e2330ef3a244",
      "tree": {
        "sha": "6594e6e6802066ad8d3b34a515701b5aafeeabba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6594e6e6802066ad8d3b34a515701b5aafeeabba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c219d21634b3eff537471c4d52e631679965d8d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7fia8ACgkQLuufXMCV\nJsHsyQ//bpsNqsctd70FljzOqGWq77QxgU5PN1tzrxTbgkx5FK5to9lAzKcdneQl\n1dEt5YrHH3yYd7fXEk4XIGeN4xVcYSABMfLmmxoVvvOm17cfCeTcNVFJqfgrLmag\nQgWnBGe4sPfEs7FlLLZqsm0TgWD8zDiPO+ELh3ekZRzigyNj9ePn5i6x3d4EUF1N\nZ+vCyK/p+eic3mfNaDMtTRZE+vmMF2TisNHfT1ppEZoHE2PV/gdgLNtu2ddBO1pS\nXhocNZRMAzEJH0TIrySG20u1XHpJzsUat8T4N9i3RBSiA/5Y81wy/c/RP9Vs3W8A\nOi0ZtaYMZk4RB7VUP3eR7riYiFRKJzriUOJtQyhM1avq57EQCzJOlLu0cuhyS8nu\nGi5wfn+d0PyecCYdCUiNHFlRfZXo8UTlsTPs9Dzjy5L6QQA6GY1gZCH9B3FeVtl7\nBswrIJoZTiZFFewMEWBKqXTBwvR8CUy8t7Xtlfh77l1NtUS/sdovS2yCgPiuqRKe\nGgLA/OyO4eG7bYgQpvCR84pJHOdEzCbqPYNHDWhQ3NjGCyP1Jfxne8DI29BLciL5\n4If5ru3c1+fAn7yXMSm3YcT8s9sos00ZYM//KPQtWTJdd5nj0jB+ke/v4C8MApcV\ngXuInAFQz0nvJDcPy/5+TgwkOC1yM3eCUW6S8wsaiGyQulzeAUA=\n=lvQK\n-----END PGP SIGNATURE-----",
        "payload": "tree 6594e6e6802066ad8d3b34a515701b5aafeeabba\nparent 0596a6eeb5ddb84c7095aed71bb7e6645c275f07\nauthor sachinkm77 <sachinkm77> 1591171596 -0400\ncommitter fanquake <fanquake@gmail.com> 1591708065 +0800\n\nbuild: improved output of configure for build OS\n\nGithub-Pull: #19152\nRebased-From: 0fef60c63d6d2f4df8e698936221e2330ef3a244\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c219d21634b3eff537471c4d52e631679965d8d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c219d21634b3eff537471c4d52e631679965d8d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c219d21634b3eff537471c4d52e631679965d8d8/comments",
    "author": null,
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0596a6eeb5ddb84c7095aed71bb7e6645c275f07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0596a6eeb5ddb84c7095aed71bb7e6645c275f07"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e61b65f7fa5c4c3abc5a477c146044c859602c76",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c219d21634b3eff537471c4d52e631679965d8d8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c219d21634b3eff537471c4d52e631679965d8d8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c219d21634b3eff537471c4d52e631679965d8d8",
        "patch": "@@ -1668,7 +1668,7 @@ echo \"  gprof enabled = $enable_gprof\"\n echo \"  werror        = $enable_werror\"\n echo\n echo \"  target os     = $TARGET_OS\"\n-echo \"  build os      = $BUILD_OS\"\n+echo \"  build os      = $build_os\"\n echo\n echo \"  CC            = $CC\"\n echo \"  CFLAGS        = $CFLAGS\""
      }
    ]
  },
  {
    "sha": "5c7151a60468bf3c603ffe0490fbbe95736fdd69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzcxNTFhNjA0NjhiZjNjNjAzZmZlMDQ5MGZiYmU5NTczNmZkZDY5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-23T10:22:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-06-09T13:08:32Z"
      },
      "message": "gui: update Qt base translations for macOS release\n\nThese haven't been updated since their addition, so this updates the list that\ncontrols which qt base translations are bundled with the macOS binary, to all the\nlanguages that are available with qt 5.9.8.\n\nThis could probably be improved in some way, however qt updates are infrequent,\nand I didn't want to spend any more time looking at this. Also given that no-one\nseems to have noticed and/or reported this it wouldn't seem high-priority.\n\nCould be backported to 0.20.1.\n\nGithub-Pull: #19059\nRebased-From: 69bfcac27a83440092bc6e61904ded910ed4baf4",
      "tree": {
        "sha": "b7068a713c46d582d011201ae005a07c476cff13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7068a713c46d582d011201ae005a07c476cff13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c7151a60468bf3c603ffe0490fbbe95736fdd69",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7fieAACgkQLuufXMCV\nJsF2AQ/+MYjjZ5+hLiWvbPtigvGduntXke/btNL2lY1AcTdtvHDuRySfj0n5ZL6s\nTbIdUZG0yfHw6Zt5XIleWuA8/g83ZFdqEWygdmpVmOmlulMegkug4uIC+yU/AtoE\n4895EtZGTbDV7tVzwwgBfUIZ5ACG06+HYY9jQS4xQx+DA6SfI+msudBHyJTHTa3S\nIAqSJrRsJxL804ys6vQLJtLViVRgHGnj938EAHQrSEloUaXlZUPZ0ZSK3A84MkMU\ngMdsCnT/9ulg95Evpi7X5AbAP/4g3QCIGEmEWpSiri7jQURSZ74WQKnIx6OSlsEO\nQGQaE8HwZ8Q7Gu7FJ1/MvfTyZx88giqjfUnhJ7s1P9yt/eSmQiJMuTWjoZWm3O4t\nIdH1ZUsYaFPkmDYRaN79ceI0giRrS+tylWIGf1q4NvKctwMClLhPNrafz7VXWDYB\nmI7zgCT8jLgT/PJ5El+QKqkZioScD1vU0IlnWB3u0nuV8t2Zrq6asAydaDDThpbB\nxfnL/7QOY+D+l/G0hPDpAILGVN2R4gaoqpdpndMP3VKDDk4PkJD1XXUmlEzOZBuP\nMuAEE+PV6A6tvqqToVbcZWlqjZ9sssbD26GSAdQxg3rRnJA3P+r5Q90EB1zDhV2f\n/4P36u5iSu6yF3rLw09V9zSP+LA70e9ToF3quk2807hFWT4RWa8=\n=6cdZ\n-----END PGP SIGNATURE-----",
        "payload": "tree b7068a713c46d582d011201ae005a07c476cff13\nparent c219d21634b3eff537471c4d52e631679965d8d8\nauthor fanquake <fanquake@gmail.com> 1590229349 +0800\ncommitter fanquake <fanquake@gmail.com> 1591708112 +0800\n\ngui: update Qt base translations for macOS release\n\nThese haven't been updated since their addition, so this updates the list that\ncontrols which qt base translations are bundled with the macOS binary, to all the\nlanguages that are available with qt 5.9.8.\n\nThis could probably be improved in some way, however qt updates are infrequent,\nand I didn't want to spend any more time looking at this. Also given that no-one\nseems to have noticed and/or reported this it wouldn't seem high-priority.\n\nCould be backported to 0.20.1.\n\nGithub-Pull: #19059\nRebased-From: 69bfcac27a83440092bc6e61904ded910ed4baf4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7151a60468bf3c603ffe0490fbbe95736fdd69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7151a60468bf3c603ffe0490fbbe95736fdd69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7151a60468bf3c603ffe0490fbbe95736fdd69/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c219d21634b3eff537471c4d52e631679965d8d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c219d21634b3eff537471c4d52e631679965d8d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c219d21634b3eff537471c4d52e631679965d8d8"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "70d4f1253a19d42fecdd8b0dbaa87545de8cd7d6",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c7151a60468bf3c603ffe0490fbbe95736fdd69/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c7151a60468bf3c603ffe0490fbbe95736fdd69/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=5c7151a60468bf3c603ffe0490fbbe95736fdd69",
        "patch": "@@ -41,7 +41,7 @@ OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n+OSX_QT_TRANSLATIONS = ar,bg,ca,cs,da,de,es,fa,fi,fr,gd,gl,he,hu,it,ja,ko,lt,lv,pl,pt,ru,sk,sl,sv,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\"
      },
      {
        "sha": "631851855a0bd79533d8fbab0d3f5391fa204c0d",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c7151a60468bf3c603ffe0490fbbe95736fdd69/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c7151a60468bf3c603ffe0490fbbe95736fdd69/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=5c7151a60468bf3c603ffe0490fbbe95736fdd69",
        "patch": "@@ -10,6 +10,7 @@ $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch fix_android_qmake_conf.patch fix_android_jni_static.patch\n \n+# Update OSX_QT_TRANSLATIONS when this is updated\n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n "
      }
    ]
  },
  {
    "sha": "febebc4ea68104bba9ad2cf4468fc50e6136f803",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWJlYmM0ZWE2ODEwNGJiYTlhZDJjZjQ0NjhmYzUwZTYxMzZmODAz",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-04-18T23:07:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-06-09T13:09:22Z"
      },
      "message": "Fix WSL file locking by using flock instead of fcntl\n\nCo-authored-by: sipa <pieter@wuille.net>\n\nGithub-Pull: #18700\nRebased-From: e8fa0a3d2025509fcddc59fc618e91371542cf87",
      "tree": {
        "sha": "35865c1c899c6980c1fb3403210799610d313844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35865c1c899c6980c1fb3403210799610d313844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/febebc4ea68104bba9ad2cf4468fc50e6136f803",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7fihMACgkQLuufXMCV\nJsG5iRAAgfdMT33ojfniu1DbxNkHvVqHWrrG7eGZm2Kfc68+i7+CfFfGgpq0uImv\nRVLIvrJRiCci4jDJa6AgL7aDoX/EOw6O1bJNduW89FDS0X4HpxB5rAvlsTZCtMoN\nhU94MS3wvpnN98p9S6aoPWexBLnEXXcWP1x6g8ByINHH3DUnb93h5fS1e9jDd97e\nIGHh9nIjDadFJ5SRCpABn9xEOlWch9V+07yNuybjTHYDEjcfKEyyCVrQgk61THmL\neBQVsuLp7SE2RVBajrWv2Nws7ZmdE0mBTFas/YhtXOVuwS0wj9ZrIGvi0qLplm9T\nUakw8SPRZVWdBZa1stFlGDicSKn7Iv/1+GVCOOvu3swOdUjMDihMNTsgCZreFHqG\nmZMR/fhwiTYVCRZ3gIcDU2JwMrzfKYDQGpbY3kn+sA/ab8WxWIWjwPhroJnIZOtE\nQRpkHFgdkY9UK3kXafZN/X4H5OgtPDxbiAVcfOpVwCSQkp0xkRME5daocHKUyQB/\nzy93Z4qaLP+NIk5YQNLo9DS1MbQYeJt0yNT6rf+h6zhkiHOexxymRRp/FZAWmmhV\ngyJ547jcWoZ3boaUHbjC7VecOt0iHboOE/SwQJ32rUcWty2scSI2snyi8COPts84\n28U1oUMtDymVtrThGIV5MC3VPXYKEofEgmn5QCmoZaC7KrbyeW8=\n=ISjM\n-----END PGP SIGNATURE-----",
        "payload": "tree 35865c1c899c6980c1fb3403210799610d313844\nparent 5c7151a60468bf3c603ffe0490fbbe95736fdd69\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1587251234 +1200\ncommitter fanquake <fanquake@gmail.com> 1591708162 +0800\n\nFix WSL file locking by using flock instead of fcntl\n\nCo-authored-by: sipa <pieter@wuille.net>\n\nGithub-Pull: #18700\nRebased-From: e8fa0a3d2025509fcddc59fc618e91371542cf87\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/febebc4ea68104bba9ad2cf4468fc50e6136f803",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/febebc4ea68104bba9ad2cf4468fc50e6136f803",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/febebc4ea68104bba9ad2cf4468fc50e6136f803/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c7151a60468bf3c603ffe0490fbbe95736fdd69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7151a60468bf3c603ffe0490fbbe95736fdd69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7151a60468bf3c603ffe0490fbbe95736fdd69"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 29,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e68c97b3cafbbd6239203ca81b22a82972e23dee",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 8,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/febebc4ea68104bba9ad2cf4468fc50e6136f803/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/febebc4ea68104bba9ad2cf4468fc50e6136f803/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=febebc4ea68104bba9ad2cf4468fc50e6136f803",
        "patch": "@@ -6,6 +6,9 @@\n \n #ifndef WIN32\n #include <fcntl.h>\n+#include <string>\n+#include <sys/file.h>\n+#include <sys/utsname.h>\n #else\n #ifndef NOMINMAX\n #define NOMINMAX\n@@ -47,20 +50,38 @@ FileLock::~FileLock()\n     }\n }\n \n+static bool IsWSL()\n+{\n+    struct utsname uname_data;\n+    return uname(&uname_data) == 0 && std::string(uname_data.version).find(\"Microsoft\") != std::string::npos;\n+}\n+\n bool FileLock::TryLock()\n {\n     if (fd == -1) {\n         return false;\n     }\n-    struct flock lock;\n-    lock.l_type = F_WRLCK;\n-    lock.l_whence = SEEK_SET;\n-    lock.l_start = 0;\n-    lock.l_len = 0;\n-    if (fcntl(fd, F_SETLK, &lock) == -1) {\n-        reason = GetErrorReason();\n-        return false;\n+\n+    // Exclusive file locking is broken on WSL using fcntl (issue #18622)\n+    // This workaround can be removed once the bug on WSL is fixed\n+    static const bool is_wsl = IsWSL();\n+    if (is_wsl) {\n+        if (flock(fd, LOCK_EX | LOCK_NB) == -1) {\n+            reason = GetErrorReason();\n+            return false;\n+        }\n+    } else {\n+        struct flock lock;\n+        lock.l_type = F_WRLCK;\n+        lock.l_whence = SEEK_SET;\n+        lock.l_start = 0;\n+        lock.l_len = 0;\n+        if (fcntl(fd, F_SETLK, &lock) == -1) {\n+            reason = GetErrorReason();\n+            return false;\n+        }\n     }\n+\n     return true;\n }\n #else"
      }
    ]
  },
  {
    "sha": "654420d6dfb455ca4030055881db4e3aa9ec6e8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTQ0MjBkNmRmYjQ1NWNhNDAzMDA1NTg4MWRiNGUzYWE5ZWM2ZThi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-15T13:23:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-06-09T13:12:38Z"
      },
      "message": "wallet: Minimal fix to restore conflicted transaction notifications\n\nThis fix is a based on the fix by Antoine Riard <ariard@student.42.fr> in\nhttps://github.com/bitcoin/bitcoin/pull/18600.\n\nUnlike that PR, which implements some new behavior, this just restores previous\nwallet notification and status behavior for transactions removed from the\nmempool because they conflict with transactions in a block. The behavior was\naccidentally changed in two `CWallet::BlockConnected` updates:\na31be09bfd77eed497a8e251d31358e16e2f2eb1 and\n7e89994133725125dddbfa8d45484e3b9ed51c6e from\nhttps://github.com/bitcoin/bitcoin/pull/16624, causing issue\nhttps://github.com/bitcoin/bitcoin/issues/18325.\n\nThe change here could be improved and replaced with a more comprehensive\ncleanup, so it includes a detailed comment explaining future considerations.\n\nFixes #18325\n\nCo-authored-by: Antoine Riard <ariard@student.42.fr>\n\nGithub-Pull: #18982\nRebased-From: b604c5c8b5892842f13dee89ae31812a28ab25d1",
      "tree": {
        "sha": "15e81a6f0d90f0e011d6be5d2d3a3c8e0ce7a6bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e81a6f0d90f0e011d6be5d2d3a3c8e0ce7a6bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/654420d6dfb455ca4030055881db4e3aa9ec6e8b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7fitwACgkQLuufXMCV\nJsFcwxAAqohl4BPgN0vmhSNB5I77OQfIWFCHYhQsu1K2UxwBIQtTWO3zzDX0pnIs\nIMEpva1+Xq4rW/rVDPiCLCh7/n6YpABq0OmcFRxV4Pwjf6u7RugDxAddUYipJzxY\n8OLJ45zEs32VLfKMmbSSMU6azDzMeNzuE5ngFNawnhKUlCB2V3wiaBJnlxjNdyVd\nI0pY7UATkAn9Xy9EawBFia66PQhUnIgcnOApb43HQDpdt+Sm9sE8vU3aLSxtwzT9\nULAwBZmTmgPoWWvhMp5JWEawBDZxcVXK5tSH3/4W8uNf0YeNKn6EKZCwigzehtMN\nXYJ/EDEeldoXfpMB2+cDrBFGIq4mL1a2CDnPWMn8G5vEHJHI1cSd2fjT77p+3e/+\nSuQz3/4W3p0lrlDtg/sZyb3VO8EytKG9fnmNjIHI3D9uWWIFUIQ6pqkqfgkpKnyH\nEEr9HERoYFs2CN/X+gCPkI2wMlJ0KIf9k2sOOoxtqh934QqycMsBbA5v8ngDgy8r\n4NvyaN8V8GXmxGuKIXD1m9nknyigKitaZbgneo5VFfXyWLIk16RKLp4U6m9+0s64\nT2iU6WlMOaOpI2X236yXNu8kyVOaFAvxN2XoyfpDb1bz8pm67aeO9OR+Cb1enTuS\nlNew8azO5x3AT4WYQNF5dabrouH3j/24eNIz7d54gVUSA6tAeDc=\n=AUmC\n-----END PGP SIGNATURE-----",
        "payload": "tree 15e81a6f0d90f0e011d6be5d2d3a3c8e0ce7a6bd\nparent febebc4ea68104bba9ad2cf4468fc50e6136f803\nauthor Russell Yanofsky <russ@yanofsky.org> 1589549035 -0400\ncommitter fanquake <fanquake@gmail.com> 1591708358 +0800\n\nwallet: Minimal fix to restore conflicted transaction notifications\n\nThis fix is a based on the fix by Antoine Riard <ariard@student.42.fr> in\nhttps://github.com/bitcoin/bitcoin/pull/18600.\n\nUnlike that PR, which implements some new behavior, this just restores previous\nwallet notification and status behavior for transactions removed from the\nmempool because they conflict with transactions in a block. The behavior was\naccidentally changed in two `CWallet::BlockConnected` updates:\na31be09bfd77eed497a8e251d31358e16e2f2eb1 and\n7e89994133725125dddbfa8d45484e3b9ed51c6e from\nhttps://github.com/bitcoin/bitcoin/pull/16624, causing issue\nhttps://github.com/bitcoin/bitcoin/issues/18325.\n\nThe change here could be improved and replaced with a more comprehensive\ncleanup, so it includes a detailed comment explaining future considerations.\n\nFixes #18325\n\nCo-authored-by: Antoine Riard <ariard@student.42.fr>\n\nGithub-Pull: #18982\nRebased-From: b604c5c8b5892842f13dee89ae31812a28ab25d1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/654420d6dfb455ca4030055881db4e3aa9ec6e8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/654420d6dfb455ca4030055881db4e3aa9ec6e8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/654420d6dfb455ca4030055881db4e3aa9ec6e8b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "febebc4ea68104bba9ad2cf4468fc50e6136f803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/febebc4ea68104bba9ad2cf4468fc50e6136f803",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/febebc4ea68104bba9ad2cf4468fc50e6136f803"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 55,
      "deletions": 19
    },
    "files": [
      {
        "sha": "d1b8528d137d59cc936c3906bc4dca78332a05c7",
        "filename": "doc/release-notes-18982.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/doc/release-notes-18982.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/doc/release-notes-18982.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18982.md?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -0,0 +1,8 @@\n+Notification changes\n+--------------------\n+\n+`-walletnotify` notifications are now sent for wallet transactions that are\n+removed from the mempool because they conflict with a new block. These\n+notifications were sent previously before the v0.19 release, but had been\n+broken since that release (bug\n+[#18325](https://github.com/bitcoin/bitcoin/issues/18325))."
      },
      {
        "sha": "7c58273f82c3b2e15d37655ff8d51267ac930987",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -158,9 +158,9 @@ class NotificationsProxy : public CValidationInterface\n     {\n         m_notifications->transactionAddedToMempool(tx);\n     }\n-    void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) override\n     {\n-        m_notifications->transactionRemovedFromMempool(tx);\n+        m_notifications->transactionRemovedFromMempool(tx, reason);\n     }\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {"
      },
      {
        "sha": "538aaae23be6535bb4947dda42eea807db2346e3",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -20,6 +20,7 @@ class CRPCCommand;\n class CScheduler;\n class Coin;\n class uint256;\n+enum class MemPoolRemovalReason;\n enum class RBFTransactionState;\n struct CBlockLocator;\n struct FeeCalculation;\n@@ -221,7 +222,7 @@ class Chain\n     public:\n         virtual ~Notifications() {}\n         virtual void transactionAddedToMempool(const CTransactionRef& tx) {}\n-        virtual void transactionRemovedFromMempool(const CTransactionRef& ptx) {}\n+        virtual void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) {}\n         virtual void blockConnected(const CBlock& block, int height) {}\n         virtual void blockDisconnected(const CBlock& block, int height) {}\n         virtual void updatedBlockTip() {}"
      },
      {
        "sha": "c14417a84736b24c77aead5220e018fda8df21fb",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -410,7 +410,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n         // for any reason except being included in a block. Clients interested\n         // in transactions included in blocks can subscribe to the BlockConnected\n         // notification.\n-        GetMainSignals().TransactionRemovedFromMempool(it->GetSharedTx());\n+        GetMainSignals().TransactionRemovedFromMempool(it->GetSharedTx(), reason);\n     }\n \n     const uint256 hash = it->GetTx().GetHash();"
      },
      {
        "sha": "81a8268684ff8d51f6c1c5f82f12481d1b8b4a02",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -199,9 +199,9 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n                           ptx->GetWitnessHash().ToString());\n }\n \n-void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n-    auto event = [ptx, this] {\n-        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(ptx); });\n+void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {\n+    auto event = [ptx, reason, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(ptx, reason); });\n     };\n     ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n                           ptx->GetHash().ToString(),"
      },
      {
        "sha": "2c03d8cd85005b365f8f5fc2f1a2324c30b71d32",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -21,6 +21,7 @@ class CConnman;\n class CValidationInterface;\n class uint256;\n class CScheduler;\n+enum class MemPoolRemovalReason;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -129,7 +130,7 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx) {}\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n@@ -197,7 +198,7 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void TransactionRemovedFromMempool(const CTransactionRef &);\n+    void TransactionRemovedFromMempool(const CTransactionRef &, MemPoolRemovalReason);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);"
      },
      {
        "sha": "80b4b1f4bf8cdd31c9135fdd096fc2b11fac6602",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 2,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -21,6 +21,7 @@\n #include <script/descriptor.h>\n #include <script/script.h>\n #include <script/signingprovider.h>\n+#include <txmempool.h>\n #include <util/bip32.h>\n #include <util/error.h>\n #include <util/fees.h>\n@@ -1105,12 +1106,42 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& ptx) {\n     }\n }\n \n-void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx) {\n+void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {\n     LOCK(cs_wallet);\n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n         it->second.fInMempool = false;\n     }\n+    // Handle transactions that were removed from the mempool because they\n+    // conflict with transactions in a newly connected block.\n+    if (reason == MemPoolRemovalReason::CONFLICT) {\n+        // Call SyncNotifications, so external -walletnotify notifications will\n+        // be triggered for these transactions. Set Status::UNCONFIRMED instead\n+        // of Status::CONFLICTED for a few reasons:\n+        //\n+        // 1. The transactionRemovedFromMempool callback does not currently\n+        //    provide the conflicting block's hash and height, and for backwards\n+        //    compatibility reasons it may not be not safe to store conflicted\n+        //    wallet transactions with a null block hash. See\n+        //    https://github.com/bitcoin/bitcoin/pull/18600#discussion_r420195993.\n+        // 2. For most of these transactions, the wallet's internal conflict\n+        //    detection in the blockConnected handler will subsequently call\n+        //    MarkConflicted and update them with CONFLICTED status anyway. This\n+        //    applies to any wallet transaction that has inputs spent in the\n+        //    block, or that has ancestors in the wallet with inputs spent by\n+        //    the block.\n+        // 3. Longstanding behavior since the sync implementation in\n+        //    https://github.com/bitcoin/bitcoin/pull/9371 and the prior sync\n+        //    implementation before that was to mark these transactions\n+        //    unconfirmed rather than conflicted.\n+        //\n+        // Nothing described above should be seen as an unchangeable requirement\n+        // when improving this code in the future. The wallet's heuristics for\n+        // distinguishing between conflicted and unconfirmed transactions are\n+        // imperfect, and could be improved in general, see\n+        // https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Transaction-Conflict-Tracking\n+        SyncTransaction(ptx, {CWalletTx::Status::UNCONFIRMED, /* block height  */ 0, /* block hash */ {}, /* index */ 0});\n+    }\n }\n \n void CWallet::blockConnected(const CBlock& block, int height)\n@@ -1124,7 +1155,7 @@ void CWallet::blockConnected(const CBlock& block, int height)\n     for (size_t index = 0; index < block.vtx.size(); index++) {\n         CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\n         SyncTransaction(block.vtx[index], confirm);\n-        transactionRemovedFromMempool(block.vtx[index]);\n+        transactionRemovedFromMempool(block.vtx[index], MemPoolRemovalReason::BLOCK);\n     }\n }\n "
      },
      {
        "sha": "20f0306c63b91cf77157fc21d6f384e2655d0025",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -910,7 +910,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         uint256 last_failed_block;\n     };\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n-    void transactionRemovedFromMempool(const CTransactionRef &ptx) override;\n+    void transactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n     struct Balance {"
      },
      {
        "sha": "fb0c7ceed4c00db2a225ea7a8af1f2e47c83d940",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654420d6dfb455ca4030055881db4e3aa9ec6e8b/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654420d6dfb455ca4030055881db4e3aa9ec6e8b/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "patch": "@@ -125,20 +125,15 @@ def run_test(self):\n \n             # Bump tx2 as bump2 and generate a block on node 0 while\n             # disconnected, then reconnect and check for notifications on node 1\n-            # about newly confirmed bump2 and newly conflicted tx2. Currently\n-            # only the bump2 notification is sent. Ideally, notifications would\n-            # be sent both for bump2 and tx2, which was the previous behavior\n-            # before being broken by an accidental change in PR\n-            # https://github.com/bitcoin/bitcoin/pull/16624. The bug is reported\n-            # in issue https://github.com/bitcoin/bitcoin/issues/18325.\n+            # about newly confirmed bump2 and newly conflicted tx2.\n             disconnect_nodes(self.nodes[0], 1)\n             bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n             self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n             connect_nodes(self.nodes[0], 1)\n             self.sync_blocks()\n-            self.expect_wallet_notify([bump2])\n+            self.expect_wallet_notify([bump2, tx2])\n             assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)\n \n         # TODO: add test for `-alertnotify` large fork notifications"
      }
    ]
  },
  {
    "sha": "27786d072dbcf65cba9110f1dd171f94b6abc107",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzc4NmQwNzJkYmNmNjVjYmE5MTEwZjFkZDE3MWY5NGI2YWJjMTA3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-22T20:30:07Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-06-09T13:55:27Z"
      },
      "message": "trivial: Suggested cleanups to surrounding code\n\nhttps://github.com/bitcoin/bitcoin/pull/18982#pullrequestreview-416974841\n\nGithub-Pull: #18982\nRebased-From: 7eaf86d3bfc83f2beb3ef449707d5156853126fb",
      "tree": {
        "sha": "a40daec90bdbb22024f0eb5055e7e82e098ada76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a40daec90bdbb22024f0eb5055e7e82e098ada76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27786d072dbcf65cba9110f1dd171f94b6abc107",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7flNEACgkQLuufXMCV\nJsEBUQ//UsxxmfhIvoRPM4BK7rd1hbUm6sHdve+CG7Dj9fZmft5RCpbO5aEKcxuN\nvXGElb4Tc+opUa+ZqmXCDKNNqOfai75dseYHNEHlE05yWZHcjd2SPzS4jMLPX0hs\nAx3cH653O7CxJpIHj9HQFVz/MlJos9qeRVwGsWWi05goz0fFJgyRjFpk19ymrJVu\nnvVQCSuCwUCbDsyFfFwN88Yyp30D4Wakc/N0sxDr9roIbmVl9H4M7sa2bGYZZ5xT\nFxWKbSmGQI7DKdVdXLPtGkqoIbUrAZrKyPDRHwyZ+LHQMGrO+3BVmf56Zepb+jZB\ndOf7S5cmKUxw1GB77s9UwzrGUUf4abT/LFp+fe75w8elrxVdbebIN63u4yAs33mp\nearjrCjp5Qp0AaDV75HCDvOzTugHZKTIoFlJQbHVP6OSBK501hiYQGCyG9uyA81H\nFCpVQW9GGBKmAu7mVdF1YeBo8o9QBIguMGUEFgG8en7aJkU39chtfqnODMzLnz82\nR84MpWJE8EozHY8dcBpKpu6nwbaHAQO4fUil3LjFPDuvzy4pfPNnSf2AcrbIZFAI\nvAbBLmn8sg4DOCQ/uA4wpW+Tvgvm9hh0YssL/8Ot53qfm8vUXraVoD7OEXqc8Woj\nZuSHIcd60OonmwVJkiBjPm56/ILNh4oapjXU/7ENLEu5wsH6GcY=\n=s9P/\n-----END PGP SIGNATURE-----",
        "payload": "tree a40daec90bdbb22024f0eb5055e7e82e098ada76\nparent 654420d6dfb455ca4030055881db4e3aa9ec6e8b\nauthor Russell Yanofsky <russ@yanofsky.org> 1590179407 -0400\ncommitter fanquake <fanquake@gmail.com> 1591710927 +0800\n\ntrivial: Suggested cleanups to surrounding code\n\nhttps://github.com/bitcoin/bitcoin/pull/18982#pullrequestreview-416974841\n\nGithub-Pull: #18982\nRebased-From: 7eaf86d3bfc83f2beb3ef449707d5156853126fb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27786d072dbcf65cba9110f1dd171f94b6abc107",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27786d072dbcf65cba9110f1dd171f94b6abc107",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27786d072dbcf65cba9110f1dd171f94b6abc107/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/654420d6dfb455ca4030055881db4e3aa9ec6e8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/654420d6dfb455ca4030055881db4e3aa9ec6e8b"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 24,
      "deletions": 29
    },
    "files": [
      {
        "sha": "6a2c151806c7aa497dd6cb418307af65b66c461c",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27786d072dbcf65cba9110f1dd171f94b6abc107/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27786d072dbcf65cba9110f1dd171f94b6abc107/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=27786d072dbcf65cba9110f1dd171f94b6abc107",
        "patch": "@@ -190,22 +190,22 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n                           fInitialDownload);\n }\n \n-void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    auto event = [ptx, this] {\n-        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionAddedToMempool(ptx); });\n+void CMainSignals::TransactionAddedToMempool(const CTransactionRef& tx) {\n+    auto event = [tx, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionAddedToMempool(tx); });\n     };\n     ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n-                          ptx->GetHash().ToString(),\n-                          ptx->GetWitnessHash().ToString());\n+                          tx->GetHash().ToString(),\n+                          tx->GetWitnessHash().ToString());\n }\n \n-void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {\n-    auto event = [ptx, reason, this] {\n-        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(ptx, reason); });\n+void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) {\n+    auto event = [tx, reason, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.TransactionRemovedFromMempool(tx, reason); });\n     };\n     ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n-                          ptx->GetHash().ToString(),\n-                          ptx->GetWitnessHash().ToString());\n+                          tx->GetHash().ToString(),\n+                          tx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex) {"
      },
      {
        "sha": "3ab82306a6fcffc3992063e76888b7638dda9993",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27786d072dbcf65cba9110f1dd171f94b6abc107/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27786d072dbcf65cba9110f1dd171f94b6abc107/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=27786d072dbcf65cba9110f1dd171f94b6abc107",
        "patch": "@@ -97,7 +97,7 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}\n     /**\n      * Notifies listeners of a transaction leaving mempool.\n      *\n@@ -130,7 +130,7 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void TransactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {}\n+    virtual void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n@@ -197,8 +197,8 @@ class CMainSignals {\n \n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n-    void TransactionAddedToMempool(const CTransactionRef &);\n-    void TransactionRemovedFromMempool(const CTransactionRef &, MemPoolRemovalReason);\n+    void TransactionAddedToMempool(const CTransactionRef&);\n+    void TransactionRemovedFromMempool(const CTransactionRef&, MemPoolRemovalReason);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);"
      },
      {
        "sha": "17eb02b3d52e2c313f90858b7f080c35bf273e75",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27786d072dbcf65cba9110f1dd171f94b6abc107/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27786d072dbcf65cba9110f1dd171f94b6abc107/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=27786d072dbcf65cba9110f1dd171f94b6abc107",
        "patch": "@@ -1094,21 +1094,19 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmatio\n     MarkInputsDirty(ptx);\n }\n \n-void CWallet::transactionAddedToMempool(const CTransactionRef& ptx) {\n-    auto locked_chain = chain().lock();\n+void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n     LOCK(cs_wallet);\n-    CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n-    SyncTransaction(ptx, confirm);\n+    SyncTransaction(tx, {CWalletTx::Status::UNCONFIRMED, /* block height */ 0, /* block hash */ {}, /* index */ 0});\n \n-    auto it = mapWallet.find(ptx->GetHash());\n+    auto it = mapWallet.find(tx->GetHash());\n     if (it != mapWallet.end()) {\n         it->second.fInMempool = true;\n     }\n }\n \n-void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) {\n+void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) {\n     LOCK(cs_wallet);\n-    auto it = mapWallet.find(ptx->GetHash());\n+    auto it = mapWallet.find(tx->GetHash());\n     if (it != mapWallet.end()) {\n         it->second.fInMempool = false;\n     }\n@@ -1140,7 +1138,7 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolR\n         // distinguishing between conflicted and unconfirmed transactions are\n         // imperfect, and could be improved in general, see\n         // https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Transaction-Conflict-Tracking\n-        SyncTransaction(ptx, {CWalletTx::Status::UNCONFIRMED, /* block height  */ 0, /* block hash */ {}, /* index */ 0});\n+        SyncTransaction(tx, {CWalletTx::Status::UNCONFIRMED, /* block height */ 0, /* block hash */ {}, /* index */ 0});\n     }\n }\n \n@@ -1153,8 +1151,7 @@ void CWallet::blockConnected(const CBlock& block, int height)\n     m_last_block_processed_height = height;\n     m_last_block_processed = block_hash;\n     for (size_t index = 0; index < block.vtx.size(); index++) {\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\n-        SyncTransaction(block.vtx[index], confirm);\n+        SyncTransaction(block.vtx[index], {CWalletTx::Status::CONFIRMED, height, block_hash, (int)index});\n         transactionRemovedFromMempool(block.vtx[index], MemPoolRemovalReason::BLOCK);\n     }\n }\n@@ -1171,8 +1168,7 @@ void CWallet::blockDisconnected(const CBlock& block, int height)\n     m_last_block_processed_height = height - 1;\n     m_last_block_processed = block.hashPrevBlock;\n     for (const CTransactionRef& ptx : block.vtx) {\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n-        SyncTransaction(ptx, confirm);\n+        SyncTransaction(ptx, {CWalletTx::Status::UNCONFIRMED, /* block height */ 0, /* block hash */ {}, /* index */ 0});\n     }\n }\n \n@@ -1721,8 +1717,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n                 break;\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *block_height, block_hash, posInBlock);\n-                SyncTransaction(block.vtx[posInBlock], confirm, fUpdate);\n+                SyncTransaction(block.vtx[posInBlock], {CWalletTx::Status::CONFIRMED, *block_height, block_hash, (int)posInBlock}, fUpdate);\n             }\n             // scan succeeded, record block as most recent successfully scanned\n             result.last_scanned_block = block_hash;"
      },
      {
        "sha": "9ca8e9e3091fc5e600fc021e462c0f4f21c1d2dd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27786d072dbcf65cba9110f1dd171f94b6abc107/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27786d072dbcf65cba9110f1dd171f94b6abc107/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=27786d072dbcf65cba9110f1dd171f94b6abc107",
        "patch": "@@ -910,7 +910,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         uint256 last_failed_block;\n     };\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n-    void transactionRemovedFromMempool(const CTransactionRef &ptx, MemPoolRemovalReason reason) override;\n+    void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n     struct Balance {"
      }
    ]
  },
  {
    "sha": "68e0e6f85247c8b9e0b0f039bc31c434632c2982",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGUwZTZmODUyNDdjOGI5ZTBiMGYwMzliYzMxYzQzNDYzMmMyOTgy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-05T03:43:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:15:42Z"
      },
      "message": "rpc: show both UTXOs in decodepsbt\n\nGithub-Pull: #19215\nRebased-From: 72f6bec1da198764d4648a10a61c485e7ab65e9e",
      "tree": {
        "sha": "1d057bf971ee0cdf01aad46752e37d24fc09b166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d057bf971ee0cdf01aad46752e37d24fc09b166"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68e0e6f85247c8b9e0b0f039bc31c434632c2982",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+huAACgkQLuufXMCV\nJsGf7A//X8Jhiee/RqZdPoeyeNFORfERj9lM/Wc3T+Lx7bTyhdZP2lO4wGO4Mn0n\nUtcNLnMA40+LbX6QfMRwNzNqb7sH9NWmwE0eDnPXb6BGv1Ew4qpUrEA4IHTjb7uG\nZ9l298GQrFoXiX2BUgrsbYBY4LmPWeMyyu5c5RE+mxQV109yHa5qhReKZh3vgJ6o\nE6y0h6uSPC7aoEv6VWLekAvFCkvTZHLEyR6B6TGJBorP3o+eR4svAtngpAHk6W2S\nkuJgJe7acX+2B4UjZEHcviWSduYkQcOS5in7RrZn7nkPZmylE4HaKKnZRBd9AZe5\n5eY8Fz3YGmPFiJVlXZuGU16uc5J63PJU/AsBqVwKSlljxu6mJIpWYunBIDEu055G\nryQhqRLiIcpohrkm0INFT7jrIx/V461Bv08Oqvws9Mky0QTHr144rJA2OiXjHvZS\n5btc6tELy1CjF1cpESb4dJhbukKb2fpGBzsvOz9R4QyLmVUDyK5FTGoxPRsZ5x14\nHkvSe0TXdD2MRMSZcK9+16JFhUWocP89L9ZH3yt6f7fHbpsH2PkGnYH9kwTneozL\n+EZj6K/ttx2DIUIirngADpGh3JqZmrxhqg1n9WSVfSKE0LSxd1VaZrp3Pfu2Xisq\nZifu7fjrzN0u8+qiK280ixk8kiDasMGvdEMcip61WHkNxPZzvIo=\n=neMP\n-----END PGP SIGNATURE-----",
        "payload": "tree 1d057bf971ee0cdf01aad46752e37d24fc09b166\nparent 27786d072dbcf65cba9110f1dd171f94b6abc107\nauthor Andrew Chow <achow101-github@achow101.com> 1591328605 -0400\ncommitter fanquake <fanquake@gmail.com> 1593738942 +0800\n\nrpc: show both UTXOs in decodepsbt\n\nGithub-Pull: #19215\nRebased-From: 72f6bec1da198764d4648a10a61c485e7ab65e9e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e0e6f85247c8b9e0b0f039bc31c434632c2982",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68e0e6f85247c8b9e0b0f039bc31c434632c2982",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e0e6f85247c8b9e0b0f039bc31c434632c2982/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27786d072dbcf65cba9110f1dd171f94b6abc107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27786d072dbcf65cba9110f1dd171f94b6abc107",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27786d072dbcf65cba9110f1dd171f94b6abc107"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "746900fdab186126ca57d07530bef744c8beccee",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68e0e6f85247c8b9e0b0f039bc31c434632c2982/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68e0e6f85247c8b9e0b0f039bc31c434632c2982/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=68e0e6f85247c8b9e0b0f039bc31c434632c2982",
        "patch": "@@ -1116,6 +1116,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n         const PSBTInput& input = psbtx.inputs[i];\n         UniValue in(UniValue::VOBJ);\n         // UTXOs\n+        bool have_a_utxo = false;\n         if (!input.witness_utxo.IsNull()) {\n             const CTxOut& txout = input.witness_utxo;\n \n@@ -1133,7 +1134,9 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             ScriptToUniv(txout.scriptPubKey, o, true);\n             out.pushKV(\"scriptPubKey\", o);\n             in.pushKV(\"witness_utxo\", out);\n-        } else if (input.non_witness_utxo) {\n+            have_a_utxo = true;\n+        }\n+        if (input.non_witness_utxo) {\n             UniValue non_wit(UniValue::VOBJ);\n             TxToUniv(*input.non_witness_utxo, uint256(), non_wit, false);\n             in.pushKV(\"non_witness_utxo\", non_wit);\n@@ -1144,7 +1147,9 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n                 // Hack to just not show fee later\n                 have_all_utxos = false;\n             }\n-        } else {\n+            have_a_utxo = true;\n+        }\n+        if (!have_a_utxo) {\n             have_all_utxos = false;\n         }\n "
      }
    ]
  },
  {
    "sha": "ed5ec3080419445c0af7410c0af7a421704841a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDVlYzMwODA0MTk0NDVjMGFmNzQxMGMwYWY3YTQyMTcwNDg0MWE2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-05T03:43:39Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:18:54Z"
      },
      "message": "psbt: Allow both non_witness_utxo and witness_utxo\n\nGithub-Pull: #19215\nRebased-From: 5279d8bc07d601fe6a67ad665fbc7591fe73c7de",
      "tree": {
        "sha": "564f95ca4b2c6755c3bb5553cef4a9f2dd3406f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/564f95ca4b2c6755c3bb5553cef4a9f2dd3406f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed5ec3080419445c0af7410c0af7a421704841a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+h5MACgkQLuufXMCV\nJsFNHRAAt1hZEMrc6EtBNpiECQo41F68X11nvoAPbN8+n8urpJJ78K0pMaXS33dI\nqCDlRZm6iJCn0OYOCQF+sYrbBFMzpXARoZZsEpU9HqGFX4YDRx07+IryKki1+tE+\n3naPnhg8vvBTK9FYHyAyygSusVIFoTFE3VNPs+qZ1lYpGY00WEpASl2XupoRACM4\n6lYpGcHTvAq+Hebj0+0aISsV3aSnm+Vfq137WgDrxmlty6kux73AzoY1P2hmwwqk\nMjHkB7yWXuTF/l+nipCGKSIwGXcD2gT4XWRXLX4Ra8/lb5wDjdSM7ZnmjsJCcx8J\nTx2a4ZeefTtGm14V9dC6p9ZkceX49Bq72U3+Yk16juuXAt/DqkNywA90YSjPd4cb\nmmOVgmuHe30akrSbX1AzFWb+FfPyJNMRmUbuvBJqA66C2f/m2EMApqYC9k9CfuMQ\naPZTws0emZfDYTunNWHB827LEftUkjswcdfX5qmINrWEJLiTCkVso+WviaqRksFx\nLCt5Vez5bLNMVUP6NMSn2rnLTuolCm4B2yOrzCSwSSH95ggkiK4Pf3JoBgxf1SEz\nXjClncJs4nSd45xv3k/LBrfIH4zU9bvngYonTerdykUD+DVkTBv+LQ6cErZu4VWm\ny6QmVCvbOFjRG5pXnmwOZ7E1kPOl4AxQB3JN0v71B4Tluf0Lp7U=\n=A//m\n-----END PGP SIGNATURE-----",
        "payload": "tree 564f95ca4b2c6755c3bb5553cef4a9f2dd3406f1\nparent 68e0e6f85247c8b9e0b0f039bc31c434632c2982\nauthor Andrew Chow <achow101-github@achow101.com> 1591328619 -0400\ncommitter fanquake <fanquake@gmail.com> 1593739134 +0800\n\npsbt: Allow both non_witness_utxo and witness_utxo\n\nGithub-Pull: #19215\nRebased-From: 5279d8bc07d601fe6a67ad665fbc7591fe73c7de\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed5ec3080419445c0af7410c0af7a421704841a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed5ec3080419445c0af7410c0af7a421704841a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed5ec3080419445c0af7410c0af7a421704841a6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68e0e6f85247c8b9e0b0f039bc31c434632c2982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e0e6f85247c8b9e0b0f039bc31c434632c2982",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68e0e6f85247c8b9e0b0f039bc31c434632c2982"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 0,
      "deletions": 48
    },
    "files": [
      {
        "sha": "ff17981fd8c8cfde85f1be9bff777c16ebd18a62",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed5ec3080419445c0af7410c0af7a421704841a6/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed5ec3080419445c0af7410c0af7a421704841a6/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=ed5ec3080419445c0af7410c0af7a421704841a6",
        "patch": "@@ -35,14 +35,6 @@ bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n     return true;\n }\n \n-bool PartiallySignedTransaction::IsSane() const\n-{\n-    for (PSBTInput input : inputs) {\n-        if (!input.IsSane()) return false;\n-    }\n-    return true;\n-}\n-\n bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n {\n     if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {\n@@ -158,18 +150,6 @@ void PSBTInput::Merge(const PSBTInput& input)\n     if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n }\n \n-bool PSBTInput::IsSane() const\n-{\n-    // Cannot have both witness and non-witness utxos\n-    if (!witness_utxo.IsNull() && non_witness_utxo) return false;\n-\n-    // If we have a witness_script or a scriptWitness, we must also have a witness utxo\n-    if (!witness_script.empty() && witness_utxo.IsNull()) return false;\n-    if (!final_script_witness.IsNull() && witness_utxo.IsNull()) return false;\n-\n-    return true;\n-}\n-\n void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n {\n     if (!redeem_script.empty()) {\n@@ -250,11 +230,6 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     bool require_witness_sig = false;\n     CTxOut utxo;\n \n-    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n-    if (!input.IsSane()) {\n-        return false;\n-    }\n-\n     if (input.non_witness_utxo) {\n         // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n         COutPoint prevout = tx.vin[index].prevout;\n@@ -345,10 +320,6 @@ TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector\n             return TransactionError::PSBT_MISMATCH;\n         }\n     }\n-    if (!out.IsSane()) {\n-        return TransactionError::INVALID_PSBT;\n-    }\n-\n     return TransactionError::OK;\n }\n "
      },
      {
        "sha": "1f7f84af6b2519163833c59f3ee1eef593116510",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed5ec3080419445c0af7410c0af7a421704841a6/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed5ec3080419445c0af7410c0af7a421704841a6/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ed5ec3080419445c0af7410c0af7a421704841a6",
        "patch": "@@ -58,7 +58,6 @@ struct PSBTInput\n     void FillSignatureData(SignatureData& sigdata) const;\n     void FromSignatureData(const SignatureData& sigdata);\n     void Merge(const PSBTInput& input);\n-    bool IsSane() const;\n     PSBTInput() {}\n \n     template <typename Stream>\n@@ -280,7 +279,6 @@ struct PSBTOutput\n     void FillSignatureData(SignatureData& sigdata) const;\n     void FromSignatureData(const SignatureData& sigdata);\n     void Merge(const PSBTOutput& output);\n-    bool IsSane() const;\n     PSBTOutput() {}\n \n     template <typename Stream>\n@@ -397,7 +395,6 @@ struct PartiallySignedTransaction\n     /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n     NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n-    bool IsSane() const;\n     bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n     bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n@@ -547,10 +544,6 @@ struct PartiallySignedTransaction\n         if (outputs.size() != tx->vout.size()) {\n             throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n         }\n-        // Sanity check\n-        if (!IsSane()) {\n-            throw std::ios_base::failure(\"PSBT is not sane.\");\n-        }\n     }\n \n     template <typename Stream>"
      },
      {
        "sha": "fe8bd2081670df80b2817e063e070b7a8b77ff65",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed5ec3080419445c0af7410c0af7a421704841a6/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed5ec3080419445c0af7410c0af7a421704841a6/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=ed5ec3080419445c0af7410c0af7a421704841a6",
        "patch": "@@ -39,7 +39,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n \n     (void)psbt.IsNull();\n-    (void)psbt.IsSane();\n \n     Optional<CMutableTransaction> tx = psbt.tx;\n     if (tx) {\n@@ -50,7 +49,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     for (const PSBTInput& input : psbt.inputs) {\n         (void)PSBTInputSigned(input);\n         (void)input.IsNull();\n-        (void)input.IsSane();\n     }\n \n     for (const PSBTOutput& output : psbt.outputs) {"
      },
      {
        "sha": "8863e394ebd57044d8dba8720a4c986b7f2c4dee",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed5ec3080419445c0af7410c0af7a421704841a6/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed5ec3080419445c0af7410c0af7a421704841a6/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ed5ec3080419445c0af7410c0af7a421704841a6",
        "patch": "@@ -536,11 +536,6 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n             continue;\n         }\n \n-        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n-        if (!input.IsSane()) {\n-            return TransactionError::INVALID_PSBT;\n-        }\n-\n         // Get the Sighash type\n         if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n             return TransactionError::SIGHASH_MISMATCH;"
      },
      {
        "sha": "a6962ba428b087475705addca4b9d10275ef498d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed5ec3080419445c0af7410c0af7a421704841a6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed5ec3080419445c0af7410c0af7a421704841a6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ed5ec3080419445c0af7410c0af7a421704841a6",
        "patch": "@@ -2517,11 +2517,6 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             continue;\n         }\n \n-        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n-        if (!input.IsSane()) {\n-            return TransactionError::INVALID_PSBT;\n-        }\n-\n         // If we have no utxo, grab it from the wallet.\n         if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n             const uint256& txhash = txin.prevout.hash;"
      }
    ]
  },
  {
    "sha": "3228b59b1761a80bca6aa7309cb46db5acafc905",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjI4YjU5YjE3NjFhODBiY2E2YWE3MzA5Y2I0NmRiNWFjYWZjOTA1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-05T03:43:43Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:21:42Z"
      },
      "message": "psbt: always put a non_witness_utxo and don't remove it\n\nOffline signers will always need a non_witness_utxo so make sure it is\nthere.\n\nGithub-Pull: #19215\nRebased-From: 46004790588c24174a0bec49b540d158ce163ffd",
      "tree": {
        "sha": "8b92f26b142fbc3f9855fb1dfb431b2a230266f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b92f26b142fbc3f9855fb1dfb431b2a230266f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3228b59b1761a80bca6aa7309cb46db5acafc905",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+iDgACgkQLuufXMCV\nJsF/Pg//TL79qHO3gxqeozGPE4eEtBeo8p0l3Kaiia7SkG4gqAQeFhdtWV+IMqy5\nXntFrkOacMbBaCqULKHJgwgTAuYly2R8xywdwJM8fXySx6XIw+CMHkLWj+lwuJgH\nu7la+cemz8W5CK0bZbUg2GUfflTdi7MXo0qSlVTc/5zBRue7wN3v5kqZzNO0vnre\nHmvy63I+sFWiuRDuMLjRQJ639BQu41KuPTTC/MRjKGfcnfIKhRvEbetif8vHmd1X\nrBZ7Kuqy3oMmx7snhRInELQWHpussvewk7ziaSixxRdtGmU91C2VpQZM69AAA13g\nFgOq1mNjoi2ThSh8J7RzwTDHNwQpH7WV7knXjsU1m1RG3u/u7awT5SFJu4SUJhU4\n75ihWUHNJyLW1wNCyfV8kArBOMcvU6guKhM+PkMIPhEcn0v7qOHzEeAEAsYHmECK\nn7Rz/Lfx0PSrWpLBwBAj1y/927St9Vv+d1M9MK6REGFVvncNwvVCLmhxRlzBw2Yf\nFCKnWoXeDBuIu+6daVnqDeDLe2GGp9d8DrEhC93sWVA9XerH4nvDbc2CJOFlErXq\naZ015wpaV5JKaofxRogdndc+oEgELUPp/ZJuTXR0Twbgelq4kftjSEEBPLM78wpN\nbAfprNxRaRsldHFc3BNX+JECKcDcQMvcR20w3fcM0wmqroPYms0=\n=e8eF\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b92f26b142fbc3f9855fb1dfb431b2a230266f9\nparent ed5ec3080419445c0af7410c0af7a421704841a6\nauthor Andrew Chow <achow101-github@achow101.com> 1591328623 -0400\ncommitter fanquake <fanquake@gmail.com> 1593739302 +0800\n\npsbt: always put a non_witness_utxo and don't remove it\n\nOffline signers will always need a non_witness_utxo so make sure it is\nthere.\n\nGithub-Pull: #19215\nRebased-From: 46004790588c24174a0bec49b540d158ce163ffd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3228b59b1761a80bca6aa7309cb46db5acafc905",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3228b59b1761a80bca6aa7309cb46db5acafc905",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3228b59b1761a80bca6aa7309cb46db5acafc905/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed5ec3080419445c0af7410c0af7a421704841a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed5ec3080419445c0af7410c0af7a421704841a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed5ec3080419445c0af7410c0af7a421704841a6"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "bfa9e3c667c4cc56be37e3d0d4b4ca3b8c6ae60d",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3228b59b1761a80bca6aa7309cb46db5acafc905/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3228b59b1761a80bca6aa7309cb46db5acafc905/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=3228b59b1761a80bca6aa7309cb46db5acafc905",
        "patch": "@@ -136,8 +136,8 @@ void PSBTInput::Merge(const PSBTInput& input)\n {\n     if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n     if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n+        // TODO: For segwit v1, we will want to clear out the non-witness utxo when setting a witness one. For v0 and non-segwit, this is not safe\n         witness_utxo = input.witness_utxo;\n-        non_witness_utxo = nullptr; // Clear out any non-witness utxo when we set a witness one.\n     }\n \n     partial_sigs.insert(input.partial_sigs.begin(), input.partial_sigs.end());\n@@ -263,10 +263,11 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n \n-    // If we have a witness signature, use the smaller witness UTXO.\n+    // If we have a witness signature, put a witness UTXO.\n+    // TODO: For segwit v1, we should remove the non_witness_utxo\n     if (sigdata.witness) {\n         input.witness_utxo = utxo;\n-        input.non_witness_utxo = nullptr;\n+        // input.non_witness_utxo = nullptr;\n     }\n \n     // Fill in the missing info"
      },
      {
        "sha": "6eb411e3a43de62c0798427a605fad46948a3801",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3228b59b1761a80bca6aa7309cb46db5acafc905/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3228b59b1761a80bca6aa7309cb46db5acafc905/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=3228b59b1761a80bca6aa7309cb46db5acafc905",
        "patch": "@@ -63,12 +63,12 @@ struct PSBTInput\n     template <typename Stream>\n     inline void Serialize(Stream& s) const {\n         // Write the utxo\n-        // If there is a non-witness utxo, then don't add the witness one.\n         if (non_witness_utxo) {\n             SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n             OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n             SerializeToVector(os, non_witness_utxo);\n-        } else if (!witness_utxo.IsNull()) {\n+        }\n+        if (!witness_utxo.IsNull()) {\n             SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n             SerializeToVector(s, witness_utxo);\n         }"
      },
      {
        "sha": "f751ba5a3a60c9ead26a43f51c4ef3f7fa96eefa",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3228b59b1761a80bca6aa7309cb46db5acafc905/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3228b59b1761a80bca6aa7309cb46db5acafc905/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=3228b59b1761a80bca6aa7309cb46db5acafc905",
        "patch": "@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n     std::string final_hex = HexStr(ssTx.begin(), ssTx.end());\n-    BOOST_CHECK_EQUAL(final_hex, \"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000\");\n+    BOOST_CHECK_EQUAL(final_hex, \"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001008a020000000158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8876500000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000\");\n \n     // Mutate the transaction so that one of the inputs is invalid\n     psbtx.tx->vin[0].prevout.n = 2;"
      },
      {
        "sha": "4394b2748a87512b959612514d6093b3e38382fe",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3228b59b1761a80bca6aa7309cb46db5acafc905/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3228b59b1761a80bca6aa7309cb46db5acafc905/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3228b59b1761a80bca6aa7309cb46db5acafc905",
        "patch": "@@ -2518,7 +2518,7 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n         }\n \n         // If we have no utxo, grab it from the wallet.\n-        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+        if (!input.non_witness_utxo) {\n             const uint256& txhash = txin.prevout.hash;\n             const auto it = mapWallet.find(txhash);\n             if (it != mapWallet.end()) {"
      },
      {
        "sha": "285c38161cb1c8a67a2e7b2b1800f834ad67226b",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3228b59b1761a80bca6aa7309cb46db5acafc905/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3228b59b1761a80bca6aa7309cb46db5acafc905/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=3228b59b1761a80bca6aa7309cb46db5acafc905",
        "patch": "@@ -37,6 +37,7 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    # TODO: Re-enable this test with segwit v1\n     def test_utxo_conversion(self):\n         mining_node = self.nodes[2]\n         offline_node = self.nodes[0]\n@@ -326,7 +327,8 @@ def run_test(self):\n         for i, signer in enumerate(signers):\n             self.nodes[2].unloadwallet(\"wallet{}\".format(i))\n \n-        self.test_utxo_conversion()\n+        # TODO: Re-enable this for segwit v1\n+        # self.test_utxo_conversion()\n \n         # Test that psbts with p2pkh outputs are created properly\n         p2pkh = self.nodes[0].getnewaddress(address_type='legacy')"
      }
    ]
  },
  {
    "sha": "cf0b5a933da540416b530ca6eb0259ab18cc6548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjBiNWE5MzNkYTU0MDQxNmI1MzBjYTZlYjAyNTlhYjE4Y2M2NTQ4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-08T23:27:16Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:22:21Z"
      },
      "message": "tests: Check that segwit inputs in psbt have both UTXO types\n\nGithub-Pull: #19215\nRebased-From: 84d295e51341a126a6c3cbeea7a8caa04c7b5bc3",
      "tree": {
        "sha": "9feca7935e846429041955d37121b04eb45c0652",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9feca7935e846429041955d37121b04eb45c0652"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf0b5a933da540416b530ca6eb0259ab18cc6548",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+iFwACgkQLuufXMCV\nJsEB1Q//QDOfSo9xru9c8j/RdNY/NVrWU2EYRXj+2Tkzx9fYNPZbdXcFFiNSkoxu\nKWxushbzeodViObgapAFU9o/H0Rl4UaA0KgGwNDQsXNPDlb2p7LtLM/hjGiUDXfh\n69Yzsv4Xoo4h518Z691yNelb6zG/GB6LJ1huDWrhB0tCKN28WFO8hQZpLxn84V8o\n6BvaqY/Snxdwm8vdABMHDLUmvcgkgzT6xnuPzG5JdDsyJIrnpw9sKy6Sab8Ed6Cw\nEyU+It24l4r4r4SDiEFSEU5uAdlkX5yvdYJ4fb7/jShSk6RPtoLB3REYFJyVIm8H\nTCSQAZZwpWnzVknaEPzF4BQghB+pVfaSu6nHarf6hIerLs99nOtHTC4Q3r+nVTxC\nXCXJB2B+scnlfYOYaZGLKubQAxEREo6OByrMMV/NPf/t1p+lre+a4/BbYMSUriaO\nRfsnXbW15lWMh6Y9vWmFjik/H6VCsChuKHwjwSoQWR6pBdnEI3aWYChbRAwxEYK3\nlZ69u247Rzia9PfBMoUnqf2h7vzVfcdEpmC9QirL05+62tqrSTZ3oaSpaL4ox2Mo\nUWxUW9AI7105hHrkhxzMUXhUlkJTcOZZB5emYKKmBZR6RmVj7S621d8H4cxuY1H+\nbDVcUjskHdOVFemztUTbROvTXYeQjWseDioZpFqviYguvKFBxtA=\n=Ccsm\n-----END PGP SIGNATURE-----",
        "payload": "tree 9feca7935e846429041955d37121b04eb45c0652\nparent 3228b59b1761a80bca6aa7309cb46db5acafc905\nauthor Andrew Chow <achow101-github@achow101.com> 1591658836 -0400\ncommitter fanquake <fanquake@gmail.com> 1593739341 +0800\n\ntests: Check that segwit inputs in psbt have both UTXO types\n\nGithub-Pull: #19215\nRebased-From: 84d295e51341a126a6c3cbeea7a8caa04c7b5bc3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0b5a933da540416b530ca6eb0259ab18cc6548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf0b5a933da540416b530ca6eb0259ab18cc6548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0b5a933da540416b530ca6eb0259ab18cc6548/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3228b59b1761a80bca6aa7309cb46db5acafc905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3228b59b1761a80bca6aa7309cb46db5acafc905",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3228b59b1761a80bca6aa7309cb46db5acafc905"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b8586f255ce607768428a80b6b51cb6c96b4df5d",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0b5a933da540416b530ca6eb0259ab18cc6548/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0b5a933da540416b530ca6eb0259ab18cc6548/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=cf0b5a933da540416b530ca6eb0259ab18cc6548",
        "patch": "@@ -134,6 +134,10 @@ def run_test(self):\n         # spend single key from node 1\n         rawtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(rawtx)\n+        # Make sure it has both types of UTXOs\n+        decoded = self.nodes[1].decodepsbt(walletprocesspsbt_out['psbt'])\n+        assert 'non_witness_utxo' in decoded['inputs'][0]\n+        assert 'witness_utxo' in decoded['inputs'][0]\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n "
      }
    ]
  },
  {
    "sha": "c9b49d28563487e76169c7749b309244cabc70bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWI0OWQyODU2MzQ4N2U3NjE2OWM3NzQ5YjMwOTI0NGNhYmM3MGJk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-06-17T09:47:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:51:24Z"
      },
      "message": "wallet: Handle concurrent wallet loading\n\nGithub-Pull: #19300\nRebased-From: b9971ae5853c1d62e09d976a8705f4f731290d85",
      "tree": {
        "sha": "a72f81f07246c6a70180a998fff090bee7ad10e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a72f81f07246c6a70180a998fff090bee7ad10e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9b49d28563487e76169c7749b309244cabc70bd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+jx4ACgkQLuufXMCV\nJsGaIw/+Pp0rCIrMcLHoummw/taUigi7sn6FP9pOZrbe5K5AnGu/6eTbosSINO5p\nbSwmgVneS+/zsRvO6uwW44iHwt19YEW6q0+ELHXUchIvvIXPi7T0TJQ8rqLkPFrO\nQYY5bWlhnmklFpahPQXrm65ec+KTOh7xMukv8WETKjO8xLKkhxo6MsCYAoHEt1nG\nIelet3K5TbCnbv3Bf9TWoFVZs5CYvoE9cdZFyJ90FSCxOSdapFepNEdlz/4++s6a\n/U7serOfguvd8D3O7mzJ6w/C40vLPnLR5XGrCDo4RscLwzWr2mE1FSSkWTyxDGfU\niuQXsBwZ4qfk1ojI7zELdT32peuqSL/W7hAHwbYu36rNHMRWpz+fKel04d1Z1YyL\nc9qL8kgi5MnBpr6dQi9FbXkV8d8f0Anofrr63E9Njl475ue5gNqtZJmWm3+E6Snt\n7p02TiVn1kjmRaT8+tPj9OizgXxnM2VUcK3ADsan8OgO8K5M90d/sBcmxaj6WSRN\nHjXNYB65liG/0pdaNQgSkdo4Ol6Gi9HWF17JMwD3Dz9Wr1WBoLAJCjH2mBh40Kux\n3duAp5eB0bITsgqlPLsz/DFP899iKx2NvvNFMomFR+8DzyKdUeDOs4cWRO1cjZ2H\n63K9ok/O7rKDwfAenDn3RycBIKByfGiHAVeovlX1ZeOglrnXPgU=\n=qoS5\n-----END PGP SIGNATURE-----",
        "payload": "tree a72f81f07246c6a70180a998fff090bee7ad10e4\nparent cf0b5a933da540416b530ca6eb0259ab18cc6548\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1592387249 +0100\ncommitter fanquake <fanquake@gmail.com> 1593741084 +0800\n\nwallet: Handle concurrent wallet loading\n\nGithub-Pull: #19300\nRebased-From: b9971ae5853c1d62e09d976a8705f4f731290d85\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9b49d28563487e76169c7749b309244cabc70bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9b49d28563487e76169c7749b309244cabc70bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9b49d28563487e76169c7749b309244cabc70bd/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf0b5a933da540416b530ca6eb0259ab18cc6548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0b5a933da540416b530ca6eb0259ab18cc6548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf0b5a933da540416b530ca6eb0259ab18cc6548"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "af3f9583497740b650bbfea868d2bfa8d2887ddc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9b49d28563487e76169c7749b309244cabc70bd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9b49d28563487e76169c7749b309244cabc70bd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c9b49d28563487e76169c7749b309244cabc70bd",
        "patch": "@@ -101,9 +101,11 @@ std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet)\n     return interfaces::MakeHandler([it] { LOCK(cs_wallets); g_load_wallet_fns.erase(it); });\n }\n \n+static Mutex g_loading_wallet_mutex;\n static Mutex g_wallet_release_mutex;\n static std::condition_variable g_wallet_release_cv;\n-static std::set<std::string> g_unloading_wallet_set;\n+static std::set<std::string> g_loading_wallet_set GUARDED_BY(g_loading_wallet_mutex);\n+static std::set<std::string> g_unloading_wallet_set GUARDED_BY(g_wallet_release_mutex);\n \n // Custom deleter for shared_ptr<CWallet>.\n static void ReleaseWallet(CWallet* wallet)\n@@ -147,7 +149,8 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     }\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings)\n+namespace {\n+std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings)\n {\n     try {\n         if (!CWallet::Verify(chain, location, false, error, warnings)) {\n@@ -168,6 +171,19 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocati\n         return nullptr;\n     }\n }\n+} // namespace\n+\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings)\n+{\n+    auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(location.GetName()));\n+    if (!result.second) {\n+        error = \"Wallet already being loading.\";\n+        return nullptr;\n+    }\n+    auto wallet = LoadWalletInternal(chain, location, error, warnings);\n+    WITH_LOCK(g_loading_wallet_mutex, g_loading_wallet_set.erase(result.first));\n+    return wallet;\n+}\n \n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n {"
      }
    ]
  },
  {
    "sha": "eb6b82a5586a0cea5b72c376ff377a7322acb588",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjZiODJhNTU4NmEwY2VhNWI3MmMzNzZmZjM3N2E3MzIyYWNiNTg4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-06-17T13:00:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:58:17Z"
      },
      "message": "qa: Test concurrent wallet loading\n\nGithub-Pull: #19300\nRebased-From: 9b009fae6e2eb0ab2ee7ce7882c3556a9ac363a7",
      "tree": {
        "sha": "33bb58d49b9b9c329d1a9713eeb029846c702434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33bb58d49b9b9c329d1a9713eeb029846c702434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb6b82a5586a0cea5b72c376ff377a7322acb588",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+kLoACgkQLuufXMCV\nJsHRNg//W21eQTYLX0jiLwoSFh5nR1Rn+e+gD+ija090PlcPZLE+mWTX6sRCpD5U\nRL8YbZ9brHIkJ6/edt+HKUUXTf8vpnv0fd5Q9XCnX05BHRQDcDWxBQyRnt9EHWcj\nV8Rr0ofv3rYFlc4m1xhthFzYcZsXPTAfX5hnI2T3pxsdSlST5hOO0PQnIoWKHbDk\noKm2lnfD2IRCJtQiCOkNsDg3RbuTzbjTRMNi7emONt0DYdPCc5Pzj7+rcRTdSb7m\nGjsSNEDUC30D84rOSgfYd3tAoUMqXRzF54+JuWFF4KpNg8wvXK1Kqmq9YUxcRuoM\nLkfRXJA7UqxdghWRafe5bY+yKRZsSICjUu75oEmJeNS/EdZ4kZDkqx7H0y3S8uiD\nzDpertzGeoeJyxiMNquBkeMiE8OwGr0Hy74YVsjXzrKqYb6h2Nhq+SwsljobZuK+\n2tiGCEJFgbI74TbktKyfLxq74x9girp91aq2bEi7P0S930SYAoeXJZS+LOVxK7gX\nAInBxuFqjdZQujRlrMuOyssUxNzutf3sD5QoaYdj29dM0+ZtRg+RekcGwHCY8GVz\nkjAz94dL14X7dsh+0YIwOxF/ugzKwcfUF6U1K5OxDV3u9oKyeBzmNaC1vj8Zpz4W\n7F1n/m8766qBZDVlS6P0GeuraR4O9FWHttaH5fqRHgrRvI73JX8=\n=cHPm\n-----END PGP SIGNATURE-----",
        "payload": "tree 33bb58d49b9b9c329d1a9713eeb029846c702434\nparent c9b49d28563487e76169c7749b309244cabc70bd\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1592398825 +0100\ncommitter fanquake <fanquake@gmail.com> 1593741497 +0800\n\nqa: Test concurrent wallet loading\n\nGithub-Pull: #19300\nRebased-From: 9b009fae6e2eb0ab2ee7ce7882c3556a9ac363a7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b82a5586a0cea5b72c376ff377a7322acb588",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6b82a5586a0cea5b72c376ff377a7322acb588",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b82a5586a0cea5b72c376ff377a7322acb588/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9b49d28563487e76169c7749b309244cabc70bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9b49d28563487e76169c7749b309244cabc70bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9b49d28563487e76169c7749b309244cabc70bd"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "294de76b7bd401a9e003024868bda63c74cde7b1",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb6b82a5586a0cea5b72c376ff377a7322acb588/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb6b82a5586a0cea5b72c376ff377a7322acb588/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=eb6b82a5586a0cea5b72c376ff377a7322acb588",
        "patch": "@@ -6,19 +6,36 @@\n \n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n+from threading import Thread\n import os\n import shutil\n import time\n \n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.test_node import ErrorMatch\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n+    get_rpc_proxy,\n )\n \n FEATURE_LATEST = 169900\n \n+got_loading_error = False\n+def test_load_unload(node, name):\n+    global got_loading_error\n+    for i in range(10):\n+        if got_loading_error:\n+            return\n+        try:\n+            node.loadwallet(name)\n+            node.unloadwallet(name)\n+        except JSONRPCException as e:\n+            if e.error['code'] == -4 and 'Wallet already being loading' in e.error['message']:\n+                got_loading_error = True\n+                return\n+\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -219,6 +236,18 @@ def wallet_file(name):\n         w2 = node.get_wallet_rpc(wallet_names[1])\n         w2.getwalletinfo()\n \n+        self.log.info(\"Concurrent wallet loading\")\n+        threads = []\n+        for _ in range(3):\n+            n = node.cli if self.options.usecli else get_rpc_proxy(node.url, 1, timeout=600, coveragedir=node.coverage_dir)\n+            t = Thread(target=test_load_unload, args=(n, wallet_names[2], ))\n+            t.start()\n+            threads.append(t)\n+        for t in threads:\n+            t.join()\n+        global got_loading_error\n+        assert_equal(got_loading_error, True)\n+\n         self.log.info(\"Load remaining wallets\")\n         for wallet_name in wallet_names[2:]:\n             loadwallet_name = self.nodes[0].loadwallet(wallet_name)"
      }
    ]
  },
  {
    "sha": "e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2YwNmY5YjBlODRhNjU4MTJkMjRmZjZlZmE0YmMyZDNkODE4NTkw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:59:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-03T01:59:33Z"
      },
      "message": "test: remove Cirrus CI FreeBSD job\n\nThis has been removed from the master branch, and always seems to fail\nat the installing packages phase. i.e:\n```bash\npkg install -y autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache\nUpdating FreeBSD repository catalogue...\nFetching meta.txz: . done\npkg: repository meta /var/db/pkg/FreeBSD.meta has wrong version 2\nrepository FreeBSD has no meta file, using default settings\nFetching packagesite.txz: .......... done\npkg: repository meta /var/db/pkg/FreeBSD.meta has wrong version 2\npkg: Repository FreeBSD load error: meta cannot be loaded No error: 0\nUnable to open created repository FreeBSD\nUnable to update repository FreeBSD\nError updating repositories!\n\nExit status: 3\n```",
      "tree": {
        "sha": "66e9e40e66672d9154bc88386bbafb0e244f2dbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66e9e40e66672d9154bc88386bbafb0e244f2dbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7+kTwACgkQLuufXMCV\nJsE0ABAAhZYqG9vqC6aGBAJmtrLw+UQcCjH7Bbya9kzF2qgQONQ4U4pjHFVN1Uhu\n/opqmIq1qRz2VwFbB2wKA8jPgHCXmhejD0bfX8HE8rvY21j0sQ10H2O49/VAIi+Y\n8O3eVVFsuHdacuBTE5yinMFZ7MLIaclbFrvmwXA9giTtnc7OaYLesFE19OLmSUUk\nvsdZAw2X6RdSO8IPGIKGI4OGs7uRcTETHu/ak1kVRqU92TusSSiJllgS10OwTZ5E\njjn74dEGXx40UYJn21Lsl+oWVfqnmUIOa+QL4Luh813gtN/5Y2i+YJrMhtglZMnw\nv9U9oQGFsFfbL/xf4qlA4V8RakhrmghaTHxc8a4LTeVzzm0GUret/6bWCZDLNNhR\niZhJc9xpklUSiiM0Q4SP4w7UvPd3KXgf77QUPYGKhysYTSgsDBEZeQu7GfEH/zam\nC2j+MCan0EU0P7ak31G+QweTPoaJkeKWMrexMwd6eTA4uYFVIft8jt3Jsq+4lXx1\nKdh/0y3iL9jJmacV74FHvOwuSRInfSXmbLlL+VOiOqS2IpsruGyJ9RdAl1Wj10ra\noeu96Ssp3HHKa94/vr2SztT1KdaqPLMswqAHTh246P3Qd2iVcDXiThzk6Bsti+E3\nwmE/M4d1XGT0Lxg0rW83uu22PRzthLYD1+UAK9UruWPKXB869cI=\n=p89t\n-----END PGP SIGNATURE-----",
        "payload": "tree 66e9e40e66672d9154bc88386bbafb0e244f2dbd\nparent eb6b82a5586a0cea5b72c376ff377a7322acb588\nauthor fanquake <fanquake@gmail.com> 1593741573 +0800\ncommitter fanquake <fanquake@gmail.com> 1593741573 +0800\n\ntest: remove Cirrus CI FreeBSD job\n\nThis has been removed from the master branch, and always seems to fail\nat the installing packages phase. i.e:\n```bash\npkg install -y autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache\nUpdating FreeBSD repository catalogue...\nFetching meta.txz: . done\npkg: repository meta /var/db/pkg/FreeBSD.meta has wrong version 2\nrepository FreeBSD has no meta file, using default settings\nFetching packagesite.txz: .......... done\npkg: repository meta /var/db/pkg/FreeBSD.meta has wrong version 2\npkg: Repository FreeBSD load error: meta cannot be loaded No error: 0\nUnable to open created repository FreeBSD\nUnable to update repository FreeBSD\nError updating repositories!\n\nExit status: 3\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb6b82a5586a0cea5b72c376ff377a7322acb588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b82a5586a0cea5b72c376ff377a7322acb588",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6b82a5586a0cea5b72c376ff377a7322acb588"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 0,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f680715f2fe364cfaec8788e30345685e590918a",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
        "patch": "@@ -1,33 +1,3 @@\n-task:\n-  name: \"FreeBsd 12.0 amd64  [GOAL: install]  [no depends, only system libs]\"\n-  freebsd_instance:\n-    image: freebsd-12-0-release-amd64\n-    cpu: 8\n-    memory: 8G\n-  timeout_in: 60m\n-  env:\n-    MAKEJOBS: \"-j9\"\n-    CONFIGURE_OPTS: \"--disable-dependency-tracking\"\n-    GOAL: \"install\"\n-    TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n-    CCACHE_SIZE: \"200M\"\n-    CCACHE_COMPRESS: 1\n-    CCACHE_DIR: \"/tmp/ccache_dir\"\n-  ccache_cache:\n-    folder: \"/tmp/ccache_dir\"\n-  install_script:\n-    - pkg install -y autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache\n-    - ./contrib/install_db4.sh $(pwd)\n-    - ccache --max-size=${CCACHE_SIZE}\n-  configure_script:\n-    - ./autogen.sh\n-    - ./configure ${CONFIGURE_OPTS} BDB_LIBS=\"-L$(pwd)/db4/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I$(pwd)/db4/include\" || ( cat config.log && false)\n-  make_script:\n-    - gmake ${MAKEJOBS} ${GOAL} || ( echo \"Build failure. Verbose build follows.\" && gmake ${GOAL} V=1 ; false )\n-  check_script:\n-    - gmake check ${MAKEJOBS} VERBOSE=1\n-  functional_test_script:\n-    - ./test/functional/test_runner.py --jobs 9 --ci --extended --exclude feature_dbcrash --combinedlogslen=1000 --quiet --failfast\n task:\n   name: \"x86_64 Linux  [GOAL: install]  [bionic]  [Using ./ci/ system]\"\n   container:"
      }
    ]
  },
  {
    "sha": "04773480575ac79f238ac5764247dddd0cae5051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDc3MzQ4MDU3NWFjNzlmMjM4YWM1NzY0MjQ3ZGRkZDBjYWU1MDUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-09T01:46:53Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-08T01:09:46Z"
      },
      "message": "Replace automatic bans with discouragement filter\n\nThis patch improves performance and resource usage around IP\naddresses that are banned for misbehavior. They're already not\nactually banned, as connections from them are still allowed,\nbut they are preferred for eviction if the inbound connection\nslots are full.\n\nStop treating these like manually banned IP ranges, and instead\njust keep them in a rolling Bloom filter of misbehaving nodes,\nwhich isn't persisted to disk or exposed through the ban\nframework. The effect remains the same: preferred for eviction,\navoided for outgoing connections, and not relayed to other peers.\n\nAlso change the name of this mechanism to better reflect reality;\nthey're not banned, just discouraged.\n\nContains release notes and several interface improvements by\nJohn Newbery.\n\nGithub-Pull: #19219\nRebased-From: b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
      "tree": {
        "sha": "34288bde888f53b22c818415ff3c065e9260fedb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34288bde888f53b22c818415ff3c065e9260fedb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04773480575ac79f238ac5764247dddd0cae5051",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl8FHNwACgkQLuufXMCV\nJsHu0Q/9En5PrwwN8plr6uVa5+I54wzVD12xQN3VXKMQM6vBmAYX9ZtnbuKDZP9d\nE2jxKtm3305Jeks5+6Rh+iwH02cx3sr4TpAvfHnuYnyXvfvdopQD9v7JFoKqUe8s\nnQKtaDg2039LMcYjOAhOtM8FT0xVbjMbAEVGsAjSI7hC5qIkhQ0DaxZ95lZ/IkId\nt7jClogRjKWurTiD9O0Ez9DfXF9NAlORwE+9tCEQs3AuT/8BuhAAJZ3gl/t3r2jI\nuGe+sU/bGQYvRLEm0C1E4qZn3B76F0419+J5xPxNpchhVd83bEQg6PXxXdxZHkct\nqa687cCBLqHbAZdcrvsYi0mcr1Qxj3BqzkBM/2t5Pb9gLJEcEllp0zmcN/AymyE5\nRDF2NOkbFAslPCst21eDn0pyoyIhipBCGuDLlb/zBjUoiRT99kKHII21OF77TRRh\nMIm1EbAwMsyM1v1ze65gXDkLhjb0/dLfwSpLbFL409V0BVBCmNByii/WPzLJb7xq\njOMBVS8PEYZA6UE05hPiL1/80WfxJkRv9nGNUDPwZJxuGfyFGSb23Ulzw9dUmQBm\nCxdGOO80OLJJB5DkuDVCUlPMKVEuobOXW+U2XAY7wTmiry0FCm8p+NwBv8BEMwx5\nAwQ/2oCD+ZFiVczdlKgBYizoWI9JeQ2g1uegZ0X+5PVIQUhLKAU=\n=KMTa\n-----END PGP SIGNATURE-----",
        "payload": "tree 34288bde888f53b22c818415ff3c065e9260fedb\nparent e7f06f9b0e84a65812d24ff6efa4bc2d3d818590\nauthor Pieter Wuille <pieter@wuille.net> 1591667213 -0700\ncommitter fanquake <fanquake@gmail.com> 1594170586 +0800\n\nReplace automatic bans with discouragement filter\n\nThis patch improves performance and resource usage around IP\naddresses that are banned for misbehavior. They're already not\nactually banned, as connections from them are still allowed,\nbut they are preferred for eviction if the inbound connection\nslots are full.\n\nStop treating these like manually banned IP ranges, and instead\njust keep them in a rolling Bloom filter of misbehaving nodes,\nwhich isn't persisted to disk or exposed through the ban\nframework. The effect remains the same: preferred for eviction,\navoided for outgoing connections, and not relayed to other peers.\n\nAlso change the name of this mechanism to better reflect reality;\nthey're not banned, just discouraged.\n\nContains release notes and several interface improvements by\nJohn Newbery.\n\nGithub-Pull: #19219\nRebased-From: b691f2df5f7d443c0c9ee056ab94aa0fc19566d5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04773480575ac79f238ac5764247dddd0cae5051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04773480575ac79f238ac5764247dddd0cae5051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04773480575ac79f238ac5764247dddd0cae5051/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f06f9b0e84a65812d24ff6efa4bc2d3d818590"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 91,
      "deletions": 44
    },
    "files": [
      {
        "sha": "b5ee885ddc3a69ddc30aa321010f33e228aa326d",
        "filename": "doc/release-notes-19219.md",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/doc/release-notes-19219.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/doc/release-notes-19219.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-19219.md?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -0,0 +1,23 @@\n+#### Changes regarding misbehaving peers\n+\n+Peers that misbehave (e.g. send us invalid blocks) are now referred to as\n+discouraged nodes in log output, as they're not (and weren't) strictly banned:\n+incoming connections are still allowed from them, but they're preferred for\n+eviction.\n+\n+Furthermore, a few additional changes are introduced to how discouraged\n+addresses are treated:\n+\n+- Discouraging an address does not time out automatically after 24 hours\n+  (or the `-bantime` setting). Depending on traffic from other peers,\n+  discouragement may time out at an indeterminate time.\n+\n+- Discouragement is not persisted over restarts.\n+\n+- There is no method to list discouraged addresses. They are not returned by\n+  the `listbanned` RPC. That RPC also no longer reports the `ban_reason`\n+  field, as `\"manually added\"` is the only remaining option.\n+\n+- Discouragement cannot be removed with the `setban remove` RPC command.\n+  If you need to remove a discouragement, you can remove all discouragements by\n+  stop-starting your node."
      },
      {
        "sha": "16bd452704f5eacf9512c779f29a9c6627cbf54d",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -74,25 +74,24 @@ int BanMan::IsBannedLevel(CNetAddr net_addr)\n     // 0 - Not banned\n     // 1 - Automatic misbehavior ban\n     // 2 - Any other ban\n-    int level = 0;\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n \n         if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n-            if (ban_entry.banReason != BanReasonNodeMisbehaving) return 2;\n-            level = 1;\n+            return 2;\n         }\n     }\n-    return level;\n+    return m_discouraged.contains(net_addr.GetAddrBytes()) ? 1 : 0;\n }\n \n bool BanMan::IsBanned(CNetAddr net_addr)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n+    if (m_discouraged.contains(net_addr.GetAddrBytes())) return true;\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n@@ -120,12 +119,18 @@ bool BanMan::IsBanned(CSubNet sub_net)\n \n void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n {\n+    if (ban_reason == BanReasonNodeMisbehaving) {\n+        LOCK(m_cs_banned);\n+        m_discouraged.insert(net_addr.GetAddrBytes());\n+        return;\n+    }\n     CSubNet sub_net(net_addr);\n     Ban(sub_net, ban_reason, ban_time_offset, since_unix_epoch);\n }\n \n void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n {\n+    assert(ban_reason == BanReasonManuallyAdded);\n     CBanEntry ban_entry(GetTime(), ban_reason);\n \n     int64_t normalized_ban_time_offset = ban_time_offset;"
      },
      {
        "sha": "aad73c514f0552a4619b4cbfcdd3ed330c891dbc",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 31,
        "deletions": 14,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_BANMAN_H\n \n #include <addrdb.h>\n+#include <bloom.h>\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <sync.h>\n@@ -23,20 +24,35 @@ class CClientUIInterface;\n class CNetAddr;\n class CSubNet;\n \n-// Denial-of-service detection/prevention\n-// The idea is to detect peers that are behaving\n-// badly and disconnect/ban them, but do it in a\n-// one-coding-mistake-won't-shatter-the-entire-network\n-// way.\n-// IMPORTANT:  There should be nothing I can give a\n-// node that it will forward on that will make that\n-// node's peers drop it. If there is, an attacker\n-// can isolate a node and/or try to split the network.\n-// Dropping a node for sending stuff that is invalid\n-// now but might be valid in a later version is also\n-// dangerous, because it can cause a network split\n-// between nodes running old code and nodes running\n-// new code.\n+// Banman manages two related but distinct concepts:\n+//\n+// 1. Banning. This is configured manually by the user, through the setban RPC.\n+// If an address or subnet is banned, we never accept incoming connections from\n+// it and never create outgoing connections to it. We won't gossip its address\n+// to other peers in addr messages. Banned addresses and subnets are stored to\n+// banlist.dat on shutdown and reloaded on startup. Banning can be used to\n+// prevent connections with spy nodes or other griefers.\n+//\n+// 2. Discouragement. If a peer misbehaves enough (see Misbehaving() in\n+// net_processing.cpp), we'll mark that address as discouraged. We still allow\n+// incoming connections from them, but they're preferred for eviction when\n+// we receive new incoming connections. We never make outgoing connections to\n+// them, and do not gossip their address to other peers. This is implemented as\n+// a bloom filter. We can (probabilistically) test for membership, but can't\n+// list all discouraged addresses or unmark them as discouraged. Discouragement\n+// can prevent our limited connection slots being used up by incompatible\n+// or broken peers.\n+//\n+// Neither banning nor discouragement are protections against denial-of-service\n+// attacks, since if an attacker has a way to waste our resources and we\n+// disconnect from them and ban that address, it's trivial for them to\n+// reconnect from another IP address.\n+//\n+// Attempting to automatically disconnect or ban any class of peer carries the\n+// risk of splitting the network. For example, if we banned/disconnected for a\n+// transaction that fails a policy check and a future version changes the\n+// policy check so the transaction is accepted, then that transaction could\n+// cause the network to split between old nodes and new nodes.\n \n class BanMan\n {\n@@ -68,6 +84,7 @@ class BanMan\n     CClientUIInterface* m_client_interface = nullptr;\n     CBanDB m_ban_db;\n     const int64_t m_default_ban_time;\n+    CRollingBloomFilter m_discouraged GUARDED_BY(m_cs_banned) {50000, 0.000001};\n };\n \n #endif"
      },
      {
        "sha": "f381a53b1b02f7c18b81761050c6df0302be22be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -422,8 +422,8 @@ void SetupServerArgs()\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting and discouraging misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "ce85dc1d79e9122732496205862d423409c29792",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -998,15 +998,22 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     int bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : 0;\n \n-    // Don't accept connections from banned peers, but if our inbound slots aren't almost full, accept\n-    // if the only banning reason was an automatic misbehavior ban.\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel > ((nInbound + 1 < nMaxInbound) ? 1 : 0))\n+    // Don't accept connections from banned peers.\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel == 2)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }\n \n+    // Only accept connections from discouraged peers if our inbound slots aren't (almost) full.\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && bannedlevel >= 1)\n+    {\n+        LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n     if (nInbound >= nMaxInbound)\n     {\n         if (!AttemptToEvictConnection()) {"
      },
      {
        "sha": "71d206bc1a94ba59c659d48a8e078f6b7f37f729",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -963,7 +963,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n }\n \n /**\n- * Mark a misbehaving peer to be banned depending upon the value of `-banscore`.\n+ * Increment peer's misbehavior score. If the new value surpasses banscore (specified on startup or by default), mark node to be discouraged, meaning the peer might be disconnected & added to the discouragement filter.\n  */\n void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n@@ -979,14 +979,14 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n     std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n         state->fShouldBan = true;\n     } else\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n /**\n- * Potentially ban a node based on the contents of a BlockValidationState object\n+ * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n  *\n  * @param[in] via_compact_block this bool is passed in because net_processing should\n  * punish peers differently depending on whether the data was provided in a compact\n@@ -1016,7 +1016,7 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n                 break;\n             }\n \n-            // Ban outbound (but not inbound) peers if on an invalid chain.\n+            // Discourage outbound (but not inbound) peers if on an invalid chain.\n             // Exempt HB compact block peers and manual connections.\n             if (!via_compact_block && !node_state->m_is_inbound && !node_state->m_is_manual_connection) {\n                 Misbehaving(nodeid, 100, message);\n@@ -1051,7 +1051,7 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n }\n \n /**\n- * Potentially ban a node based on the contents of a TxValidationState object\n+ * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n  *\n  * @return Returns true if the peer was punished (probably disconnected)\n  */\n@@ -1278,7 +1278,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n }\n \n /**\n- * Handle invalid block rejection and consequent peer banning, maintain which\n+ * Handle invalid block rejection and consequent peer discouragement, maintain which\n  * peers announce compact blocks.\n  */\n void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n@@ -2833,7 +2833,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // relayed before full validation (see BIP 152), so we don't want to disconnect\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n-            // will be detected and the peer will be banned.\n+            // will be detected and the peer will be disconnected/discouraged.\n             return ProcessHeadersMessage(pfrom, connman, mempool, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n         }\n \n@@ -2919,7 +2919,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 // 3. the block is otherwise invalid (eg invalid coinbase,\n                 //    block is too big, too many legacy sigops, etc).\n                 // So if CheckBlock failed, #3 is the only possibility.\n-                // Under BIP 152, we don't DoS-ban unless proof of work is\n+                // Under BIP 152, we don't discourage the peer unless proof of work is\n                 // invalid (we don't require all the stateless checks to have\n                 // been run).  This is handled below, so just treat this as\n                 // though the block was successfully read, and rely on the\n@@ -3267,11 +3267,12 @@ bool PeerLogicValidation::CheckIfBanned(CNode* pnode)\n         else if (pnode->m_manual_connection)\n             LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n         else if (pnode->addr.IsLocal()) {\n-            // Disconnect but don't ban _this_ local node\n-            LogPrintf(\"Warning: disconnecting but not banning local peer %s!\\n\", pnode->addr.ToString());\n+            // Disconnect but don't discourage this local node\n+            LogPrintf(\"Warning: disconnecting but not discouraging local peer %s!\\n\", pnode->addr.ToString());\n             pnode->fDisconnect = true;\n         } else {\n             // Disconnect and ban all nodes sharing the address\n+            LogPrintf(\"Disconnecting and discouraging peer %s!\\n\", pnode->addr.ToString());\n             if (m_banman) {\n                 m_banman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n             }"
      },
      {
        "sha": "0c8d600a4a7c5e90d8a16f9fc8453c190ffec81d",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -90,6 +90,7 @@ class CNetAddr\n         uint32_t GetMappedAS(const std::vector<bool> &asmap) const;\n \n         std::vector<unsigned char> GetGroup(const std::vector<bool> &asmap) const;\n+        std::vector<unsigned char> GetAddrBytes() const { return {std::begin(ip), std::end(ip)}; }\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = nullptr) const;\n \n         explicit CNetAddr(const struct in6_addr& pipv6Addr, const uint32_t scope = 0);"
      },
      {
        "sha": "3886efcadf914ee4890105a8297db1a760a4f486",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -591,7 +591,8 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? g_rpc_node->banman->IsBanned(subNet) : g_rpc_node->banman->IsBanned(netAddr)) {\n+        if ((isSubnet && g_rpc_node->banman->IsBanned(subNet)) ||\n+            (!isSubnet && g_rpc_node->banman->IsBannedLevel(netAddr) == BanReasonManuallyAdded)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -618,7 +619,7 @@ static UniValue setban(const JSONRPCRequest& request)\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? g_rpc_node->banman->Unban(subNet) : g_rpc_node->banman->Unban(netAddr) )) {\n-            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n+            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously manually banned.\");\n         }\n     }\n     return NullUniValue;\n@@ -627,7 +628,7 @@ static UniValue setban(const JSONRPCRequest& request)\n static UniValue listbanned(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"listbanned\",\n-                \"\\nList all banned IPs/Subnets.\\n\",\n+                \"\\nList all manually banned IPs/Subnets.\\n\",\n                 {},\n         RPCResult{RPCResult::Type::ARR, \"\", \"\",\n             {\n@@ -636,7 +637,6 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR, \"address\", \"\"},\n                         {RPCResult::Type::NUM_TIME, \"banned_until\", \"\"},\n                         {RPCResult::Type::NUM_TIME, \"ban_created\", \"\"},\n-                        {RPCResult::Type::STR, \"ban_reason\", \"\"},\n                     }},\n             }},\n                 RPCExamples{\n@@ -660,7 +660,6 @@ static UniValue listbanned(const JSONRPCRequest& request)\n         rec.pushKV(\"address\", entry.first.ToString());\n         rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n         rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n-        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "bbe4df8550a461e0c92c7a91aec71823e28349ba",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04773480575ac79f238ac5764247dddd0cae5051/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04773480575ac79f238ac5764247dddd0cae5051/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=04773480575ac79f238ac5764247dddd0cae5051",
        "patch": "@@ -346,12 +346,6 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     }\n     BOOST_CHECK(banman->IsBanned(addr));\n \n-    SetMockTime(nStartTime+60*60);\n-    BOOST_CHECK(banman->IsBanned(addr));\n-\n-    SetMockTime(nStartTime+60*60*24+1);\n-    BOOST_CHECK(!banman->IsBanned(addr));\n-\n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }"
      }
    ]
  },
  {
    "sha": "2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjc5YWM3NDA2MjIyMThhNTJlMmNmM2FlMTc1NWRkM2E4ZDQ4NDdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-11T00:11:38Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-08T01:10:52Z"
      },
      "message": "Clean up separated ban/discourage interface\n\nGithub-Pull: #19219\nRebased-From: 2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
      "tree": {
        "sha": "10ee4ea03b0960eab263bcfcf9cfb8253264194c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10ee4ea03b0960eab263bcfcf9cfb8253264194c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl8FHR8ACgkQLuufXMCV\nJsE58A/+OPiOLORS5J+L1nO38RPskxNlc7iTO81jv6PbcfIRS4up/EcLyDRgnxmO\nP/rktiRKvROcfJRYHjbsySZimVajHtSIm3q9UkYGO3+Pth++FgsxdNXlTep+81Mk\n7ircqoESOA2E/xeF8X02tRwU0/jtQL63giAHv0/ZI2VNQuz1HN1xgtlkD9LXWs/U\n+FXCcVrllcbJt9yH8smdTkqXRCUsFEvbd4wycP+HX+/RWvvDHSJI72MD/We6Bwgk\nJTH0xsVv4IRPb2hYssFwXj6byOCtrIoTCCN7WyZas8g3MAu9tfpGLD+ViJk0yYdA\nC+JyNDYa2H20jMuwq9g2hHe9lgH16V3sk0Egh/IR5XrWh/f6yLEsvOHXG6Pk6dZM\ndyRb7qex0FEYjaYwRoPtfdYRml/rKtKUrFmdrUw+ffs6gjL1Mz4y8NPBgaLyctD/\n6IZm0PeW8n/9LFSy6nSAWrdVFqGcKhoXHFA/kpQoLPFwCjhxq6gTfIImBWwQC8un\n6xGwgAFaEfa2djq42Kh9rddWluGrWDs8y+5qhdaK0KN7IKeOReG+SyS5xgFZiDx0\nshe+6XiE8dIIgBwWY40saXUtcF8GjNo+5KUEuiTywDSi1Bn/Ni+WOjwwk+vM3CYz\nnbDCQipgAP88v65iXRqCMjGxSxqYEQDK85kg7gVzwQZuHUD5UFQ=\n=+J8X\n-----END PGP SIGNATURE-----",
        "payload": "tree 10ee4ea03b0960eab263bcfcf9cfb8253264194c\nparent 04773480575ac79f238ac5764247dddd0cae5051\nauthor Pieter Wuille <pieter@wuille.net> 1591834298 -0700\ncommitter fanquake <fanquake@gmail.com> 1594170652 +0800\n\nClean up separated ban/discourage interface\n\nGithub-Pull: #19219\nRebased-From: 2ad58381fffb33d611abf900b73d9e6b5a4e35f8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04773480575ac79f238ac5764247dddd0cae5051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04773480575ac79f238ac5764247dddd0cae5051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04773480575ac79f238ac5764247dddd0cae5051"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 77,
      "deletions": 113
    },
    "files": [
      {
        "sha": "8410c3776c4856b3f593fe3c1c2ce17dced83315",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 25,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -17,21 +17,13 @@ class CSubNet;\n class CAddrMan;\n class CDataStream;\n \n-typedef enum BanReason\n-{\n-    BanReasonUnknown          = 0,\n-    BanReasonNodeMisbehaving  = 1,\n-    BanReasonManuallyAdded    = 2\n-} BanReason;\n-\n class CBanEntry\n {\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n     int64_t nCreateTime;\n     int64_t nBanUntil;\n-    uint8_t banReason;\n \n     CBanEntry()\n     {\n@@ -44,31 +36,17 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n-    explicit CBanEntry(int64_t n_create_time_in, BanReason ban_reason_in) : CBanEntry(n_create_time_in)\n+    SERIALIZE_METHODS(CBanEntry, obj)\n     {\n-        banReason = ban_reason_in;\n+        uint8_t ban_reason = 2; //! For backward compatibility\n+        READWRITE(obj.nVersion, obj.nCreateTime, obj.nBanUntil, ban_reason);\n     }\n \n-    SERIALIZE_METHODS(CBanEntry, obj) { READWRITE(obj.nVersion, obj.nCreateTime, obj.nBanUntil, obj.banReason); }\n-\n     void SetNull()\n     {\n         nVersion = CBanEntry::CURRENT_VERSION;\n         nCreateTime = 0;\n         nBanUntil = 0;\n-        banReason = BanReasonUnknown;\n-    }\n-\n-    std::string banReasonToString() const\n-    {\n-        switch (banReason) {\n-        case BanReasonNodeMisbehaving:\n-            return \"node misbehaving\";\n-        case BanReasonManuallyAdded:\n-            return \"manually added\";\n-        default:\n-            return \"unknown\";\n-        }\n     }\n };\n "
      },
      {
        "sha": "a1bb5be903f13681b72e13bd1296b47de086e05e",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 30,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -68,30 +68,16 @@ void BanMan::ClearBanned()\n     if (m_client_interface) m_client_interface->BannedListChanged();\n }\n \n-int BanMan::IsBannedLevel(CNetAddr net_addr)\n+bool BanMan::IsDiscouraged(const CNetAddr& net_addr)\n {\n-    // Returns the most severe level of banning that applies to this address.\n-    // 0 - Not banned\n-    // 1 - Automatic misbehavior ban\n-    // 2 - Any other ban\n-    auto current_time = GetTime();\n     LOCK(m_cs_banned);\n-    for (const auto& it : m_banned) {\n-        CSubNet sub_net = it.first;\n-        CBanEntry ban_entry = it.second;\n-\n-        if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n-            return 2;\n-        }\n-    }\n-    return m_discouraged.contains(net_addr.GetAddrBytes()) ? 1 : 0;\n+    return m_discouraged.contains(net_addr.GetAddrBytes());\n }\n \n-bool BanMan::IsBanned(CNetAddr net_addr)\n+bool BanMan::IsBanned(const CNetAddr& net_addr)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n-    if (m_discouraged.contains(net_addr.GetAddrBytes())) return true;\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n@@ -103,7 +89,7 @@ bool BanMan::IsBanned(CNetAddr net_addr)\n     return false;\n }\n \n-bool BanMan::IsBanned(CSubNet sub_net)\n+bool BanMan::IsBanned(const CSubNet& sub_net)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n@@ -117,21 +103,21 @@ bool BanMan::IsBanned(CSubNet sub_net)\n     return false;\n }\n \n-void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n+void BanMan::Ban(const CNetAddr& net_addr, int64_t ban_time_offset, bool since_unix_epoch)\n {\n-    if (ban_reason == BanReasonNodeMisbehaving) {\n-        LOCK(m_cs_banned);\n-        m_discouraged.insert(net_addr.GetAddrBytes());\n-        return;\n-    }\n     CSubNet sub_net(net_addr);\n-    Ban(sub_net, ban_reason, ban_time_offset, since_unix_epoch);\n+    Ban(sub_net, ban_time_offset, since_unix_epoch);\n }\n \n-void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n+void BanMan::Discourage(const CNetAddr& net_addr)\n {\n-    assert(ban_reason == BanReasonManuallyAdded);\n-    CBanEntry ban_entry(GetTime(), ban_reason);\n+    LOCK(m_cs_banned);\n+    m_discouraged.insert(net_addr.GetAddrBytes());\n+}\n+\n+void BanMan::Ban(const CSubNet& sub_net, int64_t ban_time_offset, bool since_unix_epoch)\n+{\n+    CBanEntry ban_entry(GetTime());\n \n     int64_t normalized_ban_time_offset = ban_time_offset;\n     bool normalized_since_unix_epoch = since_unix_epoch;\n@@ -151,8 +137,8 @@ void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ba\n     }\n     if (m_client_interface) m_client_interface->BannedListChanged();\n \n-    //store banlist to disk immediately if user requested ban\n-    if (ban_reason == BanReasonManuallyAdded) DumpBanlist();\n+    //store banlist to disk immediately\n+    DumpBanlist();\n }\n \n bool BanMan::Unban(const CNetAddr& net_addr)"
      },
      {
        "sha": "f6bfbd1e493cc5d182db6f4ff7c71ff59f2527c8",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -59,12 +59,20 @@ class BanMan\n public:\n     ~BanMan();\n     BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n-    void Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n-    void Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Ban(const CNetAddr& net_addr, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Ban(const CSubNet& sub_net, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Discourage(const CNetAddr& net_addr);\n     void ClearBanned();\n-    int IsBannedLevel(CNetAddr net_addr);\n-    bool IsBanned(CNetAddr net_addr);\n-    bool IsBanned(CSubNet sub_net);\n+\n+    //! Return whether net_addr is banned\n+    bool IsBanned(const CNetAddr& net_addr);\n+\n+    //! Return whether sub_net is exactly banned\n+    bool IsBanned(const CSubNet& sub_net);\n+\n+    //! Return whether net_addr is discouraged.\n+    bool IsDiscouraged(const CNetAddr& net_addr);\n+\n     bool Unban(const CNetAddr& net_addr);\n     bool Unban(const CSubNet& sub_net);\n     void GetBanned(banmap_t& banmap);"
      },
      {
        "sha": "3bd32909bfcf58a1b3a7477ae36b629aa9dc9764",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -136,10 +136,10 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) override\n+    bool ban(const CNetAddr& net_addr, int64_t ban_time_offset) override\n     {\n         if (m_context.banman) {\n-            m_context.banman->Ban(net_addr, reason, ban_time_offset);\n+            m_context.banman->Ban(net_addr, ban_time_offset);\n             return true;\n         }\n         return false;"
      },
      {
        "sha": "61acde0523e1ea342963725f4762057c9d6aff44",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -118,7 +118,7 @@ class Node\n     virtual bool getBanned(banmap_t& banmap) = 0;\n \n     //! Ban node.\n-    virtual bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) = 0;\n+    virtual bool ban(const CNetAddr& net_addr, int64_t ban_time_offset) = 0;\n \n     //! Unban node.\n     virtual bool unban(const CSubNet& ip) = 0;"
      },
      {
        "sha": "09ddcb163d6b138c2a911459dd1e57d6dbafcd92",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -996,18 +996,18 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     // on all platforms.  Set it again here just to be sure.\n     SetSocketNoDelay(hSocket);\n \n-    int bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : 0;\n-\n     // Don't accept connections from banned peers.\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel == 2)\n+    bool banned = m_banman->IsBanned(addr);\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && banned)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }\n \n     // Only accept connections from discouraged peers if our inbound slots aren't (almost) full.\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && bannedlevel >= 1)\n+    bool discouraged = m_banman->IsDiscouraged(addr);\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && discouraged)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -1037,7 +1037,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     pnode->m_permissionFlags = permissionFlags;\n     // If this flag is present, the user probably expect that RPC and QT report it as whitelisted (backward compatibility)\n     pnode->m_legacyWhitelisted = legacyWhitelisted;\n-    pnode->m_prefer_evict = bannedlevel > 0;\n+    pnode->m_prefer_evict = discouraged;\n     m_msgproc->InitializeNode(pnode);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n@@ -1994,10 +1994,10 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     }\n     if (!pszDest) {\n-        if (IsLocal(addrConnect) ||\n-            FindNode(static_cast<CNetAddr>(addrConnect)) || (m_banman && m_banman->IsBanned(addrConnect)) ||\n-            FindNode(addrConnect.ToStringIPPort()))\n+        bool banned_or_discouraged = m_banman && (m_banman->IsDiscouraged(addrConnect) || m_banman->IsBanned(addrConnect));\n+        if (IsLocal(addrConnect) || FindNode(static_cast<CNetAddr>(addrConnect)) || banned_or_discouraged || FindNode(addrConnect.ToStringIPPort())) {\n             return;\n+        }\n     } else if (FindNode(std::string(pszDest)))\n         return;\n "
      },
      {
        "sha": "a1b45c400995c9a0dd3034647ecd081f88c48d1f",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -18,7 +18,7 @@ enum NetPermissionFlags\n     // Always relay transactions from this peer, even if already in mempool\n     // Keep parameter interaction: forcerelay implies relay\n     PF_FORCERELAY = (1U << 2) | PF_RELAY,\n-    // Can't be banned for misbehavior\n+    // Can't be banned/disconnected/discouraged for misbehavior\n     PF_NOBAN = (1U << 4),\n     // Can query the mempool\n     PF_MEMPOOL = (1U << 5),"
      },
      {
        "sha": "ddc516ce0f8e1a6f8b6575fcf3b1b92616d78df2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -215,8 +215,8 @@ struct CNodeState {\n     bool fCurrentlyConnected;\n     //! Accumulated misbehaviour score for this peer.\n     int nMisbehavior;\n-    //! Whether this peer should be disconnected and banned (unless whitelisted).\n-    bool fShouldBan;\n+    //! Whether this peer should be disconnected and marked as discouraged (unless whitelisted with noban).\n+    bool m_should_discourage;\n     //! String name of this peer (debugging/logging purposes).\n     const std::string name;\n     //! The best known block we know this peer has announced.\n@@ -367,7 +367,7 @@ struct CNodeState {\n     {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n-        fShouldBan = false;\n+        m_should_discourage = false;\n         pindexBestKnownBlock = nullptr;\n         hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = nullptr;\n@@ -980,7 +980,7 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n-        state->fShouldBan = true;\n+        state->m_should_discourage = true;\n     } else\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n@@ -2191,7 +2191,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);\n-            if (banman->IsBanned(addr)) continue; // Do not process banned addresses beyond remembering we received them\n+            if (banman->IsDiscouraged(addr)) continue; // Do not process banned/discouraged addresses beyond remembering we received them\n+            if (banman->IsBanned(addr)) continue;\n             bool fReachable = IsReachable(addr);\n             if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n@@ -3044,7 +3045,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         std::vector<CAddress> vAddr = connman->GetAddresses();\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n+            if (!banman->IsDiscouraged(addr) && !banman->IsBanned(addr)) {\n                 pfrom->PushAddress(addr, insecure_rand);\n             }\n         }\n@@ -3255,26 +3256,26 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n     return true;\n }\n \n-bool PeerLogicValidation::CheckIfBanned(CNode* pnode)\n+bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode* pnode)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n-    if (state.fShouldBan) {\n-        state.fShouldBan = false;\n-        if (pnode->HasPermission(PF_NOBAN))\n+    if (state.m_should_discourage) {\n+        state.m_should_discourage = false;\n+        if (pnode->HasPermission(PF_NOBAN)) {\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->m_manual_connection)\n+        } else if (pnode->m_manual_connection) {\n             LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->addr.IsLocal()) {\n+        } else if (pnode->addr.IsLocal()) {\n             // Disconnect but don't discourage this local node\n             LogPrintf(\"Warning: disconnecting but not discouraging local peer %s!\\n\", pnode->addr.ToString());\n             pnode->fDisconnect = true;\n         } else {\n-            // Disconnect and ban all nodes sharing the address\n+            // Disconnect and discourage all nodes sharing the address\n             LogPrintf(\"Disconnecting and discouraging peer %s!\\n\", pnode->addr.ToString());\n             if (m_banman) {\n-                m_banman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n+                m_banman->Discourage(pnode->addr);\n             }\n             connman->DisconnectNode(pnode->addr);\n         }\n@@ -3381,7 +3382,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     LOCK(cs_main);\n-    CheckIfBanned(pfrom);\n+    MaybeDiscourageAndDisconnect(pfrom);\n \n     return fMoreWork;\n }\n@@ -3584,7 +3585,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         if (!lockMain)\n             return true;\n \n-        if (CheckIfBanned(pto)) return true;\n+        if (MaybeDiscourageAndDisconnect(pto)) return true;\n \n         CNodeState &state = *State(pto->GetId());\n "
      },
      {
        "sha": "ddb178014801cfbc3b56963578f3d74389ebb7c3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -28,7 +28,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     BanMan* const m_banman;\n     CTxMemPool& m_mempool;\n \n-    bool CheckIfBanned(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool MaybeDiscourageAndDisconnect(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n public:\n     PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler, CTxMemPool& pool);"
      },
      {
        "sha": "01e387f74b8f34a4397ab637546c7cfeb3b009cc",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -1216,7 +1216,7 @@ void RPCConsole::banSelectedNode(int bantime)\n         // Find possible nodes, ban it and clear the selected node\n         const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n         if (stats) {\n-            m_node.ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+            m_node.ban(stats->nodeStats.addr, bantime);\n             m_node.disconnectByAddress(stats->nodeStats.addr);\n         }\n     }"
      },
      {
        "sha": "8c400c05a024d4ee8aaa11970102b5afcf683052",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -591,8 +591,7 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if ((isSubnet && g_rpc_node->banman->IsBanned(subNet)) ||\n-            (!isSubnet && g_rpc_node->banman->IsBannedLevel(netAddr) == BanReasonManuallyAdded)) {\n+        if (isSubnet ? g_rpc_node->banman->IsBanned(subNet) : g_rpc_node->banman->IsBanned(netAddr)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -605,12 +604,12 @@ static UniValue setban(const JSONRPCRequest& request)\n             absolute = true;\n \n         if (isSubnet) {\n-            g_rpc_node->banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            g_rpc_node->banman->Ban(subNet, banTime, absolute);\n             if (g_rpc_node->connman) {\n                 g_rpc_node->connman->DisconnectNode(subNet);\n             }\n         } else {\n-            g_rpc_node->banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            g_rpc_node->banman->Ban(netAddr, banTime, absolute);\n             if (g_rpc_node->connman) {\n                 g_rpc_node->connman->DisconnectNode(netAddr);\n             }"
      },
      {
        "sha": "41d10ae3217db759af7e7a392cada8388f208d18",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -238,8 +238,8 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr1));\n-    BOOST_CHECK(!banman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n@@ -255,8 +255,8 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n-    BOOST_CHECK(!banman->IsBanned(addr2)); // 2 not banned yet...\n-    BOOST_CHECK(banman->IsBanned(addr1));  // ... but 1 still should be\n+    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not banned yet...\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode2.GetId(), 50);\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr2));\n+    BOOST_CHECK(banman->IsDiscouraged(addr2));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n@@ -294,7 +294,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(!banman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsDiscouraged(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 10);\n@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(!banman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsDiscouraged(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 1);\n@@ -312,7 +312,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr1));\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n     gArgs.ForceSetArg(\"-banscore\", ToString(DEFAULT_BANSCORE_THRESHOLD));\n \n     bool dummy;\n@@ -344,7 +344,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n         LOCK2(cs_main, dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr));\n+    BOOST_CHECK(banman->IsDiscouraged(addr));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);"
      },
      {
        "sha": "a7e6e8961a898e86f49fc2211a0fbd9ec8787235",
        "filename": "src/test/fuzz/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/test/fuzz/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b79ac740622218a52e2cf3ae1755dd3a8d4847a/src/test/fuzz/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrdb.cpp?ref=2b79ac740622218a52e2cf3ae1755dd3a8d4847a",
        "patch": "@@ -18,18 +18,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n     const CBanEntry ban_entry = [&] {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 2)) {\n         case 0:\n             return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n             break;\n-        case 1:\n-            return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>(), fuzzed_data_provider.PickValueInArray<BanReason>({\n-                                                                                  BanReason::BanReasonUnknown,\n-                                                                                  BanReason::BanReasonNodeMisbehaving,\n-                                                                                  BanReason::BanReasonManuallyAdded,\n-                                                                              })};\n-            break;\n-        case 2: {\n+        case 1: {\n             const Optional<CBanEntry> ban_entry = ConsumeDeserializable<CBanEntry>(fuzzed_data_provider);\n             if (ban_entry) {\n                 return *ban_entry;\n@@ -39,5 +32,4 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n         return CBanEntry{};\n     }();\n-    assert(!ban_entry.banReasonToString().empty());\n }"
      }
    ]
  }
]