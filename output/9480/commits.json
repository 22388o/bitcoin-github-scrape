[
  {
    "sha": "f9c88079df8b78b8fab75e0903ca395654f2d360",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWM4ODA3OWRmOGI3OGI4ZmFiNzVlMDkwM2NhMzk1NjU0ZjJkMzYw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-05T17:03:01Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-04-12T21:42:41Z"
      },
      "message": "Deduplicate SignatureCacheHasher\n\nThis moves the SignatureCacheHasher to the sigcache header, out of the anonymous\nnamespace, so that the tests can import it.",
      "tree": {
        "sha": "77d19ed9c6149a5091880c5be6b128695661ec72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d19ed9c6149a5091880c5be6b128695661ec72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9c88079df8b78b8fab75e0903ca395654f2d360",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9c88079df8b78b8fab75e0903ca395654f2d360",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9c88079df8b78b8fab75e0903ca395654f2d360",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9c88079df8b78b8fab75e0903ca395654f2d360/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 27,
      "deletions": 41
    },
    "files": [
      {
        "sha": "7bb8d9941b56dbdba54a57861250639bc1cc7fe3",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9c88079df8b78b8fab75e0903ca395654f2d360/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9c88079df8b78b8fab75e0903ca395654f2d360/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=f9c88079df8b78b8fab75e0903ca395654f2d360",
        "patch": "@@ -15,28 +15,6 @@\n #include <boost/thread.hpp>\n \n namespace {\n-\n-/**\n- * We're hashing a nonce into the entries themselves, so we don't need extra\n- * blinding in the set hash computation.\n- *\n- * This may exhibit platform endian dependent behavior but because these are\n- * nonced hashes (random) and this state is only ever used locally it is safe.\n- * All that matters is local consistency.\n- */\n-class SignatureCacheHasher\n-{\n-public:\n-    template <uint8_t hash_select>\n-    uint32_t operator()(const uint256& key) const\n-    {\n-        static_assert(hash_select <8, \"SignatureCacheHasher only has 8 hashes available.\");\n-        uint32_t u;\n-        std::memcpy(&u, key.begin()+4*hash_select, 4);\n-        return u;\n-    }\n-};\n-\n /**\n  * Valid signature cache, to avoid doing expensive ECDSA signature checking\n  * twice for every transaction (once when accepted into memory pool, and"
      },
      {
        "sha": "55cec4cc8d730edaf87b9a3557e186c78f561cb1",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9c88079df8b78b8fab75e0903ca395654f2d360/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9c88079df8b78b8fab75e0903ca395654f2d360/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=f9c88079df8b78b8fab75e0903ca395654f2d360",
        "patch": "@@ -19,6 +19,27 @@ static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;\n \n class CPubKey;\n \n+/**\n+ * We're hashing a nonce into the entries themselves, so we don't need extra\n+ * blinding in the set hash computation.\n+ *\n+ * This may exhibit platform endian dependent behavior but because these are\n+ * nonced hashes (random) and this state is only ever used locally it is safe.\n+ * All that matters is local consistency.\n+ */\n+class SignatureCacheHasher\n+{\n+public:\n+    template <uint8_t hash_select>\n+    uint32_t operator()(const uint256& key) const\n+    {\n+        static_assert(hash_select <8, \"SignatureCacheHasher only has 8 hashes available.\");\n+        uint32_t u;\n+        std::memcpy(&u, key.begin()+4*hash_select, 4);\n+        return u;\n+    }\n+};\n+\n class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:"
      },
      {
        "sha": "8cae4e66e8a67b80006118de936f6c807b0bb25d",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 19,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9c88079df8b78b8fab75e0903ca395654f2d360/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9c88079df8b78b8fab75e0903ca395654f2d360/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=f9c88079df8b78b8fab75e0903ca395654f2d360",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <boost/test/unit_test.hpp>\n #include \"cuckoocache.h\"\n+#include \"script/sigcache.h\"\n #include \"test/test_bitcoin.h\"\n #include \"random.h\"\n #include <thread>\n@@ -36,20 +37,6 @@ void insecure_GetRandHash(uint256& t)\n         *(ptr++) = insecure_rand.rand32();\n }\n \n-/** Definition copied from /src/script/sigcache.cpp\n- */\n-class uint256Hasher\n-{\n-public:\n-    template <uint8_t hash_select>\n-    uint32_t operator()(const uint256& key) const\n-    {\n-        static_assert(hash_select <8, \"SignatureCacheHasher only has 8 hashes available.\");\n-        uint32_t u;\n-        std::memcpy(&u, key.begin() + 4 * hash_select, 4);\n-        return u;\n-    }\n-};\n \n \n /* Test that no values not inserted into the cache are read out of it.\n@@ -59,7 +46,7 @@ class uint256Hasher\n BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)\n {\n     insecure_rand = FastRandomContext(true);\n-    CuckooCache::cache<uint256, uint256Hasher> cc{};\n+    CuckooCache::cache<uint256, SignatureCacheHasher> cc{};\n     size_t megabytes = 4;\n     cc.setup_bytes(megabytes << 20);\n     uint256 v;\n@@ -138,7 +125,7 @@ BOOST_AUTO_TEST_CASE(cuckoocache_hit_rate_ok)\n     double HitRateThresh = 0.98;\n     size_t megabytes = 4;\n     for (double load = 0.1; load < 2; load *= 2) {\n-        double hits = test_cache<CuckooCache::cache<uint256, uint256Hasher>>(megabytes, load);\n+        double hits = test_cache<CuckooCache::cache<uint256, SignatureCacheHasher>>(megabytes, load);\n         BOOST_CHECK(normalize_hit_rate(hits, load) > HitRateThresh);\n     }\n }\n@@ -206,7 +193,7 @@ void test_cache_erase(size_t megabytes)\n BOOST_AUTO_TEST_CASE(cuckoocache_erase_ok)\n {\n     size_t megabytes = 4;\n-    test_cache_erase<CuckooCache::cache<uint256, uint256Hasher>>(megabytes);\n+    test_cache_erase<CuckooCache::cache<uint256, SignatureCacheHasher>>(megabytes);\n }\n \n template <typename Cache>\n@@ -293,7 +280,7 @@ void test_cache_erase_parallel(size_t megabytes)\n BOOST_AUTO_TEST_CASE(cuckoocache_erase_parallel_ok)\n {\n     size_t megabytes = 4;\n-    test_cache_erase_parallel<CuckooCache::cache<uint256, uint256Hasher>>(megabytes);\n+    test_cache_erase_parallel<CuckooCache::cache<uint256, SignatureCacheHasher>>(megabytes);\n }\n \n \n@@ -389,7 +376,7 @@ void test_cache_generations()\n }\n BOOST_AUTO_TEST_CASE(cuckoocache_generations)\n {\n-    test_cache_generations<CuckooCache::cache<uint256, uint256Hasher>>();\n+    test_cache_generations<CuckooCache::cache<uint256, SignatureCacheHasher>>();\n }\n \n BOOST_AUTO_TEST_SUITE_END();"
      }
    ]
  }
]