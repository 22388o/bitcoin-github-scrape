MarcoFalke,2018-06-27T16:22:31Z,"This is a return value, so it is never uninitialized.",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-400739238,400739238,
practicalswift,2018-06-27T16:26:38Z,"@MarcoFalke In the case of `!pick_new_inputs && nValueIn - nValueToSelect > 0 && !IsDust(newTxOut, discard_rate)` then an uninitialized `bnb_used` is read?",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-400741060,400741060,
DrahtBot,2018-06-28T09:30:13Z,<!--e57a25ab6845829454e8d69fc972939a-->No more conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-400973393,400973393,
promag,2018-06-28T10:11:46Z,"FYI also not initialized in https://github.com/bitcoin/bitcoin/blob/d96bdd78307bc5469cb8a4d5ca0e6cbc21fe4073/src/bench/coin_selection.cpp#L48\nBut there it should be ok.",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-400985313,400985313,
practicalswift,2018-06-29T06:05:01Z,@MarcoFalke Is my reasoning correct or do your comment still stand? :-),https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-401256737,401256737,
practicalswift,2018-06-29T06:08:40Z,@promag Thanks for reviewing. Anything changes needed to get an `utACK` or `Concept ACK` from you? :-),https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-401257360,401257360,
MarcoFalke,2018-06-29T09:07:58Z,We really should have a test case that exercises the  logic if `!pick_new_inputs`. Otherwise it is hard to reason about the correctness of this patch.,https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-401296314,401296314,
practicalswift,2018-06-29T09:26:01Z,"@MarcoFalke I was asking about the statement ""it is never uninitialized"". That was a misunderstanding?",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-401300909,401300909,
MarcoFalke,2018-06-29T09:33:31Z,"Whenever it is returned, it is initialized. However, if it is not returned, we shouldn't be reading from it, so I was asking about a test case that exercises that exact code path.",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-401302830,401302830,
DrahtBot,2018-08-25T20:55:09Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 59 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-415995967,415995967,
practicalswift,2018-09-18T09:31:05Z,"@MarcoFalke I originally found this issue by using static analysis but I rediscovered it using dynamic analysis as well. It turns out that this is triggered simply running the test suite under UBSan :-)\n\n```\nwallet/wallet.cpp:2757:59: runtime error: load of value 112, which is not a valid value for type 'bool' !=\n```\n\nSee https://travis-ci.org/bitcoin/bitcoin/jobs/429944903#L3960",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-422323969,422323969,
practicalswift,2018-09-19T12:12:01Z,@MarcoFalke Thanks for reviewing! Addressed feedback. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-422778707,422778707,
MarcoFalke,2018-09-19T12:14:52Z,utACK a23a7f60aa07de52d23ff1f2034fc43926ec3520,https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-422779572,422779572,
MarcoFalke,2018-09-19T13:09:47Z,"Interesting, I couldn't reproduce this locally with `./configure --with-sanitizers=bool CC=clang CXX=clang++ && make -j 16 src/bitcoind && ./test/functional/rpc_fundrawtransaction.py`. Could someone else try this?",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-422796966,422796966,
practicalswift,2018-09-24T09:07:01Z,"Removed ""potential"" in the title since this use of uninitialized value has been observed also during run-time :-)",https://github.com/bitcoin/bitcoin/pull/13546#issuecomment-423914428,423914428,
promag,2018-06-27T16:26:57Z,If `pick_new_inputs == false` then below `bnb_used` can be used right? Other *output* vars (`nValueIn` and `setCoins`) are also initialized here.,https://github.com/bitcoin/bitcoin/pull/13546#discussion_r198558529,198558529,src/wallet/wallet.cpp
promag,2018-07-11T00:41:20Z,"I think the correct fix is to move this out of the loop scope, so it doesn't loose the value since the last coin selection iteration. So move here:\nhttps://github.com/bitcoin/bitcoin/blob/fad42e8c4a9d625146f82bab9a038d945d40ac4f/src/wallet/wallet.cpp#L2835-L2843\nBecause there are 2 cases that skip ""pick new inputs"":\nhttps://github.com/bitcoin/bitcoin/blob/fad42e8c4a9d625146f82bab9a038d945d40",https://github.com/bitcoin/bitcoin/pull/13546#discussion_r201536988,201536988,src/wallet/wallet.cpp
MarcoFalke,2018-09-19T00:03:28Z,Imo this shouldn't be initialized to false. This just silences the bug without fixing it. Imo it should be set to false only when !pick_new_inputs?,https://github.com/bitcoin/bitcoin/pull/13546#discussion_r218632300,218632300,src/wallet/wallet.cpp
