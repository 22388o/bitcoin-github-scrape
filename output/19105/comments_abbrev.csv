fjahr,2020-06-02 20:29:23,Added a super simple test that reimplements the C++ impl unit test in Python. I am working on more exhaustive tests for the next PR in this series.,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-637788531,637788531,
DrahtBot,2020-06-06 02:03:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19253 (Tests: tidy up address.py and segwit_addr.py by jnewbery)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by f",https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-639955477,639955477,
fjahr,2020-06-11 15:02:23,Rebased and addressed all review comments. This is now also using SHA256 as discussed in #19055 .,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-642718446,642718446,
Sjors,2020-06-12 18:03:16,The chacha code also deserves its own file (and commit).,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643412969,643412969,
sipa,2020-06-12 18:08:02,"@Sjors I'd agree if it was generically useful ChaCha20 code, but given that's it's a minimal specialized implementation just for 3072-bit outputs with IV 0, I'm less convinced.",https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643415199,643415199,
jnewbery,2020-06-12 19:56:55,"We'll need a python chacha implementation when BIP324 lands, and the functionality in `chacha20_doubleround()` could be part of that, but until BIP324 I think it's fine to have it in the same file as the muhash code.",https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643458042,643458042,
fjahr,2020-07-09 11:52:31,Took @Sjors suggestions: moved the TODO comment to the util function and added chacha20 test vectors with nonce 0.,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-656082510,656082510,
Sjors,2020-07-09 13:37:53,re-ACK 352c702901b369132de109ddf7b6b1addc512b34,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-656132497,656132497,
fjahr,2020-07-16 16:24:55,Addressed @jnewbery 's review comments.,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-659522858,659522858,
jnewbery,2020-07-16 16:32:53,utACK 36ec9801a,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-659527434,659527434,
laanwj,2020-09-01 14:48:26,Code review ACK 36ec9801a4edb9663ef9ce9ad298233766b903e8,https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-684910000,684910000,
theStack,2020-06-02 11:57:14,"To simplify the code, one could just use [Fermat's little theorem](https://en.wikipedia.org/wiki/Fermat%27s_little_theorem) here to calculate the modular inverse. The drawback is that it's much slower than the extended Euclidean algorithm, calculating the modinv of a random 3072-bit number takes approx. 100-150ms on my machine, which is at least 1 order of magnitude slower. Not sure if that's an i",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r433820249,433820249,test/functional/test_framework/muhash.py
fjahr,2020-06-02 20:25:43,"Thanks, I see your point, however, given how often these tests run on people's machines and in the CI environment, performance does matter quite a bit. But I think it's a great question to discuss during the PR review club next week :)",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434155051,434155051,test/functional/test_framework/muhash.py
sipa,2020-06-02 22:31:20,"Also, if comprehension is a concern, I suspect that people who are familiar with modular inverses will generally understand both the euclidean and the fermat approach; and to people who aren't familiar with it both will look like black magic.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434210798,434210798,test/functional/test_framework/muhash.py
theStack,2020-06-03 12:57:36,"@fjahr @sipa: Fair enough! By the way, Python 3.8 introduced support for negative exponents in the modulo (three argument) `pow()` (see https://bugs.python.org/issue36027, https://github.com/python/cpython/pull/13266), internally calculating the modular inverse via the extended Euclidean algorithm. I.e. somewhere in the future it could be just a very simple:\n`return pow(a, -1, n)`",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434546037,434546037,test/functional/test_framework/muhash.py
Sjors,2020-06-09 10:39:29,"That's worth annotating in a TODO: `// Python 3.8: return pow(a, -1, n)` (tested locally with Python 3.8.2)\n \nI like having the simpler approach here. It's yet another sanity check that our implementation is correct, given the lack of test vectors. But given the performance impact, if it really matters compared to the rest of the test, better leave that as a TODO.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437312361,437312361,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 13:38:51,This is duplication of the code in `key.py`. Can you move it into `util.py` or a new `crypto_util.py` instead of repeating it?,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437423868,437423868,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 13:49:14,Calling this function with `bits` < 0 or `bits` > 32  throws. Perhaps call `bits %= 32` to reduce it to a valid value?,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437434307,437434307,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 13:53:57,I suggest you link to the specification for chacha here: https://cr.yp.to/chacha/chacha-20080128.pdf or here: https://tools.ietf.org/html/rfc7539,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437439515,437439515,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 13:58:54,nit: remove double spaces,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437444290,437444290,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 14:00:02,nit: this would be slightly easier on the eye with spaces around the operators (see https://www.python.org/dev/peps/pep-0008/#other-recommendations),https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437445217,437445217,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 14:45:08,"Explicitly naming the quarter rounds would make this clearer:\n\n```suggestion\n    QUARTER_ROUNDS = [(0, 4, 8, 12),\n                      (1, 5, 9, 13),\n                      (2, 6, 10, 14),\n                      (3, 7, 11, 15),\n                      (0, 5, 10, 15),\n                      (1, 6, 11, 12),\n                      (2, 7, 8, 13),\n                      (3, 4, 9, 14)]\n ",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437480100,437480100,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:13:03,"Again, being explicitly about where these magic numbers come from would be nice:\n\n```suggestion\n    # See RFC 7539 section 2.3 for chacha20 parameters\n    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n    key_bytes = []\n    for i in range(8):\n        key_bytes[i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n    INITIALIZATION_VECTOR = [0] * 4\n    init = CONSTANTS",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437503786,437503786,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:17:10,"What is `pos`? Would `counter` be a better name, since this value is used as the block counter?",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509272,437509272,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:17:39,"s/rnd/round/. `rnd` is often used to mean random, which is confusing here.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509899,437509899,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:20:17,"I think this would be clearer as:\n\n```suggestion\n        s = init.copy()\n```",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437513449,437513449,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:39:07,"I think this docstring should indicate that it's hashing using Chacha20\n\n```suggestion\n    """"""Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.""""""\n```",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437529184,437529184,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:40:45,"Reference where the algorithm comes from:\n\n- https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf for the generic algorithm\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html for the specific parameters (chacha20 and 3072-bit digest)",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437530296,437530296,test/functional/test_framework/muhash.py
jnewbery,2020-06-09 15:42:30,This should be a unit test in muhash.py. See #18576 for details on the python unit tests.,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437531625,437531625,test/functional/rpc_blockchain.py
troygiorshev,2020-06-10 13:39:55,Possibly only the first link.  There are slight differences between those two and https://tools.ietf.org/html/rfc8439.  See #19225 ,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438129563,438129563,test/functional/test_framework/muhash.py
troygiorshev,2020-06-10 13:52:06,Also `.copy()` is around twice as fast.,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438138648,438138648,test/functional/test_framework/muhash.py
ysangkok,2020-06-10 16:38:53,this should implement [MutableSet](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes),https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438262885,438262885,test/functional/test_framework/muhash.py
ysangkok,2020-06-10 16:39:21,the method is called `add` in collections.abc.,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263145,438263145,test/functional/test_framework/muhash.py
ysangkok,2020-06-10 16:39:39,the method is called `discard` in collections.abc,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263309,438263309,test/functional/test_framework/muhash.py
narula,2020-06-10 17:48:00,"It would be nice to have a unittest to confirm that `modinv(a, n)` produces the same results as using `pow(a, n-2, n)`",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438303858,438303858,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:41:34,@narula I added a unit test for this.,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837523,438837523,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:41:46,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837672,438837672,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:41:57,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837786,438837786,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:42:05,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837885,438837885,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:42:20,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838043,438838043,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:43:14,done but also added extra brackets because otherwise it seemed weird to me,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838689,438838689,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:43:22,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838791,438838791,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:43:31,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838905,438838905,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:46:18,It's not used anyway so I just didn't assign the value to a variable. Since the loop is just one line I think it's still understandable.,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438840916,438840916,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:46:26,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841019,438841019,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:46:34,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841117,438841117,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:46:40,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841188,438841188,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:46:48,done,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841270,438841270,test/functional/rpc_blockchain.py
fjahr,2020-06-11 14:54:07,"yeah, I think that's better. done",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438846364,438846364,test/functional/test_framework/muhash.py
fjahr,2020-06-11 14:54:58,"Thanks for this suggestion, but I am not convinced that this is a good idea. I think it would be confusing because this is not really a Set but a hash representing a Set. So there is no way for example to know about the inclusion of a specific value or the number of values already added. There is also no enforcement here that this is actually a Set. You could add the same value twice and it would ",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438847029,438847029,test/functional/test_framework/muhash.py
Sjors,2020-07-06 10:59:20,"You could add a note here on why we don't use `pow(a, n-2, n)`",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450144820,450144820,test/functional/test_framework/util.py
Sjors,2020-07-06 11:01:59,"Nit: since there's another place that uses `modinv`, the helper function might be a better place to put this TODO. The helper function is useful anyway, because `modinv` is more readable than `pow(a, -1, n)`.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450146053,450146053,test/functional/test_framework/muhash.py
jnewbery,2020-07-16 07:31:18,"""... uses Fermat's little theorem which is significantly slower"" doesn't really make sense. Fermat's little theorem is that a^p = a (mod p). It's not an algorithm for calculating powers.\n\nI'd suggest just removing this TODO entirely.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455568177,455568177,test/functional/test_framework/util.py
jnewbery,2020-07-16 07:38:20,"Normally, standard library modules are imported before local project modules: https://www.python.org/dev/peps/pep-0008/#imports",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455571889,455571889,test/functional/test_framework/muhash.py
jnewbery,2020-07-16 07:50:33,prefer unittest's `self.assertEqual` to our own version here.,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455581033,455581033,test/functional/test_framework/muhash.py
jonatack,2020-07-16 08:02:40,"Yes, further on this, a couple of Python linters I've been finding useful are pycodestyle (`pip install pycodestyle`) and black (`pip install black`), not necessarily to follow blindly but they do provide helpful suggestions.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455593199,455593199,test/functional/test_framework/muhash.py
Sjors,2020-07-16 10:26:47,"`// TODO: change to pow(a, -1, n)` should be kept though (because it's more readable)\n\n",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455685572,455685572,test/functional/test_framework/util.py
jnewbery,2020-07-16 13:26:02,"meh. Now that it's implemented, it's implemented. I don't see much benefit to changing it (and in general I don't think we should be leaving TODOs in the code)",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455783867,455783867,test/functional/test_framework/util.py
theStack,2020-07-16 14:48:07,"My two cents: it almost always makes sense to use what the standard library provides instead of reinventing the wheel with own implementations. Same as C++17 and C++20 substitutes will eventually be replaced when we switch over (e.g. for `std::span` or `std::optional`), the same should be done for Python functions in the future. No need to keep the codebase larger than necessary. ""Now that it's im",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455844758,455844758,test/functional/test_framework/util.py
troygiorshev,2020-07-16 15:07:14,"Suggest to remove the TODO and open this change as a PR or issue and discuss it there.  Then comments won't get lost, we can show benchmarks, etc.  Eventually this change will need review (with evidence) before it is merged.  We're not just going to blindly trust a TODO, so there's no value in having it.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455859017,455859017,test/functional/test_framework/util.py
fjahr,2020-07-16 16:24:01,"For now, I have kept a shortened TODO since personally I have a slight preference to keep it. While I dislike most instances of TODOs in the code, this is an ok one IMO because it is very clear what there is to do and when it should be done. I don't think it's better to open a PR now that will have to stay open for a long time until the min version is bumped. It's just a different kind of clutter ",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455912994,455912994,test/functional/test_framework/util.py
jnewbery,2020-07-16 16:30:43,ok!,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455917231,455917231,test/functional/test_framework/util.py
ysangkok,2020-09-01 14:56:28,"> You could add the same value twice and it would work.\n\nSets commonly ignore the second insertion. The set in Python also works like this.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481201334,481201334,test/functional/test_framework/muhash.py
fjahr,2020-09-01 15:43:41,"Yes, but that is the whole point: Muhash cannot ignore the second insertion. Adding an element the second time changes the internal state because there is no way to tell if an element is already in the Muhash or not.",https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481241532,481241532,test/functional/test_framework/muhash.py
vindard,2021-02-20 12:13:53,Adding a little explainer video here for anyone else curious about ChaCha20: https://youtu.be/UeIpq-C-GSA,https://github.com/bitcoin/bitcoin/pull/19105#discussion_r579648975,579648975,test/functional/test_framework/muhash.py
