[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637788531",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-637788531",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 637788531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzc4ODUzMQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T20:29:23Z",
    "updated_at": "2020-06-02T20:29:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added a super simple test that reimplements the C++ impl unit test in Python. I am working on more exhaustive tests for the next PR in this series.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637788531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639955477",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-639955477",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 639955477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTk1NTQ3Nw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-06T02:03:40Z",
    "updated_at": "2020-08-28T07:11:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19253 (Tests: tidy up address.py and segwit_addr.py by jnewbery)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #17977 (Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639955477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642718446",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-642718446",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 642718446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjcxODQ0Ng==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T15:02:23Z",
    "updated_at": "2020-06-11T15:09:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and addressed all review comments. This is now also using SHA256 as discussed in #19055 .",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642718446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643412969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643412969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 643412969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQxMjk2OQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-12T18:03:16Z",
    "updated_at": "2020-06-12T18:03:16Z",
    "author_association": "MEMBER",
    "body": "The chacha code also deserves its own file (and commit).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643412969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643415199",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643415199",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 643415199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQxNTE5OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-12T18:08:02Z",
    "updated_at": "2020-06-12T18:08:02Z",
    "author_association": "MEMBER",
    "body": "@Sjors I'd agree if it was generically useful ChaCha20 code, but given that's it's a minimal specialized implementation just for 3072-bit outputs with IV 0, I'm less convinced.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643415199/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643458042",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-643458042",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 643458042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQ1ODA0Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-12T19:56:55Z",
    "updated_at": "2020-06-12T19:56:55Z",
    "author_association": "MEMBER",
    "body": "We'll need a python chacha implementation when BIP324 lands, and the functionality in `chacha20_doubleround()` could be part of that, but until BIP324 I think it's fine to have it in the same file as the muhash code.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643458042/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656082510",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-656082510",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 656082510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjA4MjUxMA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-09T11:52:31Z",
    "updated_at": "2020-07-09T11:52:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Took @Sjors suggestions: moved the TODO comment to the util function and added chacha20 test vectors with nonce 0.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656082510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656132497",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-656132497",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 656132497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjEzMjQ5Nw==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-09T13:37:53Z",
    "updated_at": "2020-07-09T13:37:53Z",
    "author_association": "MEMBER",
    "body": "re-ACK 352c702901b369132de109ddf7b6b1addc512b34",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656132497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659522858",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-659522858",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 659522858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTUyMjg1OA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-16T16:24:55Z",
    "updated_at": "2020-07-16T16:24:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed @jnewbery 's review comments.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659522858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659527434",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-659527434",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 659527434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTUyNzQzNA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-16T16:32:53Z",
    "updated_at": "2020-07-16T16:32:53Z",
    "author_association": "MEMBER",
    "body": "utACK 36ec9801a",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659527434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684910000",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#issuecomment-684910000",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19105",
    "id": 684910000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDkxMDAwMA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T14:48:26Z",
    "updated_at": "2020-09-01T14:48:26Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684910000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249",
    "pull_request_review_id": 422602841,
    "id": 433820249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyMDI0OQ==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "To simplify the code, one could just use [Fermat's little theorem](https://en.wikipedia.org/wiki/Fermat%27s_little_theorem) here to calculate the modular inverse. The drawback is that it's much slower than the extended Euclidean algorithm, calculating the modinv of a random 3072-bit number takes approx. 100-150ms on my machine, which is at least 1 order of magnitude slower. Not sure if that's an issue and in the case of tests whether performance or readability is more important :-)\r\n\r\n```suggestion\r\ndef modinv(a, n):\r\n    \"\"\"Compute the modular inverse of a prime modulo n using Fermat's little theorem.\"\"\"\r\n    return pow(a, n-2, n)\r\n```",
    "created_at": "2020-06-02T11:57:14Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r433820249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r433820249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433820249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051",
    "pull_request_review_id": 423031205,
    "id": 434155051,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NTA1MQ==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, I see your point, however, given how often these tests run on people's machines and in the CI environment, performance does matter quite a bit. But I think it's a great question to discuss during the PR review club next week :)",
    "created_at": "2020-06-02T20:25:43Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434155051",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434155051"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434155051/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 433820249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798",
    "pull_request_review_id": 423101289,
    "id": 434210798,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc5OA==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, if comprehension is a concern, I suspect that people who are familiar with modular inverses will generally understand both the euclidean and the fermat approach; and to people who aren't familiar with it both will look like black magic.",
    "created_at": "2020-06-02T22:31:20Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434210798",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434210798"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434210798/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 433820249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037",
    "pull_request_review_id": 423524324,
    "id": 434546037,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0NjAzNw==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@fjahr @sipa: Fair enough! By the way, Python 3.8 introduced support for negative exponents in the modulo (three argument) `pow()` (see https://bugs.python.org/issue36027, https://github.com/python/cpython/pull/13266), internally calculating the modular inverse via the extended Euclidean algorithm. I.e. somewhere in the future it could be just a very simple:\r\n`return pow(a, -1, n)`",
    "created_at": "2020-06-03T12:57:36Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434546037",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r434546037"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434546037/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 433820249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361",
    "pull_request_review_id": 427012518,
    "id": 437312361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM2MQ==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's worth annotating in a TODO: `// Python 3.8: return pow(a, -1, n)` (tested locally with Python 3.8.2)\r\n \r\nI like having the simpler approach here. It's yet another sanity check that our implementation is correct, given the lack of test vectors. But given the performance impact, if it really matters compared to the rest of the test, better leave that as a TODO.",
    "created_at": "2020-06-09T10:39:29Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437312361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437312361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437312361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 433820249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868",
    "pull_request_review_id": 427158195,
    "id": 437423868,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzg2OA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 8,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is duplication of the code in `key.py`. Can you move it into `util.py` or a new `crypto_util.py` instead of repeating it?",
    "created_at": "2020-06-09T13:38:51Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437423868",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437423868"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437423868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307",
    "pull_request_review_id": 427158195,
    "id": 437434307,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNDMwNw==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):",
    "path": "test/functional/test_framework/muhash.py",
    "position": 11,
    "original_position": 22,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Calling this function with `bits` < 0 or `bits` > 32  throws. Perhaps call `bits %= 32` to reduce it to a valid value?",
    "created_at": "2020-06-09T13:49:14Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437434307",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437434307"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437434307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 11,
    "original_line": 11,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515",
    "pull_request_review_id": 427158195,
    "id": 437439515,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTUxNQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 27,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I suggest you link to the specification for chacha here: https://cr.yp.to/chacha/chacha-20080128.pdf or here: https://tools.ietf.org/html/rfc7539",
    "created_at": "2020-06-09T13:53:57Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437439515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437439515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437439515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290",
    "pull_request_review_id": 427158195,
    "id": 437444290,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDI5MA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 28,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: remove double spaces",
    "created_at": "2020-06-09T13:58:54Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437444290",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437444290"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437444290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217",
    "pull_request_review_id": 427158195,
    "id": 437445217,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTIxNw==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 42,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: this would be slightly easier on the eye with spaces around the operators (see https://www.python.org/dev/peps/pep-0008/#other-recommendations)",
    "created_at": "2020-06-09T14:00:02Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437445217",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437445217"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437445217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100",
    "pull_request_review_id": 427158195,
    "id": 437480100,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDEwMA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 28,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Explicitly naming the quarter rounds would make this clearer:\r\n\r\n```suggestion\r\n    QUARTER_ROUNDS = [(0, 4, 8, 12),\r\n                      (1, 5, 9, 13),\r\n                      (2, 6, 10, 14),\r\n                      (3, 7, 11, 15),\r\n                      (0, 5, 10, 15),\r\n                      (1, 6, 11, 12),\r\n                      (2, 7, 8, 13),\r\n                      (3, 4, 9, 14)]\r\n    for a, b, c, d in QUARTER_ROUNDS:\r\n\r\n```",
    "created_at": "2020-06-09T14:45:08Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437480100",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437480100"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437480100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786",
    "pull_request_review_id": 427158195,
    "id": 437503786,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMzc4Ng==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 42,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Again, being explicitly about where these magic numbers come from would be nice:\r\n\r\n```suggestion\r\n    # See RFC 7539 section 2.3 for chacha20 parameters\r\n    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\r\n    key_bytes = []\r\n    for i in range(8):\r\n        key_bytes[i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\r\n    INITIALIZATION_VECTOR = [0] * 4\r\n    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\r\n```",
    "created_at": "2020-06-09T15:13:03Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437503786",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437503786"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437503786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 40,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272",
    "pull_request_review_id": 427158195,
    "id": 437509272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwOTI3Mg==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 44,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is `pos`? Would `counter` be a better name, since this value is used as the block counter?",
    "created_at": "2020-06-09T15:17:10Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899",
    "pull_request_review_id": 427158195,
    "id": 437509899,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwOTg5OQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 47,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/rnd/round/. `rnd` is often used to mean random, which is confusing here.",
    "created_at": "2020-06-09T15:17:39Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509899",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437509899"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437509899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449",
    "pull_request_review_id": 427158195,
    "id": 437513449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzQ0OQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 46,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this would be clearer as:\r\n\r\n```suggestion\r\n        s = init.copy()\r\n```",
    "created_at": "2020-06-09T15:20:17Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437513449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437513449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437513449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184",
    "pull_request_review_id": 427158195,
    "id": 437529184,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTE4NA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 54,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this docstring should indicate that it's hashing using Chacha20\r\n\r\n```suggestion\r\n    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\r\n```",
    "created_at": "2020-06-09T15:39:07Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437529184",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437529184"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437529184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296",
    "pull_request_review_id": 427158195,
    "id": 437530296,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMDI5Ng==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 59,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Reference where the algorithm comes from:\r\n\r\n- https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf for the generic algorithm\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html for the specific parameters (chacha20 and 3072-bit digest)",
    "created_at": "2020-06-09T15:40:45Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437530296",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437530296"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437530296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625",
    "pull_request_review_id": 427158195,
    "id": 437531625,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMTYyNQ==",
    "diff_hunk": "@@ -241,6 +245,15 @@ def _test_gettxoutsetinfo(self):\n         del res['disk_size'], res3['disk_size']\n         assert_equal(res, res3)\n \n+        self.log.info(\"Test that MuHash implementation in Python returns the same result as C++\")",
    "path": "test/functional/rpc_blockchain.py",
    "position": null,
    "original_position": 15,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should be a unit test in muhash.py. See #18576 for details on the python unit tests.",
    "created_at": "2020-06-09T15:42:30Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437531625",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r437531625"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437531625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 248,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563",
    "pull_request_review_id": 428062608,
    "id": 438129563,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyOTU2Mw==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 27,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Possibly only the first link.  There are slight differences between those two and https://tools.ietf.org/html/rfc8439.  See #19225 ",
    "created_at": "2020-06-10T13:39:55Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438129563",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438129563"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438129563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 437439515
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648",
    "pull_request_review_id": 428074908,
    "id": 438138648,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzODY0OA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 46,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also `.copy()` is around twice as fast.",
    "created_at": "2020-06-10T13:52:06Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438138648",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438138648"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438138648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT",
    "in_reply_to_id": 437513449
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438262885",
    "pull_request_review_id": 428239541,
    "id": 438262885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2Mjg4NQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
    "path": "test/functional/test_framework/muhash.py",
    "position": 66,
    "original_position": 58,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "ysangkok",
      "id": 284023,
      "node_id": "MDQ6VXNlcjI4NDAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ysangkok",
      "html_url": "https://github.com/ysangkok",
      "followers_url": "https://api.github.com/users/ysangkok/followers",
      "following_url": "https://api.github.com/users/ysangkok/following{/other_user}",
      "gists_url": "https://api.github.com/users/ysangkok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
      "organizations_url": "https://api.github.com/users/ysangkok/orgs",
      "repos_url": "https://api.github.com/users/ysangkok/repos",
      "events_url": "https://api.github.com/users/ysangkok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ysangkok/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this should implement [MutableSet](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)",
    "created_at": "2020-06-10T16:38:53Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438262885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438262885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438262885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438262885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263145",
    "pull_request_review_id": 428239541,
    "id": 438263145,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MzE0NQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):",
    "path": "test/functional/test_framework/muhash.py",
    "position": 79,
    "original_position": 68,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "ysangkok",
      "id": 284023,
      "node_id": "MDQ6VXNlcjI4NDAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ysangkok",
      "html_url": "https://github.com/ysangkok",
      "followers_url": "https://api.github.com/users/ysangkok/followers",
      "following_url": "https://api.github.com/users/ysangkok/following{/other_user}",
      "gists_url": "https://api.github.com/users/ysangkok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
      "organizations_url": "https://api.github.com/users/ysangkok/orgs",
      "repos_url": "https://api.github.com/users/ysangkok/repos",
      "events_url": "https://api.github.com/users/ysangkok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ysangkok/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "the method is called `add` in collections.abc.",
    "created_at": "2020-06-10T16:39:21Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263145",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263145"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263145"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 79,
    "original_line": 79,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263309",
    "pull_request_review_id": 428239541,
    "id": 438263309,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MzMwOQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):\n+        \"\"\"Insert a byte array data in the set.\"\"\"\n+        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+\n+    def remove(self, data):",
    "path": "test/functional/test_framework/muhash.py",
    "position": 83,
    "original_position": 72,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "ysangkok",
      "id": 284023,
      "node_id": "MDQ6VXNlcjI4NDAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ysangkok",
      "html_url": "https://github.com/ysangkok",
      "followers_url": "https://api.github.com/users/ysangkok/followers",
      "following_url": "https://api.github.com/users/ysangkok/following{/other_user}",
      "gists_url": "https://api.github.com/users/ysangkok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
      "organizations_url": "https://api.github.com/users/ysangkok/orgs",
      "repos_url": "https://api.github.com/users/ysangkok/repos",
      "events_url": "https://api.github.com/users/ysangkok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ysangkok/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "the method is called `discard` in collections.abc",
    "created_at": "2020-06-10T16:39:39Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263309",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263309"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438263309"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438263309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 83,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438303858",
    "pull_request_review_id": 428292251,
    "id": 438303858,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMzg1OA==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would be nice to have a unittest to confirm that `modinv(a, n)` produces the same results as using `pow(a, n-2, n)`",
    "created_at": "2020-06-10T17:48:00Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438303858",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438303858"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438303858"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438303858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 433820249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837523",
    "pull_request_review_id": 428981162,
    "id": 438837523,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzUyMw==",
    "diff_hunk": "@@ -0,0 +1,81 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 20,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "fc6f2bd3376bc7442992ceb6b5f2c8e8a805f018",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@narula I added a unit test for this.",
    "created_at": "2020-06-11T14:41:34Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837523",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837523"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837523"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837523/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 8,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 433820249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837672",
    "pull_request_review_id": 428981350,
    "id": 438837672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzY3Mg==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 8,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:41:46Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT",
    "in_reply_to_id": 437423868
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837786",
    "pull_request_review_id": 428981517,
    "id": 438837786,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzc4Ng==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):",
    "path": "test/functional/test_framework/muhash.py",
    "position": 11,
    "original_position": 22,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:41:57Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837786",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837786"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837786"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 11,
    "original_line": 11,
    "side": "RIGHT",
    "in_reply_to_id": 437434307
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837885",
    "pull_request_review_id": 428981656,
    "id": 438837885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNzg4NQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 27,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:42:05Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438837885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438837885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 437439515
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838043",
    "pull_request_review_id": 428981877,
    "id": 438838043,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODA0Mw==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 28,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:42:20Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838043",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838043"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838043"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 437444290
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838689",
    "pull_request_review_id": 428982720,
    "id": 438838689,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODY4OQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 42,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done but also added extra brackets because otherwise it seemed weird to me",
    "created_at": "2020-06-11T14:43:14Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838689",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838689"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838689"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 437445217
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838791",
    "pull_request_review_id": 428982863,
    "id": 438838791,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODc5MQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 28,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:43:22Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838791",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838791"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838791"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 437480100
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838905",
    "pull_request_review_id": 428982987,
    "id": 438838905,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzODkwNQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 42,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:43:31Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838905",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838905"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438838905"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438838905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 40,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 437503786
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438840916",
    "pull_request_review_id": 428985654,
    "id": 438840916,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MDkxNg==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 47,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's not used anyway so I just didn't assign the value to a variable. Since the loop is just one line I think it's still understandable.",
    "created_at": "2020-06-11T14:46:18Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438840916",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438840916"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438840916"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438840916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 437509899
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841019",
    "pull_request_review_id": 428985779,
    "id": 438841019,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTAxOQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 46,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:46:26Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841019",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841019"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841019"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT",
    "in_reply_to_id": 437513449
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841117",
    "pull_request_review_id": 428985910,
    "id": 438841117,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTExNw==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 54,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:46:34Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841117",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841117"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841117"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT",
    "in_reply_to_id": 437529184
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841188",
    "pull_request_review_id": 428986024,
    "id": 438841188,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTE4OA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\"\"\"",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 59,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:46:40Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841188",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841188"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841188"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 437530296
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841270",
    "pull_request_review_id": 428986119,
    "id": 438841270,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTI3MA==",
    "diff_hunk": "@@ -241,6 +245,15 @@ def _test_gettxoutsetinfo(self):\n         del res['disk_size'], res3['disk_size']\n         assert_equal(res, res3)\n \n+        self.log.info(\"Test that MuHash implementation in Python returns the same result as C++\")",
    "path": "test/functional/rpc_blockchain.py",
    "position": null,
    "original_position": 15,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-11T14:46:48Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841270",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841270"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438841270"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438841270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 248,
    "side": "RIGHT",
    "in_reply_to_id": 437531625
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438846364",
    "pull_request_review_id": 428993027,
    "id": 438846364,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NjM2NA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 44,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yeah, I think that's better. done",
    "created_at": "2020-06-11T14:54:07Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438846364",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438846364"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438846364"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438846364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT",
    "in_reply_to_id": 437509272
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438847029",
    "pull_request_review_id": 428993922,
    "id": 438847029,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NzAyOQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
    "path": "test/functional/test_framework/muhash.py",
    "position": 66,
    "original_position": 58,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for this suggestion, but I am not convinced that this is a good idea. I think it would be confusing because this is not really a Set but a hash representing a Set. So there is no way for example to know about the inclusion of a specific value or the number of values already added. There is also no enforcement here that this is actually a Set. You could add the same value twice and it would work. We are just not sure if this breaks security guarantees and the way MuHash is intended to be used in Bitcoin Core, for now, this should not happen because the UTXO set is a Set. So doing this would send the wrong message I think. And I would also like to keep this class as plain as possible.",
    "created_at": "2020-06-11T14:54:58Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438847029",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438847029"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r438847029"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438847029/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 438262885
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450144820",
    "pull_request_review_id": 442976087,
    "id": 450144820,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NDgyMA==",
    "diff_hunk": "@@ -629,3 +630,33 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n\n+\n+    See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 16,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "46c3ef63877b2d53fc0f4fe38d84497011474af6",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You could add a note here on why we don't use `pow(a, n-2, n)`",
    "created_at": "2020-07-06T10:59:20Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450144820",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450144820"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450144820"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450144820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 637,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450146053",
    "pull_request_review_id": 442976087,
    "id": 450146053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NjA1Mw==",
    "diff_hunk": "@@ -0,0 +1,105 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib\n+import unittest\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    bits %= 32  # Make sure the term below does not throw an exception\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\n+\n+    See https://cr.yp.to/chacha/chacha-20080128.pdf and https://tools.ietf.org/html/rfc8439\n+    \"\"\"\n+    QUARTER_ROUNDS = [(0, 4, 8, 12),\n+                      (1, 5, 9, 13),\n+                      (2, 6, 10, 14),\n+                      (3, 7, 11, 15),\n+                      (0, 5, 10, 15),\n+                      (1, 6, 11, 12),\n+                      (2, 7, 8, 13),\n+                      (3, 4, 9, 14)]\n+\n+    for a, b, c, d in QUARTER_ROUNDS:\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    # See RFC 8439 section 2.3 for chacha20 parameters\n+    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n+\n+    key_bytes = [0]*8\n+    for i in range(8):\n+        key_bytes[i] = int.from_bytes(key32[(4 * i):(4 * (i+1))], 'little')\n+\n+    INITIALIZATION_VECTOR = [0] * 4\n+    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\n+    out = bytearray()\n+    for counter in range(6):\n+        init[12] = counter\n+        s = init.copy()\n+        for _ in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\n+\n+    See https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\n+    \"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):\n+        \"\"\"Insert a byte array data in the set.\"\"\"\n+        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+\n+    def remove(self, data):\n+        \"\"\"Remove a byte array from the set.\"\"\"\n+        self.denominator = (self.denominator * data_to_num3072(data)) % self.MODULUS\n+\n+    def digest(self):\n+        \"\"\"Extract the final hash. Does not modify this object.\"\"\"\n+        # TODO: With Python 3.8 modinv can be replaced with pow(a, -1, n)",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 92,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "88997dd738759ed0e399f0da56bb9937079ffdd4",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: since there's another place that uses `modinv`, the helper function might be a better place to put this TODO. The helper function is useful anyway, because `modinv` is more readable than `pow(a, -1, n)`.",
    "created_at": "2020-07-06T11:01:59Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450146053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450146053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r450146053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/450146053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455568177",
    "pull_request_review_id": 449580346,
    "id": 455568177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODE3Nw==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"... uses Fermat's little theorem which is significantly slower\" doesn't really make sense. Fermat's little theorem is that a^p = a (mod p). It's not an algorithm for calculating powers.\r\n\r\nI'd suggest just removing this TODO entirely.",
    "created_at": "2020-07-16T07:31:18Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455568177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455568177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455568177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455568177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455571889",
    "pull_request_review_id": 449580346,
    "id": 455571889,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MTg4OQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib",
    "path": "test/functional/test_framework/muhash.py",
    "position": 6,
    "original_position": 11,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Normally, standard library modules are imported before local project modules: https://www.python.org/dev/peps/pep-0008/#imports",
    "created_at": "2020-07-16T07:38:20Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455571889",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455571889"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455571889"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455571889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 6,
    "original_line": 6,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455581033",
    "pull_request_review_id": 449580346,
    "id": 455581033,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4MTAzMw==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib\n+import unittest\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    bits %= 32  # Make sure the term below does not throw an exception\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\n+\n+    See https://cr.yp.to/chacha/chacha-20080128.pdf and https://tools.ietf.org/html/rfc8439\n+    \"\"\"\n+    QUARTER_ROUNDS = [(0, 4, 8, 12),\n+                      (1, 5, 9, 13),\n+                      (2, 6, 10, 14),\n+                      (3, 7, 11, 15),\n+                      (0, 5, 10, 15),\n+                      (1, 6, 11, 12),\n+                      (2, 7, 8, 13),\n+                      (3, 4, 9, 14)]\n+\n+    for a, b, c, d in QUARTER_ROUNDS:\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    # See RFC 8439 section 2.3 for chacha20 parameters\n+    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n+\n+    key_bytes = [0]*8\n+    for i in range(8):\n+        key_bytes[i] = int.from_bytes(key32[(4 * i):(4 * (i+1))], 'little')\n+\n+    INITIALIZATION_VECTOR = [0] * 4\n+    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\n+    out = bytearray()\n+    for counter in range(6):\n+        init[12] = counter\n+        s = init.copy()\n+        for _ in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:\n+    \"\"\"Class representing the MuHash3072 computation of a set.\n+\n+    See https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\n+    \"\"\"\n+\n+    MODULUS = 2**3072 - 1103717\n+\n+    def __init__(self):\n+        \"\"\"Initialize for an empty set.\"\"\"\n+        self.numerator = 1\n+        self.denominator = 1\n+\n+    def insert(self, data):\n+        \"\"\"Insert a byte array data in the set.\"\"\"\n+        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+\n+    def remove(self, data):\n+        \"\"\"Remove a byte array from the set.\"\"\"\n+        self.denominator = (self.denominator * data_to_num3072(data)) % self.MODULUS\n+\n+    def digest(self):\n+        \"\"\"Extract the final hash. Does not modify this object.\"\"\"\n+        val = (self.numerator * modinv(self.denominator, self.MODULUS)) % self.MODULUS\n+        bytes384 = val.to_bytes(384, 'little')\n+        return hashlib.sha256(bytes384).digest()\n+\n+class TestFrameworkMuhash(unittest.TestCase):\n+    def test_muhash(self):\n+        muhash = MuHash3072()\n+        muhash.insert([0]*32)\n+        muhash.insert([1] + [0]*31)\n+        muhash.remove([2] + [0]*31)\n+        finalized = muhash.digest()\n+        # This mirrors the result in the C++ MuHash3072 unit test\n+        assert_equal(finalized[::-1].hex(), \"a44e16d5e34d259b349af21c06e65d653915d2e208e4e03f389af750dc0bfdc3\")",
    "path": "test/functional/test_framework/muhash.py",
    "position": null,
    "original_position": 104,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "prefer unittest's `self.assertEqual` to our own version here.",
    "created_at": "2020-07-16T07:50:33Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455581033",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455581033"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455581033"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455581033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455593199",
    "pull_request_review_id": 449611322,
    "id": 455593199,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MzE5OQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+from .util import (\n+    assert_equal,\n+    modinv,\n+)\n+\n+import hashlib",
    "path": "test/functional/test_framework/muhash.py",
    "position": 6,
    "original_position": 11,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, further on this, a couple of Python linters I've been finding useful are pycodestyle (`pip install pycodestyle`) and black (`pip install black`), not necessarily to follow blindly but they do provide helpful suggestions.",
    "created_at": "2020-07-16T08:02:40Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455593199",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455593199"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455593199"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455593199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 6,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 455571889
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455685572",
    "pull_request_review_id": 449719169,
    "id": 455685572,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NTU3Mg==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`// TODO: change to pow(a, -1, n)` should be kept though (because it's more readable)\r\n\r\n",
    "created_at": "2020-07-16T10:26:47Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455685572",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455685572"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455685572"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455685572/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT",
    "in_reply_to_id": 455568177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455783867",
    "pull_request_review_id": 449844756,
    "id": 455783867,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4Mzg2Nw==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "meh. Now that it's implemented, it's implemented. I don't see much benefit to changing it (and in general I don't think we should be leaving TODOs in the code)",
    "created_at": "2020-07-16T13:26:02Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455783867",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455783867"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455783867"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455783867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT",
    "in_reply_to_id": 455568177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455844758",
    "pull_request_review_id": 449923817,
    "id": 455844758,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NDc1OA==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My two cents: it almost always makes sense to use what the standard library provides instead of reinventing the wheel with own implementations. Same as C++17 and C++20 substitutes will eventually be replaced when we switch over (e.g. for `std::span` or `std::optional`), the same should be done for Python functions in the future. No need to keep the codebase larger than necessary. \"Now that it's implemented, it's implemented.\" doesn't really sound like a convincing argument to me.",
    "created_at": "2020-07-16T14:48:07Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455844758",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455844758"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455844758"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455844758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT",
    "in_reply_to_id": 455568177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455859017",
    "pull_request_review_id": 449942429,
    "id": 455859017,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1OTAxNw==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggest to remove the TODO and open this change as a PR or issue and discuss it there.  Then comments won't get lost, we can show benchmarks, etc.  Eventually this change will need review (with evidence) before it is merged.  We're not just going to blindly trust a TODO, so there's no value in having it.",
    "created_at": "2020-07-16T15:07:14Z",
    "updated_at": "2020-07-16T16:23:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455859017",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455859017"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455859017"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455859017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT",
    "in_reply_to_id": 455568177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455912994",
    "pull_request_review_id": 450012835,
    "id": 455912994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMjk5NA==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For now, I have kept a shortened TODO since personally I have a slight preference to keep it. While I dislike most instances of TODOs in the code, this is an ok one IMO because it is very clear what there is to do and when it should be done. I don't think it's better to open a PR now that will have to stay open for a long time until the min version is bumped. It's just a different kind of clutter in the project.",
    "created_at": "2020-07-16T16:24:01Z",
    "updated_at": "2020-07-16T16:24:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455912994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455912994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455912994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455912994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT",
    "in_reply_to_id": 455568177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455917231",
    "pull_request_review_id": 450018200,
    "id": 455917231,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNzIzMQ==",
    "diff_hunk": "@@ -629,3 +630,37 @@ def find_vout_for_address(node, txid, addr):\n         if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n             return i\n     raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n using the extended Euclidean\n+    Algorithm. See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n+    \"\"\"\n+    # TODO: This does not use Python's own modular inverse pow(a, n-2, n) since\n+    # that uses Fermat's little theorem which is significantly slower. However,",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 18,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "352c702901b369132de109ddf7b6b1addc512b34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok!",
    "created_at": "2020-07-16T16:30:43Z",
    "updated_at": "2020-07-16T16:30:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455917231",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455917231"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r455917231"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455917231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 639,
    "side": "RIGHT",
    "in_reply_to_id": 455568177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481201334",
    "pull_request_review_id": 479831962,
    "id": 481201334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIwMTMzNA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
    "path": "test/functional/test_framework/muhash.py",
    "position": 66,
    "original_position": 58,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "ysangkok",
      "id": 284023,
      "node_id": "MDQ6VXNlcjI4NDAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ysangkok",
      "html_url": "https://github.com/ysangkok",
      "followers_url": "https://api.github.com/users/ysangkok/followers",
      "following_url": "https://api.github.com/users/ysangkok/following{/other_user}",
      "gists_url": "https://api.github.com/users/ysangkok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
      "organizations_url": "https://api.github.com/users/ysangkok/orgs",
      "repos_url": "https://api.github.com/users/ysangkok/repos",
      "events_url": "https://api.github.com/users/ysangkok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ysangkok/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> You could add the same value twice and it would work.\r\n\r\nSets commonly ignore the second insertion. The set in Python also works like this.",
    "created_at": "2020-09-01T14:56:28Z",
    "updated_at": "2020-09-01T14:56:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481201334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481201334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481201334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481201334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 438262885
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481241532",
    "pull_request_review_id": 479876581,
    "id": 481241532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MTUzMg==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n.\"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):\n+    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\"\"\"\n+    for a, b, c, d in ((0, 4,  8, 12), (1, 5,  9, 13), (2, 6, 10, 14), (3, 7, 11, 15), (0, 5, 10, 15), (1, 6, 11, 12), (2, 7,  8, 13), (3, 4,  9, 14)):\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 16)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 12)\n+        s[a] = (s[a] + s[b]) & 0xffffffff\n+        s[d] = rot32(s[d] ^ s[a], 8)\n+        s[c] = (s[c] + s[d]) & 0xffffffff\n+        s[b] = rot32(s[b] ^ s[c], 7)\n+\n+def chacha20_32_to_384(key32):\n+    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    init = [1634760805, 857760878, 2036477234, 1797285236] + [0] * 12\n+    for i in range(8):\n+        init[4 + i] = int.from_bytes(key32[4*i:4*(i+1)], 'little')\n+    out = bytearray()\n+    for pos in range(6):\n+        init[12] = pos\n+        s = list(init)\n+        for rnd in range(10):\n+            chacha20_doubleround(s)\n+        for i in range(16):\n+            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n+    return bytes(out)\n+\n+def data_to_num3072(data):\n+    \"\"\"Map a byte array data to a 3072-bit number.\"\"\"\n+    bytes384 = chacha20_32_to_384(data)\n+    return int.from_bytes(bytes384, 'little')\n+\n+class MuHash3072:",
    "path": "test/functional/test_framework/muhash.py",
    "position": 66,
    "original_position": 58,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "a6ee4c2ceee624d1d3ed1dfa4bd6f259139bb9d8",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, but that is the whole point: Muhash cannot ignore the second insertion. Adding an element the second time changes the internal state because there is no way to tell if an element is already in the Muhash or not.",
    "created_at": "2020-09-01T15:43:41Z",
    "updated_at": "2020-09-01T15:43:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481241532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481241532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r481241532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481241532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 438262885
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579648975",
    "pull_request_review_id": 594746816,
    "id": 579648975,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTY0ODk3NQ==",
    "diff_hunk": "@@ -0,0 +1,110 @@\n+# Copyright (c) 2020 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python MuHash3072 implementation.\"\"\"\n+\n+import hashlib\n+import unittest\n+\n+from .util import modinv\n+\n+def rot32(v, bits):\n+    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+    bits %= 32  # Make sure the term below does not throw an exception\n+    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+def chacha20_doubleround(s):",
    "path": "test/functional/test_framework/muhash.py",
    "position": 16,
    "original_position": 16,
    "commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "original_commit_id": "36ec9801a4edb9663ef9ce9ad298233766b903e8",
    "user": {
      "login": "vindard",
      "id": 17693119,
      "node_id": "MDQ6VXNlcjE3NjkzMTE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17693119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vindard",
      "html_url": "https://github.com/vindard",
      "followers_url": "https://api.github.com/users/vindard/followers",
      "following_url": "https://api.github.com/users/vindard/following{/other_user}",
      "gists_url": "https://api.github.com/users/vindard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vindard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vindard/subscriptions",
      "organizations_url": "https://api.github.com/users/vindard/orgs",
      "repos_url": "https://api.github.com/users/vindard/repos",
      "events_url": "https://api.github.com/users/vindard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vindard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Adding a little explainer video here for anyone else curious about ChaCha20: https://youtu.be/UeIpq-C-GSA",
    "created_at": "2021-02-20T12:13:53Z",
    "updated_at": "2021-02-20T12:13:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r579648975",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579648975"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19105#discussion_r579648975"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19105"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579648975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 16,
    "original_line": 16,
    "side": "RIGHT"
  }
]