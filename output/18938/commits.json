[
  {
    "sha": "c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGJiZjgxOTNkOTJiYTg1ZDYyMDkyYzRmZDg4NmZmNDQ2MWY2NWJm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-09T21:26:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-14T18:45:42Z"
      },
      "message": "tests: Fill fuzzing coverage gaps for functions in primitives/block.h",
      "tree": {
        "sha": "088362c2a414bf9eabf3f890f40b32c1434a8804",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/088362c2a414bf9eabf3f890f40b32c1434a8804"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0bbf8193d92ba85d62092c4fd886ff4461f65bf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "553bb3fc3d953e00770c11e25d20ecd0efe041e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/553bb3fc3d953e00770c11e25d20ecd0efe041e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/553bb3fc3d953e00770c11e25d20ecd0efe041e6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f0ddae14f665b66f2248d3976971dec0ca618848",
        "filename": "src/test/fuzz/block_header.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0bbf8193d92ba85d62092c4fd886ff4461f65bf/src/test/fuzz/block_header.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0bbf8193d92ba85d62092c4fd886ff4461f65bf/src/test/fuzz/block_header.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block_header.cpp?ref=c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
        "patch": "@@ -38,4 +38,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         block.SetNull();\n         assert(block.GetBlockHeader().GetHash() == mut_block_header.GetHash());\n     }\n+    {\n+        std::optional<CBlockLocator> block_locator = ConsumeDeserializable<CBlockLocator>(fuzzed_data_provider);\n+        if (block_locator) {\n+            (void)block_locator->IsNull();\n+            block_locator->SetNull();\n+            assert(block_locator->IsNull());\n+        }\n+    }\n }"
      }
    ]
  },
  {
    "sha": "b74f3d6c452d9ad7013c70a91216220917978f66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzRmM2Q2YzQ1MmQ5YWQ3MDEzYzcwYTkxMjE2MjIwOTE3OTc4ZjY2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-09T21:27:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-14T18:45:42Z"
      },
      "message": "tests: Fill fuzzing coverage gaps for functions in consensus/validation.h",
      "tree": {
        "sha": "653448ab0d3b2d818415f78e128bfc71adde962a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/653448ab0d3b2d818415f78e128bfc71adde962a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b74f3d6c452d9ad7013c70a91216220917978f66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74f3d6c452d9ad7013c70a91216220917978f66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b74f3d6c452d9ad7013c70a91216220917978f66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74f3d6c452d9ad7013c70a91216220917978f66/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0bbf8193d92ba85d62092c4fd886ff4461f65bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0bbf8193d92ba85d62092c4fd886ff4461f65bf"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91bd34a2515af2478114da4e0b3815e9adf47023",
        "filename": "src/test/fuzz/block.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74f3d6c452d9ad7013c70a91216220917978f66/src/test/fuzz/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74f3d6c452d9ad7013c70a91216220917978f66/src/test/fuzz/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block.cpp?ref=b74f3d6c452d9ad7013c70a91216220917978f66",
        "patch": "@@ -38,12 +38,17 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const Consensus::Params& consensus_params = Params().GetConsensus();\n     BlockValidationState validation_state_pow_and_merkle;\n     const bool valid_incl_pow_and_merkle = CheckBlock(block, validation_state_pow_and_merkle, consensus_params, /* fCheckPOW= */ true, /* fCheckMerkleRoot= */ true);\n+    assert(validation_state_pow_and_merkle.IsValid() || validation_state_pow_and_merkle.IsInvalid() || validation_state_pow_and_merkle.IsError());\n+    (void)validation_state_pow_and_merkle.Error(\"\");\n     BlockValidationState validation_state_pow;\n     const bool valid_incl_pow = CheckBlock(block, validation_state_pow, consensus_params, /* fCheckPOW= */ true, /* fCheckMerkleRoot= */ false);\n+    assert(validation_state_pow.IsValid() || validation_state_pow.IsInvalid() || validation_state_pow.IsError());\n     BlockValidationState validation_state_merkle;\n     const bool valid_incl_merkle = CheckBlock(block, validation_state_merkle, consensus_params, /* fCheckPOW= */ false, /* fCheckMerkleRoot= */ true);\n+    assert(validation_state_merkle.IsValid() || validation_state_merkle.IsInvalid() || validation_state_merkle.IsError());\n     BlockValidationState validation_state_none;\n     const bool valid_incl_none = CheckBlock(block, validation_state_none, consensus_params, /* fCheckPOW= */ false, /* fCheckMerkleRoot= */ false);\n+    assert(validation_state_none.IsValid() || validation_state_none.IsInvalid() || validation_state_none.IsError());\n     if (valid_incl_pow_and_merkle) {\n         assert(valid_incl_pow && valid_incl_merkle && valid_incl_none);\n     } else if (valid_incl_merkle || valid_incl_pow) {"
      }
    ]
  },
  {
    "sha": "fb559c1170773360afb9d05daaccd57d18636ee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjU1OWMxMTcwNzczMzYwYWZiOWQwNWRhYWNjZDU3ZDE4NjM2ZWU5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-10T12:32:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-14T18:52:57Z"
      },
      "message": "tests: Fill fuzzing coverage gaps for functions in util/translation.h",
      "tree": {
        "sha": "d4ff47882dc690c7d0928ca37a75c11b8b2abbbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4ff47882dc690c7d0928ca37a75c11b8b2abbbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb559c1170773360afb9d05daaccd57d18636ee9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb559c1170773360afb9d05daaccd57d18636ee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb559c1170773360afb9d05daaccd57d18636ee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb559c1170773360afb9d05daaccd57d18636ee9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b74f3d6c452d9ad7013c70a91216220917978f66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74f3d6c452d9ad7013c70a91216220917978f66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b74f3d6c452d9ad7013c70a91216220917978f66"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c1f911f7e825a525dcb4fb5007bfc97202bdb0b",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb559c1170773360afb9d05daaccd57d18636ee9/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb559c1170773360afb9d05daaccd57d18636ee9/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=fb559c1170773360afb9d05daaccd57d18636ee9",
        "patch": "@@ -119,4 +119,10 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         int64_t amount_out;\n         (void)ParseFixedPoint(random_string_1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 1024), &amount_out);\n     }\n+    {\n+        (void)Untranslated(random_string_1);\n+        const bilingual_str bs1{random_string_1, random_string_2};\n+        const bilingual_str bs2{random_string_2, random_string_1};\n+        (void)(bs1 + bs2);\n+    }\n }"
      },
      {
        "sha": "29064bc45c19d94d297ff9a588f2e4f9d0699c2b",
        "filename": "src/test/fuzz/strprintf.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb559c1170773360afb9d05daaccd57d18636ee9/src/test/fuzz/strprintf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb559c1170773360afb9d05daaccd57d18636ee9/src/test/fuzz/strprintf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/strprintf.cpp?ref=fb559c1170773360afb9d05daaccd57d18636ee9",
        "patch": "@@ -6,6 +6,7 @@\n #include <test/fuzz/fuzz.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n #include <algorithm>\n #include <cstdint>\n@@ -16,6 +17,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     const std::string format_string = fuzzed_data_provider.ConsumeRandomLengthString(64);\n+    const bilingual_str bilingual_string{format_string, format_string};\n \n     const int digits_in_format_specifier = std::count_if(format_string.begin(), format_string.end(), IsDigit);\n \n@@ -47,72 +49,90 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     try {\n         (void)strprintf(format_string, (signed char*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (signed char*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (unsigned char*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (unsigned char*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (void*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (void*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (bool*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (bool*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (float*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (float*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (double*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (double*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (int16_t*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (int16_t*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (uint16_t*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (uint16_t*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (int32_t*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (int32_t*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (uint32_t*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (uint32_t*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (int64_t*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (int64_t*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n     try {\n         (void)strprintf(format_string, (uint64_t*)nullptr);\n+        (void)tinyformat::format(bilingual_string, (uint64_t*)nullptr);\n     } catch (const tinyformat::format_error&) {\n     }\n \n     try {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 5)) {\n         case 0:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeRandomLengthString(32));\n             break;\n         case 1:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeRandomLengthString(32).c_str());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeRandomLengthString(32).c_str());\n             break;\n         case 2:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<signed char>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<signed char>());\n             break;\n         case 3:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<unsigned char>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<unsigned char>());\n             break;\n         case 4:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<char>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<char>());\n             break;\n         case 5:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeBool());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeBool());\n             break;\n         }\n     } catch (const tinyformat::format_error&) {\n@@ -138,27 +158,35 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 7)) {\n         case 0:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeFloatingPoint<float>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeFloatingPoint<float>());\n             break;\n         case 1:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeFloatingPoint<double>());\n             break;\n         case 2:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int16_t>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<int16_t>());\n             break;\n         case 3:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint16_t>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<uint16_t>());\n             break;\n         case 4:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int32_t>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<int32_t>());\n             break;\n         case 5:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n             break;\n         case 6:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<int64_t>());\n             break;\n         case 7:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+            (void)tinyformat::format(bilingual_string, fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n             break;\n         }\n     } catch (const tinyformat::format_error&) {"
      }
    ]
  },
  {
    "sha": "cd34038cbda4864e4770734c44b18d3e01aa2a28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDM0MDM4Y2JkYTQ4NjRlNDc3MDczNGM0NGIxOGQzZTAxYWEyYTI4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-10T18:35:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-14T18:52:57Z"
      },
      "message": "Switch from Optional<T> to std::optional<T> (C++17). Run clang-format.",
      "tree": {
        "sha": "d08835aeb6ee0f4b11a4c827eb2150957d63dd37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d08835aeb6ee0f4b11a4c827eb2150957d63dd37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd34038cbda4864e4770734c44b18d3e01aa2a28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd34038cbda4864e4770734c44b18d3e01aa2a28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd34038cbda4864e4770734c44b18d3e01aa2a28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd34038cbda4864e4770734c44b18d3e01aa2a28/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb559c1170773360afb9d05daaccd57d18636ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb559c1170773360afb9d05daaccd57d18636ee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb559c1170773360afb9d05daaccd57d18636ee9"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 111,
      "deletions": 87
    },
    "files": [
      {
        "sha": "524cea83fe83ccf99b622f130c84c1592ad48082",
        "filename": "src/test/fuzz/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrdb.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,13 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <addrdb.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cassert>\n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -30,7 +30,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                                                                               })};\n             break;\n         case 2: {\n-            const Optional<CBanEntry> ban_entry = ConsumeDeserializable<CBanEntry>(fuzzed_data_provider);\n+            const std::optional<CBanEntry> ban_entry = ConsumeDeserializable<CBanEntry>(fuzzed_data_provider);\n             if (ban_entry) {\n                 return *ban_entry;\n             }"
      },
      {
        "sha": "40ca01bd9f75ced96c7b8de90aa50734076b1be1",
        "filename": "src/test/fuzz/asmap.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/asmap.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -23,8 +23,8 @@ static const std::vector<bool> IPV4_PREFIX_ASMAP = {\n     true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n     true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n     true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, // Match 0x00\n-    true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, // Match 0xFF\n-    true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true // Match 0xFF\n+    true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,         // Match 0xFF\n+    true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true          // Match 0xFF\n };\n \n void test_one_input(const std::vector<uint8_t>& buffer)"
      },
      {
        "sha": "2d21eff9d6be91a69872d9dc9be67e22a58b34fa",
        "filename": "src/test/fuzz/asmap_direct.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/asmap_direct.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/asmap_direct.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/asmap_direct.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <util/asmap.h>\n #include <test/fuzz/fuzz.h>\n+#include <util/asmap.h>\n \n #include <cstdint>\n #include <optional>\n@@ -34,7 +34,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     if (SanityCheckASMap(asmap, buffer.size() - 1 - sep_pos)) {\n         // Verify that for valid asmaps, no prefix (except up to 7 zero padding bits) is valid.\n         std::vector<bool> asmap_prefix = asmap;\n-        while (!asmap_prefix.empty() && asmap_prefix.size() + 7 > asmap.size() && asmap_prefix.back() == false) asmap_prefix.pop_back();\n+        while (!asmap_prefix.empty() && asmap_prefix.size() + 7 > asmap.size() && asmap_prefix.back() == false) {\n+            asmap_prefix.pop_back();\n+        }\n         while (!asmap_prefix.empty()) {\n             asmap_prefix.pop_back();\n             assert(!SanityCheckASMap(asmap_prefix, buffer.size() - 1 - sep_pos));"
      },
      {
        "sha": "09c2b4a951c26791a52df91c9e67c89140fcbd98",
        "filename": "src/test/fuzz/block_header.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/block_header.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/block_header.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block_header.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <primitives/block.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n@@ -11,13 +10,14 @@\n \n #include <cassert>\n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    const Optional<CBlockHeader> block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+    const std::optional<CBlockHeader> block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n     if (!block_header) {\n         return;\n     }"
      },
      {
        "sha": "7232325a20dec2fc54a94ef953db3fc63789c58a",
        "filename": "src/test/fuzz/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/blockfilter.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,19 +3,19 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <blockfilter.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    const Optional<BlockFilter> block_filter = ConsumeDeserializable<BlockFilter>(fuzzed_data_provider);\n+    const std::optional<BlockFilter> block_filter = ConsumeDeserializable<BlockFilter>(fuzzed_data_provider);\n     if (!block_filter) {\n         return;\n     }"
      },
      {
        "sha": "d955c71bc996abe9e975009960aecd2eee22edac",
        "filename": "src/test/fuzz/bloom_filter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/bloom_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/bloom_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/bloom_filter.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bloom.h>\n-#include <optional.h>\n #include <primitives/transaction.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n@@ -12,6 +11,7 @@\n \n #include <cassert>\n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -35,7 +35,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 1: {\n-            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            const std::optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n             if (!out_point) {\n                 break;\n             }\n@@ -46,7 +46,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 2: {\n-            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            const std::optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n             if (!u256) {\n                 break;\n             }\n@@ -57,7 +57,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 3: {\n-            const Optional<CMutableTransaction> mut_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            const std::optional<CMutableTransaction> mut_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n             if (!mut_tx) {\n                 break;\n             }"
      },
      {
        "sha": "47c71850cea6d5a367e626fb8c6cb662df9d35ed",
        "filename": "src/test/fuzz/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/chain.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,18 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    Optional<CDiskBlockIndex> disk_block_index = ConsumeDeserializable<CDiskBlockIndex>(fuzzed_data_provider);\n+    std::optional<CDiskBlockIndex> disk_block_index = ConsumeDeserializable<CDiskBlockIndex>(fuzzed_data_provider);\n     if (!disk_block_index) {\n         return;\n     }"
      },
      {
        "sha": "c69043bb6b526f2bffbd5f88671ce360b16fc1c7",
        "filename": "src/test/fuzz/checkqueue.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/checkqueue.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <checkqueue.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>"
      },
      {
        "sha": "5b45aa79d8fa114b5431dda54c3ff3f30b905b1d",
        "filename": "src/test/fuzz/cuckoocache.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/cuckoocache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/cuckoocache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/cuckoocache.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <cuckoocache.h>\n-#include <optional.h>\n #include <script/sigcache.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "ce8700befa87e60908a936b0f6c5fedb974ebd99",
        "filename": "src/test/fuzz/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fees.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <amount.h>\n-#include <optional.h>\n #include <policy/fees.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "95dabb8bab6b078b827ab7716d3a08395ca50614",
        "filename": "src/test/fuzz/flatfile.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/flatfile.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,24 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <flatfile.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cassert>\n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    Optional<FlatFilePos> flat_file_pos = ConsumeDeserializable<FlatFilePos>(fuzzed_data_provider);\n+    std::optional<FlatFilePos> flat_file_pos = ConsumeDeserializable<FlatFilePos>(fuzzed_data_provider);\n     if (!flat_file_pos) {\n         return;\n     }\n-    Optional<FlatFilePos> another_flat_file_pos = ConsumeDeserializable<FlatFilePos>(fuzzed_data_provider);\n+    std::optional<FlatFilePos> another_flat_file_pos = ConsumeDeserializable<FlatFilePos>(fuzzed_data_provider);\n     if (another_flat_file_pos) {\n         assert((*flat_file_pos == *another_flat_file_pos) != (*flat_file_pos != *another_flat_file_pos));\n     }"
      },
      {
        "sha": "a9f450b0c43cef078073fa9d72eace77092ebce2",
        "filename": "src/test/fuzz/golomb_rice.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/golomb_rice.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/golomb_rice.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/golomb_rice.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -5,8 +5,8 @@\n #include <blockfilter.h>\n #include <serialize.h>\n #include <streams.h>\n-#include <test/fuzz/fuzz.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <util/bytevectorhash.h>\n #include <util/golombrice.h>"
      },
      {
        "sha": "6a8699fd0febed3ee2f5f86efb989de27c0e7f01",
        "filename": "src/test/fuzz/hex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/hex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/hex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/hex.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -16,7 +16,8 @@\n #include <string>\n #include <vector>\n \n-void initialize() {\n+void initialize()\n+{\n     static const ECCVerifyHandle verify_handle;\n }\n "
      },
      {
        "sha": "c44e3342729c45bb5c1e1e5c45309a67273433f6",
        "filename": "src/test/fuzz/merkleblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/merkleblock.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,20 +3,20 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <merkleblock.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <uint256.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    Optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n+    std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n     if (!partial_merkle_tree) {\n         return;\n     }"
      },
      {
        "sha": "fa0322a3916dfc1c406959e439eccbff2e9f7e9e",
        "filename": "src/test/fuzz/message.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/message.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <chainparams.h>\n #include <key_io.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>"
      },
      {
        "sha": "c071283467d75df9cd55033f4f1c8961b4fed97f",
        "filename": "src/test/fuzz/net_permissions.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net_permissions.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <net_permissions.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>"
      },
      {
        "sha": "1cbf9b347feb7060a2ef5d4f399e5c6c1e8b2fda",
        "filename": "src/test/fuzz/policy_estimator.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/policy_estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/policy_estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/policy_estimator.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -11,6 +10,7 @@\n #include <txmempool.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -21,7 +21,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     while (fuzzed_data_provider.ConsumeBool()) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3)) {\n         case 0: {\n-            const Optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            const std::optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n             if (!mtx) {\n                 break;\n             }\n@@ -35,7 +35,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 1: {\n             std::vector<CTxMemPoolEntry> mempool_entries;\n             while (fuzzed_data_provider.ConsumeBool()) {\n-                const Optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+                const std::optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n                 if (!mtx) {\n                     break;\n                 }"
      },
      {
        "sha": "b7fc72373d18e90bf53b0c43e8377568ffcc757f",
        "filename": "src/test/fuzz/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/pow.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -4,14 +4,14 @@\n \n #include <chain.h>\n #include <chainparams.h>\n-#include <optional.h>\n #include <pow.h>\n #include <primitives/block.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -28,7 +28,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const uint32_t fixed_time = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n     const uint32_t fixed_bits = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n     while (fuzzed_data_provider.remaining_bytes() > 0) {\n-        const Optional<CBlockHeader> block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+        const std::optional<CBlockHeader> block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n         if (!block_header) {\n             continue;\n         }\n@@ -72,7 +72,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             }\n         }\n         {\n-            const Optional<uint256> hash = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            const std::optional<uint256> hash = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n             if (hash) {\n                 (void)CheckProofOfWork(*hash, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), consensus_params);\n             }"
      },
      {
        "sha": "626e187cbd752fc774187534b8f23a7182f1681b",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 36,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -14,8 +14,9 @@\n \n namespace {\n \n-template<unsigned int N, typename T>\n-class prevector_tester {\n+template <unsigned int N, typename T>\n+class prevector_tester\n+{\n     typedef std::vector<T> realtype;\n     realtype real_vector;\n     realtype real_vector_alt;\n@@ -27,35 +28,36 @@ class prevector_tester {\n     typedef typename pretype::size_type Size;\n \n public:\n-    void test() const {\n+    void test() const\n+    {\n         const pretype& const_pre_vector = pre_vector;\n         assert(real_vector.size() == pre_vector.size());\n         assert(real_vector.empty() == pre_vector.empty());\n         for (Size s = 0; s < real_vector.size(); s++) {\n-             assert(real_vector[s] == pre_vector[s]);\n-             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n-             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n-             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+            assert(real_vector[s] == pre_vector[s]);\n+            assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+            assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+            assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n         }\n         // assert(realtype(pre_vector) == real_vector);\n         assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n         assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n         for (const T& v : pre_vector) {\n-             assert(v == real_vector[pos]);\n-             ++pos;\n+            assert(v == real_vector[pos]);\n+            ++pos;\n         }\n         for (const T& v : reverse_iterate(pre_vector)) {\n-             --pos;\n-             assert(v == real_vector[pos]);\n+            --pos;\n+            assert(v == real_vector[pos]);\n         }\n         for (const T& v : const_pre_vector) {\n-             assert(v == real_vector[pos]);\n-             ++pos;\n+            assert(v == real_vector[pos]);\n+            ++pos;\n         }\n         for (const T& v : reverse_iterate(const_pre_vector)) {\n-             --pos;\n-             assert(v == real_vector[pos]);\n+            --pos;\n+            assert(v == real_vector[pos]);\n         }\n         CDataStream ss1(SER_DISK, 0);\n         CDataStream ss2(SER_DISK, 0);\n@@ -67,101 +69,120 @@ class prevector_tester {\n         }\n     }\n \n-    void resize(Size s) {\n+    void resize(Size s)\n+    {\n         real_vector.resize(s);\n         assert(real_vector.size() == s);\n         pre_vector.resize(s);\n         assert(pre_vector.size() == s);\n     }\n \n-    void reserve(Size s) {\n+    void reserve(Size s)\n+    {\n         real_vector.reserve(s);\n         assert(real_vector.capacity() >= s);\n         pre_vector.reserve(s);\n         assert(pre_vector.capacity() >= s);\n     }\n \n-    void insert(Size position, const T& value) {\n+    void insert(Size position, const T& value)\n+    {\n         real_vector.insert(real_vector.begin() + position, value);\n         pre_vector.insert(pre_vector.begin() + position, value);\n     }\n \n-    void insert(Size position, Size count, const T& value) {\n+    void insert(Size position, Size count, const T& value)\n+    {\n         real_vector.insert(real_vector.begin() + position, count, value);\n         pre_vector.insert(pre_vector.begin() + position, count, value);\n     }\n \n-    template<typename I>\n-    void insert_range(Size position, I first, I last) {\n+    template <typename I>\n+    void insert_range(Size position, I first, I last)\n+    {\n         real_vector.insert(real_vector.begin() + position, first, last);\n         pre_vector.insert(pre_vector.begin() + position, first, last);\n     }\n \n-    void erase(Size position) {\n+    void erase(Size position)\n+    {\n         real_vector.erase(real_vector.begin() + position);\n         pre_vector.erase(pre_vector.begin() + position);\n     }\n \n-    void erase(Size first, Size last) {\n+    void erase(Size first, Size last)\n+    {\n         real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n         pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n     }\n \n-    void update(Size pos, const T& value) {\n+    void update(Size pos, const T& value)\n+    {\n         real_vector[pos] = value;\n         pre_vector[pos] = value;\n     }\n \n-    void push_back(const T& value) {\n+    void push_back(const T& value)\n+    {\n         real_vector.push_back(value);\n         pre_vector.push_back(value);\n     }\n \n-    void pop_back() {\n+    void pop_back()\n+    {\n         real_vector.pop_back();\n         pre_vector.pop_back();\n     }\n \n-    void clear() {\n+    void clear()\n+    {\n         real_vector.clear();\n         pre_vector.clear();\n     }\n \n-    void assign(Size n, const T& value) {\n+    void assign(Size n, const T& value)\n+    {\n         real_vector.assign(n, value);\n         pre_vector.assign(n, value);\n     }\n \n-    Size size() const {\n+    Size size() const\n+    {\n         return real_vector.size();\n     }\n \n-    Size capacity() const {\n+    Size capacity() const\n+    {\n         return pre_vector.capacity();\n     }\n \n-    void shrink_to_fit() {\n+    void shrink_to_fit()\n+    {\n         pre_vector.shrink_to_fit();\n     }\n \n-    void swap() {\n+    void swap()\n+    {\n         real_vector.swap(real_vector_alt);\n         pre_vector.swap(pre_vector_alt);\n     }\n \n-    void move() {\n+    void move()\n+    {\n         real_vector = std::move(real_vector_alt);\n         real_vector_alt.clear();\n         pre_vector = std::move(pre_vector_alt);\n         pre_vector_alt.clear();\n     }\n \n-    void copy() {\n+    void copy()\n+    {\n         real_vector = real_vector_alt;\n         pre_vector = pre_vector_alt;\n     }\n \n-    void resize_uninitialized(realtype values) {\n+    void resize_uninitialized(realtype values)\n+    {\n         size_t r = values.size();\n         size_t s = real_vector.size() / 2;\n         if (real_vector.capacity() < s + r) {\n@@ -181,7 +202,7 @@ class prevector_tester {\n     }\n };\n \n-}\n+} // namespace\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {"
      },
      {
        "sha": "4a0f920f58038bd93c865d503e456e12b227e96b",
        "filename": "src/test/fuzz/primitives_transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/primitives_transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/primitives_transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/primitives_transaction.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -2,30 +2,30 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <primitives/transaction.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     const CScript script = ConsumeScript(fuzzed_data_provider);\n-    const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+    const std::optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n     if (out_point) {\n         const CTxIn tx_in{*out_point, script, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n         (void)tx_in;\n     }\n     const CTxOut tx_out_1{ConsumeMoney(fuzzed_data_provider), script};\n     const CTxOut tx_out_2{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)};\n     assert((tx_out_1 == tx_out_2) != (tx_out_1 != tx_out_2));\n-    const Optional<CMutableTransaction> mutable_tx_1 = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n-    const Optional<CMutableTransaction> mutable_tx_2 = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+    const std::optional<CMutableTransaction> mutable_tx_1 = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+    const std::optional<CMutableTransaction> mutable_tx_2 = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n     if (mutable_tx_1 && mutable_tx_2) {\n         const CTransaction tx_1{*mutable_tx_1};\n         const CTransaction tx_2{*mutable_tx_2};"
      },
      {
        "sha": "78df0f89e7b2a55a9963085bc1fd68bb82268fa2",
        "filename": "src/test/fuzz/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/protocol.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -2,20 +2,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <protocol.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <stdexcept>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    const Optional<CInv> inv = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+    const std::optional<CInv> inv = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n     if (!inv) {\n         return;\n     }\n@@ -24,7 +24,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     } catch (const std::out_of_range&) {\n     }\n     (void)inv->ToString();\n-    const Optional<CInv> another_inv = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+    const std::optional<CInv> another_inv = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n     if (!another_inv) {\n         return;\n     }"
      },
      {
        "sha": "1fd88a5f7b81c6fd4611bf2e043b0d0fe846b59c",
        "filename": "src/test/fuzz/rbf.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rbf.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n@@ -12,19 +11,20 @@\n #include <txmempool.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    Optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+    std::optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n     if (!mtx) {\n         return;\n     }\n     CTxMemPool pool;\n     while (fuzzed_data_provider.ConsumeBool()) {\n-        const Optional<CMutableTransaction> another_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const std::optional<CMutableTransaction> another_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n         if (!another_mtx) {\n             break;\n         }"
      },
      {
        "sha": "623b8cff3a3e8d726af807b5813faafc411bc7ae",
        "filename": "src/test/fuzz/rolling_bloom_filter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/rolling_bloom_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/rolling_bloom_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rolling_bloom_filter.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -3,14 +3,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bloom.h>\n-#include <optional.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <uint256.h>\n \n #include <cassert>\n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -32,7 +32,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 1: {\n-            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            const std::optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n             if (!u256) {\n                 break;\n             }"
      },
      {
        "sha": "e0c4ad7eb709f79128be6e7336dde1c3b24a4d90",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -21,6 +21,11 @@\n #include <univalue.h>\n #include <util/memory.h>\n \n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n void initialize()\n {\n     // Fuzzers using pubkey must hold an ECCVerifyHandle.\n@@ -32,7 +37,7 @@ void initialize()\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    const Optional<CScript> script_opt = ConsumeDeserializable<CScript>(fuzzed_data_provider);\n+    const std::optional<CScript> script_opt = ConsumeDeserializable<CScript>(fuzzed_data_provider);\n     if (!script_opt) return;\n     const CScript script{*script_opt};\n \n@@ -101,7 +106,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n     }\n \n-    const Optional<CScript> other_script = ConsumeDeserializable<CScript>(fuzzed_data_provider);\n+    const std::optional<CScript> other_script = ConsumeDeserializable<CScript>(fuzzed_data_provider);\n     if (other_script) {\n         {\n             CScript script_mut{script};"
      },
      {
        "sha": "f72d9380ebe9a7712604591f85c4312f873f29a0",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd34038cbda4864e4770734c44b18d3e01aa2a28/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=cd34038cbda4864e4770734c44b18d3e01aa2a28",
        "patch": "@@ -9,7 +9,6 @@\n #include <arith_uint256.h>\n #include <attributes.h>\n #include <consensus/consensus.h>\n-#include <optional.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <serialize.h>\n@@ -21,6 +20,7 @@\n #include <version.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -52,15 +52,15 @@ NODISCARD inline std::vector<T> ConsumeRandomLengthIntegralVector(FuzzedDataProv\n }\n \n template <typename T>\n-NODISCARD inline Optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+NODISCARD inline std::optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     const std::vector<uint8_t> buffer = ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length);\n     CDataStream ds{buffer, SER_NETWORK, INIT_PROTO_VERSION};\n     T obj;\n     try {\n         ds >> obj;\n     } catch (const std::ios_base::failure&) {\n-        return nullopt;\n+        return std::nullopt;\n     }\n     return obj;\n }"
      }
    ]
  }
]