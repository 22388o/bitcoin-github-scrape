[
  {
    "sha": "2a89b0c8129eceedfb0db8bdda266ce970c986bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTg5YjBjODEyOWVjZWVkZmIwZGI4YmRkYTI2NmNlOTcwYzk4NmJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-02T03:09:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-02T03:29:22Z"
      },
      "message": "rpcauth: Make it possible to provide a custom password\n\nThis adds the functionality to specify a custom password to\n`rpcauth.py`, as well as makes the code (IMO) easier to understand.",
      "tree": {
        "sha": "f3a45cae5440036c8b13324e3d2794c7b8d867e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3a45cae5440036c8b13324e3d2794c7b8d867e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a89b0c8129eceedfb0db8bdda266ce970c986bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a89b0c8129eceedfb0db8bdda266ce970c986bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a89b0c8129eceedfb0db8bdda266ce970c986bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a89b0c8129eceedfb0db8bdda266ce970c986bc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57c57df86f14874cfc4b280e04a7f44b19839c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57c57df86f14874cfc4b280e04a7f44b19839c26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57c57df86f14874cfc4b280e04a7f44b19839c26"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "20d16f0a974f5b6c179b495de0fd3eb1bd6bfce8",
        "filename": "share/rpcauth/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a89b0c8129eceedfb0db8bdda266ce970c986bc/share/rpcauth/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a89b0c8129eceedfb0db8bdda266ce970c986bc/share/rpcauth/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/README.md?ref=2a89b0c8129eceedfb0db8bdda266ce970c986bc",
        "patch": "@@ -8,3 +8,7 @@ Create login credentials for a JSON-RPC user.\n Usage:\n \n     ./rpcauth.py <username>\n+\n+in which case the script will generate a password. To specify a custom password do:\n+\n+    ./rpcauth.py <username> <password>"
      },
      {
        "sha": "566c55aba98a096c549bc239853e278c0563462d",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a89b0c8129eceedfb0db8bdda266ce970c986bc/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a89b0c8129eceedfb0db8bdda266ce970c986bc/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=2a89b0c8129eceedfb0db8bdda266ce970c986bc",
        "patch": "@@ -17,24 +17,27 @@ def generate_salt():\n     salt_sequence = [cryptogen.randrange(256) for _ in range(16)]\n     return ''.join([format(r, 'x') for r in salt_sequence])\n \n-def generate_password(salt):\n+def generate_password():\n     \"\"\"Create 32 byte b64 password\"\"\"\n-    password = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')\n+    return base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')\n \n+def password_to_hmac(salt, password):\n     m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), 'SHA256')\n-    password_hmac = m.hexdigest()\n-\n-    return password, password_hmac\n+    return m.hexdigest()\n \n def main():\n     if len(sys.argv) < 2:\n-        sys.stderr.write('Please include username as an argument.\\n')\n+        sys.stderr.write('Please include username (and an optional password, will generate one if not provided) as an argument.\\n')\n         sys.exit(0)\n \n     username = sys.argv[1]\n \n     salt = generate_salt()\n-    password, password_hmac = generate_password(salt)\n+    if len(sys.argv) > 2:\n+        password = sys.argv[2]\n+    else:\n+        password = generate_password()\n+    password_hmac = password_to_hmac(salt, password)\n \n     print('String to be appended to bitcoin.conf:')\n     print('rpcauth={0}:{1}${2}'.format(username, salt, password_hmac))"
      },
      {
        "sha": "2456feb10295beb4be3cee1358e2fc03e35c6447",
        "filename": "test/util/rpcauth-test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a89b0c8129eceedfb0db8bdda266ce970c986bc/test/util/rpcauth-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a89b0c8129eceedfb0db8bdda266ce970c986bc/test/util/rpcauth-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/rpcauth-test.py?ref=2a89b0c8129eceedfb0db8bdda266ce970c986bc",
        "patch": "@@ -28,16 +28,15 @@ def test_generate_salt(self):\n         self.assertGreaterEqual(len(self.rpcauth.generate_salt()), 16)\n \n     def test_generate_password(self):\n-        salt = self.rpcauth.generate_salt()\n-        password, password_hmac = self.rpcauth.generate_password(salt)\n-\n+        password = self.rpcauth.generate_password()\n         expected_password = base64.urlsafe_b64encode(\n             base64.urlsafe_b64decode(password)).decode('utf-8')\n         self.assertEqual(expected_password, password)\n \n     def test_check_password_hmac(self):\n         salt = self.rpcauth.generate_salt()\n-        password, password_hmac = self.rpcauth.generate_password(salt)\n+        password = self.rpcauth.generate_password()\n+        password_hmac = self.rpcauth.password_to_hmac(salt, password)\n \n         m = hmac.new(bytearray(salt, 'utf-8'),\n             bytearray(password, 'utf-8'), 'SHA256')"
      }
    ]
  }
]