jonasschnelli,2017-07-11T15:02:43Z,Contains overhauled parts from #9483,https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314473310,314473310,
ryanofsky,2017-07-11T17:03:13Z,"I'd like to help out here, and I've spent literally days reviewing previous iterations of this change (#9076 #9483 #9171), but I can't figure out if this is going anywhere and if providing more review now is a good use of time.\n\nAs I've mentioned previously, I don't think the auxiliary block download class design is great, because it duplicates functionality from the networking layer in a whol",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314508746,314508746,
jonasschnelli,2017-07-11T18:36:31Z,"@ryanofsky:\nThank you very much for the reviews in #9483. I implemented almost all of your suggesting and some of them where really great.\nHowever, I think the current design of having a dedicated class (`CauxiliaryBlockRequest`) makes sense, because...\n\n* An out-of-band (auxiliary) block request in an object, you could have multiple in parallel (assume multiwallet, etc.), in future, we ma",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314534086,314534086,
jonasschnelli,2017-07-12T15:47:29Z,"Followed yesterdays discussion we had in #bitcoin-core-dev. Removed the `CAuxiliaryBlockRequests` and added a `std::map blocksToDownloadFirst`.\nSuch manually added, priority block downloads will not trigger `ActivateBestChain`.\n\nThis PR now also adds a new signal `BlockProcessed()`.\n\nThe scope of this PR is not to make the block download interface flexible for multiple ""users"" (like the ",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314811848,314811848,
jonasschnelli,2017-07-20T18:11:11Z,"fixed @ryanofsky points.\nThis does pass travis now. Thanks in advance for reviews...",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-316785986,316785986,
jonasschnelli,2017-07-20T19:58:12Z,"Thanks @ryanofsky. Agree about required conceptual ACKs from other devs.\nThe long term goal was sketched in #9483, basically a light client mode for Bitcoin-Core that would allow node/wallet separation.",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-316813092,316813092,
jonasschnelli,2017-07-25T08:50:17Z,"Overhauled and fixed @ryanofsky points (mostly nits), also removed the new (unused) signal.",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-317672618,317672618,
jonasschnelli,2017-07-26T14:04:52Z,"Overhauled first commit to make sure we request blocks in order:\nhttps://github.com/bitcoin/bitcoin/pull/10794/commits/5927f7f1d6c7eb1bc7fb7a39dfda277ad5e4474c#diff-eff7adeaec73a769788bb78858815c91R483\n",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-318063026,318063026,
jonasschnelli,2017-07-27T08:33:19Z,"* Overhauled once again. Added the processing logic to ensure blocks are processed in order (makes it much simpler to process by ""the other side"").\n* Added a new main signal for the processing (reusing BlockChecked seems wrong).\n* Priority requests are now pushed through signal\n\nThis is now tested on my SPV branch and could be the first reviewable step towards light clients / wallet proces",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-318296344,318296344,
jtimon,2017-08-31T21:24:56Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-326424712,326424712,
nopara73,2017-10-03T18:06:09Z,"@ryanofsky Reflecting to your usefullness concern:  \nI wrote a full block downloading SPV wallet ([HiddenWallet](https://github.com/nopara73/HiddenWallet/)), the main reason is, because without such architecture [private transaction retrieval is hard](https://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ), if not impossible.  \nWhen some form of light functionality gets into C",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-333929365,333929365,
ryanofsky,2017-10-03T18:48:50Z,"That's really interesting. @nopara73, if I understand you correctly, you are saying that if the `requestblocks` JSON-RPC API from this PR is added to bitcoin core, then [HiddenWallet](https://github.com/nopara73/HiddenWallet/) would be able to call it to download blocks instead of depending on [NBitcoin](https://github.com/MetacoSA/NBitcoin)?",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-333941691,333941691,
nopara73,2017-10-03T19:06:14Z,"@ryanofsky \n\n> you are saying that if the requestblocks JSON-RPC API from this PR is added to bitcoin core, then HiddenWallet would be able to call it to download blocks instead of depending on NBitcoin?\n\nYes.  ",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-333946305,333946305,
jonasschnelli,2017-11-22T22:23:11Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346489035,346489035,
nopara73,2017-11-23T19:08:56Z,"# Simple RPC App Example\n\nJust to be sure I understand correctly this PR and the application I am considering will work as I expect to work:\n\nHow would the wallet behave? Best effort or disabled?  \n\nSo let's say is it possible to write a software, that uses Bitcoin Core's wallet with autorequestblocks=0 in the following way:  \n\n1. Sync up the header.  \n2. Create a wallet, save th",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346684475,346684475,
jonasschnelli,2017-11-23T20:05:30Z,"@nopara73 \n* This PR does not touch the wallet (that will come later, would be to large of a PR).\n* This PR does allow to disable the auto-download (sync)\n* This PR does allow to download random blocks (specified by block-hashes) and have them header-only-validated, ... so you can parse the blocks content\n\n> Since this mode cannot have up to date utxo set, how do you broadcast transactio",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346691009,346691009,
nopara73,2017-11-23T22:04:48Z,"@jonasschnelli I'd like to make the last couple of things clear before I compile and test it, just to know what to expect.  \n\n# 1\n\n> there is a commit available in #9483 7ca1a87 that does allow broadcasting transactions without an utxo set.\n\nMeaning, `sendrawtransaction` will always return null?\n\n# 2\n\n> This PR does not touch the wallet (that will come later, would be to large ",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-346702879,346702879,
jonasschnelli,2017-11-27T05:32:36Z,"> Meaning, sendrawtransaction will always return null?\n\nNo. It will return the txid (as expected). But not in this PR (that would be with something like https://github.com/bitcoin/bitcoin/commit/7ca1a8738a878078c0d1546f7743a05ee474dd1b).\n\n> Meaning, (1) disables the wallet, (2) makes the wallet rpcs return sometimes incorrect results, (3) you don't know what the rpcs would return?\n\nThe",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-347082810,347082810,
ryanofsky,2018-01-09T17:46:43Z,">> It would be useful to get concept ACKs from @gmaxwell and @sipa to make sure concerns from the earlier design discussion (https://botbot.me/freenode/bitcoin-core-dev/msg/88437543/) are addressed now.\n\n> Agree about required conceptual ACKs from other devs.\n\nLast I looked code was in good shape, but I don't think there was ever more design feedback on this. Maybe it should be brought up ",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-356360346,356360346,
nopara73,2018-02-20T08:10:46Z,"This will be especially useful when combined with BIP158 (Compact Block Filters for Light Clients.) \nhttps://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki\n\nI imagine, based on this PR someone will eventually make a Bitcoin Core light client after Core starts to serve filters. At least that'll be a low hanging fruit.",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-366897388,366897388,
Sjors,2018-02-20T14:50:39Z,"Though I'm not sure what it would do on its own, perhaps the `PriorityBlockRequest` could be a separate PR?\n\nSame for `requestblocks` RPC; could that be useful in pruned nodes to retrieve a pruned block?",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-367001197,367001197,
jonasschnelli,2018-04-18T08:15:11Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-382303773,382303773,
Sjors,2018-08-02T18:55:56Z,"I rebased it here: https://github.com/Sjors/bitcoin/commits/2018/08/spv-rpc (I may have broken the functional test)\n\n@ryanofsky said:\n> I still can't figure out if new RPC is actually supposed to be useful for something other than debugging/testing\n\nThe bigger picture for me is #9483, the ability for users to get started while IBD happens in the background.\n\nHowever, a use case I hav",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-410031973,410031973,
DrahtBot,2018-12-03T16:54:20Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-443782791,443782791,
ryanofsky,2017-07-24T14:16:00Z,"In commit ""Add priority block request queue""\n\nShould update comment for new return value",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129047410,129047410,src/net_processing.cpp
ryanofsky,2017-07-24T14:21:28Z,"In commit ""Add priority block request queue""\n\nCould be const auto",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129049059,129049059,src/net_processing.cpp
ryanofsky,2017-07-24T14:32:37Z,"In commit ""Add requestblocks - a simple way to priorize block downloads""\n\nMaybe drop part of comment in parentheses, seems to imply value will be true for priority block requests. ",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129052414,129052414,src/rpc/blockchain.cpp
ryanofsky,2017-07-24T14:36:42Z,"In commit ""[RPC] Add requestblocks - a simple way to priorize block downloads""\n\nCopy is redundant, get_array just returns reference to *this.",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129053764,129053764,src/rpc/blockchain.cpp
ryanofsky,2017-07-24T14:37:45Z,"In commit ""[RPC] Add requestblocks - a simple way to priorize block downloads""\n\nCan never happen, get_array call above would have thrown if the hash_Uarray / params[1] value was not an array",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129054094,129054094,src/rpc/blockchain.cpp
ryanofsky,2017-07-24T14:38:28Z,"In commit ""[RPC] Add requestblocks - a simple way to priorize block downloads""\n\nProbably should write mi->second",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129054305,129054305,src/rpc/blockchain.cpp
ryanofsky,2017-07-25T15:09:46Z,"In commit ""[RPC] Add requestblocks - a simple way to priorize block downloads""\n\nDon't really need this check, because the get_array call below will trigger it's own error about the value not being an array. But if you prefer this error, you should change the check to request.params[1].isNull() to avoid making a distinction between a null and a missing value (#10281, #10783).\n",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r129334184,129334184,src/rpc/blockchain.cpp
promag,2017-11-23T09:37:27Z,"Nit, should be\n```cpp\nstruct PriorityBlockRequest\n{\n```",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152754098,152754098,src/net_processing.cpp
promag,2017-11-23T09:38:10Z,"Nit, remove `const` from return?",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152754258,152754258,src/net_processing.cpp
promag,2017-11-23T09:39:06Z,"Nit, missing spaces after `(` and before `)`.",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152754462,152754462,src/rpc/blockchain.cpp
promag,2017-11-23T09:42:06Z,"Nit, remove else's?",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152755122,152755122,src/rpc/blockchain.cpp
promag,2017-11-23T09:43:49Z,"Nit, move up.",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152755544,152755544,src/rpc/blockchain.cpp
promag,2017-11-23T09:47:45Z,use `wait_until`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152756424,152756424,test/functional/requestblocks.py
promag,2017-11-23T09:48:18Z,`assert_equal`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152756532,152756532,test/functional/requestblocks.py
promag,2017-11-23T09:48:28Z,`assert_equal`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152756568,152756568,test/functional/requestblocks.py
promag,2017-11-23T09:50:34Z,"Another option would be to use `zmq` notification, another PR maybe?",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152757059,152757059,test/functional/requestblocks.py
promag,2017-11-23T09:50:50Z,`assert_equal`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152757129,152757129,test/functional/requestblocks.py
promag,2017-11-23T09:51:20Z,Use `wait_until`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152757221,152757221,test/functional/requestblocks.py
promag,2017-11-23T09:51:43Z,"Nit, remove spaces?",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152757315,152757315,test/functional/requestblocks.py
promag,2017-11-23T09:53:03Z,Missing test for `flush`.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152757582,152757582,src/rpc/blockchain.cpp
promag,2017-11-23T09:57:52Z,Missing test for this error.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152758669,152758669,src/rpc/blockchain.cpp
promag,2017-11-23T09:58:19Z,"Nit, add `{ }`",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152758780,152758780,src/rpc/blockchain.cpp
promag,2017-11-23T09:58:54Z,`BlockMap::const_iterator`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152758932,152758932,src/rpc/blockchain.cpp
promag,2017-11-23T10:02:36Z,Should be `> 2`?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152759754,152759754,src/rpc/blockchain.cpp
promag,2017-11-23T10:04:34Z,"Should update `getblockheader` test?\nhttps://github.com/bitcoin/bitcoin/blob/84fa64598e8b7d6901c546e938fb0eeda625a8e8/test/functional/blockchain.py#L173-L198",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152760159,152760159,src/rpc/blockchain.cpp
promag,2017-11-23T10:06:36Z,"Arg reference should be const:\n```cpp\nconst std::vector<const CBlockIndex*>& blocks_to_download\n```",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152760604,152760604,src/net_processing.h
promag,2017-11-23T10:07:16Z,Copy of?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152760747,152760747,src/net_processing.cpp
promag,2017-11-23T10:11:47Z,Add comment explaining this case?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152761744,152761744,src/net_processing.cpp
promag,2017-11-23T10:11:50Z,`cs_main` is locked throughout. It is enough to lock when dequeuing right? If dequeuing fails then return.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152761760,152761760,src/net_processing.cpp
promag,2017-11-23T10:12:22Z,Move log before signal?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152761873,152761873,src/net_processing.cpp
promag,2017-11-23T10:14:45Z,Is removing duplicates here really necessary? Blocks with `BLOCK_HAVE_DATA` will be skipped.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152762352,152762352,src/net_processing.cpp
promag,2017-11-23T10:15:28Z,What is the purpose of the return value?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152762499,152762499,src/rpc/blockchain.cpp
promag,2017-11-23T10:16:48Z,"Remove, duplicate declaration.",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152762788,152762788,src/net_processing.h
promag,2017-11-23T10:26:56Z,"Split in multiple tests. Suggestion for loop body:\n```cpp\nif (!r.pindex) continue;\nif (state->pindexBestKnownBlock == nullptr) continue;\nif (state->pindexBestKnownBlock->nHeight < r.pindex->nHeight) continue;\nif (mapBlocksInFlight.count(r.pindex->GetBlockHash())) continue;\n\nvBlocks.push_back(r.pindex);\n\nif (vBlocks.size() == count) break;\n```\nIMHO more readable and more easie",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152765041,152765041,src/net_processing.cpp
promag,2017-11-23T10:28:10Z,"Otherwise, replace `NULL` with nullptr and use `break` instead of `return true`.",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152765310,152765310,src/net_processing.cpp
promag,2017-11-23T10:30:00Z,Same for other structs.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152765681,152765681,src/net_processing.cpp
promag,2017-11-23T11:24:13Z,Assert `request.params[1]` is null. Same for status.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152776819,152776819,src/rpc/blockchain.cpp
jonasschnelli,2017-11-23T20:49:22Z,"I think it's okay after, but should say ""processed"" instead of ""process"".",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152870033,152870033,src/net_processing.cpp
jonasschnelli,2017-11-23T20:51:32Z,"With the current implementation, `blocksToDownloadFirst` can have multiple of the same block. I'd say it should remain here...",https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152870189,152870189,src/net_processing.cpp
jonasschnelli,2017-11-23T21:01:54Z,You can determine if you have flushed something or not.,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152871012,152871012,src/rpc/blockchain.cpp
jonasschnelli,2017-11-23T21:03:16Z,Why?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152871309,152871309,src/rpc/blockchain.cpp
jonasschnelli,2017-11-23T21:15:41Z,done,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r152872525,152872525,src/rpc/blockchain.cpp
Sjors,2018-08-02T19:01:28Z,Maybe do a prune here and then refetch the old block?,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r207338739,207338739,test/functional/rpc_requestblocks.py
practicalswift,2018-09-02T18:26:42Z,Typo found by `codespell`: Unkown,https://github.com/bitcoin/bitcoin/pull/10794#discussion_r214549039,214549039,src/rpc/blockchain.cpp
