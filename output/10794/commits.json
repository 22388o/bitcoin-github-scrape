[
  {
    "sha": "9946ff773412b4cb1c36deff52b2acc01ea041e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQ2ZmY3NzM0MTJiNGNiMWMzNmRlZmY1MmIyYWNjMDFlYTA0MWUx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-12T13:02:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T07:57:10Z"
      },
      "message": "Add priority block request queue",
      "tree": {
        "sha": "01ac0eb435886f946f845689c32f7dd67d487f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01ac0eb435886f946f845689c32f7dd67d487f63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9946ff773412b4cb1c36deff52b2acc01ea041e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW+lYACgkQHrd2uwPH\nki0M4hAApXox4HFWFaOig3W3RRGEp8E/WZAYjNM5RW0toZ1oxg1Si03P3A69g0NE\ngXAkxOhpw8OxvdGhVzOE0KwBuVkYIJqx4tIV4QbS4g7xAJhacOtgmKF6+M/fmEfD\nsCOxXSOHc91tAFi8NOYvSaqesTWispIAcaFMTCOOTJwUpyEBAf0l8VYYZcCCXuQb\nuAsRhjUJTWlaYuG3dgdeA0oTwUrnufEfLhrvZpjNDAvzziGlyb6PIZkVQJGfDhgG\nBxXZzH/9AxJKRh5vkgPAOZ/7fwgwgqt5atpQGCIqGk3McZuWgfpZCINiSiV3n7ma\nyg5de81iTnY5w0k51L4REg74j4KiXzBKUYH5wGr95ecWdbwpdDJTJUv8Dy7hAvnn\nzn4HiKDIySdL3qG5FhfbYfgl0Ac+bVORH/qWGpCjRxLSWkMzct+1S4LEXpga85br\nbkNKSVHHmIkt8dYTjzxC6SgLdxb4R5oPJ2CytiTMUSmAlQP4j76j9bjM9Hsjlcmw\n4zKGYtSFbNJlsNQmctvkwzpIwKDOL+98/b3uPWfUbSKmRG4HioRidZ6aARJDpiAk\nXVVS2L/fRPKu4/JEumGGUuMAeKP10NVfqYoUMVCyItBgCxZnhtI7Rd9MeImgXEQw\nMAJQf95moQdwk7m4PD8GgpiX8nNIsR92rerz19CtOduKv3P6u1E=\n=2zmu\n-----END PGP SIGNATURE-----",
        "payload": "tree 01ac0eb435886f946f845689c32f7dd67d487f63\nparent 3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499864525 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524038230 +0200\n\nAdd priority block request queue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9946ff773412b4cb1c36deff52b2acc01ea041e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9946ff773412b4cb1c36deff52b2acc01ea041e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9946ff773412b4cb1c36deff52b2acc01ea041e1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 75,
      "deletions": 20
    },
    "files": [
      {
        "sha": "ddf8c137a64d75cd95ccb0973bb6db2415cfe9e8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 20,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9946ff773412b4cb1c36deff52b2acc01ea041e1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9946ff773412b4cb1c36deff52b2acc01ea041e1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9946ff773412b4cb1c36deff52b2acc01ea041e1",
        "patch": "@@ -114,6 +114,7 @@ namespace {\n         const CBlockIndex* pindex;                               //!< Optional.\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n+        bool priorityRequest;                                    //!< Whether its a priority download\n     };\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n@@ -137,6 +138,14 @@ namespace {\n     MapRelay mapRelay;\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs, protected by cs_main). */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n+\n+    struct PriorityBlockRequest\n+    {\n+        const CBlockIndex* pindex;\n+        bool downloaded;\n+    };\n+\n+    std::vector<PriorityBlockRequest> blocksToDownloadFirst;\n } // namespace\n \n namespace {\n@@ -309,9 +318,14 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n }\n \n // Requires cs_main.\n-// Returns a bool indicating whether we requested this block.\n+// Returns a MarkBlockAsReceivedResult struct to indicating whether we requested this block and if it was via the priority request queue\n // Also used if a block was /not/ received and timed out or started with another peer\n-bool MarkBlockAsReceived(const uint256& hash) {\n+struct MarkBlockAsReceivedResult\n+{\n+    bool fRequested;\n+    bool fPriorityRequest;\n+ };\n+MarkBlockAsReceivedResult MarkBlockAsReceived(const uint256& hash) {\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -325,19 +339,28 @@ bool MarkBlockAsReceived(const uint256& hash) {\n             // First block on the queue was received, update the start download time for the next one\n             state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n         }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n+        bool priorityRequest = itInFlight->second.second->priorityRequest;\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n+        if (priorityRequest) {\n+            // mark as downloaded\n+            auto it = std::find_if(blocksToDownloadFirst.begin(), blocksToDownloadFirst.end(),  [&itInFlight](const PriorityBlockRequest &r) { return r.pindex == itInFlight->second.second->pindex; });\n+            if (it != blocksToDownloadFirst.end()) {\n+                (*it).downloaded = true;\n+            }\n+        }\n+        state->vBlocksInFlight.erase(itInFlight->second.second);\n         mapBlocksInFlight.erase(itInFlight);\n-        return true;\n+\n+        return {true, priorityRequest};\n     }\n-    return false;\n+    return {false, false};\n }\n \n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr, bool priorityRequest = false) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -354,7 +377,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex*\n     MarkBlockAsReceived(hash);\n \n     std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n-            {hash, pindex, pindex != nullptr, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : nullptr)});\n+            {hash, pindex, pindex != nullptr, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : nullptr), priorityRequest});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n@@ -470,10 +493,12 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n }\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n- *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+ *  at most count entries.\n+ *  returns true if priority downloads where used\n+ */\n+bool FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n     if (count == 0)\n-        return;\n+        return false;\n \n     vBlocks.reserve(vBlocks.size() + count);\n     CNodeState *state = State(nodeid);\n@@ -482,9 +507,22 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    if (!blocksToDownloadFirst.empty()) {\n+        for (const PriorityBlockRequest &r: blocksToDownloadFirst) {\n+            if (r.downloaded) continue;\n+            if (r.pindex && state->pindexBestKnownBlock != nullptr && state->pindexBestKnownBlock->nHeight >= r.pindex->nHeight && !mapBlocksInFlight.count(r.pindex->GetBlockHash())) {\n+                vBlocks.push_back(r.pindex);\n+                if (vBlocks.size() == count) {\n+                    break;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n     if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n-        return;\n+        return false;\n     }\n \n     if (state->pindexLastCommonBlock == nullptr) {\n@@ -497,7 +535,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // of its current tip anymore. Go back enough to fix that.\n     state->pindexLastCommonBlock = LastCommonAncestor(state->pindexLastCommonBlock, state->pindexBestKnownBlock);\n     if (state->pindexLastCommonBlock == state->pindexBestKnownBlock)\n-        return;\n+        return false;\n \n     std::vector<const CBlockIndex*> vToFetch;\n     const CBlockIndex *pindexWalk = state->pindexLastCommonBlock;\n@@ -526,11 +564,11 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n         for (const CBlockIndex* pindex : vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n-                return;\n+                return false;\n             }\n             if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n                 // We wouldn't download this block or its descendants from this peer.\n-                return;\n+                return false;\n             }\n             if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n                 if (pindex->nChainTx)\n@@ -543,18 +581,19 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n                         // We aren't able to fetch anything, but we would be if the download window was one larger.\n                         nodeStaller = waitingfor;\n                     }\n-                    return;\n+                    return false;\n                 }\n                 vBlocks.push_back(pindex);\n                 if (vBlocks.size() == count) {\n-                    return;\n+                    return false;\n                 }\n             } else if (waitingfor == -1) {\n                 // This is the first already-in-flight block.\n                 waitingfor = mapBlocksInFlight[pindex->GetBlockHash()].first;\n             }\n         }\n     }\n+    return false;\n }\n \n } // namespace\n@@ -2667,7 +2706,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            MarkBlockAsReceivedResult result = MarkBlockAsReceived(hash);\n+            forceProcessing |= result.fRequested;\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n@@ -3648,12 +3688,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n+            bool priorityRequest = FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n-                LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex, NULL, priorityRequest);\n+                LogPrint(BCLog::NET, \"Requesting%s block %s (%d) peer=%d\\n\", (priorityRequest ? \" (priority)\" : \" \"), pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->GetId());\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n@@ -3719,6 +3759,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n     return true;\n }\n \n+void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload) {\n+    LOCK(cs_main);\n+    for (const CBlockIndex* pindex: blocksToDownload) {\n+        // we add blocks regardless of duplicates\n+        blocksToDownloadFirst.push_back({pindex, false});\n+    }\n+}\n+\n class CNetProcessingCleanup\n {\n public:"
      },
      {
        "sha": "93ba3e141fe27b2cc3469ded2abad80873bf0823",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9946ff773412b4cb1c36deff52b2acc01ea041e1/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9946ff773412b4cb1c36deff52b2acc01ea041e1/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9946ff773412b4cb1c36deff52b2acc01ea041e1",
        "patch": "@@ -97,4 +97,11 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n+/**\n+ * Prioritize a block for downloading\n+ * Blocks requested with priority will be downloaded and processed first\n+ * Downloaded blocks will not trigger ActivateBestChain\n+ */\n+void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n+\n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "f2b165fb6ea696923e3ce5e84a8877bffde6d548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmIxNjVmYjZlYTY5NjkyM2UzY2U1ZTg0YTg4NzdiZmZkZTZkNTQ4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-27T08:14:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T07:57:59Z"
      },
      "message": "Add new ProcessPriorityRequest main signal",
      "tree": {
        "sha": "cfd7329c643b562245122b59aad3104991264bdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfd7329c643b562245122b59aad3104991264bdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2b165fb6ea696923e3ce5e84a8877bffde6d548",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW+ocACgkQHrd2uwPH\nki1wmg//WmHVQ51VbEgflRProg1E0phRNI71rlbfioXljSv3hwNhuOnHkVvRWFOm\n4FtHRHRoBlKa57KqRxW//QDqPtkm4e5Y0lYBBsx9TxdWWVlHZ+a06484bKsU2W1y\nxns4hT3j5gUKGWZjZjfe4TlLLLWQecWPNof5AAOWlle62MC11Kl/BDxDE2u+TQO7\nWI8O/gpSAekmkuaVnEvxkqBybie2KqZLm1yJ2vw+t1eIhlR1v6VEzdj2x0U58DpH\n+gsP/1ZiY//KN7ZGFNdzSsACncrn7AsdCk4hXu37Ebq2GPQcBdCx7a0hsDBhGVX+\nO1ZV+Yc3UEuyqwFLKjRMs8FdQLlG+BUyOTYcVzj6UKsBpLZXV6h5m/vXhhs0Es31\nc/FzmBijgZUQuMidnmWOOow2iXcke9+S5H646N98xGd3px6VQ5hExvm4XkxtlKY7\nCQ83/yCJALM1BLpVDeYykIJN4FlWkM468pkTo5uvqsPMjPBW+DExB5L8cIQXcV6Q\nfYJfEZE3w6cGR7OiKi9795aBGi5W7sp8Y+DytMncAvjCwJiJl5gX+414BdUsQmz6\nJDXl4V525bVZN2ZvuRpm3vPHbTEkrvTxQUCxjiGngkYCIGLrSE19PMTWKD3Jg8Ut\n1rzFmRzzzYRR42r3b4XfhvV1mNowYT6IaWDY4CW4Lgd1xxdfd3Q=\n=HIv8\n-----END PGP SIGNATURE-----",
        "payload": "tree cfd7329c643b562245122b59aad3104991264bdb\nparent 9946ff773412b4cb1c36deff52b2acc01ea041e1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1501143293 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524038279 +0200\n\nAdd new ProcessPriorityRequest main signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b165fb6ea696923e3ce5e84a8877bffde6d548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b165fb6ea696923e3ce5e84a8877bffde6d548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b165fb6ea696923e3ce5e84a8877bffde6d548/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9946ff773412b4cb1c36deff52b2acc01ea041e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9946ff773412b4cb1c36deff52b2acc01ea041e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9946ff773412b4cb1c36deff52b2acc01ea041e1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4a996d9c20f7b75d3bd0b29d32ad4c08746197ce",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b165fb6ea696923e3ce5e84a8877bffde6d548/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b165fb6ea696923e3ce5e84a8877bffde6d548/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=f2b165fb6ea696923e3ce5e84a8877bffde6d548",
        "patch": "@@ -30,6 +30,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> ProcessPriorityRequest;\n \n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n@@ -85,9 +86,12 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->ProcessPriorityRequest.connect(boost::bind(&CValidationInterface::ProcessPriorityRequest, pwalletIn, _1, _2));\n+\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.m_internals->ProcessPriorityRequest.disconnect(boost::bind(&CValidationInterface::ProcessPriorityRequest, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -104,6 +108,7 @@ void UnregisterAllValidationInterfaces() {\n     if (!g_signals.m_internals) {\n         return;\n     }\n+    g_signals.m_internals->ProcessPriorityRequest.disconnect_all_slots();\n     g_signals.m_internals->BlockChecked.disconnect_all_slots();\n     g_signals.m_internals->Broadcast.disconnect_all_slots();\n     g_signals.m_internals->Inventory.disconnect_all_slots();\n@@ -189,3 +194,7 @@ void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& sta\n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n     m_internals->NewPoWValidBlock(pindex, block);\n }\n+\n+void CMainSignals::ProcessPriorityRequest(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex) {\n+    m_internals->ProcessPriorityRequest(pblock, pindex);\n+}"
      },
      {
        "sha": "96b0cc7e2c080d66262255460ceca2cb7f3b6ded",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b165fb6ea696923e3ce5e84a8877bffde6d548/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b165fb6ea696923e3ce5e84a8877bffde6d548/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=f2b165fb6ea696923e3ce5e84a8877bffde6d548",
        "patch": "@@ -121,6 +121,10 @@ class CValidationInterface {\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    /**\n+     * Notifies listeners of that a new priorit block request is ready to process\n+     */\n+    virtual void ProcessPriorityRequest(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -162,6 +166,7 @@ class CMainSignals {\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n+    void ProcessPriorityRequest(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmU2ZTc3NzljZTNlZDcyMTBkYmMyZTdiMDY5YWRkNjNmYzA3NGVj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-12T13:09:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T07:58:52Z"
      },
      "message": "Don't ActivateBestChain when processing priority block request",
      "tree": {
        "sha": "beb0e34360801549e92ef28a4fe7f1bd02a3707e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beb0e34360801549e92ef28a4fe7f1bd02a3707e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW+rwACgkQHrd2uwPH\nki1Dig/1H0v/0dnNOH2rjLzNvu00Iy/NSZ5rCKdMY5SQPKa2Bk2/l5qWzHYm/j4P\n7NKA9jANC9pGimYuRyKjjQtDlEVavRA64Epk/UKD7QevxMs/TNZug1oWPVAofMee\nk81Gi27CXsVZhxapZsnGAdlJ3DcuchAbv7MnAqy0vadArIXzB/SA+uB5bq4BfRt1\nOdlqjw6ddki2jGm4HKw5kJntBqp6OXPDV0sCiu2GfcLdmy5ngA03aQgNazmwb5zc\nP13CXjoVRGr0g66yjUsZHehvcJoG8/0vl/rFWMZuJUs6iABPLJzHtnNpUyWIAYgs\no9uzTnQ9NItI/Zu6ceYebePxK9fxPStcBqTSqvwfZfC65EnBoV33JHF2xgiziNO4\nY6BK1Zzi2rfNoC6kKcyH0+R61VX99vRdOGt3Rqw95v2py7xvyGC8XcC40Z/P9gq2\nXbqRwOO377n4+//XnR+X71ixoOW/+ugHnKW4lrMOovorbXwA5RrnN1RcQWzeNOuL\nKZSxNHpe2Zw+Cq8+SxZyZ89thBPate+5LkuVrCtEp2bQd7CExXdQeEoZBoI5FtEw\nVqU8oRFvtvJIyGxSEEzaPO4bjZGasS1xgx1rvVVbO0B1ZbLEuo8IG5NVXCbdoQcG\nIivi9DVyQIB4023CbOiTgf+2fA/wmXmK/ejSp8b3rZwtN0rGSA==\n=7KIn\n-----END PGP SIGNATURE-----",
        "payload": "tree beb0e34360801549e92ef28a4fe7f1bd02a3707e\nparent f2b165fb6ea696923e3ce5e84a8877bffde6d548\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499864969 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524038332 +0200\n\nDon't ActivateBestChain when processing priority block request\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2b165fb6ea696923e3ce5e84a8877bffde6d548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b165fb6ea696923e3ce5e84a8877bffde6d548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b165fb6ea696923e3ce5e84a8877bffde6d548"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "492d89714299c5264a4ac454001ee35b082cff2a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
        "patch": "@@ -2701,19 +2701,20 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n         bool forceProcessing = false;\n+        MarkBlockAsReceivedResult result;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            MarkBlockAsReceivedResult result = MarkBlockAsReceived(hash);\n+            result = MarkBlockAsReceived(hash);\n             forceProcessing |= result.fRequested;\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock, !result.fPriorityRequest);\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {"
      },
      {
        "sha": "d3fe3d178e4e95037e391d1cb9410f6cf92ce656",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
        "patch": "@@ -3469,7 +3469,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock, bool activateBestChain)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -3496,7 +3496,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))\n+    if (activateBestChain && !g_chainstate.ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;"
      },
      {
        "sha": "cab659c7dd19d0e53839f1553ab5816476dfeb42",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
        "patch": "@@ -238,10 +238,11 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+ * @param[in]   activateBestChain will allow to bypass the activate best chain logic (for priority block downloads)\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock, bool activateBestChain = true);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjFiMWY3OGIzNGFjYjc3YzYyMTViMWFhNmQzOTM2ZWE4NmVhZmM2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-27T08:18:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T07:58:52Z"
      },
      "message": "Process priority requests",
      "tree": {
        "sha": "81ee409faae614aa77368b0dee54580d9fdff80b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81ee409faae614aa77368b0dee54580d9fdff80b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW+rwACgkQHrd2uwPH\nki3tlQ/+Pwhm3jyMZGZvpRl6l+caBb6vOY9JfnBIGDKYSvwAZpNFjJnUgyD4WhwS\nONN7AY0l4vCbKZDiC4h7B4E6RDkoX9rW4182yR3qtR+M2agt/M0923LhfTmi7QaM\n/Fyv4AQpDQNPMljN4IUVWvMkbJHNMelsM34Vj5h8Ro4txfGd3i3b2l/vtV6dGbd5\nIqCIAXoGy9DmfQo9wnvOWLls9aidl7Pjvv9bibE1dYihrSIv6gESODwVKcjl2ZI9\nWvTYmeH+jiF1gPTECB+UR/4M8JnAH4EbvT8GPA6zOXcLDojw9TEetdhJxaEJ6D6B\nQCaKt4B2Lc6A22HNJ1wogLRBZlCAKCcpHwEQB+WeQtyztIS00yh4EvK+zZ1B+jNC\nTiAiQX/o/EwmoTCfAf8n210FTHcA6tsY3qDtkiTVj/3a2WYQH1Dwz3YxSMrkMQYX\n2+plTT4nQXgU7n4Zq01OlfICiDynRplSSU1v827ptKyRZyWq6RyF7VYkEIxcSLeQ\nYYJEmwTzMEx0UAl6f3Ky7EK+zvfxjAjGN6b9VmPKg0BUNvp3t0wmvEP/V3hyRYnk\n8URuW3z1CcJxc0XHVhYnd2wq1co8rZE154/CRznDHdAkvXb6AixZykiXk5vt0+N2\nHq1qr1wzO2rRjGt4A7G6q2iNz05qmKQen0q7pysxrPdFw2yuICg=\n=v97j\n-----END PGP SIGNATURE-----",
        "payload": "tree 81ee409faae614aa77368b0dee54580d9fdff80b\nparent c2e6e7779ce3ed7210dbc2e7b069add63fc074ec\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1501143537 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524038332 +0200\n\nProcess priority requests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321b1f78b34acb77c6215b1aa6d3936ea86eafc6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e6e7779ce3ed7210dbc2e7b069add63fc074ec"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5a16f750c6f06f7c3e4fd1b74db1bfcb2ad3a06b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321b1f78b34acb77c6215b1aa6d3936ea86eafc6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321b1f78b34acb77c6215b1aa6d3936ea86eafc6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
        "patch": "@@ -2715,6 +2715,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n         bool fNewBlock = false;\n         ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock, !result.fPriorityRequest);\n+        if (result.fPriorityRequest) {\n+            ProcessPriorityRequests(pblock);\n+        }\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {\n@@ -3768,6 +3771,46 @@ void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload\n     }\n }\n \n+void ProcessPriorityRequests(const std::shared_ptr<CBlock> blockRef) {\n+    LOCK(cs_main);\n+    if (blocksToDownloadFirst.empty()) {\n+        return;\n+    }\n+    auto it = std::begin(blocksToDownloadFirst);\n+    while (it != std::end(blocksToDownloadFirst)) {\n+        std::shared_ptr<const CBlock> currentBlock;\n+        const PriorityBlockRequest &r = *it;\n+        // make sure we process blocks in order\n+        if (!r.downloaded) {\n+            break;\n+        }\n+        if (r.pindex && blockRef && blockRef->GetHash() == r.pindex->GetBlockHash()) {\n+            // the passed in block, no need to load again from disk\n+            currentBlock = blockRef;\n+        }\n+        else if (r.pindex->nStatus & BLOCK_HAVE_DATA) {\n+            CBlock loadBlock;\n+            if (!ReadBlockFromDisk(loadBlock, r.pindex, Params().GetConsensus())) {\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+            }\n+            currentBlock = std::make_shared<const CBlock>(loadBlock);\n+        }\n+        else {\n+            // stop in case we have no block data for this request\n+            break;\n+        }\n+\n+        // allow processing through signal\n+        GetMainSignals().ProcessPriorityRequest(currentBlock, r.pindex);\n+        LogPrint(BCLog::NET, \"processed priority block request (%s) height=%d\\n\", r.pindex->GetBlockHash().ToString(), r.pindex->nHeight);\n+\n+        // remove processed block from queue\n+        it = blocksToDownloadFirst.erase(std::remove_if(blocksToDownloadFirst.begin(), blocksToDownloadFirst.end(), [&r](const PriorityBlockRequest &rB) {\n+                                        return rB.pindex == r.pindex;\n+                                    }), blocksToDownloadFirst.end());\n+    }\n+}\n+\n class CNetProcessingCleanup\n {\n public:"
      },
      {
        "sha": "0a81b96f988af8a79476ac928f65bae095e7b13b",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321b1f78b34acb77c6215b1aa6d3936ea86eafc6/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321b1f78b34acb77c6215b1aa6d3936ea86eafc6/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
        "patch": "@@ -103,5 +103,6 @@ void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n  * Downloaded blocks will not trigger ActivateBestChain\n  */\n void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n+void ProcessPriorityRequests(const std::shared_ptr<CBlock> block);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "65cf118879781f0a2094437bb4a2314690c72f1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWNmMTE4ODc5NzgxZjBhMjA5NDQzN2JiNGEyMzE0NjkwYzcyZjFk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-12T13:22:15Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T08:10:43Z"
      },
      "message": "Optionally allow to skip the toFarAway check in AcceptBlock",
      "tree": {
        "sha": "375e555035c1281d1987e9802d4c951459186d76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/375e555035c1281d1987e9802d4c951459186d76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65cf118879781f0a2094437bb4a2314690c72f1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW/YQACgkQHrd2uwPH\nki0ALBAAkhPA6BDDjSzPadYKChytKUi4hdzS8BkCSbHWjPUIbTWd51F12DMcB7oS\nXl3owHhyLp/oE07iZnaKEdBVxa1c9dG+0YbFxV1tXHLD6abNL5sQt/IRo/k4lrsb\n99FsPb/skCYNgmKn9hKnLwsA0CC4nKhnvG8utVCajGdtY07NYHf0kr6D7h3C3gHB\n+l7/NNj4wfeF0xsY9TGj06kEp3Oi01BUUOf0bqq+Zo5cayBmkwK1A/1h28/LMbJ6\nGOysqx1T96Mb7FJhyvEHitNZs/nYkxfsn2IKuxiD4FURMvXeLOkmkXEHpbM5lPQw\nufPpNSFyqEHI+n8tSqvqpJLrccJ82g6q0bvjcpj0/7jBp8ZYyf+97y3C1ubXv49T\nvGSb/83XNjYHc7Aish6G1rNF7pCRPFbQxtMYj/cYxhSJMwIY+VRNl5hlY+5L891K\nuvJCa/hjN7JLc52YE2W0jm9+cAlYipH/w24vwmkdXJTfupTudcuXXCfUVMZPsFWH\nFNErwLM1je285sHDyzrgh96Ak2LyoukHkvtmn0e+0mSkeq+Tmy20Gw1ss/uyhuKx\nYI+PTXHfaFKwZ5xabh3OeIagmQl/jwQXCvq01X/B/F4TRU2ye9piftK8Ht5BOhSy\nK4LKGxkKmVM7hREYcVaiePm3aMDXv8dY3wJRtIsbbzAvic7DQiA=\n=iThX\n-----END PGP SIGNATURE-----",
        "payload": "tree 375e555035c1281d1987e9802d4c951459186d76\nparent 321b1f78b34acb77c6215b1aa6d3936ea86eafc6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499865735 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524039043 +0200\n\nOptionally allow to skip the toFarAway check in AcceptBlock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cf118879781f0a2094437bb4a2314690c72f1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65cf118879781f0a2094437bb4a2314690c72f1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cf118879781f0a2094437bb4a2314690c72f1d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321b1f78b34acb77c6215b1aa6d3936ea86eafc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/321b1f78b34acb77c6215b1aa6d3936ea86eafc6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f71a181a1f42ad6501b42ac2b25fdc2e87736ee6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65cf118879781f0a2094437bb4a2314690c72f1d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65cf118879781f0a2094437bb4a2314690c72f1d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=65cf118879781f0a2094437bb4a2314690c72f1d",
        "patch": "@@ -155,7 +155,7 @@ class CChainState {\n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n \n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock, bool checkFarAhead = true);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -3389,7 +3389,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock, bool checkFarAhead)\n {\n     const CBlock& block = *pblock;\n \n@@ -3425,7 +3425,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     if (!fRequested) {  // If we didn't ask for it:\n         if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n         if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n-        if (fTooFarAhead) return true;        // Block height is too high\n+        if (checkFarAhead && fTooFarAhead) return true;      // Block height is too high\n \n         // Protect against DoS attacks from low-work chains.\n         // If our tip is behind, a peer could try to send us\n@@ -3484,8 +3484,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         LOCK(cs_main);\n \n         if (ret) {\n-            // Store to disk\n-            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            // Store to disk, skip toFarAway check if we are not planing to activate the best chain\n+            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock, activateBestChain);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      }
    ]
  },
  {
    "sha": "b9ebf85827f585900eb4167e3cd58b753716127b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWViZjg1ODI3ZjU4NTkwMGViNDE2N2UzY2Q1OGI3NTM3MTYxMjdi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-10T17:24:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T08:10:46Z"
      },
      "message": "Add fAutoRequestBlocks to disabled/enable the verification progress",
      "tree": {
        "sha": "fb5abeddec7bd799f6dfb5193b6f334ffb4e7041",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb5abeddec7bd799f6dfb5193b6f334ffb4e7041"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9ebf85827f585900eb4167e3cd58b753716127b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW/YYACgkQHrd2uwPH\nki090w//WQRu2cYF7dnZJBucyugpk6HGvnieT7Qg95cO0RR4p1nHmmRzSiedOd6T\np6QqQjYI7jHgg5XWV7cqsWbpo9c83rZiKs1TnJ6iHw67yOVeXGDbClQhA+y5qVlZ\ntXYD/219t0a+L9Eun2h0c/mzAcYBzvuIV6G8WYHybH81p2WJKItRG2xOqukmHDuc\nDdxCS+O1HUOj2QTMhzomSsMBho4shFUJKTF+Mgaow6FHe4snb6gJw4HmUJRmQdXE\n5k1lpc/jPtN1WyuUpZoXDukKmji41DOAMW4U9TZgeIENEILDzQ1mzYegdkciKt3r\nVX/Nym6pFgxCdQNjokZ93LsgJmnFwk6eni9DCwngMIQeSKuPhuMg9/tRiNw7EmMo\nenBBHKLET5mdMB6y234M8Bg/2TnS3IHybYfxyiQyQhs7MdlW7feXMW2Al+q8Lbss\ny4zer0NgZdyKF/cnxr9FWeTom/71dGeXbjELrH8oXF/TuU2EgAVTr1Ja/AxYeAmR\nkaOtSnTvlrdNFlPpBms/ltvEKm4Pyp1gdCbzBlZKLBAjHEMmyOISa+4R1dvpjGi/\nKOX51CgxImaEor+qTW5ZTykVDwwcwgFE1s9JWy7wViH9lFm6Bdb4qucbyiBiFesR\nCmMZHeIvWWKHO4vbwLREUGIAav63NOeLb+HL4vU+gbaaMSe3YWY=\n=Oi+J\n-----END PGP SIGNATURE-----",
        "payload": "tree fb5abeddec7bd799f6dfb5193b6f334ffb4e7041\nparent 65cf118879781f0a2094437bb4a2314690c72f1d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1484069096 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524039046 +0200\n\nAdd fAutoRequestBlocks to disabled/enable the verification progress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9ebf85827f585900eb4167e3cd58b753716127b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9ebf85827f585900eb4167e3cd58b753716127b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9ebf85827f585900eb4167e3cd58b753716127b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65cf118879781f0a2094437bb4a2314690c72f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cf118879781f0a2094437bb4a2314690c72f1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65cf118879781f0a2094437bb4a2314690c72f1d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "18cc0ce6cb4128ff26453c8ec4788993c59bc136",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9ebf85827f585900eb4167e3cd58b753716127b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9ebf85827f585900eb4167e3cd58b753716127b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b9ebf85827f585900eb4167e3cd58b753716127b",
        "patch": "@@ -71,6 +71,8 @@ static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// limiting block relay. Set to one week, denominated in seconds.\n static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n \n+static std::atomic<bool> fAutoRequestBlocks(DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -520,6 +522,10 @@ bool FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n         return true;\n     }\n \n+    if (!fAutoRequestBlocks) {\n+        return false;\n+    }\n+\n     if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return false;\n@@ -1501,6 +1507,10 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n+                // Do not request blocks if autorequest is disabled\n+                if (!fAutoRequestBlocks) {\n+                    return true;\n+                }\n                 std::vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n                 for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n@@ -3811,6 +3821,14 @@ void ProcessPriorityRequests(const std::shared_ptr<CBlock> blockRef) {\n     }\n }\n \n+void SetAutoRequestBlocks(bool state) {\n+    fAutoRequestBlocks = state;\n+}\n+\n+bool isAutoRequestingBlocks() {\n+    return fAutoRequestBlocks;\n+}\n+\n class CNetProcessingCleanup\n {\n public:"
      },
      {
        "sha": "3db6794f61ae813e755b91f7b81d603f47cca229",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9ebf85827f585900eb4167e3cd58b753716127b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9ebf85827f585900eb4167e3cd58b753716127b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=b9ebf85827f585900eb4167e3cd58b753716127b",
        "patch": "@@ -34,6 +34,8 @@ static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n /** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n+/** if disabled, blocks will not be requested automatically, useful for low-resources-available mode */\n+static const bool DEFAULT_AUTOMATIC_BLOCK_REQUESTS = true;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -105,4 +107,7 @@ void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n void ProcessPriorityRequests(const std::shared_ptr<CBlock> block);\n \n+void SetAutoRequestBlocks(bool state);\n+bool isAutoRequestingBlocks();\n+\n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "5263167758117e45118f3bb6c7374fa96c73d7d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjYzMTY3NzU4MTE3ZTQ1MTE4ZjNiYjZjNzM3NGZhOTZjNzNkN2Qy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-16T08:12:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T08:10:46Z"
      },
      "message": "[RPC] Add requestblocks - a simple way to priorize block downloads",
      "tree": {
        "sha": "4d9c9f0d24efdd444af95fa08ac257001d9892c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d9c9f0d24efdd444af95fa08ac257001d9892c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5263167758117e45118f3bb6c7374fa96c73d7d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW/YYACgkQHrd2uwPH\nki1aIw//WQeMGDvX/GXuv9wiItsy8wkAhigYT0D/4StPtUfaLicibF4E43SSZhlt\nN0APO6ecQtBXjJhu5Qa0UIKaY7O6dRCsgZv/K4tXBD193i4cYer5xEHPx5rq2zsU\nvMgBnD3r9WbebMl7M344GX/tN1XrC6wMQErLhe3isvKpnZ6onFwY7qsvSxxKorza\n8mByIL2EeE2fyGLRWkBUK5dy60iCOhcI2GW1XRbnyfvWD5xAwdMO3XB/SQO7o0RR\nSHRybbJNWkBO65ko3X4NYBZHGOkkwpkn9LHct6CaeU/kMfZdZDdQ933XWTWuzdRZ\ns796FaTdDdUWwoAuQMX79dB8P50Tviz2AsM04Eg0XVi9qaj1WPS6UTkadPzEwYFK\n2LLbbs2EvOQv8P717HKYOsmy93VUKu58h3jNgk/C7zmP1vIYJ+CF1QymYRC45AJY\nENUvm7ISMse30+Us1L5fE5c+5nTZdENYHGHTqbEVpYezyjqIPitOlDCOCsuFzqHZ\nYDaOu+ZpzfHQcVlLq7MP51vjhi9vYBU3xWL9KE019xJ4arty4tcMDqMnNkmrqGfg\nIq352Lk6ya2T6u72LasB9f41AbKEMeVs9Qtx/BrrNbkS4uW2Iy6Rvmej9QkDD9PD\nq503HtmS6AucnOEzHUW+eyExV8kcjBiHHtN0wMiC0iv9Sw00KE0=\n=z8TT\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d9c9f0d24efdd444af95fa08ac257001d9892c0\nparent b9ebf85827f585900eb4167e3cd58b753716127b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479283947 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524039046 +0200\n\n[RPC] Add requestblocks - a simple way to priorize block downloads\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5263167758117e45118f3bb6c7374fa96c73d7d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5263167758117e45118f3bb6c7374fa96c73d7d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5263167758117e45118f3bb6c7374fa96c73d7d2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9ebf85827f585900eb4167e3cd58b753716127b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9ebf85827f585900eb4167e3cd58b753716127b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9ebf85827f585900eb4167e3cd58b753716127b"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 75,
      "deletions": 1
    },
    "files": [
      {
        "sha": "304e1daeb6952eccb75585702dd75ae34cd20b6c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5263167758117e45118f3bb6c7374fa96c73d7d2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5263167758117e45118f3bb6c7374fa96c73d7d2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5263167758117e45118f3bb6c7374fa96c73d7d2",
        "patch": "@@ -3821,6 +3821,18 @@ void ProcessPriorityRequests(const std::shared_ptr<CBlock> blockRef) {\n     }\n }\n \n+bool FlushPriorityDownloads() {\n+    LOCK(cs_main);\n+    bool ret = blocksToDownloadFirst.empty();\n+    blocksToDownloadFirst.clear();\n+    return !ret;\n+}\n+\n+size_t CountPriorityDownloads() {\n+    LOCK(cs_main);\n+    return blocksToDownloadFirst.size();\n+}\n+\n void SetAutoRequestBlocks(bool state) {\n     fAutoRequestBlocks = state;\n }"
      },
      {
        "sha": "8abd51dd7175b095b6f636f4a8247fdb650b93ae",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5263167758117e45118f3bb6c7374fa96c73d7d2/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5263167758117e45118f3bb6c7374fa96c73d7d2/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=5263167758117e45118f3bb6c7374fa96c73d7d2",
        "patch": "@@ -106,6 +106,8 @@ void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n  */\n void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n void ProcessPriorityRequests(const std::shared_ptr<CBlock> block);\n+bool FlushPriorityDownloads();\n+size_t CountPriorityDownloads();\n \n void SetAutoRequestBlocks(bool state);\n bool isAutoRequestingBlocks();"
      },
      {
        "sha": "400a6e9b53b7da4d05095a3346e862a0471dad08",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5263167758117e45118f3bb6c7374fa96c73d7d2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5263167758117e45118f3bb6c7374fa96c73d7d2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5263167758117e45118f3bb6c7374fa96c73d7d2",
        "patch": "@@ -13,6 +13,7 @@\n #include <consensus/validation.h>\n #include <validation.h>\n #include <core_io.h>\n+#include <net_processing.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n@@ -95,6 +96,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"validated\", ((blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS));\n     result.pushKV(\"height\", blockindex->nHeight);\n     result.pushKV(\"version\", blockindex->nVersion);\n     result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n@@ -124,6 +126,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"validated\", (blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS);\n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n@@ -681,6 +684,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"validated\\\" : n,       (boolean) True if the block has been validated\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n@@ -1626,6 +1630,60 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+UniValue requestblocks(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"requestblocks ( add | flush | status ) ( [\\\"hash_0\\\", \\\"hash_1\\\", ...] )\\n\"\n+            \"\\nPriorize blocks downloads.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. action            (string, required) the action to execute\\n\"\n+            \"                                        add  = add new blocks to the priority download\\n\"\n+            \"                                        flush = flush the queue (blocks in-flight will still be downloaded)\\n\"\n+            \"                                        status = get info about the queue\\n\"\n+            \"2. blockhashes       (array, optional) the hashes of the blocks to download\\n\"\n+            \"\\nResult:\\n\"\n+            \"   add: <null>\\n\"\n+            \"   flush: <true|false> (if the the queue wasn't empty)\\n\"\n+            \"   status: {\\\"count\\\": \\\"<amount of blocks in the queue>\\\"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"requestblocks\", \"add, \\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+            + HelpExampleRpc(\"requestblocks\", \"add, \\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+            );\n+\n+    if (request.params[0].get_str() == \"flush\") {\n+        return UniValue(FlushPriorityDownloads());\n+    }\n+    else if (request.params[0].get_str() == \"status\") {\n+        UniValue ret(UniValue::VOBJ);\n+        ret.push_back(Pair(\"count\", (uint64_t)CountPriorityDownloads()));\n+        return ret;\n+    }\n+    else if (request.params[0].get_str() == \"add\") {\n+        if (request.params[1].isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing blocks array\");\n+        }\n+        std::vector<const CBlockIndex*> blocksToDownload;\n+        {\n+            LOCK(cs_main); //mapBlockIndex\n+            for (const UniValue& strHashU : request.params[1].get_array().getValues()) {\n+                uint256 hash(uint256S(strHashU.get_str()));\n+                BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n+                if (mi == mapBlockIndex.end()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+                }\n+                blocksToDownload.push_back(mi->second);\n+            }\n+        }\n+\n+        AddPriorityDownload(blocksToDownload);\n+        return NullUniValue;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unkown action\");\n+    }\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -1648,8 +1706,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        {\"height\"} },\n     { \"blockchain\",         \"savemempool\",            &savemempool,            {} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            {\"checklevel\",\"nblocks\"} },\n-\n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          {\"blockhash\"} },\n+    { \"blockchain\",         \"requestblocks\",          &requestblocks,          {\"action\", \"blockhashes\"} },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        {\"blockhash\"} },"
      },
      {
        "sha": "2f6534f98128bb9761e35f9ee0a77aa09b274a57",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5263167758117e45118f3bb6c7374fa96c73d7d2/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5263167758117e45118f3bb6c7374fa96c73d7d2/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=5263167758117e45118f3bb6c7374fa96c73d7d2",
        "patch": "@@ -140,6 +140,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n     { \"addwitnessaddress\", 1, \"p2sh\" },\n+    { \"requestblocks\", 1, \"blockhashes\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "0cb5fbe2f8b1211a8df24640954c9108ae6c8262",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5263167758117e45118f3bb6c7374fa96c73d7d2/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5263167758117e45118f3bb6c7374fa96c73d7d2/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=5263167758117e45118f3bb6c7374fa96c73d7d2",
        "patch": "@@ -215,6 +215,7 @@ def _test_getblockheader(self):\n         assert_equal(header['hash'], besthash)\n         assert_equal(header['height'], 200)\n         assert_equal(header['confirmations'], 1)\n+        assert_equal(header['validated'], True)\n         assert_equal(header['previousblockhash'], secondbesthash)\n         assert_is_hex_string(header['chainwork'])\n         assert_is_hash_string(header['hash'])"
      }
    ]
  },
  {
    "sha": "70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDQ1ODIwNmMwYmRiZTBkMGNmMjA0N2JkZDQzMDRjY2QzNzM3ZTk3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-11T13:46:12Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T08:10:46Z"
      },
      "message": "Add -autorequestblocks which then allows to run in non-validation mode (pure light-client mode)",
      "tree": {
        "sha": "a3bb81de4a7a0893bc65f9947a5d88563a8e229a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3bb81de4a7a0893bc65f9947a5d88563a8e229a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrW/YYACgkQHrd2uwPH\nki2ZKg//aVGrNIMFhOlaZnti4ZuUmqX/H3YoooN/pcogWakiGXlpzh8FByMC5dmk\nIMIfNRXzFOan+6SL7xrmMDYqp2w7ApvFlecZxUSqwRD7KShCImNj/53CHKqRWYYa\n9QIhOvEcNsqlxXLSGUxxNzGeTDIBj8DVUw+iu606knlSobN8Sw0WRFAfneziWBC3\nI5tvgPLriPta7TAzK4+vQ9GC466rxzwikY7HrJzlu1JslOrfM2pwGuMBWTvTWaXG\nJacehiwqsm3veiBj+puKQn87fZtyvhLUJRNTFQxap5rvOlDfzOatqQ8m0Y2PRJ31\n8lM+IyBxX8TwoQ8l8vXUf6fxcFGL7bq3c4dnGANTfKtz0nXndPebFuClFpXGSNDq\nZM98GOIjw/tCrBYPoBPluU0nVffQVesb7ScX23u7PzTwreSwxOVRVcG0bACU+M/q\npuctHKkS+pTnckEbzBrAFJgIXw+C9QqZBTxrydxyaDYnRvV7b+Vfq/TDrDuCqcQc\ndKtK46fR6De+IEGEB25Ehd3O5edWqv7HLuRLJg+Cp2N/4bbXmZVxdm86euIXPA4v\nmGElGIEHp2ktPfjNiuYlzGW9ojaFGdytahMl89rXTKeKF7WftXV7U1zPr6Ukkk8T\nweH6wAjDa3hJeV/NlV+IfBkEPochPA8Tk7DsWb+yxBhtq8WS9QY=\n=gvjE\n-----END PGP SIGNATURE-----",
        "payload": "tree a3bb81de4a7a0893bc65f9947a5d88563a8e229a\nparent 5263167758117e45118f3bb6c7374fa96c73d7d2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499780772 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524039046 +0200\n\nAdd -autorequestblocks which then allows to run in non-validation mode (pure light-client mode)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70458206c0bdbe0d0cf2047bdd4304ccd3737e97/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5263167758117e45118f3bb6c7374fa96c73d7d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5263167758117e45118f3bb6c7374fa96c73d7d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5263167758117e45118f3bb6c7374fa96c73d7d2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f00dc72358181344349812d5d2bbae82fe857080",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70458206c0bdbe0d0cf2047bdd4304ccd3737e97/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70458206c0bdbe0d0cf2047bdd4304ccd3737e97/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
        "patch": "@@ -340,7 +340,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n+    strUsage += HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n+    strUsage += HelpMessageOpt(\"-autorequestblocks\", strprintf(_(\"Automatic block request, if disabled, blocks will not be requested automatically (default: %u)\"), DEFAULT_AUTOMATIC_BLOCK_REQUESTS));\n     strUsage += HelpMessageOpt(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n@@ -1004,6 +1005,7 @@ bool AppInitParameterInteraction()\n     }\n     fCheckBlockIndex = gArgs.GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = gArgs.GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n+    SetAutoRequestBlocks(gArgs.GetBoolArg(\"-autorequestblocks\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS));\n \n     hashAssumeValid = uint256S(gArgs.GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n     if (!hashAssumeValid.IsNull())"
      }
    ]
  },
  {
    "sha": "2326318a95651024a54133eece870260dce1addd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzI2MzE4YTk1NjUxMDI0YTU0MTMzZWVjZTg3MDI2MGRjZTFhZGRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-21T13:15:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T08:58:05Z"
      },
      "message": "[QA] add requestblocks test",
      "tree": {
        "sha": "7f62e4799d2315601ea94f72b912aba5eb0da0a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f62e4799d2315601ea94f72b912aba5eb0da0a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2326318a95651024a54133eece870260dce1addd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrXCJ4ACgkQHrd2uwPH\nki3NKQ//YlOsxnRN8jrlUplge47eJgk6gQG6zA0ciswq9pR6Yz5/nwpRc2kfilIV\n67XXoQPWixU7wiA+czvVI+iiauIwdzYZoHtLAddxm64ik4yGzaS46UiycpsCsI/R\nPpYv5wB/xWI7+mR5N6yK7FCVfUSFCDgHIMYHzuE1/kyb+o4pPAWVjVe+8wU2fKci\ngjcko3UP8aQLH9cdnPHBKBwEOTbz0RKkG5y99fJ1U581FoeMULYe9CcWMMhWDX/k\nvyrbTQGHbef5ENK0psTVhhfDjCl+FlC6raA1vZjOiqZ38psZoxvG84y+rgaGqM0L\nmwWBZWnMGH4Rbe9Qy9MlwEmhXgMXIhRl51Amk1pObk0ac2DtwHKp6FtcalwVQDwJ\nv4OUmpeckVl2hdrcwxSNo0rpI4H+v/iCrsyzzr1jA5vLT9EX0CpXOFSyFyeLG+KW\nIUjuafWaTnltE4jRsZvdWvb9jFCqdKvWRg/ilU/WZAajL7iwjnWgYlGd3YSajCt0\nY4DJeIkJLUZsCeIlgBEIYeIi2MRFFFAXC7Tn1i9oq3k+NYg0Pg/m8XjlR1GK3dlr\nvyHHQhqRzGqc47U6SS6DQH5JCr0j7Ce3XOX1q6UGh+ArdgVPF13uCzsnyr+Am4S2\n9ClA5PumfpOpjYxFpIsH1p+HIXXL82cdZ3K74bP73fYskYGVoQY=\n=wQuc\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f62e4799d2315601ea94f72b912aba5eb0da0a3\nparent 70458206c0bdbe0d0cf2047bdd4304ccd3737e97\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1500642927 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524041885 +0200\n\n[QA] add requestblocks test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2326318a95651024a54133eece870260dce1addd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2326318a95651024a54133eece870260dce1addd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2326318a95651024a54133eece870260dce1addd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70458206c0bdbe0d0cf2047bdd4304ccd3737e97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70458206c0bdbe0d0cf2047bdd4304ccd3737e97"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b1def74bc9268d3a7817d39edcca954932d6b0db",
        "filename": "test/functional/rpc_requestblocks.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2326318a95651024a54133eece870260dce1addd/test/functional/rpc_requestblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2326318a95651024a54133eece870260dce1addd/test/functional/rpc_requestblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_requestblocks.py?ref=2326318a95651024a54133eece870260dce1addd",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class RequestBlockRequestTest (BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[], ['-autorequestblocks=0']]\n+\n+    def run_test(self):\n+        self.nodes[0].generate(50)\n+        timeout = 20\n+        ctps = self.nodes[1].getchaintips()\n+        while timeout > 0:\n+            ctps = self.nodes[1].getchaintips()\n+            headerHeightReached = False\n+            for ct in ctps:\n+                if ct['status'] == \"headers-only\":\n+                    if ct['height'] == 50:\n+                        headerHeightReached = True\n+                if ct['status'] == \"active\":\n+                    assert(ct['height'] == 0)\n+            time.sleep(1)\n+            timeout-=1\n+            if headerHeightReached == True:\n+                break\n+        assert(timeout>0)\n+\n+        node0bbhash = self.nodes[0].getbestblockhash()\n+        # best block should not be validated, header must be available\n+        bh = self.nodes[1].getblockheader(node0bbhash, True)\n+\n+        assert_equal(bh['validated'], False)\n+        # block must not be available\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[1].getblock, node0bbhash)\n+\n+        # request best block (auxiliary)\n+        self.nodes[1].requestblocks(\"add\", [node0bbhash])\n+        timeout = 20\n+        while timeout > 0:\n+            if self.nodes[1].requestblocks(\"status\")['count'] == 0:\n+                break\n+            time.sleep(1)\n+            timeout-=1\n+        assert(timeout>0)\n+\n+        # block must now be available\n+        block = self.nodes[1].getblock(node0bbhash, True)\n+        assert_equal(block['hash'], node0bbhash)\n+        assert_equal(block['validated'], False)\n+\n+        #prevblock must not be available\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[1].getblock, block['previousblockhash'])\n+\n+if __name__ == '__main__':\n+    RequestBlockRequestTest().main()"
      },
      {
        "sha": "bf03facaed09d1f0e2d339170100e116b308fb1c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2326318a95651024a54133eece870260dce1addd/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2326318a95651024a54133eece870260dce1addd/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2326318a95651024a54133eece870260dce1addd",
        "patch": "@@ -128,6 +128,7 @@\n     'wallet_encryption.py',\n     'feature_dersig.py',\n     'feature_cltv.py',\n+    'rpc_requestblocks.py',\n     'rpc_uptime.py',\n     'wallet_resendwallettransactions.py',\n     'wallet_fallbackfee.py',"
      }
    ]
  },
  {
    "sha": "77561f7a4b500d0752d64ce931ce1dd613f7ab0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzU2MWY3YTRiNTAwZDA3NTJkNjRjZTkzMWNlMWRkNjEzZjdhYjBk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-27T08:29:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T08:58:10Z"
      },
      "message": "Pass priority requests through ZMQ notifications",
      "tree": {
        "sha": "7abd2b3bf85d5316e925b59b6b5eadcb2b60e0e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7abd2b3bf85d5316e925b59b6b5eadcb2b60e0e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77561f7a4b500d0752d64ce931ce1dd613f7ab0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrXCKIACgkQHrd2uwPH\nki1+Lg//bD7f7B0QMt7pwIvinbpKMKP51IGCkp96u/EaUV73EPqOcasDR84MzkxS\nbiMPfjbRtPmOZfDdRtbKqZThq3kTrQXN7oVw8ownGyf0q+xUlAOkzCa+aDYqHyGC\nHBM+VeOltAWpoBzKkCIQdGBmGI0BuzGX9R6isgzIchulSVEMIHuYzgpysfqbyScz\ncJv4S0FFdvsI4COXmN6ULjBTldlDKZLEqF6Dc+8gpKr9UEf0N8iDjsbiNIWcUOKU\n8zN71vuHBfoqND6jiY6o7mPh1UHbJrIMiHwv0FoASalZXxQWPVLVfPFxFVq0cKab\nfegrLIcC3KhJkDMKQElCcfzxm7/z2NedScTRRIK+XeRhzEyEnRy+uTFzp8SapV44\nzV7IL4sFQ2kttfj4jO1vAeC024xqhUMhn+yfGXsNKSwTm/fJgOD2IhPRzf1k8UwO\nreu+03G6klaYyED4VDHpVyhG0EeQl6hb5L7CLYpBZ4TdjHOFiRQ1ULqvlaJ5d9VT\n1yMQIJNWJhSUep3notyXDDM6o/PXfwFUGnSgXlRKV2oCl6D+7uXdT8nt+46QB4X9\n+maaf3ReRvmtQK6Rp9fdxLH2fLXpMtTawbkVRMSmbX6FRogq6n5kH+oFjgwB0Yy8\nmezd4XfGPHKqhYU9yFgws6VQMvCVearnUrykCq2kDo4R2+PkRtM=\n=q8Dj\n-----END PGP SIGNATURE-----",
        "payload": "tree 7abd2b3bf85d5316e925b59b6b5eadcb2b60e0e0\nparent 2326318a95651024a54133eece870260dce1addd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1501144159 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524041890 +0200\n\nPass priority requests through ZMQ notifications\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77561f7a4b500d0752d64ce931ce1dd613f7ab0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77561f7a4b500d0752d64ce931ce1dd613f7ab0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77561f7a4b500d0752d64ce931ce1dd613f7ab0d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2326318a95651024a54133eece870260dce1addd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2326318a95651024a54133eece870260dce1addd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2326318a95651024a54133eece870260dce1addd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f89690f16f2fb19fa05df73ea6e8c6e3ff83f399",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77561f7a4b500d0752d64ce931ce1dd613f7ab0d/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77561f7a4b500d0752d64ce931ce1dd613f7ab0d/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=77561f7a4b500d0752d64ce931ce1dd613f7ab0d",
        "patch": "@@ -173,6 +173,14 @@ void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBloc\n     }\n }\n \n+void CZMQNotificationInterface::ProcessPriorityRequest(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected)\n+{\n+    for (const CTransactionRef& ptx : pblock->vtx) {\n+        // Do a normal notify for each transaction added in the block\n+        TransactionAddedToMempool(ptx);\n+    }\n+}\n+\n void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {"
      },
      {
        "sha": "eb00e98806ab531e3d0dd2be6aecbcaf2bc18bfa",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77561f7a4b500d0752d64ce931ce1dd613f7ab0d/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77561f7a4b500d0752d64ce931ce1dd613f7ab0d/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=77561f7a4b500d0752d64ce931ce1dd613f7ab0d",
        "patch": "@@ -27,6 +27,7 @@ class CZMQNotificationInterface final : public CValidationInterface\n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void ProcessPriorityRequest(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n "
      }
    ]
  }
]