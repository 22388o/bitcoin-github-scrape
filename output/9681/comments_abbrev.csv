sipa,2017-02-03T20:13:32Z,I prefer an enum here (I'll elaborate if wanted).,https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-277350461,277350461,
laanwj,2017-02-06T13:26:07Z,"Concept ACK, it is better to have this in wallet than in the RPC code, especially as the code is going to be used by the GUI.\n\nNo opinion on how to handle the errors. Though returning an enum is consistent with some other wallet functions that return a status.\n\nAside: As said earlier on IRC I'm not entirely happy with the current trend of moving everything wallet related to CWallet - we're",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-277679692,277679692,
jonasschnelli,2017-02-07T20:43:00Z,"Completely rewrote the refactor.\n* Moved/refactored relevant code into `feeBumper.cpp` (`CFeeBump`) which breaks the pattern of `CWallet` as god class.\n* Split `BumpFee` into three steps, Bump, Sign (new `CWallet` function, can later be used by `CreateTransaction`) and Commit.\n",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-278133565,278133565,
jonasschnelli,2017-03-02T10:18:54Z,"Added a commit c81a8a7ddef6f3c1e4cb0816aa12ae16b91cbf02 that addresses the shared pointer for `CMutableTransaction`.\n\nThe second commit a9c25b611504225d61291365ab6025dbd426e2d0 moves the enum class `BumpFeeResult` into the global scope.\n\nI haven't implemented the proposed API change (https://github.com/bitcoin/bitcoin/pull/9681#discussion_r102848152) which maybe could be a follow up. I'n n",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-283613919,283613919,
jonasschnelli,2017-03-03T15:26:57Z,"Needed rebase (#8775).\nSquashed down to three relevant commits.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-283983349,283983349,
ryanofsky,2017-03-03T15:48:45Z,"utACK 4ce1d6fb995bc30551571fe3621f185ea66eae7f\n\nComparing against previous a9c25b611504225d61291365ab6025dbd426e2d0, there were no changes except for some whitespace and a renamed local iterator variable.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-283989381,283989381,
jonasschnelli,2017-03-03T15:50:07Z,"> [...] renamed local iterator variable.\n\nHad to change this to respect the `-Wshadow ` (#9828) change",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-283989760,283989760,
ryanofsky,2017-03-09T14:32:33Z,"It would be really nice to have this merged soon. This PR is blocking the bumpfee GUI PR #9697, which is blocking the RBF checkbox PR #9592, which is blocking the RBF RPC PR #9672, and possibly the `-walletrbf` default PR #9527. It would be great to start clearing this backlog.\n\nI guess maybe this needs another reviewer? It also needs a rebase to avoid trivial conflicts with #9853 and #9643.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-285366958,285366958,
jonasschnelli,2017-03-10T07:51:40Z,"Rebased (carefully).\nAdded @ryanofsky's https://github.com/ryanofsky/bitcoin/commit/731ca5c652d42806e82892695f4e43082c9d6a20",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-285601666,285601666,
jonasschnelli,2017-03-16T13:37:51Z,Fixed @ryanofsky findings and squashed into a single commit.,https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-287058863,287058863,
jonasschnelli,2017-03-27T13:43:19Z,"Addressed @ryanofsky and @jnewbery points.\nHopefully soon ready for merge.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-289457048,289457048,
ryanofsky,2017-03-27T20:02:43Z,"utACK ccbdb2ceadade6059d7c375592f01db7feda05f6. The three new commits, as well as the main commit 1d8529bf3c279e8e2128425cec12c2b8263a5e54 (previously ACKed) all look good.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-289568639,289568639,
jonasschnelli,2017-03-28T07:09:43Z,Thanks @JeremyRubin for the review. Fixed the relevant points.,https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-289683061,289683061,
jonasschnelli,2017-03-28T15:43:02Z,"Amend-changed the last commit to remove the redundant `vErrors.clear()`.\nAdded a check for `currentResult == BumpFeeResult::OK` during commit.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-289812422,289812422,
jonasschnelli,2017-03-30T07:28:52Z,"Added a commit that addresses @TheBlueMatt's points.\n- Changed `CFeeBumper`'s interface. It has now a `signTransaction` method instead of the – indeed strange – `getBumpedTxRef()`.\n- Made use of `std::move` for the txIn.\n- Added some comments",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-290325978,290325978,
jonasschnelli,2017-04-02T08:13:48Z,Rebased (trivial) after #9424,https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-290971853,290971853,
ryanofsky,2017-04-07T13:37:34Z,"utACK 5f59d3ecb7f1b63579e7f07fc520459cdf119c81, confirmed first 8 commits (previously acked as 99070569662dde84a4f4b1d38cd53762063f53d2) did not change in the rebase, other than the log category fix. New 9th commit also looks fine.\n\nI think it would be good to merge this because it is a burden to maintain separately and keep reviewing. It's been rebased many times and is blocking other prs.",https://github.com/bitcoin/bitcoin/pull/9681#issuecomment-292538273,292538273,
luke-jr,2017-02-03T20:09:30Z,Is there some reason not to use exceptions?,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99413385,99413385,src/wallet/wallet.h
jonasschnelli,2017-02-03T20:12:01Z,I though about using exceptions but came to the conclusion that a simple result state enum will (probably) allow more flexibility for further optimisations. But no strong opinion.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99413798,99413798,src/wallet/wallet.h
ryanofsky,2017-02-06T20:56:16Z,"could use ""enum class"" here to avoid the ""BumpFeeResult_"" prefixes here while still requiring them where the values are referenced.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99681884,99681884,src/wallet/wallet.h
ryanofsky,2017-02-06T21:01:38Z,"It appears that you are only copying, not moving the CalculateMaximumSignedTxSize function in this commit (8993411d7b3e6fe2c4baa917874941ed95c39188 `[Move] move bumpfee core logic to CWallet`). Would make more sense to remove it from rpcwallet.cpp in this commit instead of the next one.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99683051,99683051,src/wallet/wallet.cpp
ryanofsky,2017-02-06T21:11:50Z,"Enum is not being used in this commit (8993411d7b3e6fe2c4baa917874941ed95c39188 `[Move] move bumpfee core logic to CWallet`), would probably make more sense to define in the next commit.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99685109,99685109,src/wallet/wallet.h
ryanofsky,2017-02-06T21:17:56Z,"Can drop ""enum"" in c++.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99686304,99686304,src/wallet/wallet.cpp
ryanofsky,2017-02-06T21:32:56Z,"I don't think it's a good idea to return a mutable pointer to a copy of the CWalletTx that isn't actually in mapwallet, because changes a caller makes to this pointer might have unexpected or no effects. Since the shared pointer doesn't appear to be needed here or in #9697, I think it'd be better to return just wtxBumped.tx or wtxBumped.GetHash() instead.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99689422,99689422,src/wallet/wallet.cpp
ryanofsky,2017-02-07T21:11:12Z,Don't see a reason to require shared_ptr here. CMutableTransaction& would allow callers to use it or not use it. Similarly for other shared_ptr arguments.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r99929982,99929982,src/wallet/wallet.cpp
ryanofsky,2017-02-23T23:41:35Z,"I don't think there's a reason to have these typedefs or even to use shared pointers in feebumper at all. Shared pointers are a great tool in places where they are actually needed, but plain c++ references that don't need to be deferenced, don't require reference counting, and can't be null are a better option in the places where they work. Another disadvantage of shared_ptr interfaces is that the",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r102847930,102847930,src/primitives/transaction.h
ryanofsky,2017-02-23T23:42:36Z,"I think the less verbose `BumpFeeResult::OK` would be preferable to `CFeeBumper::BumpFeeResult::OK`\n\nCould move enum above class to accomplish this. Or could change ""enum class"" to ""enum"" for `CFeeBumper::OK`.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r102848081,102848081,src/wallet/feebumper.h
ryanofsky,2017-02-23T23:43:04Z,"Seeing all these getters makes me think this API grouping is not a good idea. We have this class with two functions that do real work (constructor and commit), and then a bunch of members, and a bunch of getters, and somehow the caller is supposed to keep track of all the getters and know which ones are valid to call at different stages in the object lifetime. Also, member lifetimes are unnecessar",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r102848152,102848152,src/wallet/feebumper.h
ryanofsky,2017-03-02T14:44:02Z,"Maybe split into two asserts, to be a little easier to read, and so you can tell which condition failed from the error.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r103938745,103938745,src/wallet/feebumper.cpp
ryanofsky,2017-03-09T23:03:42Z,"There is a minor bug here. This needs to pass `pWallet` into `CalculateMaximumSignedTxSize` so it can stop using `pwalletMain`. When making this change, I also had to make the `CWallet::DummySignTx` method const. Feel free to use my complete fix: https://github.com/ryanofsky/bitcoin/commit/731ca5c652d42806e82892695f4e43082c9d6a20\n\n",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r105293055,105293055,src/wallet/feebumper.cpp
ryanofsky,2017-03-10T19:52:45Z,"This appears to be WALLET_ERROR not MISC_ERROR in master:\n\nhttps://github.com/bitcoin/bitcoin/blob/8910b4717e5bb946ee6988f7fe9fd461f53a5935/src/wallet/rpcwallet.cpp#L2875",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r105475770,105475770,src/wallet/feebumper.cpp
ryanofsky,2017-03-10T19:57:07Z,"pwalletMain should be pwallet, also a few places below",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r105476597,105476597,src/wallet/rpcwallet.cpp
jonasschnelli,2017-03-16T13:37:26Z,Thanks. Great catch... fixed now.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r106417852,106417852,src/wallet/feebumper.cpp
ryanofsky,2017-03-17T16:30:34Z,"In commit ""Bumpfee move request parameter interaction to the top"":\n\nThis commit seems to be changing behavior in a way that I think would be good to avoid. Previously, if you passed a negative or 0 totalFee option, you would get an ""Insufficient totalFee"" error. But now, an automatic fee will be calculated, ignoring the totalFee value that was passed.\n\nI think you could fix this by writing",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r106691358,106691358,src/wallet/rpcwallet.cpp
jnewbery,2017-03-21T20:55:04Z,"I'd prefer this not to be an assert. Is it possible to return an error rather than assert?\n\nI know that this was here before the code move, but my worry is that moving it to wallet.cpp might encourage people to call this function without knowing that they must lock the wallet and verify that all the transaction inputs are in the wallet map first.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r107272568,107272568,src/wallet/wallet.cpp
jnewbery,2017-03-21T21:06:07Z,"I'm not sure if you need to check this here, when you already checked it in `CFeeBumper::CFeeBumper()`?\n\nIf this check fails, I think you need to return false from this function immediately rather than fall through, since the function goes on to deference the transaction in the map.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r107275222,107275222,src/wallet/feebumper.cpp
jonasschnelli,2017-03-27T11:57:08Z,Yes. That's correct. I'm adding a commit that restores that behaviour.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108150909,108150909,src/wallet/rpcwallet.cpp
jonasschnelli,2017-03-27T11:57:34Z,Right. This is a valid point. Adding a commit that returns false instead of the `assert()`.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108150986,108150986,src/wallet/wallet.cpp
jonasschnelli,2017-03-27T11:59:25Z,"I think it's sane to keep this check... but your right, it should immediately return. Will fix.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108151239,108151239,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T20:12:07Z,"I don't think you need to change the signature of `CalculateMaximumSignedTxSize`, and the prior version seems better",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108267934,108267934,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T20:16:30Z,"make_pair with emplace_back is not necessary, may as well fix it.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108268950,108268950,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T20:36:01Z,"might make more sense for CalculateMaximumSignexTxSize to take a vErrors argument, as this is non-obvious to me (from local code) why maxNewTxSize < 0 means there were unsignable inputs.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108273486,108273486,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T20:43:12Z,Reason to change this line from `CWallet::GetRequiredFee`?,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108275082,108275082,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T20:46:11Z,"This is also static, please keep CWallet::",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108275706,108275706,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T20:46:40Z,"This is also static, please keep CWallet::\n",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108275796,108275796,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T21:12:17Z,"Maybe you should refactor this to:\n```c++\n if (nOldFee >= nNewFee) {\n    vErrors.push_back(""Attempt to increase fee decreased fee."");\n    currentResult = BumpFeeResult::WALLET_ERROR;     \n    return;\n}\n```",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108281199,108281199,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T21:15:53Z,You should just make this a case of the switch.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108281936,108281936,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-27T21:21:45Z,Maybe you should fail to commit `if (!vErrors.empty())`?,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108283089,108283089,src/wallet/feebumper.cpp
JeremyRubin,2017-03-27T21:23:13Z,I think I would prefer to see commit be done via RAII (but maybe that's bad if you make a container of CFeeBumpers...),https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108283375,108283375,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T06:55:05Z,Indeed. This seems to be a rebase issue. Will change.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108345663,108345663,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T06:59:21Z,"Maybe, though the scope of this PR is – ideally – pure refactoring to make it usable over the UI. Let's optimise such things later.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108346243,108346243,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T07:02:09Z,"Yes. This seems to be again a rebase issue. Though, changing it to `pWallet` would allow to be more flexible when multi wallet takes off... but changing it back for now.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108346641,108346641,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T07:02:33Z,Let's do this later and focus now on refactoring out the core functionality.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108346696,108346696,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T07:03:51Z,Hmm.. not sure if RAII for a bump commit is appropriate. IMO the commit (it actually does sign and broadcast) should be a clearly visible call.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108346893,108346893,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T07:05:57Z,Good point. Will change.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108347191,108347191,src/wallet/feebumper.cpp
ryanofsky,2017-03-28T12:48:35Z,"In commit ""Restore CalculateMaximumSignedTxSize function signature"":\n\nPrevious signature took a CWallet reference instead of a pointer. (Just an observation, feel free to leave it.)",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108410196,108410196,src/wallet/feebumper.cpp
ryanofsky,2017-03-28T12:49:57Z,"In commit ""Use static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back""\n\nCould drop parens around mi->second. (Just an observation, feel free to leave.)",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108410473,108410473,src/wallet/feebumper.cpp
JeremyRubin,2017-03-28T13:37:51Z,`vErrors.clear()` is now redundant.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108422407,108422407,src/wallet/feebumper.cpp
JeremyRubin,2017-03-28T14:19:13Z,"I think it makes sense to just change it now... https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85209694 is where it got introduced, I think it still may be possible to trigger & throwing seems better for this than crashing your node.\n\nI'll leave it up to you though -- just let me know if you decide not to & I'll prepare a patch.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108434057,108434057,src/wallet/feebumper.cpp
JeremyRubin,2017-03-28T14:30:24Z,"What if you do something like\n```c++\ncommit() {\n    assert(!comitted)\n    comitted = true;\n     ...\n}\n~CFeeBumper() {\n    if (vErrors.empty())\n    assert(comitted);\n}\n```\nTo ensure that if a CFeeBump could be comitted, it is & comitting isn't tried multiple times?",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108437264,108437264,src/wallet/feebumper.cpp
JeremyRubin,2017-03-28T14:38:02Z,"You do not use vErrors to store more than one error, so may as well just use a std::string (this clarifies it is set-once).\n\nAlternatively, you could use a smart pointer to a string and just check that it is not nullptr.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108439499,108439499,src/wallet/feebumper.h
JeremyRubin,2017-03-28T14:40:33Z,maybe change to/add ```&& BumpFeeResult::OK == currentResult```,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108440268,108440268,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T15:35:27Z,"L265 and L274 can both add an error that then get's spit out over the JSON-RPC ""errors"" array. I haven't changed this in this PR.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108456651,108456651,src/wallet/feebumper.h
jonasschnelli,2017-03-28T15:38:54Z,"Not sure but this looks after too much hand holding. But if someone wants to implement this, yeah, maybe after this PR?",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108457522,108457522,src/wallet/feebumper.cpp
jonasschnelli,2017-03-28T15:39:38Z,"Let's try to keep the scope (""refactoring""), behaviours changes have already sneaked into this PR.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108457745,108457745,src/wallet/feebumper.cpp
TheBlueMatt,2017-03-29T13:47:23Z,"Having this and the totalFee error be separate is somewhat strange, maybe combine them now that the checks are in the same place (in an additional commit) into one generic error so we dont have users chasing error messages for a few rounds?",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108679775,108679775,src/wallet/feebumper.cpp
TheBlueMatt,2017-03-29T14:21:31Z,nit: pass txidIn by reference or std::move it here.,https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108688929,108688929,src/wallet/feebumper.cpp
TheBlueMatt,2017-03-29T14:33:31Z,"This feels like a super strange API...you're getting a reference to memory owned by CFeeBumper, passing it to the wallet, then calling a method owned by CFeeBumper which assumes you mutated its (seemingly internal) state. Given you're already passing a pwallet reference into CFeeBumper, maybe replace this with bool SignTransaction(CWallet *pwalletIn)?",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108692011,108692011,src/wallet/feebumper.h
TheBlueMatt,2017-03-29T14:37:27Z,"Can you document the return value here? It initially confused me because I thought it would return false if it set vErrors, when, in fact, it might add vErrors and then return true.",https://github.com/bitcoin/bitcoin/pull/9681#discussion_r108693090,108693090,src/wallet/feebumper.h
