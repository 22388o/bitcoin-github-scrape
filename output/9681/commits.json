[
  {
    "sha": "d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWE5NWU4ZDNkMGFjNTg3OTJmZTFiODg1YzlmYzY1YWYxMWQ3Njkx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-02T21:03:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T07:48:48Z"
      },
      "message": "Bumpfee move request parameter interaction to the top",
      "tree": {
        "sha": "d330316b0e7452378d6aa36225a9413006daf6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d330316b0e7452378d6aa36225a9413006daf6ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgrOAACgkQHrd2uwPH\nki2uVA//YcE6D+1F0kDVJksjEaEFBCjiPm+1NyIGVDM6KPjYQP1k2K/veaYSo9bh\nBCyZ+QLg78LQzaCf6KhSqxkKbRmuDcLuPVKFlcb+cUTNwRQnEaCfK8qtWBEhkpXU\nlz1gLRfNlL93Kd5tr3iIhJNulrtLDJLj7H9jlVkI8S822NChIQbdXbr/XVGTPvy3\nuc5yvfrh4tFhl6QENRJVQNAroCHzQ4A9xZLySm99IuKxU8uX9+rokIzUFaYmWecm\nPHl5ICecd3CG7kHkAOKpyISxItBevI9ZpUjTyye3N/o/21+R+CFfzKLnkas5TaCe\nKgK1UJn71sx1gZBfQB2p7M45PnLSJIeGeou0aXEEpGSX8A9Ifoa3Pk60tMX+HrZG\nR3eyA3xr/S0JzHdLUrQJ1EwPNHum2cvDz1xsvJM6TxHaOr+cCbTRWraRMwSILDhx\nPbqC8zYPJq+3/OnZN4/B9sSBpp6paWFwWbxRfnbU+seu/JDbPH8xSIdkKIeetnv/\nFPL0Sns3Gdv5qtsnkAaag8ONlIzf+40GeBO9LFMCwPE6Rn4581DY8ZpF+nP4fzGg\nezmHa7Q9Gu5yYefY7McQtzjCEa5LkuBGJCKU7G65ZPMX17JLBgOk9UfNT6AB8tlw\n1lUDIcNtDxsC19ChFCeYfgxrDMhCZIu+N30GkZnswbDIJzLEAfE=\n=540M\n-----END PGP SIGNATURE-----",
        "payload": "tree d330316b0e7452378d6aa36225a9413006daf6ce\nparent fbf36cae3a4613e289cec6c5eaeb1395d362a037\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1486069435 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491119328 +0200\n\nBumpfee move request parameter interaction to the top\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbf36cae3a4613e289cec6c5eaeb1395d362a037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf36cae3a4613e289cec6c5eaeb1395d362a037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf36cae3a4613e289cec6c5eaeb1395d362a037"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 37,
      "deletions": 38
    },
    "files": [
      {
        "sha": "af6f59c9d9282eabd5fa81143811e7111c53e268",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 38,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
        "patch": "@@ -2859,6 +2859,38 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n \n+    // optional parameters\n+    bool specifiedConfirmTarget = false;\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            specifiedConfirmTarget = true;\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+            }\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int64();\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            replaceable = options[\"replaceable\"].get_bool();\n+        }\n+    }\n+\n     // retrieve the original tx from the wallet\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n@@ -2916,44 +2948,6 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, *pwallet);\n \n-    // optional parameters\n-    bool specifiedConfirmTarget = false;\n-    int newConfirmTarget = nTxConfirmTarget;\n-    CAmount totalFee = 0;\n-    bool replaceable = true;\n-    if (request.params.size() > 1) {\n-        UniValue options = request.params[1];\n-        RPCTypeCheckObj(options,\n-            {\n-                {\"confTarget\", UniValueType(UniValue::VNUM)},\n-                {\"totalFee\", UniValueType(UniValue::VNUM)},\n-                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n-            },\n-            true, true);\n-\n-        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n-        } else if (options.exists(\"confTarget\")) {\n-            specifiedConfirmTarget = true;\n-            newConfirmTarget = options[\"confTarget\"].get_int();\n-            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n-            }\n-        } else if (options.exists(\"totalFee\")) {\n-            totalFee = options[\"totalFee\"].get_int64();\n-            CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n-            if (totalFee < requiredFee ) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                                   strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                             FormatMoney(requiredFee)));\n-            }\n-        }\n-\n-        if (options.exists(\"replaceable\")) {\n-            replaceable = options[\"replaceable\"].get_bool();\n-        }\n-    }\n-\n     // calculate the old fee and fee-rate\n     CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(nOldFee, txSize);\n@@ -2973,6 +2967,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n         }\n+        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+        if (totalFee < requiredFee ) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                                                FormatMoney(requiredFee)));\n+        }\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {"
      }
    ]
  },
  {
    "sha": "0337a39d31603eb2c723a560410357f186763dc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzM3YTM5ZDMxNjAzZWIyYzcyM2E1NjA0MTAzNTdmMTg2NzYzZGMy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-03T15:15:47Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:39Z"
      },
      "message": "Refactor Bumpfee core functionality",
      "tree": {
        "sha": "82076d4859da26c9bb890538acedcbbc232f6ac6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82076d4859da26c9bb890538acedcbbc232f6ac6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0337a39d31603eb2c723a560410357f186763dc2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsngACgkQHrd2uwPH\nki1fPw/9GN+wJC9i6FMj+xytfH4fQNQDo63Qgdl+ZmX72FS42u4OvsasUi4soCt2\nRQinP3vqwWFyCu5J2EmqrwqawvC8uL9curv0MTbW3GfbRi1pn1itGUEsp6uib7QI\nVp+7+aOiO2/BpInbj2/b7IVOdYTwR742xz3jZYk98MO1gIaxOVZ8/JvfpAeqJ8Xl\nZQ6+t54GoXcUzeKruFrQ/BnFJMhUHF6viuaSaeYbYBnE0YT7A2+/UI0930smoen0\nPMOD1QCvlB6PRtEi0mqO5ghv4cDNVYP9G7QAvQygbZH0Qa+IZhBr3x63CDs0/8Tw\nRXY+f6qUspnmLGW1vZDe4xHbXUbkVacW0saEnXyvUOxdYKfstLwWgmLYtD3yBD4q\n/6XlwPpgQTcNbQ9KTlfNsP+j6IpEYK/CK6nv1APV77ofLhMWxJNORztckePGEOO3\nD0mlezIXoFlqjyNEpujAxQK332IVy2jtXPQ0hGsATOFpv+S82fkdHtTYUG1DWpSA\nfI5KRIhSxs9Y1HeLzdrUSBz6pIO7nYspBOvxzyeQsuRMKPWRZ+kKcoyYfYkNObML\nRhm5/vrqLho5BfDV63MmR3VpZAtGS7e3X5WEG0uJwuPcsNJ34VJjHOyQBiX0Ng4+\nAxKXlibnYZj0oyt5hGpAsMSXcj9vviiJ8/qcf3eS24rM9xroyvk=\n=3rrp\n-----END PGP SIGNATURE-----",
        "payload": "tree 82076d4859da26c9bb890538acedcbbc232f6ac6\nparent d1a95e8d3d0ac58792fe1b885c9fc65af11d7691\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1488554147 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120759 +0200\n\nRefactor Bumpfee core functionality\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0337a39d31603eb2c723a560410357f186763dc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0337a39d31603eb2c723a560410357f186763dc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0337a39d31603eb2c723a560410357f186763dc2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691"
      }
    ],
    "stats": {
      "total": 603,
      "additions": 382,
      "deletions": 221
    },
    "files": [
      {
        "sha": "eab8efc74f83579283cadf5c8211ca61d66f601d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -156,6 +156,7 @@ BITCOIN_CORE_H = \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/feebumper.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -230,6 +231,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/feebumper.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "98b6da83c26538f9c7f38a80012d4f09bf6a5b36",
        "filename": "src/wallet/feebumper.cpp",
        "status": "added",
        "additions": 275,
        "deletions": 0,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -0,0 +1,275 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"wallet/feebumper.h\"\n+#include \"wallet/wallet.h\"\n+#include \"policy/policy.h\"\n+#include \"policy/rbf.h\"\n+#include \"validation.h\" //for mempool access\n+#include \"txmempool.h\"\n+#include \"utilmoneystr.h\"\n+#include \"util.h\"\n+#include \"net.h\"\n+\n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CWallet *pWallet, const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<std::pair<const CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pWallet->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n+    :\n+    txid(txidIn),\n+    nOldFee(0),\n+    nNewFee(0)\n+{\n+    vErrors.clear();\n+    bumpedTxid.SetNull();\n+    AssertLockHeld(pWallet->cs_wallet);\n+    if (!pWallet->mapWallet.count(txid)) {\n+        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n+        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        return;\n+    }\n+    auto it = pWallet->mapWallet.find(txid);\n+    const CWalletTx& wtx = it->second;\n+\n+    if (pWallet->HasWalletSpend(txid)) {\n+        vErrors.push_back(\"Transaction has descendants in the wallet\");\n+        currentResult = BumpFeeResult::INVALID_PARAMETER;\n+        return;\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it_mp = mempool.mapTx.find(txid);\n+        if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n+            vErrors.push_back(\"Transaction has descendants in the mempool\");\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        vErrors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        vErrors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        vErrors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pWallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        vErrors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pWallet->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                vErrors.push_back(\"Transaction has multiple change outputs\");\n+                currentResult = BumpFeeResult::WALLET_ERROR;\n+                return;\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        vErrors.push_back(\"Transaction does not have a change output\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // Calculate the expected size of the new transaction.\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(pWallet, *wtx.tx);\n+    if (maxNewTxSize < 0) {\n+        vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n+        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        return;\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CFeeRate nNewFeeRate;\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    }\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            vErrors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+        CAmount requiredFee = pWallet->GetRequiredFee(maxNewTxSize);\n+        if (totalFee < requiredFee) {\n+            vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                                                FormatMoney(requiredFee)));\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // if user specified a confirm target then don't consider any global payTxFee\n+        if (specifiedConfirmTarget) {\n+            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n+        }\n+        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n+        else {\n+            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n+        }\n+\n+        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n+\n+        // New fee rate must be at least old rate + minimum incremental relay rate\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n+            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        }\n+    }\n+\n+    // Check that in all cases the new fee doesn't violate maxTxFee\n+     if (nNewFee > maxTxFee) {\n+         vErrors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                               FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n+         currentResult = BumpFeeResult::WALLET_ERROR;\n+         return;\n+     }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    mtx =  *wtx.tx;\n+    CTxOut* poutput = &(mtx.vout[nOutput]);\n+    if (poutput->nValue < nDelta) {\n+        vErrors.push_back(\"Change output is too small to bump the fee\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n+        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        mtx.vout.erase(mtx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!newTxReplaceable) {\n+        for (auto& input : mtx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    currentResult = BumpFeeResult::OK;\n+}\n+\n+bool CFeeBumper::commit(CWallet *pWallet)\n+{\n+    AssertLockHeld(pWallet->cs_wallet);\n+    vErrors.clear();\n+    if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n+        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n+        currentResult = BumpFeeResult::MISC_ERROR;\n+    }\n+    CWalletTx& oldWtx = pWallet->mapWallet[txid];\n+\n+    CWalletTx wtxBumped(pWallet, MakeTransactionRef(std::move(mtx)));\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pWallet);\n+    wtxBumped.mapValue = oldWtx.mapValue;\n+    wtxBumped.mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n+    wtxBumped.vOrderForm = oldWtx.vOrderForm;\n+    wtxBumped.strFromAccount = oldWtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n+    CValidationState state;\n+    if (!pWallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+        return false;\n+    }\n+\n+    bumpedTxid = wtxBumped.GetHash();\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n+    // mark the original tx as bumped\n+    if (!pWallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+    }\n+    return true;\n+}\n+"
      },
      {
        "sha": "42b0ccad3667a0a73bf63fedc7120e0bbf371e2a",
        "filename": "src/wallet/feebumper.h",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_FEEBUMPER_H\n+#define BITCOIN_WALLET_FEEBUMPER_H\n+\n+#include <primitives/transaction.h>\n+\n+class CWallet;\n+class uint256;\n+\n+enum class BumpFeeResult\n+{\n+    OK,\n+    INVALID_ADDRESS_OR_KEY,\n+    INVALID_REQUEST,\n+    INVALID_PARAMETER,\n+    WALLET_ERROR,\n+    MISC_ERROR,\n+};\n+\n+class CFeeBumper\n+{\n+public:\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable);\n+    BumpFeeResult getResult() const { return currentResult; }\n+    const std::vector<std::string>& getErrors() const { return vErrors; }\n+    CAmount getOldFee() const { return nOldFee; }\n+    CAmount getNewFee() const { return nNewFee; }\n+    CMutableTransaction* getBumpedTxRef() { return &mtx; }\n+    uint256 getBumpedTxId() const { return bumpedTxid; }\n+\n+    bool commit(CWallet *pWalletNonConst);\n+\n+private:\n+    const uint256 txid;\n+    uint256 bumpedTxid;\n+    CMutableTransaction mtx;\n+    std::vector<std::string> vErrors;\n+    BumpFeeResult currentResult;\n+    CAmount nOldFee;\n+    CAmount nNewFee;\n+};\n+\n+#endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "701e9987b5527756a213d338be9b533c4f57f60f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 219,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -18,8 +18,9 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/feebumper.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n \n #include <stdint.h>\n \n@@ -2778,33 +2779,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-// Calculate the size of the transaction assuming all signatures are max size\n-// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n-// TODO: re-use this in CWallet::CreateTransaction (right now\n-// CreateTransaction uses the constructed dummy-signed tx to do a priority\n-// calculation, but we should be able to refactor after priority is removed).\n-// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n-// be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, CWallet &wallet)\n-{\n-    CMutableTransaction txNew(tx);\n-    std::vector<std::pair<CWalletTx*, unsigned int>> vCoins;\n-    // Look up the inputs.  We should have already checked that this transaction\n-    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array.\n-    for (auto& input : tx.vin) {\n-        const auto mi = wallet.mapWallet.find(input.prevout.hash);\n-        assert(mi != wallet.mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n-    }\n-    if (!wallet.DummySignTx(txNew, vCoins)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n-    }\n-    return GetVirtualTransactionSize(txNew);\n-}\n-\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -2891,206 +2865,48 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // retrieve the original tx from the wallet\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n-    if (!pwallet->mapWallet.count(hash)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    }\n-    CWalletTx& wtx = pwallet->mapWallet[hash];\n-\n-    if (pwallet->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the wallet\");\n-    }\n \n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, specifiedConfirmTarget, totalFee, replaceable);\n+    BumpFeeResult res = feeBump.getResult();\n+    if (res != BumpFeeResult::OK)\n     {\n-        LOCK(mempool.cs);\n-        auto it = mempool.mapTx.find(hash);\n-        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the mempool\");\n+        switch(res) {\n+            case BumpFeeResult::INVALID_ADDRESS_OR_KEY:\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::INVALID_REQUEST:\n+                throw JSONRPCError(RPC_INVALID_REQUEST, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::INVALID_PARAMETER:\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::WALLET_ERROR:\n+                throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+                break;\n+            default:\n+                throw JSONRPCError(RPC_MISC_ERROR, feeBump.getErrors()[0]);\n+                break;\n         }\n     }\n \n-    if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n-    }\n-\n-    if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n-    }\n-\n-    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-    }\n-\n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!pwallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n-    }\n-\n-    // figure out which output was change\n-    // if there was no change output or multiple change outputs, fail\n-    int nOutput = -1;\n-    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (pwallet->IsChange(wtx.tx->vout[i])) {\n-            if (nOutput != -1) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n-            }\n-            nOutput = i;\n-        }\n-    }\n-    if (nOutput == -1) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n+    // sign bumped transaction\n+    if (!pwallet->SignTransaction(*feeBump.getBumpedTxRef())) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n-\n-    // Calculate the expected size of the new transaction.\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, *pwallet);\n-\n-    // calculate the old fee and fee-rate\n-    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n-    CFeeRate nOldFeeRate(nOldFee, txSize);\n-    CAmount nNewFee;\n-    CFeeRate nNewFeeRate;\n-    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n-    // future proof against changes to network wide policy for incremental relay\n-    // fee that our node may not be aware of.\n-    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n-    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n-        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    // commit the bumped transaction\n+    if(!feeBump.commit(pwallet)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n     }\n-\n-    if (totalFee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n-        if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-        }\n-        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n-        if (totalFee < requiredFee ) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                                                FormatMoney(requiredFee)));\n-        }\n-        nNewFee = totalFee;\n-        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n-    } else {\n-        // if user specified a confirm target then don't consider any global payTxFee\n-        if (specifiedConfirmTarget) {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n-        }\n-        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n-        else {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n-        }\n-\n-        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n-\n-        // New fee rate must be at least old rate + minimum incremental relay rate\n-        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n-        // in that unit (fee per kb).\n-        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n-        // add 1 satoshi to the result, because it may have been rounded down.\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n-        }\n-    }\n-\n-    // Check that in all cases the new fee doesn't violate maxTxFee\n-     if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_WALLET_ERROR,\n-                            strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                                      FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n-     }\n-\n-    // check that fee rate is higher than mempool's minimum fee\n-    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n-    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-    }\n-\n-    // Now modify the output to increase the fee.\n-    // If the output is not large enough to pay the fee, fail.\n-    CAmount nDelta = nNewFee - nOldFee;\n-    assert(nDelta > 0);\n-    CMutableTransaction tx(*(wtx.tx));\n-    CTxOut* poutput = &(tx.vout[nOutput]);\n-    if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n-    }\n-\n-    // If the output would become dust, discard it (converting the dust to fee)\n-    poutput->nValue -= nDelta;\n-    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n-        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n-        nNewFee += poutput->nValue;\n-        tx.vout.erase(tx.vout.begin() + nOutput);\n-    }\n-\n-    // Mark new tx not replaceable, if requested.\n-    if (!replaceable) {\n-        for (auto& input : tx.vin) {\n-            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n-        }\n-    }\n-\n-    // sign the new tx\n-    CTransaction txNewConst(tx);\n-    int nIn = 0;\n-    for (auto& input : tx.vin) {\n-        std::map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(input.prevout.hash);\n-        assert(mi != pwallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-        if (!ProduceSignature(TransactionSignatureCreator(pwallet, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n-        }\n-        UpdateTransaction(tx, nIn, sigdata);\n-        nIn++;\n-    }\n-\n-    // commit/broadcast the tx\n-    CReserveKey reservekey(pwallet);\n-    CWalletTx wtxBumped(pwallet, MakeTransactionRef(std::move(tx)));\n-    wtxBumped.mapValue = wtx.mapValue;\n-    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n-    wtxBumped.vOrderForm = wtx.vOrderForm;\n-    wtxBumped.strFromAccount = wtx.strFromAccount;\n-    wtxBumped.fTimeReceivedIsTxTime = true;\n-    wtxBumped.fFromMe = true;\n-    CValidationState state;\n-    if (!pwallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n-        // NOTE: CommitTransaction never returns false, so this should never happen.\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n-    }\n-\n-    UniValue vErrors(UniValue::VARR);\n-    if (state.IsInvalid()) {\n-        // This can happen if the mempool rejected the transaction.  Report\n-        // what happened in the \"errors\" response.\n-        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n-    }\n-\n-    // mark the original tx as bumped\n-    if (!pwallet->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n-        // TODO: see if JSON-RPC has a standard way of returning a response\n-        // along with an exception. It would be good to return information about\n-        // wtxBumped to the caller even if marking the original transaction\n-        // replaced does not succeed for some reason.\n-        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n-    result.push_back(Pair(\"errors\", vErrors));\n+    result.push_back(Pair(\"txid\", feeBump.getBumpedTxId().GetHex()));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(feeBump.getOldFee())));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(feeBump.getNewFee())));\n+    UniValue errors(UniValue::VARR);\n+    for (const std::string& err: feeBump.getErrors())\n+        errors.push_back(err);\n+    result.push_back(errors);\n \n     return result;\n }"
      },
      {
        "sha": "186d3c5cd34ff169f0cb000e4898fe89fece5f13",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -16,6 +16,7 @@\n #include \"validation.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"policy/rbf.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n@@ -2255,6 +2256,26 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n+bool CWallet::SignTransaction(CMutableTransaction &tx)\n+{\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n+        assert(mi != mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+            return false;\n+        }\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "c714ddd09073891b074006150d6e93e2be364ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -867,6 +867,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n+    bool SignTransaction(CMutableTransaction& tx);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -881,7 +882,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n     template <typename ContainerType>\n-    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const;\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1125,7 +1126,7 @@ class CAccount\n // ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n // so that each entry corresponds to each vIn, in order.\n template <typename ContainerType>\n-bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const\n {\n     // Fill in dummy signatures for fee calculation.\n     int nIn = 0;"
      }
    ]
  },
  {
    "sha": "2718db070589114d54fdf227fb560c1578a7e419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzE4ZGIwNzA1ODkxMTRkNTRmZGYyMjdmYjU2MGMxNTc4YTdlNDE5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-27T11:55:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:42Z"
      },
      "message": "Restore invalid fee check (must be > 0)",
      "tree": {
        "sha": "1f8031450c18a9f6aac8fde27d6feb552b9ca721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f8031450c18a9f6aac8fde27d6feb552b9ca721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2718db070589114d54fdf227fb560c1578a7e419",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnoACgkQHrd2uwPH\nki1OYw//WFVogw7CNmTh6/wwBx3/OfVXgMlhMer3Mp5vWpfcza29jdNk4Lv00f+/\nObvqR/LM1CsFWBFlciVMbBl4myDGf0LPoLOKkxNUGp79XeE51+f6OdDSaw1Ot0DT\nYGyHhzjkhUBMK1vKB7c8nitmmFog0K2VpzRvVofd/T2EUvRpBGCEnRlCtmnkjVjX\nKFE1hVCI7DHxThQ1ihgP+1tTm2xvDStjzod+9toTitu8d3dptgjWOUvTIGLKh8nm\nkBNRdEEW8lBebbnjfP5J0UWGyeuq78+G0TqlG6DY396ORu+bN246HOaILNkdSSm9\nc5sMZHXRN2jJTN/qLC3GoyuVA4WcDMHMoc+edIZHI+SnRKG5qHxiKFagtTIuGcLZ\n72WpfxR42qHn6HnYXPtLOc8hNtalbRoZBU65ju8o+WZM5TkbZSBMytYeBglxUlQb\ngaOxOBP39Y5ZC64tMextdaiYGUS0RDvel/LjaFyS8g671Y8qFo2GEn0nwh1H3ot4\nldJWJYumnZkXR53lvBkDQAYzJF43gltvkGBcv4K2NPWj+lM7TKm57t94HWG+ESXp\npBekv+hYVNqzqJ4duA6JctrAlxxV8fTgXC8/dZMnpqjoxgNFH0aqhU0xTc51kH1y\nA2GARBTStr3JWc6O2IrPpLMhrDYQ6HY+pzFvb5yNxOlQAjLDA44=\n=NSAN\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f8031450c18a9f6aac8fde27d6feb552b9ca721\nparent 0337a39d31603eb2c723a560410357f186763dc2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490615728 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120762 +0200\n\nRestore invalid fee check (must be > 0)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2718db070589114d54fdf227fb560c1578a7e419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2718db070589114d54fdf227fb560c1578a7e419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2718db070589114d54fdf227fb560c1578a7e419/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0337a39d31603eb2c723a560410357f186763dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0337a39d31603eb2c723a560410357f186763dc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0337a39d31603eb2c723a560410357f186763dc2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f746c54f24e2f591b29d53ff39c1b3e8f1a54cc9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2718db070589114d54fdf227fb560c1578a7e419/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2718db070589114d54fdf227fb560c1578a7e419/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2718db070589114d54fdf227fb560c1578a7e419",
        "patch": "@@ -2858,6 +2858,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             }\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n+            }\n         }\n \n         if (options.exists(\"replaceable\")) {"
      }
    ]
  },
  {
    "sha": "bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2M3MmNjY2M3MmYwMjBkNjg5NmJiYmY0ZTg1ZGYxMWUxZDVhNGYw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-27T11:59:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:42Z"
      },
      "message": "Directly abort execution in FeeBumper::commit if wallet or tx is not available",
      "tree": {
        "sha": "37ffd7214487cb626a0c9e66239bfb82c2f3f32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37ffd7214487cb626a0c9e66239bfb82c2f3f32b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnoACgkQHrd2uwPH\nki0HJQ/+Jq9BVQmL/XaO4ztweVkK+hssoyRQVqWIIqYiD136dzsQG1WsrMHkHQcw\n34qM92xK0lYRRHkqjEEN+/gaQT/B9zk0RQmgXI9QIabtWO9B81lbMBDTDMrPxBQ7\nQAn/AryzeiCdCmd4I+sLlObPFcG4lT2mPuK85arnwdWN+tcZalKB8LnErKoCSFY1\neW05K/YH2nSW0bHm7ynHHibl8kqgsOnHAhxVYn1H78voBR2WH9/6yyXKJCw5vlCU\nz1hcFpPoGryIzxsouKTwIWKB8YExGEisnTiwJGf4r5kveHk11C+YBfrIUaOYeFe7\nwHqhFL8by8PS45eDEmIHphnZgD45AMQv/7RLWhAynmR931+abLrF+vq4V3Z/gmt5\n6ZdOF9CKs3Jd2AlfZ/SJp547GZm1RwCO8hX3e3fWBWsdfHtQPXMtOR1pOCbC7q1r\nF54H8ohjnJhEJhC9fdeJs+sh/aFeE51iOv0Pl956eOqDqVAgJhbwz4d7q9EKbWsF\nr77d/XkpKLjoDXa5lb+iut7vigKbYYME+phTCcIuoWp9/aLnjpFtPtf9OoWtH5fC\n5z+pH2IDI9XirO1GJ/f7LBpHV7vhqmiFcpBgjV1H3D2wvvrEmJDiTCfExTv4d01K\n/WmSzNov0rbU0Mzc8EC9xyLgHihT7Rx7gW75EcDxmhTq7TZn/0c=\n=cNz/\n-----END PGP SIGNATURE-----",
        "payload": "tree 37ffd7214487cb626a0c9e66239bfb82c2f3f32b\nparent 2718db070589114d54fdf227fb560c1578a7e419\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490615973 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120762 +0200\n\nDirectly abort execution in FeeBumper::commit if wallet or tx is not available\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2718db070589114d54fdf227fb560c1578a7e419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2718db070589114d54fdf227fb560c1578a7e419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2718db070589114d54fdf227fb560c1578a7e419"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57c879447c7a2ed4162379f72a101f2ec31848ad",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
        "patch": "@@ -236,6 +236,7 @@ bool CFeeBumper::commit(CWallet *pWallet)\n     if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n         vErrors.push_back(\"Invalid or non-wallet transaction id\");\n         currentResult = BumpFeeResult::MISC_ERROR;\n+        return false;\n     }\n     CWalletTx& oldWtx = pWallet->mapWallet[txid];\n "
      }
    ]
  },
  {
    "sha": "51ea44f01c0d63aeacb8657b6305040b3419e9f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWVhNDRmMDFjMGQ2M2FlYWNiODY1N2I2MzA1MDQwYjM0MTllOWYx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-27T12:00:14Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Use \"return false\" instead assert() in CWallet::SignTransaction",
      "tree": {
        "sha": "de330dbfca90469a863288cfee9670ad9e7de4da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de330dbfca90469a863288cfee9670ad9e7de4da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki2F9BAAvieAA0a56M28RKt9MZbVhwP2vOB4xM8xRpOHTtqJhF4lqctPJYH5lMjC\nks7+b2bQuIemlTnSpzMZKvA4/9G7BTAAcDmLoWxqjvXEs+KQN7poHExveEjakqnN\nn1s0p3cXBs1EYn9fxs97xaC25QtbKh8Yz9D52OVnEZLr9BE+fHrWJOU0DQV+wBRK\nBA6Uhjjv68CrdQTcJm0yLLkkEXeDO9NVORCY2jvTqLaWUpjNySzjjsFctTW5zmZr\npC6wlBQDJ+ktJ5NxPF8ycYRaWbqIa0cUfjdXS/21Yt4np+BkhcK2NR+5vcfhgr6C\n3c1RMrQdfWdOwbgVfBsD0+6ZYLkqQSIp0i9xuUgM2Cy7mkuicia21Ik46KyQXyeP\n3qOenkgBK9r1QSilYD9qHpbrDqgI2rH5ib+5vMLuqb9kI1qLj0+TGHJl/kaHWsrN\n9ONpZsHR8uwArtLJJa7kFcXnztsFG4SdGQaz39Lbf1caitYLjfL5KPwGW8f7bUZY\n9PqHdYufid/mcnGqYLrfVbLlwzIzPO7jsM4eKRH+KoPgzP5QEdWpiF9m1adyqCjn\nVA1gVJgZWq3duEYFNxVJ7ImUvwHaA00GmPetqxSFsgTa9oNBnL+k+p980aH3grbw\n5/ZzEppyEPA3kxyd09AEPyhX3atYWqP0khoy274/g6rPdsoACbw=\n=jg/U\n-----END PGP SIGNATURE-----",
        "payload": "tree de330dbfca90469a863288cfee9670ad9e7de4da\nparent bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490616014 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nUse \"return false\" instead assert() in CWallet::SignTransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d415bb09c6b013d891353c423b02fdebbf23f2f5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ea44f01c0d63aeacb8657b6305040b3419e9f1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ea44f01c0d63aeacb8657b6305040b3419e9f1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=51ea44f01c0d63aeacb8657b6305040b3419e9f1",
        "patch": "@@ -2263,7 +2263,9 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     int nIn = 0;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n-        assert(mi != mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n+            return false;\n+        }\n         const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;"
      }
    ]
  },
  {
    "sha": "bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjc4YzE1OTllNTU1ZmJlY2UxM2FkNTBhYjRiMWRmYTY4ZWJjMzcy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-28T06:56:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Restore CalculateMaximumSignedTxSize function signature",
      "tree": {
        "sha": "5c3778685a4d6fcee5e2af7821e436c231397a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c3778685a4d6fcee5e2af7821e436c231397a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki2UMw/9GPS5l+HDFq8rCXTlXdxZovRAnqYpnW861hGAKREBPXMbc4d4GqSuQ3zV\nczXabb3H1tDbF8O9qvbo+UH2vJXjcQSCOtVGNO1ARtr4ksMIc3QsNIUJrOD0HOCB\nVO4mh1SAUQxdMnYtcnhaQcXvRG/Ry85xrwCxoybE2mQf7V8P1ATHtsYeisuXSsQL\nprjE5EzDn9UzrYWbaBVuW60kMHuA4JveXL+ce0Yeko5rGNTc+Ga+iA8SnaxiloPs\n4Z9WsT+MPZ9ZxsaG+KgcXhP4FcIJLnx52Z2pl3NtmcGHPiV8QmjJUohk9NGTtKpH\nNns8eaX+kgWlCZWx5eh3D2T0Va1lxAbE6ucDu8HXFF/jKIbbDir/7K9KeGCJ6s7X\n/L7Vj0hWsMxmBavQ01mhYWDmcSEFym4R+steDqxNND9BeNRGxjSLtqfDrAkUiNXq\noJZwsA8z8zaP+q5eUigy17zumdZrGFTy9yS01Byfah3mGgLsNPTTt51iaFjlite6\nyf99QFTd1shk4h48VvtDCzgw8pQLNvBUyx+TQagRaJTISTcp/eZMh1IxiB1Ole6V\nMVh0cl34zByVuauD+H4exR3x9q3ORb+nOXyJZIFFVPFcKmmCTjYUKMoP9vD4UyxM\n3A5ckn39BfUGnexIHqhmAAtuP49Mbe3IGmsmzb9zfq7iZ2vXsTI=\n=NzKz\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c3778685a4d6fcee5e2af7821e436c231397a15\nparent 51ea44f01c0d63aeacb8657b6305040b3419e9f1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490684195 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nRestore CalculateMaximumSignedTxSize function signature\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51ea44f01c0d63aeacb8657b6305040b3419e9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51ea44f01c0d63aeacb8657b6305040b3419e9f1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "61b7a730b564bcec06a9661e5d6c72adf47c7a2a",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb78c1599e555fbece13ad50ab4b1dfa68ebc372/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb78c1599e555fbece13ad50ab4b1dfa68ebc372/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
        "patch": "@@ -20,7 +20,7 @@\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CWallet *pWallet, const CTransaction &tx)\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<std::pair<const CWalletTx *, unsigned int>> vCoins;\n@@ -120,7 +120,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(pWallet, *wtx.tx);\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, pWallet);\n     if (maxNewTxSize < 0) {\n         vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n         currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;"
      }
    ]
  },
  {
    "sha": "44cabe6380d63505b30d4f854bbbe7926201a2a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGNhYmU2MzgwZDYzNTA1YjMwZDRmODU0YmJiZTc5MjYyMDFhMmE5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-28T07:06:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Use static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back",
      "tree": {
        "sha": "e7a9bbf6987c4a0d3c0c141e6029d2bde3183afd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7a9bbf6987c4a0d3c0c141e6029d2bde3183afd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki11Dg/+NKOA4ya3OBone4kk+xlftPEN5hfoAlxXmEMfjASChoTOZQTCnqQo4CvQ\nJdtZhcYcbI3CPEUXkJV4zwQnbj2cDj688sSvCjBvAJ6+cGOxGQ2Hbwyi6Uy1kEkg\n3bgSFchXn9xJwkpAjH59N+IVGGYZE29+1jPH7R2DIxzHeG9UqSKEuQIowmLWIGD/\nqQj7fOK1OwTrD9GTVtVb5KbYGhDx6apyMiP41I0F/wHeB3zX8aM2qAywim+x7BVR\nFYHqxKtaoBhMbhy8ubgvohD/RDKbhUDdERVAxYvc2ArZb5QsrnZwMpCCURHL6QSy\nLoZt/BxniKNpvycOJymOQq9tWYDgeox/N0BuAx76t6raLW+gua7J8MGOh8xR3f3c\nAD29sOzQKSpxyOXILFVHmPcJhBA+4RkIQDsTp/wGRKi57IHTwVQnpMoH6yTyqu85\nZCVy7tMpQ7+8oX4Y4hmTxPp+5b8Kbx4g1GcmlM9+iJsS+KxCOVt69mjUgvJDypgh\n8FgDN93q58PDFV4zoRBzkV/D8cmccNeQ+fF8RIqmF5AO3BVt2IL/Iehq5yKDhavX\noDKeUHFI33N2IT1rvo0diZ7SoOk8k9FrbNAJ/g3hr9DTnZpNWB1KSWOslxytKeg8\nn7CXcgaH2qPyHUKOu+8/ue8Xaaym0FBOTE2X1Uxsm9fgPgO59E0=\n=7EjV\n-----END PGP SIGNATURE-----",
        "payload": "tree e7a9bbf6987c4a0d3c0c141e6029d2bde3183afd\nparent bb78c1599e555fbece13ad50ab4b1dfa68ebc372\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490684806 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nUse static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44cabe6380d63505b30d4f854bbbe7926201a2a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb78c1599e555fbece13ad50ab4b1dfa68ebc372"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9ebb36f36e69fdf73230da9a4c22eb1a8217ec42",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44cabe6380d63505b30d4f854bbbe7926201a2a9/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44cabe6380d63505b30d4f854bbbe7926201a2a9/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=44cabe6380d63505b30d4f854bbbe7926201a2a9",
        "patch": "@@ -30,7 +30,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWal\n     for (auto& input : tx.vin) {\n         const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n         assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n+        vCoins.emplace_back(&(mi->second), input.prevout.n);\n     }\n     if (!pWallet->DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n@@ -147,7 +147,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n             currentResult = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n-        CAmount requiredFee = pWallet->GetRequiredFee(maxNewTxSize);\n+        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n         if (totalFee < requiredFee) {\n             vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n@@ -159,11 +159,11 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     } else {\n         // if user specified a confirm target then don't consider any global payTxFee\n         if (specifiedConfirmTarget) {\n-            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n         }\n         // otherwise use the regular wallet logic to select payTxFee or default confirm target\n         else {\n-            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n         }\n \n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);"
      }
    ]
  },
  {
    "sha": "0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGYyMmVkNmZkMGI4M2QxODFkYzhjZTM3ODZhNDdkYTBmMWQ1OGFl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-28T07:08:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Cancel feebump is vErrors is not empty",
      "tree": {
        "sha": "4e6b8504477eefbd1b60670d01fed050bb6ce45d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e6b8504477eefbd1b60670d01fed050bb6ce45d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki323A//SQiC/xuFsYR/sn2cEsz46YqnJaK+2PfE3VUVMIpItaTziTLqeAWU9GSW\n1IwhrOczWTr2FzrdhXPdzo7zHtZf7NjBP9lP3yuteXGU55sPUFIM323L5MgbPjdq\nFj+3Ino/X9yIncG7k5EcZ7Ncf8AE6y5K0kRn+zUN5oL8Yi6D6Vtay0w6JV43TGmJ\nllFGZM2gQTbT3mQH1/R8nqHkA9Nezf2R6cJKEMPcu9w/ZiOFYEnmuibPpV7vICS4\naeEmNBI+oANztd0/sYIX0+rJ4ifFgguQ296YZDna5Iq8p7JOedjaN1+oi2HBgrf2\n329z9UUk4hzJJcyHuV3xQGyoPSw+VkppGgJuFizcbqxWDLxHfQCBDEi+iwk4ws7U\n21kYPiAlGTYoj4HZ1K5r0G+RTe4scwL+CT34OsTFGyfXqaUtdmA8VlW4RqUkmyuQ\nlRNgNVH6RvvSD57gJXXfdrdllYtH84MPw6ehF6hhqfvofMkY+0wqYnYj/MMHy3zc\nqwbzaExJmwawR81l1A5Zv4rUjjf+zvsd3JJO2AX0PZ2SzKcjeIvFSfYVyEjd1q9D\nW1lCQqAzwv+BS393W8fR9fx78wew30yRhamy9eI2GDW0CQaPcat0QEez4U2JYVVn\nC/LC67ZXtbJNX7AUMEPAuDtrGD4FsXlYBVbKfRbYZcBGpMhitA8=\n=SXmm\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e6b8504477eefbd1b60670d01fed050bb6ce45d\nparent 44cabe6380d63505b30d4f854bbbe7926201a2a9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490684881 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nCancel feebump is vErrors is not empty\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44cabe6380d63505b30d4f854bbbe7926201a2a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44cabe6380d63505b30d4f854bbbe7926201a2a9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "73de2395291c6e47cbab27466fa330984c2ae83e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
        "patch": "@@ -232,7 +232,9 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n bool CFeeBumper::commit(CWallet *pWallet)\n {\n     AssertLockHeld(pWallet->cs_wallet);\n-    vErrors.clear();\n+    if (!vErrors.empty() || currentResult != BumpFeeResult::OK) {\n+        return false;\n+    }\n     if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n         vErrors.push_back(\"Invalid or non-wallet transaction id\");\n         currentResult = BumpFeeResult::MISC_ERROR;"
      }
    ]
  },
  {
    "sha": "5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjU5ZDNlY2I3ZjFiNjM1NzllN2YwN2ZjNTIwNDU5Y2RmMTE5Yzgx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-30T07:26:21Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Improve CFeeBumper interface, add comments, make use of std::move",
      "tree": {
        "sha": "2676a11700b27907a255ee47199cbfbb1926e73d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2676a11700b27907a255ee47199cbfbb1926e73d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki2x4BAAoL+d8nVzwlURSRVBo/lxPNyIGx9qJrB47SaADvG5ygxAAd4rx7ZHY1HE\nAwoGimL+h50imnDaL+BGRI1lLNPkS9A9PaOx1XGyReUG1j4x7RnEsWUIHu+DtCE+\n2OZtOJ8G/v3wsNrTv24YZExenixE2lpSRwLdchLL/Gc8dA2p8t8c2FQiyL4BccE8\nhFUvHPk3owFbO7mOI6Y/JRQj9+TbHvQqPK9biJABTQsMgYQl6w1S9dNZep/co1ei\nc0fmDGdrf2NnlIHH/HV9n4FpDPbUBpMdqp44pRjSiWAiMeZSNj1m5ITvA0P5jmay\n3WseMuH8XzbJY4o/cbsDXMndQ34MpAxj7CBFOqKLupgkMnOcwvGQGKw7jdc7+ljr\nWxFAorS0V1hJ8I/8/inIxUS8BRZ7GPuaFkpzlyV8Nl8P8TJl3NTndAKqM65y+m4W\nonVDzC3ONQ0aLlJ0Ymy88Y+Z0SvLPZ8pQ+ba3TbjQkU2+Qgzvi/hfU3ZWT4DkhhJ\n8BJSF8lfoCoHzzcagqcGj8tYjgAI4RX8yQjNMNoJsL66RBhUeRK4xhMGiZca3oHO\nWlN2Nv79vHUfngzdJvaHdM48rHrNRtmJRE8y/EaAGfR20VSkZRXKUdTp0qs7o8gA\nSApuHK4uS6gAAP35MCnHYWV37PTPuv0DExs1tRcHyFo/5jGWV+M=\n=h42/\n-----END PGP SIGNATURE-----",
        "payload": "tree 2676a11700b27907a255ee47199cbfbb1926e73d\nparent 0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490858781 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nImprove CFeeBumper interface, add comments, make use of std::move\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fe3871a91d9b8c75e22ddfd0a5f714a71bfd278f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "patch": "@@ -42,7 +42,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWal\n \n CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n     :\n-    txid(txidIn),\n+    txid(std::move(txidIn)),\n     nOldFee(0),\n     nNewFee(0)\n {\n@@ -229,6 +229,11 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     currentResult = BumpFeeResult::OK;\n }\n \n+bool CFeeBumper::signTransaction(CWallet *pWallet)\n+{\n+     return pWallet->SignTransaction(mtx);\n+}\n+\n bool CFeeBumper::commit(CWallet *pWallet)\n {\n     AssertLockHeld(pWallet->cs_wallet);"
      },
      {
        "sha": "1a30499893fc067af7dbc01d59400eefd8e4868a",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "patch": "@@ -28,9 +28,19 @@ class CFeeBumper\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }\n     CAmount getNewFee() const { return nNewFee; }\n-    CMutableTransaction* getBumpedTxRef() { return &mtx; }\n     uint256 getBumpedTxId() const { return bumpedTxid; }\n \n+    /* signs the new transaction,\n+     * returns false if the tx couldn't be found or if it was\n+     * improssible to create the signature(s)\n+     */\n+    bool signTransaction(CWallet *pWallet);\n+\n+    /* commits the fee bump,\n+     * returns true, in case of CWallet::CommitTransaction was successful\n+     * but, eventually sets vErrors if the tx could not be added to the mempool (will try later)\n+     * or if the old transaction could not be marked as replaced\n+     */\n     bool commit(CWallet *pWalletNonConst);\n \n private:"
      },
      {
        "sha": "2cc3072c16aed4548604a937a16b40bbc42df7dc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "patch": "@@ -2895,7 +2895,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     // sign bumped transaction\n-    if (!pwallet->SignTransaction(*feeBump.getBumpedTxRef())) {\n+    if (!feeBump.signTransaction(pwallet)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n     // commit the bumped transaction"
      }
    ]
  }
]