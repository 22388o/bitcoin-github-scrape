DrahtBot,2020-06-13 02:51:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21380 (versionbits: Refactor and add fuzzing harness by ajtowns)\n* #21377 (Speedy trial support for versionbits by ajtow",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-643558083,643558083,
Crypt-iQ,2020-08-18 13:48:16,"I know this is sort of in-progress as there are outstanding UBSan warnings, but this won't compile on my macOS v10.15.4, clang 10.0.1. Needs a rebase I think.\n```\nMaking all in src\n  CXX      test/fuzz/addition_overflow-addition_overflow.o\nIn file included from test/fuzz/addition_overflow.cpp:7:\n./test/fuzz/util.h:347:13: error: no matching function for call to 'AdditionOverflow'\n     ",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-675489315,675489315,
practicalswift,2020-08-18 18:58:32,"@Crypt-iQ Oh, thanks for letting me know. Now rebased and hopefully no compilation errors? :)",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-675655947,675655947,
Crypt-iQ,2020-08-19 02:34:50,@practicalswift now builds on my macOS :),https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-675816185,675816185,
practicalswift,2020-09-17 13:30:43,"Had to rebase also this one to make use of the new `$(FUZZ_SUITE_LDFLAGS_COMMON)`.\n\nReview welcome :)",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-694235820,694235820,
Crypt-iQ,2020-09-26 15:25:58,Will review and run on DO while I figure out a better fuzzing setup!,https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-699509769,699509769,
Crypt-iQ,2020-10-04 21:32:32,"This [input](https://github.com/Crypt-iQ/crypt-iq.github.io/blob/master/19259_review/0927_corpus_rootdir/077acab225c2a7622541b5f4864b2caa41568548) gives the following signed-integer-overflow on ubuntu with clang 10:\n<details>\n<summary>signed-integer-overflow</summary>\n\n```\ntxmempool.cpp:830:15: runtime error: signed integer overflow: -9223372036854775808 + -432345564227567616 cannot be r",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-703319218,703319218,
practicalswift,2020-10-05 19:35:04,@Crypt-iQ Thanks a lot for reviewing and reporting your finding. These signed integer overflows are covered in issue #19278 and fixed in PR #20089. Please consider reviewing the latter if you have time! :),https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-703844035,703844035,
Crypt-iQ,2020-10-11 21:59:48,"Currently trying to manually construct inputs that populate the mempool. Since FuzzedFileProvider is used in place of an actual file, the format is a little different and it seems the fuzzer has a hard time creating a valid transaction. The data stream is read from both the front (`ConsumeBytes`) and the back (`ConsumeIntegralInRange`). Also this fuzzer won't do anything on my Mac as `_GNU_SOURCE`",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-706773987,706773987,
Crypt-iQ,2020-10-17 21:10:41,"Code review ACK 08afafdfbaefba6a660436a3f94730f5976e69ae\n\nStill in the process of testing",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-711080902,711080902,
Crypt-iQ,2020-11-08 09:52:44,"Tested ACK 08afafdfbaefba6a660436a3f94730f5976e69ae\n\nCan view coverage here: https://crypt-iq.github.io/19259_review/c0c5177b_cov_run_ubuntu_3/\n(The coverage above was run on a different commit, but the coverage hasn't changed since then.)\n\nWith more cores or time or a hand-crafted input, the transactions would actually be accepted into the mempool, but my fuzzed inputs always failed tx ",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-723554089,723554089,
Crypt-iQ,2021-01-08 01:51:50,"Tested ACK 8939196\n\nOn arch Linux, clang-11 with UBSAN+ASAN\nCoverage: https://crypt-iq.github.io/19259_review/vlmcoverage_01072021/index.html",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-756496157,756496157,
practicalswift,2021-03-01 11:44:33,"Rebase number 12 completed :)\n\nNow using the recently introduced `MakeNoLogFileContext` which wasn't around when this fuzz testing PR was submitted nine months ago.\n\nAt nine months PR pregnancy: is this fuzz testing PR baby getting ready to meet the world (`master`)? :)",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-787885358,787885358,
practicalswift,2021-03-11 22:46:11,"@jonatack \n\nThanks a lot for reviewing!\n\nAll feedback addressed (+ added `using FopenFn` for readability): this PR should hopefully be ready for final review :)",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-797100259,797100259,
Crypt-iQ,2021-03-12 13:23:22,"@jonatack libfuzzer is in-process fuzzing with an in-memory corpus and I have noticed on my Arch box, that more inputs and larger inputs will make rss increase significantly.  In the crash log, I notice that the max length for inputs is 1MB. Just a thought. ",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-797487400,797487400,
jonatack,2021-03-12 13:35:12,"@Crypt-iQ yes, for me this is a new issue (after a couple years of testing fuzz patches on this project) and only with qa-assets.",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-797493878,797493878,
jonatack,2021-03-12 15:06:03,"re-ACK f00061202867dd965fe8ca51253d1600776f8ab0 per `git range-diff e0bc27a d9b0d15 f000612`,  looked over the changes again, fuzz build + ran fuzzer, debug non-fuzz build + ran/halted bitcoind a couple times on mainnet/signet, loading/dumping mempool seemed nominal\n\nThanks for adding the `FopenFn` type alias. It's a nice improvement.",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-797548135,797548135,
jonatack,2021-03-15 17:22:09,"Tested re-ACK 68afd3eeec27a270765ad26cd62d87cd0935e99f \n\nNice improvement.\n\n<details><summary><code>git diff f000612 68afd3e</code></summary><p>\n\n```diff\ndiff --git a/src/test/fuzz/validation_load_mempool.cpp b/src/test/fuzz/validation_load_mempool.cpp\nindex 97e705ef30..e1a21b6c53 100644\n--- a/src/test/fuzz/validation_load_mempool.cpp\n+++ b/src/test/fuzz/validation_load_mempool",https://github.com/bitcoin/bitcoin/pull/19259#issuecomment-799599833,799599833,
Crypt-iQ,2020-11-27 20:31:37,Time could be mocked since in `LoadMempool` there is a call to `GetTime`. It could either be static or based on fuzz data. What do you think?,https://github.com/bitcoin/bitcoin/pull/19259#discussion_r531779017,531779017,src/test/fuzz/validation_load_mempool.cpp
practicalswift,2020-12-01 13:17:09,Good point! Now fixed. Please re-review :),https://github.com/bitcoin/bitcoin/pull/19259#discussion_r533399026,533399026,src/test/fuzz/validation_load_mempool.cpp
jonatack,2021-03-11 18:39:57,"style nit, while touching this line, can update to braced initialization (same for line 5140)\n```diff\n-    FILE* filestr = mockable_fopen_function(GetDataDir() / ""mempool.dat"", ""rb"");\n+    FILE* filestr{mockable_fopen_function(GetDataDir() / ""mempool.dat"", ""rb"")};\n```\n ",https://github.com/bitcoin/bitcoin/pull/19259#discussion_r592617191,592617191,src/validation.cpp
jonatack,2021-03-11 18:40:46,"```suggestion\n * standard library functions that set errno, or in other contexts where the value of errno\n```",https://github.com/bitcoin/bitcoin/pull/19259#discussion_r592618016,592618016,src/test/fuzz/util.h
MarcoFalke,2021-03-12 15:28:08,Could avoid this namespace by making `fuzzed_fopen` a lambda with smallest scope possible?,https://github.com/bitcoin/bitcoin/pull/19259#discussion_r593257369,593257369,src/test/fuzz/validation_load_mempool.cpp
MarcoFalke,2021-03-12 15:32:09,would be nice to not introduce a new global,https://github.com/bitcoin/bitcoin/pull/19259#discussion_r593260400,593260400,src/test/fuzz/validation_load_mempool.cpp
practicalswift,2021-03-15 15:49:29,Good point! Now addressed.,https://github.com/bitcoin/bitcoin/pull/19259#discussion_r594456500,594456500,src/test/fuzz/validation_load_mempool.cpp
practicalswift,2021-03-15 15:49:33,Good point! Now addressed.,https://github.com/bitcoin/bitcoin/pull/19259#discussion_r594456561,594456561,src/test/fuzz/validation_load_mempool.cpp
MarcoFalke,2021-03-15 17:56:45,"Not addressed?\n\nnvm. @dongcarl will fix this :grimacing: ",https://github.com/bitcoin/bitcoin/pull/19259#discussion_r594561456,594561456,src/test/fuzz/validation_load_mempool.cpp
practicalswift,2021-03-15 18:46:05,I thought you meant the introduction of `fuzzed_fopen`? What did you mean? :),https://github.com/bitcoin/bitcoin/pull/19259#discussion_r594597374,594597374,src/test/fuzz/validation_load_mempool.cpp
MarcoFalke,2021-03-15 19:25:48,"Oh, the ::ChainstateActive()",https://github.com/bitcoin/bitcoin/pull/19259#discussion_r594622449,594622449,src/test/fuzz/validation_load_mempool.cpp
