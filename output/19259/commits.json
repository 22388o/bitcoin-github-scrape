[
  {
    "sha": "af322c7494d6bc4b94890c85d16623b082c4fe24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjMyMmM3NDk0ZDZiYzRiOTQ4OTBjODVkMTY2MjNiMDgyYzRmZTI0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-02T18:58:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-11T22:34:39Z"
      },
      "message": "tests: Set errno in FuzzedFileProvider. Implement seek(..., ..., SEEK_END).",
      "tree": {
        "sha": "e1e817f14423bb26f4df090663dad44b0cda71a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1e817f14423bb26f4df090663dad44b0cda71a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af322c7494d6bc4b94890c85d16623b082c4fe24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af322c7494d6bc4b94890c85d16623b082c4fe24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af322c7494d6bc4b94890c85d16623b082c4fe24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af322c7494d6bc4b94890c85d16623b082c4fe24/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b972913c330a46811e26221490d3ee042529dfb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b972913c330a46811e26221490d3ee042529dfb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b972913c330a46811e26221490d3ee042529dfb9"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cdddad82b3bc18ce3372a2900c8e7bd7b0e4a315",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af322c7494d6bc4b94890c85d16623b082c4fe24/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af322c7494d6bc4b94890c85d16623b082c4fe24/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=af322c7494d6bc4b94890c85d16623b082c4fe24",
        "patch": "@@ -259,6 +259,16 @@ void SetFuzzedErrNo(FuzzedDataProvider& fuzzed_data_provider, const std::array<T\n     errno = fuzzed_data_provider.PickValueInArray(errnos);\n }\n \n+/*\n+ * Sets a fuzzed errno in the range [0, 133 (EHWPOISON)]. Can be used from functions emulating\n+ * standard library functions that set errno, or in other contexts where the value of errno\n+ * might be relevant for the execution path that will be taken.\n+ */\n+inline void SetFuzzedErrNo(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    errno = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 133);\n+}\n+\n /**\n  * Returns a byte vector of specified size regardless of the number of remaining bytes available\n  * from the fuzzer. Pads with zero value bytes if needed to achieve the specified size.\n@@ -345,6 +355,7 @@ class FuzzedFileProvider\n \n     FILE* open()\n     {\n+        SetFuzzedErrNo(m_fuzzed_data_provider);\n         if (m_fuzzed_data_provider.ConsumeBool()) {\n             return nullptr;\n         }\n@@ -386,6 +397,7 @@ class FuzzedFileProvider\n     static ssize_t read(void* cookie, char* buf, size_t size)\n     {\n         FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n         if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n             return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n         }\n@@ -404,6 +416,7 @@ class FuzzedFileProvider\n     static ssize_t write(void* cookie, const char* buf, size_t size)\n     {\n         FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n         const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n         if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n             return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n@@ -414,8 +427,9 @@ class FuzzedFileProvider\n \n     static int seek(void* cookie, int64_t* offset, int whence)\n     {\n-        assert(whence == SEEK_SET || whence == SEEK_CUR); // SEEK_END not implemented yet.\n+        assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n         FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n         int64_t new_offset = 0;\n         if (whence == SEEK_SET) {\n             new_offset = *offset;\n@@ -424,6 +438,12 @@ class FuzzedFileProvider\n                 return -1;\n             }\n             new_offset = fuzzed_file->m_offset + *offset;\n+        } else if (whence == SEEK_END) {\n+            const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n+            if (AdditionOverflow(n, *offset)) {\n+                return -1;\n+            }\n+            new_offset = n + *offset;\n         }\n         if (new_offset < 0) {\n             return -1;\n@@ -436,6 +456,7 @@ class FuzzedFileProvider\n     static int close(void* cookie)\n     {\n         FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n         return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n     }\n };"
      }
    ]
  },
  {
    "sha": "91af6b97c9197f8ac9766a8559dd50bbc443ad38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWFmNmI5N2M5MTk3ZjhhYzk3NjZhODU1OWRkNTBiYmM0NDNhZDM4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-12T14:17:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-11T22:34:39Z"
      },
      "message": "validation: Make DumpMempool(...) and LoadMempool(...) easier to test/fuzz/mock",
      "tree": {
        "sha": "f25e4032ec996d03bd1b4ac46969dccf8717b3a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f25e4032ec996d03bd1b4ac46969dccf8717b3a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91af6b97c9197f8ac9766a8559dd50bbc443ad38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91af6b97c9197f8ac9766a8559dd50bbc443ad38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91af6b97c9197f8ac9766a8559dd50bbc443ad38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91af6b97c9197f8ac9766a8559dd50bbc443ad38/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af322c7494d6bc4b94890c85d16623b082c4fe24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af322c7494d6bc4b94890c85d16623b082c4fe24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af322c7494d6bc4b94890c85d16623b082c4fe24"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5ac7fc54834b2798c72a18427eab6f01858c4083",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91af6b97c9197f8ac9766a8559dd50bbc443ad38/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91af6b97c9197f8ac9766a8559dd50bbc443ad38/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=91af6b97c9197f8ac9766a8559dd50bbc443ad38",
        "patch": "@@ -5010,11 +5010,11 @@ CBlockFileInfo* GetBlockFileInfo(size_t n)\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)\n+bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n+    FILE* filestr{mockable_fopen_function(GetDataDir() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -5095,7 +5095,7 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)\n     return true;\n }\n \n-bool DumpMempool(const CTxMemPool& pool)\n+bool DumpMempool(const CTxMemPool& pool, FopenFn mockable_fopen_function, bool skip_file_commit)\n {\n     int64_t start = GetTimeMicros();\n \n@@ -5118,7 +5118,7 @@ bool DumpMempool(const CTxMemPool& pool)\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat.new\", \"wb\");\n+        FILE* filestr{mockable_fopen_function(GetDataDir() / \"mempool.dat.new\", \"wb\")};\n         if (!filestr) {\n             return false;\n         }\n@@ -5141,7 +5141,7 @@ bool DumpMempool(const CTxMemPool& pool)\n         LogPrintf(\"Writing %d unbroadcast transactions to disk.\\n\", unbroadcast_txids.size());\n         file << unbroadcast_txids;\n \n-        if (!FileCommit(file.Get()))\n+        if (!skip_file_commit && !FileCommit(file.Get()))\n             throw std::runtime_error(\"FileCommit failed\");\n         file.fclose();\n         if (!RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\")) {"
      },
      {
        "sha": "ea783ddcd1549bdff3edecab978b45303becf1d5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91af6b97c9197f8ac9766a8559dd50bbc443ad38/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91af6b97c9197f8ac9766a8559dd50bbc443ad38/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=91af6b97c9197f8ac9766a8559dd50bbc443ad38",
        "patch": "@@ -1013,11 +1013,13 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n /** Get block file info entry for one block file */\n CBlockFileInfo* GetBlockFileInfo(size_t n);\n \n+using FopenFn = std::function<FILE*(const fs::path&, const char*)>;\n+\n /** Dump the mempool to disk. */\n-bool DumpMempool(const CTxMemPool& pool);\n+bool DumpMempool(const CTxMemPool& pool, FopenFn mockable_fopen_function = fsbridge::fopen, bool skip_file_commit = false);\n \n /** Load the mempool from disk. */\n-bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate);\n+bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function = fsbridge::fopen);\n \n //! Check whether the block associated with this index entry is pruned or not.\n inline bool IsBlockPruned(const CBlockIndex* pblockindex)"
      }
    ]
  },
  {
    "sha": "68afd3eeec27a270765ad26cd62d87cd0935e99f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGFmZDNlZWVjMjdhMjcwNzY1YWQyNmNkNjJkODdjZDA5MzVlOTlm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-12T14:17:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-15T15:42:15Z"
      },
      "message": "tests: Add fuzzing harness for LoadMempool(...) and DumpMempool(...)",
      "tree": {
        "sha": "c4003725477f545b85adb2308e7babe328ad3208",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4003725477f545b85adb2308e7babe328ad3208"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68afd3eeec27a270765ad26cd62d87cd0935e99f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68afd3eeec27a270765ad26cd62d87cd0935e99f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68afd3eeec27a270765ad26cd62d87cd0935e99f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68afd3eeec27a270765ad26cd62d87cd0935e99f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91af6b97c9197f8ac9766a8559dd50bbc443ad38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91af6b97c9197f8ac9766a8559dd50bbc443ad38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91af6b97c9197f8ac9766a8559dd50bbc443ad38"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 36,
      "deletions": 1
    },
    "files": [
      {
        "sha": "13eb54fd92d731ce7aaab99fcdbca27da27dc390",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68afd3eeec27a270765ad26cd62d87cd0935e99f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68afd3eeec27a270765ad26cd62d87cd0935e99f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=68afd3eeec27a270765ad26cd62d87cd0935e99f",
        "patch": "@@ -296,7 +296,8 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/transaction.cpp \\\n  test/fuzz/tx_in.cpp \\\n  test/fuzz/tx_out.cpp \\\n- test/fuzz/txrequest.cpp\n+ test/fuzz/txrequest.cpp \\\n+ test/fuzz/validation_load_mempool.cpp\n endif # ENABLE_FUZZ_BINARY\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "e1a21b6c5397afa5d2ec66d040b2aae836d57bdc",
        "filename": "src/test/fuzz/validation_load_mempool.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68afd3eeec27a270765ad26cd62d87cd0935e99f/src/test/fuzz/validation_load_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68afd3eeec27a270765ad26cd62d87cd0935e99f/src/test/fuzz/validation_load_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/validation_load_mempool.cpp?ref=68afd3eeec27a270765ad26cd62d87cd0935e99f",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparamsbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <txmempool.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize_validation_load_mempool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+}\n+\n+FUZZ_TARGET_INIT(validation_load_mempool, initialize_validation_load_mempool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    FuzzedFileProvider fuzzed_file_provider = ConsumeFile(fuzzed_data_provider);\n+\n+    CTxMemPool pool{};\n+    auto fuzzed_fopen = [&](const fs::path&, const char*) {\n+        return fuzzed_file_provider.open();\n+    };\n+    (void)LoadMempool(pool, ::ChainstateActive(), fuzzed_fopen);\n+    (void)DumpMempool(pool, fuzzed_fopen, true);\n+}"
      }
    ]
  }
]