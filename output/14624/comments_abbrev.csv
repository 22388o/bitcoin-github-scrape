DrahtBot,2018-10-31T23:38:08Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14626](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14626.html) (Select orphan transaction uniformly for evi",https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-434883663,434883663,
practicalswift,2018-11-01T10:00:18Z,"Concept ACK\n\n@sipa Regarding `randbytes` – very nice find! How was that issue found?",https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-434991563,434991563,
practicalswift,2018-11-01T10:12:36Z,"> This also works around a bug in libstdc++ std::shuffle that may cause type::operator=(type&&) to be invoked on itself, which the library's debug mode detects and panics on.\n\nHow did you trigger this? I've built with `-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC` in the past and haven't encountered this. I also tried now and I was unable to reproduce.\n\nAssuming a build with `-D_GLIBCXX_DEBU",https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-434994801,434994801,
MarcoFalke,2018-11-01T14:00:15Z,"Travis failure:\n\n```\n/bin/bash: line 1: 27706 Aborted                 (core dumped) test/test_bitcoin -l test_suite -t ""`cat wallet/test/coinselector_tests.cpp | grep -E ""(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()"" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1`"" > wallet/test/coinselector_tests.cpp.log 2>&1\nRunning 4 test cases...\nTest cases order is shuffled using se",https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-435049325,435049325,
sipa,2018-11-01T17:18:20Z,"@practicalswift \n\n> @sipa Regarding randbytes – very nice find! How was that issue found?\n\nIn a follow-up change I was working on, which replaced more use sites of `GetRand*` functions with `FastRandomContext`s. One unit test failed which tested that the leveldb obfuscation key was not all zeroes...\n\n> How did you trigger this? I've built with `-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTI",https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-435115618,435115618,
gmaxwell,2018-11-10T21:39:00Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-437623342,437623342,
gmaxwell,2018-11-21T19:29:54Z,utACK,https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-440783727,440783727,
sipa,2018-11-30T18:27:20Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-443294972,443294972,
sipa,2018-12-12T22:32:32Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-446769422,446769422,
laanwj,2018-12-13T12:58:16Z,"all straightforward changes\nutACK e414486d56b9f06af7aeb07ce13e3c3780c2b69b\n",https://github.com/bitcoin/bitcoin/pull/14624#issuecomment-446959499,446959499,
practicalswift,2018-11-01T09:58:56Z,"Should the `randbytes`, `rand256` and `rand256` tests each get their own pair of `FastRandomContext`:s to properly test for non-determinism? That way the ordering of the test won't matter.",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r229990788,229990788,src/test/random_tests.cpp
sipa,2018-11-01T17:18:59Z,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r230123879,230123879,src/test/random_tests.cpp
practicalswift,2018-11-02T07:17:31Z,"Mark `noexcept`? Rationale: [""A throwing move violates most people's reasonably assumptions. A non-throwing move will be used more efficiently by standard-library and language facilities.""](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c66-make-move-operations-noexcept)",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r230286671,230286671,src/random.cpp
practicalswift,2018-11-02T07:18:42Z,"Use `nMax` to match declaration, or change declaration to `max`.\n\nNit: Add space before `{` :-)",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r230286853,230286853,src/addrman.cpp
sipa,2018-11-09T20:47:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/14624#discussion_r232388699,232388699,src/random.cpp
sipa,2018-11-10T00:15:12Z,"Done, done.",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r232428697,232428697,src/addrman.cpp
pstratem,2018-11-14T16:49:03Z,Is it really worth having the wrapper function if it's not a test harness?,https://github.com/bitcoin/bitcoin/pull/14624#discussion_r233529573,233529573,src/addrman.h
pstratem,2018-11-14T18:01:09Z,"So this is copying, but setting the original context to reseed?",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r233556290,233556290,src/random.cpp
pstratem,2018-11-14T19:00:41Z,but why the using?,https://github.com/bitcoin/bitcoin/pull/14624#discussion_r233578141,233578141,src/random.h
sipa,2018-11-14T20:22:39Z,Good point. Got rid of it entirely.,https://github.com/bitcoin/bitcoin/pull/14624#discussion_r233605939,233605939,src/addrman.h
sipa,2018-11-14T20:24:17Z,"Indeed, as documented in the .h file (the state of a moved-from object must be valid but may be unspecified, as it's not supposed to be used again; choosing to set it to reseed is both fast and safe).",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r233606539,233606539,src/random.cpp
sipa,2018-11-14T20:25:06Z,"That's the suggested idiom, as it brings `std::swap` into scope, but also has access to possible user-defined `swap` implementations outside of `std`.",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r233606869,233606869,src/random.h
MarcoFalke,2018-11-16T19:48:16Z,"nit: Might as well rename it to `m_insecure_rand`, since it is only used in two places previously.",https://github.com/bitcoin/bitcoin/pull/14624#discussion_r234327744,234327744,src/addrman.h
