[
  {
    "sha": "e85e19be06c59529bfda100729e8ef3148349952",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODVlMTliZTA2YzU5NTI5YmZkYTEwMDcyOWU4ZWYzMTQ4MzQ5OTUy",
    "commit": {
      "author": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-21T15:50:49Z"
      },
      "committer": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-25T10:07:21Z"
      },
      "message": "Changed Get64(.) to GetLow64()\n\nThe function Get64(.) has a bug in case the width is not divisible by 64.\nSince it is only ever used as Get64(0) this simply changes it to this\nspecial case. Additionally, an assert is added, and a cast to prevent\na compiler error.",
      "tree": {
        "sha": "c1be2bb3178a5e9a9eadd61cded2067094f83271",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1be2bb3178a5e9a9eadd61cded2067094f83271"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e85e19be06c59529bfda100729e8ef3148349952",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e85e19be06c59529bfda100729e8ef3148349952",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e85e19be06c59529bfda100729e8ef3148349952",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e85e19be06c59529bfda100729e8ef3148349952/comments",
    "author": {
      "login": "tholenst",
      "id": 4568264,
      "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tholenst",
      "html_url": "https://github.com/tholenst",
      "followers_url": "https://api.github.com/users/tholenst/followers",
      "following_url": "https://api.github.com/users/tholenst/following{/other_user}",
      "gists_url": "https://api.github.com/users/tholenst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
      "organizations_url": "https://api.github.com/users/tholenst/orgs",
      "repos_url": "https://api.github.com/users/tholenst/repos",
      "events_url": "https://api.github.com/users/tholenst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tholenst/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tholenst",
      "id": 4568264,
      "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tholenst",
      "html_url": "https://github.com/tholenst",
      "followers_url": "https://api.github.com/users/tholenst/followers",
      "following_url": "https://api.github.com/users/tholenst/following{/other_user}",
      "gists_url": "https://api.github.com/users/tholenst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
      "organizations_url": "https://api.github.com/users/tholenst/orgs",
      "repos_url": "https://api.github.com/users/tholenst/repos",
      "events_url": "https://api.github.com/users/tholenst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tholenst/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e7792003b5c520fcc81d223f07471d690594081",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e7792003b5c520fcc81d223f07471d690594081",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e7792003b5c520fcc81d223f07471d690594081"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "46b4a94938055dcb36b91af22a181d16b5f5adce",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e85e19be06c59529bfda100729e8ef3148349952/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e85e19be06c59529bfda100729e8ef3148349952/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=e85e19be06c59529bfda100729e8ef3148349952",
        "patch": "@@ -14,12 +14,12 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n     ss1 << nKey << vchKey;\n-    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetLow64();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     ss2 << nKey << vchGroupKey << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP);\n-    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetLow64();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n@@ -29,11 +29,11 @@ int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAd\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n     ss1 << nKey << vchGroupKey << vchSourceGroupKey;\n-    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetLow64();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     ss2 << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP);\n-    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetLow64();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n "
      },
      {
        "sha": "c19d82ceb54ae53d7f5b43bf5aff4d238443c499",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e85e19be06c59529bfda100729e8ef3148349952/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e85e19be06c59529bfda100729e8ef3148349952/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=e85e19be06c59529bfda100729e8ef3148349952",
        "patch": "@@ -203,7 +203,7 @@ class base_uint\n     {\n         // prefix operator\n         int i = 0;\n-        while (--pn[i] == -1 && i < WIDTH-1)\n+        while (--pn[i] == (uint32_t)-1 && i < WIDTH-1)\n             i++;\n         return *this;\n     }\n@@ -370,9 +370,10 @@ class base_uint\n         return sizeof(pn);\n     }\n \n-    uint64_t Get64(int n=0) const\n+    uint64_t GetLow64() const\n     {\n-        return pn[2*n] | (uint64_t)pn[2*n+1] << 32;\n+        assert(WIDTH >= 2);\n+        return pn[0] | (uint64_t)pn[1] << 32;\n     }\n \n //    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const"
      }
    ]
  },
  {
    "sha": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWE2YjIwZTI5ZjM5MjZhMTZkNGRhNjk2MmZmMDBiNzQ2MjNmYzZi",
    "commit": {
      "author": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-21T15:54:43Z"
      },
      "committer": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-25T10:07:21Z"
      },
      "message": "Unittests for uint256.h\n\nUnit tests for uint256.h. The file uint160_tests.cpp is no longer\nneeded. The ad-hoc tests which were in uint256.h are also no longer\nneeded. The new tests achieve 100% coverage.",
      "tree": {
        "sha": "e2a653501b515319d63b1c4ddddd61498204d17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2a653501b515319d63b1c4ddddd61498204d17c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa6b20e29f3926a16d4da6962ff00b74623fc6b/comments",
    "author": {
      "login": "tholenst",
      "id": 4568264,
      "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tholenst",
      "html_url": "https://github.com/tholenst",
      "followers_url": "https://api.github.com/users/tholenst/followers",
      "following_url": "https://api.github.com/users/tholenst/following{/other_user}",
      "gists_url": "https://api.github.com/users/tholenst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
      "organizations_url": "https://api.github.com/users/tholenst/orgs",
      "repos_url": "https://api.github.com/users/tholenst/repos",
      "events_url": "https://api.github.com/users/tholenst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tholenst/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tholenst",
      "id": 4568264,
      "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tholenst",
      "html_url": "https://github.com/tholenst",
      "followers_url": "https://api.github.com/users/tholenst/followers",
      "following_url": "https://api.github.com/users/tholenst/following{/other_user}",
      "gists_url": "https://api.github.com/users/tholenst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
      "organizations_url": "https://api.github.com/users/tholenst/orgs",
      "repos_url": "https://api.github.com/users/tholenst/repos",
      "events_url": "https://api.github.com/users/tholenst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tholenst/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e85e19be06c59529bfda100729e8ef3148349952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e85e19be06c59529bfda100729e8ef3148349952",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e85e19be06c59529bfda100729e8ef3148349952"
      }
    ],
    "stats": {
      "total": 806,
      "additions": 620,
      "deletions": 186
    },
    "files": [
      {
        "sha": "384616e89755c59eddaebff1d82eca4bf5dea5ea",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa6b20e29f3926a16d4da6962ff00b74623fc6b/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa6b20e29f3926a16d4da6962ff00b74623fc6b/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=daa6b20e29f3926a16d4da6962ff00b74623fc6b",
        "patch": "@@ -34,7 +34,7 @@ test_bitcoin_SOURCES = alert_tests.cpp \\\n   key_tests.cpp miner_tests.cpp mruset_tests.cpp multisig_tests.cpp \\\n   netbase_tests.cpp pmt_tests.cpp rpc_tests.cpp script_P2SH_tests.cpp \\\n   script_tests.cpp serialize_tests.cpp sigopcount_tests.cpp test_bitcoin.cpp \\\n-  transaction_tests.cpp uint160_tests.cpp uint256_tests.cpp util_tests.cpp \\\n+  transaction_tests.cpp uint256_tests.cpp util_tests.cpp \\\n   sighash_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n \n if ENABLE_WALLET"
      },
      {
        "sha": "87418fabec44b41d78334e66182b4794c8b38547",
        "filename": "src/test/uint160_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e85e19be06c59529bfda100729e8ef3148349952/src/test/uint160_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e85e19be06c59529bfda100729e8ef3148349952/src/test/uint160_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint160_tests.cpp?ref=e85e19be06c59529bfda100729e8ef3148349952",
        "patch": "@@ -1,20 +0,0 @@\n-#include \"uint256.h\"\n-\n-#include <stdint.h>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_AUTO_TEST_SUITE(uint160_tests)\n-\n-BOOST_AUTO_TEST_CASE(uint160_equality)\n-{\n-    uint160 num1 = 10;\n-    uint160 num2 = 11;\n-    BOOST_CHECK(num1+1 == num2);\n-\n-    uint64_t num3 = 10;\n-    BOOST_CHECK(num1 == num3);\n-    BOOST_CHECK(num1+num2 == num3+num2);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "368484fdff525859d14ed8441c1c13e41828ce3d",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 619,
        "deletions": 15,
        "changes": 634,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa6b20e29f3926a16d4da6962ff00b74623fc6b/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa6b20e29f3926a16d4da6962ff00b74623fc6b/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=daa6b20e29f3926a16d4da6962ff00b74623fc6b",
        "patch": "@@ -1,29 +1,633 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n+ \n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n+const double R1Ldouble = 0.4887374590559308955; // R1L equals roughly R1Ldouble * 2^256\n+const double R1Sdouble = 0.7096329412477836074; \n+const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));\n+const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const char R1LplusR2L[] = \"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\";\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n+                             \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+        Stream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n \n-BOOST_AUTO_TEST_CASE(uint256_equality)\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n {\n-    uint256 num1 = 10;\n-    uint256 num2 = 11;\n-    BOOST_CHECK(num1+1 == num2);\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor uint256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n+    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n+    \n+    uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n+    for (unsigned int i = 0; i < 256; ++i) \n+    {\n+        BOOST_CHECK(ZeroL != (OneL << i)); \n+        BOOST_CHECK((OneL << i) != ZeroL); \n+        BOOST_CHECK(R1L != (R1L ^ (OneL << i)));\n+        BOOST_CHECK(((uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroL == (OneL << 256)); \n+\n+    for (unsigned int i = 0; i < 160; ++i) \n+    {\n+        BOOST_CHECK(ZeroS != (OneS << i)); \n+        BOOST_CHECK((OneS << i) != ZeroS); \n+        BOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n+        BOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroS == (OneS << 256)); \n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(uint256(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(uint256(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(uint256(R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(uint256(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == uint256(R1ArrayHex));\n+    BOOST_CHECK(uint256(R1L) == R1L);\n+    BOOST_CHECK((uint256(R1L^R2L)^R2L) == R1L);\n+    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n+    BOOST_CHECK(uint160(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == uint160(R1ArrayHex));\n+\n+    BOOST_CHECK(uint160(R1S) == R1S);\n+    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n+    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(uint160(OneS) == OneS);\n+\n+    // uint64_t constructor\n+    BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(R1LLow64));\n+    BOOST_CHECK(ZeroL == uint256(0));\n+    BOOST_CHECK(OneL == uint256(1));\n+    BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(R1LLow64));\n+    BOOST_CHECK(ZeroS == uint160(0));\n+    BOOST_CHECK(OneS == uint160(1));\n+    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n+\n+    // Assignment (from base_uint)\n+    uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n+    tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n+    tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n+    tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n+    tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n+    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n+    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n+    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n+    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n+    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n \n-    uint64_t num3 = 10;\n-    BOOST_CHECK(num1 == num3);\n-    BOOST_CHECK(num1+num2 == num3+num2);\n+    // Wrong length must give 0\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(OneArray,OneArray+31)) == 0);\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(OneArray,OneArray+20)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(OneArray,OneArray+32)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(OneArray,OneArray+19)) == 0);\n }\n \n-BOOST_AUTO_TEST_CASE(uint256_hex)\n+void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n {\n-    std::string hexStr = \"d35583ed493a5eee756931353144f558e6a9ab3ad6024a63ced7f10daf7faad9\";\n-    uint256 num1;\n-    num1.SetHex(hexStr);\n-    BOOST_CHECK(num1.GetHex() == hexStr);\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+        unsigned int F = (T+bitsToShift/8);\n+        if (F < arrayLength) \n+            to[T]  = from[F] >> (bitsToShift%8);\n+        else\n+            to[T] = 0;\n+        if (F + 1 < arrayLength) \n+            to[T] |= from[(F+1)] << (8-bitsToShift%8);\n+    }\n+}\n+\n+void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+{\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+        if (T >= bitsToShift/8) \n+        {\n+            unsigned int F = T-bitsToShift/8;\n+            to[T]  = from[F] << (bitsToShift%8);\n+            if (T >= bitsToShift/8+1)\n+                to[T] |= from[F-1] >> (8-bitsToShift%8);\n+        }\n+        else {\n+            to[T] = 0;\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n+    unsigned char TmpArray[32];\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i)\n+    {\n+        shiftArrayLeft(TmpArray, OneArray, 32, i);\n+        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (OneL << i));\n+        TmpL = OneL; TmpL <<= i;\n+        BOOST_CHECK(TmpL == (OneL << i));\n+        BOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n+        TmpL = HalfL; TmpL >>= (255-i);\n+        BOOST_CHECK(TmpL == (OneL << i));\n+                    \n+        shiftArrayLeft(TmpArray, R1Array, 32, i);\n+        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L << i));\n+        TmpL = R1L; TmpL <<= i;\n+        BOOST_CHECK(TmpL == (R1L << i));\n+\n+        shiftArrayRight(TmpArray, R1Array, 32, i);\n+        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (R1L >> i)); \n+        TmpL = R1L; TmpL >>= i;\n+        BOOST_CHECK(TmpL == (R1L >> i));\n+\n+        shiftArrayLeft(TmpArray, MaxArray, 32, i);\n+        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL << i));\n+        TmpL = MaxL; TmpL <<= i;\n+        BOOST_CHECK(TmpL == (MaxL << i));\n+\n+        shiftArrayRight(TmpArray, MaxArray, 32, i);\n+        BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (MaxL >> i));\n+        TmpL = MaxL; TmpL >>= i;\n+        BOOST_CHECK(TmpL == (MaxL >> i));\n+    }\n+    uint256 c1L = uint256(0x0123456789abcdefULL);\n+    uint256 c2L = c1L << 128;\n+    for (unsigned int i = 0; i < 128; ++i) {\n+        BOOST_CHECK((c1L << i) == (c2L >> (128-i)));\n+    }\n+    for (unsigned int i = 128; i < 256; ++i) {\n+        BOOST_CHECK((c1L << i) == (c2L << (i-128)));\n+    }\n+\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i)\n+    {\n+        shiftArrayLeft(TmpArray, OneArray, 20, i);\n+        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (OneS << i));\n+        TmpS = OneS; TmpS <<= i;\n+        BOOST_CHECK(TmpS == (OneS << i));\n+        BOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n+        TmpS = HalfS; TmpS >>= (159-i);\n+        BOOST_CHECK(TmpS == (OneS << i));\n+                    \n+        shiftArrayLeft(TmpArray, R1Array, 20, i);\n+        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S << i));\n+        TmpS = R1S; TmpS <<= i;\n+        BOOST_CHECK(TmpS == (R1S << i));\n+\n+        shiftArrayRight(TmpArray, R1Array, 20, i);\n+        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S >> i)); \n+        TmpS = R1S; TmpS >>= i;\n+        BOOST_CHECK(TmpS == (R1S >> i));\n+\n+        shiftArrayLeft(TmpArray, MaxArray, 20, i);\n+        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS << i));\n+        TmpS = MaxS; TmpS <<= i;\n+        BOOST_CHECK(TmpS == (MaxS << i));\n+\n+        shiftArrayRight(TmpArray, MaxArray, 20, i);\n+        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS >> i));\n+        TmpS = MaxS; TmpS >>= i;\n+        BOOST_CHECK(TmpS == (MaxS >> i));\n+    }\n+    uint160 c1S = uint160(0x0123456789abcdefULL);\n+    uint160 c2S = c1S << 80;\n+    for (unsigned int i = 0; i < 80; ++i) {\n+        BOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n+    }\n+    for (unsigned int i = 80; i < 160; ++i) {\n+        BOOST_CHECK((c1S << i) == (c2S << (i-80)));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n+{\n+    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n+    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    for (unsigned int i = 0; i < 256; ++i) \n+        BOOST_CHECK(!(!(OneL<<i)));\n+    for (unsigned int i = 0; i < 160; ++i) \n+        BOOST_CHECK(!(!(OneS<<i)));\n+    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n+    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n+    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+\n+    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+\n+    unsigned char TmpArray[32];\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n+    BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (~R1S));\n+\n+    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-R1L == (~R1L)+1);\n+    BOOST_CHECK(-R1S == (~R1S)+1);\n+    for (unsigned int i = 0; i < 256; ++i) \n+        BOOST_CHECK(-(OneL<<i) == (MaxL << i));\n+    for (unsigned int i = 0; i < 160; ++i) \n+        BOOST_CHECK(-(OneS<<i) == (MaxS << i));\n+}\n+\n+\n+// Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n+// element of Aarray and Barray, and then converting the result into a uint256.\n+#define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L)); \\\n+    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (_A_##S _OP_ _B_##S));\n+\n+#define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_)                           \\\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n+    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+\n+BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n+{\n+    unsigned char TmpArray[32];\n+    \n+    CHECKBITWISEOPERATOR(R1,R2,|)\n+    CHECKBITWISEOPERATOR(R1,R2,^)\n+    CHECKBITWISEOPERATOR(R1,R2,&)\n+    CHECKBITWISEOPERATOR(R1,Zero,|)\n+    CHECKBITWISEOPERATOR(R1,Zero,^)\n+    CHECKBITWISEOPERATOR(R1,Zero,&)\n+    CHECKBITWISEOPERATOR(R1,Max,|)\n+    CHECKBITWISEOPERATOR(R1,Max,^)\n+    CHECKBITWISEOPERATOR(R1,Max,&)\n+    CHECKBITWISEOPERATOR(Zero,R1,|)\n+    CHECKBITWISEOPERATOR(Zero,R1,^)\n+    CHECKBITWISEOPERATOR(Zero,R1,&)\n+    CHECKBITWISEOPERATOR(Max,R1,|)\n+    CHECKBITWISEOPERATOR(Max,R1,^)\n+    CHECKBITWISEOPERATOR(Max,R1,&)\n+\n+    uint256 TmpL;\n+    uint160 TmpS;\n+    CHECKASSIGNMENTOPERATOR(R1,R2,|)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,^)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,&)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,&)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,&)\n+\n+    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n+    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n+    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n+    TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n+    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i) {\n+        TmpL= OneL<< i;\n+        BOOST_CHECK( TmpL >= ZeroL && TmpL > ZeroL && ZeroL < TmpL && ZeroL <= TmpL);\n+        BOOST_CHECK( TmpL >= 0 && TmpL > 0 && 0 < TmpL && 0 <= TmpL);\n+        TmpL |= R1L;\n+        BOOST_CHECK( TmpL >= R1L ); BOOST_CHECK( (TmpL == R1L) != (TmpL > R1L)); BOOST_CHECK( (TmpL == R1L) || !( TmpL <= R1L));\n+        BOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n+        BOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n+    }\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i) {\n+        TmpS= OneS<< i;\n+        BOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n+        BOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n+        TmpS |= R1S;\n+        BOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n+        BOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n+        BOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( plusMinus ) \n+{\n+    uint256 TmpL = 0;\n+    BOOST_CHECK(R1L+R2L == uint256(R1LplusR2L));\n+    TmpL += R1L;\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL += R2L;\n+    BOOST_CHECK(TmpL == R1L + R2L);\n+    BOOST_CHECK(OneL+MaxL == ZeroL);\n+    BOOST_CHECK(MaxL+OneL == ZeroL);\n+    for (unsigned int i = 1; i < 256; ++i) {\n+        BOOST_CHECK( (MaxL >> i) + OneL == (HalfL >> (i-1)) );\n+        BOOST_CHECK( OneL + (MaxL >> i) == (HalfL >> (i-1)) );\n+        TmpL = (MaxL>>i); TmpL += OneL;\n+        BOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+        TmpL = (MaxL>>i); TmpL += 1;\n+        BOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+        TmpL = (MaxL>>i); \n+        BOOST_CHECK( TmpL++ == (MaxL>>i) );\n+        BOOST_CHECK( TmpL == (HalfL >> (i-1)));\n+    }\n+    BOOST_CHECK(uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint256(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n+    TmpL = uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpL == uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    TmpL -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpL == 0xbedc77e27940a7ULL);\n+    TmpL = R1L;\n+    BOOST_CHECK(++TmpL == R1L+1);\n+\n+    BOOST_CHECK(R1L -(-R2L) == R1L+R2L);\n+    BOOST_CHECK(R1L -(-OneL) == R1L+OneL);\n+    BOOST_CHECK(R1L - OneL == R1L+(-OneL));\n+    for (unsigned int i = 1; i < 256; ++i) {\n+        BOOST_CHECK((MaxL>>i) - (-OneL)  == (HalfL >> (i-1)));\n+        BOOST_CHECK((HalfL >> (i-1)) - OneL == (MaxL>>i));\n+        TmpL = (HalfL >> (i-1));\n+        BOOST_CHECK(TmpL-- == (HalfL >> (i-1)));\n+        BOOST_CHECK(TmpL == (MaxL >> i));\n+        TmpL = (HalfL >> (i-1));\n+        BOOST_CHECK(--TmpL == (MaxL >> i));\n+    }\n+    TmpL = R1L;\n+    BOOST_CHECK(--TmpL == R1L-1);\n+\n+    // 160-bit; copy-pasted\n+    uint160 TmpS = 0;\n+    BOOST_CHECK(R1S+R2S == uint160(R1LplusR2L));\n+    TmpS += R1S;\n+    BOOST_CHECK(TmpS == R1S);\n+    TmpS += R2S;\n+    BOOST_CHECK(TmpS == R1S + R2S);\n+    BOOST_CHECK(OneS+MaxS == ZeroS);\n+    BOOST_CHECK(MaxS+OneS == ZeroS);\n+    for (unsigned int i = 1; i < 160; ++i) {\n+        BOOST_CHECK( (MaxS >> i) + OneS == (HalfS >> (i-1)) );\n+        BOOST_CHECK( OneS + (MaxS >> i) == (HalfS >> (i-1)) );\n+        TmpS = (MaxS>>i); TmpS += OneS;\n+        BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n+        TmpS = (MaxS>>i); TmpS += 1;\n+        BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n+        TmpS = (MaxS>>i); \n+        BOOST_CHECK( TmpS++ == (MaxS>>i) );\n+        BOOST_CHECK( TmpS == (HalfS >> (i-1)));\n+    }\n+    BOOST_CHECK(uint160(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint160(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n+    TmpS = uint160(0xbedc77e27940a7ULL); TmpS += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpS == uint160(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    TmpS -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpS == 0xbedc77e27940a7ULL);\n+    TmpS = R1S;\n+    BOOST_CHECK(++TmpS == R1S+1);\n+\n+    BOOST_CHECK(R1S -(-R2S) == R1S+R2S);\n+    BOOST_CHECK(R1S -(-OneS) == R1S+OneS);\n+    BOOST_CHECK(R1S - OneS == R1S+(-OneS));\n+    for (unsigned int i = 1; i < 160; ++i) {\n+        BOOST_CHECK((MaxS>>i) - (-OneS)  == (HalfS >> (i-1)));\n+        BOOST_CHECK((HalfS >> (i-1)) - OneS == (MaxS>>i));\n+        TmpS = (HalfS >> (i-1));\n+        BOOST_CHECK(TmpS-- == (HalfS >> (i-1)));\n+        BOOST_CHECK(TmpS == (MaxS >> i));\n+        TmpS = (HalfS >> (i-1));\n+        BOOST_CHECK(--TmpS == (MaxS >> i));\n+    }\n+    TmpS = R1S;\n+    BOOST_CHECK(--TmpS == R1S-1);\n+\n+}\n+\n+bool almostEqual(double d1, double d2) \n+{\n+    return fabs(d1-d2) <= 4*fabs(d1)*std::numeric_limits<double>::epsilon();\n+}\n+\n+BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize\n+{\n+    BOOST_CHECK(R1L.GetHex() == R1L.ToString());\n+    BOOST_CHECK(R2L.GetHex() == R2L.ToString());\n+    BOOST_CHECK(OneL.GetHex() == OneL.ToString());\n+    BOOST_CHECK(MaxL.GetHex() == MaxL.ToString());\n+    uint256 TmpL(R1L);\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL.SetHex(R2L.ToString());   BOOST_CHECK(TmpL == R2L);\n+    TmpL.SetHex(ZeroL.ToString()); BOOST_CHECK(TmpL == 0);\n+    TmpL.SetHex(HalfL.ToString()); BOOST_CHECK(TmpL == HalfL);\n+\n+    TmpL.SetHex(R1L.ToString());\n+    BOOST_CHECK(memcmp(R1L.begin(), R1Array, 32)==0);\n+    BOOST_CHECK(memcmp(TmpL.begin(), R1Array, 32)==0);\n+    BOOST_CHECK(memcmp(R2L.begin(), R2Array, 32)==0);\n+    BOOST_CHECK(memcmp(ZeroL.begin(), ZeroArray, 32)==0);\n+    BOOST_CHECK(memcmp(OneL.begin(), OneArray, 32)==0);\n+    BOOST_CHECK(R1L.size() == 32);\n+    BOOST_CHECK(R2L.size() == 32);\n+    BOOST_CHECK(ZeroL.size() == 32);\n+    BOOST_CHECK(MaxL.size() == 32);\n+    BOOST_CHECK(R1L.begin() + 32 == R1L.end());\n+    BOOST_CHECK(R2L.begin() + 32 == R2L.end());\n+    BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n+    BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n+    BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n+    BOOST_CHECK(R1L.GetLow64()  == R1LLow64);\n+    BOOST_CHECK(HalfL.GetLow64() ==0x0000000000000000ULL);\n+    BOOST_CHECK(OneL.GetLow64() ==0x0000000000000001ULL);\n+    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+\n+    std::stringstream ss;\n+    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(R1L == TmpL);\n+    ss.str(\"\");\n+    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ZeroL == TmpL);\n+    ss.str(\"\");\n+    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(MaxL == TmpL);\n+    ss.str(\"\");\n+\n+    BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n+    BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n+    BOOST_CHECK(OneS.GetHex() == OneS.ToString());\n+    BOOST_CHECK(MaxS.GetHex() == MaxS.ToString());\n+    uint160 TmpS(R1S);\n+    BOOST_CHECK(TmpS == R1S);\n+    TmpS.SetHex(R2S.ToString());   BOOST_CHECK(TmpS == R2S);\n+    TmpS.SetHex(ZeroS.ToString()); BOOST_CHECK(TmpS == 0);\n+    TmpS.SetHex(HalfS.ToString()); BOOST_CHECK(TmpS == HalfS);\n+\n+    TmpS.SetHex(R1S.ToString());\n+    BOOST_CHECK(memcmp(R1S.begin(), R1Array, 20)==0);\n+    BOOST_CHECK(memcmp(TmpS.begin(), R1Array, 20)==0);\n+    BOOST_CHECK(memcmp(R2S.begin(), R2Array, 20)==0);\n+    BOOST_CHECK(memcmp(ZeroS.begin(), ZeroArray, 20)==0);\n+    BOOST_CHECK(memcmp(OneS.begin(), OneArray, 20)==0);\n+    BOOST_CHECK(R1S.size() == 20);\n+    BOOST_CHECK(R2S.size() == 20);\n+    BOOST_CHECK(ZeroS.size() == 20);\n+    BOOST_CHECK(MaxS.size() == 20);\n+    BOOST_CHECK(R1S.begin() + 20 == R1S.end());\n+    BOOST_CHECK(R2S.begin() + 20 == R2S.end());\n+    BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n+    BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n+    BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n+    BOOST_CHECK(R1S.GetLow64()  == R1LLow64);\n+    BOOST_CHECK(HalfS.GetLow64() ==0x0000000000000000ULL); \n+    BOOST_CHECK(OneS.GetLow64() ==0x0000000000000001ULL);\n+    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+\n+    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(R1S == TmpS);\n+    ss.str(\"\");\n+    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ZeroS == TmpS);\n+    ss.str(\"\");\n+    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(MaxS == TmpS);\n+    ss.str(\"\");\n+    \n+    for (unsigned int i = 0; i < 255; ++i) \n+    {\n+        BOOST_CHECK((OneL << i).getdouble() == ldexp(1.0,i));\n+        if (i < 160) BOOST_CHECK((OneS << i).getdouble() == ldexp(1.0,i));\n+    }\n+    BOOST_CHECK(ZeroL.getdouble() == 0.0);\n+    BOOST_CHECK(ZeroS.getdouble() == 0.0);\n+    for (int i = 256; i > 53; --i) \n+        BOOST_CHECK(almostEqual((R1L>>(256-i)).getdouble(), ldexp(R1Ldouble,i)));\n+    for (int i = 160; i > 53; --i) \n+        BOOST_CHECK(almostEqual((R1S>>(160-i)).getdouble(), ldexp(R1Sdouble,i)));\n+    uint64_t R1L64part = (R1L>>192).GetLow64();\n+    uint64_t R1S64part = (R1S>>96).GetLow64();\n+    for (int i = 53; i > 0; --i) // doubles can store all integers in {0,...,2^54-1} exactly\n+    {\n+        BOOST_CHECK((R1L>>(256-i)).getdouble() == (double)(R1L64part >> (64-i)));\n+        BOOST_CHECK((R1S>>(160-i)).getdouble() == (double)(R1S64part >> (64-i)));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% coverage\n+{\n+    // ~R1L give a base_uint<256>\n+    BOOST_CHECK((~~R1L >> 10) == (R1L >> 10)); BOOST_CHECK((~~R1S >> 10) == (R1S >> 10));\n+    BOOST_CHECK((~~R1L << 10) == (R1L << 10)); BOOST_CHECK((~~R1S << 10) == (R1S << 10));\n+    BOOST_CHECK(!(~~R1L < R1L)); BOOST_CHECK(!(~~R1S < R1S)); \n+    BOOST_CHECK(~~R1L <= R1L); BOOST_CHECK(~~R1S <= R1S); \n+    BOOST_CHECK(!(~~R1L > R1L)); BOOST_CHECK(!(~~R1S > R1S)); \n+    BOOST_CHECK(~~R1L >= R1L); BOOST_CHECK(~~R1S >= R1S); \n+    BOOST_CHECK(!(R1L < ~~R1L)); BOOST_CHECK(!(R1S < ~~R1S)); \n+    BOOST_CHECK(R1L <= ~~R1L); BOOST_CHECK(R1S <= ~~R1S); \n+    BOOST_CHECK(!(R1L > ~~R1L)); BOOST_CHECK(!(R1S > ~~R1S)); \n+    BOOST_CHECK(R1L >= ~~R1L); BOOST_CHECK(R1S >= ~~R1S); \n+    \n+    BOOST_CHECK(~~R1L + R2L == R1L + ~~R2L);\n+    BOOST_CHECK(~~R1S + R2S == R1S + ~~R2S);\n+    BOOST_CHECK(~~R1L - R2L == R1L - ~~R2L);\n+    BOOST_CHECK(~~R1S - R2S == R1S - ~~R2S);\n+    BOOST_CHECK(~R1L != R1L); BOOST_CHECK(R1L != ~R1L); \n+    BOOST_CHECK(~R1S != R1S); BOOST_CHECK(R1S != ~R1S); \n+    unsigned char TmpArray[32];\n+    CHECKBITWISEOPERATOR(~R1,R2,|)\n+    CHECKBITWISEOPERATOR(~R1,R2,^)\n+    CHECKBITWISEOPERATOR(~R1,R2,&)\n+    CHECKBITWISEOPERATOR(R1,~R2,|)\n+    CHECKBITWISEOPERATOR(R1,~R2,^)\n+    CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+"
      },
      {
        "sha": "ba903bc8fc61d8e68a765050f4a0c79b1f714185",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 150,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa6b20e29f3926a16d4da6962ff00b74623fc6b/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa6b20e29f3926a16d4da6962ff00b74623fc6b/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=daa6b20e29f3926a16d4da6962ff00b74623fc6b",
        "patch": "@@ -19,9 +19,6 @@ inline signed char HexDigit(char c)\n     return p_util_hexdigit[(unsigned char)c];\n }\n \n-inline int Testuint256AdHoc(std::vector<std::string> vArg);\n-\n-\n /** Base class without constructors for uint256 and uint160.\n  * This makes the compiler let you use it in a union.\n  */\n@@ -399,7 +396,6 @@ class base_uint\n \n     friend class uint160;\n     friend class uint256;\n-    friend inline int Testuint256AdHoc(std::vector<std::string> vArg);\n };\n \n typedef base_uint<160> base_uint160;\n@@ -526,9 +522,6 @@ inline const uint160 operator-(const uint160& a, const uint160& b)           { r\n \n \n \n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // uint256\n@@ -639,147 +632,4 @@ inline const uint256 operator|(const uint256& a, const uint256& b)      { return\n inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }\n inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-#ifdef TEST_UINT256\n-\n-inline int Testuint256AdHoc(std::vector<std::string> vArg)\n-{\n-    uint256 g(0);\n-\n-\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-    g--;  LogPrintf(\"g--\\n\");\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-    g--;  LogPrintf(\"g--\\n\");\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-    g++;  LogPrintf(\"g++\\n\");\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-    g++;  LogPrintf(\"g++\\n\");\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-    g++;  LogPrintf(\"g++\\n\");\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-    g++;  LogPrintf(\"g++\\n\");\n-    LogPrintf(\"%s\\n\", g.ToString().c_str());\n-\n-\n-\n-    uint256 a(7);\n-    LogPrintf(\"a=7\\n\");\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-\n-    uint256 b;\n-    LogPrintf(\"b undefined\\n\");\n-    LogPrintf(\"%s\\n\", b.ToString().c_str());\n-    int c = 3;\n-\n-    a = c;\n-    a.pn[3] = 15;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    uint256 k(c);\n-\n-    a = 5;\n-    a.pn[3] = 15;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    b = 1;\n-    b <<= 52;\n-\n-    a |= b;\n-\n-    a ^= 0x500;\n-\n-    LogPrintf(\"a %s\\n\", a.ToString().c_str());\n-\n-    a = a | b | (uint256)0x1000;\n-\n-\n-    LogPrintf(\"a %s\\n\", a.ToString().c_str());\n-    LogPrintf(\"b %s\\n\", b.ToString().c_str());\n-\n-    a = 0xfffffffe;\n-    a.pn[4] = 9;\n-\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a++;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a++;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a++;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a++;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-\n-    a--;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a--;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a--;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    uint256 d = a--;\n-    LogPrintf(\"%s\\n\", d.ToString().c_str());\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a--;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-    a--;\n-    LogPrintf(\"%s\\n\", a.ToString().c_str());\n-\n-    d = a;\n-\n-    LogPrintf(\"%s\\n\", d.ToString().c_str());\n-    for (int i = uint256::WIDTH-1; i >= 0; i--) LogPrintf(\"%08x\", d.pn[i]); LogPrintf(\"\\n\");\n-\n-    uint256 neg = d;\n-    neg = ~neg;\n-    LogPrintf(\"%s\\n\", neg.ToString().c_str());\n-\n-\n-    uint256 e = uint256(\"0xABCDEF123abcdef12345678909832180000011111111\");\n-    LogPrintf(\"\\n\");\n-    LogPrintf(\"%s\\n\", e.ToString().c_str());\n-\n-\n-    LogPrintf(\"\\n\");\n-    uint256 x1 = uint256(\"0xABCDEF123abcdef12345678909832180000011111111\");\n-    uint256 x2;\n-    LogPrintf(\"%s\\n\", x1.ToString().c_str());\n-    for (int i = 0; i < 270; i += 4)\n-    {\n-        x2 = x1 << i;\n-        LogPrintf(\"%s\\n\", x2.ToString().c_str());\n-    }\n-\n-    LogPrintf(\"\\n\");\n-    LogPrintf(\"%s\\n\", x1.ToString().c_str());\n-    for (int i = 0; i < 270; i += 4)\n-    {\n-        x2 = x1;\n-        x2 >>= i;\n-        LogPrintf(\"%s\\n\", x2.ToString().c_str());\n-    }\n-\n-\n-    for (int i = 0; i < 100; i++)\n-    {\n-        uint256 k = (~uint256(0) >> i);\n-        LogPrintf(\"%s\\n\", k.ToString().c_str());\n-    }\n-\n-    for (int i = 0; i < 100; i++)\n-    {\n-        uint256 k = (~uint256(0) << i);\n-        LogPrintf(\"%s\\n\", k.ToString().c_str());\n-    }\n-\n-    return (0);\n-}\n-\n-#endif\n-\n #endif"
      }
    ]
  }
]