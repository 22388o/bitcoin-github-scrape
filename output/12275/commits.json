[
  {
    "sha": "77a03151b56a56ddd09b886a8184bad594b317f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2EwMzE1MWI1NmE1NmRkZDA5Yjg4NmE4MTg0YmFkNTk0YjMxN2Yx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-01-26T13:19:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-11T14:45:47Z"
      },
      "message": "Improve ScanForWalletTransactions return value\n\nReturn more information about scan status from ScanForWalletTransactions and\ntry to describe the return value more clearly.\n\nThere is a slight change in behavior here where rescans that end early due to a\nreorg will no longer trigger errors. (I incorrectly suggested that that they\nshould trigger errors in the PR where this behavior was introduced:\nhttps://github.com/bitcoin/bitcoin/pull/11281#discussion_r163070403)",
      "tree": {
        "sha": "b5311ddaf3d942709b5315f0aec817ab0db62ed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5311ddaf3d942709b5315f0aec817ab0db62ed3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77a03151b56a56ddd09b886a8184bad594b317f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a03151b56a56ddd09b886a8184bad594b317f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77a03151b56a56ddd09b886a8184bad594b317f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a03151b56a56ddd09b886a8184bad594b317f1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf76c23fbfc8500fa494f8cef8068a67a1388c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf76c23fbfc8500fa494f8cef8068a67a1388c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf76c23fbfc8500fa494f8cef8068a67a1388c3"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 49,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f3d204179ffd52341f9e6b21bc24cbb7f5d03124",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=77a03151b56a56ddd09b886a8184bad594b317f1",
        "patch": "@@ -3609,7 +3609,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n+    const CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true).last_failed;\n     if (!stopBlock) {\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");"
      },
      {
        "sha": "4203b9c6215beb4503eff2099d068990e9d32655",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=77a03151b56a56ddd09b886a8184bad594b317f1",
        "patch": "@@ -50,7 +50,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n+        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver).last_failed);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -65,7 +65,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver).last_failed);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n "
      },
      {
        "sha": "5ebd53afeabe50273214b567eac5d1b0e604cd01",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 17,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77a03151b56a56ddd09b886a8184bad594b317f1",
        "patch": "@@ -1678,31 +1678,44 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     }\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update).last_failed;\n         if (failedBlock) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n+void UpdateResult(CWallet::ScanResult& result, const CBlockIndex& block, bool failed)\n+{\n+    if (!result.first_scanned) result.first_scanned = &block;\n+    result.last_scanned = &block;\n+\n+    if (failed) {\n+        if (!result.first_failed) result.first_failed = &block;\n+        result.last_failed = &block;\n+    }\n+}\n+\n /**\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * Returns null if scan was successful. Otherwise, if a complete rescan was not\n- * possible (due to pruning or corruption), returns pointer to the most recent\n- * block that could not be scanned.\n- *\n  * If pindexStop is not a nullptr, the scan will stop at the block-index\n  * defined by pindexStop\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n- * the main chain after to the addition of any new keys you want to detect\n- * transactions for.\n- */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+ * If blocks in the scan range are missing due pruning or corruption,\n+ * the scan will return a failure status indicating the range of\n+ * blocks that couldn't be scanned.\n+ *\n+ * If there is a reorg during the scan (or if start and stop blocks\n+ * that aren't on the active chain are specified), the scan will abort\n+ * at the point where the scan range diverges from the active chain.\n+ * This is not considered an error, since appropriate blocks will be\n+ * scanned in notifications from the reorg.\n+  */\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* pindexStart, const CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n@@ -1712,8 +1725,8 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n         assert(pindexStop->nHeight >= pindexStart->nHeight);\n     }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    const CBlockIndex* pindex = pindexStart;\n+    ScanResult ret;\n \n     if (pindex) LogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n \n@@ -1741,19 +1754,18 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            bool read_block = ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n+            UpdateResult(ret, *pindex, !read_block);\n+            if (read_block) {\n                 LOCK2(cs_main, cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!chainActive.Contains(pindex)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    ret = pindex;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n-            } else {\n-                ret = pindex;\n             }\n             if (pindex == pindexStop) {\n                 break;"
      },
      {
        "sha": "25a148eb3d679661221cbbcb7a46be65b0d77f37",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a03151b56a56ddd09b886a8184bad594b317f1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=77a03151b56a56ddd09b886a8184bad594b317f1",
        "patch": "@@ -920,7 +920,23 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n+\n+    //! Result of wallet scan.\n+    //!\n+    //! If scan was not completely successful, the failed pointers will be\n+    //! non-null and [first_failed, last_failed] will indicate the range of\n+    //! blocks that could not be scanned. The caller can assume that all blocks\n+    //! in the complementary ranges [first_scanned, last_first) and\n+    //! (last_failed, last_scanned] were successfully scanned.\n+    struct ScanResult\n+    {\n+        const CBlockIndex* first_scanned = nullptr;\n+        const CBlockIndex* last_scanned = nullptr;\n+        const CBlockIndex* first_failed = nullptr;\n+        const CBlockIndex* last_failed = nullptr;\n+    };\n+\n+    ScanResult ScanForWalletTransactions(const CBlockIndex* pindexStart, const CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  }
]