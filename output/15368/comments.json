[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461668266",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461668266",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 461668266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTY2ODI2Ng==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T02:21:06Z",
    "updated_at": "2019-02-08T02:21:06Z",
    "author_association": "MEMBER",
    "body": "Can a motivation for the placement be given? Accidentally eliding it for whatever reason neuters the protection while still maintaining a valid descriptor, but clearly it seems simpler from an implementation and compatibility perspective.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461668266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461669787",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461669787",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 461669787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTY2OTc4Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T02:30:08Z",
    "updated_at": "2019-02-08T02:30:08Z",
    "author_association": "MEMBER",
    "body": "@gsanders Well for critical RPCs the plan is that the checksum won't be optional. I just haven't included that in this PR as it means adapting a bunch of tests, which I only want to do once the checksum algorithm is final.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461669787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461677480",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461677480",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 461677480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTY3NzQ4MA==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T03:18:08Z",
    "updated_at": "2019-02-08T03:18:08Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461677480/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461824983",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461824983",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 461824983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTgyNDk4Mw==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T14:44:12Z",
    "updated_at": "2019-02-08T14:44:12Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\nIt'd be nice to read a draft to update doc/descriptors.md.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461824983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461929749",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461929749",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 461929749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTkyOTc0OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-08T20:04:55Z",
    "updated_at": "2019-02-08T20:04:55Z",
    "author_association": "MEMBER",
    "body": "Added a section to `doc/descriptors.md`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461929749/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462167385",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-462167385",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 462167385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjE2NzM4NQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-10T20:09:10Z",
    "updated_at": "2019-02-10T20:09:10Z",
    "author_association": "MEMBER",
    "body": "The surrounding code looks good other than the comments above, haven't reviewed the actual checksum code itself yet",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462167385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462739211",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-462739211",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 462739211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjczOTIxMQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T12:22:28Z",
    "updated_at": "2019-02-13T16:44:52Z",
    "author_association": "MEMBER",
    "body": "lightly tested ACK, code changes look good to me, haven't checked any of the magic numbers in `PolyMod`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462739211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463040425",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463040425",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 463040425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzA0MDQyNQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T03:17:28Z",
    "updated_at": "2019-02-13T03:21:09Z",
    "author_association": "MEMBER",
    "body": "Several changes:\r\n* Addressed all comments\r\n* Finalized the checksum design (and switched to a slightly better generator)\r\n* Added explanation (incl. Sage code) of the checksum\r\n* Made checksums mandatory in `deriveaddresses` and `importmulti`\r\n* Expanded and updated tests, including a Python implementation of the checksum\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463040425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463134489",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463134489",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 463134489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzEzNDQ4OQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T09:56:59Z",
    "updated_at": "2019-02-13T09:56:59Z",
    "author_association": "MEMBER",
    "body": "Breaks Travis due to #14918.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463134489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463307576",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463307576",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 463307576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMwNzU3Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T18:15:47Z",
    "updated_at": "2019-02-13T18:15:47Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463307576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463752532",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463752532",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 463752532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzc1MjUzMg==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-14T19:08:56Z",
    "updated_at": "2019-02-14T19:08:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463752532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463846030",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463846030",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 463846030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzg0NjAzMA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-14T23:33:49Z",
    "updated_at": "2019-02-14T23:33:49Z",
    "author_association": "MEMBER",
    "body": "Rebased and added a test to `deriveaddresses` and `importmulti` to test for missing checksum.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463846030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463928521",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463928521",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 463928521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzkyODUyMQ==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-15T06:51:36Z",
    "updated_at": "2019-02-15T06:51:36Z",
    "author_association": "MEMBER",
    "body": "Can the `deriveaddresses` RPC example be updated with a checksum, otherwise it will no-longer work.\r\n\r\nLooks like the descriptor should be (from `getdescriptorinfo`):\r\n```\r\n\"wpkh([d34db33f/84'/0'/0']xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\"\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463928521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464224639",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-464224639",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 464224639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDIyNDYzOQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-15T22:19:43Z",
    "updated_at": "2019-02-15T22:22:05Z",
    "author_association": "MEMBER",
    "body": "@promag I've just added a \"needs release notes\" label for now, as it intersects with the notes added for `deriveaddresses` and `importmulti`.\r\n\r\n@fanquake Done.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464224639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464309247",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-464309247",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 464309247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDMwOTI0Nw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-16T07:59:15Z",
    "updated_at": "2019-02-16T07:59:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15414](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15414.html) ([wallet] allow adding pubkeys from imported private keys to keypool by Sjors)\n* [#14912](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14912.html) ([WIP] External signer support (e.g. hardware wallet) by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464309247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464382689",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-464382689",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15368",
    "id": 464382689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM4MjY4OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-16T20:38:59Z",
    "updated_at": "2019-02-16T20:38:59Z",
    "author_association": "MEMBER",
    "body": "utACK fd637be8d21a606e98c037b40b268c4a1fae2244",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464382689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255219727",
    "pull_request_review_id": 201764711,
    "id": 255219727,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTIxOTcyNw==",
    "diff_hunk": "@@ -169,3 +169,20 @@ existing Bitcoin Core wallets, a convenience function `combo` is\n provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n uncompressed, the set only includes P2PK and P2PKH scripts.\n+\n+### Checksums\n+\n+Descriptors can optionally be suffixed with a checksum to protect against\n+typos or copy-paste errors.\n+\n+These checksums consist of 8 alphanumeric characters. As long as errors are\n+restricted to substituting characters in `0123456789()[],'/*abcdefgh@:$%{}`\n+for others in that set and changes in letter case, up to 4 errors will always\n+be detected in descriptors up to 501 characters, and up to 3 errors in longer\n+ones. For larger numbers of errors, or other types of errors, the is a",
    "path": "doc/descriptors.md",
    "position": null,
    "original_position": 23,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "975a4c41bdd76a41e680bbd56c3c6a15aa0a7b56",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/the is/there is?",
    "created_at": "2019-02-08T20:07:38Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255219727",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255219727"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255219727"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255219727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 182,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255219994",
    "pull_request_review_id": 201765055,
    "id": 255219994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTIxOTk5NA==",
    "diff_hunk": "@@ -169,3 +169,20 @@ existing Bitcoin Core wallets, a convenience function `combo` is\n provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n uncompressed, the set only includes P2PK and P2PKH scripts.\n+\n+### Checksums\n+\n+Descriptors can optionally be suffixed with a checksum to protect against\n+typos or copy-paste errors.\n+\n+These checksums consist of 8 alphanumeric characters. As long as errors are\n+restricted to substituting characters in `0123456789()[],'/*abcdefgh@:$%{}`\n+for others in that set and changes in letter case, up to 4 errors will always\n+be detected in descriptors up to 501 characters, and up to 3 errors in longer\n+ones. For larger numbers of errors, or other types of errors, the is a",
    "path": "doc/descriptors.md",
    "position": null,
    "original_position": 23,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "975a4c41bdd76a41e680bbd56c3c6a15aa0a7b56",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2019-02-08T20:08:40Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255219994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255219994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255219994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255219994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 182,
    "side": "RIGHT",
    "in_reply_to_id": 255219727
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255298617",
    "pull_request_review_id": 201862851,
    "id": 255298617,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTI5ODYxNw==",
    "diff_hunk": "@@ -28,13 +28,27 @@ constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n \n+/** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n+bool EqualDescriptor(std::string a, std::string b)\n+{\n+    bool a_check = (a.size() > 9 && a[a.size() - 9] == '#');\n+    bool b_check = (b.size() > 9 && b[b.size() - 9] == '#');\n+    if (a_check != b_check) {\n+        if (a_check) a = a.substr(0, a.size() - 9);\n+        if (b_check) b = b.substr(0, b.size() - 9);\n+    }\n+    if (a != b) fprintf(stderr, \"%s != %s\\n\", a.c_str(), b.c_str());",
    "path": "src/test/descriptor_tests.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this a debug print be left in here?",
    "created_at": "2019-02-09T13:21:46Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255298617",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255298617"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255298617"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255298617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255298636",
    "pull_request_review_id": 201862877,
    "id": 255298636,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTI5ODYzNg==",
    "diff_hunk": "@@ -19,6 +19,97 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitition error counts as 1 or 2 symbol errors, but:",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Subsitute this substitition with substitution.",
    "created_at": "2019-02-09T13:22:46Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255298636",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255298636"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255298636"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255298636/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255352237",
    "pull_request_review_id": 201918165,
    "id": 255352237,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTM1MjIzNw==",
    "diff_hunk": "@@ -143,6 +143,44 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(RPCHelpMan{\"getdescriptorinfo\",\n+            \"\\nAnalyses a descriptor.\\n\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",       (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"isprivate\\\" : true|false,      (boolean) Whether the input descriptor contained at least one private key\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: rename `isprivate` to `hasprivatekey` (or `contains...`).",
    "created_at": "2019-02-10T19:42:16Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255352237",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255352237"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255352237"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255352237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255928541",
    "pull_request_review_id": 202636303,
    "id": 255928541,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTkyODU0MQ==",
    "diff_hunk": "@@ -143,6 +143,44 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(RPCHelpMan{\"getdescriptorinfo\",\n+            \"\\nAnalyses a descriptor.\\n\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",       (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"isprivate\\\" : true|false,      (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +",
    "path": "src/rpc/misc.cpp",
    "position": 22,
    "original_position": 21,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "might want to mention that this example only works on mainnet",
    "created_at": "2019-02-12T12:21:32Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255928541",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255928541"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255928541"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255928541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 164,
    "original_line": 164,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256232700",
    "pull_request_review_id": 203011914,
    "id": 256232700,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjIzMjcwMA==",
    "diff_hunk": "@@ -19,6 +19,97 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitition error counts as 1 or 2 symbol errors, but:",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2019-02-13T03:05:32Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256232700",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256232700"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256232700"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256232700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 255298636
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233202",
    "pull_request_review_id": 203012513,
    "id": 256233202,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjIzMzIwMg==",
    "diff_hunk": "@@ -28,13 +28,27 @@ constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n \n+/** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n+bool EqualDescriptor(std::string a, std::string b)\n+{\n+    bool a_check = (a.size() > 9 && a[a.size() - 9] == '#');\n+    bool b_check = (b.size() > 9 && b[b.size() - 9] == '#');\n+    if (a_check != b_check) {\n+        if (a_check) a = a.substr(0, a.size() - 9);\n+        if (b_check) b = b.substr(0, b.size() - 9);\n+    }\n+    if (a != b) fprintf(stderr, \"%s != %s\\n\", a.c_str(), b.c_str());",
    "path": "src/test/descriptor_tests.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2019-02-13T03:08:55Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233202",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233202"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233202"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 255298617
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233436",
    "pull_request_review_id": 203012799,
    "id": 256233436,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjIzMzQzNg==",
    "diff_hunk": "@@ -143,6 +143,44 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(RPCHelpMan{\"getdescriptorinfo\",\n+            \"\\nAnalyses a descriptor.\\n\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",       (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"isprivate\\\" : true|false,      (boolean) Whether the input descriptor contained at least one private key\\n\"",
    "path": "src/rpc/misc.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-13T03:10:35Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233436",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233436"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233436"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 159,
    "side": "RIGHT",
    "in_reply_to_id": 255352237
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233911",
    "pull_request_review_id": 203013304,
    "id": 256233911,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjIzMzkxMQ==",
    "diff_hunk": "@@ -143,6 +143,44 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(RPCHelpMan{\"getdescriptorinfo\",\n+            \"\\nAnalyses a descriptor.\\n\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",       (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"isprivate\\\" : true|false,      (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +",
    "path": "src/rpc/misc.cpp",
    "position": 22,
    "original_position": 21,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "141c9653139f13a9acf2d99a9d444feef642cbe7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed by changing to a pubkey-only example.",
    "created_at": "2019-02-13T03:13:42Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233911",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233911"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233911"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256233911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 164,
    "original_line": 164,
    "side": "RIGHT",
    "in_reply_to_id": 255928541
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256234702",
    "pull_request_review_id": 203014240,
    "id": 256234702,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjIzNDcwMg==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 symbol error in a descriptor of up to 49143 characters is always detected.\n+// * Any 3 symbol error in a descriptor of up to 501 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 93 characters is always detected.\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+// * Has a slightly better chance than that for 5 symbol errors up to length 501 descriptors.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:",
    "path": "src/script/descriptor.cpp",
    "position": 43,
    "original_position": 35,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "5a04dafbd20ce4aeeb141cea9d517682e71ba5c0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@gmaxwell @sdaftuar What do you think about the inclusion of the Sage code here? I could do the same for the Bech32.",
    "created_at": "2019-02-13T03:19:09Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256234702",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256234702"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256234702"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256234702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256320874",
    "pull_request_review_id": 203117540,
    "id": 256320874,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjMyMDg3NA==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 symbol error in a descriptor of up to 49143 characters is always detected.\n+// * Any 3 symbol error in a descriptor of up to 501 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 93 characters is always detected.\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+// * Has a slightly better chance than that for 5 symbol errors up to length 501 descriptors.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:",
    "path": "src/script/descriptor.cpp",
    "position": 43,
    "original_position": 35,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "5a04dafbd20ce4aeeb141cea9d517682e71ba5c0",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that's a great idea here. For bech32 it should probably just go in the BIP.\r\n\r\nDoes anyone want to over-engineer having Travis check against this? :-)",
    "created_at": "2019-02-13T09:58:17Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256320874",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256320874"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256320874"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256320874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 256234702
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256327102",
    "pull_request_review_id": 203117540,
    "id": 256327102,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjMyNzEwMg==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe flip this around, and explain a bit more how symbol error count works:\r\n\r\n```c++\r\n// * Mistakes in a descriptor string are measured in symbol errors. A higher symbol\r\n//   error count is more difficult to detect, because it becomes indistinguishable\r\n//   from a different descriptor.\r\n//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\r\n//     another in that set always counts as 1 symbol error.\r\n//   * A case error always counts as 1 symbol error.\r\n//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\r\n//   * Note that hex encoded keys are covered by these special characters, whereas xprivs\r\n//     and xpubs use different characters, but already have their own checksum mechanism.\r\n//     Function names like \"multi()\" use different characters, but mistakes would generally\r\n//     result in an unparseable descriptor. \r\n```\r\n\r\nSome of this is also explained in `DescriptorChecksum` in different wording.",
    "created_at": "2019-02-13T10:14:41Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256327102",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256327102"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256327102"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256327102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256332245",
    "pull_request_review_id": 203117540,
    "id": 256332245,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjMzMjI0NQ==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";",
    "path": "src/script/descriptor.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: putting `ABCDEFGH` and `abcdefgh` all the way to the right would make it a bit more clear that they intentionally have the same offset (for some reason Github doesn't believe in fixed-width font for code, but even in editors it would be more clear).",
    "created_at": "2019-02-13T10:27:34Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256332245",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256332245"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256332245"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256332245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 111,
    "original_line": 111,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256343456",
    "pull_request_review_id": 203117540,
    "id": 256343456,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjM0MzQ1Ng==",
    "diff_hunk": "@@ -193,7 +233,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(desc_str, provider);\n+    auto desc = Parse(desc_str, provider, true);\n     if (!desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 63,
    "original_position": 54,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "d62fba00535df7dbdf3d923137a99c7a28bdb876",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would be nice to have a dinstinct error for a missing checksum.",
    "created_at": "2019-02-13T10:56:10Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256343456",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256343456"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256343456"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256343456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 238,
    "original_line": 238,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256516097",
    "pull_request_review_id": 203359670,
    "id": 256516097,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjUxNjA5Nw==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";",
    "path": "src/script/descriptor.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What platform are you using? It's fixed width here, and I prefer to keep them in alphabetical order.",
    "created_at": "2019-02-13T17:57:02Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256516097",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256516097"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256516097"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256516097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 111,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 256332245
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256517690",
    "pull_request_review_id": 203361624,
    "id": 256517690,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjUxNzY5MA==",
    "diff_hunk": "@@ -193,7 +233,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(desc_str, provider);\n+    auto desc = Parse(desc_str, provider, true);\n     if (!desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 63,
    "original_position": 54,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "d62fba00535df7dbdf3d923137a99c7a28bdb876",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In general the errors are non-existent. Like, a space causes it to be rejected. Maybe a followup PR to make some common error cases printed?",
    "created_at": "2019-02-13T18:01:02Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256517690",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256517690"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256517690"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256517690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 238,
    "original_line": 238,
    "side": "RIGHT",
    "in_reply_to_id": 256343456
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522441",
    "pull_request_review_id": 203367579,
    "id": 256522441,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjUyMjQ0MQ==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 symbol error in a descriptor of up to 49143 characters is always detected.\n+// * Any 3 symbol error in a descriptor of up to 501 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 93 characters is always detected.\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+// * Has a slightly better chance than that for 5 symbol errors up to length 501 descriptors.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:",
    "path": "src/script/descriptor.cpp",
    "position": 43,
    "original_position": 35,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "5a04dafbd20ce4aeeb141cea9d517682e71ba5c0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that's overkill.",
    "created_at": "2019-02-13T18:13:53Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522441",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522441"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522441"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 62,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 256234702
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522588",
    "pull_request_review_id": 203367778,
    "id": 256522588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjUyMjU4OA==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Cool, that's more clear. I've included it with some copy-editing.",
    "created_at": "2019-02-13T18:14:17Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 256327102
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522907",
    "pull_request_review_id": 203368164,
    "id": 256522907,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjUyMjkwNw==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";",
    "path": "src/script/descriptor.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Github renders in a fixed-width font here. I don't think this concern weighs up against keeping the characters in alphabetical ordering (to the extent possible).",
    "created_at": "2019-02-13T18:15:02Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522907",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522907"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522907"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256522907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 111,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 256332245
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256523034",
    "pull_request_review_id": 203368305,
    "id": 256523034,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjUyMzAzNA==",
    "diff_hunk": "@@ -193,7 +233,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(desc_str, provider);\n+    auto desc = Parse(desc_str, provider, true);\n     if (!desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 63,
    "original_position": 54,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "d62fba00535df7dbdf3d923137a99c7a28bdb876",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree, but I'd prefer to do that in a different change.",
    "created_at": "2019-02-13T18:15:19Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256523034",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256523034"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256523034"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256523034/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 238,
    "original_line": 238,
    "side": "RIGHT",
    "in_reply_to_id": 256343456
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256545089",
    "pull_request_review_id": 203394732,
    "id": 256545089,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjU0NTA4OQ==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";",
    "path": "src/script/descriptor.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "FWIW, `abc...`  and `ABC...` are perfectly aligned here :-)\r\n\r\nA non-fixed width GitHub code view is surely not intentional -- I suggest reporting to GitHub! :-)",
    "created_at": "2019-02-13T19:11:04Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256545089",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256545089"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256545089"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256545089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 111,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 256332245
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256556239",
    "pull_request_review_id": 203407933,
    "id": 256556239,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjU1NjIzOQ==",
    "diff_hunk": "@@ -193,7 +233,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(desc_str, provider);\n+    auto desc = Parse(desc_str, provider, true);\n     if (!desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 63,
    "original_position": 54,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "d62fba00535df7dbdf3d923137a99c7a28bdb876",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that's fine because both descriptor enhanced `importmulti` and `deriveaddress` are new anyway. We can make them more user friendly later.",
    "created_at": "2019-02-13T19:37:30Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256556239",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256556239"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256556239"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256556239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 238,
    "original_line": 238,
    "side": "RIGHT",
    "in_reply_to_id": 256343456
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256558008",
    "pull_request_review_id": 203410132,
    "id": 256558008,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjU1ODAwOA==",
    "diff_hunk": "@@ -19,6 +19,117 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the following properties:\n+// * Every 1 character substitution error counts as 1 or 2 symbol errors, but:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for another in\n+//     that set always counts as 1 symbol error.\n+//   * A case error always counts as 1 symbol error.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";",
    "path": "src/script/descriptor.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "83949e8b17d5ce7dd0688c7ed9c20cd69c137011",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nvm, it was just the escape characters in the bottom line that made it look misaligned. That or I was A/B-tested.",
    "created_at": "2019-02-13T19:42:15Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256558008",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256558008"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256558008"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256558008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 111,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 256332245
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256972631",
    "pull_request_review_id": 203921262,
    "id": 256972631,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Njk3MjYzMQ==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},",
    "path": "src/rpc/misc.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "f57d2cb74e5ef1c910cef0687cb8c7eb5dca881e",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Analyze?",
    "created_at": "2019-02-14T19:13:47Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256972631",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256972631"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256972631"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256972631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 151,
    "original_line": 151,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257003375",
    "pull_request_review_id": 203959290,
    "id": 257003375,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzAwMzM3NQ==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},",
    "path": "src/rpc/misc.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "f57d2cb74e5ef1c910cef0687cb8c7eb5dca881e",
    "user": {
      "login": "flack",
      "id": 425166,
      "node_id": "MDQ6VXNlcjQyNTE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flack",
      "html_url": "https://github.com/flack",
      "followers_url": "https://api.github.com/users/flack/followers",
      "following_url": "https://api.github.com/users/flack/following{/other_user}",
      "gists_url": "https://api.github.com/users/flack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
      "organizations_url": "https://api.github.com/users/flack/orgs",
      "repos_url": "https://api.github.com/users/flack/repos",
      "events_url": "https://api.github.com/users/flack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@instagibbs it's funny, I stumbled across this, too, and did a little search on analyse/analyze in the code base, it's almost evenly split. So it would probably be better to do a separate PR that standardizes (standardises?) on either the British or American spelling",
    "created_at": "2019-02-14T20:39:59Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257003375",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257003375"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257003375"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257003375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 151,
    "original_line": 151,
    "side": "RIGHT",
    "in_reply_to_id": 256972631
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257011433",
    "pull_request_review_id": 203969606,
    "id": 257011433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzAxMTQzMw==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},",
    "path": "src/rpc/misc.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "f57d2cb74e5ef1c910cef0687cb8c7eb5dca881e",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I am not a fan of PRs to go around switching between different english styles, especially in comments.  All of them are valid, all can be mutually read by english speakers.  Trying to maintain consistency would just mean a never ending sequence of fixups PRs.   \r\n\r\nWe have a finite amount of resources to handle changes, they should be conserved for efforts that improve the capability or reliability of the software.",
    "created_at": "2019-02-14T21:04:49Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257011433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257011433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257011433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257011433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 151,
    "original_line": 151,
    "side": "RIGHT",
    "in_reply_to_id": 256972631
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257012910",
    "pull_request_review_id": 203971489,
    "id": 257012910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzAxMjkxMA==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},",
    "path": "src/rpc/misc.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "f57d2cb74e5ef1c910cef0687cb8c7eb5dca881e",
    "user": {
      "login": "flack",
      "id": 425166,
      "node_id": "MDQ6VXNlcjQyNTE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flack",
      "html_url": "https://github.com/flack",
      "followers_url": "https://api.github.com/users/flack/followers",
      "following_url": "https://api.github.com/users/flack/following{/other_user}",
      "gists_url": "https://api.github.com/users/flack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
      "organizations_url": "https://api.github.com/users/flack/orgs",
      "repos_url": "https://api.github.com/users/flack/repos",
      "events_url": "https://api.github.com/users/flack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not saying it should necessarily be changed, but changing it in this PR only will not really add anything wrt consistency either (since analyze/analyse appear in more or less the same frequency in the code base). So... leave it as is?",
    "created_at": "2019-02-14T21:09:18Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257012910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257012910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257012910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257012910/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 151,
    "original_line": 151,
    "side": "RIGHT",
    "in_reply_to_id": 256972631
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257025888",
    "pull_request_review_id": 203987866,
    "id": 257025888,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzAyNTg4OA==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},",
    "path": "src/rpc/misc.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "f57d2cb74e5ef1c910cef0687cb8c7eb5dca881e",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I had no idea it was a valid word, haha. I retract the comment!",
    "created_at": "2019-02-14T21:47:36Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257025888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257025888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257025888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257025888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 151,
    "original_line": 151,
    "side": "RIGHT",
    "in_reply_to_id": 256972631
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257026006",
    "pull_request_review_id": 203988005,
    "id": 257026006,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzAyNjAwNg==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},",
    "path": "src/rpc/misc.cpp",
    "position": 9,
    "original_position": 9,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "f57d2cb74e5ef1c910cef0687cb8c7eb5dca881e",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I thought it was a misspelling of \"analysis\" which made no grammatical sense.",
    "created_at": "2019-02-14T21:47:56Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257026006",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257026006"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257026006"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257026006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 151,
    "original_line": 151,
    "side": "RIGHT",
    "in_reply_to_id": 256972631
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257060549",
    "pull_request_review_id": 204029672,
    "id": 257060549,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzA2MDU0OQ==",
    "diff_hunk": "@@ -14,36 +15,37 @@ def set_test_params(self):\n     def run_test(self):\n         assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, \"a\")\n \n-        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)#t6wfjs64\"\n         address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n-\n         assert_equal(self.nodes[0].deriveaddresses(descriptor), [address])\n \n-        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"\n-        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"",
    "path": "test/functional/rpc_deriveaddresses.py",
    "position": null,
    "original_position": 20,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "34164546d8f9c2c1f0b05e2b2f8b83a3ac16eec3",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "absolutely not blocking nit: just use `descriptor = descriptor[:-9]` to make it clear it's just dropping checksum",
    "created_at": "2019-02-14T23:55:12Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257060549",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257060549"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257060549"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257060549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257311306",
    "pull_request_review_id": 204336806,
    "id": 257311306,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzMxMTMwNg==",
    "diff_hunk": "@@ -63,7 +63,7 @@ struct Descriptor {\n };\n \n /** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */\n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out);\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum = false);",
    "path": "src/script/descriptor.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a086e8455a2dc13308a1e74446d7c926898e6492",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Instead of adding the new argument with a default value, why not create a new function `ParseChecked`? From the call site it is more clear, especially since it's statically defined where checksum is needed.",
    "created_at": "2019-02-15T16:50:22Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257311306",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257311306"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257311306"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257311306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 73,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257355945",
    "pull_request_review_id": 204394030,
    "id": 257355945,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzM1NTk0NQ==",
    "diff_hunk": "@@ -63,7 +63,7 @@ struct Descriptor {\n };\n \n /** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */\n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out);\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum = false);",
    "path": "src/script/descriptor.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a086e8455a2dc13308a1e74446d7c926898e6492",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Or you could do `auto desc = Parse(desc_str, provider, /* require_checksum = */ true);`.",
    "created_at": "2019-02-15T19:09:10Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257355945",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257355945"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257355945"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257355945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 73,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 257311306
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257409793",
    "pull_request_review_id": 204462852,
    "id": 257409793,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQwOTc5Mw==",
    "diff_hunk": "@@ -63,7 +63,7 @@ struct Descriptor {\n };\n \n /** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */\n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out);\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum = false);",
    "path": "src/script/descriptor.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a086e8455a2dc13308a1e74446d7c926898e6492",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Did the latter.",
    "created_at": "2019-02-15T22:18:35Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257409793",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257409793"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257409793"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257409793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 73,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 257311306
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257409832",
    "pull_request_review_id": 204462897,
    "id": 257409832,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQwOTgzMg==",
    "diff_hunk": "@@ -14,36 +15,37 @@ def set_test_params(self):\n     def run_test(self):\n         assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, \"a\")\n \n-        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)#t6wfjs64\"\n         address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n-\n         assert_equal(self.nodes[0].deriveaddresses(descriptor), [address])\n \n-        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"\n-        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"",
    "path": "test/functional/rpc_deriveaddresses.py",
    "position": null,
    "original_position": 20,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "34164546d8f9c2c1f0b05e2b2f8b83a3ac16eec3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-15T22:18:44Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257409832",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257409832"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257409832"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257409832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 257060549
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257433626",
    "pull_request_review_id": 204490710,
    "id": 257433626,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzMzYyNg==",
    "diff_hunk": "@@ -63,7 +63,7 @@ struct Descriptor {\n };\n \n /** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */",
    "path": "src/script/descriptor.h",
    "position": null,
    "original_position": 3,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, could update function comment and note that checksum is always checked if present.",
    "created_at": "2019-02-16T00:34:56Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257433626",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257433626"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257433626"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257433626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434116",
    "pull_request_review_id": 204490710,
    "id": 257434116,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzNDExNg==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);\n+        if (pos == std::string::npos) return \"\";\n+        c = PolyMod(c, pos & 31); // Emit a symbol for the position inside the group, for every character.\n+        cls = cls * 3 + (pos >> 5); // Accumulate the group numbers\n+        if (++clscount == 3) {\n+            // Emit an extra symbol representing the group numbers, for every 3 characters.\n+            c = PolyMod(c, cls);\n+            cls = 0;\n+            clscount = 0;\n+        }\n+    }\n+    if (clscount) c = PolyMod(c, cls);",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 112,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, `> 0`.",
    "created_at": "2019-02-16T00:38:35Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434116",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434116"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434116"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 131,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434247",
    "pull_request_review_id": 204490710,
    "id": 257434247,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzNDI0Nw==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);\n+        if (pos == std::string::npos) return \"\";\n+        c = PolyMod(c, pos & 31); // Emit a symbol for the position inside the group, for every character.\n+        cls = cls * 3 + (pos >> 5); // Accumulate the group numbers\n+        if (++clscount == 3) {\n+            // Emit an extra symbol representing the group numbers, for every 3 characters.\n+            c = PolyMod(c, cls);\n+            cls = 0;\n+            clscount = 0;\n+        }\n+    }\n+    if (clscount) c = PolyMod(c, cls);\n+    for (int j = 0; j < 8; ++j) c = PolyMod(c, 0); // Shift further to determine the checksum.\n+    c ^= 1; // Prevent appending zeroes from not affecting the checksum.\n+\n+    std::string ret;",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, `resize(8)`? And then below `ret[j] = ...`.",
    "created_at": "2019-02-16T00:39:46Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434247",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434247"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434247"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 135,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434943",
    "pull_request_review_id": 204490710,
    "id": 257434943,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzNDk0Mw==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);",
    "path": "src/script/descriptor.cpp",
    "position": 101,
    "original_position": 101,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, could avoid linear search by having an array to map to pos\r\n```cpp\r\nstatic int CHAR_POS[] = { ... }; // -1 if invalid\r\n...\r\nint pos = CHAR_POS[ch];\r\nif (pos == -1) return \"\";\r\n```",
    "created_at": "2019-02-16T00:46:18Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434943",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434943"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434943"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257434943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257435477",
    "pull_request_review_id": 204490710,
    "id": 257435477,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzNTQ3Nw==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +\n+                HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(request.params[0].get_str(), provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 33,
    "original_position": 33,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, could have a test for this error.",
    "created_at": "2019-02-16T00:51:24Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257435477",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257435477"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257435477"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257435477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 175,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257436194",
    "pull_request_review_id": 204490710,
    "id": 257436194,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzNjE5NA==",
    "diff_hunk": "@@ -751,11 +875,25 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     return MakeUnique<RawDescriptor>(script);\n }\n \n+\n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n+\n+    // Checksum checks\n+    auto check_split = Split(sp, '#');\n+    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n+    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() == 2) {\n+        auto checksum = DescriptorChecksum(check_split[0]);\n+        if (checksum.size() == 0) return nullptr; // Invalid characters in payload\n+        if ((size_t)check_split[1].size() != checksum.size()) return nullptr; // Unexpected length for checksum",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 163,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could be checked before calling `DescriptorChecksum`?\r\n```cpp\r\nif (check_split[1].size() != 8) return nullptr;\r\nauto checksum = DescriptorChecksum(check_split[0]);\r\n```",
    "created_at": "2019-02-16T00:58:50Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257436194",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257436194"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257436194"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257436194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 892,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257436215",
    "pull_request_review_id": 204490710,
    "id": 257436215,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQzNjIxNQ==",
    "diff_hunk": "@@ -751,11 +875,25 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     return MakeUnique<RawDescriptor>(script);\n }\n \n+\n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n+\n+    // Checksum checks\n+    auto check_split = Split(sp, '#');\n+    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n+    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() == 2) {\n+        auto checksum = DescriptorChecksum(check_split[0]);\n+        if (checksum.size() == 0) return nullptr; // Invalid characters in payload",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 162,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, `.empty()`.",
    "created_at": "2019-02-16T00:59:05Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257436215",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257436215"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257436215"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257436215/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 892,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449076",
    "pull_request_review_id": 204508302,
    "id": 257449076,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTA3Ng==",
    "diff_hunk": "@@ -63,7 +63,7 @@ struct Descriptor {\n };\n \n /** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */",
    "path": "src/script/descriptor.h",
    "position": null,
    "original_position": 3,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-16T06:31:56Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449076",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449076"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449076"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 257433626
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449080",
    "pull_request_review_id": 204508304,
    "id": 257449080,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTA4MA==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);\n+        if (pos == std::string::npos) return \"\";\n+        c = PolyMod(c, pos & 31); // Emit a symbol for the position inside the group, for every character.\n+        cls = cls * 3 + (pos >> 5); // Accumulate the group numbers\n+        if (++clscount == 3) {\n+            // Emit an extra symbol representing the group numbers, for every 3 characters.\n+            c = PolyMod(c, cls);\n+            cls = 0;\n+            clscount = 0;\n+        }\n+    }\n+    if (clscount) c = PolyMod(c, cls);",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 112,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-16T06:32:01Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449080",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449080"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449080"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 131,
    "side": "RIGHT",
    "in_reply_to_id": 257434116
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449087",
    "pull_request_review_id": 204508310,
    "id": 257449087,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTA4Nw==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);\n+        if (pos == std::string::npos) return \"\";\n+        c = PolyMod(c, pos & 31); // Emit a symbol for the position inside the group, for every character.\n+        cls = cls * 3 + (pos >> 5); // Accumulate the group numbers\n+        if (++clscount == 3) {\n+            // Emit an extra symbol representing the group numbers, for every 3 characters.\n+            c = PolyMod(c, cls);\n+            cls = 0;\n+            clscount = 0;\n+        }\n+    }\n+    if (clscount) c = PolyMod(c, cls);\n+    for (int j = 0; j < 8; ++j) c = PolyMod(c, 0); // Shift further to determine the checksum.\n+    c ^= 1; // Prevent appending zeroes from not affecting the checksum.\n+\n+    std::string ret;",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-16T06:32:09Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449087",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449087"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449087"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 135,
    "side": "RIGHT",
    "in_reply_to_id": 257434247
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449092",
    "pull_request_review_id": 204508319,
    "id": 257449092,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTA5Mg==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);",
    "path": "src/script/descriptor.cpp",
    "position": 101,
    "original_position": 101,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think the extra code is worth the performance gain.",
    "created_at": "2019-02-16T06:32:28Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449092",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449092"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449092"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT",
    "in_reply_to_id": 257434943
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449099",
    "pull_request_review_id": 204508328,
    "id": 257449099,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTA5OQ==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +\n+                HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(request.params[0].get_str(), provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 33,
    "original_position": 33,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There is (rpc_deriveaddresses functional test).",
    "created_at": "2019-02-16T06:32:48Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449099",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449099"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449099"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 175,
    "side": "RIGHT",
    "in_reply_to_id": 257435477
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449103",
    "pull_request_review_id": 204508331,
    "id": 257449103,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTEwMw==",
    "diff_hunk": "@@ -751,11 +875,25 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     return MakeUnique<RawDescriptor>(script);\n }\n \n+\n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n+\n+    // Checksum checks\n+    auto check_split = Split(sp, '#');\n+    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n+    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() == 2) {\n+        auto checksum = DescriptorChecksum(check_split[0]);\n+        if (checksum.size() == 0) return nullptr; // Invalid characters in payload\n+        if ((size_t)check_split[1].size() != checksum.size()) return nullptr; // Unexpected length for checksum",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 163,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good idea, done.",
    "created_at": "2019-02-16T06:32:57Z",
    "updated_at": "2019-02-16T06:36:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449103",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449103"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449103"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 892,
    "side": "RIGHT",
    "in_reply_to_id": 257436194
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449216",
    "pull_request_review_id": 204508460,
    "id": 257449216,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ0OTIxNg==",
    "diff_hunk": "@@ -751,11 +875,25 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     return MakeUnique<RawDescriptor>(script);\n }\n \n+\n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n+\n+    // Checksum checks\n+    auto check_split = Split(sp, '#');\n+    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n+    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() == 2) {\n+        auto checksum = DescriptorChecksum(check_split[0]);\n+        if (checksum.size() == 0) return nullptr; // Invalid characters in payload",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 162,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-16T06:37:34Z",
    "updated_at": "2019-02-16T06:37:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449216",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449216"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449216"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257449216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 892,
    "side": "RIGHT",
    "in_reply_to_id": 257436215
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257456750",
    "pull_request_review_id": 204515799,
    "id": 257456750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ1Njc1MA==",
    "diff_hunk": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).",
    "path": "src/script/descriptor.cpp",
    "position": 82,
    "original_position": 82,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure if I'm reading this wrong, but isn't the fourth symbol in the wrong order, shouldn't this be `(p(c) / 32) + 3 * (p(b) / 32) + 9 * (p(a) / 32)`?",
    "created_at": "2019-02-16T11:12:30Z",
    "updated_at": "2019-02-16T11:16:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257456750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257456750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257456750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257456750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 101,
    "original_line": 101,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257456836",
    "pull_request_review_id": 204515877,
    "id": 257456836,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NzQ1NjgzNg==",
    "diff_hunk": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +\n+                HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(request.params[0].get_str(), provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));",
    "path": "src/rpc/misc.cpp",
    "position": 33,
    "original_position": 33,
    "commit_id": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "original_commit_id": "a19b3f92e25f1b65a9699f16b86083820e2cd2a5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not for getdescriptorinfo.",
    "created_at": "2019-02-16T11:15:52Z",
    "updated_at": "2019-02-16T11:15:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257456836",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257456836"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257456836"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15368"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257456836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 175,
    "side": "RIGHT",
    "in_reply_to_id": 257435477
  }
]