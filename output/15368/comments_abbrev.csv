instagibbs,2019-02-08T02:21:06Z,"Can a motivation for the placement be given? Accidentally eliding it for whatever reason neuters the protection while still maintaining a valid descriptor, but clearly it seems simpler from an implementation and compatibility perspective.",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461668266,461668266,
sipa,2019-02-08T02:30:08Z,"@gsanders Well for critical RPCs the plan is that the checksum won't be optional. I just haven't included that in this PR as it means adapting a bunch of tests, which I only want to do once the checksum algorithm is final.",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461669787,461669787,
meshcollider,2019-02-08T03:18:08Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461677480,461677480,
promag,2019-02-08T14:44:12Z,"Concept ACK.\n\nIt'd be nice to read a draft to update doc/descriptors.md.",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461824983,461824983,
sipa,2019-02-08T20:04:55Z,Added a section to `doc/descriptors.md`.,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-461929749,461929749,
meshcollider,2019-02-10T20:09:10Z,"The surrounding code looks good other than the comments above, haven't reviewed the actual checksum code itself yet",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-462167385,462167385,
laanwj,2019-02-12T12:22:28Z,"lightly tested ACK, code changes look good to me, haven't checked any of the magic numbers in `PolyMod`",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-462739211,462739211,
sipa,2019-02-13T03:17:28Z,"Several changes:\n* Addressed all comments\n* Finalized the checksum design (and switched to a slightly better generator)\n* Added explanation (incl. Sage code) of the checksum\n* Made checksums mandatory in `deriveaddresses` and `importmulti`\n* Expanded and updated tests, including a Python implementation of the checksum\n",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463040425,463040425,
Sjors,2019-02-13T09:56:59Z,Breaks Travis due to #14918.,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463134489,463134489,
sipa,2019-02-13T18:15:47Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463307576,463307576,
gmaxwell,2019-02-14T19:08:56Z,ACK,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463752532,463752532,
sipa,2019-02-14T23:33:49Z,Rebased and added a test to `deriveaddresses` and `importmulti` to test for missing checksum.,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463846030,463846030,
fanquake,2019-02-15T06:51:36Z,"Can the `deriveaddresses` RPC example be updated with a checksum, otherwise it will no-longer work.\n\nLooks like the descriptor should be (from `getdescriptorinfo`):\n```\n""wpkh([d34db33f/84'/0'/0']xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l""\n```",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-463928521,463928521,
sipa,2019-02-15T22:19:43Z,"@promag I've just added a ""needs release notes"" label for now, as it intersects with the notes added for `deriveaddresses` and `importmulti`.\n\n@fanquake Done.",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-464224639,464224639,
DrahtBot,2019-02-16T07:59:15Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15414](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15414.html) ([wallet] allow adding pubkeys from imported",https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-464309247,464309247,
laanwj,2019-02-16T20:38:59Z,utACK fd637be8d21a606e98c037b40b268c4a1fae2244,https://github.com/bitcoin/bitcoin/pull/15368#issuecomment-464382689,464382689,
promag,2019-02-08T20:07:38Z,s/the is/there is?,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255219727,255219727,doc/descriptors.md
sipa,2019-02-08T20:08:40Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255219994,255219994,doc/descriptors.md
practicalswift,2019-02-09T13:21:46Z,Should this a debug print be left in here?,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255298617,255298617,src/test/descriptor_tests.cpp
practicalswift,2019-02-09T13:22:46Z,Subsitute this substitition with substitution.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255298636,255298636,src/script/descriptor.cpp
Sjors,2019-02-10T19:42:16Z,Nit: rename `isprivate` to `hasprivatekey` (or `contains...`).,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255352237,255352237,src/rpc/misc.cpp
laanwj,2019-02-12T12:21:32Z,might want to mention that this example only works on mainnet,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r255928541,255928541,src/rpc/misc.cpp
sipa,2019-02-13T03:05:32Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256232700,256232700,src/script/descriptor.cpp
sipa,2019-02-13T03:08:55Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233202,256233202,src/test/descriptor_tests.cpp
sipa,2019-02-13T03:10:35Z,Done.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233436,256233436,src/rpc/misc.cpp
sipa,2019-02-13T03:13:42Z,Fixed by changing to a pubkey-only example.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256233911,256233911,src/rpc/misc.cpp
sipa,2019-02-13T03:19:09Z,@gmaxwell @sdaftuar What do you think about the inclusion of the Sage code here? I could do the same for the Bech32.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256234702,256234702,src/script/descriptor.cpp
Sjors,2019-02-13T09:58:17Z,"I think that's a great idea here. For bech32 it should probably just go in the BIP.\n\nDoes anyone want to over-engineer having Travis check against this? :-)",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256320874,256320874,src/script/descriptor.cpp
Sjors,2019-02-13T10:14:41Z,"Maybe flip this around, and explain a bit more how symbol error count works:\n\n```c++\n// * Mistakes in a descriptor string are measured in symbol errors. A higher symbol\n//   error count is more difficult to detect, because it becomes indistinguishable\n//   from a different descriptor.\n//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n//     another in",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256327102,256327102,src/script/descriptor.cpp
Sjors,2019-02-13T10:27:34Z,"Nit: putting `ABCDEFGH` and `abcdefgh` all the way to the right would make it a bit more clear that they intentionally have the same offset (for some reason Github doesn't believe in fixed-width font for code, but even in editors it would be more clear).",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256332245,256332245,src/script/descriptor.cpp
Sjors,2019-02-13T10:56:10Z,It would be nice to have a dinstinct error for a missing checksum.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256343456,256343456,src/rpc/misc.cpp
sipa,2019-02-13T17:57:02Z,"What platform are you using? It's fixed width here, and I prefer to keep them in alphabetical order.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256516097,256516097,src/script/descriptor.cpp
instagibbs,2019-02-13T18:01:02Z,"In general the errors are non-existent. Like, a space causes it to be rejected. Maybe a followup PR to make some common error cases printed?",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256517690,256517690,src/rpc/misc.cpp
sipa,2019-02-13T18:13:53Z,I think that's overkill.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522441,256522441,src/script/descriptor.cpp
sipa,2019-02-13T18:14:17Z,"Cool, that's more clear. I've included it with some copy-editing.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522588,256522588,src/script/descriptor.cpp
sipa,2019-02-13T18:15:02Z,Github renders in a fixed-width font here. I don't think this concern weighs up against keeping the characters in alphabetical ordering (to the extent possible).,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256522907,256522907,src/script/descriptor.cpp
sipa,2019-02-13T18:15:19Z,"Agree, but I'd prefer to do that in a different change.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256523034,256523034,src/rpc/misc.cpp
practicalswift,2019-02-13T19:11:04Z,"FWIW, `abc...`  and `ABC...` are perfectly aligned here :-)\n\nA non-fixed width GitHub code view is surely not intentional -- I suggest reporting to GitHub! :-)",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256545089,256545089,src/script/descriptor.cpp
Sjors,2019-02-13T19:37:30Z,I think that's fine because both descriptor enhanced `importmulti` and `deriveaddress` are new anyway. We can make them more user friendly later.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256556239,256556239,src/rpc/misc.cpp
Sjors,2019-02-13T19:42:15Z,"Nvm, it was just the escape characters in the bottom line that made it look misaligned. That or I was A/B-tested.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256558008,256558008,src/script/descriptor.cpp
instagibbs,2019-02-14T19:13:47Z,Analyze?,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r256972631,256972631,src/rpc/misc.cpp
flack,2019-02-14T20:39:59Z,"@instagibbs it's funny, I stumbled across this, too, and did a little search on analyse/analyze in the code base, it's almost evenly split. So it would probably be better to do a separate PR that standardizes (standardises?) on either the British or American spelling",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257003375,257003375,src/rpc/misc.cpp
gmaxwell,2019-02-14T21:04:49Z,"I am not a fan of PRs to go around switching between different english styles, especially in comments.  All of them are valid, all can be mutually read by english speakers.  Trying to maintain consistency would just mean a never ending sequence of fixups PRs.   \n\nWe have a finite amount of resources to handle changes, they should be conserved for efforts that improve the capability or reliabil",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257011433,257011433,src/rpc/misc.cpp
flack,2019-02-14T21:09:18Z,"I'm not saying it should necessarily be changed, but changing it in this PR only will not really add anything wrt consistency either (since analyze/analyse appear in more or less the same frequency in the code base). So... leave it as is?",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257012910,257012910,src/rpc/misc.cpp
instagibbs,2019-02-14T21:47:36Z,"I had no idea it was a valid word, haha. I retract the comment!",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257025888,257025888,src/rpc/misc.cpp
instagibbs,2019-02-14T21:47:56Z,"I thought it was a misspelling of ""analysis"" which made no grammatical sense.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257026006,257026006,src/rpc/misc.cpp
instagibbs,2019-02-14T23:55:12Z,absolutely not blocking nit: just use `descriptor = descriptor[:-9]` to make it clear it's just dropping checksum,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257060549,257060549,test/functional/rpc_deriveaddresses.py
promag,2019-02-15T16:50:22Z,"Instead of adding the new argument with a default value, why not create a new function `ParseChecked`? From the call site it is more clear, especially since it's statically defined where checksum is needed.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257311306,257311306,src/script/descriptor.h
promag,2019-02-15T19:09:10Z,"Or you could do `auto desc = Parse(desc_str, provider, /* require_checksum = */ true);`.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257355945,257355945,src/script/descriptor.h
sipa,2019-02-15T22:18:35Z,Did the latter.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257409793,257409793,src/script/descriptor.h
sipa,2019-02-15T22:18:44Z,Done.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257409832,257409832,test/functional/rpc_deriveaddresses.py
promag,2019-02-16T00:34:56Z,"nit, could update function comment and note that checksum is always checked if present.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257433626,257433626,src/script/descriptor.h
promag,2019-02-16T00:38:35Z,"nit, `> 0`.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434116,257434116,src/script/descriptor.cpp
promag,2019-02-16T00:39:46Z,"nit, `resize(8)`? And then below `ret[j] = ...`.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434247,257434247,src/script/descriptor.cpp
promag,2019-02-16T00:46:18Z,"nit, could avoid linear search by having an array to map to pos\n```cpp\nstatic int CHAR_POS[] = { ... }; // -1 if invalid\n...\nint pos = CHAR_POS[ch];\nif (pos == -1) return """";\n```",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257434943,257434943,src/script/descriptor.cpp
promag,2019-02-16T00:51:24Z,"nit, could have a test for this error.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257435477,257435477,src/rpc/misc.cpp
promag,2019-02-16T00:58:50Z,"Could be checked before calling `DescriptorChecksum`?\n```cpp\nif (check_split[1].size() != 8) return nullptr;\nauto checksum = DescriptorChecksum(check_split[0]);\n```",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257436194,257436194,src/script/descriptor.cpp
promag,2019-02-16T00:59:05Z,"nit, `.empty()`.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257436215,257436215,src/script/descriptor.cpp
sipa,2019-02-16T06:31:56Z,Done.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449076,257449076,src/script/descriptor.h
sipa,2019-02-16T06:32:01Z,Done.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449080,257449080,src/script/descriptor.cpp
sipa,2019-02-16T06:32:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449087,257449087,src/script/descriptor.cpp
sipa,2019-02-16T06:32:28Z,I don't think the extra code is worth the performance gain.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449092,257449092,src/script/descriptor.cpp
sipa,2019-02-16T06:32:48Z,There is (rpc_deriveaddresses functional test).,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449099,257449099,src/rpc/misc.cpp
sipa,2019-02-16T06:32:57Z,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449103,257449103,src/script/descriptor.cpp
sipa,2019-02-16T06:37:34Z,Done.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257449216,257449216,src/script/descriptor.cpp
meshcollider,2019-02-16T11:12:30Z,"I'm not sure if I'm reading this wrong, but isn't the fourth symbol in the wrong order, shouldn't this be `(p(c) / 32) + 3 * (p(b) / 32) + 9 * (p(a) / 32)`?",https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257456750,257456750,src/script/descriptor.cpp
promag,2019-02-16T11:15:52Z,Not for getdescriptorinfo.,https://github.com/bitcoin/bitcoin/pull/15368#discussion_r257456836,257456836,src/rpc/misc.cpp
