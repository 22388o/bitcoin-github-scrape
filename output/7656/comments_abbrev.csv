laanwj,2016-03-11T07:35:26Z,"> For example, calling listunspents with my wallet results in 313ms in EncodeBase58 whereas before was 578ms.\n\nInteresting result. I was not aware anything was bottlenecked by base58 encoding.\nAs you've demonstrated a concrete performance improvement: concept ACK\n",https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-195234142,195234142,
gmaxwell,2016-03-11T07:47:23Z,"Indeed, thanks for the concrete result. Concept ack.\n",https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-195238468,195238468,
laanwj,2016-03-11T08:49:52Z,"Ping @luke-jr, I think it makes sense for you to review this because of libbase58\n",https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-195262107,195262107,
sipa,2016-03-12T17:23:47Z,"Untested ACK.\n\nThis should result in an asymptotic 2x speedup. I didn't expect that it would matter anywhere, but as it seems it does, great.\n",https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-195777335,195777335,
jtimon,2016-03-16T17:54:00Z,"Very nice, utACK besides nit.\n",https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-197457602,197457602,
dcousens,2016-03-17T01:20:38Z,utACK 3252208\n,https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-197635223,197635223,
fanatid,2016-03-18T10:54:16Z,https://github.com/cryptocoinjs/base-x/blob/d33156e62ea435073e4b73640f433756124f89d8/src/basex.cc#L51\nanother base58 encoding implementation (it was attempt speed up base58 for node.js)\n@promag if you apply `.reserve` to `digits` I think it can be even faster than it is now.\n,https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-198304587,198304587,
luke-jr,2016-03-20T00:06:12Z,Concept ACK and (in-depth) utACK 3252208cb10be645bae415c90fb2ed8217838490\n,https://github.com/bitcoin/bitcoin/pull/7656#issuecomment-198812054,198812054,
MarcoFalke,2016-03-09T10:01:51Z,Nit: Shouldn't this comment go up one line?\n,https://github.com/bitcoin/bitcoin/pull/7656#discussion_r55495527,55495527,src/base58.cpp
promag,2016-03-09T10:09:56Z,:+1:\n,https://github.com/bitcoin/bitcoin/pull/7656#discussion_r55496562,55496562,src/base58.cpp
jtimon,2016-03-16T17:53:27Z,"Do you really need both `i` and `length`?\nIt seems you could simply `++length;` here. I see your `i < length` condition, but I don't see how can it possibly be ever true.\n",https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56383345,56383345,src/base58.cpp
fanatid,2016-03-17T09:36:08Z,"It isn't simply `++length`, it can be `length += 0|1|2`, but there is possible to remove `i`:\n`length = it - b58.begin()`\n",https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56476584,56476584,src/base58.cpp
fanatid,2016-03-17T09:37:00Z,Wouldn't `++it` faster than `it++`?\n,https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56476755,56476755,src/base58.cpp
MarcoFalke,2016-03-17T09:52:08Z,"Presumably, yes: http://stackoverflow.com/a/35085/2084795\n",https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56478626,56478626,src/base58.cpp
laanwj,2016-03-17T11:27:13Z,for iterators that may well be the case (prefix increment saves a copy)\n,https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56489636,56489636,src/base58.cpp
jtimon,2016-03-17T19:05:34Z,"mhmm, I need to read this more deeply for an utACK, I think. I retire my utACK but maintain the concept ACK.\n",https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56560564,56560564,src/base58.cpp
jtimon,2016-03-17T19:22:17Z,"This should depend on the compiler and target machine anyway, but it is my understanding that in x86 there are separated instructions with different performance (how big is the difference I have no idea). I also suspect that many compilers are smart enough to do this for you.\nSo if it may not do anything but if it may do something good, why not?\nOf course this is not to say we should do it every",https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56562954,56562954,src/base58.cpp
laanwj,2016-03-18T09:59:53Z,"> This should depend on the compiler and target machine anyway, but it is my understanding that in x86 there are separated instructions with different performance\n\nFor integers the compiler is certainly smart enough that there is no difference between prefix and postfix ++, if bare (the result is not actually used). \n\nBut this doesn't have much to do with the instructions, just with language d",https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56634284,56634284,src/base58.cpp
luke-jr,2016-03-20T00:04:46Z,This could be transformed into an assert(it != b58.rend()); within the loop.\n,https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56757169,56757169,src/base58.cpp
luke-jr,2016-03-20T00:05:14Z,Maybe change it++ to ++it while we're optimising... (it++ creates an unnecessary copy of the iterator)\n,https://github.com/bitcoin/bitcoin/pull/7656#discussion_r56757175,56757175,src/base58.cpp
