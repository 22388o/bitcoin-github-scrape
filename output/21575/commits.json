[
  {
    "sha": "faf843c07f99f91603e08ea858f972516f1d669a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY4NDNjMDdmOTlmOTE2MDNlMDhlYTg1OGY5NzI1MTZmMWQ2Njlh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T18:38:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T18:39:14Z"
      },
      "message": "refactor: Move load block thread into ChainstateManager",
      "tree": {
        "sha": "82a32e12bf9a33c3a5507131463ba9f0b7869b10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82a32e12bf9a33c3a5507131463ba9f0b7869b10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf843c07f99f91603e08ea858f972516f1d669a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjulwv/Q2f8E/V6EUYE/DSADFWB29xfLjq2wa3+3DP7KCMHzCh2wg6LyltMlcP+\n7V1NQ8UGvwzOFFLiMnSVl/DrPNspYJuAuiCGLa0p/1RyOgEHqfxtQtjVBID8UhU7\nwLOOsg3GrqI/+j3wYTcZ1lznMkL8EqcUZTGnfA+WrYVbQluKVY2LTan64NVJGUfI\n2cVKbIqZ0STOc/i7/yXKDhxBYx5dNX6kInLohh6fQbZnobkvsYgTEW8Sercxl520\nhMaT2LKF5/phqOqSdzjqhRN9DdV9e1l69Q4QEO0gozCZUy+434Rg75hh+QjD8al8\nqU9OlE8dDLX6y9I00tERN/TeET9yBK052twrVvFI87pSxWbHe8KhBW1Ghui6HfBZ\nA1h0txry1oDgCM2SzJUUjcVGwm/68C+AQyBF9Db5cVhGCp0ULpF3EGxsFH/meqZ6\nH+ZDJutUiUYUnHdKGVGpaz4ZkL1yGADHjkL6bLkCsZthqGv2iQQt92kzhyxZHG4p\nYhtcfcgS\n=XT8F\n-----END PGP SIGNATURE-----",
        "payload": "tree 82a32e12bf9a33c3a5507131463ba9f0b7869b10\nparent e08f3193b543017702d000c2263bccbefa981c14\nauthor MarcoFalke <falke.marco@gmail.com> 1617388708 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1617388754 +0200\n\nrefactor: Move load block thread into ChainstateManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf843c07f99f91603e08ea858f972516f1d669a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf843c07f99f91603e08ea858f972516f1d669a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf843c07f99f91603e08ea858f972516f1d669a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e08f3193b543017702d000c2263bccbefa981c14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08f3193b543017702d000c2263bccbefa981c14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e08f3193b543017702d000c2263bccbefa981c14"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7e963e81902d14f9b6523f840cd2300c4810284e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf843c07f99f91603e08ea858f972516f1d669a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf843c07f99f91603e08ea858f972516f1d669a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faf843c07f99f91603e08ea858f972516f1d669a",
        "patch": "@@ -155,8 +155,6 @@ static fs::path GetPidFile(const ArgsManager& args)\n \n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n-static std::thread g_load_block;\n-\n void Interrupt(NodeContext& node)\n {\n     InterruptHTTPServer();\n@@ -220,7 +218,7 @@ void Shutdown(NodeContext& node)\n     // After everything has been shut down, but before things get flushed, stop the\n     // CScheduler/checkqueue, scheduler and load block thread.\n     if (node.scheduler) node.scheduler->stop();\n-    if (g_load_block.joinable()) g_load_block.join();\n+    if (node.chainman && node.chainman->m_load_block.joinable()) node.chainman->m_load_block.join();\n     StopScriptCheckWorkerThreads();\n \n     // After the threads that potentially access these pointers have been stopped,\n@@ -1880,7 +1878,7 @@ bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAn\n         vImportFiles.push_back(strFile);\n     }\n \n-    g_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\", [=, &chainman, &args] {\n+    chainman.m_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\", [=, &chainman, &args] {\n         ThreadImport(chainman, vImportFiles, args);\n     });\n "
      },
      {
        "sha": "3f7e967ec7671669f389cc96618316cc4c4c121c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf843c07f99f91603e08ea858f972516f1d669a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf843c07f99f91603e08ea858f972516f1d669a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=faf843c07f99f91603e08ea858f972516f1d669a",
        "patch": "@@ -35,6 +35,7 @@\n #include <set>\n #include <stdint.h>\n #include <string>\n+#include <thread>\n #include <utility>\n #include <vector>\n \n@@ -869,6 +870,7 @@ class ChainstateManager\n     friend CChain& ChainActive();\n \n public:\n+    std::thread m_load_block;\n     //! A single BlockManager instance is shared across each constructed\n     //! chainstate to avoid duplicating block metadata.\n     BlockManager m_blockman GUARDED_BY(::cs_main);"
      }
    ]
  },
  {
    "sha": "fa413f07a14744e7d7f7746e861aabd9cf938f61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQxM2YwN2ExNDc0NGU3ZDdmNzc0NmU4NjFhYWJkOWNmOTM4ZjYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T17:17:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-04T16:07:24Z"
      },
      "message": "move-only: Move ThreadImport to blockstorage\n\nCan be reviewed with the git options\n--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space",
      "tree": {
        "sha": "9dcc034c59e07dbf0ccfec1699583f57d1dcd223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dcc034c59e07dbf0ccfec1699583f57d1dcd223"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa413f07a14744e7d7f7746e861aabd9cf938f61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhrqQv+K2RWA+tZFFFUVhPQ1vB4dePt7ZWkeUo7cY8TGwr5zQ1TOz2j7st6PmF8\nJcV0T/JRjrqb4Mtv2/lcPwiizErzuHeyLiGPDSuRYGD/30nh3tNH5d7SacT2OysO\nsMUJeNymCJWvBRIcCfR1O57u5iHU87n1TiMEY8EpprJ2R582vrB2yZssN3dfSl6W\ni9QWmMM/TQrzFZSYl6L9hsZb8uaaPjt0f6HIlM/Iu0IEoHDNvm/89NYIcl5GsU74\n/y/a1jkBEpY7ZBua5s+3IJEa1BrQkeLa9iksAbYY8s2nnhGHPm3P0n/JCPPWwZLb\n1G1AmAgH7mCDHjjly7TW2OqZ1uKIiJzmayv3CFbfPrEywtqM7g1goJg0xSubo36f\ntP9+YkV9Ss+Vf8IbsjV/K3uCLbttS/iKhMe14Z9wVmX8opojAhPzyl1z4VDyGi0X\noK3Ub110dVapkdPvQAS9Ly0FSaAADcclNBQ964rGCmDuqosY6MLYsKSxeSWPw8Dk\nK14kMHKC\n=738q\n-----END PGP SIGNATURE-----",
        "payload": "tree 9dcc034c59e07dbf0ccfec1699583f57d1dcd223\nparent faf843c07f99f91603e08ea858f972516f1d669a\nauthor MarcoFalke <falke.marco@gmail.com> 1617383820 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1617552444 +0200\n\nmove-only: Move ThreadImport to blockstorage\n\nCan be reviewed with the git options\n--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa413f07a14744e7d7f7746e861aabd9cf938f61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa413f07a14744e7d7f7746e861aabd9cf938f61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa413f07a14744e7d7f7746e861aabd9cf938f61/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf843c07f99f91603e08ea858f972516f1d669a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf843c07f99f91603e08ea858f972516f1d669a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf843c07f99f91603e08ea858f972516f1d669a"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 118,
      "deletions": 88
    },
    "files": [
      {
        "sha": "f0da4937e5dd959eaef5f4cfdabed5ca0e5b805a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fa413f07a14744e7d7f7746e861aabd9cf938f61",
        "patch": "@@ -174,6 +174,7 @@ BITCOIN_CORE_H = \\\n   netaddress.h \\\n   netbase.h \\\n   netmessagemaker.h \\\n+  node/blockstorage.h \\\n   node/coin.h \\\n   node/coinstats.h \\\n   node/context.h \\\n@@ -324,6 +325,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\\n+  node/blockstorage.cpp \\\n   node/coin.cpp \\\n   node/coinstats.cpp \\\n   node/context.cpp \\"
      },
      {
        "sha": "c7e8699d6b6f5a8096693bfe0df3bcb4a2ba3b6b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 88,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa413f07a14744e7d7f7746e861aabd9cf938f61",
        "patch": "@@ -16,7 +16,6 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <compat/sanity.h>\n-#include <consensus/validation.h>\n #include <fs.h>\n #include <hash.h>\n #include <httprpc.h>\n@@ -32,6 +31,7 @@\n #include <net_permissions.h>\n #include <net_processing.h>\n #include <netbase.h>\n+#include <node/blockstorage.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <policy/feerate.h>\n@@ -61,7 +61,6 @@\n #include <util/threadnames.h>\n #include <util/translation.h>\n #include <validation.h>\n-\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n \n@@ -90,7 +89,6 @@\n \n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n-static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -625,20 +623,6 @@ static void BlockNotifyGenesisWait(const CBlockIndex* pBlockIndex)\n     }\n }\n \n-struct CImportingNow\n-{\n-    CImportingNow() {\n-        assert(fImporting == false);\n-        fImporting = true;\n-    }\n-\n-    ~CImportingNow() {\n-        assert(fImporting == true);\n-        fImporting = false;\n-    }\n-};\n-\n-\n // If we're using -prune with -reindex, then delete block files that will be ignored by the\n // reindex.  Since reindexing works by starting at block file 0 and looping until a blockfile\n // is missing, do the same here to delete any later block files after a gap.  Also delete all\n@@ -691,77 +675,6 @@ static void StartupNotify(const ArgsManager& args)\n }\n #endif\n \n-static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n-{\n-    const CChainParams& chainparams = Params();\n-    ScheduleBatchPriority();\n-\n-    {\n-    CImportingNow imp;\n-\n-    // -reindex\n-    if (fReindex) {\n-        int nFile = 0;\n-        while (true) {\n-            FlatFilePos pos(nFile, 0);\n-            if (!fs::exists(GetBlockPosFilename(pos)))\n-                break; // No block files left to reindex\n-            FILE *file = OpenBlockFile(pos, true);\n-            if (!file)\n-                break; // This error is logged in OpenBlockFile\n-            LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            ::ChainstateActive().LoadExternalBlockFile(chainparams, file, &pos);\n-            if (ShutdownRequested()) {\n-                LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n-                return;\n-            }\n-            nFile++;\n-        }\n-        pblocktree->WriteReindexing(false);\n-        fReindex = false;\n-        LogPrintf(\"Reindexing finished\\n\");\n-        // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        ::ChainstateActive().LoadGenesisBlock(chainparams);\n-    }\n-\n-    // -loadblock=\n-    for (const fs::path& path : vImportFiles) {\n-        FILE *file = fsbridge::fopen(path, \"rb\");\n-        if (file) {\n-            LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            ::ChainstateActive().LoadExternalBlockFile(chainparams, file);\n-            if (ShutdownRequested()) {\n-                LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n-                return;\n-            }\n-        } else {\n-            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n-        }\n-    }\n-\n-    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-\n-    // We can't hold cs_main during ActivateBestChain even though we're accessing\n-    // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n-    // the relevant pointers before the ABC call.\n-    for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-        BlockValidationState state;\n-        if (!chainstate->ActivateBestChain(state, chainparams, nullptr)) {\n-            LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n-            StartShutdown();\n-            return;\n-        }\n-    }\n-\n-    if (args.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n-        LogPrintf(\"Stopping after block import\\n\");\n-        StartShutdown();\n-        return;\n-    }\n-    } // End scope of CImportingNow\n-    chainman.ActiveChainstate().LoadMempool(args);\n-}\n-\n /** Sanity checks\n  *  Ensure that Bitcoin is running in a usable environment with all\n  *  necessary library support."
      },
      {
        "sha": "235dbb1693bbfd4cd013af8a1b0f772661b1c289",
        "filename": "src/node/blockstorage.cpp",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=fa413f07a14744e7d7f7746e861aabd9cf938f61",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockstorage.h>\n+\n+#include <chainparams.h>\n+#include <fs.h>\n+#include <shutdown.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+struct CImportingNow {\n+    CImportingNow()\n+    {\n+        assert(fImporting == false);\n+        fImporting = true;\n+    }\n+\n+    ~CImportingNow()\n+    {\n+        assert(fImporting == true);\n+        fImporting = false;\n+    }\n+};\n+\n+void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n+{\n+    const CChainParams& chainparams = Params();\n+    ScheduleBatchPriority();\n+\n+    {\n+        CImportingNow imp;\n+\n+        // -reindex\n+        if (fReindex) {\n+            int nFile = 0;\n+            while (true) {\n+                FlatFilePos pos(nFile, 0);\n+                if (!fs::exists(GetBlockPosFilename(pos)))\n+                    break; // No block files left to reindex\n+                FILE* file = OpenBlockFile(pos, true);\n+                if (!file)\n+                    break; // This error is logged in OpenBlockFile\n+                LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n+                ::ChainstateActive().LoadExternalBlockFile(chainparams, file, &pos);\n+                if (ShutdownRequested()) {\n+                    LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n+                    return;\n+                }\n+                nFile++;\n+            }\n+            pblocktree->WriteReindexing(false);\n+            fReindex = false;\n+            LogPrintf(\"Reindexing finished\\n\");\n+            // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n+            ::ChainstateActive().LoadGenesisBlock(chainparams);\n+        }\n+\n+        // -loadblock=\n+        for (const fs::path& path : vImportFiles) {\n+            FILE* file = fsbridge::fopen(path, \"rb\");\n+            if (file) {\n+                LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n+                ::ChainstateActive().LoadExternalBlockFile(chainparams, file);\n+                if (ShutdownRequested()) {\n+                    LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n+                    return;\n+                }\n+            } else {\n+                LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n+            }\n+        }\n+\n+        // scan for better chains in the block chain database, that are not yet connected in the active best chain\n+\n+        // We can't hold cs_main during ActivateBestChain even though we're accessing\n+        // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+        // the relevant pointers before the ABC call.\n+        for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+            BlockValidationState state;\n+            if (!chainstate->ActivateBestChain(state, chainparams, nullptr)) {\n+                LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n+                StartShutdown();\n+                return;\n+            }\n+        }\n+\n+        if (args.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n+            LogPrintf(\"Stopping after block import\\n\");\n+            StartShutdown();\n+            return;\n+        }\n+    } // End scope of CImportingNow\n+    chainman.ActiveChainstate().LoadMempool(args);\n+}"
      },
      {
        "sha": "d81b39f9f933be11e77f4f7d74a8d2af9ef9c6ea",
        "filename": "src/node/blockstorage.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa413f07a14744e7d7f7746e861aabd9cf938f61/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=fa413f07a14744e7d7f7746e861aabd9cf938f61",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n+#define BITCOIN_NODE_BLOCKSTORAGE_H\n+\n+#include <vector>\n+\n+#include <fs.h>\n+\n+class ArgsManager;\n+class ChainstateManager;\n+\n+static constexpr bool DEFAULT_STOPAFTERBLOCKIMPORT{false};\n+\n+void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args);\n+\n+#endif // BITCOIN_NODE_BLOCKSTORAGE_H"
      }
    ]
  },
  {
    "sha": "fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkxYjJiMmIzNDQ3YTM2NDVlNzk1OGM3ZGM0ZTE5NDZhNjljYjlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T18:49:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-04T16:08:36Z"
      },
      "message": "move-only: Move AbortNode to shutdown\n\nCan be reviewed with the git option\n--color-moved=dimmed-zebra",
      "tree": {
        "sha": "58715475a162cc790608a10b3c016ba015201094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58715475a162cc790608a10b3c016ba015201094"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjxdAv/QyLnKLpcoKeuaXq1BszYyrX5wV1MdMKOQYUixmL0S4IGr9RSF5YuqTXN\nmhdt7dDcRo9vDliy/YrW/jQ0Cx1XyqZUzIb20a/A3vv2x91/V3xo2m0yxSIGTKFJ\n9M7I+BO1bQuVZT+yF/GaQB53AyLvagv+XTbI7d4EYMwNagDbvFXUfBfSQ3MdKCAA\n8RUMiidZ3VMoUFsZCnYrdI9UcFfvMgL6On/TAlQ5xS1hP6nuS1F3UU2WyHMYr1Nb\n51Dek3qZ4oG2CyGW5R4rvbB+ZSASjlP/0ZDjDau/nsqfSU5xS+tOwZihIllDLAh+\nbcAoG551LG/kkleQnYmR355E1FX0lSF8l3490adkIoh5cfQ/Yyp0m06kot2p7oFo\ne/a6JhlY2RJBKrbu4FvSImXfTEQ7ZA29gmZmn8GH1zhwBxjIH4lGHMq0N3XujVUd\nQo7J2IL+xQAvq3lpgZTEQq9USm5A+gkVnSVNrpPhAI/LDk70wSD+JnrspLegt0tJ\nPqVp8Bg8\n=9Qu5\n-----END PGP SIGNATURE-----",
        "payload": "tree 58715475a162cc790608a10b3c016ba015201094\nparent fa413f07a14744e7d7f7746e861aabd9cf938f61\nauthor MarcoFalke <falke.marco@gmail.com> 1617389341 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1617552516 +0200\n\nmove-only: Move AbortNode to shutdown\n\nCan be reviewed with the git option\n--color-moved=dimmed-zebra\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa413f07a14744e7d7f7746e861aabd9cf938f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa413f07a14744e7d7f7746e861aabd9cf938f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa413f07a14744e7d7f7746e861aabd9cf938f61"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 19,
      "deletions": 13
    },
    "files": [
      {
        "sha": "35faf3c41294bd5dd93495060ce4193eb735a5bf",
        "filename": "src/shutdown.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/src/shutdown.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/src/shutdown.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/shutdown.cpp?ref=fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
        "patch": "@@ -6,7 +6,9 @@\n #include <shutdown.h>\n \n #include <logging.h>\n+#include <node/ui_interface.h>\n #include <util/tokenpipe.h>\n+#include <warnings.h>\n \n #include <config/bitcoin-config.h>\n \n@@ -16,6 +18,18 @@\n #include <condition_variable>\n #endif\n \n+bool AbortNode(const std::string& strMessage, bilingual_str user_message)\n+{\n+    SetMiscWarning(Untranslated(strMessage));\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    if (user_message.empty()) {\n+        user_message = _(\"A fatal internal error occurred, see debug.log for details\");\n+    }\n+    AbortError(user_message);\n+    StartShutdown();\n+    return false;\n+}\n+\n static std::atomic<bool> fRequestShutdown(false);\n #ifdef WIN32\n /** On windows it is possible to simply use a condition variable. */"
      },
      {
        "sha": "ff56c6bd87230e6d9fcde51ed1f054d0a032f6b1",
        "filename": "src/shutdown.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/src/shutdown.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/src/shutdown.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/shutdown.h?ref=fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
        "patch": "@@ -6,6 +6,11 @@\n #ifndef BITCOIN_SHUTDOWN_H\n #define BITCOIN_SHUTDOWN_H\n \n+#include <util/translation.h> // For bilingual_str\n+\n+/** Abort with a message */\n+bool AbortNode(const std::string& strMessage, bilingual_str user_message = bilingual_str{});\n+\n /** Initialize shutdown state. This must be called before using either StartShutdown(),\n  * AbortShutdown() or WaitForShutdown(). Calling ShutdownRequested() is always safe.\n  */"
      },
      {
        "sha": "6f184780c84146acce8e9259a635327a860791df",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
        "patch": "@@ -1636,19 +1636,6 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)\n     return true;\n }\n \n-/** Abort with a message */\n-static bool AbortNode(const std::string& strMessage, bilingual_str user_message = bilingual_str())\n-{\n-    SetMiscWarning(Untranslated(strMessage));\n-    LogPrintf(\"*** %s\\n\", strMessage);\n-    if (user_message.empty()) {\n-        user_message = _(\"A fatal internal error occurred, see debug.log for details\");\n-    }\n-    AbortError(user_message);\n-    StartShutdown();\n-    return false;\n-}\n-\n static bool AbortNode(BlockValidationState& state, const std::string& strMessage, const bilingual_str& userMessage = bilingual_str())\n {\n     AbortNode(strMessage, userMessage);"
      }
    ]
  },
  {
    "sha": "fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBjN2Q5YWQyNGQzYzk1MTVkM2Y5YzEzNmFmNDA3MWNiZDc5MDU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T18:42:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-05T18:26:14Z"
      },
      "message": "move-only: Move *Disk functions to blockstorage\n\nCan be reviewed with the git options\n--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space",
      "tree": {
        "sha": "ab4694ab21d018246826d8ff4a87bccdf7b8d690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab4694ab21d018246826d8ff4a87bccdf7b8d690"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5+wv/QZJWULRZWtLgMGWIvESrJkC0dIsLQXQnZ6B+YX7HQ3GS1c/9xPwplS+D\npFoFDG1g7zmtK8QJUTGQEdeU23jlsQpHuH7HMiOfs9pldxHZnFNqukq9iGcwx1va\nqW/+N9KO4VNN8UI8GmVfGZdTamvTMXShDQqPJ5kaI54YUJcTV5vl6V/9pE4QvJf/\n6Et/RD9azdH9vCDHCfzupxC5pb2Fd/l8wPjF9OTjR7Q+onY7/vontdSRZxg+l7tR\nV17VkkkvRIupxUvtw1FPDCEuZCZTyvBarjSYk5tNp1+cCnAkRA6ae34x1mRS7zqO\n5uDkGxjy9DBaDG/g10lZ+vC55u2tRJILkoWoezCoS5pR5h2dnZMgWdBuWUSJpyH6\nrTEI/B0juUDGuZsv3mKUk9au7oQNlBrnRUHmFVlKsBlSPb8b33lIYa6bQAThhUGs\n9UCXiOkwRsPZ342pPxsKCuIf8cH8CngeANhZszwc0aqVnd+K0xhxiIvDQVxCVsIT\n2LDdRAmC\n=NyFF\n-----END PGP SIGNATURE-----",
        "payload": "tree ab4694ab21d018246826d8ff4a87bccdf7b8d690\nparent fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c\nauthor MarcoFalke <falke.marco@gmail.com> 1617388925 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1617647174 +0200\n\nmove-only: Move *Disk functions to blockstorage\n\nCan be reviewed with the git options\n--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa91b2b2b3447a3645e7958c7dc4e1946a69cb9c"
      }
    ],
    "stats": {
      "total": 333,
      "additions": 181,
      "deletions": 152
    },
    "files": [
      {
        "sha": "9e637c9c6f306306566afbadb4b779dfd2e90faa",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -4,12 +4,13 @@\n \n #include <chainparams.h>\n #include <index/base.h>\n+#include <node/blockstorage.h>\n #include <node/ui_interface.h>\n #include <shutdown.h>\n #include <tinyformat.h>\n #include <util/system.h>\n #include <util/translation.h>\n-#include <validation.h>\n+#include <validation.h> // For g_chainman\n #include <warnings.h>\n \n constexpr char DB_BEST_BLOCK = 'B';"
      },
      {
        "sha": "154d7a7027048a6a59b3967dc939001a03475f70",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -6,8 +6,8 @@\n \n #include <dbwrapper.h>\n #include <index/blockfilterindex.h>\n+#include <node/blockstorage.h>\n #include <util/system.h>\n-#include <validation.h>\n \n /* The index database stores three items for each block: the disk location of the encoded filter,\n  * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by"
      },
      {
        "sha": "61faf7e1ee8f4d8945dd80d90abc6ee5e57f248a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -16,6 +16,7 @@\n #include <merkleblock.h>\n #include <netbase.h>\n #include <netmessagemaker.h>\n+#include <node/blockstorage.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/block.h>"
      },
      {
        "sha": "de54bf1f421f6f127d9950874363af93eea5407e",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 141,
        "deletions": 1,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -2,14 +2,154 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <blockstorage.h>\n+#include <node/blockstorage.h>\n \n+#include <chain.h>\n #include <chainparams.h>\n+#include <flatfile.h>\n #include <fs.h>\n+#include <pow.h>\n #include <shutdown.h>\n+#include <signet.h>\n+#include <streams.h>\n #include <util/system.h>\n #include <validation.h>\n \n+// From validation. TODO move here\n+bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, CChain& active_chain, uint64_t nTime, bool fKnown = false);\n+\n+static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+{\n+    // Open history file to append\n+    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n+\n+    // Write index header\n+    unsigned int nSize = GetSerializeSize(block, fileout.GetVersion());\n+    fileout << messageStart << nSize;\n+\n+    // Write block\n+    long fileOutPos = ftell(fileout.Get());\n+    if (fileOutPos < 0)\n+        return error(\"WriteBlockToDisk: ftell failed\");\n+    pos.nPos = (unsigned int)fileOutPos;\n+    fileout << block;\n+\n+    return true;\n+}\n+\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n+{\n+    block.SetNull();\n+\n+    // Open history file to read\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n+\n+    // Read block\n+    try {\n+        filein >> block;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n+    }\n+\n+    // Check the header\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+\n+    // Signet only: check block solution\n+    if (consensusParams.signet_blocks && !CheckSignetBlockSolution(block, consensusParams)) {\n+        return error(\"ReadBlockFromDisk: Errors in block solution at %s\", pos.ToString());\n+    }\n+\n+    return true;\n+}\n+\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    FlatFilePos blockPos;\n+    {\n+        LOCK(cs_main);\n+        blockPos = pindex->GetBlockPos();\n+    }\n+\n+    if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n+        return false;\n+    if (block.GetHash() != pindex->GetBlockHash())\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n+                     pindex->ToString(), pindex->GetBlockPos().ToString());\n+    return true;\n+}\n+\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)\n+{\n+    FlatFilePos hpos = pos;\n+    hpos.nPos -= 8; // Seek back 8 bytes for meta header\n+    CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n+    }\n+\n+    try {\n+        CMessageHeader::MessageStartChars blk_start;\n+        unsigned int blk_size;\n+\n+        filein >> blk_start >> blk_size;\n+\n+        if (memcmp(blk_start, message_start, CMessageHeader::MESSAGE_START_SIZE)) {\n+            return error(\"%s: Block magic mismatch for %s: %s versus expected %s\", __func__, pos.ToString(),\n+                         HexStr(blk_start),\n+                         HexStr(message_start));\n+        }\n+\n+        if (blk_size > MAX_SIZE) {\n+            return error(\"%s: Block data is larger than maximum deserialization size for %s: %s versus %s\", __func__, pos.ToString(),\n+                         blk_size, MAX_SIZE);\n+        }\n+\n+        block.resize(blk_size); // Zeroing of memory is intentional here\n+        filein.read((char*)block.data(), blk_size);\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Read from block file failed: %s for %s\", __func__, e.what(), pos.ToString());\n+    }\n+\n+    return true;\n+}\n+\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n+{\n+    FlatFilePos block_pos;\n+    {\n+        LOCK(cs_main);\n+        block_pos = pindex->GetBlockPos();\n+    }\n+\n+    return ReadRawBlockFromDisk(block, block_pos, message_start);\n+}\n+\n+/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)\n+{\n+    unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n+    FlatFilePos blockPos;\n+    if (dbp != nullptr)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n+        error(\"%s: FindBlockPos failed\", __func__);\n+        return FlatFilePos();\n+    }\n+    if (dbp == nullptr) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n+            AbortNode(\"Failed to write block\");\n+            return FlatFilePos();\n+        }\n+    }\n+    return blockPos;\n+}\n+\n struct CImportingNow {\n     CImportingNow()\n     {"
      },
      {
        "sha": "3b546f0719296ce3a391922dcf61e8de5e22707d",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -5,15 +5,36 @@\n #ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n #define BITCOIN_NODE_BLOCKSTORAGE_H\n \n+#include <cstdint>\n #include <vector>\n \n #include <fs.h>\n+#include <protocol.h> // For CMessageHeader::MessageStartChars\n \n class ArgsManager;\n+class CBlock;\n+class CBlockIndex;\n+class CBlockUndo;\n+class CChain;\n+class CChainParams;\n class ChainstateManager;\n+struct FlatFilePos;\n+namespace Consensus {\n+struct Params;\n+}\n \n static constexpr bool DEFAULT_STOPAFTERBLOCKIMPORT{false};\n \n+/** Functions for disk access for blocks */\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n+\n+bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n+\n+FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp);\n+\n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args);\n \n #endif // BITCOIN_NODE_BLOCKSTORAGE_H"
      },
      {
        "sha": "264bec58f96937db5b5db2e385232b390cdf648e",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <addrdb.h>\n #include <banman.h>\n-#include <boost/signals2/signal.hpp>\n #include <chain.h>\n #include <chainparams.h>\n #include <init.h>\n@@ -17,6 +16,7 @@\n #include <net_processing.h>\n #include <netaddress.h>\n #include <netbase.h>\n+#include <node/blockstorage.h>\n #include <node/coin.h>\n #include <node/context.h>\n #include <node/transaction.h>\n@@ -53,6 +53,8 @@\n #include <optional>\n #include <utility>\n \n+#include <boost/signals2/signal.hpp>\n+\n using interfaces::BlockTip;\n using interfaces::Chain;\n using interfaces::FoundBlock;"
      },
      {
        "sha": "1398de19e31ef8bce1f32ee8be1a795a5efb0901",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -8,6 +8,7 @@\n #include <core_io.h>\n #include <httpserver.h>\n #include <index/txindex.h>\n+#include <node/blockstorage.h>\n #include <node/context.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>"
      },
      {
        "sha": "183fa502289b1d742dd6e076b9fc5a50460bf14a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -14,6 +14,7 @@\n #include <core_io.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n+#include <node/blockstorage.h>\n #include <node/coinstats.h>\n #include <node/context.h>\n #include <node/utxo_snapshot.h>"
      },
      {
        "sha": "527e9be87c1ea642513223d02001e6d721fff6fe",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -10,6 +10,7 @@\n #include <index/txindex.h>\n #include <key_io.h>\n #include <merkleblock.h>\n+#include <node/blockstorage.h>\n #include <node/coin.h>\n #include <node/context.h>\n #include <node/psbt.h>"
      },
      {
        "sha": "b8ab9d2344fe4bd31bb0c628ca35582f33039780",
        "filename": "src/test/util/blockfilter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/test/util/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/test/util/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/blockfilter.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -5,6 +5,7 @@\n #include <test/util/blockfilter.h>\n \n #include <chainparams.h>\n+#include <node/blockstorage.h>\n #include <validation.h>\n \n "
      },
      {
        "sha": "652282920ef90aed651a2a25bb8557819e102aa6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 137,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -21,6 +21,7 @@\n #include <index/txindex.h>\n #include <logging.h>\n #include <logging/timer.h>\n+#include <node/blockstorage.h>\n #include <node/coinstats.h>\n #include <node/ui_interface.h>\n #include <policy/policy.h>\n@@ -1148,123 +1149,6 @@ CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMe\n     return nullptr;\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// CBlock and CBlockIndex\n-//\n-\n-static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)\n-{\n-    // Open history file to append\n-    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n-\n-    // Write index header\n-    unsigned int nSize = GetSerializeSize(block, fileout.GetVersion());\n-    fileout << messageStart << nSize;\n-\n-    // Write block\n-    long fileOutPos = ftell(fileout.Get());\n-    if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk: ftell failed\");\n-    pos.nPos = (unsigned int)fileOutPos;\n-    fileout << block;\n-\n-    return true;\n-}\n-\n-bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n-{\n-    block.SetNull();\n-\n-    // Open history file to read\n-    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n-\n-    // Read block\n-    try {\n-        filein >> block;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n-    }\n-\n-    // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n-\n-    // Signet only: check block solution\n-    if (consensusParams.signet_blocks && !CheckSignetBlockSolution(block, consensusParams)) {\n-        return error(\"ReadBlockFromDisk: Errors in block solution at %s\", pos.ToString());\n-    }\n-\n-    return true;\n-}\n-\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n-    FlatFilePos blockPos;\n-    {\n-        LOCK(cs_main);\n-        blockPos = pindex->GetBlockPos();\n-    }\n-\n-    if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n-        return false;\n-    if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n-                pindex->ToString(), pindex->GetBlockPos().ToString());\n-    return true;\n-}\n-\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)\n-{\n-    FlatFilePos hpos = pos;\n-    hpos.nPos -= 8; // Seek back 8 bytes for meta header\n-    CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull()) {\n-        return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n-    }\n-\n-    try {\n-        CMessageHeader::MessageStartChars blk_start;\n-        unsigned int blk_size;\n-\n-        filein >> blk_start >> blk_size;\n-\n-        if (memcmp(blk_start, message_start, CMessageHeader::MESSAGE_START_SIZE)) {\n-            return error(\"%s: Block magic mismatch for %s: %s versus expected %s\", __func__, pos.ToString(),\n-                    HexStr(blk_start),\n-                    HexStr(message_start));\n-        }\n-\n-        if (blk_size > MAX_SIZE) {\n-            return error(\"%s: Block data is larger than maximum deserialization size for %s: %s versus %s\", __func__, pos.ToString(),\n-                    blk_size, MAX_SIZE);\n-        }\n-\n-        block.resize(blk_size); // Zeroing of memory is intentional here\n-        filein.read((char*)block.data(), blk_size);\n-    } catch(const std::exception& e) {\n-        return error(\"%s: Read from block file failed: %s for %s\", __func__, e.what(), pos.ToString());\n-    }\n-\n-    return true;\n-}\n-\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n-{\n-    FlatFilePos block_pos;\n-    {\n-        LOCK(cs_main);\n-        block_pos = pindex->GetBlockPos();\n-    }\n-\n-    return ReadRawBlockFromDisk(block, block_pos, message_start);\n-}\n-\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n {\n     int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n@@ -3218,7 +3102,8 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     }\n }\n \n-static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, CChain& active_chain, uint64_t nTime, bool fKnown = false)\n+// TODO move to blockstorage\n+bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, CChain& active_chain, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3695,25 +3580,6 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n     return true;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp) {\n-    unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n-    FlatFilePos blockPos;\n-    if (dbp != nullptr)\n-        blockPos = *dbp;\n-    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n-        error(\"%s: FindBlockPos failed\", __func__);\n-        return FlatFilePos();\n-    }\n-    if (dbp == nullptr) {\n-        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n-            AbortNode(\"Failed to write block\");\n-            return FlatFilePos();\n-        }\n-    }\n-    return blockPos;\n-}\n-\n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n {"
      },
      {
        "sha": "1eb010889dc881a41e323f44973ac6e500e40b2b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -300,15 +300,6 @@ class CScriptCheck\n /** Initializes the script-execution cache */\n void InitScriptExecutionCache();\n \n-\n-/** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n-\n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n-\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */"
      },
      {
        "sha": "25afa94d0f84aeaa70c3e1a6108e4eec7d04bebe",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -6,10 +6,11 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <node/blockstorage.h>\n #include <rpc/server.h>\n #include <streams.h>\n #include <util/system.h>\n-#include <validation.h>\n+#include <validation.h> // For cs_main\n #include <zmq/zmqutil.h>\n \n #include <zmq.h>"
      },
      {
        "sha": "ad2333a808e8b7890e064e3abd19fe117875b164",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "patch": "@@ -11,7 +11,9 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n-    \"index/blockfilterindex -> validation -> index/blockfilterindex\"\n+    \"node/blockstorage -> validation -> node/blockstorage\"\n+    \"index/blockfilterindex -> node/blockstorage -> validation -> index/blockfilterindex\"\n+    \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\""
      }
    ]
  },
  {
    "sha": "fa121b628d51bb0e25eb3fbd716881fa55527dc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEyMWI2MjhkNTFiYjBlMjVlYjNmYmQ3MTY4ODFmYTU1NTI3ZGM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T17:27:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-05T18:26:32Z"
      },
      "message": "blockstorage: [refactor] Use chainman reference where possible\n\nAlso, add missing { } for style.\n\nCan be reviewed with `--word-diff-regex=.`",
      "tree": {
        "sha": "160664d2aae030cb62f32bd13e6b1490c6fbe767",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/160664d2aae030cb62f32bd13e6b1490c6fbe767"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa121b628d51bb0e25eb3fbd716881fa55527dc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj7mwv/dE7purenjR0IXgh3npkN5hVTR0kBXH4dirdi3KYKCHi9DNBnfXkV417Z\nCd76AH3Ns5ytqmXUwOb3E0kIK3s+/0Cks4hQVx+o2iqBj6wc86cWst9SJOWP/HRH\njnetvbQX7XW99OB01CuwuBziGf27RsCkNSzvSy3nE8Vw99euEVDw5Hj6cuuaW3rp\nDA0vYHbTsW8MTVK1g4aZJfEYyLOg2vyPkj9fGc4lVCbKijNPySHYeWB9lOjHEVVK\nakDEiuH1Ll2ZbVjoI2VknAZBU5ZCmK8enpHrwChXO+9UGvDBtOMivIY8fKr9vu3S\nblhqVdAPa4/JDJ7diuOqzbzOB9SY5IUJRK1O/mdF1z7j6aTdYLj0WccxanCwF2+P\nDg5nQncSonAhvxnWKsxFjcfGIdW4EkIdKuC7967jdfXM9eCZaQWoOs4tlkRDsURp\nvrK00UczagMNKuclzPd6UsrvoDVsKIaJHQPg9C1QVQekLH2CW0Sj8Lfyj1NHaZjX\nEoww6vDh\n=j/75\n-----END PGP SIGNATURE-----",
        "payload": "tree 160664d2aae030cb62f32bd13e6b1490c6fbe767\nparent fa0c7d9ad24d3c9515d3f9c136af4071cbd79055\nauthor MarcoFalke <falke.marco@gmail.com> 1617384479 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1617647192 +0200\n\nblockstorage: [refactor] Use chainman reference where possible\n\nAlso, add missing { } for style.\n\nCan be reviewed with `--word-diff-regex=.`\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa121b628d51bb0e25eb3fbd716881fa55527dc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa121b628d51bb0e25eb3fbd716881fa55527dc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa121b628d51bb0e25eb3fbd716881fa55527dc7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c7d9ad24d3c9515d3f9c136af4071cbd79055"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 22,
      "deletions": 14
    },
    "files": [
      {
        "sha": "daed6605e87305cb0776fa507a8454cb60677da3",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 14,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa121b628d51bb0e25eb3fbd716881fa55527dc7/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa121b628d51bb0e25eb3fbd716881fa55527dc7/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=fa121b628d51bb0e25eb3fbd716881fa55527dc7",
        "patch": "@@ -22,17 +22,19 @@ static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessa\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n+    if (fileout.IsNull()) {\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n+    }\n \n     // Write index header\n     unsigned int nSize = GetSerializeSize(block, fileout.GetVersion());\n     fileout << messageStart << nSize;\n \n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n-    if (fileOutPos < 0)\n+    if (fileOutPos < 0) {\n         return error(\"WriteBlockToDisk: ftell failed\");\n+    }\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -45,20 +47,21 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n \n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n+    if (filein.IsNull()) {\n         return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n+    }\n \n     // Read block\n     try {\n         filein >> block;\n-    }\n-    catch (const std::exception& e) {\n+    } catch (const std::exception& e) {\n         return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams)) {\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+    }\n \n     // Signet only: check block solution\n     if (consensusParams.signet_blocks && !CheckSignetBlockSolution(block, consensusParams)) {\n@@ -76,11 +79,13 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n         blockPos = pindex->GetBlockPos();\n     }\n \n-    if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n+    if (!ReadBlockFromDisk(block, blockPos, consensusParams)) {\n         return false;\n-    if (block.GetHash() != pindex->GetBlockHash())\n+    }\n+    if (block.GetHash() != pindex->GetBlockHash()) {\n         return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n                      pindex->ToString(), pindex->GetBlockPos().ToString());\n+    }\n     return true;\n }\n \n@@ -135,8 +140,9 @@ FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_cha\n {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n-    if (dbp != nullptr)\n+    if (dbp != nullptr) {\n         blockPos = *dbp;\n+    }\n     if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n         error(\"%s: FindBlockPos failed\", __func__);\n         return FlatFilePos();\n@@ -177,13 +183,15 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n             int nFile = 0;\n             while (true) {\n                 FlatFilePos pos(nFile, 0);\n-                if (!fs::exists(GetBlockPosFilename(pos)))\n+                if (!fs::exists(GetBlockPosFilename(pos))) {\n                     break; // No block files left to reindex\n+                }\n                 FILE* file = OpenBlockFile(pos, true);\n-                if (!file)\n+                if (!file) {\n                     break; // This error is logged in OpenBlockFile\n+                }\n                 LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                ::ChainstateActive().LoadExternalBlockFile(chainparams, file, &pos);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file, &pos);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;\n@@ -194,15 +202,15 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n             fReindex = false;\n             LogPrintf(\"Reindexing finished\\n\");\n             // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            ::ChainstateActive().LoadGenesisBlock(chainparams);\n+            chainman.ActiveChainstate().LoadGenesisBlock(chainparams);\n         }\n \n         // -loadblock=\n         for (const fs::path& path : vImportFiles) {\n             FILE* file = fsbridge::fopen(path, \"rb\");\n             if (file) {\n                 LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-                ::ChainstateActive().LoadExternalBlockFile(chainparams, file);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;"
      }
    ]
  },
  {
    "sha": "fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRjZDNmNzhlMWRkMWFjZDdhNzc0ZjhmYWQ2OGRjNDcxZmY5ZTFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-04T16:19:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-06T07:34:21Z"
      },
      "message": "doc: Remove irrelevant link to GitHub\n\nThe doc nicely explains why the directory exists and it is\nirrelevant when it was introduced. Even if it was relevant,\nit could be trivially found out via `git log ./src/node/ | tail`\nwithout visiting GitHub",
      "tree": {
        "sha": "2d617d002034cbea8411f79344215b046960dd99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d617d002034cbea8411f79344215b046960dd99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiLUwv/SU8d/Q1DZDA995a6t8/+I6E0O5bZlLDTVyv3oIOc5gpt30+RBVLv+b6S\ncTP+l7Y8HZ/2NhhbOcISjJYXppVFmys5e9mNi6/6GH9B0e9iAIt3wAJRuJ6ld37C\n2PYHxmxqI1PjjhFLB9B3Py+WbcYCtfMFtXz82qqbcZz6ROePV3NJoGGz46Pr799C\n3LmIrfAfHJgo+XboUcnZJlH3MEA6QDS8Gjr/2gIw06Slz9lc69uyaSHyQemmt5/9\nNJByHKpl7zQCkS494asPLHdqO4bxYNZ62VXiQeLKFVEbywhD/g/AMPxfmUEtJnFb\nSGPYFCcjypjs8sFDJbuKcloHyuu78Nc6CTJ/izMsYEOgTXQFrYnTq3jh3ZjyH+sU\nsNRPoJcHYrkchOYmpFgiuxtsoLxAeNw4TjZ8AEcBK//IXNPh3Et2zacRQixLx87g\nAAPqQjFmkIFDSMv3OU+6k79BALNkriy2SO5Je4hZutK9I3CbuzGvhNxNqkqOcKTM\nzbhr1mxe\n=OZee\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d617d002034cbea8411f79344215b046960dd99\nparent fa121b628d51bb0e25eb3fbd716881fa55527dc7\nauthor MarcoFalke <falke.marco@gmail.com> 1617553149 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1617694461 +0200\n\ndoc: Remove irrelevant link to GitHub\n\nThe doc nicely explains why the directory exists and it is\nirrelevant when it was introduced. Even if it was relevant,\nit could be trivially found out via `git log ./src/node/ | tail`\nwithout visiting GitHub\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa121b628d51bb0e25eb3fbd716881fa55527dc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa121b628d51bb0e25eb3fbd716881fa55527dc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa121b628d51bb0e25eb3fbd716881fa55527dc7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ab5979594d480675f77b285c457309df7fa9219b",
        "filename": "src/node/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f/src/node/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f/src/node/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/README.md?ref=fadcd3f78e1dd1acd7a774f8fad68dc471ff9e1f",
        "patch": "@@ -15,8 +15,7 @@ As a rule of thumb, code in one of the [`src/node/`](./),\n calling code in the other directories directly, and only invoke it indirectly\n through the more limited [`src/interfaces/`](../interfaces/) classes.\n \n-The [`src/node/`](./) directory is a new directory introduced in\n-[#14978](https://github.com/bitcoin/bitcoin/pull/14978) and at the moment is\n+This directory is at the moment\n sparsely populated. Eventually more substantial files like\n [`src/validation.cpp`](../validation.cpp) and\n [`src/txmempool.cpp`](../txmempool.cpp) might be moved there."
      }
    ]
  }
]