[
  {
    "sha": "dd34570c451b522a8eedd7b4d1b4a9c305a5d631",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDM0NTcwYzQ1MWI1MjJhOGVlZGQ3YjRkMWI0YTljMzA1YTVkNjMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-25T08:20:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-25T08:32:34Z"
      },
      "message": "doc: Improve windows build instructions using Linux subsystem\n\nI did a build on a windows 10 laptop and took notes, and tried\nto improve the document:\n\n- It's the Linux subsystem for Windows, not the other way around.\n\n- Split out dependencies: general ones, 64-bit, 32-bit. Remove the\n  reference to `build-unix.md`, easy enough to be self-contained.\n\n- Place 64-bit instructions first. 99% will want these.\n\n- Installation instructions: recommend using `/` for prefix, same as we\n  do on gitian builds. This will allow copying the files to a usable\n  (from Windows) place using just `make DESTDIR=...`.\n\n- Remove double spaces / consistent width reformatting.",
      "tree": {
        "sha": "209e521d982ac06bbc86ca34e7fb79d010b5c3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/209e521d982ac06bbc86ca34e7fb79d010b5c3b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd34570c451b522a8eedd7b4d1b4a9c305a5d631",
      "comment_count": 3,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd34570c451b522a8eedd7b4d1b4a9c305a5d631",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd34570c451b522a8eedd7b4d1b4a9c305a5d631",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd34570c451b522a8eedd7b4d1b4a9c305a5d631/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d932159f3467cc197caaf281f34f3324e6b5bea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d932159f3467cc197caaf281f34f3324e6b5bea8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d932159f3467cc197caaf281f34f3324e6b5bea8"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 46,
      "deletions": 20
    },
    "files": [
      {
        "sha": "b6a047b9c380ba0a17c80d660b08ac1a1cc540f0",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 46,
        "deletions": 20,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd34570c451b522a8eedd7b4d1b4a9c305a5d631/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd34570c451b522a8eedd7b4d1b4a9c305a5d631/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=dd34570c451b522a8eedd7b4d1b4a9c305a5d631",
        "patch": "@@ -7,16 +7,18 @@ Most developers use cross-compilation from Ubuntu to build executables for\n Windows. This is also used to build the release binaries.\n \n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n-using the Windows Subsystem For Linux is the most straight forward.  If you are building with\n-an alternative method, please contribute the instructions here for others who are running versions\n+using the Windows Subsystem For Linux is the most straightforward. If you are building with\n+another method, please contribute the instructions here for others who are running versions\n of Windows that are not compatible with the Windows Subsystem for Linux.\n \n-Compiling with the Windows Subsystem For Linux\n--------------------\n+Compiling with Windows Subsystem For Linux\n+-------------------------------------------\n \n-With Windows 10, Microsoft has released a new feature named the\n-[Windows Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about).  This feature allows you to run a bash shell directly on Windows in an Ubuntu based\n-environment.  Within this environment you can cross compile for Windows without the need for a separate Linux VM or Server.\n+With Windows 10, Microsoft has released a new feature named the [Windows\n+Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about). This\n+feature allows you to run a bash shell directly on Windows in an Ubuntu based\n+environment. Within this environment you can cross compile for Windows without\n+the need for a separate Linux VM or Server.\n \n This feature is not supported in versions of Windows prior to Windows 10 or on Windows Server SKUs.\n \n@@ -37,9 +39,6 @@ To get the bash shell, you must first activate the feature in Windows.\n   * Create a new UNIX user account (this is a separate account from your Windows account)\n \n After the bash shell is active, you can follow the instructions below for Windows 64-bit Cross-compilation.\n-When building dependencies within the 'depends' folder, you may encounter an error building\n-the protobuf dependency.  If this occurs, re-run the command with sudo.  This is likely\n-a bug with the Windows Subsystem for Linux feature and may be fixed with a future update.\n \n Cross-compilation\n -------------------\n@@ -48,28 +47,55 @@ These steps can be performed on, for example, an Ubuntu VM. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n-Make sure you install the build requirements mentioned in\n-[build-unix.md](/doc/build-unix.md).\n-Then, install the toolchains and curl:\n+First, install the general dependencies:\n+\n+    sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl\n+\n+A host toolchain (`build-essential`) is necessary because some dependency\n+packages (such as `protobuf`) need to build host utilities that are used in the\n+build process.\n+\n+## Building for 64-bit Windows\n+\n+To build executables for Windows 64-bit, install the following dependencies:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev curl\n+    sudo apt-get install g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n \n-To build executables for Windows 32-bit:\n+Then build using:\n \n     cd depends\n-    make HOST=i686-w64-mingw32 -j4\n+    make HOST=x86_64-w64-mingw32 -j4\n     cd ..\n     ./autogen.sh # not required when building from tarball\n-    ./configure --prefix=`pwd`/depends/i686-w64-mingw32\n+    CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/\n     make\n \n-To build executables for Windows 64-bit:\n+## Building for 32-bit Windows\n+\n+To build executables for Windows 32-bit, install the following dependencies:\n+\n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev \n+\n+Then build using:\n \n     cd depends\n-    make HOST=x86_64-w64-mingw32 -j4\n+    make HOST=i686-w64-mingw32 -j4\n     cd ..\n     ./autogen.sh # not required when building from tarball\n-    ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n+    CONFIG_SITE=$PWD/depends/i686-w64-mingw32/share/config.site ./configure --prefix=/\n     make\n \n+## Depends system\n+\n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+\n+Installation\n+-------------\n+\n+After building using the Windows subsystem it can be useful to copy the compiled\n+executables to a directory on the windows drive in the same directory structure\n+as they appear in the release `.zip` archive. This can be done in the following\n+way. This will install to `c:\\workspace\\bitcoin`, for example:\n+\n+    make install DESTDIR=/mnt/c/workspace/bitcoin\n+"
      }
    ]
  }
]