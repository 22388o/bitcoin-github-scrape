DrahtBot,2018-09-15T12:46:42Z,<!--e57a25ab6845829454e8d69fc972939a-->No more conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-421565005,421565005,
gmaxwell,2018-09-16T07:15:00Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-421713958,421713958,
conscott,2018-09-16T15:17:21Z,Tested ACK b723d95fa08c8058f4ab32cdd5329b4df3aac036,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-421781112,421781112,
MarcoFalke,2018-09-18T20:40:12Z,utACK. I wrote a test in  #14240 that should only pass with your first commit.,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-422545832,422545832,
MarcoFalke,2018-09-24T19:29:16Z,"@sdaftuar Do you feel like splitting this up? I believe one of the fixes is a bugfix, the other a feature.",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424096098,424096098,
sdaftuar,2018-09-25T12:06:28Z,"@MarcoFalke This PR is now just the bugfix along with the test you wrote (thanks!), I'll separately PR the new feature.\n\nI believe I've also incorporated all the PR comments that are relevant for the bugfix commit.",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424316233,424316233,
MarcoFalke,2018-09-25T17:51:35Z,"Tested ACK 736462c26de7a267bdf75c1f86bf12932c604b3d (I wrote the test, that fails without this patch)",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424439341,424439341,
MarcoFalke,2018-09-25T17:56:23Z,Is this for backport?,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424441006,424441006,
sdaftuar,2018-09-25T18:07:19Z,"I don't think we need to backport this (in particular I wouldn't want to interfere with the 0.17.0 release), as the bug has been present for so long, there's no urgency.  And I tend to think that changes like this to the p2p behavior are better to sit in master for a while before appearing in a release anyway.\n\nAny idea what is going on with the appveyor test run?",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424444818,424444818,
sdaftuar,2018-09-25T18:42:17Z,"I guess it's worth pointing out as well, that this change without the improvement in #14318 may well worsen relay of transactions that are part of chains a bit.  For instance, if a peer of ours asks for the parent of a transaction we announced, then as long as that parent is in mapRelay -- ie it was recently announced -- then we'd provide it, even if that peer wasn't connected to us at the time th",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424456193,424456193,
jamesob,2018-09-26T19:13:16Z,"utACK https://github.com/bitcoin/bitcoin/pull/14220/commits/736462c26de7a267bdf75c1f86bf12932c604b3d\n\nIn plain English, I'd characterize this change as ""don't respond to a GETDATA(txn) for a peer who you haven't previously sent INV(txn).""",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-424836172,424836172,
sdaftuar,2018-09-27T18:04:30Z,"Rebased, but I think we need to adjust the test so that it has a drastically lower error rate, or drop it from this PR.  @MarcoFalke thoughts?",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-425188679,425188679,
DrahtBot,2018-09-28T10:49:06Z,<!--32850dd3fdea838b4049e64f46995ea2-->\n| Coverage  | Change ([pull 14220](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/14220/total.coverage/index.html)) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html))   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0094 %            | 87.0361 %,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-425398442,425398442,
MarcoFalke,2018-10-01T01:26:10Z,re-ACK 320a85e3427685d4bed9d585c3a3c45e288d5a30,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-425768162,425768162,
sdaftuar,2018-10-09T02:57:57Z,Picked up Marco's latest test and rebased on master due to the `test_runner.py` conflict.,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-428043168,428043168,
sdaftuar,2018-10-09T03:06:09Z,"Added a commit because of this:\n\n```\n./test/functional/p2p_leak_tx.py:8:1: F401 'test_framework.mininode.mininode_lock' imported but unused\n./test/functional/p2p_leak_tx.py:10:1: F401 'test_framework.util.assert_greater_than' imported but unused\n./test/functional/p2p_leak_tx.py:10:1: F401 'test_framework.util.wait_until' imported but unused\n```",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-428044364,428044364,
MarcoFalke,2018-10-09T03:30:48Z,Feel free to just squash these trivial fixups in,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-428047754,428047754,
jnewbery,2018-10-10T08:34:37Z,One other question: do we know how large `mapRelay` is expected to grow? Do we know how much additional memory will be used by changing the `CTransactionRef` to a `RelayEntry`?,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-428486018,428486018,
jnewbery,2018-10-15T14:43:05Z,I've written an alternative test here: https://github.com/jnewbery/bitcoin/tree/pr14220.1 which reliably tests the new behaviour and fails on master.,https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-429881442,429881442,
sdaftuar,2018-10-17T17:08:41Z,">One other question: do we know how large mapRelay is expected to grow? Do we know how much additional memory will be used by changing the CTransactionRef to a RelayEntry?\n\nmapRelay is bounded by our rate-limited transaction relay algorithm, but on further thought, this approach may potentially use quite a bit more memory than I originally realized.\n\nI'll close this PR for now and re-open ",https://github.com/bitcoin/bitcoin/pull/14220#issuecomment-430710707,430710707,
conscott,2018-09-16T14:36:09Z,"nit: Comment doesn't seem to match the assert. Could just add...\n```\nassert_equal(len(self.nodes[0].listunspent()), 1)\n```",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r217916417,217916417,test/functional/p2p_txchain_relay.py
promag,2018-09-16T20:50:38Z,"Commit ""Don't relay tx data to peers until after tx announcement""\n\nDoesn't seem quite obvious that `std::set` is worst, why did you picked `std::unordered_set`?",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r217927370,217927370,src/net_processing.cpp
promag,2018-09-16T20:54:16Z,"Commit ""Don't relay tx data to peers until after tx announcement""\n\nFrom developer notes:\n```\n- By default, declare single-argument constructors `explicit`.\n\n  - *Rationale*: This is a precaution to avoid unintended conversions that might\n    arise when single-argument constructors are used as implicit conversion\n    functions.\n```",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r217927456,217927456,src/net_processing.cpp
promag,2018-09-16T20:55:10Z,"Commit ""Don't relay tx data to peers until after tx announcement""\n\n~~nit, could use `emplace(k,v)` since you are touching this line.~~\n\nThis is moved and updated in the next commit.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r217927481,217927481,src/net_processing.cpp
promag,2018-09-16T20:55:31Z,"Commit ""Don't relay tx data to peers until after tx announcement""\n\nnit, s/_map/_set?\n",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r217927487,217927487,src/net_processing.cpp
promag,2018-09-16T20:57:28Z,"Commit ""Add ancestors of announced transactions to mapRelay""\n\nnit, could drop `std::make_pair`.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r217927530,217927530,src/net_processing.cpp
practicalswift,2018-09-22T19:04:41Z,"```\n2018-09-22 21:02:10 cpplint(pr=14220): src/net_processing.cpp:158:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]\n```",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r219679799,219679799,src/net_processing.cpp
sdaftuar,2018-09-24T19:56:56Z,"Constant time lookup seemed better to me than log_n lookup but I dunno, is there a reason you think std::set is better here?  I suspect it doesn't really matter.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r219968248,219968248,src/net_processing.cpp
jamesob,2018-09-26T19:16:12Z,nit: distribuiton (spelling),https://github.com/bitcoin/bitcoin/pull/14220#discussion_r220690123,220690123,test/functional/p2p_leak_tx.py
jamesob,2018-09-26T19:16:55Z,"This test, being stochastic, looks like it'll fail spuriously. I guess it if happens too often, we can up `REPEATS` or something.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r220690330,220690330,test/functional/p2p_leak_tx.py
MarcoFalke,2018-09-26T19:30:31Z,"Someone could run it for 1000 times and see if it fails at all\n\n```\n./test/functional/test_runner.py -j 15 $(for i in {0..999}; do echo p2p_leak_tx ; done)",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r220694414,220694414,test/functional/p2p_leak_tx.py
promag,2018-09-26T20:25:05Z,I dunno too. Considering the size is small I agree it doesn't matter.,https://github.com/bitcoin/bitcoin/pull/14220#discussion_r220710702,220710702,src/net_processing.cpp
sdaftuar,2018-09-27T17:36:49Z,Looks like it fails about 9% of the time for me. :(,https://github.com/bitcoin/bitcoin/pull/14220#discussion_r221013286,221013286,test/functional/p2p_leak_tx.py
MarcoFalke,2018-09-28T01:09:11Z,nit: unrelated change?,https://github.com/bitcoin/bitcoin/pull/14220#discussion_r221118923,221118923,test/functional/test_framework/messages.py
MarcoFalke,2018-09-28T03:28:01Z,"Sorry for that. I haven't actually run the test substantially after writing. I seems you could set `        EXPECTED_MEASURED_LEAK = .42` or so without making the test useless. (On master the leak is always 1.00, so setting the expected measured leak to any number less than 1 should be fine)\n\n![figure_1](https://user-images.githubusercontent.com/6399679/46206730-f3070d80-c2f2-11e8-8bb5-1e51e68",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r221133435,221133435,test/functional/p2p_leak_tx.py
sdaftuar,2018-09-28T21:04:03Z,"I bumped it up to 0.45, and it failed once in 1000 runs, so i bumped it up to 0.50 and ran it 5000 times with no failures.  I have not really looked at the test or analyzed the statistics at all to verify that this makes sense.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r221381012,221381012,test/functional/p2p_leak_tx.py
sdaftuar,2018-09-28T21:04:17Z,fixed,https://github.com/bitcoin/bitcoin/pull/14220#discussion_r221381060,221381060,test/functional/test_framework/messages.py
jnewbery,2018-10-08T04:53:25Z,"I don't understand what this test is supposed to be testing. Is it:\n\n(i) that we don't leak txs to inbound peers that we haven't yet announced to (as stated in the docstring); or\n(ii) that txs are probabilistically announced to outbound peers before inbound peers.\n\nIf (i), can't we just test that for every tx, either we receive a `NOTFOUND` message for the tx or we've already received an",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223248001,223248001,test/functional/p2p_leak_tx.py
MarcoFalke,2018-10-08T08:23:57Z,"Makes sense! That makes the test easier to understand as well:\n\n(to be applied on current HEAD commit of this branch)\n\n```diff\ndiff --git a/test/functional/p2p_leak_tx.py b/test/functional/p2p_leak_tx.py\nindex 21d1d4ed2d..a0ceaedd67 100755\n--- a/test/functional/p2p_leak_tx.py\n+++ b/test/functional/p2p_leak_tx.py\n@@ -13,10 +13,17 @@ from test_framework.util import (\n     wait_un",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223281424,223281424,test/functional/p2p_leak_tx.py
jnewbery,2018-10-08T09:06:38Z,"Concept ACK the change to the test!\n\nCan we add multiple P2P connections to the node to get more test repeats in parallel, or does the change to tx propagation in https://github.com/bitcoin/bitcoin/pull/13298 mean that we'll announce to all those peers at the same time and not get any additional benefit?",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223293921,223293921,test/functional/p2p_leak_tx.py
MarcoFalke,2018-10-08T09:15:01Z,"Currently we can only easily add inbound mininode peers (which are in the same bucket for tx propagation), so right now it couldn't run in parallel that way.\n\nI am happy to adjust the test as soon as we can add outbound connections to mininode peers.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223296240,223296240,test/functional/p2p_leak_tx.py
sdaftuar,2018-10-09T02:58:19Z,Thanks!,https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223548444,223548444,test/functional/p2p_leak_tx.py
jnewbery,2018-10-10T06:31:03Z,"I think a comment here would be helpful (since `mi->second.m_node_set.count(pfrom->GetId())` isn't immediately obvious when read outside the context of this PR). Something like:\n\n```\n// Only send the transaction if we've previously announced it to this peer\n```",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223950591,223950591,src/net_processing.cpp
jnewbery,2018-10-10T06:32:11Z,"Note that we can leak mempool contents (and lose privacy) to a peer if it sends us a MEMPOOL message. That is unchanged by this PR, but the logic here is a bit confusing and we should probably deprecate support for MEMPOOL in future.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223950825,223950825,src/net_processing.cpp
jnewbery,2018-10-10T06:41:10Z,"I've now reviewed this test. Sadly, it doesn't test the new code (and does not fail on master).\n\nSince the node-under-test has only one peer, the transaction won't get added to `mapRelay` until we send the `INV` to that peer. That means in the if/else branches at the bottom of this test:\n\n- if the node has already sent us an INV for the tx, then it'll be in the `mapRelay` and the node will",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r223952467,223952467,test/functional/p2p_leak_tx.py
sipa,2018-10-17T07:35:39Z,"Use `m_txref(std::move(tx))` here. `tx` in this context is _not_ an rvalue reference (as it's been bound to variable), it's only initialized by accepting an rvalue reference.",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r225809009,225809009,src/net_processing.cpp
sipa,2018-10-17T07:47:49Z,"One relatively easy solution (I think), is to only announce transactions that have been longer than say 60s in the mempool at the time the MEMPOOL message is received, and to enforce the same time restriction in this block of code (so you can't fetch transactions that were received less than 60s before the last MEMPOOL request).",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r225813001,225813001,src/net_processing.cpp
sdaftuar,2018-10-17T17:07:05Z,"I had no idea, thank you for pointing this out!",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r226017914,226017914,src/net_processing.cpp
MarcoFalke,2018-10-21T14:19:34Z,"There are at most 9 buckets, so a set of outbound `NodeId`s and a flag for inbound ones might demand less memory?",https://github.com/bitcoin/bitcoin/pull/14220#discussion_r226864609,226864609,src/net_processing.cpp
