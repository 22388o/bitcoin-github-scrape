[
  {
    "sha": "6e7fe4492577542fd05320e439fdbfce6801a075",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTdmZTQ0OTI1Nzc1NDJmZDA1MzIwZTQzOWZkYmZjZTY4MDFhMDc1",
    "commit": {
      "author": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-07-16T08:55:05Z"
      },
      "committer": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-07-16T10:48:46Z"
      },
      "message": "drop mapAlreadyAskFor\n\nmapAlreadyAskFor doesn't have any effect unless a peer is sending invs for the\nsame invalid transactions more than every 2 minutes, and even in that case it\njust slows down the unnecessary re-requesting.\n\nBitcoind never sends invs for the same tx that often (wallet rebroadcasts are at\nleast 5 minutes apart), and if a slightly malicious node wants to cause a lot of\nunnecessary but low-cost network messages there are plenty of other ways to do\nthat anyway.",
      "tree": {
        "sha": "b0d2dfd2aec5f5f32ba18d982cecc703ecfefae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0d2dfd2aec5f5f32ba18d982cecc703ecfefae6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e7fe4492577542fd05320e439fdbfce6801a075",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e7fe4492577542fd05320e439fdbfce6801a075",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e7fe4492577542fd05320e439fdbfce6801a075",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e7fe4492577542fd05320e439fdbfce6801a075/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87e40799fdebb9f4c3c9d8cc7d071408a4ea768e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e40799fdebb9f4c3c9d8cc7d071408a4ea768e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87e40799fdebb9f4c3c9d8cc7d071408a4ea768e"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 17,
      "deletions": 41
    },
    "files": [
      {
        "sha": "8b32d45f6fce3b81897702f9e5bda2cbfdd2570f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e7fe4492577542fd05320e439fdbfce6801a075/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e7fe4492577542fd05320e439fdbfce6801a075/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6e7fe4492577542fd05320e439fdbfce6801a075",
        "patch": "@@ -3898,7 +3898,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n-            mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n@@ -3928,7 +3927,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx);\n-                        mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n                         vWorkQueue.push_back(orphanHash);\n                         vEraseQueue.push_back(orphanHash);\n                     }\n@@ -4534,7 +4532,6 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // received a (requested) block in one minute, and that all blocks are\n         // in flight for over two minutes, since we first had a chance to\n         // process an incoming block.\n-        int64_t nNow = GetTimeMicros();\n         if (!pto->fDisconnect && state.nBlocksInFlight &&\n             state.nLastBlockReceive < state.nLastBlockProcess - BLOCK_DOWNLOAD_TIMEOUT*1000000 &&\n             state.vBlocksInFlight.front().nTime < state.nLastBlockProcess - 2*BLOCK_DOWNLOAD_TIMEOUT*1000000) {\n@@ -4564,22 +4561,24 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: getdata (non-blocks)\n         //\n-        while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+        BOOST_FOREACH(const CInv& inv, pto->vAskFor)\n         {\n-            const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(inv))\n+            if (pto->fDisconnect)\n+                break;\n+\n+            if (AlreadyHave(inv))\n+                continue;\n+\n+            if (fDebug)\n+                LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+            vGetData.push_back(inv);\n+            if (vGetData.size() >= 1000)\n             {\n-                if (fDebug)\n-                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n-                vGetData.push_back(inv);\n-                if (vGetData.size() >= 1000)\n-                {\n-                    pto->PushMessage(\"getdata\", vGetData);\n-                    vGetData.clear();\n-                }\n+                pto->PushMessage(\"getdata\", vGetData);\n+                vGetData.clear();\n             }\n-            pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n+        pto->vAskFor.clear();\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n "
      },
      {
        "sha": "e815d0969f9c4f34593d102b3e324995a3d593c6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 26,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e7fe4492577542fd05320e439fdbfce6801a075/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e7fe4492577542fd05320e439fdbfce6801a075/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6e7fe4492577542fd05320e439fdbfce6801a075",
        "patch": "@@ -122,7 +122,6 @@ extern CCriticalSection cs_vNodes;\n extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern limitedmap<CInv, int64_t> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;\n extern CCriticalSection cs_vAddedNodes;\n@@ -286,7 +285,7 @@ class CNode\n     mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n-    std::multimap<int64_t, CInv> mapAskFor;\n+    std::vector<CInv> vAskFor;\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n@@ -454,30 +453,8 @@ class CNode\n \n     void AskFor(const CInv& inv)\n     {\n-        // We're using mapAskFor as a priority queue,\n-        // the key is the earliest time the request can be sent\n-        int64_t nRequestTime;\n-        limitedmap<CInv, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv);\n-        if (it != mapAlreadyAskedFor.end())\n-            nRequestTime = it->second;\n-        else\n-            nRequestTime = 0;\n-        LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), id);\n-\n-        // Make sure not to reuse time indexes to keep things in the same order\n-        int64_t nNow = GetTimeMicros() - 1000000;\n-        static int64_t nLastTime;\n-        ++nLastTime;\n-        nNow = std::max(nNow, nLastTime);\n-        nLastTime = nNow;\n-\n-        // Each retry is 2 minutes after the last\n-        nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n-        if (it != mapAlreadyAskedFor.end())\n-            mapAlreadyAskedFor.update(it, nRequestTime);\n-        else\n-            mapAlreadyAskedFor.insert(std::make_pair(inv, nRequestTime));\n-        mapAskFor.insert(std::make_pair(nRequestTime, inv));\n+        LogPrint(\"net\", \"askfor %s peer=%d\\n\", inv.ToString(), id);\n+        vAskFor.push_back(inv);\n     }\n \n "
      }
    ]
  }
]