[
  {
    "sha": "fa2b52af32f6a4b9c22c270f36e92960c29ef364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJiNTJhZjMyZjZhNGI5YzIyYzI3MGYzNmU5Mjk2MGMyOWVmMzY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-13T19:38:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-14T12:33:55Z"
      },
      "message": "Disallow extended encoding for non-witness transactions (take 3)",
      "tree": {
        "sha": "2622d9a764d368dd69159f3ae6c44e6634bfa51e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2622d9a764d368dd69159f3ae6c44e6634bfa51e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2b52af32f6a4b9c22c270f36e92960c29ef364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgWnQv8DZTRVa5GEf8DqJwl/AalPPum2xdS3zimviCm8MiKo9JxWIECsZNZXmLQ\nnYFKx8ixm5lcZm+N/TePfVHAzK42VpJAVjjC9vzGUBqyPV4VdxA6Ry+fz0eAXI6L\ndMczem2LL0qkJvKdpEdC3lhqJ4O2pMqwntCk0o+bfAXVSPfjUZ5IL7x+e3p/Zimr\nYvtZp2pSQKQBF3E+F3vAbG5+JvhjTfwm+SyyDIHKgmOSFfPnOhuTPq3Dwsg4vVs8\nM2UuYuLn5AvCsIegtPxLTYd/fI9Dzz1JucVTRU9FagsQd+06KdXRN1MJkltP0t/B\nvlLxdOPwTekfdyHdAv7biPTQSf/t5ml0cNSegjJYH00K7GCbPLzqaStblM5DHOwh\npKyM5vkAXPHz70YaBA1J91kVGo3E5wlxn8vypnDsvzWEcS1YHdwS+a9YfJ3uGSEt\nj39KZkRz8scVFiER643jyjvkbXkpBq5z6Xn3e0dnCs4m62DDyMf0v+2m43kKMd3d\nBtbGvtb4\n=brCb\n-----END PGP SIGNATURE-----",
        "payload": "tree 2622d9a764d368dd69159f3ae6c44e6634bfa51e\nparent e79bbb73e08e3f191e97d3b67a2fbb510c5545ff\nauthor MarcoFalke <falke.marco@gmail.com> 1557776290 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1557837235 -0400\n\nDisallow extended encoding for non-witness transactions (take 3)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2b52af32f6a4b9c22c270f36e92960c29ef364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2b52af32f6a4b9c22c270f36e92960c29ef364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2b52af32f6a4b9c22c270f36e92960c29ef364/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e79bbb73e08e3f191e97d3b67a2fbb510c5545ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e79bbb73e08e3f191e97d3b67a2fbb510c5545ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e79bbb73e08e3f191e97d3b67a2fbb510c5545ff"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 33,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3254c6a19e4f4bbb2ea83388340dc07d82841433",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2b52af32f6a4b9c22c270f36e92960c29ef364/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2b52af32f6a4b9c22c270f36e92960c29ef364/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa2b52af32f6a4b9c22c270f36e92960c29ef364",
        "patch": "@@ -3288,23 +3288,22 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         if (m_enable_bip61) {\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n         }\n-        if (strstr(e.what(), \"end of data\"))\n-        {\n+        if (strstr(e.what(), \"end of data\")) {\n             // Allow exceptions from under-length message on vRecv\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        }\n-        else if (strstr(e.what(), \"size too large\"))\n-        {\n+        } else if (strstr(e.what(), \"size too large\")) {\n             // Allow exceptions from over-long size\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        }\n-        else if (strstr(e.what(), \"non-canonical ReadCompactSize()\"))\n-        {\n+        } else if (strstr(e.what(), \"non-canonical ReadCompactSize()\")) {\n             // Allow exceptions from non-canonical encoding\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        }\n-        else\n-        {\n+        } else if (strstr(e.what(), \"Superfluous witness record\")) {\n+            // Allow exceptions from illegal witness encoding\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+        } else if (strstr(e.what(), \"Unknown transaction optional data\")) {\n+            // Allow exceptions from unknown witness encoding\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+        } else {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n         }\n     }"
      },
      {
        "sha": "df0f9fa365e205f3e3b2f882440be68647ede348",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2b52af32f6a4b9c22c270f36e92960c29ef364/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2b52af32f6a4b9c22c270f36e92960c29ef364/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa2b52af32f6a4b9c22c270f36e92960c29ef364",
        "patch": "@@ -2038,9 +2038,9 @@ def test_witness_sigops(self):\n         # TODO: test p2sh sigop counting\n \n     def test_superfluous_witness(self):\n-        # Serialization of tx that puts witness flag to 1 always\n+        # Serialization of tx that puts witness flag to 3 always\n         def serialize_with_bogus_witness(tx):\n-            flags = 1\n+            flags = 3\n             r = b\"\"\n             r += struct.pack(\"<i\", tx.nVersion)\n             if flags:\n@@ -2059,9 +2059,29 @@ def serialize_with_bogus_witness(tx):\n             r += struct.pack(\"<I\", tx.nLockTime)\n             return r\n \n-        raw = self.nodes[0].createrawtransaction([{\"txid\":\"00\"*32, \"vout\":0}], {self.nodes[0].getnewaddress():1})\n+        class msg_bogus_tx(msg_tx):\n+            def serialize(self):\n+                return serialize_with_bogus_witness(self.tx)\n+\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(address_type='bech32'), 5)\n+        self.nodes[0].generate(1)\n+        unspent = next(u for u in self.nodes[0].listunspent() if u['spendable'] and u['address'].startswith('bcrt'))\n+\n+        raw = self.nodes[0].createrawtransaction([{\"txid\": unspent['txid'], \"vout\": unspent['vout']}], {self.nodes[0].getnewaddress(): 1})\n         tx = FromHex(CTransaction(), raw)\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, serialize_with_bogus_witness(tx).hex())\n+        with self.nodes[0].assert_debug_log(['Superfluous witness record']):\n+            self.nodes[0].p2p.send_message(msg_bogus_tx(tx))\n+            self.nodes[0].p2p.sync_with_ping()\n+        raw = self.nodes[0].signrawtransactionwithwallet(raw)\n+        assert raw['complete']\n+        raw = raw['hex']\n+        tx = FromHex(CTransaction(), raw)\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, serialize_with_bogus_witness(tx).hex())\n+        with self.nodes[0].assert_debug_log(['Unknown transaction optional data']):\n+            self.nodes[0].p2p.send_message(msg_bogus_tx(tx))\n+            self.nodes[0].p2p.sync_with_ping()\n+\n \n if __name__ == '__main__':\n     SegWitTest().main()"
      }
    ]
  }
]