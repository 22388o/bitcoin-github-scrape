[
  {
    "sha": "7414d3820c833566b4f48c6c120a18bf53978c55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDE0ZDM4MjBjODMzNTY2YjRmNDhjNmMxMjBhMThiZjUzOTc4YzU1",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2018-03-22T18:27:49Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-12-11T20:33:54Z"
      },
      "message": "Add RPC Whitelist Feature from #12248",
      "tree": {
        "sha": "0d2ca7b09952d9f06660d51ba3bd07f748b49049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d2ca7b09952d9f06660d51ba3bd07f748b49049"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7414d3820c833566b4f48c6c120a18bf53978c55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7414d3820c833566b4f48c6c120a18bf53978c55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7414d3820c833566b4f48c6c120a18bf53978c55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7414d3820c833566b4f48c6c120a18bf53978c55/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30521302f90e4856a7516867b32a4576fa6d98b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30521302f90e4856a7516867b32a4576fa6d98b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30521302f90e4856a7516867b32a4576fa6d98b3"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 61,
      "deletions": 3
    },
    "files": [
      {
        "sha": "77e09bd5c7d53de9a48a21b34516c11b70043976",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 3,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7414d3820c833566b4f48c6c120a18bf53978c55/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7414d3820c833566b4f48c6c120a18bf53978c55/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=7414d3820c833566b4f48c6c120a18bf53978c55",
        "patch": "@@ -15,8 +15,13 @@\n #include <util/translation.h>\n #include <walletinitinterface.h>\n \n+#include <algorithm>\n+#include <iterator>\n+#include <map>\n #include <memory>\n #include <stdio.h>\n+#include <set>\n+#include <string>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n \n@@ -64,6 +69,9 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;\n+/* RPC Auth Whitelist */\n+static std::map<std::string, std::set<std::string>> g_rpc_whitelist;\n+static bool g_rpc_whitelist_default = false;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -183,18 +191,45 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         jreq.URI = req->GetURI();\n \n         std::string strReply;\n+        bool user_has_whitelist = g_rpc_whitelist.count(jreq.authUser);\n+        if (!user_has_whitelist && g_rpc_whitelist_default) {\n+            LogPrintf(\"RPC User %s not allowed to call any methods\\n\", jreq.authUser);\n+            req->WriteReply(HTTP_FORBIDDEN);\n+            return false;\n+\n         // singleton request\n-        if (valRequest.isObject()) {\n+        } else if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n-\n+            if (user_has_whitelist && !g_rpc_whitelist[jreq.authUser].count(jreq.strMethod)) {\n+                LogPrintf(\"RPC User %s not allowed to call method %s\\n\", jreq.authUser, jreq.strMethod);\n+                req->WriteReply(HTTP_FORBIDDEN);\n+                return false;\n+            }\n             UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n \n         // array of requests\n-        } else if (valRequest.isArray())\n+        } else if (valRequest.isArray()) {\n+            if (user_has_whitelist) {\n+                for (unsigned int reqIdx = 0; reqIdx < valRequest.size(); reqIdx++) {\n+                    if (!valRequest[reqIdx].isObject()) {\n+                        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n+                    } else {\n+                        const UniValue& request = valRequest[reqIdx].get_obj();\n+                        // Parse method\n+                        std::string strMethod = find_value(request, \"method\").get_str();\n+                        if (!g_rpc_whitelist[jreq.authUser].count(strMethod)) {\n+                            LogPrintf(\"RPC User %s not allowed to call method %s\\n\", jreq.authUser, strMethod);\n+                            req->WriteReply(HTTP_FORBIDDEN);\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n             strReply = JSONRPCExecBatch(jreq, valRequest.get_array());\n+        }\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n@@ -229,6 +264,27 @@ static bool InitRPCAuthentication()\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n     }\n+\n+    g_rpc_whitelist_default = gArgs.GetBoolArg(\"-rpcwhitelistdefault\", gArgs.IsArgSet(\"-rpcwhitelist\"));\n+    for (const std::string& strRPCWhitelist : gArgs.GetArgs(\"-rpcwhitelist\")) {\n+        auto pos = strRPCWhitelist.find(':');\n+        std::string strUser = strRPCWhitelist.substr(0, pos);\n+        bool intersect = g_rpc_whitelist.count(strUser);\n+        std::set<std::string>& whitelist = g_rpc_whitelist[strUser];\n+        if (pos != std::string::npos) {\n+            std::string strWhitelist = strRPCWhitelist.substr(pos + 1);\n+            std::set<std::string> new_whitelist;\n+            boost::split(new_whitelist, strWhitelist, boost::is_any_of(\", \"));\n+            if (intersect) {\n+                std::set<std::string> tmp_whitelist;\n+                std::set_intersection(new_whitelist.begin(), new_whitelist.end(),\n+                       whitelist.begin(), whitelist.end(), std::inserter(tmp_whitelist, tmp_whitelist.end()));\n+                new_whitelist = std::move(tmp_whitelist);\n+            }\n+            whitelist = std::move(new_whitelist);\n+        }\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "6e4caef673f487124961bd6528f00dae1a1d3952",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7414d3820c833566b4f48c6c120a18bf53978c55/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7414d3820c833566b4f48c6c120a18bf53978c55/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7414d3820c833566b4f48c6c120a18bf53978c55",
        "patch": "@@ -534,6 +534,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n "
      }
    ]
  },
  {
    "sha": "d868d09017d055f8c5459ead943f0c01b18a25bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODY4ZDA5MDE3ZDA1NWY4YzU0NTllYWQ5NDNmMGMwMWIxOGEyNWJm",
    "commit": {
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-12T19:21:54Z"
      },
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-12-12T19:21:54Z"
      },
      "message": "test: Add test for rpc_whitelist",
      "tree": {
        "sha": "f6dc56678af8d7eaf188e9671a773125b127c3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6dc56678af8d7eaf188e9671a773125b127c3d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d868d09017d055f8c5459ead943f0c01b18a25bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE82XmVEpcmrEyk0LUL21BRcVfx8cFAl3yk1IACgkQL21BRcVf\nx8ePIBAApGMnGjY/tqWGjGnJtosbhA8/3XzxxxoFXcdmWH7cgAEpqa647Q5Xwi3j\n5ynECCfCctD8QzHBSOsqZ+ZwpFB4cq7vGtWCaPdODe5wKsKLFLHqaKwIdFuEY9Bs\nIEf7IjdlED9PMthiEflWQksD6OCrJr0+NMQKltmNWAQlBSogDJNWty9A93KKh6TI\nt3dXrpBeQovHsm99RzTN9ciYfUKkp+SEFfK/S1DXZKUp8sM4IBl/NRPRkIINXnvr\nQBGcQurv9VrflvOBy3ZL2GY7HrpnLK5y8Z/6Bcs2bZysEJI+VrUOMey1sYtoNTLc\nUbGzFYt+jDn+y/h2vHVs4AXOvO119PSMHnLwbuzdcnR6LdcPMGp3Jeg5+pw3r5TY\n1GVy2tNVgYmiUEcb3+7WkBpMNJNgJJkRpXnJL41G/iUemy7WmBGqPuFBO2frF2MO\n4PbBY/gKvDhBDAT/d2EA5qG5XMA3l78Zju/p/3wDmy4rIRth08prIeIAVZ2eZ2wd\nl7MC97CUKrTK8rIDFOm3xVv1KC5EPXTaC4DUwkYsQ5cXTnI7EUlj2c4P4XAjpKTk\nPlllGTbPA2erDqWNgAKLyzo+qKlvHHJwFx1seDk4IHFsmz6+QqRF0VnYJ/PynHjM\neja5iXihW28DRDGv0fXrWJfzQ5sVoSLVfsGWmpvBPJ/DnAd8MpA=\n=D9JS\n-----END PGP SIGNATURE-----",
        "payload": "tree f6dc56678af8d7eaf188e9671a773125b127c3d2\nparent 7414d3820c833566b4f48c6c120a18bf53978c55\nauthor Emil Engler <me@emilengler.com> 1576178514 +0100\ncommitter Emil Engler <me@emilengler.com> 1576178514 +0100\n\ntest: Add test for rpc_whitelist\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d868d09017d055f8c5459ead943f0c01b18a25bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d868d09017d055f8c5459ead943f0c01b18a25bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d868d09017d055f8c5459ead943f0c01b18a25bf/comments",
    "author": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7414d3820c833566b4f48c6c120a18bf53978c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7414d3820c833566b4f48c6c120a18bf53978c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7414d3820c833566b4f48c6c120a18bf53978c55"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 101,
      "deletions": 0
    },
    "files": [
      {
        "sha": "219132410b5256549a9879ac84aa8d8951ded3e9",
        "filename": "test/functional/rpc_whitelist.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d868d09017d055f8c5459ead943f0c01b18a25bf/test/functional/rpc_whitelist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d868d09017d055f8c5459ead943f0c01b18a25bf/test/functional/rpc_whitelist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_whitelist.py?ref=d868d09017d055f8c5459ead943f0c01b18a25bf",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+A test for RPC users with restricted permissions\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+import os\n+from test_framework.util import (\n+    get_datadir_path,\n+    assert_equal,\n+    str_to_b64str\n+)\n+import http.client\n+import urllib.parse\n+\n+def rpccall(node, user, method):\n+    url = urllib.parse.urlparse(node.url)\n+    headers = {\"Authorization\": \"Basic \" + str_to_b64str('{}:{}'.format(user[0], user[3]))}\n+    conn = http.client.HTTPConnection(url.hostname, url.port)\n+    conn.connect()\n+    conn.request('POST', '/', '{\"method\": \"' + method + '\"}', headers)\n+    resp = conn.getresponse()\n+    conn.close()\n+    return resp\n+\n+\n+class RPCWhitelistTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # 0 => Username\n+        # 1 => Password (Hashed)\n+        # 2 => Permissions\n+        # 3 => Password Plaintext\n+        self.users = [\n+            [\"user1\", \"50358aa884c841648e0700b073c32b2e$b73e95fff0748cc0b517859d2ca47d9bac1aa78231f3e48fa9222b612bd2083e\", \"getbestblockhash,getblockcount,\", \"12345\"],\n+            [\"user2\", \"8650ba41296f62092377a38547f361de$4620db7ba063ef4e2f7249853e9f3c5c3592a9619a759e3e6f1c63f2e22f1d21\", \"getblockcount\", \"54321\"]\n+        ]\n+        # For exceptions\n+        self.strange_users = [\n+            # Test empty\n+            [\"strangedude\", \"62d67dffec03836edd698314f1b2be62$c2fb4be29bb0e3646298661123cf2d8629640979cabc268ef05ea613ab54068d\", \":\", \"s7R4nG3R7H1nGZ\"],\n+            [\"strangedude2\", \"575c012c7fe4b1e83b9d809412da3ef7$09f448d0acfc19924dd62ecb96004d3c2d4b91f471030dfe43c6ea64a8f658c1\", \"\", \"s7R4nG3R7H1nGZ\"],\n+            # Test trailing comma\n+            [\"strangedude3\", \"23189c561b5975a56f4cf94030495d61$3a2f6aac26351e2257428550a553c4c1979594e36675bbd3db692442387728c0\", \":getblockcount,\", \"s7R4nG3R7H1nGZ\"],\n+            # Test overwrite\n+            [\"strangedude4\", \"990c895760a70df83949e8278665e19a$8f0906f20431ff24cb9e7f5b5041e4943bdf2a5c02a19ef4960dcf45e72cde1c\", \":getblockcount, getbestblockhash\", \"s7R4nG3R7H1nGZ\"],\n+            [\"strangedude4\", \"990c895760a70df83949e8278665e19a$8f0906f20431ff24cb9e7f5b5041e4943bdf2a5c02a19ef4960dcf45e72cde1c\", \":getblockcount\", \"s7R4nG3R7H1nGZ\"],\n+            # Testing the same permission twice\n+            [\"strangedude5\", \"d12c6e962d47a454f962eb41225e6ec8$2dd39635b155536d3c1a2e95d05feff87d5ba55f2d5ff975e6e997a836b717c9\", \":getblockcount,getblockcount\", \"s7R4nG3R7H1nGZ\"]\n+        ]\n+        # These commands shouldn't be allowed for any user to test failures\n+        self.never_allowed = [\"getnetworkinfo\"]\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"\\nrpcwhitelistdefault=0\\n\")\n+            for user in self.users:\n+                f.write(\"rpcauth=\" + user[0] + \":\" + user[1] + \"\\n\")\n+                f.write(\"rpcwhitelist=\" + user[0] + \":\" + user[2] + \"\\n\")\n+            # Special cases\n+            for strangedude in self.strange_users:\n+                f.write(\"rpcauth=\" + strangedude[0] + \":\" + strangedude[1] + \"\\n\")\n+                f.write(\"rpcwhitelist=\" + strangedude[0] + strangedude[2] + \"\\n\")\n+\n+\n+    def run_test(self):\n+        for user in self.users:\n+            permissions = user[2].replace(\" \", \"\").split(\",\")\n+            # Pop all empty items\n+            i = 0\n+            while i < len(permissions):\n+                if permissions[i] == '':\n+                    permissions.pop(i)\n+\n+                i += 1\n+            for permission in permissions:\n+                self.log.info(\"[\" + user[0] + \"]: Testing a permitted permission (\" + permission + \")\")\n+                assert_equal(200, rpccall(self.nodes[0], user, permission).status)\n+            for permission in self.never_allowed:\n+                self.log.info(\"[\" + user[0] + \"]: Testing a non permitted permission (\" + permission + \")\")\n+                assert_equal(403, rpccall(self.nodes[0], user, permission).status)\n+        # Now test the strange users\n+        for permission in self.never_allowed:\n+            self.log.info(\"Strange test 1\")\n+            assert_equal(403, rpccall(self.nodes[0], self.strange_users[0], permission).status)\n+        for permission in self.never_allowed:\n+            self.log.info(\"Strange test 2\")\n+            assert_equal(403, rpccall(self.nodes[0], self.strange_users[1], permission).status)\n+        self.log.info(\"Strange test 3\")\n+        assert_equal(200, rpccall(self.nodes[0], self.strange_users[2], \"getblockcount\").status)\n+        self.log.info(\"Strange test 4\")\n+        assert_equal(403, rpccall(self.nodes[0], self.strange_users[3], \"getbestblockhash\").status)\n+        self.log.info(\"Strange test 5\")\n+        assert_equal(200, rpccall(self.nodes[0], self.strange_users[4], \"getblockcount\").status)\n+\n+if __name__ == \"__main__\":\n+    RPCWhitelistTest().main()"
      },
      {
        "sha": "110733c529f5c95778fea8841a1d5bb0edb0bee0",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d868d09017d055f8c5459ead943f0c01b18a25bf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d868d09017d055f8c5459ead943f0c01b18a25bf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d868d09017d055f8c5459ead943f0c01b18a25bf",
        "patch": "@@ -136,6 +136,7 @@\n     'interface_rpc.py',\n     'rpc_psbt.py',\n     'rpc_users.py',\n+    'rpc_whitelist.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n     'wallet_groups.py',"
      }
    ]
  }
]