[
  {
    "sha": "d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGUwOTMwMGYzZjlkZWI0MDFlMzhmZGY1MGZkMGZmOGQzZjE1YjUw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-02-22T18:26:25Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-08T21:04:47Z"
      },
      "message": "Add block \"confirmations\" to getblock, mainly for identifying orphans",
      "tree": {
        "sha": "a97baa6ad03cc5e12cd3d7aa51c004633e2e11d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a97baa6ad03cc5e12cd3d7aa51c004633e2e11d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2ea7975936cab4c56dd737de37004ae3298104d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2ea7975936cab4c56dd737de37004ae3298104d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2ea7975936cab4c56dd737de37004ae3298104d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d2450c16064ec7e126b67da5114c156f71e5a50",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
        "patch": "@@ -172,6 +172,9 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n {\n     Object result;\n     result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n+    CMerkleTx txGen(block.vtx[0]);\n+    txGen.SetMerkleBranch(&block);\n+    result.push_back(Pair(\"confirmations\", (int)txGen.GetDepthInMainChain()));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));"
      }
    ]
  },
  {
    "sha": "74335bd32a7bef564d536ba9cf1be64714ceb8fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDMzNWJkMzJhN2JlZjU2NGQ1MzZiYTljZjFiZTY0NzE0Y2ViOGZh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-02-22T22:44:09Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-08T21:04:52Z"
      },
      "message": "Second parameter to JSON-RPC getblock/gettransaction: decompositions\n\nThis is an Object specifying how to decompose specific elements.\nCurrently supported:\n- \"tx\": \"no\", \"hash\", \"hex\", \"obj\"\n- \"script\": \"no\", \"hex\", \"asm\"",
      "tree": {
        "sha": "3a4aeb732003c59fc24a82af4a39d4e52c0e6713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a4aeb732003c59fc24a82af4a39d4e52c0e6713"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74335bd32a7bef564d536ba9cf1be64714ceb8fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74335bd32a7bef564d536ba9cf1be64714ceb8fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74335bd32a7bef564d536ba9cf1be64714ceb8fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74335bd32a7bef564d536ba9cf1be64714ceb8fa/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e09300f3f9deb401e38fdf50fd0ff8d3f15b50"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 122,
      "deletions": 25
    },
    "files": [
      {
        "sha": "34c43a9e3ea5aada284d68e9312862da1f88d892",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 122,
        "deletions": 25,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74335bd32a7bef564d536ba9cf1be64714ceb8fa/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74335bd32a7bef564d536ba9cf1be64714ceb8fa/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=74335bd32a7bef564d536ba9cf1be64714ceb8fa",
        "patch": "@@ -44,6 +44,8 @@ static CCriticalSection cs_nWalletUnlockTime;\n extern Value dumpprivkey(const Array& params, bool fHelp);\n extern Value importprivkey(const Array& params, bool fHelp);\n \n+const Object emptyobj;\n+\n Object JSONRPCError(int code, const string& message)\n {\n     Object error;\n@@ -111,6 +113,33 @@ HexBits(unsigned int nBits)\n     return HexStr(BEGIN(uBits.cBits), END(uBits.cBits));\n }\n \n+enum DecomposeMode {\n+\tDM_NONE = 0,\n+\tDM_HASH,\n+\tDM_HEX,\n+\tDM_ASM,\n+\tDM_OBJ,\n+};\n+\n+enum DecomposeMode\n+FindDecompose(const Object& decompositions, const char* pcType, const char* pcDefault)\n+{\n+    Value val = find_value(decompositions, pcType);\n+    std::string strDecompose = (val.type() == null_type) ? pcDefault : val.get_str();\n+\n+    if (strDecompose == \"no\")\n+        return DM_NONE;\n+    if (strDecompose == \"hash\")\n+        return DM_HASH;\n+    if (strDecompose == \"hex\")\n+        return DM_HEX;\n+    if (strDecompose == \"asm\")\n+        return DM_ASM;\n+    if (strDecompose == \"obj\")\n+        return DM_OBJ;\n+    throw JSONRPCError(-18, \"Invalid decomposition\");\n+}\n+\n void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n@@ -126,11 +155,14 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n-void TxToJSON(const CTransaction &tx, Object& entry)\n+void TxToJSON(const CTransaction &tx, Object& entry, const Object& decompositions)\n {\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (boost::int64_t)tx.nLockTime));\n     entry.push_back(Pair(\"size\", (boost::int64_t)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n+\n+    enum DecomposeMode decomposeScript = FindDecompose(decompositions, \"script\", \"asm\");\n+\n     Array vin;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n@@ -143,7 +175,18 @@ void TxToJSON(const CTransaction &tx, Object& entry)\n             prevout.push_back(Pair(\"hash\", txin.prevout.hash.GetHex()));\n             prevout.push_back(Pair(\"n\", (boost::int64_t)txin.prevout.n));\n             in.push_back(Pair(\"prevout\", prevout));\n-            in.push_back(Pair(\"scriptSig\", txin.scriptSig.ToString()));\n+            switch (decomposeScript) {\n+            case DM_NONE:\n+                break;\n+            case DM_HEX:\n+                in.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n+                break;\n+            case DM_ASM:\n+                in.push_back(Pair(\"scriptSig\", txin.scriptSig.ToString()));\n+                break;\n+            default:\n+                throw JSONRPCError(-18, \"Invalid script decomposition\");\n+            }\n         }\n         in.push_back(Pair(\"sequence\", (boost::int64_t)txin.nSequence));\n         vin.push_back(in);\n@@ -154,12 +197,25 @@ void TxToJSON(const CTransaction &tx, Object& entry)\n     {\n         Object out;\n         out.push_back(Pair(\"value\", ValueFromAmount(txout.nValue)));\n-        out.push_back(Pair(\"scriptPubKey\", txout.scriptPubKey.ToString()));\n+        switch (decomposeScript) {\n+        case DM_NONE:\n+            break;\n+        case DM_HEX:\n+            out.push_back(Pair(\"scriptPubKey\", HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end())));\n+            break;\n+        case DM_ASM:\n+            out.push_back(Pair(\"scriptPubKey\", txout.scriptPubKey.ToString()));\n+            break;\n+        default:\n+            throw JSONRPCError(-18, \"Invalid script decomposition\");\n+        }\n         vout.push_back(out);\n     }\n     entry.push_back(Pair(\"vout\", vout));\n }\n \n+void AnyTxToJSON(const uint256 hash, const CTransaction* ptx, Object& entry, const Object& decompositions);\n+\n string AccountFromValue(const Value& value)\n {\n     string strAccount = value.get_str();\n@@ -168,7 +224,7 @@ string AccountFromValue(const Value& value)\n     return strAccount;\n }\n \n-Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n+Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, const Object& decompositions)\n {\n     Object result;\n     result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n@@ -183,10 +239,38 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n     result.push_back(Pair(\"nonce\", (boost::uint64_t)block.nNonce));\n     result.push_back(Pair(\"bits\", HexBits(block.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    Array txhashes;\n-    BOOST_FOREACH (const CTransaction&tx, block.vtx)\n-        txhashes.push_back(tx.GetHash().GetHex());\n-    result.push_back(Pair(\"tx\", txhashes));\n+\n+    enum DecomposeMode decomposeTxn = FindDecompose(decompositions, \"tx\", \"hash\");\n+    if (decomposeTxn)\n+    {\n+        Array txs;\n+        switch (decomposeTxn) {\n+        case DM_OBJ:\n+            BOOST_FOREACH (const CTransaction&tx, block.vtx)\n+            {\n+                Object entry;\n+                AnyTxToJSON(tx.GetHash(), &tx, entry, decompositions);\n+                txs.push_back(entry);\n+            }\n+            break;\n+        case DM_HEX:\n+            BOOST_FOREACH (const CTransaction&tx, block.vtx)\n+            {\n+                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                ssTx << tx;\n+\n+                txs.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+            }\n+            break;\n+        case DM_HASH:\n+            BOOST_FOREACH (const CTransaction&tx, block.vtx)\n+                txs.push_back(tx.GetHash().GetHex());\n+            break;\n+        default:\n+            throw JSONRPCError(-18, \"Invalid transaction decomposition\");\n+        }\n+        result.push_back(Pair(\"tx\", txs));\n+    }\n \n     if (blockindex->pprev)\n         result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n@@ -197,6 +281,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n \n \n \n+\n ///\n /// Note: This interface may still be subject to change.\n ///\n@@ -1501,23 +1586,14 @@ Value listsinceblock(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettransaction(const Array& params, bool fHelp)\n+void\n+AnyTxToJSON(const uint256 hash, const CTransaction* ptx, Object& entry, const Object& decompositions)\n {\n-    if (fHelp || params.size() != 1)\n-        throw runtime_error(\n-            \"gettransaction <txid>\\n\"\n-            \"Get detailed information about <txid>\");\n-\n-    uint256 hash;\n-    hash.SetHex(params[0].get_str());\n-\n-    Object entry;\n-\n     if (pwalletMain->mapWallet.count(hash))\n     {\n         const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-        TxToJSON(wtx, entry);\n+        TxToJSON(wtx, entry, decompositions);\n \n         int64 nCredit = wtx.GetCredit();\n         int64 nDebit = wtx.GetDebit();\n@@ -1538,10 +1614,12 @@ Value gettransaction(const Array& params, bool fHelp)\n     {\n         CTransaction tx;\n         uint256 hashBlock = 0;\n-        if (GetTransaction(hash, tx, hashBlock))\n+        if ((!ptx) && GetTransaction(hash, tx, hashBlock))\n+            ptx = &tx;\n+        if (ptx)\n         {\n             entry.push_back(Pair(\"txid\", hash.GetHex()));\n-            TxToJSON(tx, entry);\n+            TxToJSON(*ptx, entry, decompositions);\n             if (hashBlock == 0)\n                 entry.push_back(Pair(\"confirmations\", 0));\n             else\n@@ -1564,6 +1642,22 @@ Value gettransaction(const Array& params, bool fHelp)\n         else\n             throw JSONRPCError(-5, \"No information available about transaction\");\n     }\n+}\n+\n+Value gettransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"gettransaction <txid> [decompositions]\\n\"\n+            \"Get detailed information about <txid>\");\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    Object entry;\n+\n+    AnyTxToJSON(hash, NULL, entry,\n+                (params.size() > 1) ? params[1].get_obj() : emptyobj);\n \n     return entry;\n }\n@@ -2045,9 +2139,9 @@ Value getblockhash(const Array& params, bool fHelp)\n \n Value getblock(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"getblock <hash>\\n\"\n+            \"getblock <hash> [decompositions]\\n\"\n             \"Returns details of a block with given block-hash.\");\n \n     std::string strHash = params[0].get_str();\n@@ -2060,7 +2154,8 @@ Value getblock(const Array& params, bool fHelp)\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n     block.ReadFromDisk(pblockindex, true);\n \n-    return blockToJSON(block, pblockindex);\n+    return blockToJSON(block, pblockindex,\n+                       (params.size() > 1) ? params[1].get_obj() : emptyobj);\n }\n \n \n@@ -2718,7 +2813,9 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblock\"               && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"gettransaction\"         && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n     if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n     if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);"
      }
    ]
  },
  {
    "sha": "7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTYzZGMzNjE1MTJjY2FlYmE1ZGQzMWU5MDU0OWUyZmU0ZDBjMWEz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-02-22T22:44:46Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-08T21:04:57Z"
      },
      "message": "Support for decomposing scripts as \"obj\"",
      "tree": {
        "sha": "a8a5c566a924feffd17f341cfb3e298498ee93d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a5c566a924feffd17f341cfb3e298498ee93d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74335bd32a7bef564d536ba9cf1be64714ceb8fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74335bd32a7bef564d536ba9cf1be64714ceb8fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74335bd32a7bef564d536ba9cf1be64714ceb8fa"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a189b2b2b037e329139890882a0cb0abb3549b24",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=7e63dc361512ccaeba5dd31e90549e2fe4d0c1a3",
        "patch": "@@ -155,6 +155,66 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n+void\n+ScriptSigToJSON(const CTxIn& txin, Object& out)\n+{\n+    out.push_back(Pair(\"asm\", txin.scriptSig.ToString()));\n+    out.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n+\n+    CTransaction txprev;\n+    uint256 hashTxprevBlock;\n+    if (!GetTransaction(txin.prevout.hash, txprev, hashTxprevBlock))\n+        return;\n+\n+    txnouttype type;\n+    vector<CBitcoinAddress> addresses;\n+    int nRequired;\n+\n+    if (!ExtractAddresses(txprev.vout[txin.prevout.n].scriptPubKey, type,\n+                          addresses, nRequired))\n+    {\n+        out.push_back(Pair(\"type\", GetTxnOutputType(TX_NONSTANDARD)));\n+        return;\n+    }\n+\n+    out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n+    if (type == TX_MULTISIG)\n+    {\n+        // TODO: Need to handle this specially since not all input addresses are required...\n+        return;\n+    }\n+\n+    Array a;\n+    BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n+        a.push_back(addr.ToString());\n+    out.push_back(Pair(\"addresses\", a));\n+}\n+\n+void\n+ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)\n+{\n+    txnouttype type;\n+    vector<CBitcoinAddress> addresses;\n+    int nRequired;\n+\n+    out.push_back(Pair(\"asm\", scriptPubKey.ToString()));\n+    out.push_back(Pair(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n+\n+    if (!ExtractAddresses(scriptPubKey, type, addresses, nRequired))\n+    {\n+        out.push_back(Pair(\"type\", GetTxnOutputType(TX_NONSTANDARD)));\n+        return;\n+    }\n+\n+    out.push_back(Pair(\"reqSigs\", nRequired));\n+    out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n+\n+    Array a;\n+    BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n+        a.push_back(addr.ToString());\n+    out.push_back(Pair(\"addresses\", a));\n+}\n+\n void TxToJSON(const CTransaction &tx, Object& entry, const Object& decompositions)\n {\n     entry.push_back(Pair(\"version\", tx.nVersion));\n@@ -184,6 +244,13 @@ void TxToJSON(const CTransaction &tx, Object& entry, const Object& decomposition\n             case DM_ASM:\n                 in.push_back(Pair(\"scriptSig\", txin.scriptSig.ToString()));\n                 break;\n+            case DM_OBJ:\n+            {\n+                Object o;\n+                ScriptSigToJSON(txin, o);\n+                in.push_back(Pair(\"scriptSig\", o));\n+                break;\n+            }\n             default:\n                 throw JSONRPCError(-18, \"Invalid script decomposition\");\n             }\n@@ -206,6 +273,13 @@ void TxToJSON(const CTransaction &tx, Object& entry, const Object& decomposition\n         case DM_ASM:\n             out.push_back(Pair(\"scriptPubKey\", txout.scriptPubKey.ToString()));\n             break;\n+        case DM_OBJ:\n+        {\n+            Object o;\n+            ScriptPubKeyToJSON(txout.scriptPubKey, o);\n+            out.push_back(Pair(\"scriptPubKey\", o));\n+            break;\n+        }\n         default:\n             throw JSONRPCError(-18, \"Invalid script decomposition\");\n         }"
      }
    ]
  }
]