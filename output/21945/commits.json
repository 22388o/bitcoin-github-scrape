[
  {
    "sha": "dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzdlYjY0ZTgzZjViOGU2M2YxMjcyOWQ1Zjc3YjFjOTIwYjEzNmU0",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-13T16:56:38Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-17T17:50:31Z"
      },
      "message": "test: MiniWallet: add P2PK support",
      "tree": {
        "sha": "af3a5e647a1e3479654cabd65470db2575bf444f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af3a5e647a1e3479654cabd65470db2575bf444f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4741aec1dd28829f45abcc529cddaa0ff04d07a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4741aec1dd28829f45abcc529cddaa0ff04d07a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4741aec1dd28829f45abcc529cddaa0ff04d07a0"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 31,
      "deletions": 4
    },
    "files": [
      {
        "sha": "18822fc61071359b891659f53424f290950d7adf",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 31,
        "deletions": 4,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
        "patch": "@@ -6,6 +6,7 @@\n \n from decimal import Decimal\n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.key import ECKey\n from test_framework.messages import (\n     COIN,\n     COutPoint,\n@@ -16,8 +17,11 @@\n )\n from test_framework.script import (\n     CScript,\n+    LegacySignatureHash,\n+    OP_CHECKSIG,\n     OP_TRUE,\n     OP_NOP,\n+    SIGHASH_ALL,\n )\n from test_framework.util import (\n     assert_equal,\n@@ -27,12 +31,20 @@\n \n \n class MiniWallet:\n-    def __init__(self, test_node, *, raw_script=False):\n+    def __init__(self, test_node, *, raw_script=False, use_p2pk=False):\n         self._test_node = test_node\n         self._utxos = []\n+        self._priv_key = None\n+        self._address = None\n+\n         if raw_script:\n-            self._address = None\n             self._scriptPubKey = bytes(CScript([OP_TRUE]))\n+        elif use_p2pk:\n+            # use simple deterministic private key (k=1)\n+            self._priv_key = ECKey()\n+            self._priv_key.set((1).to_bytes(32, 'big'), True)\n+            pub_key = self._priv_key.get_pubkey()\n+            self._scriptPubKey = bytes(CScript([pub_key.get_bytes(), OP_CHECKSIG]))\n         else:\n             self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n             self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self._address)['scriptPubKey'])\n@@ -50,6 +62,13 @@ def scan_tx(self, tx):\n             if out['scriptPubKey']['hex'] == self._scriptPubKey.hex():\n                 self._utxos.append({'txid': tx['txid'], 'vout': out['n'], 'value': out['value']})\n \n+    def sign_tx(self, tx):\n+        \"\"\"Sign tx that has been created by MiniWallet in P2PK mode\"\"\"\n+        assert self._priv_key is not None\n+        (sighash, err) = LegacySignatureHash(CScript(self._scriptPubKey), tx, 0, SIGHASH_ALL)\n+        assert err is None\n+        tx.vin[0].scriptSig = CScript([self._priv_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+\n     def generate(self, num_blocks):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n         blocks = self._test_node.generatetodescriptor(num_blocks, f'raw({self._scriptPubKey.hex()})')\n@@ -99,7 +118,12 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n         if not self._address:\n             # raw script\n-            tx.vin[0].scriptSig = CScript([OP_NOP] * 35)  # pad to identical size\n+            if self._priv_key is not None:\n+                # P2PK, need to sign\n+                self.sign_tx(tx)\n+            else:\n+                # anyone-can-spend\n+                tx.vin[0].scriptSig = CScript([OP_NOP] * 35)  # pad to identical size\n         else:\n             tx.wit.vtxinwit = [CTxInWitness()]\n             tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n@@ -108,7 +132,10 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:\n-            assert_equal(tx_info['vsize'], vsize)\n+            # TODO: for P2PK, vsize is not constant due to varying scriptSig length,\n+            # so only check this for anyone-can-spend outputs right now\n+            if self._priv_key is None:\n+                assert_equal(tx_info['vsize'], vsize)\n             assert_equal(tx_info['fees']['base'], fee)\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n "
      }
    ]
  },
  {
    "sha": "4bea30169218e2f21e0c93a059966b41c8edd205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmVhMzAxNjkyMThlMmYyMWUwYzkzYTA1OTk2NmI0MWM4ZWRkMjA1",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-13T17:02:29Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-17T18:12:34Z"
      },
      "message": "test: use P2PK-MiniWallet for feature_csv_activation.py\n\nUsing the MiniWallet in P2PK mode, all transactions submitted to the\nmempool are following the standard policy now, i.e. the node command\nline parameter '-acceptnonstdtxn=1' is not needed anymore.",
      "tree": {
        "sha": "5a11ed3e687ba8678532e80dccca3cce473eee6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a11ed3e687ba8678532e80dccca3cce473eee6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bea30169218e2f21e0c93a059966b41c8edd205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bea30169218e2f21e0c93a059966b41c8edd205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bea30169218e2f21e0c93a059966b41c8edd205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bea30169218e2f21e0c93a059966b41c8edd205/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc7eb64e83f5b8e63f12729d5f77b1c920b136e4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d815ad83b1a49a4dae4a15e79514b55e8b2149d5",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bea30169218e2f21e0c93a059966b41c8edd205/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bea30169218e2f21e0c93a059966b41c8edd205/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=4bea30169218e2f21e0c93a059966b41c8edd205",
        "patch": "@@ -90,7 +90,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\n             '-whitelist=noban@127.0.0.1',\n-            '-acceptnonstdtxn=1',\n             '-par=1',  # Use only one script thread to get the exact reject reason for testing\n         ]]\n         self.supports_cli = False\n@@ -103,12 +102,14 @@ def create_self_transfer_from_utxo(self, input_tx):\n     def create_bip112special(self, input, txversion):\n         tx = self.create_self_transfer_from_utxo(input)\n         tx.nVersion = txversion\n+        self.miniwallet.sign_tx(tx)\n         tx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(tx.vin[0].scriptSig)))\n         return tx\n \n     def create_bip112emptystack(self, input, txversion):\n         tx = self.create_self_transfer_from_utxo(input)\n         tx.nVersion = txversion\n+        self.miniwallet.sign_tx(tx)\n         tx.vin[0].scriptSig = CScript([OP_CHECKSEQUENCEVERIFY] + list(CScript(tx.vin[0].scriptSig)))\n         return tx\n \n@@ -126,6 +127,7 @@ def create_bip68txs(self, bip68inputs, txversion, locktime_delta=0):\n             tx = self.create_self_transfer_from_utxo(bip68inputs[i])\n             tx.nVersion = txversion\n             tx.vin[0].nSequence = locktime + locktime_delta\n+            self.miniwallet.sign_tx(tx)\n             tx.rehash()\n             txs.append({'tx': tx, 'sdf': sdf, 'stf': stf})\n \n@@ -143,6 +145,7 @@ def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta=0\n             else:  # vary nSequence instead, OP_CSV is fixed\n                 tx.vin[0].nSequence = locktime + locktime_delta\n             tx.nVersion = txversion\n+            self.miniwallet.sign_tx(tx)\n             if (varyOP_CSV):\n                 tx.vin[0].scriptSig = CScript([locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(tx.vin[0].scriptSig)))\n             else:\n@@ -178,7 +181,7 @@ def send_blocks(self, blocks, success=True, reject_reason=None):\n \n     def run_test(self):\n         self.helper_peer = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        self.miniwallet = MiniWallet(self.nodes[0], raw_script=True)\n+        self.miniwallet = MiniWallet(self.nodes[0], use_p2pk=True)\n \n         self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n         long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n@@ -285,7 +288,7 @@ def run_test(self):\n         success_txs = []\n         # BIP113 tx, -1 CSV tx and empty stack CSV tx should succeed\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n-        bip113tx_v1.rehash()\n+        self.miniwallet.sign_tx(bip113tx_v1)\n         success_txs.append(bip113tx_v1)\n         success_txs.append(bip112tx_special_v1)\n         success_txs.append(bip112tx_emptystack_v1)\n@@ -305,7 +308,7 @@ def run_test(self):\n         success_txs = []\n         # BIP113 tx, -1 CSV tx and empty stack CSV tx should succeed\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n-        bip113tx_v2.rehash()\n+        self.miniwallet.sign_tx(bip113tx_v2)\n         success_txs.append(bip113tx_v2)\n         success_txs.append(bip112tx_special_v2)\n         success_txs.append(bip112tx_emptystack_v2)\n@@ -331,16 +334,20 @@ def run_test(self):\n         self.log.info(\"BIP 113 tests\")\n         # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n+        self.miniwallet.sign_tx(bip113tx_v1)\n         bip113tx_v1.rehash()\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n+        self.miniwallet.sign_tx(bip113tx_v2)\n         bip113tx_v2.rehash()\n         for bip113tx in [bip113tx_v1, bip113tx_v2]:\n             self.send_blocks([self.create_test_block([bip113tx])], success=False, reject_reason='bad-txns-nonfinal')\n \n         # BIP 113 tests should now pass if the locktime is < MTP\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n+        self.miniwallet.sign_tx(bip113tx_v1)\n         bip113tx_v1.rehash()\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n+        self.miniwallet.sign_tx(bip113tx_v2)\n         bip113tx_v2.rehash()\n         for bip113tx in [bip113tx_v1, bip113tx_v2]:\n             self.send_blocks([self.create_test_block([bip113tx])])\n@@ -465,6 +472,7 @@ def run_test(self):\n         time_txs = []\n         for tx in [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and tx['stf']]:\n             tx.vin[0].nSequence = BASE_RELATIVE_LOCKTIME | SEQ_TYPE_FLAG\n+            self.miniwallet.sign_tx(tx)\n             tx.rehash()\n             time_txs.append(tx)\n "
      }
    ]
  }
]