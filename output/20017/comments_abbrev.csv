promag,2020-09-25 18:59:39,"Here's more goals of this change:\n- get param by name, like `ctx.param<bool>(""involves_watchonly"")` and have it with the correct format and make it non-breaking change,\n- try to use the default value specified in RPCArg (Done ✓)\n- support chunked response - don't rely on the return `UniValue`\n- this simplifies code review as request.param is no longer used in the new variant\n- detect unu",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-699099728,699099728,
kallewoof,2020-09-30 06:35:46,"Concept ACK\n\nI think this looks nicer btw: https://github.com/kallewoof/bitcoin/commit/fe349cf4410892b62e98c4f119ac005254b4292e\n",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701188620,701188620,
promag,2020-09-30 08:35:17,"@kallewoof thanks for taking a look! I'll wait for more concept acks before going forward. Regarding your suggestion to use `operator()`, I tend to see it used for functors. In this case, to get param values, it's not that expressiv.",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701247788,701247788,
kallewoof,2020-09-30 08:47:48,"Yeah, it may be confusing too. I *do* think we can afford to use one function that takes a null default, though. Overhead negligible. Gotcha on the concept ACKs.\n\nEdit: alternatively, `operator[]` for the no default case, and `ParamOrDefault()` for the default case..\n\nEdit again: I dug some more, and it doesn't seem like the `RPCHelpMan` or `JSONRPCRequest` are being deallocated, but some ",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701254290,701254290,
DrahtBot,2020-09-30 19:36:07,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701600699,701600699,
promag,2020-10-01 01:02:23,Updated with IMO a better API. @ryanofsky care to take a look too?,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701726275,701726275,
kallewoof,2020-10-01 07:17:39,@promag Nice. I can't figure out what was wrong with the old code. Care to explain?,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701940238,701940238,
promag,2020-10-01 07:49:36,"> @promag Nice. I can't figure out what was wrong with the old code. Care to explain?\n\nBefore `fun` was captured by reference, and it kabooms when called.\n```cpp\n    RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples, RPCLegacyMethodImpl fun)\n        : RPCHelpMan(std::move(name), std::move(description), std::move(args)",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-701957039,701957039,
MarcoFalke,2020-10-01 11:43:47,Concept ACK. Would be nice if the default was already filled in by rpc help man. ;),https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-702077986,702077986,
promag,2020-10-01 14:58:25,"@MarcoFalke yes, it was already suggested in https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-699099728 but I think that can be done next.\n\nI also wonder if this should be an exhaustive change, at the moment I'm inclined to do it.",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-702194432,702194432,
MarcoFalke,2020-10-01 15:00:11,The benefit of doing it in one step would be to avoid changing the same line of code twice,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-702195753,702195753,
promag,2020-10-01 17:23:54,See last commit @MarcoFalke.,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-702282712,702282712,
MarcoFalke,2020-12-03 09:43:02,Concept ACK with last commit included,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-737792964,737792964,
ajtowns,2021-01-13 08:39:38,"Concept ACK, particularly with pulling defaults from the rpc help.",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-759295887,759295887,
promag,2021-04-11 15:46:10,I guess it’s time to rebase and push this forward?,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-817328339,817328339,
fanquake,2021-04-12 00:43:52,"> I guess it’s time to rebase and push this forward?\n\nYes, please do.",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-817407917,817407917,
promag,2021-04-19 10:31:32,"Rebased now that #21679 is merged.\n\nNot sure what is the best approach going forward, whether this should be an exhaustive change or not. I've included a commit to just change `getnetworkhashps` RPC to serve as example.",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-822363519,822363519,
MarcoFalke,2021-04-21 10:29:39,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-823957011,823957011,
LarryRuane,2021-08-04 02:15:41,reACK f473a17740f57eaecd884b59333e6e44e1695286,https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-892305946,892305946,
promag,2021-09-30 08:01:36,"@MarcoFalke updated, I think fail is unrelated.",https://github.com/bitcoin/bitcoin/pull/20017#issuecomment-930974840,930974840,
kallewoof,2020-09-30 08:32:00,I believe the errors appearing are due to one or both of these going out of scope before the function call happens.,https://github.com/bitcoin/bitcoin/pull/20017#discussion_r497335296,497335296,src/rpc/util.h
promag,2020-10-01 00:08:33,Fixed.,https://github.com/bitcoin/bitcoin/pull/20017#discussion_r497866882,497866882,src/rpc/util.h
promag,2020-10-01 01:04:24,"6e1fecd39fdadbfd1ea3a2eb3e2c74db43cecb65\n\nThis allows to throw with correct parameter name in `ParseHashV`.",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r497899986,497899986,src/rpc/util.h
kallewoof,2020-10-01 08:47:49,"This is a behavior change, as `height` is not optional; it would throw before, and will silently use height 0 now.",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r498083117,498083117,src/rpc/blockchain.cpp
kallewoof,2020-10-01 08:48:40,"~Same as elsewhere; this is not an optional value, so it shouldn't silently pass. (I won't mention these anymore, but there are others.)~",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r498083600,498083600,src/rpc/blockchain.cpp
promag,2020-10-01 08:53:39,"> and will silently use height 0 now.\n\nHow? `param<int>(index)` results in the same code as before.",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r498086691,498086691,src/rpc/blockchain.cpp
kallewoof,2020-10-01 08:57:11,"I thought the 0 was a default value, not the index. You're right.",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r498088927,498088927,src/rpc/blockchain.cpp
LarryRuane,2020-12-18 02:09:48,"nit: reverse the order of these two lines. (Same below, `getmempooldescendants`.)",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r545526786,545526786,src/rpc/blockchain.cpp
LarryRuane,2020-12-21 19:07:25,"```suggestion\n    CHECK_NONFATAL(arg.m_fallback.type() == typeid(std::string));\n```\nand the two other places within this file that call `m_fallback.which()`. However, you're not changing those other two places in this PR, so if you don't want to change them (personally I would favor doing so, as this is much easier to understand), you may want to not take this suggestion.",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r546878941,546878941,src/rpc/util.cpp
MarcoFalke,2021-08-04 14:58:28,"62047855691e1f1e07c99db259177b2fdb82cb2c: It looks like you are using this like a struct (without `m_` prefix and scoped access `ctx.request`), so it could make sense to make it a struct. Also, with `RPCHelpMan` being renamed to `RPCMethod` (https://github.com/bitcoin/bitcoin/pull/19386#discussion_r447743298), it could make sese to name the variable appropriately:\n\n```suggestion\nstruct RPCCo",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r682698609,682698609,src/rpc/util.h
MarcoFalke,2021-08-04 15:12:03,"I don't understand how any of this works. I removed this and everything compiled just fine:\n\n```diff\ndiff --git a/src/rpc/util.h b/src/rpc/util.h\nindex f7a1acd1b5..1d5b7fc318 100644\n--- a/src/rpc/util.h\n+++ b/src/rpc/util.h\n@@ -348,11 +348,6 @@ struct RPCParam\n     const RPCArg& m_arg;\n     const UniValue& m_value;\n     std::optional<T> m_defaults = {};\n-    RPCParam<T>& defa",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r682710976,682710976,src/rpc/util.h
promag,2021-08-29 18:05:36,"https://github.com/bitcoin/bitcoin/pull/20017/files#r682710976\n\n@MarcoFalke yup, not used in this branch.",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r698050546,698050546,src/rpc/util.h
MarcoFalke,2021-08-30 09:01:42,"Then maybe remove the dead, (not even compiled) code?",https://github.com/bitcoin/bitcoin/pull/20017#discussion_r698318014,698318014,src/rpc/util.h
MarcoFalke,2021-09-28 05:54:18,@promag are you still working on this?,https://github.com/bitcoin/bitcoin/pull/20017#discussion_r717245320,717245320,src/rpc/util.h
promag,2021-09-28 06:24:50,I’ll rebase and remove dead code.,https://github.com/bitcoin/bitcoin/pull/20017#discussion_r717259530,717259530,src/rpc/util.h
