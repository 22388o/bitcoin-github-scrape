[
  {
    "sha": "6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWM0YjdlYjIwYWJmMDVkZDZlM2MwODg1NjQ0NjE2YTJjMmFjZmQ3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T00:49:02Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T00:49:02Z"
      },
      "message": "leveldbwrapper: Remove unused .Prev(), .SeekToLast() methods\n\nAlso, trim trailing whitespace.",
      "tree": {
        "sha": "ca06e01a98dcf368d18ac796498a9d581f9ef308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca06e01a98dcf368d18ac796498a9d581f9ef308"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a09297010e171af28a7a3fcad65a4e0aefea53ba"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 14,
      "deletions": 18
    },
    "files": [
      {
        "sha": "641d25152d6a7c6dfac3b8e56086e8bb471e7831",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "patch": "@@ -76,7 +76,7 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     bool key_exists = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n \n     if (!key_exists && obfuscate && IsEmpty()) {\n-        // Initialize non-degenerate obfuscation if it won't upset \n+        // Initialize non-degenerate obfuscation if it won't upset\n         // existing, non-obfuscated data.\n         std::vector<unsigned char> new_key = CreateObfuscateKey();\n \n@@ -118,10 +118,10 @@ const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n \n /**\n- * Returns a string (consisting of 8 random bytes) suitable for use as an \n- * obfuscating XOR key. \n+ * Returns a string (consisting of 8 random bytes) suitable for use as an\n+ * obfuscating XOR key.\n  */\n-std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const \n+std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n {\n     unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n     GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n@@ -136,19 +136,17 @@ bool CLevelDBWrapper::IsEmpty()\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const \n-{ \n-    return obfuscate_key; \n+const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const\n+{\n+    return obfuscate_key;\n }\n \n std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n-{ \n-    return HexStr(obfuscate_key); \n+{\n+    return HexStr(obfuscate_key);\n }\n \n CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n bool CLevelDBIterator::Valid() { return piter->Valid(); }\n void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n void CLevelDBIterator::Next() { piter->Next(); }\n-void CLevelDBIterator::Prev() { piter->Prev(); }"
      },
      {
        "sha": "0effea407acd3e2c112ff183138ddc06f70963f0",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "patch": "@@ -68,7 +68,7 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n- \n+\n class CLevelDBIterator\n {\n private:\n@@ -88,7 +88,6 @@ class CLevelDBIterator\n     bool Valid();\n \n     void SeekToFirst();\n-    void SeekToLast();\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n@@ -99,7 +98,6 @@ class CLevelDBIterator\n     }\n \n     void Next();\n-    void Prev();\n \n     template<typename K> bool GetKey(K& key) {\n         leveldb::Slice slKey = piter->key();\n@@ -133,7 +131,7 @@ class CLevelDBIterator\n     }\n \n };\n- \n+\n class CLevelDBWrapper\n {\n private:\n@@ -163,10 +161,10 @@ class CLevelDBWrapper\n \n     //! the key under which the obfuscation key is stored\n     static const std::string OBFUSCATE_KEY_KEY;\n-    \n+\n     //! the length of the obfuscate key in number of bytes\n     static const unsigned int OBFUSCATE_KEY_NUM_BYTES;\n-    \n+\n     std::vector<unsigned char> CreateObfuscateKey() const;\n \n public:\n@@ -256,7 +254,7 @@ class CLevelDBWrapper\n         return WriteBatch(batch, true);\n     }\n \n-    CLevelDBIterator *NewIterator() \n+    CLevelDBIterator *NewIterator()\n     {\n         return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }"
      }
    ]
  },
  {
    "sha": "8587b23038b88340ec64253ea4282afe90187a69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTg3YjIzMDM4Yjg4MzQwZWM2NDI1M2VhNDI4MmFmZTkwMTg3YTY5",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T01:02:20Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T01:02:20Z"
      },
      "message": "leveldbwrapper symbol rename: Remove \"Level\" from class, etc. names",
      "tree": {
        "sha": "50b7b71777325fae5397f2ba144968309c1a0c94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50b7b71777325fae5397f2ba144968309c1a0c94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8587b23038b88340ec64253ea4282afe90187a69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8587b23038b88340ec64253ea4282afe90187a69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8587b23038b88340ec64253ea4282afe90187a69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8587b23038b88340ec64253ea4282afe90187a69/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 65,
      "deletions": 65
    },
    "files": [
      {
        "sha": "6ecf7c7f0ed4e54c872ea2cb933dbb0023e3646f",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -15,18 +15,18 @@\n #include <memenv.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status) throw(leveldb_error)\n+void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n {\n     if (status.ok())\n         return;\n     LogPrintf(\"%s\\n\", status.ToString());\n     if (status.IsCorruption())\n-        throw leveldb_error(\"Database corrupted\");\n+        throw dbwrapper_error(\"Database corrupted\");\n     if (status.IsIOError())\n-        throw leveldb_error(\"Database I/O error\");\n+        throw dbwrapper_error(\"Database I/O error\");\n     if (status.IsNotFound())\n-        throw leveldb_error(\"Database entry missing\");\n-    throw leveldb_error(\"Unknown database error\");\n+        throw dbwrapper_error(\"Database entry missing\");\n+    throw dbwrapper_error(\"Unknown database error\");\n }\n \n static leveldb::Options GetOptions(size_t nCacheSize)\n@@ -45,7 +45,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -90,7 +90,7 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n }\n \n-CLevelDBWrapper::~CLevelDBWrapper()\n+CDBWrapper::~CDBWrapper()\n {\n     delete pdb;\n     pdb = NULL;\n@@ -102,7 +102,7 @@ CLevelDBWrapper::~CLevelDBWrapper()\n     options.env = NULL;\n }\n \n-bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb_error)\n+bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     HandleError(status);\n@@ -113,40 +113,40 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n //\n // We must use a string constructor which specifies length so that we copy\n // past the null-terminator.\n-const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n+const std::string CDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n \n-const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n+const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n \n /**\n  * Returns a string (consisting of 8 random bytes) suitable for use as an\n  * obfuscating XOR key.\n  */\n-std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n+std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const\n {\n     unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n     GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n     return std::vector<unsigned char>(&buff[0], &buff[OBFUSCATE_KEY_NUM_BYTES]);\n \n }\n \n-bool CLevelDBWrapper::IsEmpty()\n+bool CDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n+    boost::scoped_ptr<CDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const\n+const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n {\n     return obfuscate_key;\n }\n \n-std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n+std::string CDBWrapper::GetObfuscateKeyHex() const\n {\n     return HexStr(obfuscate_key);\n }\n \n-CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n-bool CLevelDBIterator::Valid() { return piter->Valid(); }\n-void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CLevelDBIterator::Next() { piter->Next(); }\n+CDBIterator::~CDBIterator() { delete piter; }\n+bool CDBIterator::Valid() { return piter->Valid(); }\n+void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CDBIterator::Next() { piter->Next(); }"
      },
      {
        "sha": "c8fc457d9037e8d86cd3d2c5edf08e5e7992688b",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -17,18 +17,18 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n-class leveldb_error : public std::runtime_error\n+class dbwrapper_error : public std::runtime_error\n {\n public:\n-    leveldb_error(const std::string& msg) : std::runtime_error(msg) {}\n+    dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(leveldb_error);\n+void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n \n-/** Batch of changes queued to be written to a CLevelDBWrapper */\n-class CLevelDBBatch\n+/** Batch of changes queued to be written to a CDBWrapper */\n+class CDBBatch\n {\n-    friend class CLevelDBWrapper;\n+    friend class CDBWrapper;\n \n private:\n     leveldb::WriteBatch batch;\n@@ -38,7 +38,7 @@ class CLevelDBBatch\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -69,7 +69,7 @@ class CLevelDBBatch\n     }\n };\n \n-class CLevelDBIterator\n+class CDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n@@ -81,9 +81,9 @@ class CLevelDBIterator\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n+    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n         piter(piterIn), obfuscate_key(obfuscate_key) { };\n-    ~CLevelDBIterator();\n+    ~CDBIterator();\n \n     bool Valid();\n \n@@ -132,7 +132,7 @@ class CLevelDBIterator\n \n };\n \n-class CLevelDBWrapper\n+class CDBWrapper\n {\n private:\n     //! custom environment this database is using (may be NULL in case of default environment)\n@@ -176,11 +176,11 @@ class CLevelDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n-    ~CLevelDBWrapper();\n+    CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    ~CDBWrapper();\n \n     template <typename K, typename V>\n-    bool Read(const K& key, V& value) const throw(leveldb_error)\n+    bool Read(const K& key, V& value) const throw(dbwrapper_error)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -206,15 +206,15 @@ class CLevelDBWrapper\n     }\n \n     template <typename K, typename V>\n-    bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n+    bool Write(const K& key, const V& value, bool fSync = false) throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n     template <typename K>\n-    bool Exists(const K& key) const throw(leveldb_error)\n+    bool Exists(const K& key) const throw(dbwrapper_error)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -233,30 +233,30 @@ class CLevelDBWrapper\n     }\n \n     template <typename K>\n-    bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n+    bool Erase(const K& key, bool fSync = false) throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CLevelDBBatch& batch, bool fSync = false) throw(leveldb_error);\n+    bool WriteBatch(CDBBatch& batch, bool fSync = false) throw(dbwrapper_error);\n \n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {\n         return true;\n     }\n \n-    bool Sync() throw(leveldb_error)\n+    bool Sync() throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n-    CLevelDBIterator *NewIterator()\n+    CDBIterator *NewIterator()\n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**"
      },
      {
        "sha": "8defb8a8ffe9a0e74b22b4ebf44121b2eab1efc3",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -25,15 +25,15 @@ bool is_null_key(const vector<unsigned char>& key) {\n     return isnull;\n }\n  \n-BOOST_FIXTURE_TEST_SUITE(leveldbwrapper_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n                        \n-BOOST_AUTO_TEST_CASE(leveldbwrapper)\n+BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n         uint256 res;\n@@ -48,13 +48,13 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n }\n \n // Test batch operations\n-BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n         uint256 in = GetRandHash();\n@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n+        CDBBatch batch(&dbw.GetObfuscateKey());\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);\n@@ -85,13 +85,13 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n         char key = 'j';\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n         uint256 in2 = GetRandHash();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n-        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+        boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n \n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = GetRandHash();\n     uint256 res;\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     delete dbw;\n \n     // Now, set up another wrapper that wants to obfuscate the same directory\n-    CLevelDBWrapper odbw(ph, (1 << 10), false, false, true);\n+    CDBWrapper odbw(ph, (1 << 10), false, false, true);\n \n     // Check that the key/val we wrote with unobfuscated wrapper exists and \n     // is readable.\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = GetRandHash();\n     uint256 res;\n@@ -188,7 +188,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     delete dbw;\n \n     // Simulate a -reindex by wiping the existing data store\n-    CLevelDBWrapper odbw(ph, (1 << 10), false, true, true);\n+    CDBWrapper odbw(ph, (1 << 10), false, true, true);\n \n     // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n     uint256 res2;"
      },
      {
        "sha": "f0868a1ebfbde4c978955eac581572a2f533b47f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(&db.GetObfuscateKey());\n+    CDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -71,7 +71,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n@@ -98,7 +98,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    boost::scoped_ptr<CDBIterator> pcursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n     pcursor->Seek(DB_COINS);\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -157,7 +157,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n@@ -177,7 +177,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n \n     pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n "
      },
      {
        "sha": "1e8fccea45878253f121cf92d54c767205f9c99a",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -26,11 +26,11 @@ static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n \n-/** CCoinsView backed by the LevelDB coin database (chainstate/) */\n+/** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {\n protected:\n-    CLevelDBWrapper db;\n+    CDBWrapper db;\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n@@ -42,7 +42,7 @@ class CCoinsViewDB : public CCoinsView\n };\n \n /** Access to the block database (blocks/index/) */\n-class CBlockTreeDB : public CLevelDBWrapper\n+class CBlockTreeDB : public CDBWrapper\n {\n public:\n     CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);"
      }
    ]
  },
  {
    "sha": "3795e8152b678b9f805a395b144190a9f2fa2af4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzk1ZTgxNTJiNjc4YjlmODA1YTM5NWIxNDQxOTBhOWYyZmEyYWY0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T01:33:06Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T01:33:06Z"
      },
      "message": "leveldbwrapper file rename to dbwrapper.*",
      "tree": {
        "sha": "2d714bcb45c42b93c4efc911c886ab238b451605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d714bcb45c42b93c4efc911c886ab238b451605"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3795e8152b678b9f805a395b144190a9f2fa2af4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3795e8152b678b9f805a395b144190a9f2fa2af4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3795e8152b678b9f805a395b144190a9f2fa2af4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3795e8152b678b9f805a395b144190a9f2fa2af4/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8587b23038b88340ec64253ea4282afe90187a69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8587b23038b88340ec64253ea4282afe90187a69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8587b23038b88340ec64253ea4282afe90187a69"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "312643cec36e38c0aee5164f304404d08270c37d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -110,7 +110,7 @@ BITCOIN_CORE_H = \\\n   init.h \\\n   key.h \\\n   keystore.h \\\n-  leveldbwrapper.h \\\n+  dbwrapper.h \\\n   limitedmap.h \\\n   main.h \\\n   memusage.h \\\n@@ -188,7 +188,7 @@ libbitcoin_server_a_SOURCES = \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\\n-  leveldbwrapper.cpp \\\n+  dbwrapper.cpp \\\n   main.cpp \\\n   merkleblock.cpp \\\n   miner.cpp \\"
      },
      {
        "sha": "f23a8f41fc42d8a97d5a65be7dad268883ef501d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -54,7 +54,7 @@ BITCOIN_TESTS =\\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n-  test/leveldbwrapper_tests.cpp \\\n+  test/dbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\"
      },
      {
        "sha": "b6307cf0bf37a98c76e5be6b97c4658de894b222",
        "filename": "src/dbwrapper.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n \n #include \"util.h\"\n #include \"random.h\"",
        "previous_filename": "src/leveldbwrapper.cpp"
      },
      {
        "sha": "aa287675086bb98f48804115a392e7358ec865a7",
        "filename": "src/dbwrapper.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_LEVELDBWRAPPER_H\n-#define BITCOIN_LEVELDBWRAPPER_H\n+#ifndef BITCOIN_DBWRAPPER_H\n+#define BITCOIN_DBWRAPPER_H\n \n #include \"clientversion.h\"\n #include \"serialize.h\"\n@@ -276,5 +276,5 @@ class CDBWrapper\n \n };\n \n-#endif // BITCOIN_LEVELDBWRAPPER_H\n+#endif // BITCOIN_DBWRAPPER_H\n ",
        "previous_filename": "src/leveldbwrapper.h"
      },
      {
        "sha": "8b6b0697ab1d0848c322a48f2ce73d823d910011",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n #include \"uint256.h\"\n #include \"random.h\"\n #include \"test/test_bitcoin.h\"",
        "previous_filename": "src/test/leveldbwrapper_tests.cpp"
      },
      {
        "sha": "586ab55d0d5501754a7f25d021705b33307454a8",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_TXDB_H\n \n #include \"coins.h\"\n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n \n #include <map>\n #include <string>"
      }
    ]
  }
]