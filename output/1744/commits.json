[
  {
    "sha": "f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzVjNmM0ZmI5ZDFmMDZjMWJhMTg2YzQ5YjU4MmM4MjA2NzlhMThj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-08-28T21:04:54Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-08-28T21:04:54Z"
      },
      "message": "Refactor: move alert code from main to alert.cpp/h",
      "tree": {
        "sha": "44548e9aff5e64cacfc3f49a794eaf918674f7d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44548e9aff5e64cacfc3f49a794eaf918674f7d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06707dd610bbdecf3a4e25534ae74bad67ac0a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06707dd610bbdecf3a4e25534ae74bad67ac0a13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06707dd610bbdecf3a4e25534ae74bad67ac0a13"
      }
    ],
    "stats": {
      "total": 641,
      "additions": 348,
      "deletions": 293
    },
    "files": [
      {
        "sha": "0711ae1c91f541529a54437ff1ab6d1df86d50bc",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -119,6 +119,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/aboutdialog.h \\\n     src/qt/editaddressdialog.h \\\n     src/qt/bitcoinaddressvalidator.h \\\n+    src/alert.h \\\n     src/addrman.h \\\n     src/base58.h \\\n     src/bignum.h \\\n@@ -188,6 +189,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/aboutdialog.cpp \\\n     src/qt/editaddressdialog.cpp \\\n     src/qt/bitcoinaddressvalidator.cpp \\\n+    src/alert.cpp \\\n     src/version.cpp \\\n     src/sync.cpp \\\n     src/util.cpp \\"
      },
      {
        "sha": "6db9bf75628a0fc0880c135c311f8a4a7dd90a55",
        "filename": "src/alert.cpp",
        "status": "added",
        "additions": 236,
        "deletions": 0,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -0,0 +1,236 @@\n+//\n+// Alert system\n+//\n+\n+#include <boost/foreach.hpp>\n+#include <map>\n+\n+#include \"alert.h\"\n+#include \"key.h\"\n+#include \"net.h\"\n+#include \"sync.h\"\n+#include \"ui_interface.h\"\n+\n+using namespace std;\n+\n+map<uint256, CAlert> mapAlerts;\n+CCriticalSection cs_mapAlerts;\n+\n+void CUnsignedAlert::SetNull()\n+{\n+    nVersion = 1;\n+    nRelayUntil = 0;\n+    nExpiration = 0;\n+    nID = 0;\n+    nCancel = 0;\n+    setCancel.clear();\n+    nMinVer = 0;\n+    nMaxVer = 0;\n+    setSubVer.clear();\n+    nPriority = 0;\n+\n+    strComment.clear();\n+    strStatusBar.clear();\n+    strReserved.clear();\n+}\n+\n+std::string CUnsignedAlert::ToString() const\n+{\n+    std::string strSetCancel;\n+    BOOST_FOREACH(int n, setCancel)\n+        strSetCancel += strprintf(\"%d \", n);\n+    std::string strSetSubVer;\n+    BOOST_FOREACH(std::string str, setSubVer)\n+        strSetSubVer += \"\\\"\" + str + \"\\\" \";\n+    return strprintf(\n+        \"CAlert(\\n\"\n+        \"    nVersion     = %d\\n\"\n+        \"    nRelayUntil  = %\"PRI64d\"\\n\"\n+        \"    nExpiration  = %\"PRI64d\"\\n\"\n+        \"    nID          = %d\\n\"\n+        \"    nCancel      = %d\\n\"\n+        \"    setCancel    = %s\\n\"\n+        \"    nMinVer      = %d\\n\"\n+        \"    nMaxVer      = %d\\n\"\n+        \"    setSubVer    = %s\\n\"\n+        \"    nPriority    = %d\\n\"\n+        \"    strComment   = \\\"%s\\\"\\n\"\n+        \"    strStatusBar = \\\"%s\\\"\\n\"\n+        \")\\n\",\n+        nVersion,\n+        nRelayUntil,\n+        nExpiration,\n+        nID,\n+        nCancel,\n+        strSetCancel.c_str(),\n+        nMinVer,\n+        nMaxVer,\n+        strSetSubVer.c_str(),\n+        nPriority,\n+        strComment.c_str(),\n+        strStatusBar.c_str());\n+}\n+\n+void CUnsignedAlert::print() const\n+{\n+    printf(\"%s\", ToString().c_str());\n+}\n+\n+void CAlert::SetNull()\n+{\n+    CUnsignedAlert::SetNull();\n+    vchMsg.clear();\n+    vchSig.clear();\n+}\n+\n+bool CAlert::IsNull() const\n+{\n+    return (nExpiration == 0);\n+}\n+\n+uint256 CAlert::GetHash() const\n+{\n+    return Hash(this->vchMsg.begin(), this->vchMsg.end());\n+}\n+\n+bool CAlert::IsInEffect() const\n+{\n+    return (GetAdjustedTime() < nExpiration);\n+}\n+\n+bool CAlert::Cancels(const CAlert& alert) const\n+{\n+    if (!IsInEffect())\n+        return false; // this was a no-op before 31403\n+    return (alert.nID <= nCancel || setCancel.count(alert.nID));\n+}\n+\n+bool CAlert::AppliesTo(int nVersion, std::string strSubVerIn) const\n+{\n+    // TODO: rework for client-version-embedded-in-strSubVer ?\n+    return (IsInEffect() &&\n+            nMinVer <= nVersion && nVersion <= nMaxVer &&\n+            (setSubVer.empty() || setSubVer.count(strSubVerIn)));\n+}\n+\n+bool CAlert::AppliesToMe() const\n+{\n+    return AppliesTo(PROTOCOL_VERSION, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<std::string>()));\n+}\n+\n+bool CAlert::RelayTo(CNode* pnode) const\n+{\n+    if (!IsInEffect())\n+        return false;\n+    // returns true if wasn't already contained in the set\n+    if (pnode->setKnown.insert(GetHash()).second)\n+    {\n+        if (AppliesTo(pnode->nVersion, pnode->strSubVer) ||\n+            AppliesToMe() ||\n+            GetAdjustedTime() < nRelayUntil)\n+        {\n+            pnode->PushMessage(\"alert\", *this);\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CAlert::CheckSignature() const\n+{\n+    CKey key;\n+    if (!key.SetPubKey(ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")))\n+        return error(\"CAlert::CheckSignature() : SetPubKey failed\");\n+    if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n+        return error(\"CAlert::CheckSignature() : verify signature failed\");\n+\n+    // Now unserialize the data\n+    CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);\n+    sMsg >> *(CUnsignedAlert*)this;\n+    return true;\n+}\n+\n+CAlert CAlert::getAlertByHash(const uint256 &hash)\n+{\n+    CAlert retval;\n+    {\n+        LOCK(cs_mapAlerts);\n+        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n+        if(mi != mapAlerts.end())\n+            retval = mi->second;\n+    }\n+    return retval;\n+}\n+\n+bool CAlert::ProcessAlert()\n+{\n+    if (!CheckSignature())\n+        return false;\n+    if (!IsInEffect())\n+        return false;\n+\n+    // alert.nID=max is reserved for if the alert key is\n+    // compromised. It must have a pre-defined message,\n+    // must never expire, must apply to all versions,\n+    // and must cancel all previous\n+    // alerts or it will be ignored (so an attacker can't\n+    // send an \"everything is OK, don't panic\" version that\n+    // cannot be overridden):\n+    int maxInt = std::numeric_limits<int>::max();\n+    if (nID == maxInt)\n+    {\n+        if (!(\n+                nExpiration == maxInt &&\n+                nCancel == (maxInt-1) &&\n+                nMinVer == 0 &&\n+                nMaxVer == maxInt &&\n+                setSubVer.empty() &&\n+                nPriority == maxInt &&\n+                strStatusBar == \"URGENT: Alert key compromised, upgrade required\"\n+                ))\n+            return false;\n+    }\n+\n+    {\n+        LOCK(cs_mapAlerts);\n+        // Cancel previous alerts\n+        for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n+        {\n+            const CAlert& alert = (*mi).second;\n+            if (Cancels(alert))\n+            {\n+                printf(\"cancelling alert %d\\n\", alert.nID);\n+                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n+                mapAlerts.erase(mi++);\n+            }\n+            else if (!alert.IsInEffect())\n+            {\n+                printf(\"expiring alert %d\\n\", alert.nID);\n+                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n+                mapAlerts.erase(mi++);\n+            }\n+            else\n+                mi++;\n+        }\n+\n+        // Check if this alert has been cancelled\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        {\n+            const CAlert& alert = item.second;\n+            if (alert.Cancels(*this))\n+            {\n+                printf(\"alert already cancelled by %d\\n\", alert.nID);\n+                return false;\n+            }\n+        }\n+\n+        // Add to mapAlerts\n+        mapAlerts.insert(make_pair(GetHash(), *this));\n+        // Notify UI if it applies to me\n+        if(AppliesToMe())\n+            uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n+    }\n+\n+    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n+    return true;\n+}"
      },
      {
        "sha": "7949c769726ffa460e8a5ea83fc28202434ecd8d",
        "filename": "src/alert.h",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOINALERT_H_\n+#define _BITCOINALERT_H_ 1\n+\n+#include <set>\n+#include <string>\n+\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+class CNode;\n+\n+/** Alerts are for notifying old versions if they become too obsolete and\n+ * need to upgrade.  The message is displayed in the status bar.\n+ * Alert messages are broadcast as a vector of signed data.  Unserializing may\n+ * not read the entire buffer if the alert is for a newer version, but older\n+ * versions can still relay the original data.\n+ */\n+class CUnsignedAlert\n+{\n+public:\n+    int nVersion;\n+    int64 nRelayUntil;      // when newer nodes stop relaying to newer nodes\n+    int64 nExpiration;\n+    int nID;\n+    int nCancel;\n+    std::set<int> setCancel;\n+    int nMinVer;            // lowest version inclusive\n+    int nMaxVer;            // highest version inclusive\n+    std::set<std::string> setSubVer;  // empty matches all\n+    int nPriority;\n+\n+    // Actions\n+    std::string strComment;\n+    std::string strStatusBar;\n+    std::string strReserved;\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nRelayUntil);\n+        READWRITE(nExpiration);\n+        READWRITE(nID);\n+        READWRITE(nCancel);\n+        READWRITE(setCancel);\n+        READWRITE(nMinVer);\n+        READWRITE(nMaxVer);\n+        READWRITE(setSubVer);\n+        READWRITE(nPriority);\n+\n+        READWRITE(strComment);\n+        READWRITE(strStatusBar);\n+        READWRITE(strReserved);\n+    )\n+\n+    void SetNull();\n+\n+    std::string ToString() const;\n+    void print() const;\n+};\n+\n+/** An alert is a combination of a serialized CUnsignedAlert and a signature. */\n+class CAlert : public CUnsignedAlert\n+{\n+public:\n+    std::vector<unsigned char> vchMsg;\n+    std::vector<unsigned char> vchSig;\n+\n+    CAlert()\n+    {\n+        SetNull();\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(vchMsg);\n+        READWRITE(vchSig);\n+    )\n+\n+    void SetNull();\n+    bool IsNull() const;\n+    uint256 GetHash() const;\n+    bool IsInEffect() const;\n+    bool Cancels(const CAlert& alert) const;\n+    bool AppliesTo(int nVersion, std::string strSubVerIn) const;\n+    bool AppliesToMe() const;\n+    bool RelayTo(CNode* pnode) const;\n+    bool CheckSignature() const;\n+    bool ProcessAlert();\n+\n+    /*\n+     * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n+     */\n+    static CAlert getAlertByHash(const uint256 &hash);\n+};\n+\n+#endif"
      },
      {
        "sha": "010db0c1e98e93cd196f12a7bb1f4f31dbe8b3f7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 87,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"alert.h\"\n #include \"checkpoints.h\"\n #include \"db.h\"\n #include \"net.h\"\n@@ -2256,8 +2257,8 @@ bool LoadExternalBlockFile(FILE* fileIn)\n // CAlert\n //\n \n-map<uint256, CAlert> mapAlerts;\n-CCriticalSection cs_mapAlerts;\n+extern map<uint256, CAlert> mapAlerts;\n+extern CCriticalSection cs_mapAlerts;\n \n string GetWarnings(string strFor)\n {\n@@ -2303,91 +2304,6 @@ string GetWarnings(string strFor)\n     return \"error\";\n }\n \n-CAlert CAlert::getAlertByHash(const uint256 &hash)\n-{\n-    CAlert retval;\n-    {\n-        LOCK(cs_mapAlerts);\n-        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n-        if(mi != mapAlerts.end())\n-            retval = mi->second;\n-    }\n-    return retval;\n-}\n-\n-bool CAlert::ProcessAlert()\n-{\n-    if (!CheckSignature())\n-        return false;\n-    if (!IsInEffect())\n-        return false;\n-\n-    // alert.nID=max is reserved for if the alert key is\n-    // compromised. It must have a pre-defined message,\n-    // must never expire, must apply to all versions,\n-    // and must cancel all previous\n-    // alerts or it will be ignored (so an attacker can't\n-    // send an \"everything is OK, don't panic\" version that\n-    // cannot be overridden):\n-    int maxInt = std::numeric_limits<int>::max();\n-    if (nID == maxInt)\n-    {\n-        if (!(\n-                nExpiration == maxInt &&\n-                nCancel == (maxInt-1) &&\n-                nMinVer == 0 &&\n-                nMaxVer == maxInt &&\n-                setSubVer.empty() &&\n-                nPriority == maxInt &&\n-                strStatusBar == \"URGENT: Alert key compromised, upgrade required\"\n-                ))\n-            return false;\n-    }\n-\n-    {\n-        LOCK(cs_mapAlerts);\n-        // Cancel previous alerts\n-        for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n-        {\n-            const CAlert& alert = (*mi).second;\n-            if (Cancels(alert))\n-            {\n-                printf(\"cancelling alert %d\\n\", alert.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n-                mapAlerts.erase(mi++);\n-            }\n-            else if (!alert.IsInEffect())\n-            {\n-                printf(\"expiring alert %d\\n\", alert.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n-                mapAlerts.erase(mi++);\n-            }\n-            else\n-                mi++;\n-        }\n-\n-        // Check if this alert has been cancelled\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-        {\n-            const CAlert& alert = item.second;\n-            if (alert.Cancels(*this))\n-            {\n-                printf(\"alert already cancelled by %d\\n\", alert.nID);\n-                return false;\n-            }\n-        }\n-\n-        // Add to mapAlerts\n-        mapAlerts.insert(make_pair(GetHash(), *this));\n-        // Notify UI if it applies to me\n-        if(AppliesToMe())\n-            uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n-    }\n-\n-    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n-    return true;\n-}\n-\n \n \n "
      },
      {
        "sha": "294024b4f31854c7ca7ea3e1270d72d12261b6aa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 206,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -1397,212 +1397,6 @@ class CBlockLocator\n \n \n \n-\n-/** Alerts are for notifying old versions if they become too obsolete and\n- * need to upgrade.  The message is displayed in the status bar.\n- * Alert messages are broadcast as a vector of signed data.  Unserializing may\n- * not read the entire buffer if the alert is for a newer version, but older\n- * versions can still relay the original data.\n- */\n-class CUnsignedAlert\n-{\n-public:\n-    int nVersion;\n-    int64 nRelayUntil;      // when newer nodes stop relaying to newer nodes\n-    int64 nExpiration;\n-    int nID;\n-    int nCancel;\n-    std::set<int> setCancel;\n-    int nMinVer;            // lowest version inclusive\n-    int nMaxVer;            // highest version inclusive\n-    std::set<std::string> setSubVer;  // empty matches all\n-    int nPriority;\n-\n-    // Actions\n-    std::string strComment;\n-    std::string strStatusBar;\n-    std::string strReserved;\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nRelayUntil);\n-        READWRITE(nExpiration);\n-        READWRITE(nID);\n-        READWRITE(nCancel);\n-        READWRITE(setCancel);\n-        READWRITE(nMinVer);\n-        READWRITE(nMaxVer);\n-        READWRITE(setSubVer);\n-        READWRITE(nPriority);\n-\n-        READWRITE(strComment);\n-        READWRITE(strStatusBar);\n-        READWRITE(strReserved);\n-    )\n-\n-    void SetNull()\n-    {\n-        nVersion = 1;\n-        nRelayUntil = 0;\n-        nExpiration = 0;\n-        nID = 0;\n-        nCancel = 0;\n-        setCancel.clear();\n-        nMinVer = 0;\n-        nMaxVer = 0;\n-        setSubVer.clear();\n-        nPriority = 0;\n-\n-        strComment.clear();\n-        strStatusBar.clear();\n-        strReserved.clear();\n-    }\n-\n-    std::string ToString() const\n-    {\n-        std::string strSetCancel;\n-        BOOST_FOREACH(int n, setCancel)\n-            strSetCancel += strprintf(\"%d \", n);\n-        std::string strSetSubVer;\n-        BOOST_FOREACH(std::string str, setSubVer)\n-            strSetSubVer += \"\\\"\" + str + \"\\\" \";\n-        return strprintf(\n-                \"CAlert(\\n\"\n-                \"    nVersion     = %d\\n\"\n-                \"    nRelayUntil  = %\"PRI64d\"\\n\"\n-                \"    nExpiration  = %\"PRI64d\"\\n\"\n-                \"    nID          = %d\\n\"\n-                \"    nCancel      = %d\\n\"\n-                \"    setCancel    = %s\\n\"\n-                \"    nMinVer      = %d\\n\"\n-                \"    nMaxVer      = %d\\n\"\n-                \"    setSubVer    = %s\\n\"\n-                \"    nPriority    = %d\\n\"\n-                \"    strComment   = \\\"%s\\\"\\n\"\n-                \"    strStatusBar = \\\"%s\\\"\\n\"\n-                \")\\n\",\n-            nVersion,\n-            nRelayUntil,\n-            nExpiration,\n-            nID,\n-            nCancel,\n-            strSetCancel.c_str(),\n-            nMinVer,\n-            nMaxVer,\n-            strSetSubVer.c_str(),\n-            nPriority,\n-            strComment.c_str(),\n-            strStatusBar.c_str());\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\", ToString().c_str());\n-    }\n-};\n-\n-/** An alert is a combination of a serialized CUnsignedAlert and a signature. */\n-class CAlert : public CUnsignedAlert\n-{\n-public:\n-    std::vector<unsigned char> vchMsg;\n-    std::vector<unsigned char> vchSig;\n-\n-    CAlert()\n-    {\n-        SetNull();\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(vchMsg);\n-        READWRITE(vchSig);\n-    )\n-\n-    void SetNull()\n-    {\n-        CUnsignedAlert::SetNull();\n-        vchMsg.clear();\n-        vchSig.clear();\n-    }\n-\n-    bool IsNull() const\n-    {\n-        return (nExpiration == 0);\n-    }\n-\n-    uint256 GetHash() const\n-    {\n-        return Hash(this->vchMsg.begin(), this->vchMsg.end());\n-    }\n-\n-    bool IsInEffect() const\n-    {\n-        return (GetAdjustedTime() < nExpiration);\n-    }\n-\n-    bool Cancels(const CAlert& alert) const\n-    {\n-        if (!IsInEffect())\n-            return false; // this was a no-op before 31403\n-        return (alert.nID <= nCancel || setCancel.count(alert.nID));\n-    }\n-\n-    bool AppliesTo(int nVersion, std::string strSubVerIn) const\n-    {\n-        // TODO: rework for client-version-embedded-in-strSubVer ?\n-        return (IsInEffect() &&\n-                nMinVer <= nVersion && nVersion <= nMaxVer &&\n-                (setSubVer.empty() || setSubVer.count(strSubVerIn)));\n-    }\n-\n-    bool AppliesToMe() const\n-    {\n-        return AppliesTo(PROTOCOL_VERSION, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<std::string>()));\n-    }\n-\n-    bool RelayTo(CNode* pnode) const\n-    {\n-        if (!IsInEffect())\n-            return false;\n-        // returns true if wasn't already contained in the set\n-        if (pnode->setKnown.insert(GetHash()).second)\n-        {\n-            if (AppliesTo(pnode->nVersion, pnode->strSubVer) ||\n-                AppliesToMe() ||\n-                GetAdjustedTime() < nRelayUntil)\n-            {\n-                pnode->PushMessage(\"alert\", *this);\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    bool CheckSignature()\n-    {\n-        CKey key;\n-        if (!key.SetPubKey(ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")))\n-            return error(\"CAlert::CheckSignature() : SetPubKey failed\");\n-        if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-            return error(\"CAlert::CheckSignature() : verify signature failed\");\n-\n-        // Now unserialize the data\n-        CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);\n-        sMsg >> *(CUnsignedAlert*)this;\n-        return true;\n-    }\n-\n-    bool ProcessAlert();\n-\n-    /*\n-     * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n-     */\n-    static CAlert getAlertByHash(const uint256 &hash);\n-};\n-\n class CTxMemPool\n {\n public:"
      },
      {
        "sha": "c46c876d258cb42a673f007db9daac086bf184b7",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -55,6 +55,7 @@ LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l w\n HEADERS = $(wildcard *.h)\n \n OBJS= \\\n+    obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n     obj/netbase.o \\"
      },
      {
        "sha": "5dadda826c181ed2502f119a396d8b186ce0f0f8",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -51,6 +51,7 @@ LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell\n HEADERS = $(wildcard *.h)\n \n OBJS= \\\n+    obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n     obj/netbase.o \\"
      },
      {
        "sha": "2666caa918a40ff5612e3487786382ff04919b14",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -70,6 +70,7 @@ CFLAGS += -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \\\n     $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n OBJS= \\\n+    obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n     obj/netbase.o \\"
      },
      {
        "sha": "37a19179736809ad60a5396eaad4d83e62f8130b",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -101,6 +101,7 @@ xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-para\n xLDFLAGS=$(LDHARDENING) $(LDFLAGS)\n \n OBJS= \\\n+    obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n     obj/netbase.o \\"
      },
      {
        "sha": "b820d16abfecd8a362583ff1e397fb8f46c74824",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f35c6c4fb9d1f06c1ba186c49b582c820679a18c/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "patch": "@@ -4,6 +4,7 @@\n #include \"addresstablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n+#include \"alert.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n "
      }
    ]
  },
  {
    "sha": "286dbba2d238f523b45f5649345ae89b64cbba2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODZkYmJhMmQyMzhmNTIzYjQ1ZjU2NDkzNDVhZTg5YjY0Y2JiYTJm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-08-28T21:09:09Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-08-28T21:13:11Z"
      },
      "message": "Give testnet it's own alert key.",
      "tree": {
        "sha": "a58979c12095936d2ab3b5e7c84af321f8937fd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a58979c12095936d2ab3b5e7c84af321f8937fd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/286dbba2d238f523b45f5649345ae89b64cbba2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286dbba2d238f523b45f5649345ae89b64cbba2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/286dbba2d238f523b45f5649345ae89b64cbba2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286dbba2d238f523b45f5649345ae89b64cbba2f/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35c6c4fb9d1f06c1ba186c49b582c820679a18c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f35c6c4fb9d1f06c1ba186c49b582c820679a18c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48920629e2430c6fed2a67dd2307293ad44ce0ab",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/286dbba2d238f523b45f5649345ae89b64cbba2f/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/286dbba2d238f523b45f5649345ae89b64cbba2f/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=286dbba2d238f523b45f5649345ae89b64cbba2f",
        "patch": "@@ -16,6 +16,9 @@ using namespace std;\n map<uint256, CAlert> mapAlerts;\n CCriticalSection cs_mapAlerts;\n \n+static const char* pszMainKey = \"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\";\n+static const char* pszTestKey = \"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\";\n+\n void CUnsignedAlert::SetNull()\n {\n     nVersion = 1;\n@@ -139,7 +142,7 @@ bool CAlert::RelayTo(CNode* pnode) const\n bool CAlert::CheckSignature() const\n {\n     CKey key;\n-    if (!key.SetPubKey(ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\")))\n+    if (!key.SetPubKey(ParseHex(fTestNet ? pszTestKey : pszMainKey)))\n         return error(\"CAlert::CheckSignature() : SetPubKey failed\");\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n         return error(\"CAlert::CheckSignature() : verify signature failed\");"
      }
    ]
  }
]