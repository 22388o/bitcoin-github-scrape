[
  {
    "sha": "c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjFhOThhNjNlOWI5N2VjMTkxOWY3YjZhM2VjZWI1YWQ3ODg2OTQx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-22T14:43:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-29T20:55:29Z"
      },
      "message": "[test] Clean up testing for disconnecting blocks-only peers that send us tx INVs\n\nThis commit restructures the p2p_blocksonly.py test case in preparation\nfor adding more tests. In future commits, we'll test for disconnecting\nblocks-only peers that send us TX messages or tx GETDATA messages.",
      "tree": {
        "sha": "fa091d1c15cafa0621370cdba88939a7bf385b80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa091d1c15cafa0621370cdba88939a7bf385b80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a97e8a060f7632bbaee27d3de8035dc6ebe3895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a97e8a060f7632bbaee27d3de8035dc6ebe3895",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a97e8a060f7632bbaee27d3de8035dc6ebe3895"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 11,
      "deletions": 13
    },
    "files": [
      {
        "sha": "33fe20151a6dafeca479264dd1f2b0046551f860",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
        "patch": "@@ -4,22 +4,24 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test p2p blocksonly\"\"\"\n \n-from test_framework.messages import msg_tx, CTransaction, FromHex\n+from test_framework.messages import msg_inv, CInv, CTransaction, FromHex\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-\n class P2PBlocksOnly(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n         self.extra_args = [[\"-blocksonly\"]]\n \n     def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PInterface())  # sends us a tx INV message\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        self.log.info('Check that txs from p2p are rejected and result in disconnect')\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n+\n+        self.log.info('Create signed transaction')\n         prevtx = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]\n         rawtx = self.nodes[0].createrawtransaction(\n             inputs=[{\n@@ -39,24 +41,20 @@ def run_test(self):\n                 'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n             }],\n         )['hex']\n-        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n-        with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n-            self.nodes[0].p2p.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n-            self.nodes[0].p2p.wait_for_disconnect()\n-            assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n+        tx = FromHex(CTransaction(), sigtx)\n \n-        # Remove the disconnected peer and add a new one.\n-        del self.nodes[0].p2ps[0]\n-        self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.log.info('Check that a TX inv from a blocks-only peer results in disconnect')\n+        with self.nodes[0].assert_debug_log(['in violation of protocol']):\n+            self.nodes[0].p2ps[0].send_message(msg_inv([CInv(1, int(tx.rehash(), 16))]))\n+            self.nodes[0].p2ps[0].wait_for_disconnect()\n \n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n         txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n         with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=1'.format(txid)]):\n             self.nodes[0].sendrawtransaction(sigtx)\n-            self.nodes[0].p2p.wait_for_tx(txid)\n+            self.nodes[0].p2ps[1].wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n \n-\n if __name__ == '__main__':\n     P2PBlocksOnly().main()"
      }
    ]
  },
  {
    "sha": "2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTY0Zjc4ZTgxMWNmY2JlNTVjNGMyN2MzZDc5ZTFmNTcxY2M1YzMy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-23T20:27:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-29T20:55:29Z"
      },
      "message": "[test] Add testing for disconnecting blocks-only peers that send us TXs\n\nIf a blocks-only peer sends us a TX message, we should disconnect. Add a\ntest for this.",
      "tree": {
        "sha": "5f0f75706d1a6c46b28938d4072ff6fd5cc8995f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f0f75706d1a6c46b28938d4072ff6fd5cc8995f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c21a98a63e9b97ec1919f7b6a3eceb5ad7886941"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "107f6494666e71d82c81e4637d5c75d666ffbd9d",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test p2p blocksonly\"\"\"\n \n-from test_framework.messages import msg_inv, CInv, CTransaction, FromHex\n+from test_framework.messages import msg_inv, msg_tx, CInv, CTransaction, FromHex\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -17,6 +17,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())  # sends us a tx INV message\n+        self.nodes[0].add_p2p_connection(P2PInterface())  # sends us a TX message\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n         assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n@@ -48,12 +49,17 @@ def run_test(self):\n             self.nodes[0].p2ps[0].send_message(msg_inv([CInv(1, int(tx.rehash(), 16))]))\n             self.nodes[0].p2ps[0].wait_for_disconnect()\n \n+        self.log.info('Check that a TX message from a blocks-only peer results in disconnect')\n+        with self.nodes[0].assert_debug_log(['in violation of protocol']):\n+            self.nodes[0].p2ps[1].send_message(msg_tx(tx))\n+            self.nodes[0].p2ps[1].wait_for_disconnect()\n+\n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n         txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n-        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=1'.format(txid)]):\n+        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=2'.format(txid)]):\n             self.nodes[0].sendrawtransaction(sigtx)\n-            self.nodes[0].p2ps[1].wait_for_tx(txid)\n+            self.nodes[0].p2ps[2].wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "1c6fb2da6527531d6466aa8d1470e75a1ed28413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzZmYjJkYTY1Mjc1MzFkNjQ2NmFhOGQxNDcwZTc1YTFlZDI4NDEz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-08-23T22:07:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-29T20:57:26Z"
      },
      "message": "[net_processing] Disconnect blocks-only peers that request txs\n\nDisconnect any blocks-only peer that sends us tx/witness tx GETDATAs for\na tx that isn't in our mapRelay.\n\nWe continue to allow GETDATAs for txs in our mapRelay so that\ntransactions submitted locally (by RPC/wallet) can still be relayed over\nblocks-only links.",
      "tree": {
        "sha": "57aa5b633f11fbef58d7a25f2c951c78dd24ec52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57aa5b633f11fbef58d7a25f2c951c78dd24ec52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c6fb2da6527531d6466aa8d1470e75a1ed28413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c6fb2da6527531d6466aa8d1470e75a1ed28413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c6fb2da6527531d6466aa8d1470e75a1ed28413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c6fb2da6527531d6466aa8d1470e75a1ed28413/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2964f78e811cfcbe55c4c27c3d79e1f571cc5c32"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 16,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4be0fd4dc85efa2fb9aba82804120152f572d039",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c6fb2da6527531d6466aa8d1470e75a1ed28413/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c6fb2da6527531d6466aa8d1470e75a1ed28413/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1c6fb2da6527531d6466aa8d1470e75a1ed28413",
        "patch": "@@ -1538,6 +1538,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+            } else if (!g_relay_txes && !pfrom->HasPermission(PF_RELAY)) {\n+                // If a blocks-only peer requests a tx and it isn't in our mapRelay, then disconnect them.\n+                // We allow blocks-only peers to request txs in our mapRelay so we can relay txs submitted\n+                // locally when in blocks-only mode.\n+                LogPrintf(\"Blocks-only peer %d sent us tx GETDATA in violation of protocol\\n\", pfrom->GetId());\n+                pfrom->fDisconnect = true;\n+                return;\n             } else {\n                 auto txinfo = mempool.info(inv.hash);\n                 // To protect privacy, do not answer getdata using the mempool when"
      },
      {
        "sha": "e41e866777a066573c75ca6cc7ad4447d1d35004",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c6fb2da6527531d6466aa8d1470e75a1ed28413/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c6fb2da6527531d6466aa8d1470e75a1ed28413/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=1c6fb2da6527531d6466aa8d1470e75a1ed28413",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test p2p blocksonly\"\"\"\n \n-from test_framework.messages import msg_inv, msg_tx, CInv, CTransaction, FromHex\n+from test_framework.messages import msg_getdata, msg_inv, msg_tx, CInv, CTransaction, FromHex\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -18,6 +18,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())  # sends us a tx INV message\n         self.nodes[0].add_p2p_connection(P2PInterface())  # sends us a TX message\n+        self.nodes[0].add_p2p_connection(P2PInterface())  # sends us a tx GETDATA message for a tx that we didn't INV\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n         assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n@@ -54,12 +55,17 @@ def run_test(self):\n             self.nodes[0].p2ps[1].send_message(msg_tx(tx))\n             self.nodes[0].p2ps[1].wait_for_disconnect()\n \n+        self.log.info('Check that a TX GETDATA from a blocks-only peer results in disconnect')\n+        with self.nodes[0].assert_debug_log(['in violation of protocol']):\n+            self.nodes[0].p2ps[2].send_message(msg_getdata([CInv(1, int(tx.rehash(), 16))]))\n+            self.nodes[0].p2ps[2].wait_for_disconnect()\n+\n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n         txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n-        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=2'.format(txid)]):\n+        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=3'.format(txid)]):\n             self.nodes[0].sendrawtransaction(sigtx)\n-            self.nodes[0].p2ps[2].wait_for_tx(txid)\n+            self.nodes[0].p2ps[3].wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n \n if __name__ == '__main__':"
      }
    ]
  }
]