jnewbery,2019-08-22 15:36:14,Observed while testing #15759 and suggested by @ajtowns : https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-523733587,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523958559,523958559,
dongcarl,2019-08-22 15:45:48,tACK 0e7bc2fba706a8b2483e030eff137c20a61f7eb4,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523962338,523962338,
NicolasDorier,2019-08-22 16:04:27,Can you check for the `PF_NOBAN` permissions so you don't ban whitelisted peer?,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523969971,523969971,
dongcarl,2019-08-22 16:07:07,"> Can you check for the `PF_NOBAN` permissions so you don't ban whitelisted peer?\n\n`Misbehaving` sets `fShouldBan`, which is checked in `PeerLogicValidation::SendRejectsAndCheckIfBanned`, and `PF_NOBAN` is checked before applying the ban.",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523970959,523970959,
instagibbs,2019-08-22 16:23:51,Why would spy nodes claim to be blocksonly? To not get asked for txs?,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523977294,523977294,
jnewbery,2019-08-22 16:32:42,"> Why would spy nodes claim to be blocksonly? To not get asked for txs?\n\nSorry, my explanation was unclear. Let me try again:\n\n1. I start my node in `-blocksonly`\n2. I make up to 8 outbound connections, with [fRelay](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#Extensions_to_existing_messages) set to False.\n3. Most peers (including most Satoshi:0.18.0 peers) honor tha",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523980420,523980420,
MarcoFalke,2019-08-22 16:33:47,"I think the nomenclature is a bit messed up. The pull request title should probably read ""non-tx-relay"" instead of ""blocks-only""?\n\nOr ""Disconnect peer that send us tx INVs when we opted out of tx relay""",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523980818,523980818,
JeremyRubin,2019-08-22 17:10:56,"I have negative feelings about this as it violates the robustness principle. If at some point in the future there is a bug which causes us to relay an occasional tx, it ends up disconnecting blocks only peers.",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-523994184,523994184,
jnewbery,2019-08-22 17:40:57,"> If at some point in the future there is a bug which causes us to relay an occasional tx\n\nThe main reason to run `-blocksonly` is to reduce bandwidth usage. If adversaries can waste our bandwidth by sending us (what is to us) garbage, then we should disconnect them.\n\nI think your argument could be made against any disconnect behaviour: if at some point in the future there's a bug that mak",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524005629,524005629,
JeremyRubin,2019-08-22 18:08:30,"I don't agree. The recent blocksonly changes as presented in https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-523733587 is as a topology privacy benefit. Modifying this logic doesn't just affect nodes running with blocksonly with that change in mind, it affects all nodes. (I'm not sure if you intend this PR to be standalone from that one or not)\n\nI think the right thing to do would b",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524015909,524015909,
jnewbery,2019-08-22 18:59:41,"> Modifying this logic doesn't just affect nodes running with blocksonly with that change in mind, it affects all nodes. (I'm not sure if you intend this PR to be standalone from that one or not)\n\nCorrect, but it only affects the two outbound blocks-only peers in that PR. The new behaviour would be to disconnect those blocks-only peers that are misbehaving and make new blocks-only peers. Given",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524033842,524033842,
ajtowns,2019-08-23 02:53:17,"Only a quick github review, but looks fine to me; maybe mark blocksonly peers as misbehaving if they send a TX/WTX GETDATA as well though? Oh, per travis you need to hold cs_main before calling Misbehaving in the NetMsgType::TX case.\n\nI think I'd be more confident that this was a safe change to make if we merged #15759 first and could look through our logs to see how often the two blocks-only ",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524152582,524152582,
fanquake,2019-08-23 03:44:49,"Concept ACK - the discussion here makes sense to me, but I'm not as qualified as @ajtowns / @sdaftuar etc to comment on this.\n\nThis is failing to build on [Travis macOS](https://travis-ci.org/bitcoin/bitcoin/jobs/575487702):\n```bash\nnet_processing.cpp:2476:13: error: calling function 'Misbehaving' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\n\n        ",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524161256,524161256,
JeremyRubin,2019-08-23 04:08:38,"I think the bandwidth exhaustion argument is weak given that there's still numerous other messages (e.g., ping, pong, notfound, etc) which can be sent in blocksonly mode (unless you plan to block those too?). \n\nI'd much rather think about bandwidth issues as a more general concept and actually track the bandwidth usage from a node and disconnect if it exceeds a limit of 'not useful' data over ",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524164856,524164856,
jnewbery,2019-08-23 22:14:48,"@ajtowns \n> per travis you need to hold cs_main before calling Misbehaving\n\nFixed.\n\n> I think I'd be more confident that this was a safe change to make if we merged #15759 first \n\nAgreed. This interacts with #15759 and it's more important for that to get in, so I'll mark this as WIP for now.\n\n> maybe mark blocksonly peers as misbehaving if they send a TX/WTX GETDATA as well thoug",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524478834,524478834,
DrahtBot,2019-08-24 05:41:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17303](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17303.html) (p2p: Stop relaying non-mempool txs by Marco",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-524522634,524522634,
TheBlueMatt,2019-09-07 17:47:04,"#15759 implemented parts of this, tough I think a more wholesale cleanup of this logic is still required.",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-529129713,529129713,
jnewbery,2019-09-10 12:54:01,"Rebased on master, which makes the first two commits test-only changes.\n\nNote the test change in the final commit. Previously, there was a test ""Check that txs from rpc are not rejected and relayed to other peers"". This is no longer possible, since when the node sends an INV to its peer, it'll be disconnected. Even if it isn't disconnected and the peer responds with a TX GETDATA, then the node",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-529920593,529920593,
ajtowns,2019-09-11 07:18:29,"Commit message for first commit needs to be updated to reflect it's not a behaviour change anymore.\n\nWorth updating the test framework so we can have python-p2p nodes as block-relay-only outbound connections rather than just inbound connections as part of this PR? There's old commits from luke-jr that update the test framework in #10593 and I had an independant go at the same idea at https://g",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-530255072,530255072,
jnewbery,2019-10-10 21:24:21,"@ajtowns \n> Commit message for first commit needs to be updated to reflect it's not a behaviour change anymore.\n\nDone. I thought the commit log gave more useful information than commit 0ba08020c9  that was merged, but you're right that it doesn't belong on this test-change-only commit.\n\n> Worth updating the test framework so we can have python-p2p nodes as block-relay-only outbound conne",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-540805191,540805191,
jnewbery,2019-10-11 16:14:37,The macos linter is complaining about a commit that isn't part of this PR and I have no idea why. Rebasing on master to try to resolve.,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-541128335,541128335,
MarcoFalke,2019-10-11 17:26:25,I think the linter should be removed when it is causing issues. It was added only for experimentation.,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-541153055,541153055,
Sjors,2019-10-23 11:00:58,"Btcd or Lnd also does this, and `bitcoind -blocksonly` already disconnect in that case. ~~Even when whitelisted, which is odd.~~ (unless you give it `relay` whitelist, in addition to the default `noban` and `mempool`).\n\nI noticed this while opening a channel using Lnd that was connected to my local `bitcoind -blocksonly` instance via p2p. It tried to broadcast the channel opening: `transaction",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-545389359,545389359,
Roasbeef,2019-10-28 23:34:12,"@Sjors how is a client mean to detect that a backing node is on blocks only mode on the RPC level?  On the p2p end, iirc there's no node/p2p level signalling so nodes have no idea if they're meant to relay to another node or not. ",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-547191191,547191191,
jnewbery,2019-10-29 00:58:05,@roasbeef p2p nodes can use the `relay` field in the VERSION message to indicate that they want a peer to relay transactions. See https://btcinformation.org/en/developer-reference#version.,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-547209618,547209618,
Roasbeef,2019-10-29 01:51:09,TIL! Fixed in https://github.com/lightninglabs/neutrino/pull/190,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-547220089,547220089,
jnewbery,2019-10-29 21:08:38,That change caused a conflict with master so I've rebased.,https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-547630224,547630224,
jnewbery,2019-11-01 20:52:59,"ok, closing this. #15759 took the more important changes from this PR (disconnecting peers that send us TXs and tx INVs), and we can't seem to reach agreement on the remaining change:\n\n@ajtowns \n> I'm not sure the ""txs from rpc not rejected and are relayed"" change makes sense -- this means you can't use a -blocksonly node for sending your own transactions,\n\n@sdaftuar \n> changing blocks",https://github.com/bitcoin/bitcoin/pull/16682#issuecomment-548946770,548946770,
luke-jr,2019-08-23 19:55:23,"The peer isn't blocks-only, we are...",https://github.com/bitcoin/bitcoin/pull/16682#discussion_r317280802,317280802,src/net_processing.cpp
practicalswift,2019-09-29 15:17:54,FWIW: after this removal `wait_for_tx` is no longer used.,https://github.com/bitcoin/bitcoin/pull/16682#discussion_r329357666,329357666,test/functional/p2p_blocksonly.py
jnewbery,2019-10-10 21:24:41,"I've made some change to this PR, so `wait_for_tx` is still used.",https://github.com/bitcoin/bitcoin/pull/16682#discussion_r333742044,333742044,test/functional/p2p_blocksonly.py
ajtowns,2019-10-29 08:01:43,"But we'll have already tried relaying from the mempool and set push to true in that case, causing this code path to only work if we didn't have the tx at all? Am I missing something?",https://github.com/bitcoin/bitcoin/pull/16682#discussion_r339932231,339932231,src/net_processing.cpp
jnewbery,2019-10-29 21:00:58,"no, you're not missing anything. You're completely right.\n\nI think this logic needs to be moved up between the `if (mi != mapRelay.end())` block and `else if (pfrom->m_tx_relay->m_last_mempool_req.load().count())`. I've done that in https://github.com/bitcoin/bitcoin/compare/dc84c42a69557bff3d41baea498ceee822566423..dffa26f05fca414ecd2e72c6c9a7efc953d54651. Let me know what you think.",https://github.com/bitcoin/bitcoin/pull/16682#discussion_r340322905,340322905,src/net_processing.cpp
sdaftuar,2019-11-01 20:43:45,"I believe this is incorrect -- it should not be a protocol violation if we announce a transaction to a peer and it happens to wait more than 15 minutes to respond with a GETDATA.  This already happens for reasons that are benign (due to us not immediately requesting a transaction from all peers who announce it).  \n\nFor example: one way this can happen is if we announce a transaction to a peer,",https://github.com/bitcoin/bitcoin/pull/16682#discussion_r341744179,341744179,src/net_processing.cpp
