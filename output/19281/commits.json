[
  {
    "sha": "bb44fd944d4d7715aa1247d53da9ae21c59c543a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjQ0ZmQ5NDRkNGQ3NzE1YWExMjQ3ZDUzZGE5YWUyMWM1OWM1NDNh",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-06-15T05:16:07Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-06T11:33:38Z"
      },
      "message": "test: gracefully terminate parallel tests\n\nTest runner sends SIGTERM instead of SIGKILL to a running test\nto allow proper shutdown of nodes.",
      "tree": {
        "sha": "7541bddcf93093c094f99e92f4d2a423ccf58cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7541bddcf93093c094f99e92f4d2a423ccf58cdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb44fd944d4d7715aa1247d53da9ae21c59c543a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb44fd944d4d7715aa1247d53da9ae21c59c543a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb44fd944d4d7715aa1247d53da9ae21c59c543a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb44fd944d4d7715aa1247d53da9ae21c59c543a/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "195822f1e05e2f36002c906667d4c639663f23b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195822f1e05e2f36002c906667d4c639663f23b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/195822f1e05e2f36002c906667d4c639663f23b5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 30,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7e66bf7efc0c785fc7d76ee53006b1d5e64387a0",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb44fd944d4d7715aa1247d53da9ae21c59c543a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb44fd944d4d7715aa1247d53da9ae21c59c543a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bb44fd944d4d7715aa1247d53da9ae21c59c543a",
        "patch": "@@ -13,6 +13,7 @@\n import random\n import re\n import shutil\n+import signal\n import subprocess\n import sys\n import tempfile\n@@ -40,10 +41,12 @@ class TestStatus(Enum):\n     PASSED = 1\n     FAILED = 2\n     SKIPPED = 3\n+    CANCELLED = 4\n \n TEST_EXIT_PASSED = 0\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n+TEST_EXIT_CANCELLED = 143 # unix convention: 128 + signal\n \n TMPDIR_PREFIX = \"bitcoin_func_test_\"\n \n@@ -55,6 +58,13 @@ def __init__(self, message):\n         self.message = message\n \n \n+class CancelTest(Exception):\n+    \"\"\"This exception is raised to cancel a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -114,15 +124,25 @@ def main(self):\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n \n+        def signal_handler(signal_number, frame):\n+            if signal_number == signal.SIGTERM:\n+                raise CancelTest('Received SIGTERM signal.')\n+            return\n+\n+        signal.signal(signal.SIGTERM, signal_handler)\n+\n         try:\n             self.setup()\n             self.run_test()\n         except JSONRPCException:\n             self.log.exception(\"JSONRPC error\")\n             self.success = TestStatus.FAILED\n         except SkipTest as e:\n-            self.log.warning(\"Test Skipped: %s\" % e.message)\n+            self.log.warning(\"Test Skipped: {}\".format(e.message))\n             self.success = TestStatus.SKIPPED\n+        except CancelTest as e:\n+            self.log.warning(\"Test cancelled: {}\".format(e.message))\n+            self.success = TestStatus.CANCELLED\n         except AssertionError:\n             self.log.exception(\"Assertion failed\")\n             self.success = TestStatus.FAILED\n@@ -291,6 +311,9 @@ def shutdown(self):\n         elif self.success == TestStatus.SKIPPED:\n             self.log.info(\"Test skipped\")\n             exit_code = TEST_EXIT_SKIPPED\n+        elif self.success == TestStatus.CANCELLED:\n+            self.log.info(\"Test cancelled\")\n+            exit_code = TEST_EXIT_CANCELLED\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n             self.log.error(\"\")"
      },
      {
        "sha": "f8a9ad2523d7b5615be5a106169ca20195dbfdea",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb44fd944d4d7715aa1247d53da9ae21c59c543a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb44fd944d4d7715aa1247d53da9ae21c59c543a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bb44fd944d4d7715aa1247d53da9ae21c59c543a",
        "patch": "@@ -498,7 +498,7 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n \n     # This will be a no-op unless failfast is True in which case there may be dangling\n     # processes which need to be killed.\n-    job_queue.kill_and_join()\n+    job_queue.terminate_and_join()\n \n     sys.exit(not all_passed)\n \n@@ -595,14 +595,16 @@ def get_next(self):\n                 print('.', end='', flush=True)\n             dot_count += 1\n \n-    def kill_and_join(self):\n-        \"\"\"Send SIGKILL to all jobs and block until all have ended.\"\"\"\n+    def terminate_and_join(self):\n+        \"\"\"Send SIGTERM to gracefully cancel all jobs and block until all have ended.\"\"\"\n         procs = [i[2] for i in self.jobs]\n \n         for proc in procs:\n-            proc.kill()\n+            logging.debug(\"Terminating dangling process: {}\".format(proc.pid))\n+            proc.terminate()\n \n         for proc in procs:\n+            logging.debug(\"Waiting for {} to terminate.\".format(proc.pid))\n             proc.wait()\n \n "
      }
    ]
  }
]