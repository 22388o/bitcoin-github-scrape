[
  {
    "sha": "535ed9223dcb32bf90ead5b2c95052838b780620",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzVlZDkyMjNkY2IzMmJmOTBlYWQ1YjJjOTUwNTI4MzhiNzgwNjIw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-09-24T17:13:38Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-09-30T13:24:42Z"
      },
      "message": "Simple benchmarking framework\n\nBenchmarking framework, loosely based on google's micro-benchmarking\nlibrary (https://github.com/google/benchmark)\n\nWny not use the Google Benchmark framework? Because adding Even More Dependencies\nisn't worth it. If we get a dozen or three benchmarks and need nanosecond-accurate\ntimings of threaded code then switching to the full-blown Google Benchmark library\nshould be considered.\n\nThe benchmark framework is hard-coded to run each benchmark for one wall-clock second,\nand then spits out .csv-format timing information to stdout. It is left as an\nexercise for later (or maybe never) to add command-line arguments to specify which\nbenchmark(s) to run, how long to run them for, how to format results, etc etc etc.\nAgain, see the Google Benchmark framework for where that might end up.\n\nSee src/bench/MilliSleep.cpp for a sanity-test benchmark that just benchmarks\n'sleep 100 milliseconds.'\n\nTo compile and run benchmarks:\n  cd src; make bench\n\nSample output:\n\nBenchmark,count,min,max,average\nSleep100ms,10,0.101854,0.105059,0.103881",
      "tree": {
        "sha": "d6902ff38a0e70595a85e00868da6fccc3b01152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6902ff38a0e70595a85e00868da6fccc3b01152"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/535ed9223dcb32bf90ead5b2c95052838b780620",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlYL4poACgkQdYgkL74406gNBgCfQGxeJcmIeKwk4j/f6ZPPMPEE\nbJoAn2E47SMWX6TlrMetGOaoPOiz3Nxb\n=zQgc\n-----END PGP SIGNATURE-----",
        "payload": "tree d6902ff38a0e70595a85e00868da6fccc3b01152\nparent 1a9f19a78daa392baf2e062bddff597ce0ce30b6\nauthor Gavin Andresen <gavinandresen@gmail.com> 1443114818 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1443619482 -0400\n\nSimple benchmarking framework\n\nBenchmarking framework, loosely based on google's micro-benchmarking\nlibrary (https://github.com/google/benchmark)\n\nWny not use the Google Benchmark framework? Because adding Even More Dependencies\nisn't worth it. If we get a dozen or three benchmarks and need nanosecond-accurate\ntimings of threaded code then switching to the full-blown Google Benchmark library\nshould be considered.\n\nThe benchmark framework is hard-coded to run each benchmark for one wall-clock second,\nand then spits out .csv-format timing information to stdout. It is left as an\nexercise for later (or maybe never) to add command-line arguments to specify which\nbenchmark(s) to run, how long to run them for, how to format results, etc etc etc.\nAgain, see the Google Benchmark framework for where that might end up.\n\nSee src/bench/MilliSleep.cpp for a sanity-test benchmark that just benchmarks\n'sleep 100 milliseconds.'\n\nTo compile and run benchmarks:\n  cd src; make bench\n\nSample output:\n\nBenchmark,count,min,max,average\nSleep100ms,10,0.101854,0.105059,0.103881\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/535ed9223dcb32bf90ead5b2c95052838b780620",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/535ed9223dcb32bf90ead5b2c95052838b780620",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/535ed9223dcb32bf90ead5b2c95052838b780620/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a9f19a78daa392baf2e062bddff597ce0ce30b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9f19a78daa392baf2e062bddff597ce0ce30b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9f19a78daa392baf2e062bddff597ce0ce30b6"
      }
    ],
    "stats": {
      "total": 222,
      "additions": 222,
      "deletions": 0
    },
    "files": [
      {
        "sha": "24ce0f177595de90a76ead3ffb62abf635bb0bb8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -91,6 +91,11 @@ AC_ARG_ENABLE(tests,\n     [use_tests=$enableval],\n     [use_tests=yes])\n \n+AC_ARG_ENABLE(bench,\n+    AS_HELP_STRING([--enable-bench],[compile benchmarks (default is yes)]),\n+    [use_bench=$enableval],\n+    [use_bench=yes])\n+\n AC_ARG_WITH([comparison-tool],\n     AS_HELP_STRING([--with-comparison-tool],[path to java comparison tool (requires --enable-tests)]),\n     [use_comparison_tool=$withval],\n@@ -881,6 +886,7 @@ AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n+AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])"
      },
      {
        "sha": "45346df9544c654c5733715ee4f1e7f0c9873f4a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -61,6 +61,7 @@ endif\n \n bin_PROGRAMS =\n TESTS =\n+BENCHMARKS =\n \n if BUILD_BITCOIND\n   bin_PROGRAMS += bitcoind\n@@ -445,6 +446,10 @@ if ENABLE_TESTS\n include Makefile.test.include\n endif\n \n+if ENABLE_BENCH\n+include Makefile.bench.include\n+endif\n+\n if ENABLE_QT\n include Makefile.qt.include\n endif"
      },
      {
        "sha": "126e3a102f3a8f4bf58ad7fa9ef946d69a12f6f1",
        "filename": "src/Makefile.bench.include",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -0,0 +1,45 @@\n+bin_PROGRAMS += bench/bench_bitcoin\n+BENCH_SRCDIR = bench\n+BENCH_BINARY = bench/bench_bitcoin$(EXEEXT)\n+\n+\n+bench_bench_bitcoin_SOURCES = \\\n+  bench/bench_bitcoin.cpp \\\n+  bench/bench.cpp \\\n+  bench/bench.h \\\n+  bench/MilliSleep.cpp\n+\n+bench_bench_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n+bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBLEVELDB) \\\n+  $(LIBMEMENV) \\\n+  $(LIBSECP256K1)\n+\n+if ENABLE_ZMQ\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n+endif\n+\n+if ENABLE_WALLET\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n+endif\n+\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+\n+CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno\n+\n+CLEANFILES += $(CLEAN_BITCOIN_BENCH)\n+\n+bitcoin_bench: $(BENCH_BINARY)\n+\n+bench: $(BENCH_BINARY) FORCE\n+\t$(BENCH_BINARY)\n+\n+bitcoin_bench_clean : FORCE\n+\trm -f $(CLEAN_BITCOIN_BENCH) $(bench_bench_bitcoin_OBJECTS) $(BENCH_BINARY)"
      },
      {
        "sha": "991397a234aded0c4e9fdec89debe918391add5b",
        "filename": "src/bench/MilliSleep.cpp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/MilliSleep.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/MilliSleep.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/MilliSleep.cpp?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"main.h\"\n+#include \"utiltime.h\"\n+\n+static void Sleep100ms(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        MilliSleep(100);\n+    }\n+}\n+\n+BENCHMARK(Sleep100ms);"
      },
      {
        "sha": "57208076095a468d3a41f847c63065da2ab3baea",
        "filename": "src/bench/bench.cpp",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"bench.h\"\n+#include <iostream>\n+#include <sys/time.h>\n+\n+using namespace benchmark;\n+\n+std::map<std::string, BenchFunction> BenchRunner::benchmarks;\n+\n+static double gettimedouble(void) {\n+    struct timeval tv;\n+    gettimeofday(&tv, NULL);\n+    return tv.tv_usec * 0.000001 + tv.tv_sec;\n+}\n+\n+BenchRunner::BenchRunner(std::string name, BenchFunction func)\n+{\n+    benchmarks.insert(std::make_pair(name, func));\n+}\n+\n+void\n+BenchRunner::RunAll(double elapsedTimeForOne)\n+{\n+    std::cout << \"Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n+\n+    for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n+         it != benchmarks.end(); ++it) {\n+\n+        State state(it->first, elapsedTimeForOne);\n+        BenchFunction& func = it->second;\n+        func(state);\n+    }\n+}\n+\n+bool State::KeepRunning()\n+{\n+    double now = gettimedouble();\n+    if (count == 0) {\n+        beginTime = now;\n+    }\n+    else {\n+        double elapsedOne = now - lastTime;\n+        if (elapsedOne < minTime) minTime = elapsedOne;\n+        if (elapsedOne > maxTime) maxTime = elapsedOne;\n+    }\n+    lastTime = now;\n+    ++count;\n+\n+    if (now - beginTime < maxElapsed) return true; // Keep going\n+\n+    --count;\n+\n+    // Output results\n+    double average = (now-beginTime)/count;\n+    std::cout << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n+\n+    return false;\n+}"
      },
      {
        "sha": "fee9b8c38d1c45624d5f279ce03a99233e6d7220",
        "filename": "src/bench/bench.h",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BENCH_H\n+#define BITCOIN_BENCH_H\n+\n+// Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n+// framework (see https://github.com/google/benchmark)\n+// Wny not use the Google Benchmark framework? Because adding Yet Another Dependency\n+// (that uses cmake as its build system and has lots of features we don't need) isn't\n+// worth it.\n+\n+/*\n+ * Usage:\n+\n+static void CODE_TO_TIME(benchmark::State& state)\n+{\n+    ... do any setup needed...\n+    while (state.KeepRunning()) {\n+       ... do stuff you want to time...\n+    }\n+    ... do any cleanup needed...\n+}\n+\n+BENCHMARK(CODE_TO_TIME);\n+\n+ */\n+\n+\n+#include <boost/function.hpp>\n+#include <boost/preprocessor/cat.hpp>\n+#include <boost/preprocessor/stringize.hpp>\n+#include <map>\n+#include <string>\n+\n+namespace benchmark {\n+\n+    class State {\n+        std::string name;\n+        double maxElapsed;\n+        double beginTime;\n+        double lastTime, minTime, maxTime;\n+        int64_t count;\n+    public:\n+        State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n+            minTime = std::numeric_limits<double>::max();\n+            maxTime = std::numeric_limits<double>::min();\n+        }\n+        bool KeepRunning();\n+    };\n+\n+    typedef boost::function<void(State&)> BenchFunction;\n+\n+    class BenchRunner\n+    {\n+        static std::map<std::string, BenchFunction> benchmarks;\n+\n+    public:\n+        BenchRunner(std::string name, BenchFunction func);\n+\n+        static void RunAll(double elapsedTimeForOne=1.0);\n+    };\n+}\n+\n+// BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo(\"foo\", foo);\n+#define BENCHMARK(n) \\\n+    benchmark::BenchRunner BOOST_PP_CAT(bench_, BOOST_PP_CAT(__LINE__, n))(BOOST_PP_STRINGIZE(n), n);\n+\n+#endif // BITCOIN_BENCH_H"
      },
      {
        "sha": "db1402216d823a93165fe2af90520f2bf41265bf",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535ed9223dcb32bf90ead5b2c95052838b780620/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=535ed9223dcb32bf90ead5b2c95052838b780620",
        "patch": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+int\n+main(int argc, char** argv)\n+{\n+    ECC_Start();\n+    SetupEnvironment();\n+    fPrintToDebugLog = false; // don't want to write to debug.log file\n+\n+    benchmark::BenchRunner::RunAll();\n+\n+    ECC_Stop();\n+}"
      }
    ]
  },
  {
    "sha": "7072c544b52774ac5a22835121e8e2747ad61158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDcyYzU0NGI1Mjc3NGFjNWEyMjgzNTEyMWU4ZTI3NDdhZDYxMTU4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-09-29T21:17:24Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-09-30T13:24:42Z"
      },
      "message": "Support very-fast-running benchmarks\n\nAvoid calling gettimeofday every time through the benchmarking loop, by keeping\ntrack of how long each loop takes and doubling the number of iterations done\nbetween time checks when they take less than 1/16'th of the total elapsed time.",
      "tree": {
        "sha": "61bab3fc434f5c058ef43a73cf2cc3b4fd78661a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61bab3fc434f5c058ef43a73cf2cc3b4fd78661a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7072c544b52774ac5a22835121e8e2747ad61158",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlYL4poACgkQdYgkL74406hzfgCeIM6/Fp4CrJ5K+xoexZFysBhD\ngboAn2BrqDz6DggITJidZsOZQvLzaMae\n=Ze/N\n-----END PGP SIGNATURE-----",
        "payload": "tree 61bab3fc434f5c058ef43a73cf2cc3b4fd78661a\nparent 535ed9223dcb32bf90ead5b2c95052838b780620\nauthor Gavin Andresen <gavinandresen@gmail.com> 1443561444 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1443619482 -0400\n\nSupport very-fast-running benchmarks\n\nAvoid calling gettimeofday every time through the benchmarking loop, by keeping\ntrack of how long each loop takes and doubling the number of iterations done\nbetween time checks when they take less than 1/16'th of the total elapsed time.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7072c544b52774ac5a22835121e8e2747ad61158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7072c544b52774ac5a22835121e8e2747ad61158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7072c544b52774ac5a22835121e8e2747ad61158/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "535ed9223dcb32bf90ead5b2c95052838b780620",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/535ed9223dcb32bf90ead5b2c95052838b780620",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/535ed9223dcb32bf90ead5b2c95052838b780620"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "61fe9e287d80e7597009014d6dd7fa7e0c5eeedf",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -7,7 +7,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n-  bench/MilliSleep.cpp\n+  bench/Examples.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_LDADD = \\"
      },
      {
        "sha": "b6b020a97189d84e93d24a8a7d88fff17859aa43",
        "filename": "src/bench/Examples.cpp",
        "status": "renamed",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/Examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/Examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/Examples.cpp?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -6,6 +6,8 @@\n #include \"main.h\"\n #include \"utiltime.h\"\n \n+// Sanity test: this should loop ten times, and\n+// min/max/average should be close to 100ms.\n static void Sleep100ms(benchmark::State& state)\n {\n     while (state.KeepRunning()) {\n@@ -14,3 +16,19 @@ static void Sleep100ms(benchmark::State& state)\n }\n \n BENCHMARK(Sleep100ms);\n+\n+// Extremely fast-running benchmark:\n+#include <math.h>\n+\n+volatile double sum = 0.0; // volatile, global so not optimized away\n+\n+static void Trig(benchmark::State& state)\n+{\n+    double d = 0.01;\n+    while (state.KeepRunning()) {\n+        sum += sin(d);\n+        d += 0.000001;\n+    }\n+}\n+\n+BENCHMARK(Trig);",
        "previous_filename": "src/bench/MilliSleep.cpp"
      },
      {
        "sha": "89c3b0cc2a1b7054d00cfb6b33c50f88ffd7c329",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -36,14 +36,22 @@ BenchRunner::RunAll(double elapsedTimeForOne)\n \n bool State::KeepRunning()\n {\n-    double now = gettimedouble();\n+    double now;\n     if (count == 0) {\n-        beginTime = now;\n+        beginTime = now = gettimedouble();\n     }\n     else {\n-        double elapsedOne = now - lastTime;\n+        // timeCheckCount is used to avoid calling gettime most of the time,\n+        // so benchmarks that run very quickly get consistent results.\n+        if ((count+1)%timeCheckCount != 0) {\n+            ++count;\n+            return true; // keep going\n+        }\n+        now = gettimedouble();\n+        double elapsedOne = (now - lastTime)/timeCheckCount;\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n+        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n     }\n     lastTime = now;\n     ++count;"
      },
      {
        "sha": "bf591a2be6ff59d67181abf8ddd13f45349789dd",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -41,10 +41,12 @@ namespace benchmark {\n         double beginTime;\n         double lastTime, minTime, maxTime;\n         int64_t count;\n+        int64_t timeCheckCount;\n     public:\n         State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n             minTime = std::numeric_limits<double>::max();\n             maxTime = std::numeric_limits<double>::min();\n+            timeCheckCount = 1;\n         }\n         bool KeepRunning();\n     };"
      }
    ]
  }
]