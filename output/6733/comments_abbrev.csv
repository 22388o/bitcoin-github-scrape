laanwj,2015-09-28T15:42:43Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-143783672,143783672,
jonasschnelli,2015-09-28T16:16:58Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-143793531,143793531,
gavinandresen,2015-09-29T16:53:45Z,"Removed the $(CURL_LIBS) noticed by @jonasschnelli.\n\nAnd added the new libevent and libzmq dependencies.\n\nI also decided to make it disabled by default, so you have to configure --enable-bench, so it doesn't slow down compile times for everybody.\n\n@laanwj : RE: gettimeofday overhead and timing things that are very fast: timing how fast gettimeofday() is and then warning the developer if thei",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144118883,144118883,
jgarzik,2015-09-29T17:58:40Z,"Disagree on default-disabled.\n\nPrinciple:  Code that is not built by default bitrots rapidly, is not tested as much, receives less maintenance in general by random developers updating the code.\n",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144136308,144136308,
gavinandresen,2015-09-29T18:06:19Z,"@jgarzik :  I KNEW you were going to say that...\n\nWould a Travis configuration that runs benchmarks be good enough to prevent code rot? Compiling and linking Yet Another Binary that approximately nobody will run (unless you're actively working on optimizing something) tickles my ""features shouldn't cost anything unless you're using them"" sensibility.\n",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144138148,144138148,
paveljanik,2015-09-29T20:16:59Z,This looks a bit strange in the benchmarking tool:\n\n```\nSelectParams(CBaseChainParams::MAIN);\n```\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144179529,144179529,
paveljanik,2015-09-29T20:33:41Z,"I think it should stay disabled by default as it is now, because benchmarking will be done on purpose by developers only.\n\nConcept ACK. I like it.\n\nThis is a way to benchmark parts of code. Now we should identify parts that need some love and prepare  benchmarks for them specifically. With this framework, people can report speed fixes with proper benchmark code which can be tested before and a",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144183631,144183631,
sipa,2015-09-29T20:40:06Z,"Compile by default but not run, seems fine to me. \n",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144185108,144185108,
gavinandresen,2015-09-29T20:48:31Z,"Fixed @paveljanik 's spaces nits, and removed the unneeded SelectParams inherited from the unit test code.\n\nData on the ""compile by default or not"" decision:\n\nIt takes 8 seconds on my machine to compile and link the benchmarking code, single-processor, ccache cleared.\n5 seconds doing parallel make.\nUnder 2 seconds with a 'hot' ccache.\n",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144187194,144187194,
gavinandresen,2015-09-29T21:33:03Z,"Damn you @laanwj, you inspired me to spend another hour implementing support for really fast benchmarks....\n\nPicked @paveljanik 's CreateNewBlock nit (good catch, I copied this from a CreateNewBlock benchmark I haven't finished).  I decided to rename MilliSleep.cpp to Examples.cpp, and added a ""see how fast sin() runs"" benchmark to test the really-fast-benchmark support (works nicely).\n\nAnd sw",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144197605,144197605,
btcdrak,2015-09-29T22:08:29Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144205406,144205406,
jgarzik,2015-09-29T22:16:45Z,"Yes, to be specific, I meant ""compile by default but not run""\n",https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144206858,144206858,
dcousens,2015-09-29T23:03:42Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144215991,144215991,
0xC2,2015-09-30T01:17:00Z,Tested. \n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144245574,144245574,
paveljanik,2015-09-30T06:30:43Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-144296454,144296454,
laanwj,2015-10-06T14:31:56Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6733#issuecomment-145874587,145874587,
laanwj,2015-09-28T15:01:23Z,"This works well as long as 'stuff you want to time' does not run too quickly - otherwise the state.KeepRunning(), which does a `gettimeofday` syscall, with the implied latency of that, will dominate.\n(an alternative to calling the time function in the benchmark loop that is commonly used, is to first time a fixed # of runs of the loop, then from the result compute a number of iterations so that i",https://github.com/bitcoin/bitcoin/pull/6733#discussion_r40562325,40562325,src/bench/bench.h
jonasschnelli,2015-09-28T15:46:07Z,rm `$(CURL_LIBS)`? This seems to have be sneaked in from XT.\n,https://github.com/bitcoin/bitcoin/pull/6733#discussion_r40567870,40567870,src/Makefile.bench.include
paveljanik,2015-09-29T20:18:56Z,Spaces around `=`?\n,https://github.com/bitcoin/bitcoin/pull/6733#discussion_r40723385,40723385,src/Makefile.bench.include
paveljanik,2015-09-29T20:19:17Z,Space after `=`\n,https://github.com/bitcoin/bitcoin/pull/6733#discussion_r40723428,40723428,src/Makefile.bench.include
paveljanik,2015-09-30T06:29:20Z,You do not need `chainparams.h` now.\n,https://github.com/bitcoin/bitcoin/pull/6733#discussion_r40762070,40762070,src/bench/bench_bitcoin.cpp
paveljanik,2015-09-30T06:30:28Z,"`ECC_*()` are here probably because you are testing `ConnectBlock()`? This should be in the specific benchmark init section IMO, not here.\n",https://github.com/bitcoin/bitcoin/pull/6733#discussion_r40762111,40762111,src/bench/bench_bitcoin.cpp
paveljanik,2015-10-02T18:12:16Z,"If enabled by default, please make it `--disable-bench` (see #6739).\n",https://github.com/bitcoin/bitcoin/pull/6733#discussion_r41050337,41050337,configure.ac
paveljanik,2015-10-02T18:17:50Z,BTW - why do you have this variable here? Can it be deleted?\n,https://github.com/bitcoin/bitcoin/pull/6733#discussion_r41050995,41050995,src/Makefile.am
