[
  {
    "sha": "cb9fdf9b43ceac62b93524f8d382ca9fdad227b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjlmZGY5YjQzY2VhYzYyYjkzNTI0ZjhkMzgyY2E5ZmRhZDIyN2I5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-10-18T03:23:51Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-10-18T15:47:45Z"
      },
      "message": "Headers announcement for nodes that can do headers.",
      "tree": {
        "sha": "9a93986a75cd661580c92075e13a3c3c020d3eeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a93986a75cd661580c92075e13a3c3c020d3eeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb9fdf9b43ceac62b93524f8d382ca9fdad227b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9fdf9b43ceac62b93524f8d382ca9fdad227b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9fdf9b43ceac62b93524f8d382ca9fdad227b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9fdf9b43ceac62b93524f8d382ca9fdad227b9/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ec93480cc3a83b768ed4491c38cce6559636e446",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9fdf9b43ceac62b93524f8d382ca9fdad227b9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9fdf9b43ceac62b93524f8d382ca9fdad227b9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cb9fdf9b43ceac62b93524f8d382ca9fdad227b9",
        "patch": "@@ -287,6 +287,8 @@ struct CNodeState {\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n     bool fPreferHeaders;\n+    //! Whether this peer can process headers for block announcements.\n+    bool fCanDoHeaders;\n     //! Whether this peer wants invs or cmpctblocks (when possible) for block announcements.\n     bool fPreferHeaderAndIDs;\n     /**\n@@ -321,6 +323,7 @@ struct CNodeState {\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n+        fCanDoHeaders = false;\n         fPreferHeaderAndIDs = false;\n         fProvidesHeaderAndIDs = false;\n         fHaveWitness = false;\n@@ -5207,6 +5210,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n+        State(pfrom->GetId())->fCanDoHeaders = true;\n     }\n \n     else if (strCommand == NetMsgType::SENDCMPCT)\n@@ -5420,16 +5424,17 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::GETHEADERS)\n     {\n-        CBlockLocator locator;\n-        uint256 hashStop;\n-        vRecv >> locator >> hashStop;\n-\n         LOCK(cs_main);\n+        State(pfrom->GetId())->fCanDoHeaders = true;\n         if (IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n             LogPrint(\"net\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n             return true;\n         }\n \n+        CBlockLocator locator;\n+        uint256 hashStop;\n+        vRecv >> locator >> hashStop;\n+\n         CNodeState *nodestate = State(pfrom->GetId());\n         CBlockIndex* pindex = NULL;\n         if (locator.IsNull())\n@@ -6507,7 +6512,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             // add all to the inv queue.\n             LOCK(pto->cs_inventory);\n             vector<CBlock> vHeaders;\n-            bool fRevertToInv = ((!state.fPreferHeaders &&\n+            bool fRevertToInv = ((!state.fCanDoHeaders &&\n                                  (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n                                 pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n             CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n@@ -6573,7 +6578,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n                     pto->PushMessageWithFlag(state.fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                     state.pindexBestHeaderSent = pBestIndex;\n-                } else if (state.fPreferHeaders) {\n+                } else if (state.fCanDoHeaders) {\n                     if (vHeaders.size() > 1) {\n                         LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n                                 vHeaders.size(),"
      }
    ]
  }
]