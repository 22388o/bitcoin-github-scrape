practicalswift,2017-05-09T08:13:42Z,"utACK 6e43829\n\nVery good! This will make Python linting easier!",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300093712,300093712,
sdaftuar,2017-05-10T15:40:21Z,"I still question this goal, because I think having to (for example) manually add each script opcode as an import when you want to use one in a test is needlessly time-wasting for test writers, but for now I'd like to make the more important observation that merging this will likely cause substantive PRs to need to be rebased (punishment for actually including or updating a test!).\n\nFor referen",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300523187,300523187,
practicalswift,2017-05-10T15:58:19Z,@sdaftuar Do you have any examples of substantive PRs that would need to be rebased after merging this one?,https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300529110,300529110,
MarcoFalke,2017-05-10T16:14:10Z,"> This will make Python linting easier!\n\nEven though I can understand the desire to have a single style or converge\nthe whole python code base to pep8, I tend to object based on the\nmaintenance overhead. The python syntax is already rather strict and\ncurrently we should not make it more strict without clear reasoning. The\nthread Suhas liked to, explains why wildcards could be useful to write",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300533895,300533895,
kallewoof,2017-05-10T16:20:29Z,"@sdaftuar I have to respectfully disagree. Adding opcodes as you use them makes perfect sense to me. It also gives you an overview of what opcodes are actually being checked, as an added bonus, just by looking at the imports and not the tests themselves (which can be a bit long-winded at times, unfortunately). I also have a hard time believing this PR would cause conflicts in a lot of test PRs, an",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300535680,300535680,
MarcoFalke,2017-05-10T16:26:28Z,"I agree it is a step in the right direction, but right now is not a good\ntime to do global refactors that stall progress of other pulls. I think we\nshould wait until less refactoring happens in the core files of the test\nframework (such as https://github.com/bitcoin/bitcoin/pull/10359/files#diff-\nbf6de4c07d2e9114c8f01eea45c6cab3L11) and revisit this pull after the dust\nhas settled.\n\nOn Wed,",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300537401,300537401,
practicalswift,2017-05-10T20:36:34Z,"@MarcoFalke When mentioning the linting improvements I was specifically thinking about finding unused imports (see below on why that matters), not full PEP-8 compliance :-)\n\nExplicit imports in tests make it easier to get a quick feeling for what a specific test case covers. And perhaps more importantly, by using explicit imports while at the same time removing unused imports it makes it very ",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300604902,300604902,
MarcoFalke,2017-05-10T20:53:20Z,"The tests in /functional/ are not supposed to test the test framework,\nbut the bitcoind/qt api and internals, so test coverage can not be\ninferred from which utility methods are (or are not) imported from the\ntest framework.\n\n> by using explicit imports while at the same time removing unused imports\n\nAs mentioned earlier, removing unused imports is a cleanup that should\nhappen every couple",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300609124,300609124,
practicalswift,2017-05-10T20:59:58Z,@MarcoFalke Let's agree that sorting imports alphabetically daily is a waste of time :-)  That kind of PR:s can perhaps be avoided by adding a clear policy in `developer-notes.md`.,https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300610914,300610914,
ryanofsky,2017-05-10T23:17:35Z,"I think this is a good change because `import *` can make unfamiliar python code really hard to read (you have no idea where identifiers are coming from).\n\nI also think @sdaftuar has a good point about script opcodes, and if there could be a solution for referencing opcodes that doesn't rely on `import *` before making this change, that would also make this PR smaller and a little easier to re",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300639008,300639008,
kallewoof,2017-05-11T01:20:35Z,"@ryanofsky There is the\n```Python\nimport test_framework.script as script\n[...]\n        p2sh_program = CScript([script.OP_TRUE])\n[...]\n```\napproach. A bit verbose perhaps, but better than import *.",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300655896,300655896,
kallewoof,2017-05-11T01:59:42Z,"@MarcoFalke \n> I agree it is a step in the right direction, but right now is not a good\ntime to do global refactors that stall progress of other pulls. I think we\nshould wait until less refactoring happens in the core files of the test\nframework (such as https://github.com/bitcoin/bitcoin/pull/10359/files#diff-\nbf6de4c07d2e9114c8f01eea45c6cab3L11) and revisit this pull after the dust\nh",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-300661371,300661371,
practicalswift,2017-07-17T12:40:40Z,Needs rebase :-),https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-315744154,315744154,
kallewoof,2017-07-18T04:55:44Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-315957996,315957996,
practicalswift,2017-07-18T07:56:05Z,"Thanks for rebasing.\n\nIt appears as if `test/functional/merkle_blocks.py` needs to import `assert_raises_jsonrpc` from `test_framework.util` :-)\n\nThe use of `assert_raises_jsonrpc` was introduced in @jnewbery:s commit 6294f3283a5b6919795621dc067ec80c0cd2a334.",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-315987531,315987531,
jtimon,2017-09-23T08:57:47Z,"Concept ACK, needs rebase\n\nEDIT: Although I think it's fine to have small exceptions like for the example of the opcodes (these examples can be separated to their own files).",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-331621171,331621171,
kallewoof,2017-09-25T05:50:31Z,"@jtimon That might make sense, yeah. (As for rebasing, I will hold off on that until I know we are ready to move forward with this.)",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-331783253,331783253,
laanwj,2018-03-07T18:53:34Z,"Closing this, this seems to be somewhat controversial, and that's not desirable for something that makes changes all over the test framework and causes lots of necessary rebases of other commits.",https://github.com/bitcoin/bitcoin/pull/10366#issuecomment-371244299,371244299,
