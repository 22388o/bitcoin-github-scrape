dcousens,2015-10-30T02:56:25Z,"tentative concept ACK, once-over utACK (not in depth)\n\nAs discussed on IRC, the trade offs [currently] are API compatibility (how invasive the change is) and the complexity of the change to achieve the desired memory/performance characteristics.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152396846,152396846,
jonasschnelli,2015-10-30T08:03:43Z,"Concept ACK.\n23% less memory and 13% faster seems after a reason for doing a such change. Hows the performance boost biased through disabled verification, what performance benefit would be expected ""in normal operation""?\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152454323,152454323,
btcdrak,2015-10-30T08:17:03Z,@sipa Not sure why you'd consider this controversial. Seems like a big win to me.\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152457379,152457379,
gmaxwell,2015-10-30T09:21:05Z,"@jonasschnelli well, disabled should (eventually) be representative of initial sync impact... runtime impact is a bit harder to measure, I expect, because it will depend greatly on the signature cache. When the hitrate is high I expect it to be closer to these figures, and when it's low... the signature validation would dwarf this improvement.\n\n@btcdrak because it's hard to review, if it weren't",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152467955,152467955,
jgarzik,2015-10-30T12:59:43Z,This is a standard technique for vectors.  I don't find it controversial.  concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152516643,152516643,
btcdrak,2015-10-30T13:43:50Z,"@gmaxwell Understood, but I was meaning, if there is clearly such a benefit, it makes it uncontroversial to me.\n\nAnyway, Concept ACK, will try to review this weekend.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152529431,152529431,
sipa,2015-10-30T16:07:42Z,@jgarzik Controversial to go change such a widely used consensus data\nstructure.\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152567528,152567528,
laanwj,2015-11-02T03:11:30Z,"I like the speedup. I do think it introduces a lot of somewhat hard to review code, and by sake of being part of CScript it becomes part of the consensus code.\n\nAt some point we should separate how scripts are allocated/stored, which is not consensus critical, from the code used to evaluate them, which is consensus critical, but could act on any slice of memory.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152899693,152899693,
sipa,2015-11-02T03:21:36Z,"@laanwj Yes, absolutely! That would also help building types that use arena\nstorage for scripts (like one single allocation arena for a CCoins, a\nCTransaction, or even a whole CBlock).\n\nI would of course like to see this change in before that time, but feel\nfree to demand better comments and/or tests if not considered sufficient.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-152901902,152901902,
theuni,2015-11-04T05:51:11Z,"@sipa Not sure if you were aware and/or based your work on this, but the ""dynarray""  was proposed for c++14, but didn't make it.\n\nhttp://en.cppreference.com/w/cpp/container/dynarray\n\nI only mention because using a reference implementation of that may ease the minds of reviewers.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-153585385,153585385,
sipa,2015-11-04T06:03:02Z,"@cfields: dynarray is very different\n- It still allocates everything on the heap\n- Its size is fixed, so it doesn't behave like a vector, but like an array\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-153587530,153587530,
theuni,2015-11-04T06:46:07Z,"@sipa ah sorry, I see. That's what i get for skimming.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-153603072,153603072,
gmaxwell,2015-11-06T23:34:35Z,"This is a huge speedup, and tests clean in valgrind.  For reindex w/ libsecp256k1 this takes the time down from 3 hours 16 minutes to 2 hours 7 minutes.  (With signature tests disabled completely this gets it down to 1h 17m.).  Size of the UTXO set in memory is reduced from 5486MB to 4012MB. \n\nI intend to test this further, but I support this, and it looks generally okay to me. I'm surprised we ",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-154577119,154577119,
dcousens,2015-11-07T01:19:15Z,"> I was expecting we'd have to make the entire cached transaction a single allocation to see this kind of benefit. \n\nWhy isn't that the case OOI?  I feel like CScript could just be 2 pointers, `begin` and `end`?\n\n**edit**: Is `CScript` really mutated that often?\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-154594512,154594512,
gmaxwell,2015-11-07T01:30:45Z,"Inside the coins cache the whole entry gets mutated, e.g. to delete outputs when they're spent... but never in a way which needs to increase their size. The cscripts themselves in these entries are never mutated at all.\n\nThe mutation that decreases the entry size could be addressed by flagging their deletion, and a separate operation which compacts the coins cache (e.g. takes txouts which many d",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-154595510,154595510,
dcousens,2015-11-07T01:44:20Z,"> This would eliminate quite a few more malloc operations and further reduce fragmentation; but I suspect it would be a much bigger change than just changing the type of cscripts.\n\nIndeed, as discussed with @sipa originally, the biggest benefit about this change is how isolated it is,  it just hot swaps an existing interface,  while netting a huge performance increase.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-154596535,154596535,
sipa,2015-11-07T02:39:50Z,Added some comments.\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-154601897,154601897,
sipa,2015-11-08T00:14:05Z,"@dcousens CScript is hardly ever mutated. But CCoins which contains a vector of CTxouts, which contain a CScript is mutated often. The proposal is to make CCoins allocate its entire memory (including several CScripts) at once.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-154766808,154766808,
sipa,2015-11-13T17:24:08Z,"Added a few more iterator tests (which caught (compile-time) errors), and removed the [WIP] marker.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-156493636,156493636,
sipa,2015-11-28T13:16:27Z,Do we want this for 0.12?\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160295224,160295224,
gmaxwell,2015-11-28T14:09:01Z,"I think so, it's a large performance improvement and memory usage reduction.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160300274,160300274,
dcousens,2015-11-30T03:49:49Z,ACK for 0.12\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160509135,160509135,
laanwj,2015-11-30T11:30:29Z,"I'd prefer to merge a large, reasonably risky change like this after 0.12 branch, but if you are confident enough about this, I'm ok with it.\n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160605463,160605463,
morcos,2015-11-30T22:32:52Z,i've done a light code review and have used this pull extensively.\ni'm in favor of merging and will continue to do a more extensive code review.\n,https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160783069,160783069,
gmaxwell,2015-11-30T23:00:46Z,"I have tested this extensively-- including operation in valgrind, perhaps more than I've tested the current tip without it. I have read the patch and think it looks fine but I feel anything doing this exceeds my knowledge of the subtle behaviors of C++ so I do not consider my code review to have much value on this pull.\n\nI think it's okay to merge, and considering our interactions if it causes t",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160789372,160789372,
dcousens,2015-12-01T00:35:08Z,"I'll pull this on to my own nodes for extended testing, and will look over it once more. \n",https://github.com/bitcoin/bitcoin/pull/6914#issuecomment-160809014,160809014,
