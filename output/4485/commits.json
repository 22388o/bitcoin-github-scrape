[
  {
    "sha": "e8097f7df164b4bf799963e5ab2539c36079187d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODA5N2Y3ZGYxNjRiNGJmNzk5OTYzZTVhYjI1MzljMzYwNzkxODdk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-08T16:07:23Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-09T14:19:26Z"
      },
      "message": "Refactor common RPC test code to BitcoinTestFramework base class\n\nInspired by #3956, with a little more flexibility built in.\n\nI didn't touch rpcbind_test.py, because it only runs on Linux.",
      "tree": {
        "sha": "62b394f577098c450e6cd9e461d7c08bb3b0fd61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62b394f577098c450e6cd9e461d7c08bb3b0fd61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8097f7df164b4bf799963e5ab2539c36079187d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlO9T24ACgkQdYgkL74406hgGwCghaECn05d5Z9YIdKqZovJqgKf\nD9kAn0SkRnU409AC/Lr/7xa9W5/2I2E1\n=EC6T\n-----END PGP SIGNATURE-----",
        "payload": "tree 62b394f577098c450e6cd9e461d7c08bb3b0fd61\nparent ae28a7c72db2776d7b2bf878b05c091e9ed11ace\nauthor Gavin Andresen <gavinandresen@gmail.com> 1404835643 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1404915566 -0400\n\nRefactor common RPC test code to BitcoinTestFramework base class\n\nInspired by #3956, with a little more flexibility built in.\n\nI didn't touch rpcbind_test.py, because it only runs on Linux.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8097f7df164b4bf799963e5ab2539c36079187d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8097f7df164b4bf799963e5ab2539c36079187d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8097f7df164b4bf799963e5ab2539c36079187d/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae28a7c72db2776d7b2bf878b05c091e9ed11ace",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae28a7c72db2776d7b2bf878b05c091e9ed11ace",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae28a7c72db2776d7b2bf878b05c091e9ed11ace"
      }
    ],
    "stats": {
      "total": 834,
      "additions": 334,
      "deletions": 500
    },
    "files": [
      {
        "sha": "3e916a7688d34c01f7a73a00e85f033de1bd4887",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=e8097f7df164b4bf799963e5ab2539c36079187d",
        "patch": "@@ -6,8 +6,8 @@ Git subtree of [https://github.com/jgarzik/python-bitcoinrpc](https://github.com\n Changes to python-bitcoinrpc should be made upstream, and then\n pulled here using git subtree.\n \n-### [skeleton.py](skeleton.py)\n-Copy this to create new regression tests.\n+### [test_framework.py](test_framework.py)\n+Base class for new regression tests.\n \n ### [listtransactions.py](listtransactions.py)\n Tests for the listtransactions RPC call."
      },
      {
        "sha": "50385b437208c943759737df508b30680d2e98bc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 62,
        "deletions": 121,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=e8097f7df164b4bf799963e5ab2539c36079187d",
        "patch": "@@ -5,17 +5,7 @@\n \n # Exercise the listtransactions API\n \n-# Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n-\n+from test_framework import BitcoinTestFramework\n from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n \n@@ -41,116 +31,67 @@ def check_array_result(object_array, to_match, expected):\n     if num_matched == 0:\n         raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n \n-def run_test(nodes):\n-    # Simple send, 0 to 1:\n-    txid = nodes[0].sendtoaddress(nodes[1].getnewaddress(), 0.1)\n-    sync_mempools(nodes)\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n-    # mine a block, confirmations should change:\n-    nodes[0].setgenerate(True, 1)\n-    sync_blocks(nodes)\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n-\n-    # send-to-self:\n-    txid = nodes[0].sendtoaddress(nodes[0].getnewaddress(), 0.2)\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid, \"category\":\"send\"},\n-                       {\"amount\":Decimal(\"-0.2\")})\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid, \"category\":\"receive\"},\n-                       {\"amount\":Decimal(\"0.2\")})\n-\n-    # sendmany from node1: twice to self, twice to node2:\n-    send_to = { nodes[0].getnewaddress() : 0.11, nodes[1].getnewaddress() : 0.22,\n-                nodes[0].getaccountaddress(\"from1\") : 0.33, nodes[1].getaccountaddress(\"toself\") : 0.44 }\n-    txid = nodes[1].sendmany(\"\", send_to)\n-    sync_mempools(nodes)\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n-                       {\"txid\":txid, \"account\" : \"from1\"} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n-                       {\"txid\":txid, \"account\" : \"\"} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n-                       {\"txid\":txid, \"account\" : \"toself\"} )\n-    \n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(2, options.tmpdir)\n-        connect_nodes(nodes[1], 0)\n+class ListTransactionsTest(BitcoinTestFramework):\n+\n+    def run_test(self, nodes):\n+        # Simple send, 0 to 1:\n+        txid = nodes[0].sendtoaddress(nodes[1].getnewaddress(), 0.1)\n+        sync_mempools(nodes)\n+        check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n+        # mine a block, confirmations should change:\n+        nodes[0].setgenerate(True, 1)\n         sync_blocks(nodes)\n-\n-        run_test(nodes)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+        check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n+\n+        # send-to-self:\n+        txid = nodes[0].sendtoaddress(nodes[0].getnewaddress(), 0.2)\n+        check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid, \"category\":\"send\"},\n+                           {\"amount\":Decimal(\"-0.2\")})\n+        check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid, \"category\":\"receive\"},\n+                           {\"amount\":Decimal(\"0.2\")})\n+\n+        # sendmany from node1: twice to self, twice to node2:\n+        send_to = { nodes[0].getnewaddress() : 0.11, nodes[1].getnewaddress() : 0.22,\n+                    nodes[0].getaccountaddress(\"from1\") : 0.33, nodes[1].getaccountaddress(\"toself\") : 0.44 }\n+        txid = nodes[1].sendmany(\"\", send_to)\n+        sync_mempools(nodes)\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n+                           {\"txid\":txid} )\n+        check_array_result(nodes[0].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n+                           {\"txid\":txid} )\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n+                           {\"txid\":txid} )\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n+                           {\"txid\":txid} )\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n+                           {\"txid\":txid} )\n+        check_array_result(nodes[0].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n+                           {\"txid\":txid, \"account\" : \"from1\"} )\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n+                           {\"txid\":txid, \"account\" : \"\"} )\n+        check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n+                           {\"txid\":txid, \"account\" : \"toself\"} )\n \n if __name__ == '__main__':\n-    main()\n+    ListTransactionsTest().main()\n+"
      },
      {
        "sha": "61f5e0452b589d00a0d490983ca8a9f6db472618",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 111,
        "deletions": 170,
        "changes": 281,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=e8097f7df164b4bf799963e5ab2539c36079187d",
        "patch": "@@ -3,23 +3,13 @@\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-# Exercise the listtransactions API\n-\n-# Add python-bitcoinrpc to module search path:\n-\n-import os\n-import sys\n-sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n+# Exercise the listreceivedbyaddress API\n \n+from test_framework import BitcoinTestFramework\n from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n \n+\n def get_sub_array_from_array(object_array, to_match):\n     '''\n         Finds and returns a sub array from an array of arrays.\n@@ -62,164 +52,115 @@ def check_array_result(object_array, to_match, expected, should_not_find = False\n     if num_matched > 0 and should_not_find == True:\n         raise AssertionError(\"Objects was matched %s\"%(str(to_match)))\n \n-def run_test(nodes):\n-    '''\n-        listreceivedbyaddress Test\n-    '''\n-    # Send from node 0 to 1\n-    addr = nodes[1].getnewaddress()\n-    txid = nodes[0].sendtoaddress(addr, 0.1)\n-    sync_mempools(nodes)\n-    \n-    #Check not listed in listreceivedbyaddress because has 0 confirmations\n-    check_array_result(nodes[1].listreceivedbyaddress(),\n-                       {\"address\":addr},\n-                       { },\n-                       True)\n-    #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n-    nodes[1].setgenerate(True, 10)\n-    sync_blocks(nodes)\n-    check_array_result(nodes[1].listreceivedbyaddress(),\n-                       {\"address\":addr},\n-                       {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-    #With min confidence < 10\n-    check_array_result(nodes[1].listreceivedbyaddress(5),\n-                       {\"address\":addr},\n-                       {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-    #With min confidence > 10, should not find Tx\n-    check_array_result(nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n-\n-    #Empty Tx\n-    addr = nodes[1].getnewaddress()\n-    check_array_result(nodes[1].listreceivedbyaddress(0,True),\n-                       {\"address\":addr},\n-                       {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n-\n-    '''\n-        getreceivedbyaddress Test\n-    '''\n-    # Send from node 0 to 1\n-    addr = nodes[1].getnewaddress()\n-    txid = nodes[0].sendtoaddress(addr, 0.1)\n-    sync_mempools(nodes)\n-\n-    #Check balance is 0 because of 0 confirmations\n-    balance = nodes[1].getreceivedbyaddress(addr)\n-    if balance != Decimal(\"0.0\"):\n-        raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n-\n-    #Check balance is 0.1\n-    balance = nodes[1].getreceivedbyaddress(addr,0)\n-    if balance != Decimal(\"0.1\"):\n-        raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n-\n-    #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n-    nodes[1].setgenerate(True, 10)\n-    sync_blocks(nodes)\n-    balance = nodes[1].getreceivedbyaddress(addr)\n-    if balance != Decimal(\"0.1\"):\n-        raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+class ReceivedByTest(BitcoinTestFramework):\n \n-    '''\n-        listreceivedbyaccount + getreceivedbyaccount Test\n-    '''\n-    #set pre-state\n-    addrArr = nodes[1].getnewaddress()\n-    account = nodes[1].getaccount(addrArr)\n-    received_by_account_json = get_sub_array_from_array(nodes[1].listreceivedbyaccount(),{\"account\":account})\n-    if len(received_by_account_json) == 0:\n-        raise AssertionError(\"No accounts found in node\")\n-    balance_by_account = rec_by_accountArr = nodes[1].getreceivedbyaccount(account)\n-\n-    txid = nodes[0].sendtoaddress(addr, 0.1)\n-\n-    # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n-    check_array_result(nodes[1].listreceivedbyaccount(),\n-                   {\"account\":account},\n-                   received_by_account_json)\n-\n-    # getreceivedbyaddress should return same balance because of 0 confirmations\n-    balance = nodes[1].getreceivedbyaccount(account)\n-    if balance != balance_by_account:\n-        raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n-\n-    nodes[1].setgenerate(True, 10)\n-    sync_blocks(nodes)\n-    # listreceivedbyaccount should return updated account balance\n-    check_array_result(nodes[1].listreceivedbyaccount(),\n-                       {\"account\":account},\n-                       {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n-\n-    # getreceivedbyaddress should return updates balance\n-    balance = nodes[1].getreceivedbyaccount(account)\n-    if balance != balance_by_account + Decimal(\"0.1\"):\n-        raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n-\n-    #Create a new account named \"mynewaccount\" that has a 0 balance\n-    nodes[1].getaccountaddress(\"mynewaccount\")\n-    received_by_account_json = get_sub_array_from_array(nodes[1].listreceivedbyaccount(0,True),{\"account\":\"mynewaccount\"})\n-    if len(received_by_account_json) == 0:\n-        raise AssertionError(\"No accounts found in node\")\n-\n-    # Test includeempty of listreceivedbyaccount\n-    if received_by_account_json[\"amount\"] != Decimal(\"0.0\"):\n-        raise AssertionError(\"Wrong balance returned by listreceivedbyaccount, %0.2f\"%(received_by_account_json[\"amount\"]))\n-\n-    # Test getreceivedbyaccount for 0 amount accounts\n-    balance = nodes[1].getreceivedbyaccount(\"mynewaccount\")\n-    if balance != Decimal(\"0.0\"):\n-        raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(2, options.tmpdir)\n-        connect_nodes(nodes[1], 0)\n+    def run_test(self, nodes):\n+        '''\n+        listreceivedbyaddress Test\n+        '''\n+        # Send from node 0 to 1\n+        addr = nodes[1].getnewaddress()\n+        txid = nodes[0].sendtoaddress(addr, 0.1)\n+        sync_mempools(nodes)\n+\n+        #Check not listed in listreceivedbyaddress because has 0 confirmations\n+        check_array_result(nodes[1].listreceivedbyaddress(),\n+                           {\"address\":addr},\n+                           { },\n+                           True)\n+        #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n+        nodes[1].setgenerate(True, 10)\n         sync_blocks(nodes)\n-\n-        run_test(nodes)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+        check_array_result(nodes[1].listreceivedbyaddress(),\n+                           {\"address\":addr},\n+                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n+        #With min confidence < 10\n+        check_array_result(nodes[1].listreceivedbyaddress(5),\n+                           {\"address\":addr},\n+                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n+        #With min confidence > 10, should not find Tx\n+        check_array_result(nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+\n+        #Empty Tx\n+        addr = nodes[1].getnewaddress()\n+        check_array_result(nodes[1].listreceivedbyaddress(0,True),\n+                           {\"address\":addr},\n+                           {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n+\n+        '''\n+            getreceivedbyaddress Test\n+        '''\n+        # Send from node 0 to 1\n+        addr = nodes[1].getnewaddress()\n+        txid = nodes[0].sendtoaddress(addr, 0.1)\n+        sync_mempools(nodes)\n+\n+        #Check balance is 0 because of 0 confirmations\n+        balance = nodes[1].getreceivedbyaddress(addr)\n+        if balance != Decimal(\"0.0\"):\n+            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+\n+        #Check balance is 0.1\n+        balance = nodes[1].getreceivedbyaddress(addr,0)\n+        if balance != Decimal(\"0.1\"):\n+            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+\n+        #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n+        nodes[1].setgenerate(True, 10)\n+        sync_blocks(nodes)\n+        balance = nodes[1].getreceivedbyaddress(addr)\n+        if balance != Decimal(\"0.1\"):\n+            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+\n+        '''\n+            listreceivedbyaccount + getreceivedbyaccount Test\n+        '''\n+        #set pre-state\n+        addrArr = nodes[1].getnewaddress()\n+        account = nodes[1].getaccount(addrArr)\n+        received_by_account_json = get_sub_array_from_array(nodes[1].listreceivedbyaccount(),{\"account\":account})\n+        if len(received_by_account_json) == 0:\n+            raise AssertionError(\"No accounts found in node\")\n+        balance_by_account = rec_by_accountArr = nodes[1].getreceivedbyaccount(account)\n+\n+        txid = nodes[0].sendtoaddress(addr, 0.1)\n+\n+        # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n+        check_array_result(nodes[1].listreceivedbyaccount(),\n+                           {\"account\":account},\n+                           received_by_account_json)\n+\n+        # getreceivedbyaddress should return same balance because of 0 confirmations\n+        balance = nodes[1].getreceivedbyaccount(account)\n+        if balance != balance_by_account:\n+            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+\n+        nodes[1].setgenerate(True, 10)\n+        sync_blocks(nodes)\n+        # listreceivedbyaccount should return updated account balance\n+        check_array_result(nodes[1].listreceivedbyaccount(),\n+                           {\"account\":account},\n+                           {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n+\n+        # getreceivedbyaddress should return updates balance\n+        balance = nodes[1].getreceivedbyaccount(account)\n+        if balance != balance_by_account + Decimal(\"0.1\"):\n+            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+\n+        #Create a new account named \"mynewaccount\" that has a 0 balance\n+        nodes[1].getaccountaddress(\"mynewaccount\")\n+        received_by_account_json = get_sub_array_from_array(nodes[1].listreceivedbyaccount(0,True),{\"account\":\"mynewaccount\"})\n+        if len(received_by_account_json) == 0:\n+            raise AssertionError(\"No accounts found in node\")\n+\n+        # Test includeempty of listreceivedbyaccount\n+        if received_by_account_json[\"amount\"] != Decimal(\"0.0\"):\n+            raise AssertionError(\"Wrong balance returned by listreceivedbyaccount, %0.2f\"%(received_by_account_json[\"amount\"]))\n+\n+        # Test getreceivedbyaccount for 0 amount accounts\n+        balance = nodes[1].getreceivedbyaccount(\"mynewaccount\")\n+        if balance != Decimal(\"0.0\"):\n+            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n \n if __name__ == '__main__':\n-    main()\n+    ReceivedByTest().main()"
      },
      {
        "sha": "126b6bfaf41ceb3d13d7ff135e2e5ae80470cadb",
        "filename": "qa/rpc-tests/skeleton.py",
        "status": "removed",
        "additions": 0,
        "deletions": 83,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae28a7c72db2776d7b2bf878b05c091e9ed11ace/qa/rpc-tests/skeleton.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae28a7c72db2776d7b2bf878b05c091e9ed11ace/qa/rpc-tests/skeleton.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/skeleton.py?ref=ae28a7c72db2776d7b2bf878b05c091e9ed11ace",
        "patch": "@@ -1,83 +0,0 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Skeleton for python-based regression tests using\n-# JSON-RPC\n-\n-\n-# Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n-\n-from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n-from util import *\n-\n-\n-def run_test(nodes):\n-    # Replace this as appropriate\n-    for node in nodes:\n-        assert_equal(node.getblockcount(), 200)\n-        assert_equal(node.getbalance(), 25*50)\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(2, options.tmpdir)\n-        connect_nodes(nodes[1], 0)\n-        sync_blocks(nodes)\n-\n-        run_test(nodes)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n-\n-if __name__ == '__main__':\n-    main()"
      },
      {
        "sha": "352a1de2d005c5e242d458f995a931371598b0ff",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 71,
        "deletions": 124,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=e8097f7df164b4bf799963e5ab2539c36079187d",
        "patch": "@@ -4,139 +4,86 @@\n # Test fee estimation code\n #\n \n-# Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n-\n-import json\n-import random\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n-\n+from test_framework import BitcoinTestFramework\n from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n \n+class EstimateFeeTest(BitcoinTestFramework):\n \n-def run_test(nodes, test_dir):\n-    nodes.append(start_node(0, test_dir,\n+    def setup_network(self, test_dir):\n+        nodes = []\n+        nodes.append(start_node(0, test_dir,\n                             [\"-debug=mempool\", \"-debug=estimatefee\"]))\n-    # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n-    # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n-    # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n-    # 6 or 7 transactions)\n-    nodes.append(start_node(1, test_dir,\n-                            [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n-                             \"-debug=mempool\", \"-debug=estimatefee\"]))\n-    connect_nodes(nodes[1], 0)\n-\n-    # Node2 is a stingy miner, that\n-    # produces very small blocks (room for only 3 or so transactions)\n-    node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\",\n-                             \"-debug=mempool\", \"-debug=estimatefee\"]\n-    nodes.append(start_node(2, test_dir, node2args))\n-    connect_nodes(nodes[2], 0)\n-\n-    sync_blocks(nodes)\n-\n-    # Prime the memory pool with pairs of transactions\n-    # (high-priority, random fee and zero-priority, random fee)\n-    min_fee = Decimal(\"0.001\")\n-    fees_per_kb = [];\n-    for i in range(12):\n-        (txid, txhex, fee) = random_zeropri_transaction(nodes, Decimal(\"1.1\"),\n-                                                        min_fee, min_fee, 20)\n-        tx_kbytes = (len(txhex)/2)/1000.0\n-        fees_per_kb.append(float(fee)/tx_kbytes)\n-\n-    # Mine blocks with node2 until the memory pool clears:\n-    count_start = nodes[2].getblockcount()\n-    while len(nodes[2].getrawmempool()) > 0:\n-        nodes[2].setgenerate(True, 1)\n-        sync_blocks(nodes)\n-\n-    all_estimates = [ nodes[0].estimatefee(i) for i in range(1,20) ]\n-    print(\"Fee estimates, super-stingy miner: \"+str([str(e) for e in all_estimates]))\n-\n-    # Estimates should be within the bounds of what transactions fees actually were:\n-    delta = 1.0e-6 # account for rounding error\n-    for e in filter(lambda x: x >= 0, all_estimates):\n-        if float(e)+delta < min(fees_per_kb) or float(e)-delta > max(fees_per_kb):\n-            raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"%(float(e), min_fee_kb, max_fee_kb))\n+        # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n+        # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n+        # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n+        # 6 or 7 transactions)\n+        nodes.append(start_node(1, test_dir,\n+                                [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n+                                 \"-debug=mempool\", \"-debug=estimatefee\"]))\n+        connect_nodes(nodes[1], 0)\n+\n+        # Node2 is a stingy miner, that\n+        # produces very small blocks (room for only 3 or so transactions)\n+        node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\",\n+                      \"-debug=mempool\", \"-debug=estimatefee\"]\n+        nodes.append(start_node(2, test_dir, node2args))\n+        connect_nodes(nodes[2], 0)\n \n-    # Generate transactions while mining 30 more blocks, this time with node1:\n-    for i in range(30):\n-        for j in range(random.randrange(6-4,6+4)):\n-            (txid, txhex, fee) = random_transaction(nodes, Decimal(\"1.1\"),\n-                                                    Decimal(\"0.0\"), min_fee, 20)\n+        sync_blocks(nodes)\n+        return nodes\n+        \n+\n+    def run_test(self, nodes):\n+        # Prime the memory pool with pairs of transactions\n+        # (high-priority, random fee and zero-priority, random fee)\n+        min_fee = Decimal(\"0.001\")\n+        fees_per_kb = [];\n+        for i in range(12):\n+            (txid, txhex, fee) = random_zeropri_transaction(nodes, Decimal(\"1.1\"),\n+                                                            min_fee, min_fee, 20)\n             tx_kbytes = (len(txhex)/2)/1000.0\n             fees_per_kb.append(float(fee)/tx_kbytes)\n-        nodes[1].setgenerate(True, 1)\n-        sync_blocks(nodes)\n \n-    all_estimates = [ nodes[0].estimatefee(i) for i in range(1,20) ]\n-    print(\"Fee estimates, more generous miner: \"+str([ str(e) for e in all_estimates]))\n-    for e in filter(lambda x: x >= 0, all_estimates):\n-        if float(e)+delta < min(fees_per_kb) or float(e)-delta > max(fees_per_kb):\n-            raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"%(float(e), min_fee_kb, max_fee_kb))\n-\n-    # Finish by mining a normal-sized block:\n-    while len(nodes[0].getrawmempool()) > 0:\n-        nodes[0].setgenerate(True, 1)\n-        sync_blocks(nodes)\n+        # Mine blocks with node2 until the memory pool clears:\n+        count_start = nodes[2].getblockcount()\n+        while len(nodes[2].getrawmempool()) > 0:\n+            nodes[2].setgenerate(True, 1)\n+            sync_blocks(nodes)\n+\n+        all_estimates = [ nodes[0].estimatefee(i) for i in range(1,20) ]\n+        print(\"Fee estimates, super-stingy miner: \"+str([str(e) for e in all_estimates]))\n+\n+        # Estimates should be within the bounds of what transactions fees actually were:\n+        delta = 1.0e-6 # account for rounding error\n+        for e in filter(lambda x: x >= 0, all_estimates):\n+            if float(e)+delta < min(fees_per_kb) or float(e)-delta > max(fees_per_kb):\n+                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"%(float(e), min_fee_kb, max_fee_kb))\n+\n+        # Generate transactions while mining 30 more blocks, this time with node1:\n+        for i in range(30):\n+            for j in range(random.randrange(6-4,6+4)):\n+                (txid, txhex, fee) = random_transaction(nodes, Decimal(\"1.1\"),\n+                                                        Decimal(\"0.0\"), min_fee, 20)\n+                tx_kbytes = (len(txhex)/2)/1000.0\n+                fees_per_kb.append(float(fee)/tx_kbytes)\n+            nodes[1].setgenerate(True, 1)\n+            sync_blocks(nodes)\n+\n+        all_estimates = [ nodes[0].estimatefee(i) for i in range(1,20) ]\n+        print(\"Fee estimates, more generous miner: \"+str([ str(e) for e in all_estimates]))\n+        for e in filter(lambda x: x >= 0, all_estimates):\n+            if float(e)+delta < min(fees_per_kb) or float(e)-delta > max(fees_per_kb):\n+                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"%(float(e), min_fee_kb, max_fee_kb))\n+\n+        # Finish by mining a normal-sized block:\n+        while len(nodes[0].getrawmempool()) > 0:\n+            nodes[0].setgenerate(True, 1)\n+            sync_blocks(nodes)\n+\n+        final_estimates = [ nodes[0].estimatefee(i) for i in range(1,20) ]\n+        print(\"Final fee estimates: \"+str([ str(e) for e in final_estimates]))\n \n-    final_estimates = [ nodes[0].estimatefee(i) for i in range(1,20) ]\n-    print(\"Final fee estimates: \"+str([ str(e) for e in final_estimates]))\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        print(\"  node0 running at: 127.0.0.1:%d\"%(p2p_port(0)))\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        run_test(nodes, options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n \n if __name__ == '__main__':\n-    main()\n+    EstimateFeeTest().main()"
      },
      {
        "sha": "a9b3d236b5552a3947089fff34f7f8b21c8aa49c",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8097f7df164b4bf799963e5ab2539c36079187d/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=e8097f7df164b4bf799963e5ab2539c36079187d",
        "patch": "@@ -0,0 +1,88 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Base class for RPC testing\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import shutil\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+class BitcoinTestFramework(object):\n+\n+    # These may be over-ridden by subclasses:\n+    def run_test(self, nodes):\n+            assert_equal(node.getblockcount(), 200)\n+            assert_equal(node.getbalance(), 25*50)\n+\n+    def add_options(self, parser):\n+        pass\n+\n+    def setup_chain(self, tmp_directory):\n+        print(\"Initializing test directory \"+tmp_directory)\n+        initialize_chain(tmp_directory)\n+\n+    def setup_network(self, tmp_directory):\n+        nodes = start_nodes(2, tmp_directory)\n+        connect_nodes(nodes[1], 0)\n+        sync_blocks(nodes)\n+        return nodes\n+\n+    def main(self):\n+        import optparse\n+\n+        parser = optparse.OptionParser(usage=\"%prog [options]\")\n+        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                          help=\"Root directory for datadirs\")\n+        self.add_options(parser)\n+        (self.options, self.args) = parser.parse_args()\n+\n+        os.environ['PATH'] = self.options.srcdir+\":\"+os.environ['PATH']\n+\n+        check_json_precision()\n+\n+        success = False\n+        nodes = []\n+        try:\n+            if not os.path.isdir(self.options.tmpdir):\n+                os.makedirs(self.options.tmpdir)\n+            self.setup_chain(self.options.tmpdir)\n+\n+            nodes = self.setup_network(self.options.tmpdir)\n+\n+            self.run_test(nodes)\n+\n+            success = True\n+\n+        except AssertionError as e:\n+            print(\"Assertion failed: \"+e.message)\n+        except Exception as e:\n+            print(\"Unexpected exception caught during testing: \"+str(e))\n+            traceback.print_tb(sys.exc_info()[2])\n+\n+        if not self.options.nocleanup:\n+            print(\"Cleaning up\")\n+            stop_nodes(nodes)\n+            wait_bitcoinds()\n+            shutil.rmtree(self.options.tmpdir)\n+\n+        if success:\n+            print(\"Tests successful\")\n+            sys.exit(0)\n+        else:\n+            print(\"Failed\")\n+            sys.exit(1)"
      }
    ]
  },
  {
    "sha": "f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWE5MmJmOWJkOWU1NTQ3Y2I4YjRjMDA4NGM3ZTIzYzM2YjQ5Yjcw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-09T01:24:40Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-07-09T14:19:46Z"
      },
      "message": "Print better errors, and add util stop_node() function.",
      "tree": {
        "sha": "e9c3fe67e8b1ed94a52014b167c5e6d4bb54438d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9c3fe67e8b1ed94a52014b167c5e6d4bb54438d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlO9T4IACgkQdYgkL74406hRnwCfQVm3SYX987g5Uy2kdXcS66ev\nlZIAoKIR6xXqP3l7UeGLGe1Sv8mbSjRu\n=14lp\n-----END PGP SIGNATURE-----",
        "payload": "tree e9c3fe67e8b1ed94a52014b167c5e6d4bb54438d\nparent e8097f7df164b4bf799963e5ab2539c36079187d\nauthor Gavin Andresen <gavinandresen@gmail.com> 1404869080 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1404915586 -0400\n\nPrint better errors, and add util stop_node() function.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8097f7df164b4bf799963e5ab2539c36079187d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8097f7df164b4bf799963e5ab2539c36079187d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8097f7df164b4bf799963e5ab2539c36079187d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5a185566553f408611f59aefd1dc805b7305bb5a",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70",
        "patch": "@@ -68,8 +68,12 @@ def main(self):\n \n             success = True\n \n+        except JSONRPCException as e:\n+            print(\"JSONRPC error: \"+e.error['message'])\n+            traceback.print_tb(sys.exc_info()[2])\n         except AssertionError as e:\n             print(\"Assertion failed: \"+e.message)\n+            traceback.print_tb(sys.exc_info()[2])\n         except Exception as e:\n             print(\"Unexpected exception caught during testing: \"+str(e))\n             traceback.print_tb(sys.exc_info()[2])"
      },
      {
        "sha": "0a7f26ffcd472526259cddbbe5265cb7f66dc192",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=f5a92bf9bd9e5547cb8b4c0084c7e23c36b49b70",
        "patch": "@@ -59,7 +59,7 @@ def sync_mempools(rpc_connections):\n         time.sleep(1)\n         \n \n-bitcoind_processes = []\n+bitcoind_processes = {}\n \n def initialize_datadir(dir, n):\n     datadir = os.path.join(dir, \"node\"+str(n))\n@@ -88,7 +88,7 @@ def initialize_chain(test_dir):\n             args = [ \"bitcoind\", \"-keypool=1\", \"-datadir=\"+datadir ]\n             if i > 0:\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n-            bitcoind_processes.append(subprocess.Popen(args))\n+            bitcoind_processes[i] = subprocess.Popen(args)\n             subprocess.check_call([ \"bitcoin-cli\", \"-datadir=\"+datadir,\n                                     \"-rpcwait\", \"getblockcount\"], stdout=devnull)\n         devnull.close()\n@@ -149,7 +149,7 @@ def start_node(i, dir, extra_args=None, rpchost=None):\n     datadir = os.path.join(dir, \"node\"+str(i))\n     args = [ \"bitcoind\", \"-datadir=\"+datadir, \"-keypool=1\" ]\n     if extra_args is not None: args.extend(extra_args)\n-    bitcoind_processes.append(subprocess.Popen(args))\n+    bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(\"/dev/null\", \"w+\")\n     subprocess.check_call([ \"bitcoin-cli\", \"-datadir=\"+datadir] +\n                           _rpchost_to_args(rpchost)  +\n@@ -168,16 +168,21 @@ def start_nodes(num_nodes, dir, extra_args=None, rpchost=None):\n def debug_log(dir, n_node):\n     return os.path.join(dir, \"node\"+str(n_node), \"regtest\", \"debug.log\")\n \n+def stop_node(node, i):\n+    node.stop()\n+    bitcoind_processes[i].wait()\n+    del bitcoind_processes[i]\n+\n def stop_nodes(nodes):\n     for i in range(len(nodes)):\n         nodes[i].stop()\n     del nodes[:] # Emptying array closes connections as a side effect\n \n def wait_bitcoinds():\n     # Wait for all bitcoinds to cleanly exit\n-    for bitcoind in bitcoind_processes:\n+    for bitcoind in bitcoind_processes.values():\n         bitcoind.wait()\n-    del bitcoind_processes[:]\n+    bitcoind_processes.clear()\n \n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))"
      }
    ]
  }
]