[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667704787",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667704787",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 667704787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzcwNDc4Nw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T17:51:26Z",
    "updated_at": "2020-08-02T17:51:26Z",
    "author_association": "MEMBER",
    "body": "@sumBTC you might find this useful--I've been using it to observe your issue https://github.com/bitcoin/bitcoin/issues/19500.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667704787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667707855",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667707855",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 667707855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzcwNzg1NQ==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T18:21:00Z",
    "updated_at": "2020-08-02T18:21:00Z",
    "author_association": "NONE",
    "body": "@jonatack Ah was wondering what you were using. Nice to know this kind of information will soon be part of bitcoin-cli.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667707855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667719280",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667719280",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 667719280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzcxOTI4MA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T20:13:25Z",
    "updated_at": "2020-08-20T21:09:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667719280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667932302",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667932302",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 667932302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzkzMjMwMg==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T10:00:05Z",
    "updated_at": "2020-08-03T10:00:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK. Especially on the _detailed peers listing_ as `getpeerinfo` formatted for humans.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667932302/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668098753",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-668098753",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 668098753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODA5ODc1Mw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T15:51:22Z",
    "updated_at": "2020-08-03T15:51:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wow, this is really neat!\r\n\r\nAs a pure terminal user I love the `bitcoin-cli -netinfo t` output -- that is terminal usability at its finest!\r\n\r\nConcept ACK\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668098753/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669858187",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-669858187",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 669858187,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTg1ODE4Nw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-06T10:54:16Z",
    "updated_at": "2020-08-06T10:54:16Z",
    "author_association": "MEMBER",
    "body": "> Concept ACK, but not sure about `min ping` data usefulness though.\r\n\r\nThanks for having a look. `min ping` is an inbound eviction criterium and I look at it more than `ping`; also mulling adding a human-readable `conntime` column and maybe a couple others (last send/recv, addnode).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669858187/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669858787",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-669858787",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 669858787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTg1ODc4Nw==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-06T10:55:58Z",
    "updated_at": "2020-08-06T10:55:58Z",
    "author_association": "MEMBER",
    "body": "> > Concept ACK, but not sure about `min ping` data usefulness though.\r\n> \r\n> Thanks for having a look. `min ping` is an inbound eviction criterium and I look at it more than `ping`; also mulling adding a human-readable `conntime` column and maybe a couple others (last send/recv, addnode).\r\n\r\nGreat!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669858787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670005797",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-670005797",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 670005797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDAwNTc5Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-06T15:38:20Z",
    "updated_at": "2020-08-06T15:38:31Z",
    "author_association": "MEMBER",
    "body": "Concept and functionality ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670005797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670485225",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-670485225",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 670485225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDQ4NTIyNQ==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-07T12:09:00Z",
    "updated_at": "2020-08-07T12:09:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670485225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671068195",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671068195",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 671068195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA2ODE5NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-09T15:51:13Z",
    "updated_at": "2020-08-09T15:51:13Z",
    "author_association": "MEMBER",
    "body": "Took most all of the feedback and also added `lastsend` and `lastrecv` in addition to the requested `version` column.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671068195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671068570",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671068570",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 671068570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA2ODU3MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-09T15:54:41Z",
    "updated_at": "2020-08-09T15:54:41Z",
    "author_association": "MEMBER",
    "body": "> Did not see anything in the `asmap` column. Guess that's due to me not using the asmap feature.\r\n\r\nUpdated to not display the `asmap` column unless it is being used.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671068570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671093420",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671093420",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 671093420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTA5MzQyMA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-09T19:48:01Z",
    "updated_at": "2020-08-10T10:02:24Z",
    "author_association": "MEMBER",
    "body": "What I am using at the moment is this version with additional columns for the time since the last tx (in sec) and the last block (in min), done by adding `nLastBlockTime` and `nLastTXTime` to `getpeerinfo`, because these are possible criteria for inbound peer evictions. Maybe for a follow-up.\r\n\r\n<details><summary>code diff</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\r\nindex 32d9cb9d3d..3b14806bea 100644\r\n--- a/src/bitcoin-cli.cpp\r\n+++ b/src/bitcoin-cli.cpp\r\n@@ -307,8 +307,10 @@ private:\r\n         int mapped_as;\r\n         int version;\r\n         int64_t conn_time;\r\n+        int64_t last_block;\r\n         int64_t last_recv;\r\n         int64_t last_send;\r\n+        int64_t last_tx;\r\n         double min_ping;\r\n         double ping;\r\n         std::string addr;\r\n@@ -410,11 +412,13 @@ public:\r\n                 const int version{peer[\"version\"].get_int()};\r\n                 const std::string sub_version{peer[\"subver\"].get_str()};\r\n                 const int64_t conn_time{peer[\"conntime\"].get_int64()};\r\n+                const int64_t last_block{peer[\"last_block\"].get_int64()};\r\n                 const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\r\n                 const int64_t last_send{peer[\"lastsend\"].get_int64()};\r\n+                const int64_t last_tx{peer[\"last_tx\"].get_int64()};\r\n                 const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\r\n                 const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\r\n-                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\r\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_block, last_recv, last_send, last_tx, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\r\n                 is_asmap_on |= (mapped_as != 0);\r\n                 max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\r\n                 max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\r\n@@ -425,12 +429,12 @@ public:\r\n         // Report 1: detailed peer connections sorted by direction and minimum ping time\r\n         if (m_verbose) {\r\n             std::sort(peers.begin(), peers.end());\r\n-            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn   time minping   ping lastsend lastrecv \";\r\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn   time minping   ping lastsend lastrecv lasttx lastblk \";\r\n             if (is_asmap_on) result += \"asmap \";\r\n             result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\r\n             for (const m_peer& peer : peers) {\r\n                 result += strprintf(\r\n-                    \"%3s %5s %5s%7s%8d%7d %8s %8s%*i %*s %-*s %s\\n\",\r\n+                    \"%3s %5s %5s%7s%8d%7d %8s %8s%7s%8s%*i %*s %-*s %s\\n\",\r\n                     peer.is_outbound ? \"out\" : \"in\",\r\n                     peer.is_block_relay ? \"block\" : \"full\",\r\n                     ConnTypeEnumToString(peer.conn_type),\r\n@@ -439,6 +443,8 @@ public:\r\n                     round(1000 * peer.ping),\r\n                     peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\r\n                     peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\r\n+                    peer.last_tx == 0 ? \"\" : ToString(time_now - peer.last_tx),\r\n+                    peer.last_block == 0 ? \"\" : ToString(time_now - peer.last_block),\r\n                     is_asmap_on ? 6 : 0, // variable spacing\r\n                     is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\r\n                     max_peer_id_length, // variable spacing\r\n@@ -447,7 +453,7 @@ public:\r\n                     ToString(peer.version) + peer.sub_version,\r\n                     peer.addr);\r\n             }\r\n-            result += \"                   min      ms     ms      sec      sec\\n\\n\";\r\n+            result += \"                   min      ms     ms      sec      sec    sec     sec\\n\\n\";\r\n         }\r\n         // Report 2: peer connections summary\r\n         total_i = ipv4_i + ipv6_i + onion_i;\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex 0c56cddbdc..15f2b6044c 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -530,6 +530,8 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\r\n     X(nLastRecv);\r\n     X(nTimeConnected);\r\n     X(nTimeOffset);\r\n+    X(nLastBlockTime);\r\n+    X(nLastTXTime);\r\n     stats.addrName = GetAddrName();\r\n     X(nVersion);\r\n     {\r\ndiff --git a/src/net.h b/src/net.h\r\nindex 17d8fda372..4ecfcce223 100644\r\n--- a/src/net.h\r\n+++ b/src/net.h\r\n@@ -594,6 +594,8 @@ public:\r\n     int64_t m_ping_usec;\r\n     int64_t m_ping_wait_usec;\r\n     int64_t m_min_ping_usec;\r\n+    int64_t nLastBlockTime;\r\n+    int64_t nLastTXTime;\r\n     CAmount minFeeFilter;\r\n     // Our address, as reported by the peer\r\n     std::string addrLocal;\r\ndiff --git a/src/rpc/net.cpp b/src/rpc/net.cpp\r\nindex 9981ea35df..533d424611 100644\r\n--- a/src/rpc/net.cpp\r\n+++ b/src/rpc/net.cpp\r\n@@ -169,10 +169,13 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\r\n         obj.pushKV(\"relaytxes\", stats.fRelayTxes);\r\n         obj.pushKV(\"lastsend\", stats.nLastSend);\r\n         obj.pushKV(\"lastrecv\", stats.nLastRecv);\r\n+        obj.pushKV(\"last_block\", stats.nLastBlockTime);\r\n+        obj.pushKV(\"last_tx\", stats.nLastTXTime);\r\n         obj.pushKV(\"bytessent\", stats.nSendBytes);\r\n         obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\r\n         obj.pushKV(\"conntime\", stats.nTimeConnected);\r\n         obj.pushKV(\"timeoffset\", stats.nTimeOffset);\r\n```\r\n</p></details>\r\n\r\nOutput\r\n```\r\nPeer connections sorted by direction and min ping\r\n<-> relay  conn   time minping   ping lastsend lastrecv lasttx lastblk  asmap   id version                                    address\r\n in  full  ipv6    902      47     58        4       25                 14061   11 70015/bitnodes.earn.com:0.1/               [2a03:b0c0:2:d0::4bc:2001]:21160\r\n in  full  ipv6    492      53     66        4       49                 34878  995 70002/dsn.tm.kit.edu/bitcoin:0.9.99/       [2a00:1398:4:2a03:921b:eff:fe35:aed9]:41110\r\n in block  ipv6     55      53     69        1        1                 14061 2092 70012/bitcoinj:0.15.6/                     [2a03:b0c0:3:f0::3a:8000]:38318\r\n in  full  ipv6    902      54    120        4       25                 34878   12 70002/dsn.tm.kit.edu/bitcoin:0.9.99/       [2a00:1398:4:2a03:4e52:62ff:fe22:6c13]:41222\r\n in  full  ipv6    900      57     74        4       27                 24940   28 70015/bitnodes.io:0.1/                     [2a01:4f8:10a:37ee::2]:60418\r\n in  full  ipv6    839     131    239        4        2    188          12637  154 70015/Satoshi:0.18.1/                      [2a0b:f4c2:2::1]:4237\r\n in  full  ipv6      1     214    214        5       72                 16509 2240 70015/Satoshi:0.19.1/                      [2600:1f16:625:e00:ab19:5fe3:f155:1371]:53146\r\n in  full  ipv6      1     226    226        5        7                 16509 2239 70015/Satoshi:0.19.1/                      [2406:da18:f7c:4351:5729:102:998c:d41a]:35564\r\n in  full  ipv6      9     239    273        5       92                 54098 2204 70015/bitcoinj:0.15-SNAPSHOT/              [2604:d500:4:1::2]:29044\r\n in  full  ipv6      2     262    322        5       25                 54098 2237 70015/bitcoinj:0.13.4/Bitcoin Wallet:4.46/ [2604:d500:4:1::2]:37601\r\n in  full  ipv6      0     277    277        5       15                 54098 2241 70015/Satoshi:0.10.1/                      [2604:d500:4:1::2]:36310\r\n in  full  ipv6      2     286    286        5       25                 54098 2236 70015/bitcoinj:0.14.4/Bitcoin:1.075/       [2604:d500:4:1::2]:41908\r\n in  full onion    783     297   1357        4       50                        286 70015/bitnodes.io:0.1/                     127.0.0.1:59452\r\n in block onion    614     616    998       19       19                        702 70015/Satoshi:0.20.0/                      127.0.0.1:37594\r\n in  full onion     77   58745 157842        5       23                       2038 70015/Satoshi:0.19.1/                      127.0.0.1:33374\r\nout  full  ipv4     92      57     99        2        9     13          43350 2006 70015/Satoshi:0.18.0/                      109.201.140.9:8333\r\nout  full  ipv4    901      67    249        2        7     10      18  24940   21 70015/Satoshi:0.19.99/                     94.130.10.158:8333\r\nout  full  ipv4    352      68    130        2        2      2     105  12876 1357 70015/Satoshi:0.19.0.1/                    51.158.27.215:8333\r\nout block  ipv4    901     129    201       76       76            277  13768   22 70015/Satoshi:0.19.1/                      64.227.13.20:8333\r\nout block  ipv4    901     203    280       67       67            839  14061   25 70015/Satoshi:0.17.2/                      165.22.223.100:8333\r\nout  full  ipv4    281     211    248        3        3      3          63949 1527 70015/Satoshi:0.17.1/                      173.230.157.253:8333\r\nout  full  ipv4    638     309    391        2       30     30     247 132203  637 70015/Satoshi:0.18.0/                      129.226.125.10:8333\r\nout  full onion     23     461    789        2       13     13                2163 70015/Satoshi:0.20.99/                     XXXXXXXXy7q47OID.onion:8333\r\nout  full onion    902     545   1003        3        5     35                  20 70015/Satoshi:0.19.0.1/                    XXXXXXXXuomUx6ln.onion:8333\r\nout  full onion    223     705   1261        1        1    327                1706 70015/Satoshi:0.19.1/                      XXXXXXXXmexaT7zd.onion:8333\r\nout  full onion    903     724   1267        4        4   2414                   8 70015/Satoshi:0.20.0/                      XXXXXXXX5pans2i4.onion:8333\r\n                   min      ms     ms      sec      sec    sec     min\r\n\r\nInbound and outbound peer connections\r\nin:  ipv4   0  |  ipv6  12  |  onion   3  |  total  15  (2 block-relay)\r\nout: ipv4   7  |  ipv6   0  |  onion   4  |  total  11  (2 block-relay)\r\nall: 26\r\n\r\nLocal addresses\r\nXXXX:XXX:53c:a200:bb54:3be5:c3d0:9ce5  |  port  8333  |  score   1505\r\nXXXXXXXXrn5pknnd.onion                 |  port  8333  |  score    235\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671093420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673591921",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-673591921",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 673591921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU5MTkyMQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T16:56:48Z",
    "updated_at": "2020-08-20T15:38:32Z",
    "author_association": "MEMBER",
    "body": "Thanks everyone for reviewing and the 9-10 Concept ACKs.\r\n\r\nTo simplify things, I dropped the commit that added the constants, took the other feedback, and made a number of further improvements. As there were no full ACKs and almost no feedback on the code itself, and to make the changes easy to review, I organised the 200 lines of changes into step-by-step hygienic commits to hopefully garner some final ACKs.\r\n\r\nAt this point, I'd like to defer any further changes to follow-ups, as there are more improvements I'd propose as well as a release note if this is merged. So looking for ACKs now and hoping to see this in master soon.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673591921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674053200",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674053200",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 674053200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDA1MzIwMA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T12:36:15Z",
    "updated_at": "2020-08-14T12:36:15Z",
    "author_association": "MEMBER",
    "body": "Updated with a non-empty check per `git diff bf1c49a f63cecc` (thanks!)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674053200/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674113018",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674113018",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 674113018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDExMzAxOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T14:52:58Z",
    "updated_at": "2020-08-14T14:52:58Z",
    "author_association": "MEMBER",
    "body": "Tested and code review ACK f63ceccca31aa624819b429d015f8f1bf2daf49f, my comment above is just a small nit.\r\nTested it on a busy node and it works great.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674113018/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674166571",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674166571",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 674166571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDE2NjU3MQ==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T16:53:15Z",
    "updated_at": "2020-08-14T16:53:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested on multiple nodes and light code review ACK f63ceccca31aa624819b429d015f8f1bf2daf49f. \r\n\r\nAwesome that this is backwards compatible with e.g. Bitcoin Core v0.18 as well!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674166571/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674191423",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674191423",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 674191423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDE5MTQyMw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T17:52:15Z",
    "updated_at": "2020-08-14T17:52:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "tested ACK f63ceccca31aa624819b429d015f8f1bf2daf49f\r\n\r\nReviewed changes since last review per `git diff 324aa5e f63cecc`. Tested on a testnet node.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674191423/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674967770",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674967770",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 674967770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDk2Nzc3MA==",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?u=d06d2903ce6ad8b9d0c66ef9225fa21adfe22c7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-17T16:03:17Z",
    "updated_at": "2020-08-17T16:03:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Don't consider my review as a blocker - no stopper issues. All except https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671 can be ignored and that one can be addressed in this or a followup PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674967770/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674975915",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674975915",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 674975915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDk3NTkxNQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-17T16:18:54Z",
    "updated_at": "2020-08-19T16:50:54Z",
    "author_association": "MEMBER",
    "body": "Thanks for the detailed review @vasild. As I wrote above in https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-673591921, I'd like to defer any further code style or edge case changes to follow-ups, as there are more improvements I'd propose, including using #19731 if it is merged.\r\n\r\nWith 3 tested ACKs, 9 Concept ACKs and an Approach ACK (which for a CLI PR is miraculous), it's also better to not invalidate the 3 tested ACKs. \r\n\r\nI've been using this continually for a number of weeks and it works great in practice.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674975915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675298410",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675298410",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 675298410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTI5ODQxMA==",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?u=d06d2903ce6ad8b9d0c66ef9225fa21adfe22c7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T07:07:28Z",
    "updated_at": "2020-08-18T07:07:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "To be explicit that I am ok with this as is:\r\n\r\nACK f63ceccca\r\n\r\nThe worthwhile suggestions I mentioned can be addressed in a follow up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675298410/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675415319",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675415319",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 675415319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTQxNTMxOQ==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T11:09:33Z",
    "updated_at": "2020-08-18T11:09:33Z",
    "author_association": "MEMBER",
    "body": "> With 3 tested ACKs, 9 Concept ACKs and an Approach ACK (which for a CLI PR is miraculous), it's also better to not invalidate the 3 tested ACKs.\r\n\r\nI just want to comment on [\"it's also better to not invalidate the 3 tested ACKs.\"](https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674975915). If this was a taproot PR, some consensus or in some other way critical code, or had accumulated review from a number of less-active but more-knowledgeable for some portion of the code-base reviewers I might agree. However, this is a few hundred lines, adding a new, \"cool\" feature to a binary which isn't bitcoind. I don't think there's any problem with \"invalidating ACKs\" here to fix bugs or outstanding issues, and it looks like there might be a couple, or even just fixing this up so that newly added code is following the developer/style guidelines, which really should always be the case.\r\n\r\nSpeaking generally, I think, \"we'll fix bugs/issues in a follow up\", isn't the right mindset for this project, not only because I don't think ACKs are so precious that we'd rather merge suboptimal/buggy code, but also because I don't want to discourage reviewers from actually reviewing, or have them change how they review based on how many ACKs a PR already has (not saying this is happening right now). Also, when comments are left with follow ups, care has to be taken to make sure they all end up accounted for, and/or the reviewers that left them know they should also be following up in another PR. It's easy for something to get lost in GitHub's ever collapsing GUI.\r\n\r\nRegardless of the above, I'm a ~0 on this change. I agree with @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/19643#pullrequestreview-462394409) about this being scope creep. It seems now that we've now got to maintain a kind of \"GUI\" in a cli tool. This also seems like the sort of feature that has the potential to be constantly tweaked/redone to the liking of whoever is modifying this code. Hopefully we don't end up having to maintain a bunch of tests / some sort of backwards-compatibility for a cli-tool based GUI. I think in general if we can ship tools with nice APIs, so that end-users can write scripts & tools to consume the data, that's I think that's a win (hopefully they'll even share/publish them). Ideally we won't have to bring too much functionality like this into our tools.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675415319/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675437434",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675437434",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 675437434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTQzNzQzNA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T12:04:18Z",
    "updated_at": "2020-08-18T12:04:18Z",
    "author_association": "MEMBER",
    "body": "@fanquake Much could be said and debated concerning the project norms, I suppose, but an issue or gist may be a better place for that. I'm trying to follow the norms as best I've been able to observe them and would prefer to keep the discussion here to review/testing of the PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675437434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675537418",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675537418",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 675537418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTUzNzQxOA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T15:09:35Z",
    "updated_at": "2020-08-18T15:09:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK f63ceccca31aa624819b429d015f8f1bf2daf49f\r\n\r\nVery nice addition @jonatack - I've been using it for a while and I'm already hooked: I can't wait for it to land in `master` :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675537418/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676004980",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676004980",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 676004980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjAwNDk4MA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-19T09:14:16Z",
    "updated_at": "2020-08-19T09:51:34Z",
    "author_association": "MEMBER",
    "body": "Agree that it's not always bad to invalidate ACKs. I'll happily retest this if it's needed.\r\n\r\n> Regardless of the above, I'm a ~0 on this change. I agree with @jnewbery's comment about this being scope creep. It seems now that we've now got to maintain a kind of \"GUI\" in a cli tool\r\n\r\nI don't disagree with your point but at least we've managed to keep this fully client-side.\r\n\r\nI'm very wary for server-side scope creep, but don't have a problem with making our client more user friendly with localized changes. \r\n\r\nWe *have* a GUI too. I don't much of a problem with having a nice command-line tool. I kind of like Rust's philosophy in that regard (\"command line is also an UI\"). But if people disagree and think having a *simple as possible* cli is more important than feel free to close  #17314.\r\n\r\nEdit: so I kind of see the conflict, on one hand bitcoin-cli is for usage in scripts, on the other it's a user-facing tool. It's important to document what is what, that the output for these kind of convenience tools is not a stable API meant for machine parsing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676004980/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676526940",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676526940",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 676526940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjUyNjk0MA==",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?u=8b3acfaf5f6b5d51d1a3ee1a427e4489e9874bb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-19T16:23:41Z",
    "updated_at": "2020-08-19T16:23:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK, tested ACK, approach ACK.\r\n\r\nI think this is very cool feature and I tried it out on clearnet and onion. I find the output of `getpeerinfo` too big or verbose to be helpful without a `grep` and this makes the data nice and tidy.\r\n\r\nNone of the style nits are game-changers for me.\r\n\r\n\r\n\r\n```\r\n$ src/bitcoin-cli -datadir=/Volumes/Serenity/bitcoin -netinfo true\r\nBitcoin Core v0.20.99.0-f63ceccca - 70016/Satoshi:0.20.99/\r\n\r\nPeer connections sorted by direction and min ping\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id version                              address\r\nout  full onion     384    388        9        8     32  5 70015/Satoshi:0.20.1/                4iczunxx6krcaqbp.onion:8333\r\nout  full onion     385    468        9        8     32  3 70015/Satoshi:0.20.0/                oah44d75fd3sbyf3.onion:8333\r\nout  full onion     424    561        9        8     32  4 70015/Satoshi:0.18.1/                sjx3sqpsxxn73ihg.onion:8333\r\nout  full onion     438    654       13        4     32  0 70015/Satoshi:0.19.1/Knots:20200304/ gx3z4jk7bug3ctka.onion:8333\r\nout  full onion     476    574       10       10     32  7 70015/Satoshi:0.18.1/                xjc5ref2kcqxkf6i.onion:8333\r\nout  full onion     479    619        9        8     32  2 70015/Satoshi:0.20.0/                e5pvabgdvrhznfx5.onion:8333\r\nout block onion     550    552        4        3     31  9 70015/Satoshi:0.20.0/                yba4brm555denlt7.onion:8333\r\nout block onion     594    927        4        5     32  8 70015/Satoshi:0.20.0/                uvaqn6udr2vmhxni.onion:8333\r\nout  full onion     602    755       13       13     32  6 70015/Satoshi:0.20.0/                bzvptsceamcojin4.onion:8333\r\nout  full onion     692    822       13       12     32  1 70015/Satoshi:0.20.1/                qfuccrxvh5i526g4.onion:8333\r\n                     ms     ms      sec      sec    min\r\n\r\nInbound and outbound peer connections\r\nin:  ipv4   0  |  ipv6   0  |  onion   0  |  total   0  (0 block-relay)\r\nout: ipv4   0  |  ipv6   0  |  onion  10  |  total  10  (2 block-relay)\r\nall: 10\r\n\r\nLocal addresses\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676526940/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676596264",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676596264",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 676596264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU5NjI2NA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-19T18:44:22Z",
    "updated_at": "2020-08-19T18:47:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack A minor UI nit if you choose to touch this PR: when testing this PR I noticed that the `address` column sometimes ends up outside the visible part of the terminal due to very long `version` strings (these can be 256 chars IIRC).\r\n\r\nI suggest printing the `address` column (which is guaranteed to be short) before the `version` column. That way all column headers are guaranteed to be visible :)\r\n\r\nIn other words \u2026\r\n\r\n```\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id address                     version\r\nout  full onion     438    654       13        4     32  0 l0ckdwncyph3rpnk.onion:8333 70015/Satoshi:0.19.1/Knots:20200304/Libertarian-Cypherpunk-Anarchists-Supporting-COVID-19-Lockdowns/\r\n```\r\n\r\n\u2026 instead of \u2026\r\n\r\n```\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id version                                                                                              address\r\nout  full onion     438    654       13        4     32  0 70015/Satoshi:0.19.1/Knots:20200304/Libertarian-Cypherpunk-Anarchists-Supporting-COVID-19-Lockdowns/ l0ckdwncyph3rpnk.onion:8333\r\n```\r\n\r\nMakes sense? :)\r\n\r\n(Details in the screen capture above edited to protect the privacy of our users.)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676596264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678813539",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-678813539",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 678813539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODgxMzUzOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-23T19:19:59Z",
    "updated_at": "2020-08-23T19:19:59Z",
    "author_association": "MEMBER",
    "body": "@practicalswift thanks for the feedback. Worth a try. See also https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672; higher integer values e.g. `-netinfo 2` could be passed for more/wider columns.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678813539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680744592",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-680744592",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 680744592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDc0NDU5Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T08:41:34Z",
    "updated_at": "2020-08-26T08:41:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack When running `src/bitcoin-cli -netinfo t` I observed a peer with a reported `minping` of `\"8601.05568e+06\"`. Could be an uninitialized read?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680744592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682044893",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-682044893",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 682044893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA0NDg5Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-27T16:09:29Z",
    "updated_at": "2020-08-29T20:39:52Z",
    "author_association": "MEMBER",
    "body": "@practicalswift A couple of times I saw ephemeral very long `minping` times, but IIRC it happens only around initial connection of a peer. Not sure. It's rare.\r\n\r\nThe `nMinPingUsecTime` is initialized in `net.h` to `int64_t` max value\r\n```cpp\r\n    // Best measured round-trip time.\r\n    std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\r\n```\r\n\r\n(per 93ff1b9041a828 *net: correctly initialize nMinPingUsecTime, was left uninitialized in CNode. The correct initialization for a minimum-until-now is int64_t's max value, so initialize it to that.*)\r\n\r\nThe only place it is updated is in `net_processing.cpp` in `ProcessMessage::PONG`\r\n```cpp\r\nconst auto ping_end = time_received;\r\n../..\r\n            const auto ping_time = ping_end - pfrom.m_ping_start.load();\r\n            if (ping_time.count() > 0) {\r\n                // Successful ping time measurement, replace previous\r\n                pfrom.nPingUsecTime = count_microseconds(ping_time);\r\n                pfrom.nMinPingUsecTime = std::min(pfrom.nMinPingUsecTime.load(), count_microseconds(ping_time));\r\n            } else {\r\n                // This should never happen\r\n```\r\n\r\nOffhand, I don't see any uninitialized reads, maybe more a possible lag or initial high value.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682044893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682045880",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-682045880",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 682045880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA0NTg4MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-27T16:11:19Z",
    "updated_at": "2020-08-27T16:11:19Z",
    "author_association": "MEMBER",
    "body": "If `-netinfo` helps us detect things like this, all the better.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682045880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683338843",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683338843",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683338843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzMzODg0Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-29T20:31:59Z",
    "updated_at": "2020-08-31T09:31:26Z",
    "author_association": "MEMBER",
    "body": "I've pushed the latest version for people to use/test/review.\r\n\r\nUnder the hood:\r\n- nits addressed\r\n- tweaked the onion detection helpers; the change makes no observable difference in my testing but in theory it might better handle a couple of edge cases\r\n\r\nUser-facing:\r\n- changed the optional boolean arg to an integer one between 0 and 4 (default: 0) to enable getting reports with varying details & horizontal sizes\r\n- added the new getpeerinfo `last_block` and `last_transaction` fields merged in #19731\r\n- added a bitcoind server version check and explanatory error message if < v0.21\r\n- added total ipv4/ipv6/onion connections to the default report and simplified its output format\r\n- grouped all the time columns by increasing time units (ms, ms, sec, sec, min, min)\r\n- shortened the column names to gain horizontal space and make room for future additions, while attempting to anticipate the width of possible values to display\r\n- the header and footer of the detailed peer connections list are not displayed if there are no connection\r\n- the local addresses report displays \"n/a\" if there are none\r\n\r\nAs before, this is encapsulated in one easy-to-maintain class in the CLI. Thanks to being in the CLI, you don't need to restart your node to test it; just building and running the command is enough. I did need to rebase on master to be able to use #19731 and this now targets master/v0.21. To use `-netinfo` on a node not running on current master, drop the last 4 commits. \r\n\r\nI hope this update is useful for people to observe/better understand their peer connections and for reviewing/testing P2P PRs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683338843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683469278",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683469278",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683469278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ2OTI3OA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-30T20:52:36Z",
    "updated_at": "2020-08-30T20:52:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack \r\n\r\nUsability nit: Wouldn't it be nice to have `last_trxn`, `last_blck` and `conn_time` in the same unit (minutes since last event) to make them easily comparable? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683469278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683595701",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683595701",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683595701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzU5NTcwMQ==",
    "user": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?u=ddcb9078962d0497d29302d869925400f604e6c1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T06:48:12Z",
    "updated_at": "2020-08-31T06:48:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks good on alpine 3.12!\r\n\r\n![Screen Shot 2020-08-31 at 2 43 50 AM](https://user-images.githubusercontent.com/152159/91690491-0b61b180-eb34-11ea-91a6-26f142b8303a.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683595701/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683604043",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683604043",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683604043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzYwNDA0Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T07:06:49Z",
    "updated_at": "2020-08-31T07:13:41Z",
    "author_association": "MEMBER",
    "body": "@practicalswift different frequency timescales really, at least for me, last txns are often only a few seconds ago, whereas last blocks are more on a minutes timescale.\r\n\r\nHere's a screenshot with last txn in min: many are under one minute ago, so lots of zero values:\r\n \r\n![Screenshot from 2020-08-31 08-47-55](https://user-images.githubusercontent.com/2415484/91692127-63121400-eb58-11ea-8bec-7f3f1f3edd06.jpg)\r\n\r\nand the same with last txn in sec, which seems to be the more informative timescale: \r\n\r\n![Screenshot from 2020-08-31 08-47-50](https://user-images.githubusercontent.com/2415484/91691459-2db8f680-eb57-11ea-95c8-5aa1d8966cca.jpg)\r\n\r\nWDYT? Don't hesitate to share a screenshot if it's different for you. I'd be especially interested to see one of a really busy node with many connections.\r\n\r\n@RandyMcMillan nice! :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683604043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683647312",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683647312",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683647312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzY0NzMxMg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T08:37:53Z",
    "updated_at": "2020-08-31T08:38:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack Yes, transactions are received more frequently, but my experience is that minute granularity would be enough: it doesn't really matter to me if the last transaction was received 29 or 59 seconds ago -- knowing that I received the last transaction it under a minute ago is fine.\r\n\r\nThe nice thing about using the same unit is that one can easily reason about it along the lines of \"oh, I've been connected to this node for 629 minutes but the last transaction was 500 minutes ago\" (instead of \"oh, I've been connected to this node for 629 minutes but the last transaction was 30000 seconds ago -- is that good or bad? I guess I'll have to bring up `bc` :))\r\n\r\nBut as said: this is a UI nit and should not block progress on this PR. FWIW I love this feature and use it literally daily :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683647312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683653098",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683653098",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683653098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzY1MzA5OA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T08:50:24Z",
    "updated_at": "2020-08-31T08:51:34Z",
    "author_association": "MEMBER",
    "body": "> The nice thing about using the same unit is that one can easily reason about it along the lines of \"oh, I've been connected to this node for 629 minutes but the last transaction was 500 minutes ago\" (instead of \"oh, I've been connected to this node for 629 minutes but the last transaction was 30000 seconds ago -- is that good or bad? I guess I'll have to bring up `bc` :))\r\n\r\nYou may be right. That would also allow removing a couple of horizontal spaces from that column and align the columns better. I'll give it a try. Edit: Yes, I'm hooked on using this, too :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683653098/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683653995",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683653995",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683653995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzY1Mzk5NQ==",
    "user": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?u=ddcb9078962d0497d29302d869925400f604e6c1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T08:52:19Z",
    "updated_at": "2020-08-31T08:52:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "It may be a good idea to check for extraneous arguments...\r\nAnd (quiet) no response if it isn't an expected value\r\n\r\nIs a security hole? IDK - overkill? not sure...\r\n\r\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo ~234\r\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo ~\u2022\r\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo ~%^&%\r\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo \u00a7\u00b6\u2022\u00aa\u00ba\r\n\r\n![Screen Shot 2020-08-31 at 4 41 55 AM](https://user-images.githubusercontent.com/152159/91701255-035e3d80-eb45-11ea-9d71-f0871f5b45de.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683653995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683661543",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683661543",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683661543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzY2MTU0Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T09:08:05Z",
    "updated_at": "2020-08-31T09:08:05Z",
    "author_association": "MEMBER",
    "body": "@RandyMcMillan AFAICT if the arg is unparseable, either an error is returned or the default of 0 is used.\r\n\r\n@practicalswift Done!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683661543/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683673407",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683673407",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683673407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzY3MzQwNw==",
    "user": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?u=ddcb9078962d0497d29302d869925400f604e6c1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T09:33:07Z",
    "updated_at": "2020-08-31T09:33:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another possible option would be in a -connect\r\nthe report could **************** obfuscate the ip addresses\r\nand/or toggle dns resolution \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683673407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683703541",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683703541",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683703541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzcwMzU0MQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T10:43:25Z",
    "updated_at": "2020-09-01T08:43:40Z",
    "author_association": "MEMBER",
    "body": "Re-pushed to fix the server version (200000 -> 209900) and re-verified that all commits build and run.\r\n\r\n> Another possible option would be in a -connect the report could **************** obfuscate the ip addresses and/or toggle dns resolution\r\n\r\nI'm not completely parsing, could you explain this more? (you can also run `./src/bitcoin-cli -netinfo 1` or `./src/bitcoin-cli -netinfo 3` to not see the addresses)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683703541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683748406",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683748406",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683748406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4Mzc0ODQwNg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T12:29:05Z",
    "updated_at": "2020-08-31T14:46:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some more UI nits. As always with nits feel free to ignore or tackle in a follow-up PR :)\r\n\r\nAfter having used this feature for a while I feel that the five modes of operation might be a case of giving the user too many knobs to tweak/configure.\r\n\r\nCurrently these are five modes of operation AFAICT:\r\n\r\n* `src/bitcoin-cli -netinfo 0`: Executive summary\r\n* `src/bitcoin-cli -netinfo 1`: Connection details (columns: standard columns), executive summary\r\n* `src/bitcoin-cli -netinfo 2`: Connection details (columns: standard columns plus `address`), executive summary\r\n* `src/bitcoin-cli -netinfo 3`: Connection details (columns: standard columns plus `version`), executive summary\r\n* `src/bitcoin-cli -netinfo 4`: Connection details (columns: standard columns plus `address` and `version`), executive summary\r\n\r\nSome potential ways to reduce the number of choices:\r\n\r\nIf we always printed the executive summary before the detailed view, then users could simply pipe to `less` or `head` if he/she is *only* interested in the executive summary. (Putting the executive summary before the detailed drill-down feels like a reasonable choice in itself: start with the summary, then the details.)\r\n\r\nThat would remove the need for `-netinfo 0`.\r\n\r\nIf we always printed also the address and version (like `-netinfo 4`), then in the very rare case that a user don't want to see all columns he/she could simply use `cut -b`, `awk` or similar Unix tools to tailor what columns he/she needs. That is probably easier than having to remember which of the arbitrarily numbered 1, 2, 3 or 4 that corresponds to ones preferred column setup :)\r\n\r\nWe would then simply need one mode of operation (`src/bitcoin-cli -netinfo`) instead of five modes :)\r\n\r\nFor me personally that would be preferable given my use cases, but perhaps I'm missing use cases that I'm not having where all five knobs would be good to have :)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683748406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683834962",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683834962",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683834962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzgzNDk2Mg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T15:01:32Z",
    "updated_at": "2020-08-31T15:01:32Z",
    "author_association": "MEMBER",
    "body": "Thanks for the feedback. I think it's worthwhile to keep this simple enough that users don't need to know bash/awk/piping. The default summary is printed last so that busy nodes having many peers will still see it without scrolling up. The use case for being able to leaving off the wide address and/or version columns is for running -netinfo in a less wide buffer window.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683834962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683838168",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683838168",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 683838168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzgzODE2OA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T15:06:58Z",
    "updated_at": "2020-08-31T15:06:58Z",
    "author_association": "MEMBER",
    "body": "Further updates, per `git diff 1492754 8587e78`\r\n\r\n- No longer display peer version when value from getpeerinfo is 0\r\n- No longer display peer minping or ping when value from getpeerinfo is null\r\n- If user enters an integer greater than 4, parse it as the default of 0 rather than 4\r\n- Show the chain name when testnet or regtest",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683838168/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684534830",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-684534830",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 684534830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDUzNDgzMA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T08:06:28Z",
    "updated_at": "2020-09-01T08:06:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK 8587e78221492ee26aafbbc332453f7639912a41 -- patch looks correct and is limited to `src/bitcoin-cli.cpp`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684534830/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685182561",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685182561",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 685182561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTE4MjU2MQ==",
    "user": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?u=ddcb9078962d0497d29302d869925400f604e6c1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T23:15:54Z",
    "updated_at": "2020-09-01T23:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Awesome stuff @jonatack - I was wondering if it would be possible to add some flags to make it automatically report after each new block (or some other arbitrary time interval) - the idea would be to generate a report that could be easily read into another service such as statsd.\r\n-netinfo -p (for polling) -I (interval in seconds) -bn=true  (triggered by a blocknotify event)\r\n\r\nThanks!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685182561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685449765",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685449765",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 685449765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTQ0OTc2NQ==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-02T08:42:38Z",
    "updated_at": "2020-09-02T08:42:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I was wondering if it would be possible to add some flags to make it automatically report after each new block (or some other arbitrary time interval)\r\n\r\nI've been using `watch bitcoin-cli -netinfo` for a dashboard-like view of the report updated every few seconds. I don't see the need for adding a refreshing, dashboard-like view (and the complexity that comes with it) here.  \r\n\r\n> the idea would be to generate a report that could be easily read into another service such as statsd.\r\n\r\nI wouldn't use the `bitcoin-cli -netinfo` interface for this. The interface is designed to be developer-readable and not machine-readable. Under the hood `-netinfo` just calls [`getnetworkinfo` ](https://bitcoincore.org/en/doc/0.20.0/rpc/network/getnetworkinfo/) and [`getpeerinfo`](https://bitcoincore.org/en/doc/0.20.0/rpc/network/getpeerinfo/). Calling these RPCs directly is probably more suited for your use-case. They are designed to be machine-readable and changes to these RPCs are documented in the release notes. Changes to `-netinfo` (which could break your statsd importing) will most likely not be documented.   \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685449765/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685490550",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685490550",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 685490550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTQ5MDU1MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-02T09:27:30Z",
    "updated_at": "2020-09-02T20:08:06Z",
    "author_association": "MEMBER",
    "body": "@0xB10C thanks, I couldn't have said it better. Edit: added your `watch` suggestion to the PR description.\r\n\r\nIf we want this in the next release (and feature freeze isn't far away now), it's probably best to stabilize this PR on what we have now. It has gone through several rounds of review with lots of good feedback and updates. I'd propose to try to have this merged in its current state and consider further changes (e.g. possible future `getpeerinfo` fields like `conn_type` or `bip152_hb_{to/from}`) after that.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685490550/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685782807",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685782807",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 685782807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTc4MjgwNw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-02T14:42:18Z",
    "updated_at": "2020-09-02T14:42:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK bf1f913c4405cba35c8f99ec07b407940eb955b6 -- patch looks correct and is limited to `src/bitcoin-cli.cpp`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685782807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687608453",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-687608453",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 687608453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzYwODQ1Mw==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-05T13:04:34Z",
    "updated_at": "2020-09-05T13:04:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK bf1f913c4405cba35c8f99ec07b407940eb955b6\r\n\r\nI tested with a testnet node having connections both via clearnet and tor. \r\n\r\nnit: I think `age` is a bit less ambiguous than `uptime`. `uptime` could be confused with the actual uptime of the remote node and not the time since the connection was established.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687608453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687665493",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-687665493",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 687665493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzY2NTQ5Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-05T21:29:40Z",
    "updated_at": "2020-09-05T21:29:40Z",
    "author_association": "MEMBER",
    "body": "@0xB10C thanks! `s/uptime/age/` sgtm for next update/follow-up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687665493/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688124239",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-688124239",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 688124239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODEyNDIzOQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-07T07:59:02Z",
    "updated_at": "2020-09-07T07:59:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this `src/bitcoin-cli.cpp`-only PR is ready to merge with four ACK:s (@vasild @0xB10C @practicalswift @n-thumann) and six Concept ACK:s (@jnewbery @hebasto @laanwj @ariard @theStack @RandyMcMillan).\r\n\r\nThanks @jonatack for coming up with this nifty utility. I'm using it daily!\r\n\r\nLooking forward to being able to use it directly from `master`! :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688124239/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688143175",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-688143175",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 688143175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODE0MzE3NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-07T08:12:22Z",
    "updated_at": "2020-09-07T08:12:22Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, haven't reviewed/tested at all, but this might come in handy when testing pull requests on the live network.\r\n\r\nbitcoin-cli isn't a stable interface, so we can change or remove this at will if issues come up in the future.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688143175/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688299788",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-688299788",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 688299788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODI5OTc4OA==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-07T12:41:46Z",
    "updated_at": "2020-09-07T15:11:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "fwiw: ce57bf6cc0cdaf8233fd8a20e0d1c5b69d17d2a3 (leaving out the last three commits) can be used with `bitcoind` versions before `v0.20.99`. \r\n\r\nedit:\r\narchiving this here: https://github.com/0xB10C/bitcoin/tree/jonatacks-netinfo-pre-v0.20.99",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688299788/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692531599",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-692531599",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 692531599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjUzMTU5OQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-15T07:44:16Z",
    "updated_at": "2021-03-19T22:09:38Z",
    "author_association": "MEMBER",
    "body": "### Next steps checklist\r\n\r\nEasy, do in next commit (done in #20115):\r\n- [x] release note\r\n- [x] s/uptime/age/ per @0xB10C suggestion\r\n- [x] add one additional space between the `net` and `mping` columns\r\n- [x] accomodate variable size of `addrv2` addresses\r\n- [x] handle occasional large mping/ping times like `1.17348e+06` per @practicalswift feedback\r\n- [x] add new signet chain\r\n- [x] display reachable networks\r\n\r\nMedium term:\r\n- [x] expose `CNetAddr::GetNetClass` or similar to `getpeerinfo` to know peers' net types and remove our helper functions that guess it (proposed in #20002)\r\n- [x] possibly integrate other `getpeerinfo` fields like `addnode` or your suggestions, or in the future, maybe `bip152_hb_{to,from}`, `conn_type`, etc.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692531599/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693681353",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-693681353",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 693681353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzY4MTM1Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T21:42:42Z",
    "updated_at": "2020-09-16T21:43:08Z",
    "author_association": "MEMBER",
    "body": "> @practicalswift A couple of times I saw ephemeral very long `minping` times\r\n\r\n@practicalswift I'm still seeing these (both mping and ping), so added it to the checklist above.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693681353/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694123068",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-694123068",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 694123068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDEyMzA2OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T09:47:07Z",
    "updated_at": "2020-09-17T09:47:07Z",
    "author_association": "MEMBER",
    "body": "I've been using this to test another PR and it's very helpful. Thanks @jonatack !\r\n\r\nOne thing I've noticed is that connections are inaccurately classified as blocks-only on first connection, I think because all connections start out as `fRelayTxes` set to false. It'd be better to explicitly use the connection type.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694123068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695771946",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-695771946",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
    "id": 695771946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTc3MTk0Ng==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-20T10:43:03Z",
    "updated_at": "2020-09-20T10:43:03Z",
    "author_association": "MEMBER",
    "body": "Here's a branch with some of the updates, including using the connection type:\r\n\r\nhttps://github.com/jonatack/bitcoin/commits/netinfo-2",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695771946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465344036",
    "pull_request_review_id": 461191719,
    "id": 465344036,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NDAzNg==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "just for me to understand: Why do you check if the address **contains** \".onion\" and not **ends with** it (as it's done in `src/netaddress.cpp`)?",
    "created_at": "2020-08-04T21:36:04Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465344036",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465344036"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465344036"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465344036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 329,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465368500",
    "pull_request_review_id": 461191719,
    "id": 465368500,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODUwMA==",
    "diff_hunk": "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};\n+static const std::string LOCALHOST{\"127.0.0.1\"};",
    "path": "src/netaddress.h",
    "position": null,
    "original_position": 5,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: This is only the IPv4 localhost. Maybe:\r\n\r\n```suggestion\r\nstatic const std::string LOCALHOST_IPV4{\"127.0.0.1\"};\r\n```\r\n\r\n",
    "created_at": "2020-08-04T22:36:30Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465368500",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465368500"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465368500"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465368500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465369430",
    "pull_request_review_id": 461191719,
    "id": 465369430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2OTQzMA==",
    "diff_hunk": "@@ -167,7 +168,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.clear();\n     CNetAddr localv4;\n     CNetAddr localv6;\n-    LookupHost(\"127.0.0.1\", localv4, false);\n+    LookupHost(LOCALHOST, localv4, false);\n     LookupHost(\"::1\", localv6, false);",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does it make sense to use a `LOCALHOST_IPV6` constant here as well? (even if you would otherwise not touch it)",
    "created_at": "2020-08-04T22:39:27Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465369430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465369430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465369430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465369430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 171,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465378252",
    "pull_request_review_id": 461191719,
    "id": 465378252,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3ODI1Mg==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Probably needs a unit behind the `min ping` and `ping` values.",
    "created_at": "2020-08-04T23:05:07Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465378252",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465378252"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465378252"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465378252/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 415,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465379408",
    "pull_request_review_id": 461191719,
    "id": 465379408,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTQwOA==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 128,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I found ping times displayed in seconds to be somewhat uninutive. I'd personally prefer milliseconds.\r\n\r\n(Had pings under one second to most of my peers. This might be different for other users.)",
    "created_at": "2020-08-04T23:08:48Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465379408",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465379408"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465379408"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465379408/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 403,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 429,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465394468",
    "pull_request_review_id": 461252635,
    "id": 465394468,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NDQ2OA==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Longer peer ids as found on long running nodes cause the table columns to become misaligned.  \r\n\r\n```\r\nPeer connections sorted by direction and min ping\r\n  id  <->  relay   conn  min ping    ping     asmap  address\r\n13417   in   full   ipv4  0.005165  0.005495          XXX.XXX.XX.XX:XXXXX\r\n13715  out  block   ipv4  0.011632  0.013025          XX.XXX.XX.XXX:XXXX\r\n   5  out   full   ipv4  0.014787  0.016915          XXX.XX.XX.XX:XXXX\r\n```\r\n\r\n\r\n",
    "created_at": "2020-08-04T23:57:56Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465394468",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465394468"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465394468"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465394468/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 415,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466315958",
    "pull_request_review_id": 462394409,
    "id": 466315958,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNTk1OA==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "no need for this inline comment",
    "created_at": "2020-08-06T10:24:31Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466315958",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466315958"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466315958"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466315958/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466317336",
    "pull_request_review_id": 462394409,
    "id": 466317336,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNzMzNg==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/torcontrol.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "remove inline comment",
    "created_at": "2020-08-06T10:27:10Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466317336",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466317336"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466317336"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466317336/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320226",
    "pull_request_review_id": 462399712,
    "id": 466320226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDIyNg==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization",
    "created_at": "2020-08-06T10:33:18Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466315958
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320295",
    "pull_request_review_id": 462399805,
    "id": 466320295,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDI5NQ==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/torcontrol.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization",
    "created_at": "2020-08-06T10:33:28Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320295",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320295"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320295"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466317336
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322601",
    "pull_request_review_id": 462401586,
    "id": 466322601,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjYwMQ==",
    "diff_hunk": "@@ -58,6 +59,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions(argsman);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional boolean argument can be passed for a detailed peers listing (default: false).\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "7e0727b73841d5f2abc96cd2fac50de74546a281\r\n\r\nFor Bitcoin Core it seems conventional to use `-netinfo=<...>`, no?",
    "created_at": "2020-08-06T10:38:17Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 61,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322757",
    "pull_request_review_id": 462402928,
    "id": 466322757,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjc1Nw==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jnewbery agreed, I added it for reviewers so they wouldn't wonder why this was added ;) will remove\r\n\r\n@hebasto if you are referring to *Every .cpp and .h file should #include every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers.*... yes, this is why I added the #include. Are you posting the link for a different reason?\r\n\r\n",
    "created_at": "2020-08-06T10:38:37Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322757",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322757"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322757"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466315958
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323888",
    "pull_request_review_id": 462401586,
    "id": 466323888,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzg4OA==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 66,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "7e0727b73841d5f2abc96cd2fac50de74546a281\r\n\r\nMind following [convention](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures) about `switch` statement on an enumeration?",
    "created_at": "2020-08-06T10:40:53Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466323888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466323888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 337,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 342,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466324599",
    "pull_request_review_id": 462405106,
    "id": 466324599,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNDU5OQ==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I added it for reviewers so they wouldn't wonder why this was added\r\n\r\nYou can leave github comments on your own PR for that. If we added a code comment \"// already included via .... \" to all includes that were already included indirectly, then most of the includes would have that comment.",
    "created_at": "2020-08-06T10:42:19Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466324599",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466324599"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466324599"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466324599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466315958
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466325434",
    "pull_request_review_id": 462401586,
    "id": 466325434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNTQzNA==",
    "diff_hunk": "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};",
    "path": "src/netaddress.h",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "56b156dc161b766e4aaae1ca07c719a3c599c4cb",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "56b156dc161b766e4aaae1ca07c719a3c599c4cb\r\n\r\n```suggestion\r\nstatic const std::string ONION_DOMAIN{\".onion\"};\r\n```",
    "created_at": "2020-08-06T10:43:55Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466325434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466325434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466325434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466325434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 19,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326730",
    "pull_request_review_id": 462407627,
    "id": 466326730,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNjczMA==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agreed",
    "created_at": "2020-08-06T10:46:31Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326730",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326730"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326730"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466315958
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326813",
    "pull_request_review_id": 462407730,
    "id": 466326813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNjgxMw==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Are you posting the link for a different reason?\r\n\r\nNo, you point the reason exactly :)",
    "created_at": "2020-08-06T10:46:39Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326813/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466315958
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466502794",
    "pull_request_review_id": 462638484,
    "id": 466502794,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMjc5NA==",
    "diff_hunk": "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <netaddress.h>",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems `netaddress.cpp` is part of `LIBBITCOIN_COMMON`, which is not linked into `bitcoin-cli`. So you're not currently allowed to use this here.\r\n\r\nAs you are only including this header to get a few constants, `ONION` and `LOCALHOST`, might make sense to factor them out to another header? or even just duplicate them?",
    "created_at": "2020-08-06T15:37:35Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466502794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466502794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466502794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466502794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466574579",
    "pull_request_review_id": 462733775,
    "id": 466574579,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3NDU3OQ==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };",
    "path": "src/bitcoin-cli.cpp",
    "position": 67,
    "original_position": 40,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think adding user agent in verbose mode is worthy. Beyond mode of display, how do you see the data split between this new RPC and `getpeerinfo` ? Static-set-at-once-at-connection-opening versus dynamic-messages-processed ?",
    "created_at": "2020-08-06T17:32:08Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466574579",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466574579"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466574579"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466574579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 343,
    "original_line": 343,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467568717",
    "pull_request_review_id": 463863953,
    "id": 467568717,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2ODcxNw==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };",
    "path": "src/bitcoin-cli.cpp",
    "position": 67,
    "original_position": 40,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "By user agent, do you mean getpeerinfo.subver? aka `cleanSubVer` in net.h",
    "created_at": "2020-08-09T10:58:24Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467568717",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467568717"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467568717"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467568717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 343,
    "original_line": 343,
    "side": "RIGHT",
    "in_reply_to_id": 466574579
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594332",
    "pull_request_review_id": 463881214,
    "id": 467594332,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDMzMg==",
    "diff_hunk": "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <netaddress.h>",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! I forgot to look at the makefile. Moved them to `httpserver.h`, which seems to be allowed, IIUC.",
    "created_at": "2020-08-09T15:03:15Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594332",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594332"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594332"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 466502794
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594357",
    "pull_request_review_id": 463881234,
    "id": 467594357,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDM1Nw==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "AFAICT the outbound onion addrs returned by getpeerinfo don't end with `.onion` but with `.onion:<port id>`",
    "created_at": "2020-08-09T15:03:33Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594357",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594357"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594357"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594357/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 329,
    "side": "RIGHT",
    "in_reply_to_id": 465344036
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594362",
    "pull_request_review_id": 463881241,
    "id": 467594362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDM2Mg==",
    "diff_hunk": "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};\n+static const std::string LOCALHOST{\"127.0.0.1\"};",
    "path": "src/netaddress.h",
    "position": null,
    "original_position": 5,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-08-09T15:03:39Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 465368500
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594375",
    "pull_request_review_id": 463881249,
    "id": 467594375,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDM3NQ==",
    "diff_hunk": "@@ -167,7 +168,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.clear();\n     CNetAddr localv4;\n     CNetAddr localv6;\n-    LookupHost(\"127.0.0.1\", localv4, false);\n+    LookupHost(LOCALHOST, localv4, false);\n     LookupHost(\"::1\", localv6, false);",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-08-09T15:03:45Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594375",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594375"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594375"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 171,
    "side": "RIGHT",
    "in_reply_to_id": 465369430
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594437",
    "pull_request_review_id": 463881292,
    "id": 467594437,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDQzNw==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done by adding units in a line at the bottom to save on horizontal space",
    "created_at": "2020-08-09T15:04:23Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594437",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594437"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594437"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 415,
    "side": "RIGHT",
    "in_reply_to_id": 465378252
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594460",
    "pull_request_review_id": 463881306,
    "id": 467594460,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDQ2MA==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 128,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done for min ping and ping",
    "created_at": "2020-08-09T15:04:34Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594460",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594460"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594460"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 403,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 429,
    "side": "RIGHT",
    "in_reply_to_id": 465379408
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594508",
    "pull_request_review_id": 463881337,
    "id": 467594508,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDUwOA==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done; the spacing is now dynamically based on the size of the largest peer id",
    "created_at": "2020-08-09T15:04:46Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594508",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594508"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594508"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 415,
    "side": "RIGHT",
    "in_reply_to_id": 465394468
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594611",
    "pull_request_review_id": 463881388,
    "id": 467594611,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDYxMQ==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "also moved the id column next to the version and address ones",
    "created_at": "2020-08-09T15:05:22Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594611",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594611"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594611"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 415,
    "side": "RIGHT",
    "in_reply_to_id": 465394468
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594662",
    "pull_request_review_id": 463881417,
    "id": 467594662,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDY2Mg==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/httpserver.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-08-09T15:05:42Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594662",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594662"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594662"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466315958
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594671",
    "pull_request_review_id": 463881428,
    "id": 467594671,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDY3MQ==",
    "diff_hunk": "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
    "path": "src/torcontrol.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-08-09T15:05:50Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 466317336
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594696",
    "pull_request_review_id": 463881441,
    "id": 467594696,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDY5Ng==",
    "diff_hunk": "@@ -58,6 +59,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions(argsman);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional boolean argument can be passed for a detailed peers listing (default: false).\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unless I'm confused, I think `-option=<...>` would be for config args, not CLI ones. See `-generate`.",
    "created_at": "2020-08-09T15:06:02Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594696",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594696"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594696"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 61,
    "side": "RIGHT",
    "in_reply_to_id": 466322601
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594703",
    "pull_request_review_id": 463881454,
    "id": 467594703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDcwMw==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 66,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! -- done",
    "created_at": "2020-08-09T15:06:13Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 337,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 342,
    "side": "RIGHT",
    "in_reply_to_id": 466323888
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594708",
    "pull_request_review_id": 463881457,
    "id": 467594708,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDcwOA==",
    "diff_hunk": "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};",
    "path": "src/netaddress.h",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "56b156dc161b766e4aaae1ca07c719a3c599c4cb",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-08-09T15:06:19Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594708",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594708"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594708"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 19,
    "side": "RIGHT",
    "in_reply_to_id": 466325434
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594740",
    "pull_request_review_id": 463881484,
    "id": 467594740,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDc0MA==",
    "diff_hunk": "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };",
    "path": "src/bitcoin-cli.cpp",
    "position": 67,
    "original_position": 40,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added version+subver together in a column",
    "created_at": "2020-08-09T15:06:39Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594740",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594740"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594740"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 343,
    "original_line": 343,
    "side": "RIGHT",
    "in_reply_to_id": 466574579
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467595062",
    "pull_request_review_id": 463881730,
    "id": 467595062,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NTA2Mg==",
    "diff_hunk": "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <netaddress.h>",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "7e0727b73841d5f2abc96cd2fac50de74546a281",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, *A new circular dependency in the form of \"httpserver -> netbase -> netaddress -> httpserver appears to have been introduced.* Will create a header, I guess.\r\n\r\nEdit: placed them in `util/url.h`\r\n\r\nEdit 2: removed the constants.",
    "created_at": "2020-08-09T15:10:08Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467595062",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467595062"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467595062"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467595062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 466502794
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039429",
    "pull_request_review_id": 464400314,
    "id": 468039429,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzOTQyOQ==",
    "diff_hunk": "@@ -102,7 +103,7 @@ bool CNetAddr::SetInternal(const std::string &name)\n  */\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n-    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == ONION_DOMAIN) {",
    "path": "src/netaddress.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "5cdce7a07547f90ae5ea81c7ea8cc9314717d5b2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`ONION_EXTENSION` or `ONION_SUFFIX` would be a more accurate name here imo",
    "created_at": "2020-08-10T16:45:11Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468039429",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039429"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468039429"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039429/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468042236",
    "pull_request_review_id": 464400314,
    "id": 468042236,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MjIzNg==",
    "diff_hunk": "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think a comment should recite the implementation details of the code. For this level of detail, ppl can read the code. Same with the two functions below.",
    "created_at": "2020-08-10T16:50:07Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468042236",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468042236"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468042236"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468042236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 325,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468068980",
    "pull_request_review_id": 464400314,
    "id": 468068980,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2ODk4MA==",
    "diff_hunk": "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION_DOMAIN) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST_IPV4) == 0 && addr_local.find(ONION_DOMAIN) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 74,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think agreement is now to not allow \"1\" instead of \"true\" if it can be avoided. Came up here: https://github.com/bitcoin/bitcoin/pull/19544#discussion_r458695235",
    "created_at": "2020-08-10T17:38:17Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468068980",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468068980"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468068980"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468068980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 357,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468075252",
    "pull_request_review_id": 464446233,
    "id": 468075252,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3NTI1Mg==",
    "diff_hunk": "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I would expect something like this instead:\r\n```suggestion\r\n     * @returns true if addr is identified as IPv6. */\r\n```",
    "created_at": "2020-08-10T17:49:11Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468075252",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468075252"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468075252"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468075252/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 325,
    "side": "RIGHT",
    "in_reply_to_id": 468042236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468834976",
    "pull_request_review_id": 465390818,
    "id": 468834976,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNDk3Ng==",
    "diff_hunk": "@@ -28,7 +29,7 @@\n #include <event2/thread.h>\n \n /** Default control port */\n-const std::string DEFAULT_TOR_CONTROL = \"127.0.0.1:9051\";\n+const std::string DEFAULT_TOR_CONTROL = LOCALHOST_IPV4 + \":9051\";",
    "path": "src/torcontrol.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure about initialisation order here.",
    "created_at": "2020-08-11T20:08:30Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468834976",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468834976"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468834976"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468834976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468835327",
    "pull_request_review_id": 465390818,
    "id": 468835327,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNTMyNw==",
    "diff_hunk": "@@ -102,7 +103,7 @@ bool CNetAddr::SetInternal(const std::string &name)\n  */\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n-    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == ONION_DOMAIN) {",
    "path": "src/netaddress.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "5cdce7a07547f90ae5ea81c7ea8cc9314717d5b2",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`ONION_TLD`?",
    "created_at": "2020-08-11T20:09:14Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468835327",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468835327"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468835327"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468835327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 468039429
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470081234",
    "pull_request_review_id": 466931399,
    "id": 470081234,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MTIzNA==",
    "diff_hunk": "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION_DOMAIN) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST_IPV4) == 0 && addr_local.find(ONION_DOMAIN) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 74,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Interesting, thanks. That may possibly apply more to the RPC API than to the CLI, but ok, done.",
    "created_at": "2020-08-13T16:36:55Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470081234",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470081234"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470081234"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470081234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 357,
    "side": "RIGHT",
    "in_reply_to_id": 468068980
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084772",
    "pull_request_review_id": 466935954,
    "id": 470084772,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NDc3Mg==",
    "diff_hunk": "@@ -102,7 +103,7 @@ bool CNetAddr::SetInternal(const std::string &name)\n  */\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n-    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == ONION_DOMAIN) {",
    "path": "src/netaddress.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "5cdce7a07547f90ae5ea81c7ea8cc9314717d5b2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Dropped the commit adding the constants.",
    "created_at": "2020-08-13T16:42:52Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084772",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084772"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084772"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 468039429
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084976",
    "pull_request_review_id": 466936232,
    "id": 470084976,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NDk3Ng==",
    "diff_hunk": "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed the Doxygen comments.",
    "created_at": "2020-08-13T16:43:13Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084976",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084976"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084976"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 325,
    "side": "RIGHT",
    "in_reply_to_id": 468042236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470085563",
    "pull_request_review_id": 466937028,
    "id": 470085563,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NTU2Mw==",
    "diff_hunk": "@@ -28,7 +29,7 @@\n #include <event2/thread.h>\n \n /** Default control port */\n-const std::string DEFAULT_TOR_CONTROL = \"127.0.0.1:9051\";\n+const std::string DEFAULT_TOR_CONTROL = LOCALHOST_IPV4 + \":9051\";",
    "path": "src/torcontrol.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Not sure about initialisation order here.\r\n\r\nWas working fine for me the past weeks, but point taken. Dropped the commit adding the constants to simplify things.",
    "created_at": "2020-08-13T16:44:16Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470085563",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470085563"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470085563"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470085563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT",
    "in_reply_to_id": 468834976
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470583883",
    "pull_request_review_id": 467522715,
    "id": 470583883,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4Mzg4Mw==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return addr.front() == '[';",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "bf1c49a2a06d0ff94123ca2131aea0517423c0dd",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is undefined behavior if `addr` is empty, you might want to guard against that.",
    "created_at": "2020-08-14T12:06:08Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470583883",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470583883"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470583883"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470583883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 302,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470586065",
    "pull_request_review_id": 467525408,
    "id": 470586065,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NjA2NQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return addr.front() == '[';",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "bf1c49a2a06d0ff94123ca2131aea0517423c0dd",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> This is undefined behavior if `addr` is empty, you might want to guard against that.\r\n\r\nThanks! will fix",
    "created_at": "2020-08-14T12:11:22Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470586065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470586065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470586065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470586065/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 302,
    "side": "RIGHT",
    "in_reply_to_id": 470583883
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470655849",
    "pull_request_review_id": 467617377,
    "id": 470655849,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1NTg0OQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This uses a different boolean argument parsing than the rest of the software, which doesn't interpret \"1\" as true, for example. And it doesn't raise a parse error for invalid values, but simply ignores them (and assumes them to be false). \r\nI understand that it's not possible to use `GetBoolArg` here because the arguments are passed in, but it'd be nice to be consistent.\r\n\r\nAlternatively we could make this optional argument \"verbose\"/\"v\" instead of \"true\", to not confuse it with boolean parsing at all. I don't know.",
    "created_at": "2020-08-14T14:24:59Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470655849",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470655849"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470655849"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470655849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 355,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470706424",
    "pull_request_review_id": 467682585,
    "id": 470706424,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNjQyNA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, new context. As this is very simple, doesn't wrap any RPC arguments and will only be used by humans, I began with the simplest (and probably least annoying option to users) of not raising parsing errors.",
    "created_at": "2020-08-14T15:46:01Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470706424",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470706424"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470706424"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470706424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 355,
    "side": "RIGHT",
    "in_reply_to_id": 470655849
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471455320",
    "pull_request_review_id": 468431850,
    "id": 471455320,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1NTMyMA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IMO `-netinfo verbose` is clearer than `-netinfo true`. My wish list:\r\n\r\n* change it to `-netinfo verbose`\r\n* make a reusable function that takes a string and returns `Optional<bool>`. It can support `true/false`, `t/f`, `yes/no`, `y/n`, `1/0`.\r\n* leave it as is (silently interpreting e.g. `truw` as `false` :/)",
    "created_at": "2020-08-17T12:49:39Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471455320",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471455320"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471455320"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471455320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 355,
    "side": "RIGHT",
    "in_reply_to_id": 470655849
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471475084",
    "pull_request_review_id": 468431850,
    "id": 471475084,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3NTA4NA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is `net` more suitable here than `conn`? The values printed are e.g. `ipv4`, `ipv6`.\r\n\r\nWe have `minping` and `ping`. It is unclear whether `ping` is the last ping or average ping.\r\nThe output from `ping(1)` contains something like\r\n```\r\nmin/avg/max/mdev = 367.149/488.941/628.650/107.507 ms\r\n```",
    "created_at": "2020-08-17T13:23:30Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471475084",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471475084"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471475084"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471475084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 430,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471478691",
    "pull_request_review_id": 468431850,
    "id": 471478691,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3ODY5MQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The TOR proxy could be running on another machine, not necessary on `127.0.0.1`. Isn't `addr_local.find(\".onion\")` sufficient?",
    "created_at": "2020-08-17T13:29:07Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471478691",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471478691"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471478691"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471478691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 306,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471479177",
    "pull_request_review_id": 468431850,
    "id": 471479177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3OTE3Nw==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This and the one above would match e.g. \"www.onionfoo.com\". Or is `addr` always numeric for IP networks?",
    "created_at": "2020-08-17T13:29:49Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471479177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471479177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471479177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471479177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471484236",
    "pull_request_review_id": 468431850,
    "id": 471484236,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NDIzNg==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 103,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: here and in other places: consider `++foo` instead of `foo += 1`.",
    "created_at": "2020-08-17T13:38:17Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471484236",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471484236"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471484236"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471484236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 386,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471552680",
    "pull_request_review_id": 468431850,
    "id": 471552680,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MjY4MA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";\n+        const UniValue& local_addrs{networkinfo[\"localaddresses\"]};\n+        for (const UniValue& addr : local_addrs.getValues()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 183,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: ditch unnecessary local variable (but maybe keep it if you decide to check whether `local_addrs` is empty)\r\n```suggestion\r\n        for (const UniValue& addr : networkinfo[\"localaddresses\"].getValues()) {\r\n```",
    "created_at": "2020-08-17T15:20:25Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471552680",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471552680"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471552680"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471552680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 465,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 466,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471554091",
    "pull_request_review_id": 468431850,
    "id": 471554091,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NDA5MQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
    "path": "src/bitcoin-cli.cpp",
    "position": 213,
    "original_position": 181,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Given that the `Local addresses` header may be followed by nothing, what about skipping it if there are no local addresses or printing something like `none` or `n/a` below it in that case?",
    "created_at": "2020-08-17T15:22:24Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471554091",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471554091"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471554091"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471554091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 489,
    "original_line": 489,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471557671",
    "pull_request_review_id": 468431850,
    "id": 471557671,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NzY3MQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This and `m_peer` are types, not member variables. I think they should be named `ConnType` and `Peer`.",
    "created_at": "2020-08-17T15:27:43Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471557671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471557671/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 314,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471574239",
    "pull_request_review_id": 468431850,
    "id": 471574239,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NDIzOQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";",
    "path": "src/bitcoin-cli.cpp",
    "position": 177,
    "original_position": 148,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does it make sense to position this optional column as the last one? The \"target audience\" for this is humans, but maybe somebody will write a script that parses it and it will get bricked occasionally by the presence or absence of the `asmap` column if it is in the middle.\r\n\r\nAlso for humans - if somebody gets used to search for certain information at a certain position on the screen, e.g. `id`, it would be annoying if it gets shifted to the right by the occasional presence of an extra column.",
    "created_at": "2020-08-17T15:52:00Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471574239",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471574239"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471574239"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471574239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 453,
    "original_line": 453,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471575005",
    "pull_request_review_id": 468431850,
    "id": 471575005,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NTAwNQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`std::string::length()` returns `size_t` and if our variables `max_peer_id_length` and `max_version_length` are defined as `size_t`, then there would not be a need for the typecast to `int`.",
    "created_at": "2020-08-17T15:53:10Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471575005",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471575005"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471575005"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471575005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 419,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 420,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471581038",
    "pull_request_review_id": 468596034,
    "id": 471581038,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MTAzOA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`ping` is `pingtime` in `getpeerinfo`: this list is essentially getpeerinfo for humans with sometimes-shorter field names to save horizontal space.",
    "created_at": "2020-08-17T16:02:35Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471581038",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471581038"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471581038"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471581038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 430,
    "side": "RIGHT",
    "in_reply_to_id": 471475084
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471585004",
    "pull_request_review_id": 468601032,
    "id": 471585004,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NTAwNA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";",
    "path": "src/bitcoin-cli.cpp",
    "position": 177,
    "original_position": 148,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I gradually adjusted this over the past month of using it continually. Generally I don't think people change frequently between using asmap or not (based on my recent twitter usage polls, I suspect very few are using asmap yet). I initially wrote this using only asmap, and only realized that it would be annoying when @0xB10C mentioned it was just empty without it. When I did change to test it, it was better to not display it than have an empty column and wasted horizontal space. Thus, the current proposal.",
    "created_at": "2020-08-17T16:08:53Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471585004",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471585004"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471585004"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471585004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 453,
    "original_line": 453,
    "side": "RIGHT",
    "in_reply_to_id": 471574239
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471589614",
    "pull_request_review_id": 468607087,
    "id": 471589614,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4OTYxNA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Given that this dashboard shows all of the peer addresses, AFAICT I've found this to be reliable as-is over the past month WRT onions.\r\n\r\nEdit: have still not seen an issue with this.",
    "created_at": "2020-08-17T16:16:49Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471589614",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471589614"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471589614"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471589614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 306,
    "side": "RIGHT",
    "in_reply_to_id": 471478691
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471591519",
    "pull_request_review_id": 468609711,
    "id": 471591519,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MTUxOQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I hesitated on this. Will update in a follow-up.",
    "created_at": "2020-08-17T16:20:10Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471591519",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471591519"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471591519"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471591519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 314,
    "side": "RIGHT",
    "in_reply_to_id": 471557671
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471592642",
    "pull_request_review_id": 468611259,
    "id": 471592642,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MjY0Mg==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
    "path": "src/bitcoin-cli.cpp",
    "position": 213,
    "original_position": 181,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Skipping it might violate the principle of least surprise but no strong opinion on what would be best or if any change is needed.",
    "created_at": "2020-08-17T16:22:04Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471592642",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471592642"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471592642"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471592642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 489,
    "original_line": 489,
    "side": "RIGHT",
    "in_reply_to_id": 471554091
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471593698",
    "pull_request_review_id": 468612609,
    "id": 471593698,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MzY5OA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I haven't seen this to be an issue yet. Happy to look at a proposal.",
    "created_at": "2020-08-17T16:23:54Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471593698",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471593698"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471593698"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471593698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT",
    "in_reply_to_id": 471479177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471595284",
    "pull_request_review_id": 468614584,
    "id": 471595284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NTI4NA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm open to `net` for a follow-up if people prefer that. I agree it may be better.",
    "created_at": "2020-08-17T16:26:29Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471595284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471595284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471595284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471595284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 430,
    "side": "RIGHT",
    "in_reply_to_id": 471475084
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471596278",
    "pull_request_review_id": 468615878,
    "id": 471596278,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NjI3OA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good idea; noting this style nit for the follow-up.",
    "created_at": "2020-08-17T16:28:20Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471596278",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471596278"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471596278"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471596278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 419,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 420,
    "side": "RIGHT",
    "in_reply_to_id": 471575005
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471987413",
    "pull_request_review_id": 469079774,
    "id": 471987413,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk4NzQxMw==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see this for an IPv4 connection to www.onionfoo.com:8345, mistakenly labelled as \"conn=onion\" instead of \"conn=ipv4\".\r\n\r\n```\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id version               address\r\nout  full onion       4      4        0        0      0  0 70015/Satoshi:0.20.0/ www.onionfoo.com:8345\r\n```\r\n\r\n```suggestion\r\n        const char* suffix = \".onion\";\r\n        const size_t suffix_len = 6;\r\n        return addr.length() > suffix_len &&\r\n               addr.compare(addr.length() - suffix_len, std::string::npos, suffix) == 0;\r\n```",
    "created_at": "2020-08-18T07:55:45Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471987413",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471987413"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471987413"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471987413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT",
    "in_reply_to_id": 471479177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471990490",
    "pull_request_review_id": 469083423,
    "id": 471990490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk5MDQ5MA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
    "path": "src/bitcoin-cli.cpp",
    "position": 213,
    "original_position": 181,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see this:\r\n```\r\n$ ./src/bitcoin-cli -netinfo \r\nBitcoin Core v0.20.99.0-f63ceccca - 70015/Satoshi:0.20.0/\r\n\r\nInbound and outbound peer connections\r\nin:  ...\r\nout: ...\r\nall: ...\r\n\r\nLocal addresses\r\n$ \r\n```\r\n\r\nI guess it happens when the node does not have an incoming connections and `--externalip=` is not provided to `bitcoind`.",
    "created_at": "2020-08-18T08:00:42Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471990490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471990490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471990490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471990490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 489,
    "original_line": 489,
    "side": "RIGHT",
    "in_reply_to_id": 471554091
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473143045",
    "pull_request_review_id": 470609207,
    "id": 473143045,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0MzA0NQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
    "path": "src/bitcoin-cli.cpp",
    "position": 213,
    "original_position": 181,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here, behind a firewall with no port forwarding, my local addresses is empty. Not sure the best way to handle it visually. Perhaps even just an empty newline.",
    "created_at": "2020-08-19T16:06:28Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r473143045",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473143045"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r473143045"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473143045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 489,
    "original_line": 489,
    "side": "RIGHT",
    "in_reply_to_id": 471554091
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253487",
    "pull_request_review_id": 473034565,
    "id": 475253487,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzQ4Nw==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";",
    "path": "src/bitcoin-cli.cpp",
    "position": 177,
    "original_position": 148,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> maybe somebody will write a script that parses it and it will get bricked occasionally by the presence or absence of the `asmap` column if it is in the middle.\r\n\r\nScripts should consume the RPC API, not the CLI.",
    "created_at": "2020-08-23T19:02:31Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253487",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253487"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253487"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 453,
    "original_line": 453,
    "side": "RIGHT",
    "in_reply_to_id": 471574239
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254064",
    "pull_request_review_id": 473034916,
    "id": 475254064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDA2NA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 103,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Noted for a follow-up.",
    "created_at": "2020-08-23T19:09:28Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 386,
    "side": "RIGHT",
    "in_reply_to_id": 471484236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254399",
    "pull_request_review_id": 473035140,
    "id": 475254399,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDM5OQ==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In more than a month of running this and also the original python script, I still have not seen a case like this and have not found the node in question on the network. Seems like a pretty pathological edge case but happy to look at tightening the detection in the follow-up. ",
    "created_at": "2020-08-23T19:13:17Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254399",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254399"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254399"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT",
    "in_reply_to_id": 471479177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254672",
    "pull_request_review_id": 473035317,
    "id": 475254672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDY3Mg==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm considering proposing replacing the boolean arg with an integer one in the follow-up, to allow choosing from a number of degrees of detail rather than just two.",
    "created_at": "2020-08-23T19:16:17Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 355,
    "side": "RIGHT",
    "in_reply_to_id": 470655849
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479421817",
    "pull_request_review_id": 477881062,
    "id": 479421817,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyMTgxNw==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I have still not yet encountered the described edge case above, but it should be noted that the proposal to replace `find` with \"string ends with\" causes many outbound onions to not be detected when they end with `.onion:<port>`, e.g. `.onion:8333` -- nearly half of the onions I'm connected to as I write this.",
    "created_at": "2020-08-28T16:49:16Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r479421817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479421817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r479421817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479421817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT",
    "in_reply_to_id": 471479177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479513414",
    "pull_request_review_id": 477998928,
    "id": 479513414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMzQxNA==",
    "diff_hunk": "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "f63ceccca31aa624819b429d015f8f1bf2daf49f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This seems to cover everything:\r\n```cpp\r\nbool IsOutboundOnion(const std::string& addr, int mapped_as) const\r\n{\r\n    const size_t onion_len{ONION.length()};\r\n    const size_t pos{addr.rfind(ONION)};\r\n    return mapped_as == 0 && addr.size() > onion_len &&\r\n        (pos == addr.size() - onion_len || pos == addr.find_last_of(\":\") - onion_len);\r\n}\r\n```\r\n",
    "created_at": "2020-08-28T20:11:38Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r479513414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479513414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r479513414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479513414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 310,
    "side": "RIGHT",
    "in_reply_to_id": 471479177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481944998",
    "pull_request_review_id": 480659710,
    "id": 481944998,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0NDk5OA==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Wouldn't it be surprising to have some details disappear when the verbosity level is increased?\r\n\r\nThe description says `an increasingly detailed peers listing` but `IsAddressSelected()` will be `true` for details=2 and `false` for details=3.\r\n\r\n",
    "created_at": "2020-09-02T09:49:55Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r481944998",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481944998"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r481944998"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481944998/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482072751",
    "pull_request_review_id": 480824526,
    "id": 482072751,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3Mjc1MQ==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Going from details level 2 to 3, it is indeed increasingly detailed as the address is replaced by 2 fields combined in one, version and sub-version. That said, I don't mind improving it if there is a good suggestion.",
    "created_at": "2020-09-02T13:34:37Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482072751",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482072751"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482072751"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482072751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482075976",
    "pull_request_review_id": 480828743,
    "id": 482075976,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NTk3Ng==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(As there may be people who prefer to see one or the other of these two wider fields, but not necessarily both for reasons of window size or interest, and since it isn't complicated to do--and is done--it's good to allow people the choice.)",
    "created_at": "2020-09-02T13:39:08Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482075976",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482075976"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482075976"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482075976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482086723",
    "pull_request_review_id": 480842843,
    "id": 482086723,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NjcyMw==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "FWIW I also found it confusing that increasing what I thought was a numeric verbosity level removed columns :)\r\n\r\nI think the expected command-line UI for verbosity switches are one of these two:\r\n* Increase verbosity like for `curl`: `curl -v`, `curl -vv`, `curl -vvv`, etc.\r\n* Specify exactly what you want like for `ps`: `ps -o comm,label`",
    "created_at": "2020-09-02T13:53:34Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482086723",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482086723"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482086723"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482086723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482088379",
    "pull_request_review_id": 480844965,
    "id": 482088379,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4ODM3OQ==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Concrete suggestion for the help?",
    "created_at": "2020-09-02T13:55:40Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482088379",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482088379"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482088379"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482088379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482094263",
    "pull_request_review_id": 480853049,
    "id": 482094263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5NDI2Mw==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How about \"An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0)\"",
    "created_at": "2020-09-02T14:03:25Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482094263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482094263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482094263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482094263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482100284",
    "pull_request_review_id": 480860899,
    "id": 482100284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMDI4NA==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, that is probably good enough for now. Making the verbosity levels more in tune with how other command-line tools work can be done in a follow-up PR: no need to do it here :)",
    "created_at": "2020-09-02T14:11:24Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482100284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482100284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482100284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482100284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482107793",
    "pull_request_review_id": 480870750,
    "id": 482107793,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzc5Mw==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Passing args like for `curl` or `ps` would be indeed cool, but yes, overkill for now and maybe hurt this being merged by making it too large.",
    "created_at": "2020-09-02T14:21:29Z",
    "updated_at": "2020-09-02T14:25:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482107793",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482107793"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482107793"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482107793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482110882",
    "pull_request_review_id": 480875014,
    "id": 482110882,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMDg4Mg==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }",
    "path": "src/bitcoin-cli.cpp",
    "position": 43,
    "original_position": 43,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "8587e78221492ee26aafbbc332453f7639912a41",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done. Thanks for the feedback. The help seems better now.",
    "created_at": "2020-09-02T14:25:24Z",
    "updated_at": "2020-09-02T14:27:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482110882",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482110882"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482110882"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482110882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 319,
    "original_line": 319,
    "side": "RIGHT",
    "in_reply_to_id": 481944998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483576375",
    "pull_request_review_id": 482599146,
    "id": 483576375,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NjM3NQ==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n+    bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n+    enum struct NetType {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+    struct Peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_blck;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        int64_t last_trxn;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        NetType net_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const Peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+    std::string NetTypeEnumToString(NetType t)\n+    {\n+        switch (t) {\n+        case NetType::ipv4: return \"ipv4\";\n+        case NetType::ipv6: return \"ipv6\";\n+        case NetType::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+    std::string ChainToString() const\n+    {\n+        if (gArgs.GetChainName() == CBaseChainParams::TESTNET) return \" testnet\";\n+        if (gArgs.GetChainName() == CBaseChainParams::REGTEST) return \" regtest\";\n+        return \"\";\n+    }\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            uint8_t n{0};\n+            if (ParseUInt8(args.at(0), &n)) {\n+                m_details_level = n;\n+            }\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        if (networkinfo[\"version\"].get_int() < 209900) {\n+            throw std::runtime_error(\"-netinfo requires bitcoind server to be running v0.21.0 and up\");\n+        }\n+\n+        // Count peer connection totals, and if DetailsRequested(), store peer data in a vector of structs.\n+        const int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        size_t max_peer_id_length{2}, max_addr_length{0};\n+        bool is_asmap_on{false};\n+        std::vector<Peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};",
    "path": "src/bitcoin-cli.cpp",
    "position": 122,
    "original_position": 122,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "user": {
      "login": "n-thumann",
      "id": 46975855,
      "node_id": "MDQ6VXNlcjQ2OTc1ODU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46975855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n-thumann",
      "html_url": "https://github.com/n-thumann",
      "followers_url": "https://api.github.com/users/n-thumann/followers",
      "following_url": "https://api.github.com/users/n-thumann/following{/other_user}",
      "gists_url": "https://api.github.com/users/n-thumann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n-thumann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n-thumann/subscriptions",
      "organizations_url": "https://api.github.com/users/n-thumann/orgs",
      "repos_url": "https://api.github.com/users/n-thumann/repos",
      "events_url": "https://api.github.com/users/n-thumann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n-thumann/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`peer[\"addr\"]` can also contain hostnames (`bitcoin-cli addnode \"foo.bar\" onetry`) or IPv6 addresses without square brackets (`bitcoin-cli addnode \"2001:db8::1337\" onetry`). In theses cases the `IsAddrIPv6` will not recognize them properly and they will be always marked as IPv4 \ud83e\udd14.",
    "created_at": "2020-09-04T12:11:42Z",
    "updated_at": "2020-09-04T13:03:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483576375",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483576375"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483576375"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483576375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 398,
    "original_line": 398,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483577433",
    "pull_request_review_id": 482600588,
    "id": 483577433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NzQzMw==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n+    bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n+    enum struct NetType {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+    struct Peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_blck;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        int64_t last_trxn;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        NetType net_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const Peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+    std::string NetTypeEnumToString(NetType t)\n+    {\n+        switch (t) {\n+        case NetType::ipv4: return \"ipv4\";\n+        case NetType::ipv6: return \"ipv6\";\n+        case NetType::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+    std::string ChainToString() const\n+    {\n+        if (gArgs.GetChainName() == CBaseChainParams::TESTNET) return \" testnet\";\n+        if (gArgs.GetChainName() == CBaseChainParams::REGTEST) return \" regtest\";\n+        return \"\";\n+    }\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            uint8_t n{0};\n+            if (ParseUInt8(args.at(0), &n)) {\n+                m_details_level = n;\n+            }\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        if (networkinfo[\"version\"].get_int() < 209900) {\n+            throw std::runtime_error(\"-netinfo requires bitcoind server to be running v0.21.0 and up\");\n+        }\n+\n+        // Count peer connection totals, and if DetailsRequested(), store peer data in a vector of structs.\n+        const int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        size_t max_peer_id_length{2}, max_addr_length{0};\n+        bool is_asmap_on{false};\n+        std::vector<Peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};",
    "path": "src/bitcoin-cli.cpp",
    "position": 122,
    "original_position": 122,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "user": {
      "login": "n-thumann",
      "id": 46975855,
      "node_id": "MDQ6VXNlcjQ2OTc1ODU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46975855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n-thumann",
      "html_url": "https://github.com/n-thumann",
      "followers_url": "https://api.github.com/users/n-thumann/followers",
      "following_url": "https://api.github.com/users/n-thumann/following{/other_user}",
      "gists_url": "https://api.github.com/users/n-thumann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n-thumann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n-thumann/subscriptions",
      "organizations_url": "https://api.github.com/users/n-thumann/orgs",
      "repos_url": "https://api.github.com/users/n-thumann/repos",
      "events_url": "https://api.github.com/users/n-thumann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n-thumann/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe, if there are no square brackets, ask `inet_pton` if it\u00b4s a valid IPv6 address? But what if there\u00b4s a hostname?",
    "created_at": "2020-09-04T12:13:58Z",
    "updated_at": "2020-09-04T12:13:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483577433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483577433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483577433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483577433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 398,
    "original_line": 398,
    "side": "RIGHT",
    "in_reply_to_id": 483576375
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483652887",
    "pull_request_review_id": 482701784,
    "id": 483652887,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1Mjg4Nw==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n+    bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n+    enum struct NetType {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+    struct Peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_blck;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        int64_t last_trxn;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        NetType net_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const Peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+    std::string NetTypeEnumToString(NetType t)\n+    {\n+        switch (t) {\n+        case NetType::ipv4: return \"ipv4\";\n+        case NetType::ipv6: return \"ipv6\";\n+        case NetType::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+    std::string ChainToString() const\n+    {\n+        if (gArgs.GetChainName() == CBaseChainParams::TESTNET) return \" testnet\";\n+        if (gArgs.GetChainName() == CBaseChainParams::REGTEST) return \" regtest\";\n+        return \"\";\n+    }\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            uint8_t n{0};\n+            if (ParseUInt8(args.at(0), &n)) {\n+                m_details_level = n;\n+            }\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        if (networkinfo[\"version\"].get_int() < 209900) {\n+            throw std::runtime_error(\"-netinfo requires bitcoind server to be running v0.21.0 and up\");\n+        }\n+\n+        // Count peer connection totals, and if DetailsRequested(), store peer data in a vector of structs.\n+        const int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        size_t max_peer_id_length{2}, max_addr_length{0};\n+        bool is_asmap_on{false};\n+        std::vector<Peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};",
    "path": "src/bitcoin-cli.cpp",
    "position": 122,
    "original_position": 122,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "user": {
      "login": "n-thumann",
      "id": 46975855,
      "node_id": "MDQ6VXNlcjQ2OTc1ODU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46975855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n-thumann",
      "html_url": "https://github.com/n-thumann",
      "followers_url": "https://api.github.com/users/n-thumann/followers",
      "following_url": "https://api.github.com/users/n-thumann/following{/other_user}",
      "gists_url": "https://api.github.com/users/n-thumann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n-thumann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n-thumann/subscriptions",
      "organizations_url": "https://api.github.com/users/n-thumann/orgs",
      "repos_url": "https://api.github.com/users/n-thumann/repos",
      "events_url": "https://api.github.com/users/n-thumann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n-thumann/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Dug a little bit deeper: Adding a new field to `getpeerinfo` seems to be a better solution IMO. The actual remote address (that is IPv6 with square brackets or resolved hostname) is already stored [here](https://github.com/bitcoin/bitcoin/blob/master/src/net.h#L687), but only `addrName` is [passed back](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/net.cpp#L161) as `addr` instead.\r\nI would suggest to return both `addrName` & `addr` so that the former contains the hostname (or ordinary IP address) and the latter the actual resolved remote address. This would at least solve the hostname/IPv6 problems, not sure how that effects onion addresses. Let me know what you think and if I should prepare a PR :)",
    "created_at": "2020-09-04T14:32:23Z",
    "updated_at": "2020-09-04T14:32:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483652887",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483652887"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483652887"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483652887/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 398,
    "original_line": 398,
    "side": "RIGHT",
    "in_reply_to_id": 483576375
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483665018",
    "pull_request_review_id": 482717473,
    "id": 483665018,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2NTAxOA==",
    "diff_hunk": "@@ -291,6 +295,211 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n+    {\n+        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n+    {\n+        const size_t addr_len{addr.size()};\n+        const size_t onion_pos{addr.rfind(ONION)};\n+        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n+               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n+    }\n+    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n+    bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n+    bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n+    enum struct NetType {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+    struct Peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_blck;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        int64_t last_trxn;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        NetType net_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const Peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+    std::string NetTypeEnumToString(NetType t)\n+    {\n+        switch (t) {\n+        case NetType::ipv4: return \"ipv4\";\n+        case NetType::ipv6: return \"ipv6\";\n+        case NetType::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+    std::string ChainToString() const\n+    {\n+        if (gArgs.GetChainName() == CBaseChainParams::TESTNET) return \" testnet\";\n+        if (gArgs.GetChainName() == CBaseChainParams::REGTEST) return \" regtest\";\n+        return \"\";\n+    }\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            uint8_t n{0};\n+            if (ParseUInt8(args.at(0), &n)) {\n+                m_details_level = n;\n+            }\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        if (networkinfo[\"version\"].get_int() < 209900) {\n+            throw std::runtime_error(\"-netinfo requires bitcoind server to be running v0.21.0 and up\");\n+        }\n+\n+        // Count peer connection totals, and if DetailsRequested(), store peer data in a vector of structs.\n+        const int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        size_t max_peer_id_length{2}, max_addr_length{0};\n+        bool is_asmap_on{false};\n+        std::vector<Peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};",
    "path": "src/bitcoin-cli.cpp",
    "position": 122,
    "original_position": 122,
    "commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "original_commit_id": "bf1f913c4405cba35c8f99ec07b407940eb955b6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@n-thumann Thanks for having a look. I don't plan to make further changes for edge cases unless they can be addressed within the scope of this PR (but am willing to update if they can be!)\r\n\r\nThe net address code is currently being deeply changed for BIP155 `addrv2`. This PR has seen a lot of review and updates, and if we begin gating it on changes in code outside this PR, we'll risk missing the next feature freeze (October 15 deadline for merge). I think this is *very* useable in its current state--if you start using it, good luck doing without it afterward :smiley:--and if merged, I'll be happy to make further improvements based on the state of the codebase at that time.",
    "created_at": "2020-09-04T14:50:19Z",
    "updated_at": "2020-09-04T17:53:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483665018",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483665018"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483665018"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483665018/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 398,
    "original_line": 398,
    "side": "RIGHT",
    "in_reply_to_id": 483576375
  }
]