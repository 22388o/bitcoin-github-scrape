jonatack,2020-08-02 17:51:26,@sumBTC you might find this useful--I've been using it to observe your issue https://github.com/bitcoin/bitcoin/issues/19500.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667704787,667704787,
ghost,2020-08-02 18:21:00,@jonatack Ah was wondering what you were using. Nice to know this kind of information will soon be part of bitcoin-cli.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667707855,667707855,
DrahtBot,2020-08-02 20:13:25,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667719280,667719280,
0xB10C,2020-08-03 10:00:05,Concept ACK. Especially on the _detailed peers listing_ as `getpeerinfo` formatted for humans.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667932302,667932302,
practicalswift,2020-08-03 15:51:22,"Wow, this is really neat!\n\nAs a pure terminal user I love the `bitcoin-cli -netinfo t` output -- that is terminal usability at its finest!\n\nConcept ACK\n",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-668098753,668098753,
jonatack,2020-08-06 10:54:16,"> Concept ACK, but not sure about `min ping` data usefulness though.\n\nThanks for having a look. `min ping` is an inbound eviction criterium and I look at it more than `ping`; also mulling adding a human-readable `conntime` column and maybe a couple others (last send/recv, addnode).",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-669858187,669858187,
hebasto,2020-08-06 10:55:58,"> > Concept ACK, but not sure about `min ping` data usefulness though.\n> \n> Thanks for having a look. `min ping` is an inbound eviction criterium and I look at it more than `ping`; also mulling adding a human-readable `conntime` column and maybe a couple others (last send/recv, addnode).\n\nGreat!",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-669858787,669858787,
laanwj,2020-08-06 15:38:20,Concept and functionality ACK,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-670005797,670005797,
theStack,2020-08-07 12:09:00,Concept ACK :+1: ,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-670485225,670485225,
jonatack,2020-08-09 15:51:13,Took most all of the feedback and also added `lastsend` and `lastrecv` in addition to the requested `version` column.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671068195,671068195,
jonatack,2020-08-09 15:54:41,"> Did not see anything in the `asmap` column. Guess that's due to me not using the asmap feature.\n\nUpdated to not display the `asmap` column unless it is being used.\n",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671068570,671068570,
jonatack,2020-08-09 19:48:01,"What I am using at the moment is this version with additional columns for the time since the last tx (in sec) and the last block (in min), done by adding `nLastBlockTime` and `nLastTXTime` to `getpeerinfo`, because these are possible criteria for inbound peer evictions. Maybe for a follow-up.\n\n<details><summary>code diff</summary><p>\n\n```diff\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoi",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671093420,671093420,
jonatack,2020-08-13 16:56:48,"Thanks everyone for reviewing and the 9-10 Concept ACKs.\n\nTo simplify things, I dropped the commit that added the constants, took the other feedback, and made a number of further improvements. As there were no full ACKs and almost no feedback on the code itself, and to make the changes easy to review, I organised the 200 lines of changes into step-by-step hygienic commits to hopefully garner s",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-673591921,673591921,
jonatack,2020-08-14 12:36:15,Updated with a non-empty check per `git diff bf1c49a f63cecc` (thanks!),https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674053200,674053200,
laanwj,2020-08-14 14:52:58,"Tested and code review ACK f63ceccca31aa624819b429d015f8f1bf2daf49f, my comment above is just a small nit.\nTested it on a busy node and it works great.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674113018,674113018,
0xB10C,2020-08-14 16:53:15,"Tested on multiple nodes and light code review ACK f63ceccca31aa624819b429d015f8f1bf2daf49f. \n\nAwesome that this is backwards compatible with e.g. Bitcoin Core v0.18 as well!",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674166571,674166571,
fjahr,2020-08-14 17:52:15,"tested ACK f63ceccca31aa624819b429d015f8f1bf2daf49f\n\nReviewed changes since last review per `git diff 324aa5e f63cecc`. Tested on a testnet node.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674191423,674191423,
vasild,2020-08-17 16:03:17,Don't consider my review as a blocker - no stopper issues. All except https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671 can be ignored and that one can be addressed in this or a followup PR.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674967770,674967770,
jonatack,2020-08-17 16:18:54,"Thanks for the detailed review @vasild. As I wrote above in https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-673591921, I'd like to defer any further code style or edge case changes to follow-ups, as there are more improvements I'd propose, including using #19731 if it is merged.\n\nWith 3 tested ACKs, 9 Concept ACKs and an Approach ACK (which for a CLI PR is miraculous), it's also bet",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674975915,674975915,
vasild,2020-08-18 07:07:28,"To be explicit that I am ok with this as is:\n\nACK f63ceccca\n\nThe worthwhile suggestions I mentioned can be addressed in a follow up.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675298410,675298410,
fanquake,2020-08-18 11:09:33,"> With 3 tested ACKs, 9 Concept ACKs and an Approach ACK (which for a CLI PR is miraculous), it's also better to not invalidate the 3 tested ACKs.\n\nI just want to comment on [""it's also better to not invalidate the 3 tested ACKs.""](https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674975915). If this was a taproot PR, some consensus or in some other way critical code, or had accumulat",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675415319,675415319,
jonatack,2020-08-18 12:04:18,"@fanquake Much could be said and debated concerning the project norms, I suppose, but an issue or gist may be a better place for that. I'm trying to follow the norms as best I've been able to observe them and would prefer to keep the discussion here to review/testing of the PR.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675437434,675437434,
practicalswift,2020-08-18 15:09:35,"Tested ACK f63ceccca31aa624819b429d015f8f1bf2daf49f\n\nVery nice addition @jonatack - I've been using it for a while and I'm already hooked: I can't wait for it to land in `master` :)",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675537418,675537418,
laanwj,2020-08-19 09:14:16,"Agree that it's not always bad to invalidate ACKs. I'll happily retest this if it's needed.\n\n> Regardless of the above, I'm a ~0 on this change. I agree with @jnewbery's comment about this being scope creep. It seems now that we've now got to maintain a kind of ""GUI"" in a cli tool\n\nI don't disagree with your point but at least we've managed to keep this fully client-side.\n\nI'm very war",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676004980,676004980,
pinheadmz,2020-08-19 16:23:41,"Concept ACK, tested ACK, approach ACK.\n\nI think this is very cool feature and I tried it out on clearnet and onion. I find the output of `getpeerinfo` too big or verbose to be helpful without a `grep` and this makes the data nice and tidy.\n\nNone of the style nits are game-changers for me.\n\n\n\n```\n$ src/bitcoin-cli -datadir=/Volumes/Serenity/bitcoin -netinfo true\nBitcoin Core v0.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676526940,676526940,
practicalswift,2020-08-19 18:44:22,"@jonatack A minor UI nit if you choose to touch this PR: when testing this PR I noticed that the `address` column sometimes ends up outside the visible part of the terminal due to very long `version` strings (these can be 256 chars IIRC).\n\nI suggest printing the `address` column (which is guaranteed to be short) before the `version` column. That way all column headers are guaranteed to be visi",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676596264,676596264,
jonatack,2020-08-23 19:19:59,@practicalswift thanks for the feedback. Worth a try. See also https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672; higher integer values e.g. `-netinfo 2` could be passed for more/wider columns.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-678813539,678813539,
practicalswift,2020-08-26 08:41:34,"@jonatack When running `src/bitcoin-cli -netinfo t` I observed a peer with a reported `minping` of `""8601.05568e+06""`. Could be an uninitialized read?",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-680744592,680744592,
jonatack,2020-08-27 16:09:29,"@practicalswift A couple of times I saw ephemeral very long `minping` times, but IIRC it happens only around initial connection of a peer. Not sure. It's rare.\n\nThe `nMinPingUsecTime` is initialized in `net.h` to `int64_t` max value\n```cpp\n    // Best measured round-trip time.\n    std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\n```\n\n(per 93ff1b9041a828 *",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-682044893,682044893,
jonatack,2020-08-27 16:11:19,"If `-netinfo` helps us detect things like this, all the better.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-682045880,682045880,
jonatack,2020-08-29 20:31:59,"I've pushed the latest version for people to use/test/review.\n\nUnder the hood:\n- nits addressed\n- tweaked the onion detection helpers; the change makes no observable difference in my testing but in theory it might better handle a couple of edge cases\n\nUser-facing:\n- changed the optional boolean arg to an integer one between 0 and 4 (default: 0) to enable getting reports with varying ",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683338843,683338843,
practicalswift,2020-08-30 20:52:36,"@jonatack \n\nUsability nit: Wouldn't it be nice to have `last_trxn`, `last_blck` and `conn_time` in the same unit (minutes since last event) to make them easily comparable? :)",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683469278,683469278,
RandyMcMillan,2020-08-31 06:48:12,"Looks good on alpine 3.12!\n\n![Screen Shot 2020-08-31 at 2 43 50 AM](https://user-images.githubusercontent.com/152159/91690491-0b61b180-eb34-11ea-91a6-26f142b8303a.png)\n",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683595701,683595701,
jonatack,2020-08-31 07:06:49,"@practicalswift different frequency timescales really, at least for me, last txns are often only a few seconds ago, whereas last blocks are more on a minutes timescale.\n\nHere's a screenshot with last txn in min: many are under one minute ago, so lots of zero values:\n \n![Screenshot from 2020-08-31 08-47-55](https://user-images.githubusercontent.com/2415484/91692127-63121400-eb58-11ea-8bec-7",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683604043,683604043,
practicalswift,2020-08-31 08:37:53,"@jonatack Yes, transactions are received more frequently, but my experience is that minute granularity would be enough: it doesn't really matter to me if the last transaction was received 29 or 59 seconds ago -- knowing that I received the last transaction it under a minute ago is fine.\n\nThe nice thing about using the same unit is that one can easily reason about it along the lines of ""oh, I'v",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683647312,683647312,
jonatack,2020-08-31 08:50:24,"> The nice thing about using the same unit is that one can easily reason about it along the lines of ""oh, I've been connected to this node for 629 minutes but the last transaction was 500 minutes ago"" (instead of ""oh, I've been connected to this node for 629 minutes but the last transaction was 30000 seconds ago -- is that good or bad? I guess I'll have to bring up `bc` :))\n\nYou may be right. ",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683653098,683653098,
RandyMcMillan,2020-08-31 08:52:19,"It may be a good idea to check for extraneous arguments...\nAnd (quiet) no response if it isn't an expected value\n\nIs a security hole? IDK - overkill? not sure...\n\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo ~234\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo ~•\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo ~%^&%\nroot@stats:~/bitcoin/src# ./bitcoin-cli -netinfo §¶•ªº\n\n",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683653995,683653995,
jonatack,2020-08-31 09:08:05,"@RandyMcMillan AFAICT if the arg is unparseable, either an error is returned or the default of 0 is used.\n\n@practicalswift Done!",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683661543,683661543,
RandyMcMillan,2020-08-31 09:33:07,"Another possible option would be in a -connect\nthe report could **************** obfuscate the ip addresses\nand/or toggle dns resolution \n",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683673407,683673407,
jonatack,2020-08-31 10:43:25,"Re-pushed to fix the server version (200000 -> 209900) and re-verified that all commits build and run.\n\n> Another possible option would be in a -connect the report could **************** obfuscate the ip addresses and/or toggle dns resolution\n\nI'm not completely parsing, could you explain this more? (you can also run `./src/bitcoin-cli -netinfo 1` or `./src/bitcoin-cli -netinfo 3` to not s",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683703541,683703541,
practicalswift,2020-08-31 12:29:05,"Some more UI nits. As always with nits feel free to ignore or tackle in a follow-up PR :)\n\nAfter having used this feature for a while I feel that the five modes of operation might be a case of giving the user too many knobs to tweak/configure.\n\nCurrently these are five modes of operation AFAICT:\n\n* `src/bitcoin-cli -netinfo 0`: Executive summary\n* `src/bitcoin-cli -netinfo 1`: Connec",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683748406,683748406,
jonatack,2020-08-31 15:01:32,Thanks for the feedback. I think it's worthwhile to keep this simple enough that users don't need to know bash/awk/piping. The default summary is printed last so that busy nodes having many peers will still see it without scrolling up. The use case for being able to leaving off the wide address and/or version columns is for running -netinfo in a less wide buffer window.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683834962,683834962,
jonatack,2020-08-31 15:06:58,"Further updates, per `git diff 1492754 8587e78`\n\n- No longer display peer version when value from getpeerinfo is 0\n- No longer display peer minping or ping when value from getpeerinfo is null\n- If user enters an integer greater than 4, parse it as the default of 0 rather than 4\n- Show the chain name when testnet or regtest",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-683838168,683838168,
practicalswift,2020-09-01 08:06:28,Tested ACK 8587e78221492ee26aafbbc332453f7639912a41 -- patch looks correct and is limited to `src/bitcoin-cli.cpp`,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-684534830,684534830,
RandyMcMillan,2020-09-01 23:15:54,"Awesome stuff @jonatack - I was wondering if it would be possible to add some flags to make it automatically report after each new block (or some other arbitrary time interval) - the idea would be to generate a report that could be easily read into another service such as statsd.\n-netinfo -p (for polling) -I (interval in seconds) -bn=true  (triggered by a blocknotify event)\n\nThanks!",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685182561,685182561,
0xB10C,2020-09-02 08:42:38,"> I was wondering if it would be possible to add some flags to make it automatically report after each new block (or some other arbitrary time interval)\n\nI've been using `watch bitcoin-cli -netinfo` for a dashboard-like view of the report updated every few seconds. I don't see the need for adding a refreshing, dashboard-like view (and the complexity that comes with it) here.  \n\n> the idea ",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685449765,685449765,
jonatack,2020-09-02 09:27:30,"@0xB10C thanks, I couldn't have said it better. Edit: added your `watch` suggestion to the PR description.\n\nIf we want this in the next release (and feature freeze isn't far away now), it's probably best to stabilize this PR on what we have now. It has gone through several rounds of review with lots of good feedback and updates. I'd propose to try to have this merged in its current state and c",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685490550,685490550,
practicalswift,2020-09-02 14:42:18,ACK bf1f913c4405cba35c8f99ec07b407940eb955b6 -- patch looks correct and is limited to `src/bitcoin-cli.cpp`,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-685782807,685782807,
0xB10C,2020-09-05 13:04:34,"ACK bf1f913c4405cba35c8f99ec07b407940eb955b6\n\nI tested with a testnet node having connections both via clearnet and tor. \n\nnit: I think `age` is a bit less ambiguous than `uptime`. `uptime` could be confused with the actual uptime of the remote node and not the time since the connection was established.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-687608453,687608453,
jonatack,2020-09-05 21:29:40,@0xB10C thanks! `s/uptime/age/` sgtm for next update/follow-up.,https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-687665493,687665493,
practicalswift,2020-09-07 07:59:02,"I think this `src/bitcoin-cli.cpp`-only PR is ready to merge with four ACK:s (@vasild @0xB10C @practicalswift @n-thumann) and six Concept ACK:s (@jnewbery @hebasto @laanwj @ariard @theStack @RandyMcMillan).\n\nThanks @jonatack for coming up with this nifty utility. I'm using it daily!\n\nLooking forward to being able to use it directly from `master`! :)\n",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-688124239,688124239,
MarcoFalke,2020-09-07 08:12:22,"Concept ACK, haven't reviewed/tested at all, but this might come in handy when testing pull requests on the live network.\n\nbitcoin-cli isn't a stable interface, so we can change or remove this at will if issues come up in the future.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-688143175,688143175,
0xB10C,2020-09-07 12:41:46,"fwiw: ce57bf6cc0cdaf8233fd8a20e0d1c5b69d17d2a3 (leaving out the last three commits) can be used with `bitcoind` versions before `v0.20.99`. \n\nedit:\narchiving this here: https://github.com/0xB10C/bitcoin/tree/jonatacks-netinfo-pre-v0.20.99",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-688299788,688299788,
jonatack,2020-09-15 07:44:16,"### Next steps checklist\n\nEasy, do in next commit (done in #20115):\n- [x] release note\n- [x] s/uptime/age/ per @0xB10C suggestion\n- [x] add one additional space between the `net` and `mping` columns\n- [x] accomodate variable size of `addrv2` addresses\n- [x] handle occasional large mping/ping times like `1.17348e+06` per @practicalswift feedback\n- [x] add new signet chain\n- [x] di",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-692531599,692531599,
jonatack,2020-09-16 21:42:42,"> @practicalswift A couple of times I saw ephemeral very long `minping` times\n\n@practicalswift I'm still seeing these (both mping and ping), so added it to the checklist above.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-693681353,693681353,
jnewbery,2020-09-17 09:47:07,"I've been using this to test another PR and it's very helpful. Thanks @jonatack !\n\nOne thing I've noticed is that connections are inaccurately classified as blocks-only on first connection, I think because all connections start out as `fRelayTxes` set to false. It'd be better to explicitly use the connection type.",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-694123068,694123068,
jonatack,2020-09-20 10:43:03,"Here's a branch with some of the updates, including using the connection type:\n\nhttps://github.com/jonatack/bitcoin/commits/netinfo-2",https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-695771946,695771946,
0xB10C,2020-08-04 21:36:04,"just for me to understand: Why do you check if the address **contains** "".onion"" and not **ends with** it (as it's done in `src/netaddress.cpp`)?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465344036,465344036,src/bitcoin-cli.cpp
0xB10C,2020-08-04 22:36:30,"nit: This is only the IPv4 localhost. Maybe:\n\n```suggestion\nstatic const std::string LOCALHOST_IPV4{""127.0.0.1""};\n```\n\n",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465368500,465368500,src/netaddress.h
0xB10C,2020-08-04 22:39:27,Does it make sense to use a `LOCALHOST_IPV6` constant here as well? (even if you would otherwise not touch it),https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465369430,465369430,src/httpserver.cpp
0xB10C,2020-08-04 23:05:07,Probably needs a unit behind the `min ping` and `ping` values.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465378252,465378252,src/bitcoin-cli.cpp
0xB10C,2020-08-04 23:08:48,"I found ping times displayed in seconds to be somewhat uninutive. I'd personally prefer milliseconds.\n\n(Had pings under one second to most of my peers. This might be different for other users.)",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465379408,465379408,src/bitcoin-cli.cpp
0xB10C,2020-08-04 23:57:56,"Longer peer ids as found on long running nodes cause the table columns to become misaligned.  \n\n```\nPeer connections sorted by direction and min ping\n  id  <->  relay   conn  min ping    ping     asmap  address\n13417   in   full   ipv4  0.005165  0.005495          XXX.XXX.XX.XX:XXXXX\n13715  out  block   ipv4  0.011632  0.013025          XX.XXX.XX.XXX:XXXX\n   5  out   full   ipv4  0.0",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465394468,465394468,src/bitcoin-cli.cpp
jnewbery,2020-08-06 10:24:31,no need for this inline comment,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466315958,466315958,src/httpserver.cpp
jnewbery,2020-08-06 10:27:10,remove inline comment,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466317336,466317336,src/torcontrol.cpp
hebasto,2020-08-06 10:33:18,https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320226,466320226,src/httpserver.cpp
hebasto,2020-08-06 10:33:28,https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320295,466320295,src/torcontrol.cpp
hebasto,2020-08-06 10:38:17,"7e0727b73841d5f2abc96cd2fac50de74546a281\n\nFor Bitcoin Core it seems conventional to use `-netinfo=<...>`, no?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322601,466322601,src/bitcoin-cli.cpp
jonatack,2020-08-06 10:38:37,"@jnewbery agreed, I added it for reviewers so they wouldn't wonder why this was added ;) will remove\n\n@hebasto if you are referring to *Every .cpp and .h file should #include every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers.*... yes, this is why I added the #include. Are you posting the ",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322757,466322757,src/httpserver.cpp
hebasto,2020-08-06 10:40:53,"7e0727b73841d5f2abc96cd2fac50de74546a281\n\nMind following [convention](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures) about `switch` statement on an enumeration?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466323888,466323888,src/bitcoin-cli.cpp
jnewbery,2020-08-06 10:42:19,"> I added it for reviewers so they wouldn't wonder why this was added\n\nYou can leave github comments on your own PR for that. If we added a code comment ""// already included via .... "" to all includes that were already included indirectly, then most of the includes would have that comment.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466324599,466324599,src/httpserver.cpp
hebasto,2020-08-06 10:43:55,"56b156dc161b766e4aaae1ca07c719a3c599c4cb\n\n```suggestion\nstatic const std::string ONION_DOMAIN{"".onion""};\n```",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466325434,466325434,src/netaddress.h
jonatack,2020-08-06 10:46:31,Agreed,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326730,466326730,src/httpserver.cpp
hebasto,2020-08-06 10:46:39,"> Are you posting the link for a different reason?\n\nNo, you point the reason exactly :)",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326813,466326813,src/httpserver.cpp
laanwj,2020-08-06 15:37:35,"It seems `netaddress.cpp` is part of `LIBBITCOIN_COMMON`, which is not linked into `bitcoin-cli`. So you're not currently allowed to use this here.\n\nAs you are only including this header to get a few constants, `ONION` and `LOCALHOST`, might make sense to factor them out to another header? or even just duplicate them?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466502794,466502794,src/bitcoin-cli.cpp
ariard,2020-08-06 17:32:08,"I think adding user agent in verbose mode is worthy. Beyond mode of display, how do you see the data split between this new RPC and `getpeerinfo` ? Static-set-at-once-at-connection-opening versus dynamic-messages-processed ?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466574579,466574579,src/bitcoin-cli.cpp
jonatack,2020-08-09 10:58:24,"By user agent, do you mean getpeerinfo.subver? aka `cleanSubVer` in net.h",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467568717,467568717,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:03:15,"Thanks! I forgot to look at the makefile. Moved them to `httpserver.h`, which seems to be allowed, IIUC.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594332,467594332,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:03:33,AFAICT the outbound onion addrs returned by getpeerinfo don't end with `.onion` but with `.onion:<port id>`,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594357,467594357,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:03:39,done,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594362,467594362,src/netaddress.h
jonatack,2020-08-09 15:03:45,done,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594375,467594375,src/httpserver.cpp
jonatack,2020-08-09 15:04:23,done by adding units in a line at the bottom to save on horizontal space,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594437,467594437,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:04:34,done for min ping and ping,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594460,467594460,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:04:46,done; the spacing is now dynamically based on the size of the largest peer id,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594508,467594508,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:05:22,also moved the id column next to the version and address ones,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594611,467594611,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:05:42,done,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594662,467594662,src/httpserver.cpp
jonatack,2020-08-09 15:05:50,done,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594671,467594671,src/torcontrol.cpp
jonatack,2020-08-09 15:06:02,"Unless I'm confused, I think `-option=<...>` would be for config args, not CLI ones. See `-generate`.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594696,467594696,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:06:13,Thanks! -- done,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594703,467594703,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:06:19,done,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594708,467594708,src/netaddress.h
jonatack,2020-08-09 15:06:39,added version+subver together in a column,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594740,467594740,src/bitcoin-cli.cpp
jonatack,2020-08-09 15:10:08,"Oops, *A new circular dependency in the form of ""httpserver -> netbase -> netaddress -> httpserver appears to have been introduced.* Will create a header, I guess.\n\nEdit: placed them in `util/url.h`\n\nEdit 2: removed the constants.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467595062,467595062,src/bitcoin-cli.cpp
fjahr,2020-08-10 16:45:11,`ONION_EXTENSION` or `ONION_SUFFIX` would be a more accurate name here imo,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468039429,468039429,src/netaddress.cpp
fjahr,2020-08-10 16:50:07,"I don't think a comment should recite the implementation details of the code. For this level of detail, ppl can read the code. Same with the two functions below.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468042236,468042236,src/bitcoin-cli.cpp
fjahr,2020-08-10 17:38:17,"I think agreement is now to not allow ""1"" instead of ""true"" if it can be avoided. Came up here: https://github.com/bitcoin/bitcoin/pull/19544#discussion_r458695235",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468068980,468068980,src/bitcoin-cli.cpp
fjahr,2020-08-10 17:49:11,"I would expect something like this instead:\n```suggestion\n     * @returns true if addr is identified as IPv6. */\n```",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468075252,468075252,src/bitcoin-cli.cpp
luke-jr,2020-08-11 20:08:30,Not sure about initialisation order here.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468834976,468834976,src/torcontrol.cpp
luke-jr,2020-08-11 20:09:14,`ONION_TLD`?,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468835327,468835327,src/netaddress.cpp
jonatack,2020-08-13 16:36:55,"Interesting, thanks. That may possibly apply more to the RPC API than to the CLI, but ok, done.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470081234,470081234,src/bitcoin-cli.cpp
jonatack,2020-08-13 16:42:52,Dropped the commit adding the constants.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084772,470084772,src/netaddress.cpp
jonatack,2020-08-13 16:43:13,Removed the Doxygen comments.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084976,470084976,src/bitcoin-cli.cpp
jonatack,2020-08-13 16:44:16,"> Not sure about initialisation order here.\n\nWas working fine for me the past weeks, but point taken. Dropped the commit adding the constants to simplify things.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470085563,470085563,src/torcontrol.cpp
laanwj,2020-08-14 12:06:08,"This is undefined behavior if `addr` is empty, you might want to guard against that.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470583883,470583883,src/bitcoin-cli.cpp
jonatack,2020-08-14 12:11:22,"> This is undefined behavior if `addr` is empty, you might want to guard against that.\n\nThanks! will fix",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470586065,470586065,src/bitcoin-cli.cpp
laanwj,2020-08-14 14:24:59,"This uses a different boolean argument parsing than the rest of the software, which doesn't interpret ""1"" as true, for example. And it doesn't raise a parse error for invalid values, but simply ignores them (and assumes them to be false). \nI understand that it's not possible to use `GetBoolArg` here because the arguments are passed in, but it'd be nice to be consistent.\n\nAlternatively we cou",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470655849,470655849,src/bitcoin-cli.cpp
jonatack,2020-08-14 15:46:01,"Yes, new context. As this is very simple, doesn't wrap any RPC arguments and will only be used by humans, I began with the simplest (and probably least annoying option to users) of not raising parsing errors.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470706424,470706424,src/bitcoin-cli.cpp
vasild,2020-08-17 12:49:39,"IMO `-netinfo verbose` is clearer than `-netinfo true`. My wish list:\n\n* change it to `-netinfo verbose`\n* make a reusable function that takes a string and returns `Optional<bool>`. It can support `true/false`, `t/f`, `yes/no`, `y/n`, `1/0`.\n* leave it as is (silently interpreting e.g. `truw` as `false` :/)",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471455320,471455320,src/bitcoin-cli.cpp
vasild,2020-08-17 13:23:30,"Is `net` more suitable here than `conn`? The values printed are e.g. `ipv4`, `ipv6`.\n\nWe have `minping` and `ping`. It is unclear whether `ping` is the last ping or average ping.\nThe output from `ping(1)` contains something like\n```\nmin/avg/max/mdev = 367.149/488.941/628.650/107.507 ms\n```",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471475084,471475084,src/bitcoin-cli.cpp
vasild,2020-08-17 13:29:07,"The TOR proxy could be running on another machine, not necessary on `127.0.0.1`. Isn't `addr_local.find("".onion"")` sufficient?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471478691,471478691,src/bitcoin-cli.cpp
vasild,2020-08-17 13:29:49,"This and the one above would match e.g. ""www.onionfoo.com"". Or is `addr` always numeric for IP networks?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471479177,471479177,src/bitcoin-cli.cpp
vasild,2020-08-17 13:38:17,nit: here and in other places: consider `++foo` instead of `foo += 1`.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471484236,471484236,src/bitcoin-cli.cpp
vasild,2020-08-17 15:20:25,"nit: ditch unnecessary local variable (but maybe keep it if you decide to check whether `local_addrs` is empty)\n```suggestion\n        for (const UniValue& addr : networkinfo[""localaddresses""].getValues()) {\n```",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471552680,471552680,src/bitcoin-cli.cpp
vasild,2020-08-17 15:22:24,"Given that the `Local addresses` header may be followed by nothing, what about skipping it if there are no local addresses or printing something like `none` or `n/a` below it in that case?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471554091,471554091,src/bitcoin-cli.cpp
vasild,2020-08-17 15:27:43,"This and `m_peer` are types, not member variables. I think they should be named `ConnType` and `Peer`.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671,471557671,src/bitcoin-cli.cpp
vasild,2020-08-17 15:52:00,"Does it make sense to position this optional column as the last one? The ""target audience"" for this is humans, but maybe somebody will write a script that parses it and it will get bricked occasionally by the presence or absence of the `asmap` column if it is in the middle.\n\nAlso for humans - if somebody gets used to search for certain information at a certain position on the screen, e.g. `id`",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471574239,471574239,src/bitcoin-cli.cpp
vasild,2020-08-17 15:53:10,"`std::string::length()` returns `size_t` and if our variables `max_peer_id_length` and `max_version_length` are defined as `size_t`, then there would not be a need for the typecast to `int`.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471575005,471575005,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:02:35,`ping` is `pingtime` in `getpeerinfo`: this list is essentially getpeerinfo for humans with sometimes-shorter field names to save horizontal space.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471581038,471581038,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:08:53,"I gradually adjusted this over the past month of using it continually. Generally I don't think people change frequently between using asmap or not (based on my recent twitter usage polls, I suspect very few are using asmap yet). I initially wrote this using only asmap, and only realized that it would be annoying when @0xB10C mentioned it was just empty without it. When I did change to test it, it ",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471585004,471585004,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:16:49,"Given that this dashboard shows all of the peer addresses, AFAICT I've found this to be reliable as-is over the past month WRT onions.\n\nEdit: have still not seen an issue with this.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471589614,471589614,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:20:10,I hesitated on this. Will update in a follow-up.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471591519,471591519,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:22:04,Skipping it might violate the principle of least surprise but no strong opinion on what would be best or if any change is needed.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471592642,471592642,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:23:54,I haven't seen this to be an issue yet. Happy to look at a proposal.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471593698,471593698,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:26:29,I'm open to `net` for a follow-up if people prefer that. I agree it may be better.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471595284,471595284,src/bitcoin-cli.cpp
jonatack,2020-08-17 16:28:20,Good idea; noting this style nit for the follow-up.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471596278,471596278,src/bitcoin-cli.cpp
vasild,2020-08-18 07:55:45,"I see this for an IPv4 connection to www.onionfoo.com:8345, mistakenly labelled as ""conn=onion"" instead of ""conn=ipv4"".\n\n```\n<-> relay  conn minping   ping lastsend lastrecv uptime id version               address\nout  full onion       4      4        0        0      0  0 70015/Satoshi:0.20.0/ www.onionfoo.com:8345\n```\n\n```suggestion\n        const char* suffix = "".onion"";\n       ",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471987413,471987413,src/bitcoin-cli.cpp
vasild,2020-08-18 08:00:42,"I see this:\n```\n$ ./src/bitcoin-cli -netinfo \nBitcoin Core v0.20.99.0-f63ceccca - 70015/Satoshi:0.20.0/\n\nInbound and outbound peer connections\nin:  ...\nout: ...\nall: ...\n\nLocal addresses\n$ \n```\n\nI guess it happens when the node does not have an incoming connections and `--externalip=` is not provided to `bitcoind`.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471990490,471990490,src/bitcoin-cli.cpp
pinheadmz,2020-08-19 16:06:28,"Same here, behind a firewall with no port forwarding, my local addresses is empty. Not sure the best way to handle it visually. Perhaps even just an empty newline.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r473143045,473143045,src/bitcoin-cli.cpp
jonatack,2020-08-23 19:02:31,"> maybe somebody will write a script that parses it and it will get bricked occasionally by the presence or absence of the `asmap` column if it is in the middle.\n\nScripts should consume the RPC API, not the CLI.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253487,475253487,src/bitcoin-cli.cpp
jonatack,2020-08-23 19:09:28,Noted for a follow-up.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254064,475254064,src/bitcoin-cli.cpp
jonatack,2020-08-23 19:13:17,"In more than a month of running this and also the original python script, I still have not seen a case like this and have not found the node in question on the network. Seems like a pretty pathological edge case but happy to look at tightening the detection in the follow-up. ",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254399,475254399,src/bitcoin-cli.cpp
jonatack,2020-08-23 19:16:17,"I'm considering proposing replacing the boolean arg with an integer one in the follow-up, to allow choosing from a number of degrees of detail rather than just two.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672,475254672,src/bitcoin-cli.cpp
jonatack,2020-08-28 16:49:16,"I have still not yet encountered the described edge case above, but it should be noted that the proposal to replace `find` with ""string ends with"" causes many outbound onions to not be detected when they end with `.onion:<port>`, e.g. `.onion:8333` -- nearly half of the onions I'm connected to as I write this.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r479421817,479421817,src/bitcoin-cli.cpp
jonatack,2020-08-28 20:11:38,"This seems to cover everything:\n```cpp\nbool IsOutboundOnion(const std::string& addr, int mapped_as) const\n{\n    const size_t onion_len{ONION.length()};\n    const size_t pos{addr.rfind(ONION)};\n    return mapped_as == 0 && addr.size() > onion_len &&\n        (pos == addr.size() - onion_len || pos == addr.find_last_of("":"") - onion_len);\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r479513414,479513414,src/bitcoin-cli.cpp
vasild,2020-09-02 09:49:55,"Wouldn't it be surprising to have some details disappear when the verbosity level is increased?\n\nThe description says `an increasingly detailed peers listing` but `IsAddressSelected()` will be `true` for details=2 and `false` for details=3.\n\n",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r481944998,481944998,src/bitcoin-cli.cpp
jonatack,2020-09-02 13:34:37,"Going from details level 2 to 3, it is indeed increasingly detailed as the address is replaced by 2 fields combined in one, version and sub-version. That said, I don't mind improving it if there is a good suggestion.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482072751,482072751,src/bitcoin-cli.cpp
jonatack,2020-09-02 13:39:08,"(As there may be people who prefer to see one or the other of these two wider fields, but not necessarily both for reasons of window size or interest, and since it isn't complicated to do--and is done--it's good to allow people the choice.)",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482075976,482075976,src/bitcoin-cli.cpp
practicalswift,2020-09-02 13:53:34,"FWIW I also found it confusing that increasing what I thought was a numeric verbosity level removed columns :)\n\nI think the expected command-line UI for verbosity switches are one of these two:\n* Increase verbosity like for `curl`: `curl -v`, `curl -vv`, `curl -vvv`, etc.\n* Specify exactly what you want like for `ps`: `ps -o comm,label`",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482086723,482086723,src/bitcoin-cli.cpp
jonatack,2020-09-02 13:55:40,Concrete suggestion for the help?,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482088379,482088379,src/bitcoin-cli.cpp
jonatack,2020-09-02 14:03:25,"How about ""An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0)""",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482094263,482094263,src/bitcoin-cli.cpp
practicalswift,2020-09-02 14:11:24,"Yes, that is probably good enough for now. Making the verbosity levels more in tune with how other command-line tools work can be done in a follow-up PR: no need to do it here :)",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482100284,482100284,src/bitcoin-cli.cpp
jonatack,2020-09-02 14:21:29,"Passing args like for `curl` or `ps` would be indeed cool, but yes, overkill for now and maybe hurt this being merged by making it too large.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482107793,482107793,src/bitcoin-cli.cpp
jonatack,2020-09-02 14:25:24,Done. Thanks for the feedback. The help seems better now.,https://github.com/bitcoin/bitcoin/pull/19643#discussion_r482110882,482110882,src/bitcoin-cli.cpp
n-thumann,2020-09-04 12:11:42,"`peer[""addr""]` can also contain hostnames (`bitcoin-cli addnode ""foo.bar"" onetry`) or IPv6 addresses without square brackets (`bitcoin-cli addnode ""2001:db8::1337"" onetry`). In theses cases the `IsAddrIPv6` will not recognize them properly and they will be always marked as IPv4 🤔.",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483576375,483576375,src/bitcoin-cli.cpp
n-thumann,2020-09-04 12:13:58,"Maybe, if there are no square brackets, ask `inet_pton` if it´s a valid IPv6 address? But what if there´s a hostname?",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483577433,483577433,src/bitcoin-cli.cpp
n-thumann,2020-09-04 14:32:23,"Dug a little bit deeper: Adding a new field to `getpeerinfo` seems to be a better solution IMO. The actual remote address (that is IPv6 with square brackets or resolved hostname) is already stored [here](https://github.com/bitcoin/bitcoin/blob/master/src/net.h#L687), but only `addrName` is [passed back](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/net.cpp#L161) as `addr` instead.\nI wou",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483652887,483652887,src/bitcoin-cli.cpp
jonatack,2020-09-04 14:50:19,"@n-thumann Thanks for having a look. I don't plan to make further changes for edge cases unless they can be addressed within the scope of this PR (but am willing to update if they can be!)\n\nThe net address code is currently being deeply changed for BIP155 `addrv2`. This PR has seen a lot of review and updates, and if we begin gating it on changes in code outside this PR, we'll risk missing the",https://github.com/bitcoin/bitcoin/pull/19643#discussion_r483665018,483665018,src/bitcoin-cli.cpp
