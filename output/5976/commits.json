[
  {
    "sha": "8ba7f842e5a00e43167e53b456c6d8732b8861c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmE3Zjg0MmU1YTAwZTQzMTY3ZTUzYjQ1NmM2ZDg3MzJiODg2MWM1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-06T17:10:33Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-15T13:28:00Z"
      },
      "message": "Reduce download timeouts as blocks arrive\n\nCompare the block download timeout to what the timeout would be if calculated\nbased on current time and current value of nQueuedValidatedHeaders, but\nignoring other in-flight blocks from the same peer. If the calculation based on\npresent conditions is shorter, then set that to be the time after which we\ndisconnect the peer for not delivering this block.",
      "tree": {
        "sha": "5ba0e47133fe754319c2a3a5e5844cf17d967fcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ba0e47133fe754319c2a3a5e5844cf17d967fcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ba7f842e5a00e43167e53b456c6d8732b8861c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba7f842e5a00e43167e53b456c6d8732b8861c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ba7f842e5a00e43167e53b456c6d8732b8861c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba7f842e5a00e43167e53b456c6d8732b8861c5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea2b425b00b01b5b6670fa39488caf146dac4642",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea2b425b00b01b5b6670fa39488caf146dac4642",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea2b425b00b01b5b6670fa39488caf146dac4642"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 29,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bc2e2118435e3488f16c6a5aa8839dcd3175c4b4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba7f842e5a00e43167e53b456c6d8732b8861c5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba7f842e5a00e43167e53b456c6d8732b8861c5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8ba7f842e5a00e43167e53b456c6d8732b8861c5",
        "patch": "@@ -141,8 +141,8 @@ namespace {\n         uint256 hash;\n         CBlockIndex *pindex;  //! Optional.\n         int64_t nTime;  //! Time of \"getdata\" request in microseconds.\n-        int nValidatedQueuedBefore;  //! Number of blocks queued with validated headers (globally) at the time this one is requested.\n         bool fValidatedHeaders;  //! Whether this block has validated headers at the time of request.\n+        int64_t nTimeDisconnect; //! The timeout for this block request (for disconnecting a slow peer)\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n@@ -203,6 +203,7 @@ struct CNodeState {\n     int64_t nStallingSince;\n     list<QueuedBlock> vBlocksInFlight;\n     int nBlocksInFlight;\n+    int nBlocksInFlightValidHeaders;\n     //! Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n \n@@ -216,6 +217,7 @@ struct CNodeState {\n         fSyncStarted = false;\n         nStallingSince = 0;\n         nBlocksInFlight = 0;\n+        nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n     }\n };\n@@ -247,6 +249,12 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n+// Returns time at which to timeout block request (nTime in microseconds)\n+int64_t GetBlockTimeout(int64_t nTime, int nValidatedQueuedBefore)\n+{\n+    return nTime + 500000 * Params().GetConsensus().nPowTargetSpacing * (4 + nValidatedQueuedBefore);\n+}\n+\n void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     LOCK(cs_main);\n     CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n@@ -279,6 +287,7 @@ void MarkBlockAsReceived(const uint256& hash) {\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n         nQueuedValidatedHeaders -= itInFlight->second.second->fValidatedHeaders;\n+        state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n@@ -294,10 +303,12 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    QueuedBlock newentry = {hash, pindex, GetTimeMicros(), nQueuedValidatedHeaders, pindex != NULL};\n+    int64_t nNow = GetTimeMicros();\n+    QueuedBlock newentry = {hash, pindex, nNow, pindex != NULL, GetBlockTimeout(nNow, nQueuedValidatedHeaders)};\n     nQueuedValidatedHeaders += newentry.fValidatedHeaders;\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n     state->nBlocksInFlight++;\n+    state->nBlocksInFlightValidHeaders += newentry.fValidatedHeaders;\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n@@ -4693,9 +4704,22 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n         // to unreasonably increase our timeout.\n-        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * consensusParams.nPowTargetSpacing * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n-            LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n-            pto->fDisconnect = true;\n+        // We also compare the block download timeout originally calculated against the time at which we'd disconnect\n+        // if we assumed the block were being requested now (ignoring blocks we've requested from this peer, since we're\n+        // only looking at this peer's oldest request).  This way a large queue in the past doesn't result in a\n+        // permanently large window for this block to be delivered (ie if the number of blocks in flight is decreasing\n+        // more quickly than once every 5 minutes, then we'll shorten the download window for this block).\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0) {\n+            QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n+            int64_t nTimeoutIfRequestedNow = GetBlockTimeout(nNow, nQueuedValidatedHeaders - state.nBlocksInFlightValidHeaders);\n+            if (queuedBlock.nTimeDisconnect > nTimeoutIfRequestedNow) {\n+                LogPrint(\"net\", \"Reducing block download timeout for peer=%d block=%s, orig=%d new=%d\\n\", pto->id, queuedBlock.hash.ToString(), queuedBlock.nTimeDisconnect, nTimeoutIfRequestedNow);\n+                queuedBlock.nTimeDisconnect = nTimeoutIfRequestedNow;\n+            }\n+            if (queuedBlock.nTimeDisconnect < nNow) {\n+                LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->id);\n+                pto->fDisconnect = true;\n+            }\n         }\n \n         //"
      }
    ]
  }
]