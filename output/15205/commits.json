[
  {
    "sha": "315d84314a7a05f856cbd4a18f1271de4f0be675",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTVkODQzMTRhN2EwNWY4NTZjYmQ0YTE4ZjEyNzFkZTRmMGJlNjc1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-21T17:44:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-17T20:53:21Z"
      },
      "message": "disable thread_local on unreliable platforms\n\nSee discussions here:\n\n- https://github.com/bitcoin/bitcoin/pull/11722#pullrequestreview-79322658\n- https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387181155",
      "tree": {
        "sha": "4ffc02a18e4e0c934591a219f2b5593e6655f2d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ffc02a18e4e0c934591a219f2b5593e6655f2d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/315d84314a7a05f856cbd4a18f1271de4f0be675",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/315d84314a7a05f856cbd4a18f1271de4f0be675",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/315d84314a7a05f856cbd4a18f1271de4f0be675",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/315d84314a7a05f856cbd4a18f1271de4f0be675/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12b30105fc59daef2ae2fd8f81be1159ca68f94a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12b30105fc59daef2ae2fd8f81be1159ca68f94a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12b30105fc59daef2ae2fd8f81be1159ca68f94a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "624a4333778f7db41a507fad5b5d23f530fa7434",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/315d84314a7a05f856cbd4a18f1271de4f0be675/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/315d84314a7a05f856cbd4a18f1271de4f0be675/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=315d84314a7a05f856cbd4a18f1271de4f0be675",
        "patch": "@@ -827,8 +827,23 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   }\n   ])],\n   [\n-    AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n-    AC_MSG_RESULT(yes)\n+   case $host in\n+     *mingw*)\n+        # mingw32's implementation of thread_local has also been shown to behave\n+        # erroneously under concurrent usage; see:\n+        # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+        AC_MSG_RESULT(no)\n+        ;;\n+      *darwin*)\n+        # TODO enable thread_local on later versions of Darwin where it is\n+        # supported (per https://stackoverflow.com/a/29929949)\n+        AC_MSG_RESULT(no)\n+        ;;\n+      *)\n+        AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n+        AC_MSG_RESULT(yes)\n+        ;;\n+    esac\n   ],\n   [\n     AC_MSG_RESULT(no)"
      }
    ]
  },
  {
    "sha": "fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEwYmQ0ZmVhOTdhYzdhYTFhYWU5NjRiOWI2MmYxOWVmMDI0MTBm",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-18T18:46:38Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-22T16:08:12Z"
      },
      "message": "validation: avoid deadlocks due to ValidationInterface/ABC interaction\n\nSince ActivateBestChain will in certain cases block in order to allow the\nValidationInterface queue to drain, it cannot safely be called from within\nValidationInterface callbacks. This patch adds assertions preventing that when\nDEBUG_LOCKORDER.\n\nWe slightly rework the ValidationInterface class, adding an\n`AddToProcessQueue()` method that handles scheduling a callback. When the\nscheduling queue is initiated, we make the thread aware it's managed by\nValidationInterface.",
      "tree": {
        "sha": "050c84a555f294301b0a2251e9ac7f23637e92ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/050c84a555f294301b0a2251e9ac7f23637e92ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "315d84314a7a05f856cbd4a18f1271de4f0be675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/315d84314a7a05f856cbd4a18f1271de4f0be675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/315d84314a7a05f856cbd4a18f1271de4f0be675"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 74,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b116d91662abe46a82bebd19f3e87fb8b9d44422",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
        "patch": "@@ -2677,13 +2677,14 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     do {\n         boost::this_thread::interruption_point();\n \n+#ifdef DEBUG_LOCKORDER\n+        ThrowIfRunningInValidationInterfaceQueue();\n+#endif\n+\n         if (GetMainSignals().CallbacksPending() > 10) {\n             // Block until the validation queue drains. This should largely\n             // never happen in normal operation, however may happen during\n             // reindex, causing memory blowup if we run too far ahead.\n-            // Note that if a validationinterface callback ends up calling\n-            // ActivateBestChain this may lead to a deadlock! We should\n-            // probably have a DEBUG_LOCKORDER test for this in the future.\n             SyncWithValidationInterfaceQueue();\n         }\n "
      },
      {
        "sha": "90915467fa4b87a4b9afd9b8f3caa4becac63703",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 7,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
        "patch": "@@ -51,6 +51,32 @@ struct MainSignalsInstance {\n \n static CMainSignals g_signals;\n \n+#if defined(DEBUG_LOCKORDER)\n+\n+void ThrowIfRunningInValidationInterfaceQueue() {\n+    if (IsRunningInValidationInterfaceQueue()) {\n+        throw std::logic_error(\n+            \"This function cannot be called from within the ValidationInterface \"\n+            \"queue because it may result in a deadlock when attempting to \"\n+            \"drain the same queue.\");\n+    }\n+}\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+static thread_local bool g_is_running_in_queue_thread{false};\n+\n+bool IsRunningInValidationInterfaceQueue() { return g_is_running_in_queue_thread; }\n+static void MarkRunningInQueue() { g_is_running_in_queue_thread = true; }\n+\n+#else\n+\n+bool IsRunningInValidationInterfaceQueue() { return false; }\n+static void MarkRunningInQueue() {}\n+\n+#endif // defined(HAVE_THREAD_LOCAL)\n+\n+#endif // defined(DEBUG_LOCKORDER)\n+\n // This map has to a separate global instead of a member of MainSignalsInstance,\n // because RegisterWithMempoolSignals is currently called before RegisterBackgroundSignalScheduler,\n // so MainSignalsInstance hasn't been created yet.\n@@ -59,6 +85,12 @@ static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_con\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n     assert(!m_internals);\n     m_internals.reset(new MainSignalsInstance(&scheduler));\n+\n+#ifdef DEBUG_LOCKORDER\n+    // Indicate that we're running in a ValidationInterface thread. This\n+    // affects which functions can be called without risk of deadlock.\n+    AddToProcessQueue(MarkRunningInQueue);\n+#endif\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n@@ -113,11 +145,15 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.m_internals->m_connMainSignals.clear();\n }\n \n+\n void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {\n-    g_signals.m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\n+    g_signals.AddToProcessQueue(std::move(func));\n }\n \n void SyncWithValidationInterfaceQueue() {\n+#ifdef DEBUG_LOCKORDER\n+    ThrowIfRunningInValidationInterfaceQueue();\n+#endif\n     AssertLockNotHeld(cs_main);\n     // Block until the validation queue drains\n     std::promise<void> promise;\n@@ -129,7 +165,7 @@ void SyncWithValidationInterfaceQueue() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        AddToProcessQueue([ptx, this] {\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n@@ -140,31 +176,31 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    AddToProcessQueue([ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n     });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    AddToProcessQueue([pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n     });\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    AddToProcessQueue([locator, this] {\n         m_internals->ChainStateFlushed(locator);\n     });\n }\n@@ -180,3 +216,8 @@ void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& sta\n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n     m_internals->NewPoWValidBlock(pindex, block);\n }\n+\n+void CMainSignals::AddToProcessQueue(std::function<void ()> func)\n+{\n+    m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\n+}"
      },
      {
        "sha": "a703832adfbe6a9a440df59f5b07bd1c4b530743",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
        "patch": "@@ -55,6 +55,25 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main);\n \n+#ifdef DEBUG_LOCKORDER\n+/**\n+ * Return true if we're running in a thread processing the ValidationInterface\n+ * queue.\n+ *\n+ * Used to warn against calls to functions which may introduce deadlocks by\n+ * interacting with the queue we're executing from.\n+ *\n+ * Only supported for platforms which HAVE_THREAD_LOCAL.\n+ */\n+bool IsRunningInValidationInterfaceQueue();\n+\n+/**\n+ * Throw a std::logic_error if we're currently executing in a\n+ * ValidationInterface queue thread.\n+ */\n+void ThrowIfRunningInValidationInterfaceQueue();\n+#endif\n+\n /**\n  * Implement this to subscribe to events generated in validation\n  *\n@@ -187,6 +206,9 @@ class CMainSignals {\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n+\n+    /** Schedule a function for execution in the ValidationInterface queue. */\n+    void AddToProcessQueue(std::function<void ()> func);\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2UwOWVlY2VkMmIwODFkOGY2N2ZiNzNjMWI3ZWM4ODVmYjliOWQ3",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-18T18:52:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-22T16:08:15Z"
      },
      "message": "test: ensure we disallow calls to ABC within ValidationInterface\n\nAlso adds default constructor and destructor to CMainSignals to avoid build\nerrors due to the forward declaration of MainSignalsInstance.",
      "tree": {
        "sha": "fbfd3ec3214e02b38ee77554312185e24ab3118d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbfd3ec3214e02b38ee77554312185e24ab3118d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa10bd4fea97ac7aa1aae964b9b62f19ef02410f"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 61,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd7824b3fd849ab9dbf91438536ef31ecd43f8c7",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
        "patch": "@@ -95,6 +95,7 @@ BITCOIN_TESTS =\\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n+  test/validationinterface_tests.cpp \\\n   test/versionbits_tests.cpp\n \n if ENABLE_PROPERTY_TESTS"
      },
      {
        "sha": "4dc3bb3a09fdda218c0021568a6df21d2649d80f",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
        "patch": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <scheduler.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/thread.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(validationinterface_tests, BasicTestingSetup)\n+\n+/**\n+ * Ensure that calls known to pose risk of deadlock cannot be made from within\n+ * ValidationInterface threads.\n+ */\n+BOOST_AUTO_TEST_CASE(no_deadlocks_in_queue)\n+{\n+    CScheduler scheduler;\n+    CMainSignals main_signals;\n+    const CChainParams& chainparams = Params();\n+\n+    boost::thread t = boost::thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n+    main_signals.RegisterBackgroundSignalScheduler(scheduler);\n+\n+    bool callback_executed = false;\n+\n+    main_signals.AddToProcessQueue([chainparams, &callback_executed]() {\n+        CValidationState state;\n+#ifdef DEBUG_LOCKORDER\n+        BOOST_CHECK_THROW(ActivateBestChain(state, chainparams), std::logic_error);\n+#else\n+        ActivateBestChain(state, chainparams);\n+#endif\n+        callback_executed = true;\n+    });\n+\n+    scheduler.stop(true);\n+    t.join();\n+    assert(callback_executed);\n+}\n+\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "14c617949e3ffaa0e98dc78a1a1830bee40d8c5b",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
        "patch": "@@ -47,8 +47,10 @@ struct MainSignalsInstance {\n     std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+    ~MainSignalsInstance() {}\n };\n \n+\n static CMainSignals g_signals;\n \n #if defined(DEBUG_LOCKORDER)\n@@ -82,6 +84,9 @@ static void MarkRunningInQueue() {}\n // so MainSignalsInstance hasn't been created yet.\n static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;\n \n+CMainSignals::CMainSignals() {}\n+CMainSignals::~CMainSignals() {}\n+\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n     assert(!m_internals);\n     m_internals.reset(new MainSignalsInstance(&scheduler));"
      },
      {
        "sha": "6f1473971abe5b910dcde7726f3773c52ac8afe2",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=93e09eeced2b081d8f67fb73c1b7ec885fb9b9d7",
        "patch": "@@ -184,6 +184,11 @@ class CMainSignals {\n     void MempoolEntryRemoved(CTransactionRef tx, MemPoolRemovalReason reason);\n \n public:\n+    // Declare default *structors to avoid compilation issues due to the\n+    // forward declaration of MainSignalsInstance.\n+    CMainSignals();\n+    ~CMainSignals();\n+\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n     /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */"
      }
    ]
  }
]