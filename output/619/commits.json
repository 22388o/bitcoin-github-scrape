[
  {
    "sha": "dead0ff8cd90eb39f1d9278539d2b3579982b3de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWFkMGZmOGNkOTBlYjM5ZjFkOTI3ODUzOWQyYjM1Nzk5ODJiM2Rl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2011-11-08T20:18:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2011-11-08T20:18:36Z"
      },
      "message": "Add robustness against null models",
      "tree": {
        "sha": "566823e2886404bf81b3ee94d99ba03497119590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/566823e2886404bf81b3ee94d99ba03497119590"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dead0ff8cd90eb39f1d9278539d2b3579982b3de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dead0ff8cd90eb39f1d9278539d2b3579982b3de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dead0ff8cd90eb39f1d9278539d2b3579982b3de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dead0ff8cd90eb39f1d9278539d2b3579982b3de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fb0a38339e5cb404147c89f73ff10d962a47ca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb0a38339e5cb404147c89f73ff10d962a47ca5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb0a38339e5cb404147c89f73ff10d962a47ca5"
      }
    ],
    "stats": {
      "total": 269,
      "additions": 171,
      "deletions": 98
    },
    "files": [
      {
        "sha": "a3aa6de841e8dc09eb276af84eeb5e91ac79eae5",
        "filename": "src/qt/aboutdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/aboutdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/aboutdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/aboutdialog.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -12,7 +12,10 @@ AboutDialog::AboutDialog(QWidget *parent) :\n \n void AboutDialog::setModel(ClientModel *model)\n {\n-    ui->versionLabel->setText(model->formatFullVersion());\n+    if(model)\n+    {\n+        ui->versionLabel->setText(model->formatFullVersion());\n+    }\n }\n \n AboutDialog::~AboutDialog()"
      },
      {
        "sha": "0a147c9e1047f14b1d5be3cc452c548351699eba",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -57,6 +57,8 @@ AddressBookPage::~AddressBookPage()\n void AddressBookPage::setModel(AddressTableModel *model)\n {\n     this->model = model;\n+    if(!model)\n+        return;\n     // Refresh list from core\n     model->updateList();\n \n@@ -96,16 +98,13 @@ void AddressBookPage::setModel(AddressTableModel *model)\n     selectionChanged();\n }\n \n-QTableView *AddressBookPage::getCurrentTable()\n-{\n-    return ui->tableView;\n-}\n-\n void AddressBookPage::on_copyToClipboard_clicked()\n {\n     // Copy currently selected address to clipboard\n     //   (or nothing, if nothing selected)\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel())\n+        return;\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n     foreach (QModelIndex index, indexes)\n@@ -117,6 +116,8 @@ void AddressBookPage::on_copyToClipboard_clicked()\n \n void AddressBookPage::on_newAddressButton_clicked()\n {\n+    if(!model)\n+        return;\n     EditAddressDialog dlg(\n             tab == SendingTab ?\n             EditAddressDialog::NewSendingAddress :\n@@ -139,7 +140,9 @@ void AddressBookPage::on_newAddressButton_clicked()\n \n void AddressBookPage::on_deleteButton_clicked()\n {\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel())\n+        return;\n     QModelIndexList indexes = table->selectionModel()->selectedRows();\n     if(!indexes.isEmpty())\n     {\n@@ -150,7 +153,9 @@ void AddressBookPage::on_deleteButton_clicked()\n void AddressBookPage::selectionChanged()\n {\n     // Set button states based on selected tab and selection\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel())\n+        return;\n \n     if(table->selectionModel()->hasSelection())\n     {\n@@ -174,12 +179,14 @@ void AddressBookPage::selectionChanged()\n \n void AddressBookPage::done(int retval)\n {\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel() || !table->model())\n+        return;\n     // When this is a tab/widget and not a model dialog, ignore \"done\"\n     if(mode == ForEditing)\n         return;\n \n     // Figure out which address was selected, and return it\n-    QTableView *table = getCurrentTable();\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n     foreach (QModelIndex index, indexes)"
      },
      {
        "sha": "ef64d175390029d684a3f5df2ca7336a4d41e94b",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -47,8 +47,6 @@ public slots:\n     QString returnValue;\n     QSortFilterProxyModel *proxyModel;\n \n-    QTableView *getCurrentTable();\n-\n private slots:\n     void on_deleteButton_clicked();\n     void on_newAddressButton_clicked();"
      },
      {
        "sha": "89cdf43ba49a909c3a5db84c12c4fc5a7fe3cca5",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -72,6 +72,8 @@ void AskPassphraseDialog::setModel(WalletModel *model)\n void AskPassphraseDialog::accept()\n {\n     std::string oldpass, newpass1, newpass2;\n+    if(!model)\n+        return;\n     // TODO: mlock memory / munlock on return so they will not be swapped out, really need \"mlockedstring\" wrapper class to do this safely\n     oldpass.reserve(MAX_PASSPHRASE_SIZE);\n     newpass1.reserve(MAX_PASSPHRASE_SIZE);"
      },
      {
        "sha": "5ae3ce33e8051112301970edd55e7b16aa8184de",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 39,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -267,58 +267,62 @@ void BitcoinGUI::createToolBars()\n void BitcoinGUI::setClientModel(ClientModel *clientModel)\n {\n     this->clientModel = clientModel;\n-\n-    if(clientModel->isTestNet())\n+    if(clientModel)\n     {\n-        QString title_testnet = windowTitle() + QString(\" \") + tr(\"[testnet]\");\n-        setWindowTitle(title_testnet);\n+        if(clientModel->isTestNet())\n+        {\n+            QString title_testnet = windowTitle() + QString(\" \") + tr(\"[testnet]\");\n+            setWindowTitle(title_testnet);\n #ifndef Q_WS_MAC\n-        setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n+            setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n #else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n+            MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n #endif\n-        if(trayIcon)\n-        {\n-            trayIcon->setToolTip(title_testnet);\n-            trayIcon->setIcon(QIcon(\":/icons/toolbar_testnet\"));\n+            if(trayIcon)\n+            {\n+                trayIcon->setToolTip(title_testnet);\n+                trayIcon->setIcon(QIcon(\":/icons/toolbar_testnet\"));\n+            }\n         }\n-    }\n \n-    // Keep up to date with client\n-    setNumConnections(clientModel->getNumConnections());\n-    connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n+        // Keep up to date with client\n+        setNumConnections(clientModel->getNumConnections());\n+        connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-    setNumBlocks(clientModel->getNumBlocks());\n-    connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(clientModel->getNumBlocks());\n+        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n \n-    // Report errors from network/worker thread\n-    connect(clientModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n+        // Report errors from network/worker thread\n+        connect(clientModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n+    }\n }\n \n void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n {\n     this->walletModel = walletModel;\n+    if(walletModel)\n+    {\n+        // Report errors from wallet thread\n+        connect(walletModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n \n-    // Report errors from wallet thread\n-    connect(walletModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n-\n-    // Put transaction list in tabs\n-    transactionView->setModel(walletModel);\n+        // Put transaction list in tabs\n+        transactionView->setModel(walletModel);\n \n-    overviewPage->setModel(walletModel);\n-    addressBookPage->setModel(walletModel->getAddressTableModel());\n-    receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n-    sendCoinsPage->setModel(walletModel);\n+        overviewPage->setModel(walletModel);\n+        addressBookPage->setModel(walletModel->getAddressTableModel());\n+        receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n+        sendCoinsPage->setModel(walletModel);\n \n-    setEncryptionStatus(walletModel->getEncryptionStatus());\n-    connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n+        setEncryptionStatus(walletModel->getEncryptionStatus());\n+        connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n \n-    // Balloon popup for new transaction\n-    connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n-            this, SLOT(incomingTransaction(QModelIndex,int,int)));\n+        // Balloon popup for new transaction\n+        connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n+                this, SLOT(incomingTransaction(QModelIndex,int,int)));\n \n-    // Ask for passphrase if needed\n-    connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+        // Ask for passphrase if needed\n+        connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+    }\n }\n \n void BitcoinGUI::createTrayIcon()\n@@ -369,6 +373,8 @@ void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)\n \n void BitcoinGUI::optionsClicked()\n {\n+    if(!clientModel || !clientModel->getOptionsModel())\n+        return;\n     OptionsDialog dlg;\n     dlg.setModel(clientModel->getOptionsModel());\n     dlg.exec();\n@@ -398,6 +404,8 @@ void BitcoinGUI::setNumConnections(int count)\n \n void BitcoinGUI::setNumBlocks(int count)\n {\n+    if(!clientModel)\n+        return;\n     int initTotal = clientModel->getNumBlocksAtStartup();\n     int total = clientModel->getNumBlocksOfPeers();\n     QString tooltip;\n@@ -492,13 +500,16 @@ void BitcoinGUI::changeEvent(QEvent *e)\n \n void BitcoinGUI::closeEvent(QCloseEvent *event)\n {\n-#ifndef Q_WS_MAC // Ignored on Mac\n-    if(!clientModel->getOptionsModel()->getMinimizeToTray() &&\n-       !clientModel->getOptionsModel()->getMinimizeOnClose())\n+    if(clientModel)\n     {\n-        qApp->quit();\n-    }\n+#ifndef Q_WS_MAC // Ignored on Mac\n+        if(!clientModel->getOptionsModel()->getMinimizeToTray() &&\n+           !clientModel->getOptionsModel()->getMinimizeOnClose())\n+        {\n+            qApp->quit();\n+        }\n #endif\n+    }\n     QMainWindow::closeEvent(event);\n }\n \n@@ -517,6 +528,8 @@ void BitcoinGUI::askFee(qint64 nFeeRequired, bool *payFee)\n \n void BitcoinGUI::incomingTransaction(const QModelIndex & parent, int start, int end)\n {\n+    if(!walletModel || !clientModel)\n+        return;\n     TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n     qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent)\n                     .data(Qt::EditRole).toULongLong();\n@@ -654,6 +667,8 @@ void BitcoinGUI::setEncryptionStatus(int status)\n \n void BitcoinGUI::encryptWallet(bool status)\n {\n+    if(!walletModel)\n+        return;\n     AskPassphraseDialog dlg(status ? AskPassphraseDialog::Encrypt:\n                                      AskPassphraseDialog::Decrypt, this);\n     dlg.setModel(walletModel);\n@@ -671,6 +686,8 @@ void BitcoinGUI::changePassphrase()\n \n void BitcoinGUI::unlockWallet()\n {\n+    if(!walletModel)\n+        return;\n     // Unlock wallet when requested by wallet model\n     if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n     {"
      },
      {
        "sha": "4b21b8c4bee6447c3d5278d3a046f0777041e877",
        "filename": "src/qt/csvmodelwriter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/csvmodelwriter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/csvmodelwriter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -48,7 +48,11 @@ bool CSVModelWriter::write()\n         return false;\n     QTextStream out(&file);\n \n-    int numRows = model->rowCount();\n+    int numRows = 0;\n+    if(model)\n+    {\n+        numRows = model->rowCount();\n+    }\n \n     // Header row\n     for(int i=0; i<columns.size(); ++i)"
      },
      {
        "sha": "8cc3c85d7aeea3a0dabb721f16a72e18c495d7c6",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -56,6 +56,8 @@ void EditAddressDialog::loadRow(int row)\n \n bool EditAddressDialog::saveCurrentRow()\n {\n+    if(!model)\n+        return false;\n     switch(mode)\n     {\n     case NewReceivingAddress:\n@@ -78,6 +80,8 @@ bool EditAddressDialog::saveCurrentRow()\n \n void EditAddressDialog::accept()\n {\n+    if(!model)\n+        return;\n     if(!saveCurrentRow())\n     {\n         switch(model->getEditStatus())"
      },
      {
        "sha": "fe0987178cee1ea635c73a71f072bbcc60f884a0",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -143,30 +143,34 @@ void OverviewPage::setNumTransactions(int count)\n void OverviewPage::setModel(WalletModel *model)\n {\n     this->model = model;\n+    if(model)\n+    {\n+        // Set up transaction list\n+        TransactionFilterProxy *filter = new TransactionFilterProxy();\n+        filter->setSourceModel(model->getTransactionTableModel());\n+        filter->setLimit(NUM_ITEMS);\n+        filter->setDynamicSortFilter(true);\n+        filter->setSortRole(Qt::EditRole);\n+        filter->sort(TransactionTableModel::Status, Qt::DescendingOrder);\n \n-    // Set up transaction list\n-    TransactionFilterProxy *filter = new TransactionFilterProxy();\n-    filter->setSourceModel(model->getTransactionTableModel());\n-    filter->setLimit(NUM_ITEMS);\n-    filter->setDynamicSortFilter(true);\n-    filter->setSortRole(Qt::EditRole);\n-    filter->sort(TransactionTableModel::Status, Qt::DescendingOrder);\n-\n-    ui->listTransactions->setModel(filter);\n-    ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n+        ui->listTransactions->setModel(filter);\n+        ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n \n-    // Keep up to date with wallet\n-    setBalance(model->getBalance(), model->getUnconfirmedBalance());\n-    connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n+        // Keep up to date with wallet\n+        setBalance(model->getBalance(), model->getUnconfirmedBalance());\n+        connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n \n-    setNumTransactions(model->getNumTransactions());\n-    connect(model, SIGNAL(numTransactionsChanged(int)), this, SLOT(setNumTransactions(int)));\n+        setNumTransactions(model->getNumTransactions());\n+        connect(model, SIGNAL(numTransactionsChanged(int)), this, SLOT(setNumTransactions(int)));\n \n-    connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(displayUnitChanged()));\n+        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(displayUnitChanged()));\n+    }\n }\n \n void OverviewPage::displayUnitChanged()\n {\n+    if(!model || !model->getOptionsModel())\n+        return;\n     if(currentBalance != -1)\n         setBalance(currentBalance, currentUnconfirmedBalance);\n "
      },
      {
        "sha": "762f27dfa66fa1e487269496f8a4f72caabc0b24",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -43,9 +43,11 @@ void SendCoinsDialog::setModel(WalletModel *model)\n             entry->setModel(model);\n         }\n     }\n-\n-    setBalance(model->getBalance(), model->getUnconfirmedBalance());\n-    connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n+    if(model)\n+    {\n+        setBalance(model->getBalance(), model->getUnconfirmedBalance());\n+        connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n+    }\n }\n \n SendCoinsDialog::~SendCoinsDialog()\n@@ -57,6 +59,10 @@ void SendCoinsDialog::on_sendButton_clicked()\n {\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n+\n+    if(!model)\n+        return;\n+\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n@@ -255,6 +261,9 @@ void SendCoinsDialog::handleURL(const QUrl *url)\n void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n+    if(!model || !model->getOptionsModel())\n+        return;\n+\n     int unit = model->getOptionsModel()->getDisplayUnit();\n     ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balance));\n }"
      },
      {
        "sha": "23b11ccddeb569f37ce4e657b2472a09a74c093c",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -44,6 +44,8 @@ void SendCoinsEntry::on_pasteButton_clicked()\n \n void SendCoinsEntry::on_addressBookButton_clicked()\n {\n+    if(!model)\n+        return;\n     AddressBookPage dlg(AddressBookPage::ForSending, AddressBookPage::SendingTab, this);\n     dlg.setModel(model->getAddressTableModel());\n     if(dlg.exec())\n@@ -55,6 +57,8 @@ void SendCoinsEntry::on_addressBookButton_clicked()\n \n void SendCoinsEntry::on_payTo_textChanged(const QString &address)\n {\n+    if(!model)\n+        return;\n     ui->addAsLabel->setText(model->getAddressTableModel()->labelForAddress(address));\n }\n \n@@ -74,7 +78,7 @@ void SendCoinsEntry::clear()\n     ui->addAsLabel->clear();\n     ui->payAmount->clear();\n     ui->payTo->setFocus();\n-    if(model)\n+    if(model && model->getOptionsModel())\n     {\n         ui->payAmount->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n     }"
      },
      {
        "sha": "2dcbf1ea8ac82e7d258de44f7c41a6a28d2644aa",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 26,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dead0ff8cd90eb39f1d9278539d2b3579982b3de/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=dead0ff8cd90eb39f1d9278539d2b3579982b3de",
        "patch": "@@ -155,36 +155,39 @@ TransactionView::TransactionView(QWidget *parent) :\n void TransactionView::setModel(WalletModel *model)\n {\n     this->model = model;\n-\n-    transactionProxyModel = new TransactionFilterProxy(this);\n-    transactionProxyModel->setSourceModel(model->getTransactionTableModel());\n-    transactionProxyModel->setDynamicSortFilter(true);\n-\n-    transactionProxyModel->setSortRole(Qt::EditRole);\n-\n-    transactionView->setModel(transactionProxyModel);\n-    transactionView->setAlternatingRowColors(true);\n-    transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n-    transactionView->setSelectionMode(QAbstractItemView::ExtendedSelection);\n-    transactionView->setSortingEnabled(true);\n-    transactionView->sortByColumn(TransactionTableModel::Status, Qt::DescendingOrder);\n-    transactionView->verticalHeader()->hide();\n-\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Status, 23);\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Date, 120);\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Type, 120);\n-    transactionView->horizontalHeader()->setResizeMode(\n-            TransactionTableModel::ToAddress, QHeaderView::Stretch);\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Amount, 100);\n-\n+    if(model)\n+    {\n+        transactionProxyModel = new TransactionFilterProxy(this);\n+        transactionProxyModel->setSourceModel(model->getTransactionTableModel());\n+        transactionProxyModel->setDynamicSortFilter(true);\n+\n+        transactionProxyModel->setSortRole(Qt::EditRole);\n+\n+        transactionView->setModel(transactionProxyModel);\n+        transactionView->setAlternatingRowColors(true);\n+        transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n+        transactionView->setSelectionMode(QAbstractItemView::ExtendedSelection);\n+        transactionView->setSortingEnabled(true);\n+        transactionView->sortByColumn(TransactionTableModel::Status, Qt::DescendingOrder);\n+        transactionView->verticalHeader()->hide();\n+\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Status, 23);\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Date, 120);\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Type, 120);\n+        transactionView->horizontalHeader()->setResizeMode(\n+                TransactionTableModel::ToAddress, QHeaderView::Stretch);\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Amount, 100);\n+    }\n }\n \n void TransactionView::chooseDate(int idx)\n {\n+    if(!transactionProxyModel)\n+        return;\n     QDate current = QDate::currentDate();\n     dateRangeWidget->setVisible(false);\n     switch(dateWidget->itemData(idx).toInt())\n@@ -231,17 +234,23 @@ void TransactionView::chooseDate(int idx)\n \n void TransactionView::chooseType(int idx)\n {\n+    if(!transactionProxyModel)\n+        return;\n     transactionProxyModel->setTypeFilter(\n         typeWidget->itemData(idx).toInt());\n }\n \n void TransactionView::changedPrefix(const QString &prefix)\n {\n+    if(!transactionProxyModel)\n+        return;\n     transactionProxyModel->setAddressPrefix(prefix);\n }\n \n void TransactionView::changedAmount(const QString &amount)\n {\n+    if(!transactionProxyModel)\n+        return;\n     qint64 amount_parsed = 0;\n     if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n     {\n@@ -294,6 +303,8 @@ void TransactionView::contextualMenu(const QPoint &point)\n \n void TransactionView::copyAddress()\n {\n+    if(!transactionView->selectionModel())\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n@@ -303,6 +314,8 @@ void TransactionView::copyAddress()\n \n void TransactionView::copyLabel()\n {\n+    if(!transactionView->selectionModel())\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n@@ -312,10 +325,14 @@ void TransactionView::copyLabel()\n \n void TransactionView::editLabel()\n {\n+    if(!transactionView->selectionModel() ||!model)\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n         AddressTableModel *addressBook = model->getAddressTableModel();\n+        if(!addressBook)\n+            return;\n         QString address = selection.at(0).data(TransactionTableModel::AddressRole).toString();\n         if(address.isEmpty())\n         {\n@@ -354,6 +371,8 @@ void TransactionView::editLabel()\n \n void TransactionView::showDetails()\n {\n+    if(!transactionView->selectionModel())\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n@@ -400,6 +419,8 @@ QWidget *TransactionView::createDateRangeWidget()\n \n void TransactionView::dateRangeChanged()\n {\n+    if(!transactionProxyModel)\n+        return;\n     transactionProxyModel->setDateRange(\n             QDateTime(dateFrom->date()),\n             QDateTime(dateTo->date()).addDays(1));"
      }
    ]
  }
]