[
  {
    "sha": "66576c4fd532ac18b8b355ea93d25581a2c15654",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjU3NmM0ZmQ1MzJhYzE4YjhiMzU1ZWE5M2QyNTU4MWEyYzE1NjU0",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-01-15T07:26:51Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-01-15T19:19:31Z"
      },
      "message": "test: Clear forced -walletdir setting after wallet init_tests\n\nLeaving this value set interfered with the CreateWallet test if it happened to execute later in the test ordering. Specifically it would cause CreateWallet test to write data to the current directory instead of temporary test directory.",
      "tree": {
        "sha": "236a50bffc8bc85f701ea877749d80231db20a4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/236a50bffc8bc85f701ea877749d80231db20a4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66576c4fd532ac18b8b355ea93d25581a2c15654",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66576c4fd532ac18b8b355ea93d25581a2c15654",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66576c4fd532ac18b8b355ea93d25581a2c15654",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66576c4fd532ac18b8b355ea93d25581a2c15654/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32e59fc371080def4b0be2adbe6486a4ba059972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e59fc371080def4b0be2adbe6486a4ba059972",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32e59fc371080def4b0be2adbe6486a4ba059972"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f035a70a20a77270942ab0688d77be3b08100741",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66576c4fd532ac18b8b355ea93d25581a2c15654/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66576c4fd532ac18b8b355ea93d25581a2c15654/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=66576c4fd532ac18b8b355ea93d25581a2c15654",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <fs.h>\n+#include <univalue.h>\n #include <util/check.h>\n #include <util/system.h>\n \n@@ -37,6 +38,9 @@ InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainNam\n \n InitWalletDirTestingSetup::~InitWalletDirTestingSetup()\n {\n+    gArgs.LockSettings([&](util::Settings& settings) {\n+        settings.forced_settings.erase(\"walletdir\");\n+    });\n     fs::current_path(m_cwd);\n }\n "
      }
    ]
  },
  {
    "sha": "da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTljYWExY2VkZDY5NzAyYWVhNDRjYjQ0YjJmZDBhMmQ2ZDU2OTE2",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-01-13T14:44:40Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-01-15T21:48:15Z"
      },
      "message": "Replace fs::absolute calls with AbsPathJoin calls\n\nThis adds better test coverage and will make it easier in #20744 to remove our dependency on the two-argument boost::filesystem::absolute() function which does not have a direct equivalent in C++17.",
      "tree": {
        "sha": "fc2198dea8c7c5f0cd91b7df259afd1a4c90efd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc2198dea8c7c5f0cd91b7df259afd1a4c90efd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66576c4fd532ac18b8b355ea93d25581a2c15654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66576c4fd532ac18b8b355ea93d25581a2c15654",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66576c4fd532ac18b8b355ea93d25581a2c15654"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 41,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4f20ca4d28f5fbc4aa7519498cda6cfd8b34e30b",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -31,6 +31,12 @@ FILE *fopen(const fs::path& p, const char *mode)\n #endif\n }\n \n+fs::path AbsPathJoin(const fs::path& base, const fs::path& path)\n+{\n+    assert(base.is_absolute());\n+    return fs::absolute(path, base);\n+}\n+\n #ifndef WIN32\n \n static std::string GetErrorReason()"
      },
      {
        "sha": "d77b90be66c42792cbf0eae3d0dd64c61f1d7549",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -21,6 +21,17 @@ namespace fs = boost::filesystem;\n namespace fsbridge {\n     FILE *fopen(const fs::path& p, const char *mode);\n \n+    /**\n+     * Helper function for joining two paths\n+     *\n+     * @param[in] base  Base path\n+     * @param[in] path  Path to combine with base\n+     * @returns path unchanged if it is an absolute path, otherwise returns base joined with path. Returns base unchanged if path is empty.\n+     * @pre  Base path must be absolute\n+     * @post Returned path will always be absolute\n+     */\n+    fs::path AbsPathJoin(const fs::path& base, const fs::path& path);\n+\n     class FileLock\n     {\n     public:"
      },
      {
        "sha": "7a336c1ad6a033c8efc47f0ee832407b8df9c935",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -2399,10 +2399,10 @@ static RPCHelpMan dumptxoutset()\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    fs::path path = fs::absolute(request.params[0].get_str(), GetDataDir());\n+    const fs::path path = fsbridge::AbsPathJoin(GetDataDir(), request.params[0].get_str());\n     // Write to a temporary path and then move into `path` on completion\n     // to avoid confusion due to an interruption.\n-    fs::path temppath = fs::absolute(request.params[0].get_str() + \".incomplete\", GetDataDir());\n+    const fs::path temppath = fsbridge::AbsPathJoin(GetDataDir(), request.params[0].get_str() + \".incomplete\");\n \n     if (fs::exists(path)) {\n         throw JSONRPCError("
      },
      {
        "sha": "ec487aa3ff909c264abac60066e04e25b9d533e2",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -52,6 +52,23 @@ BOOST_AUTO_TEST_CASE(fsbridge_fstream)\n         file >> input_buffer;\n         BOOST_CHECK_EQUAL(input_buffer, \"bitcoin\");\n     }\n+    {\n+        // Join an absolute path and a relative path.\n+        fs::path p = fsbridge::AbsPathJoin(tmpfolder, \"fs_tests_\u20bf_\ud83c\udfc3\");\n+        BOOST_CHECK(p.is_absolute());\n+        BOOST_CHECK_EQUAL(tmpfile1, p);\n+    }\n+    {\n+        // Join two absolute paths.\n+        fs::path p = fsbridge::AbsPathJoin(tmpfile1, tmpfile2);\n+        BOOST_CHECK(p.is_absolute());\n+        BOOST_CHECK_EQUAL(tmpfile2, p);\n+    }\n+    {\n+        // Ensure joining with empty paths does not add trailing path components.\n+        BOOST_CHECK_EQUAL(tmpfile1, fsbridge::AbsPathJoin(tmpfile1, \"\"));\n+        BOOST_CHECK_EQUAL(tmpfile1, fsbridge::AbsPathJoin(tmpfile1, {}));\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d1fb9216429eee8e8786907d1d0b3c34e2c76902",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -398,7 +398,7 @@ bool ArgsManager::GetSettingsPath(fs::path* filepath, bool temp) const\n     }\n     if (filepath) {\n         std::string settings = GetArg(\"-settings\", BITCOIN_SETTINGS_FILENAME);\n-        *filepath = fs::absolute(temp ? settings + \".tmp\" : settings, GetDataDir(/* net_specific= */ true));\n+        *filepath = fsbridge::AbsPathJoin(GetDataDir(/* net_specific= */ true), temp ? settings + \".tmp\" : settings);\n     }\n     return true;\n }\n@@ -1311,7 +1311,7 @@ fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n     if (path.is_absolute()) {\n         return path;\n     }\n-    return fs::absolute(path, GetDataDir(net_specific));\n+    return fsbridge::AbsPathJoin(GetDataDir(net_specific), path);\n }\n \n void ScheduleBatchPriority()"
      },
      {
        "sha": "30832f983b84bbbf8f4b3a6d065dbc768e457914",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -62,7 +62,7 @@ bool VerifyWallets(interfaces::Chain& chain)\n     std::set<fs::path> wallet_paths;\n \n     for (const auto& wallet_file : gArgs.GetArgs(\"-wallet\")) {\n-        const fs::path path = fs::absolute(wallet_file, GetWalletDir());\n+        const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), wallet_file);\n \n         if (!wallet_paths.insert(path).second) {\n             chain.initWarning(strprintf(_(\"Ignoring duplicate -wallet %s.\"), wallet_file));"
      },
      {
        "sha": "723552860a9dc83bfa2dd4fe3ee95ac906374aa4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -3780,7 +3780,7 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     // 2. Path to an existing directory.\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n-    const fs::path& wallet_path = fs::absolute(name, GetWalletDir());\n+    const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), name);\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||"
      },
      {
        "sha": "bc90491a2c152ecf65aa9ac7d73628606c40a532",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9caa1cedd69702aea44cb44b2fd0a2d6d56916/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=da9caa1cedd69702aea44cb44b2fd0a2d6d56916",
        "patch": "@@ -105,7 +105,7 @@ static void WalletShowInfo(CWallet* wallet_instance)\n \n bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command, const std::string& name)\n {\n-    fs::path path = fs::absolute(name, GetWalletDir());\n+    const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), name);\n \n     if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");"
      }
    ]
  }
]