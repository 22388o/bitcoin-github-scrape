[
  {
    "sha": "38bfca6bb2ad68719415e9c54a981441052da072",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGJmY2E2YmIyYWQ2ODcxOTQxNWU5YzU0YTk4MTQ0MTA1MmRhMDcy",
    "commit": {
      "author": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-11-10T17:11:22Z"
      },
      "committer": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2019-06-02T17:25:03Z"
      },
      "message": "Added comments referencing multiple CVEs in tests and production code.\n\nThis commit adds comments referencing multiple CVEs both in production and test code.\nCVEs covered in this commit:\n\nCVE-2010-5137\nCVE-2010-5139\nCVE-2010-5141\nCVE-2012-1909\nCVE-2012-2459\nCVE-2012-3789\nCVE-2018-17144",
      "tree": {
        "sha": "fb2686c0635b1e4db76eb779df0fd2800d0a7c53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb2686c0635b1e4db76eb779df0fd2800d0a7c53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38bfca6bb2ad68719415e9c54a981441052da072",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38bfca6bb2ad68719415e9c54a981441052da072",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38bfca6bb2ad68719415e9c54a981441052da072",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38bfca6bb2ad68719415e9c54a981441052da072/comments",
    "author": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "00ebbbd1ab7ff4e8d68b5f2fe813bc8d8b75adae",
        "filename": "src/consensus/tx_check.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/src/consensus/tx_check.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/src/consensus/tx_check.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.cpp?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -18,7 +18,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n-    // Check for negative or overflow output values\n+    // Check for negative or overflow output values (see CVE-2010-5139)\n     CAmount nValueOut = 0;\n     for (const auto& txout : tx.vout)\n     {"
      },
      {
        "sha": "5c66c4022a481a1b3fc1c4aee06b065ea7d00723",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -2513,7 +2513,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n-                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded (see CVE-2012-3789)\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n                 if (nEvicted > 0) {"
      },
      {
        "sha": "a819a65d24cbe1f5654726d7d4514d917aa5adcb",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -334,7 +334,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 opcode == OP_MOD ||\n                 opcode == OP_LSHIFT ||\n                 opcode == OP_RSHIFT)\n-                return set_error(serror, SCRIPT_ERR_DISABLED_OPCODE); // Disabled opcodes.\n+                return set_error(serror, SCRIPT_ERR_DISABLED_OPCODE); // Disabled opcodes (CVE-2010-5137).\n \n             // With SCRIPT_VERIFY_CONST_SCRIPTCODE, OP_CODESEPARATOR in non-segwit script is rejected even in an unexecuted branch\n             if (opcode == OP_CODESEPARATOR && sigversion == SigVersion::BASE && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n@@ -1483,6 +1483,8 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n     }\n \n+    // scriptSig and scriptPubKey must be evaluated sequentially on the same stack\n+    // rather than being simply concatenated (see CVE-2010-5141)\n     std::vector<std::vector<unsigned char> > stack, stackCopy;\n     if (!EvalScript(stack, scriptSig, flags, checker, SigVersion::BASE, serror))\n         // serror is set"
      },
      {
        "sha": "3241f32f5683d72fad282ceb439576ab22d1490c",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -829,15 +829,16 @@\n [\"NOP\", \"2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n [\"1\", \"2 3 2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n \n+\n+[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"TEST DISABLED OP CODES (CVE-2010-5137)\"],\n [\"'a' 'b'\", \"CAT\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n [\"'a' 'b' 0\", \"IF CAT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n [\"'abc' 1 1\", \"SUBSTR\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n [\"'abc' 1 1 0\", \"IF SUBSTR ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n [\"'abc' 2 0\", \"IF LEFT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LEFT disabled\"],\n [\"'abc' 2 0\", \"IF RIGHT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RIGHT disabled\"],\n-\n-[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n [\"'abc'\", \"IF INVERT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"INVERT disabled\"],\n [\"1 2 0 IF AND ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"AND disabled\"],\n [\"1 2 0 IF OR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"OR disabled\"],"
      },
      {
        "sha": "d0ce3f78fca5a1cca8693b7b7f6ac8283f3a07a5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -1865,7 +1865,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n     // can be duplicated to remove the ability to spend the first instance -- even after\n     // being sent to another address.\n-    // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n+    // See BIP30, CVE-2012-1909, and http://r6.ca/blog/20120206T005236Z.html for more information.\n     // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n     // already refuses previously-known transaction ids entirely.\n     // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n@@ -3136,6 +3136,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n             return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-cb-multiple\", \"more than one coinbase\");\n \n     // Check transactions\n+    // Must check for duplicate inputs (see CVE-2018-17144)\n     for (const auto& tx : block.vtx)\n         if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(state.GetReason(), false, state.GetRejectCode(), state.GetRejectReason(),"
      },
      {
        "sha": "ce353b227210f19627a6ef689931de5aae20e449",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -787,7 +787,7 @@ def run_test(self):\n         #\n         # Blocks are not allowed to contain a transaction whose id matches that of an earlier,\n         # not-fully-spent transaction in the same chain. To test, make identical coinbases;\n-        # the second one should be rejected.\n+        # the second one should be rejected. See also CVE-2012-1909.\n         #\n         self.log.info(\"Reject a block with a transaction with a duplicate hash of a previous transaction (BIP30)\")\n         self.move_tip(60)"
      },
      {
        "sha": "a94187ab9073f86698b7805233c875b381413046",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -212,6 +212,7 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n \n+        # The following two validations prevent overflow of the output amounts (see CVE-2010-5139).\n         self.log.info('A transaction with too large output value')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].nValue = 21000000 * COIN + 1"
      },
      {
        "sha": "8ba3cc7d72f14275d0b4396aaeb7cfeeeebf0314",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bfca6bb2ad68719415e9c54a981441052da072/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bfca6bb2ad68719415e9c54a981441052da072/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=38bfca6bb2ad68719415e9c54a981441052da072",
        "patch": "@@ -53,10 +53,11 @@ def run_test(self):\n         block_time = best_block[\"time\"] + 1\n \n         # Use merkle-root malleability to generate an invalid block with\n-        # same blockheader.\n+        # same blockheader (CVE-2012-2459).\n         # Manufacture a block with 3 transactions (coinbase, spend of prior\n         # coinbase, spend of that spend).  Duplicate the 3rd transaction to\n         # leave merkle root and blockheader unchanged but invalidate the block.\n+        # For more information on merkle-root malleability see src/consensus/merkle.cpp.\n         self.log.info(\"Test merkle root malleability.\")\n \n         block2 = create_block(tip, create_coinbase(height), block_time)\n@@ -81,7 +82,7 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, success=False, reject_reason='bad-txns-duplicate')\n \n-        # Check transactions for duplicate inputs\n+        # Check transactions for duplicate inputs (CVE-2018-17144)\n         self.log.info(\"Test duplicate input block.\")\n \n         block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])"
      }
    ]
  },
  {
    "sha": "0c62e3aa73839e97e65a3155e06a98d84b700a1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzYyZTNhYTczODM5ZTk3ZTY1YTMxNTVlMDZhOThkODRiNzAwYTFl",
    "commit": {
      "author": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-11-10T03:31:49Z"
      },
      "committer": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2019-06-02T17:25:03Z"
      },
      "message": "New regression testing for CVE-2018-17144, CVE-2012-2459, and CVE-2010-5137.\n\nCVE-2018-17144 and CVE-2012-2459 are only partially tested for regression.\n- CVE-2018-17144 is not tested for the inflation bug.\n- CVE-2012-2459 is only tested for the mutated block being rejected, not\nfor the original block being accepted afterwards.\n\nThis commit fixes that limitation.\n\nAlso added functional test for CVE-2010-5137.",
      "tree": {
        "sha": "264aaaeaab60d647b9362c1b00880d5a1adc7d0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/264aaaeaab60d647b9362c1b00880d5a1adc7d0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c62e3aa73839e97e65a3155e06a98d84b700a1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c62e3aa73839e97e65a3155e06a98d84b700a1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c62e3aa73839e97e65a3155e06a98d84b700a1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c62e3aa73839e97e65a3155e06a98d84b700a1e/comments",
    "author": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38bfca6bb2ad68719415e9c54a981441052da072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38bfca6bb2ad68719415e9c54a981441052da072",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38bfca6bb2ad68719415e9c54a981441052da072"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 88,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9dc06422c4211c3f71b79dca905075a2c9cf3a3d",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c62e3aa73839e97e65a3155e06a98d84b700a1e/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c62e3aa73839e97e65a3155e06a98d84b700a1e/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=0c62e3aa73839e97e65a3155e06a98d84b700a1e",
        "patch": "@@ -24,7 +24,24 @@\n from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint\n from test_framework import script as sc\n from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS\n-\n+from test_framework.script import (\n+    CScript,\n+    OP_CAT,\n+    OP_SUBSTR,\n+    OP_LEFT,\n+    OP_RIGHT,\n+    OP_INVERT,\n+    OP_AND,\n+    OP_OR,\n+    OP_XOR,\n+    OP_2MUL,\n+    OP_2DIV,\n+    OP_MUL,\n+    OP_DIV,\n+    OP_MOD,\n+    OP_LSHIFT,\n+    OP_RSHIFT\n+)\n basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])\n \n \n@@ -178,7 +195,44 @@ def get_tx(self):\n             script_pub_key=lotsa_checksigs,\n             amount=1)\n \n+def getDisabledOpcodeTemplate(opcode):\n+    \"\"\" Creates disabled opcode tx template class\"\"\"\n+    def get_tx(self):\n+        tx = CTransaction()\n+        vin = self.valid_txin\n+        vin.scriptSig = CScript([opcode])\n+        tx.vin.append(vin)\n+        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+    return type('DisabledOpcode_' + str(opcode), (BadTxTemplate,), {\n+        'reject_reason': \"disabled opcode\",\n+        'expect_disconnect': True,\n+        'get_tx': get_tx,\n+        'valid_in_block' : True\n+        })\n+\n+# Disabled opcode tx templates (CVE-2010-5137)\n+DisabledOpcodeTemplates = [getDisabledOpcodeTemplate(opcode) for opcode in [\n+    OP_CAT,\n+    OP_SUBSTR,\n+    OP_LEFT,\n+    OP_RIGHT,\n+    OP_INVERT,\n+    OP_AND,\n+    OP_OR,\n+    OP_XOR,\n+    OP_2MUL,\n+    OP_2DIV,\n+    OP_MUL,\n+    OP_DIV,\n+    OP_MOD,\n+    OP_LSHIFT,\n+    OP_RSHIFT]]\n+\n \n def iter_all_templates():\n     \"\"\"Iterate through all bad transaction template types.\"\"\"\n     return BadTxTemplate.__subclasses__()\n+"
      },
      {
        "sha": "905534b862f8d4b92c9e2db719de03cdcc2e8523",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 33,
        "deletions": 6,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c62e3aa73839e97e65a3155e06a98d84b700a1e/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c62e3aa73839e97e65a3155e06a98d84b700a1e/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=0c62e3aa73839e97e65a3155e06a98d84b700a1e",
        "patch": "@@ -85,12 +85,13 @@ def run_test(self):\n         # Check transactions for duplicate inputs (CVE-2018-17144)\n         self.log.info(\"Test duplicate input block.\")\n \n-        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n-        block2_orig.vtx[2].rehash()\n-        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n-        block2_orig.rehash()\n-        block2_orig.solve()\n-        node.p2p.send_blocks_and_test([block2_orig], node, success=False, reject_reason='bad-txns-inputs-duplicate')\n+        block2_dup = copy.deepcopy(block2_orig)\n+        block2_dup.vtx[2].vin.append(block2_dup.vtx[2].vin[0])\n+        block2_dup.vtx[2].rehash()\n+        block2_dup.hashMerkleRoot = block2_dup.calc_merkle_root()\n+        block2_dup.rehash()\n+        block2_dup.solve()\n+        node.p2p.send_blocks_and_test([block2_dup], node, success=False, reject_reason='bad-txns-inputs-duplicate')\n \n         self.log.info(\"Test very broken block.\")\n \n@@ -106,5 +107,31 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block3], node, success=False, reject_reason='bad-cb-amount')\n \n \n+        # Complete testing of CVE-2012-2459 by sending the original block.\n+        # It should be accepted even though it has the same hash as the mutated one.\n+\n+        self.log.info(\"Test accepting original block after rejecting its mutated version.\")\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=True, timeout=5)\n+\n+        # Update tip info\n+        height += 1\n+        block_time += 1\n+        tip = int(block2_orig.hash, 16)\n+\n+        # Complete testing of CVE-2018-17144, by checking for the inflation bug.\n+        # Create a block that spends the output of a tx in a previous block.\n+        block4 = create_block(tip, create_coinbase(height), block_time)\n+        tx3 = create_tx_with_script(tx2, 0, script_sig=b'\\x51', amount=50 * COIN)\n+\n+        # Duplicates input\n+        tx3.vin.append(tx3.vin[0])\n+        tx3.rehash()\n+        block4.vtx.append(tx3)\n+        block4.hashMerkleRoot = block4.calc_merkle_root()\n+        block4.rehash()\n+        block4.solve()\n+        self.log.info(\"Test inflation by duplicating input\")\n+        node.p2p.send_blocks_and_test([block4], node, success=False,  reject_reason='bad-txns-inputs-duplicate')\n+\n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      }
    ]
  }
]