[
  {
    "sha": "7c1ac70c01536a8dd5b455f5b268a087cecf10a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzFhYzcwYzAxNTM2YThkZDViNDU1ZjViMjY4YTA4N2NlY2YxMGEx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-20T16:15:17Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-22T13:29:00Z"
      },
      "message": "tests: Don't assume presence of __builtin_mul_overflow in MultiplicationOverflow(...) fuzzing harness",
      "tree": {
        "sha": "e485eec39d247f7eeb81c7861846d5dae149b54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e485eec39d247f7eeb81c7861846d5dae149b54c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c1ac70c01536a8dd5b455f5b268a087cecf10a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c1ac70c01536a8dd5b455f5b268a087cecf10a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c1ac70c01536a8dd5b455f5b268a087cecf10a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c1ac70c01536a8dd5b455f5b268a087cecf10a1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a4b158c18b5527b41e0d7fc541eb2bd7bbb6ba7b",
        "filename": "src/test/fuzz/multiplication_overflow.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c1ac70c01536a8dd5b455f5b268a087cecf10a1/src/test/fuzz/multiplication_overflow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c1ac70c01536a8dd5b455f5b268a087cecf10a1/src/test/fuzz/multiplication_overflow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/multiplication_overflow.cpp?ref=7c1ac70c01536a8dd5b455f5b268a087cecf10a1",
        "patch": "@@ -10,19 +10,33 @@\n #include <string>\n #include <vector>\n \n+#if defined(__has_builtin)\n+#if __has_builtin(__builtin_mul_overflow)\n+#define HAVE_BUILTIN_MUL_OVERFLOW\n+#endif\n+#elif defined(__GNUC__) && (__GNUC__ >= 5)\n+#define HAVE_BUILTIN_MUL_OVERFLOW\n+#endif\n+\n namespace {\n template <typename T>\n void TestMultiplicationOverflow(FuzzedDataProvider& fuzzed_data_provider)\n {\n     const T i = fuzzed_data_provider.ConsumeIntegral<T>();\n     const T j = fuzzed_data_provider.ConsumeIntegral<T>();\n     const bool is_multiplication_overflow_custom = MultiplicationOverflow(i, j);\n+#if defined(HAVE_BUILTIN_MUL_OVERFLOW)\n     T result_builtin;\n     const bool is_multiplication_overflow_builtin = __builtin_mul_overflow(i, j, &result_builtin);\n     assert(is_multiplication_overflow_custom == is_multiplication_overflow_builtin);\n     if (!is_multiplication_overflow_custom) {\n         assert(i * j == result_builtin);\n     }\n+#else\n+    if (!is_multiplication_overflow_custom) {\n+        (void)(i * j);\n+    }\n+#endif\n }\n } // namespace\n \n@@ -38,5 +52,4 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     TestMultiplicationOverflow<char>(fuzzed_data_provider);\n     TestMultiplicationOverflow<unsigned char>(fuzzed_data_provider);\n     TestMultiplicationOverflow<signed char>(fuzzed_data_provider);\n-    TestMultiplicationOverflow<bool>(fuzzed_data_provider);\n }"
      }
    ]
  }
]