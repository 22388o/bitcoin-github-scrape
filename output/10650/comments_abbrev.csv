luke-jr,2017-06-22T07:56:47Z,This would make much more sense as `?wallet=WALLETID` than trying to emulate a path...,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310305250,310305250,
jonasschnelli,2017-06-22T09:30:42Z,"> This would make much more sense as ?wallet=WALLETID than trying to emulate a path...\n\nNo. Please no query string.\nThat doesn't make sense to me.\n\nPOST data to `/wallet/<name>` seems more reasonable to me then POST data to `/?wallet=<name>`",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310328049,310328049,
laanwj,2017-06-22T13:36:28Z,"Concept ACK, will review.\n\n> POST data to /wallet/<name> seems more reasonable to me then POST data to /?wallet=<name>\n\nI tend to agree:\n- The use of query strings is usually avoided in modern APIs because they make URLs less readable, compared to path segments.\n- Also for POST the query data is in the payload. It is very uncommon  to have query arguments in the URL.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310382168,310382168,
ryanofsky,2017-06-22T15:06:04Z,"I guess personally I don't see how `/?wallet=<name>` is ""less readable"" then `/wallet/<name>` and I think I mentioned some practical reasons above for wanting to prefer query strings, but I don't have a very strong preference.\n\nIf we want to go down the road of encoding request metadata in path segments instead of query parameters maybe we should put more thought into what the path hierarchy s",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310408400,310408400,
gmaxwell,2017-06-22T18:42:02Z,"My initial impression was ""I thought we were going to put an RPC api version in the path"" too. FWIW.  I don't know what the norms are in this kind of rpc thing.  Are there parallels in hosted wallet service APIs in the Bitcoin space already?",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310467327,310467327,
jonasschnelli,2017-06-22T19:39:53Z,"Yes. Versioning makes probably sense at this point.\nThe often seen design advice is `/api/v1/wallet?id=walletid`, though not sure if we want the `/api/`.\n\nI could think of `/v1/wallet/walletID`.\n\nThe query string makes sense if we expect multiple non-hierarchical inputs.\n\nIf we start to use a URI query-string == non-hierarchical inputs, where would be the main difference between the ",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310481482,310481482,
ryanofsky,2017-06-22T20:37:04Z,"> If we start to use a URI query-string == non-hierarchical inputs, where would be the main difference between the query-string key/value level and the JSON key/value level?\n\nI think for simplicity we should almost always prefer using JSON-RPC parameters for passing request options. If I were designing a bitcoin JSON-RPC API from scratch, I'd require a fixed, basic, future-proof request-uri li",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310495487,310495487,
ryanofsky,2017-06-22T23:55:42Z,Another multiwallet RPC implemention for discussion: #10653,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310533555,310533555,
jonasschnelli,2017-06-23T08:35:54Z,"Added the /v1/ path element.\n\n@ryanofsky pointed out that we should urlencode/decode the walletID in the path element.\nNot having to do this is one advantage of putting the walletID into the JSON part (but again, having the wallet selector in the JSON layer makes later server separation harder).\n\nThe walletID should in future not be a representation of the filename. User should be able t",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310606962,310606962,
ryanofsky,2017-06-23T11:06:23Z,"> but again, having the wallet selector in the JSON layer makes later server separation harder\n\nWhat's this about? I think I missed this point...\n\n> Ideally, we write the walletID into the wallet database. There we could only allow alphanumeric chars.\n\nI don't think I understand the advantages of adding a ""walletID."" The user already has to choose one name for the wallet when they make",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310638177,310638177,
jonasschnelli,2017-06-23T11:34:28Z,">> but again, having the wallet selector in the JSON layer makes later server separation harder\n\n> What's this about? I think I missed this point...\n\nIf we would decouple the wallet completely, a specific endpoint could probably be the better approach to switch between processes or/and even implementations.\n\n> I don't think I understand the advantages of adding a ""walletID."" The user a",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310643221,310643221,
ryanofsky,2017-06-23T19:41:27Z,"To summarize current state of things, we have 3 (nonexclusive) choices for allowing existing RPC methods work on multiple wallets:\n\n1. Add optional ""wallet"" JSON-RPC parameters to wallet RPC methods. There implementations of this in #10653 and #10661.\n2. Add a wallet option to the JSON-RPC endpoint URL. Could just be a query option, or could be baked into structure of a new request-path sche",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-310755811,310755811,
jnewbery,2017-06-28T14:03:25Z,"Long term, here's one suggestion of how this could work:\n\n1. each wallet runs in its own process, and binds to a separate local port. Users can access RPCs for wallet commands directly on that port\n2. each wallet has its own rpcauth config, to control access to that wallet. A single user may have access to multiple wallets\n3. The bitcoin-server RPC server can dispatch wallet commands to in",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-311669411,311669411,
jonasschnelli,2017-07-07T14:44:12Z,"Rebased and overhauled.\nAdded urlencode/urldecode via libevent (thanks @promag for the hint).\nThere is now a `/v1/node/` and a `/v1/wallet/<filename>` endpoint.\nThe endpoint-split is not very mature yet, but does the job (we should then mark it as experimental in the 0.15 release notes).\n\nWhat can be done outside – this already large – PR:\n* Better API versioning\n* RPC tests multiwal",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-313702138,313702138,
theuni,2017-07-12T18:25:36Z,@jonasschnelli build change looks fine.,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-314855793,314855793,
sipa,2017-07-12T19:18:16Z,"Concept ACK on this approach for multiwallet, but needs rebase and addressing of comments.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-314869863,314869863,
jnewbery,2017-07-12T21:02:50Z,"It'd be great to get this in for 0.15. I'm holding off on my review until @TheBlueMatt and @ryanofsky comments are addressed.\n\nIf there's anything I can do to help this be ready in time for feature freeze, let me know.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-314896184,314896184,
ryanofsky,2017-07-13T12:43:20Z,"I just want to point out again that while I am fine with adding support for multiwallet RPC calls via URL endpoints, we do have a vastly simpler alternative available which in my opinion (still) it would be better to roll out first: multiwallet RPC access via named argument https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/multiparam.\n\nDisadvantages of https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315066331,315066331,
jonasschnelli,2017-07-13T15:58:26Z,"Rebased and tried to address ~~nits~~points.\nAdded @jnewbery's AuthProxy approach.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315122371,315122371,
jonasschnelli,2017-07-13T16:33:15Z,Also added the bitcoin-cli help string for `-wallet`.,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315132140,315132140,
jonasschnelli,2017-07-13T19:27:34Z,"Fixed reported points:\n* Disabled default wallet selecting when multiple wallets are present\n* Avoid registering multiple of the same endpoints\n* Removed cs_main lock for `vpwallets` (lock can be added once we can load wallets outside of init)\n* Fixed AuthProxy endpoint ""/"" problem",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315178047,315178047,
instagibbs,2017-07-13T20:00:06Z,`FAIL!  : RPCNestedTests::rpcNestedTests() Caught unhandled exception` in travis,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315186141,315186141,
jonasschnelli,2017-07-13T20:09:59Z,"Fixed the travis error.\nWe indeed need to exclude the empty endpoint `""""` from endpoint enforcement. The GUI uses that.\nSo reverted that part in `server.cpp`.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315188466,315188466,
jonasschnelli,2017-07-13T20:28:50Z,"* Fixed the std::find / == operator issue reported by @ryanofsky.\n* Switch `validateaddress`, `createmultisig` to the wildcard `v1` endpoint `/v1/*`.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315192800,315192800,
jonasschnelli,2017-07-14T07:55:05Z,"* Changed bitcoin-cli's parameter to `-usewallet`\n* Fixed @jnewbery nits on the RPC test",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315296455,315296455,
jnewbery,2017-07-14T14:29:46Z,"Changes look great. Manually tested ACK https://github.com/bitcoin/bitcoin/pull/10650/commits/759dc37f3de53f660c73650c0678f1ee6544490b\n\nI think this is ready for merge.\n\nThanks for your work on this!",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315374064,315374064,
instagibbs,2017-07-14T14:57:31Z,"tACK https://github.com/bitcoin/bitcoin/pull/10650/commits/759dc37f3de53f660c73650c0678f1ee6544490b\n\nTo recap behavior:\n~~- first `-wallet` is used when no endpoint is given~~\n- `-wallet` is ignored -cli side\n- `-usewallet` correctly complains when file isn't loaded\n- empty `-usewallet` allows non-wallet functionality calls, ala `bitcoin-cli -usewallet="""" getinfo`\n\n\nnit: The beha",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315381320,315381320,
jnewbery,2017-07-14T15:06:29Z,"> first -wallet is ""default wallet""\n\nThere is no default wallet. There should be no functional difference between wallets when multiple wallets are loaded.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315383601,315383601,
instagibbs,2017-07-14T15:08:28Z,@jnewbery ok let me rephrase: non-endpoint calls will still use that wallet(just like before).,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315384107,315384107,
ryanofsky,2017-07-14T15:22:15Z,"I think this PR started off bad and has gotten worse, and I'm writing another post to go into what I think the new problems are. But because I think there's a good chance that post will be ignored or disputed, I want to suggest 2 more changes that I think would make this PR less bad.\n\n1. Rename `-usewallet` to `-rpcwallet` or similar. Prefix ""use"" is kind of ridiculous unless you think someone",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315387672,315387672,
jnewbery,2017-07-14T15:23:46Z,"> non-endpoint calls will still use that wallet(just like before).\n\nHuh? No. That's the point. We want to avoid RPCs defaulting to any wallet when they're called without endpoints. Having a 'default' wallet risks users accidentally calling a method on the wrong wallet.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315388068,315388068,
instagibbs,2017-07-14T15:39:49Z,"@jnewbery My mistake, I probably iterated too fast through options. Can confirm that it gives `Method not found (disabled)` when 2+ wallets are loaded.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315392120,315392120,
ryanofsky,2017-07-14T17:03:49Z,"This PR is looking worse than before. This is bad engineering and interface design, which creates usability problems with confusing errors and restrictions, and will lead to hacks, workarounds, and churn in the future. All of which is pointless because we have a much simpler alternative in https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/multiparam which has none of these problems ",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315412302,315412302,
jnewbery,2017-07-14T17:56:40Z,"Thanks @ryanofsky - I think those are all good points, and I'm sympathetic to them.\n\nAt this point, I think we should go ahead with merging this PR. It's had lots of review, and already has 4 ACKs.\n\nWe still have some freedom with the interface after this is merged. The feature is going to be marked as experimental, and anyone who uses multiwallet should be prepared for the interface to be",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315425015,315425015,
ryanofsky,2017-07-14T18:01:01Z,"> So in order to get something merged which is now very well reviewed and tested, we should go ahead with this PR and tidy up the rough edges later.\n\nOk but these changes are never going to happen later if they don't get done before merging this PR: https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315387672, so please say something if there is a problem with `-unstable` or `-rpcwalle",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315426144,315426144,
jnewbery,2017-07-14T18:11:31Z,"- `-unstable` : I disagree that there is an implication that `v1` commits us to backwards compatibility, so I don't think this is necessary\n- `-rpcwallet` vs `-usewallet` : Yours is slightly better, but I don't think it matters that much.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315428792,315428792,
jonasschnelli,2017-07-14T18:22:29Z,I agree with most nits from @promag and @morcos but for the sake of getting this merged before the freeze I'm no longer force-push fixing nits.,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315431518,315431518,
ryanofsky,2017-07-14T18:54:14Z,"> -unstable : I disagree that there is an implication that v1 commits us to backwards compatibility, so I don't think this is necessary\n\nI might have misunderstood what was meant by the `v1` endpoint being ""experimental."" If experimental just means that the endpoint might go away in the future (to be replaced by `v2` `v3` etc), then agree it doesn't have to be specially marked, though, it woul",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315439185,315439185,
sipa,2017-07-14T19:43:23Z,"@ryanofsky's commit looks so simple that I'm inclined at this point to go with that, and push the v1 API to a later version...",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315450034,315450034,
morcos,2017-07-14T19:57:33Z,"@sipa I think I'm also fine with that.\nThis appears merge ready, lets get a few quick reviews of #10653 and then we could merge either one",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315452985,315452985,
ryanofsky,2017-07-14T20:00:26Z,"> This appears merge ready, lets get a few quick reviews of #10653 and then we could merge either one\n\nGithub won't let me reopen #10653 (and contained an old snapshot of the branch) so I opened #10829.",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315453599,315453599,
laanwj,2017-07-17T07:17:33Z,"It looks like this implementation is still too controversial to make it into 0.15, so removing the milestone (sorry, this is a very painful decision for me too).",https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315682641,315682641,
ryanofsky,2017-07-25T16:02:03Z,Should be closed or rebased. One part of this PR which I think is good and didn't make it in with #10849 was addition of the RPC_WALLET_NOT_FOUND error code.,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-317785777,317785777,
jonasschnelli,2017-09-05T22:50:57Z,Closing for now... seems no longer required (or at least controversial).,https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-327325447,327325447,
ryanofsky,2017-06-22T10:38:00Z,"In commit ""Add -wallet endpoint support to bitcoin-cli"":\n\nProbably should url encode in case filename contains spaces, reserved characters, or unicode (utf8) https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters\n\nCorresponding decode would be needed in GetWalletForJSONRPCRequest.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123475967,123475967,src/bitcoin-cli.cpp
ryanofsky,2017-06-22T11:25:51Z,"In commit ""[QA] Add support for wallet endpoints in Authproxy""\n\nIt seems hacky to me for AuthServiceProxy to be aware of multiwallet and to be munging urls and service name strings this way.\n\nI think it would be better if AuthServiceProxy didn't know anything about bitcoin urls and just let the caller control the request. There are many ways to allow this, but a simple one might be to defi",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123484826,123484826,test/functional/test_framework/authproxy.py
ryanofsky,2017-06-22T11:54:51Z,"In commit ""Add -wallet endpoint support to bitcoin-cli"":\n\nYou should update `HelpMessageCli` to mention the new argument.\n\nSince I started making a similar change (but didn't get very far) you could steal my help string:\n\n```diff\nstrUsage += HelpMessageOpt(""-wallet=<file>"", _(""Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory)""));\n```",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123489861,123489861,src/bitcoin-cli.cpp
ryanofsky,2017-06-22T15:31:04Z,"In commit ""Select wallet based on the given endpoint""\n\nMaybe change error message to something like ""Wallet file does not exist or is not loaded"" to avoid implying that the wallet doesn't exist when it might just not be loaded.\n\nAlso, since this is a URI, sanitize call should be changed to allow `%` character and probably all reserved and unreserved characters from RFC3986 (`""%-_.~!*'();:@",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123543935,123543935,src/wallet/rpcwallet.cpp
promag,2017-07-04T13:54:36Z,Use `evhttp_uriencode()`?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r125478756,125478756,src/utilstrencodings.cpp
promag,2017-07-04T13:54:52Z,Use `evhttp_uridecode()`?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r125478798,125478798,src/utilstrencodings.cpp
promag,2017-07-04T13:58:55Z,Use `evhttp_uri` and it's primitives?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r125479615,125479615,src/bitcoin-cli.cpp
promag,2017-07-04T14:03:00Z,const.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r125480438,125480438,src/wallet/wallet.h
jonasschnelli,2017-07-04T15:08:00Z,Oh! Very good point. Will do that.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r125493753,125493753,src/utilstrencodings.cpp
jonasschnelli,2017-07-07T13:50:17Z,I guess for the endpoint a plain std::string is okay.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126151074,126151074,src/bitcoin-cli.cpp
TheBlueMatt,2017-07-10T15:09:50Z,"Note that ""Add -wallet endpoint support to bitcoin-cli"" doesnt build as urlDecode is undefined here (you need to swap commit ordering).",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126449799,126449799,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-07-10T15:22:11Z,"Wait, why?",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126453963,126453963,src/utilstrencodings.cpp
TheBlueMatt,2017-07-10T15:31:04Z,This seems superfluous. Why not just either auto-register based on the endpoint in the commands table or just register everything explicitly in httprpc.cpp (its only 4 things).,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126456469,126456469,src/httprpc.cpp
TheBlueMatt,2017-07-10T15:31:35Z,Can we use some constant for this instead of duplicating the string everyhwere?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126456621,126456621,src/rpc/blockchain.cpp
ryanofsky,2017-07-12T10:51:51Z,"In commit ""Expose JSON endpoint registration""\n\nI don't see the reasoning for this either... If you decide to keep this, maybe document the function with a comment to explain why the urls shouldn't be listed in a single place.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126923023,126923023,src/httprpc.cpp
ryanofsky,2017-07-12T10:57:26Z,"In commit ""Register /wallet/* endpoint in RPC server""\n\nName `MaybeRegisterWalletRPCEndpoints` might be more descriptive since nothing happens if wallet is disabled.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126923979,126923979,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-12T11:04:20Z,"In commit ""Select wallet based on the given endpoint""\n\nPrevious comment not addressed (https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123543935)",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126925235,126925235,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-12T11:11:13Z,"In commit ""Select wallet based on the given endpoint""\n\nThis logic doesn't seem right because it will silently ignore the `requestedWallet` value when `vpwallets` is empty. It would be better to trigger the ""Requested wallet not found"" error if `requestedWallet` is nonempty when `vpwallets` is empty instead of silently ignoring the `requestedWallet` value.\n\nYou could fix this by just deleti",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126926410,126926410,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-12T11:23:25Z,"In commit ""Select wallet based on the given endpoint""\n\nPer @laanwj's comment at https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-310833084, I think it would be a good idea for this to raise an error if vpwallets.size() is not 1. If somebody has loaded multiple wallets, they should have to explicitly specify which wallet they want to call. Otherwise, it's easy to imagine writing a scr",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126928365,126928365,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-12T14:20:58Z,"In commit ""Add a walletID to CWallet (use filename for now)""\n\nI believe this commit should be dropped because we already have a `CWallet::GetName()` method and the duplicative functionality introduced here with mysterious ""for now"" comments is just confusing.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126967741,126967741,src/wallet/wallet.cpp
ryanofsky,2017-07-12T14:24:20Z,"In commit ""Select wallet based on the given endpoint""\n\n`requestedWallet` should be percent decoded here.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126968651,126968651,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-12T14:27:24Z,"In commit ""Add -wallet endpoint support to bitcoin-cli""\n\nPrevious comment not addressed (https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123489861).",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126969502,126969502,src/bitcoin-cli.cpp
ryanofsky,2017-07-12T14:34:41Z,"In commit ""Add -wallet endpoint support to bitcoin-cli""\n\nThis change belongs in commit ""Select wallet based on the given endpoint"" not in this bitcoin-cli commit. Also the commit introducing url encode/decode functions needs to be pushed back earlier in the history like Matt said for this to compile.\n\nAlternately you could consolidate some of the commits. I don't think having 12 commits in",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126971554,126971554,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-12T14:37:10Z,"In commit ""Add urlencode/decode via libevent2""\n\nMemory leak here, need to free `encodedURI`.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126972266,126972266,src/bitcoin-cli.cpp
ryanofsky,2017-07-12T14:38:06Z,"In commit ""Add urlencode/decode via libevent2""\n\nMore idiomatic / efficient to write `!walletName.empty()`",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126972541,126972541,src/bitcoin-cli.cpp
ryanofsky,2017-07-12T14:42:06Z,"In commit ""Add urlencode/decode via libevent2""\n\nMore idiomatic / efficient to just use the default string constructor (write `std::string res;`).",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126973678,126973678,src/httpserver.cpp
ryanofsky,2017-07-12T14:43:39Z,"In commit ""Add urlencode/decode via libevent2""\n\nSomething seems to have gone a little haywire in the rebased history. This commit seems to be inlining a nonexistent `urlEncode` function, which I think would be a step backwards from having a reusable `urlEncode` function that complements `urlDecode`.\n\nAlso this commit has unrelated changes to `src/utilstrencodings.cpp` and `src/wallet/rpcwa",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126974112,126974112,src/bitcoin-cli.cpp
ryanofsky,2017-07-12T14:49:56Z,"In commit ""[QA] Add support for wallet endpoints in Authproxy""\n\nIt's fragile, over complicated, and not necessary to add multiwallet code and hardcoded url fragments in authproxy. I suggested a simpler approach here: https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123484826, adding a one-line `__idiv__` method.\n",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126976236,126976236,test/functional/test_framework/authproxy.py
ryanofsky,2017-07-12T15:30:49Z,"In commit ""Split node / wallet RPC calls based on the endpoint""\n\nI don't see what this has to do with multiwallet support and I think this commit and previous commit should go into a separate PR if we want to introduce a more heavily embroidered URL scheme beyond `/v1/wallet/filename`.\n\nAlso if there's going to be a JSON-RPC URL scheme, it needs to be documented and explained somewhere (ma",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126988589,126988589,src/rpc/server.cpp
ryanofsky,2017-07-12T15:35:03Z,"In commit ""Add walletid to getwalletinfo""\n\nShould be called `wallet_path` as in #10733, or `walletname` as in #10604 and use the `GetName` method, unless we actually do want to introduce a new wallet id concept. This commit could be also be dropped and left for the other prs.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126989883,126989883,src/wallet/rpcwallet.cpp
promag,2017-07-12T20:51:27Z,Free `encodedURI`.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127068342,127068342,src/bitcoin-cli.cpp
promag,2017-07-12T20:52:24Z,Else should fail?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127068584,127068584,src/bitcoin-cli.cpp
promag,2017-07-12T20:53:36Z,🤔 ,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127068888,127068888,src/utilstrencodings.cpp
jonasschnelli,2017-07-13T11:26:06Z,"In the last weeks IRC meeting I had the feeling we had consensus about splitting the calls into node non node.\nIMO the v1 approach (while still supporting / [v0]) gives us the chance to eventually clean up some APIs (accounts?!). Not sure if we are going to do this but at least we would have the chance.\nThis is why I think we should mark the V1 api as ""experimental"" and ""unstable"" which then a",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127191606,127191606,src/rpc/server.cpp
jonasschnelli,2017-07-13T11:49:05Z,"Oh,. yes. This is a relict of a custom URIencode/decode implementation. Will remove.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127195223,127195223,src/utilstrencodings.cpp
jonasschnelli,2017-07-13T11:58:50Z,"a) I think we don't want an `#ifdef ENABLE_WALLE` in `httpserver.cpp`\nb) Using `RegisterHTTPHandler(endpoint, exactMatch, HTTPReq_JSONRPC);` from the point where we can register based on RPC-tables endpoints would result in exposing `RegisterHTTPHandler` and `HTTPReq_JSONRPC` which seems unideal.\n\nBut the idea of register based on the tables endpoints makes sense, will implement but will als",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127196983,127196983,src/httprpc.cpp
ryanofsky,2017-07-13T12:04:35Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127191606\n\nBut why do those two commits need to be in this PR? All I am saying is move these to a separate PR. These changes aren't needed for multiwallet, add a bunch of boilerplate to the code and complexity to review, and introduce a bunch of rules and design details (even if marked ""experimental"") that have never been discuss",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127198003,127198003,src/rpc/server.cpp
jonasschnelli,2017-07-13T12:23:24Z,They are in this PR because I thought we have decided to not support node command on `/v1/wallet`.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127201118,127201118,src/rpc/server.cpp
ryanofsky,2017-07-13T12:37:20Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127191606\n\n> They are in this PR because I thought we have decided to not support node command on /v1/wallet.\n\nInteresting. So will wallet-optional methods like validateaddress and createmultisig then only work on vpwallet[0] and not other wallets?\n\nIn any case, I am trying to suggest that you can significantly simplify t",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127203928,127203928,src/rpc/server.cpp
ryanofsky,2017-07-13T12:56:01Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126926410\n\nSilently ignoring invalid requestedWallet values not (yet) addressed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127207869,127207869,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T12:56:56Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126968651\n\nAdding percent decoding not (yet) addressed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127208085,127208085,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T12:57:53Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123543935\n\nError string cleanup not (yet) addressed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127208287,127208287,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T12:59:37Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126928365\n\nUnsafe fallthrough to default wallet not (yet) addressed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127208704,127208704,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T13:02:40Z,"In commit ""Add urlencode/decode via libevent2""\n\nCommit description should be updated to reflect that this is adding a new option to bitcoin-cl. Or maybe this commit should solely update bitcoin-cli, and the urldecode should be moved to the ""Select wallet based on the given endpoint"" commit.\n\nAlso the new bitcoin-cli option needs to be documented, see https://github.com/bitcoin/bitcoin/pull",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127209376,127209376,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T13:04:46Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126976236\n\nTest framework comment not (yet) addressed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127209852,127209852,test/functional/test_framework/authproxy.py
ryanofsky,2017-07-13T13:20:18Z,"I think this actually should use `__truediv__` not `__idiv__`,\n which is for python 2.x (https://docs.python.org/3/reference/datamodel.html?highlight=truediv#object.__truediv__)",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127213593,127213593,test/functional/test_framework/authproxy.py
jnewbery,2017-07-13T13:35:50Z,"I agree - we should try to make minimal changes to authproxy.\n\nLater, once TestNode is merged, it'll be very straightforward to add wallet methods to the TestNode class, which is where I think they should live - not in the authproxy layer.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127217666,127217666,test/functional/test_framework/authproxy.py
jnewbery,2017-07-13T14:11:33Z,"For what it's worth, I agree with @ryanofsky here. It'd be good to keep this PR to the minimal functionality needed for RPC multiwallet access. We can easily add `/v1/node` later if people want it.\n\n> will wallet-optional methods like validateaddress and createmultisig...\n\nHopefully those will all be split into wallet/non-wallet methods by 0.16. See #10583, #10570, etc",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127227774,127227774,src/rpc/server.cpp
jonasschnelli,2017-07-13T15:28:35Z,"I'm not sure about that one.\nThe GUI also has a default wallet. Wouldn't throwing an exception also not work when someone runs with `-disablewallet`?",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127250167,127250167,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T15:40:23Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126928365\n\nI think you could change this line to something like `return vpwallets.size() == 1 ? vpwallets[0] : nullptr;` without bad side effects for the gui or disablewallet. This would also let you drop the early return for vpwallet.empty() above, which would make sure the `requestedWallet` value is always properly validated (h",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127253273,127253273,src/wallet/rpcwallet.cpp
jnewbery,2017-07-13T16:12:23Z,"This is still not addressed. If you're going to add extra options to bitcoin-cli, please also update the help text.\n\nStrongly recommend this change goes in its own commit.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127261546,127261546,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T16:12:35Z,"In commit ""Split node / wallet RPC calls based on the endpoint""\n\nWhy the first check? I don't think requesting an empty URI is possible over HTTP. Definitely add a comment if this is needed for something.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127261594,127261594,src/rpc/server.cpp
jnewbery,2017-07-13T16:21:07Z,"Please see @ryanofsky's previous comment: https://github.com/bitcoin/bitcoin/pull/10650#discussion_r126928365\n\nReturning a 'default' wallet is dangerous for users. If there is more than one wallet loaded and the RPC does not specify a wallet endpoint, then the call should fail.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127263779,127263779,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T16:22:35Z,"In commit ""Select wallet based on the given endpoint""\n\nWould be good to either expand comment, or have it reference an issue, or just drop this locking statement because it isn't needed yet and isn't used in any other places where vpwallets is accessed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127264161,127264161,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T16:23:04Z,"In commit ""Select wallet based on the given endpoint""\n\nMaybe use Luke's `CWalletRef` syntax to be consistent & portable.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127264291,127264291,src/wallet/rpcwallet.cpp
jnewbery,2017-07-13T16:23:17Z,"In commit 'Fix AuthProxy multiwallet support'.\n\nI think using / ""path is slightly better since it's consistent with the Python path API, as @ryanofsky mentioned in IRC, but I don't care too strongly.\n\nIf you do chose to make this change, please squash with the previous commit.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127264334,127264334,test/functional/test_framework/authproxy.py
jnewbery,2017-07-13T16:25:08Z,"the `w3` assignment is wrong, and this line doesn't appear to be testing anything",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127264802,127264802,test/functional/multiwallet.py
jonasschnelli,2017-07-13T16:32:03Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127266534,127266534,test/functional/multiwallet.py
jnewbery,2017-07-13T16:32:22Z,"`generate` is a wallet call, so should specify a wallet endpoint.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127266614,127266614,test/functional/multiwallet.py
jnewbery,2017-07-13T16:34:28Z,it's a bit strange that the `help` RPC returns help for non-wallet commands when called on a wallet endpoint,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127267171,127267171,src/rpc/server.cpp
jonasschnelli,2017-07-13T16:34:34Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127267192,127267192,test/functional/multiwallet.py
ryanofsky,2017-07-13T16:46:04Z,"In commit ""Split node / wallet RPC calls based on the endpoint""\n\n@morcos pointed out that the endpoints get added to a vector (`std::vector<HTTPPathHandler> pathHandlers`) which will now contain the same handlers dozens of times. Should consider converting `pathHandlers` to a map or set to avoid this, or adding a todo comment to address it later.\n",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127269863,127269863,src/rpc/server.cpp
morcos,2017-07-13T16:52:59Z,"nit: This seems pretty inefficient since so many of the commands have the same endpoint, they'll be registered over and over.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127271400,127271400,src/rpc/server.cpp
jnewbery,2017-07-13T16:59:09Z,"Until wallet and server RPCs are fully separated, the following RPCs should also allow wildcard endpoints:\n\n- `validateaddress`\n- `createmultisig`\n\nWe can leave `getinfo` since it's deprecated.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127272854,127272854,src/rpc/rawtransaction.cpp
morcos,2017-07-13T16:59:22Z,nit: Could be more descriptive,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127272920,127272920,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T16:59:39Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127191606\n\nI'm not going to keep objecting, but will just note that I'd still prefer to see this commit (""Split node / wallet RPC calls based on the endpoint"") dropped from the PR because of the complexity it adds. (Also because of my general failure to understand why people seem to want to overlay a REST-style url scheme on top ",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127273014,127273014,src/rpc/server.cpp
morcos,2017-07-13T17:05:15Z,"`urlEncode` doesn't exist.  I think if you just squashed 6a99141 (the following commit) into this one, you'd be ok.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127274387,127274387,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T17:05:22Z,"In commit ""Add -wallet endpoint support to bitcoin-cli""\n\nThis doesn't compile because urlEncode function isn't defined. You should fix by moving bitcoin-cli changes from ""Add urlencode/decode via libevent2"" commit to this commit.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127274408,127274408,src/bitcoin-cli.cpp
morcos,2017-07-13T17:06:18Z,Can we establish whether vpwallets is supposed to be protected by cs_main or not?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127274620,127274620,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T17:07:42Z,"In commit ""Add urlencode/decode via libevent2""\n\nShould move these bitcoin-cli changes to prior ""Add -wallet endpoint support to bitcoin-cli"" commit (which doesn't currently) compile.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127274947,127274947,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T17:11:28Z,"In commit ""[QA] Fix AuthProxy multiwallet support""\n\nShould drop this commit. This should be {}/{} for consistency with python's pathlib API, and you should change all the / ""/path"" expressions to / ""path"" again for consistency with normal python path expressions. (Personally also I think the double slashes look strange).",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127275786,127275786,test/functional/test_framework/authproxy.py
morcos,2017-07-13T17:13:09Z,This should break if you have multiple wallets defined,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127276164,127276164,test/functional/multiwallet.py
jnewbery,2017-07-13T19:39:25Z,duplicate. Not required,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127311827,127311827,test/functional/multiwallet.py
jnewbery,2017-07-13T19:39:51Z,seems like `w3` isn't really adding any value to this test. Suggest you remove it.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127311909,127311909,test/functional/multiwallet.py
jnewbery,2017-07-13T19:41:46Z,nit: please fix docstring,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127312306,127312306,test/functional/multiwallet.py
jnewbery,2017-07-13T19:42:06Z,This method override is not required (it's doing the same thing as the base method would do),https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127312371,127312371,test/functional/multiwallet.py
jnewbery,2017-07-13T19:43:48Z,nit: there's no such thing as default wallet. Comment should say `accessing wallet RPC without using wallet endpoint fails`,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127312751,127312751,test/functional/multiwallet.py
ryanofsky,2017-07-13T19:45:32Z,"In commit ""Split node / wallet RPC calls based on the endpoint""\n\nThis is a dangerous operator to define because it ignores the contents of handler member. Please drop this and just pass a lambda to std::find to do the comparison you want.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127313159,127313159,src/httpserver.cpp
ryanofsky,2017-07-13T19:47:53Z,"In commit ""Split node / wallet RPC calls based on the endpoint""\n\nIf std::find returns an item and item's handler is not identical to `handler` this should throw or assert. Otherwise code trying to register a different handler will silently fail.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127313668,127313668,src/httpserver.cpp
jnewbery,2017-07-13T19:50:07Z,"As discussed in IRC, `-usewallet` might be better here",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127314126,127314126,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T19:50:48Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127272854\n\nWildcard endpoints for wallet-optional rpc not yet addressed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127314276,127314276,src/rpc/rawtransaction.cpp
ryanofsky,2017-07-13T19:55:10Z,"In commit ""Select wallet based on the given endpoint"":\n\nI think this will prevent wallet commands from showing up in `bitcoin-cli help` when multiple wallets are loaded. You may need to add `&& !request.fHelp.`",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127315280,127315280,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-13T19:57:06Z,"In commit ""Select wallet based on the given endpoint"":\n\nI think it's preferable just to return nullptr in this case. That way commands that don't need a wallet can still function (validateaddress, createmultisig).\n",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127315683,127315683,src/wallet/rpcwallet.cpp
jonasschnelli,2017-07-13T20:24:05Z,Good point. Will fix.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127321605,127321605,src/httpserver.cpp
jonasschnelli,2017-07-13T20:24:43Z,I think that is something we can change later. Or do you think its crucial?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127321789,127321789,src/httpserver.cpp
jonasschnelli,2017-07-13T20:27:21Z,Just fixed.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127322386,127322386,src/rpc/rawtransaction.cpp
ryanofsky,2017-07-13T20:38:14Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127313668\n\n> I think that is something we can change later. Or do you think its crucial?\n\nNot crucial (this isn't a bug and I already acked), but this seems very easy, unless I'm missing something?\n\n```\nauto it = find_if();\nif (it == end) push_back(handler); else assert (it->handler == handler.handler);\n```",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127324604,127324604,src/httpserver.cpp
jnewbery,2017-07-13T20:49:35Z,please use the `assert_raises_jsonrpc()` function to check the error code and message,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127327125,127327125,test/functional/multiwallet.py
ryanofsky,2017-07-13T21:00:07Z,"Guess I missed this. I think `-usewallet` is worse because it is inconsistent with existing bitcoin `-wallet` parameter which this mirrors. I also think my suggested documentation https://github.com/bitcoin/bitcoin/pull/10650#discussion_r123489861 is better because it keeps this consistency and won't leave the user scratching their head about what ""walletname"" is supposed to mean:\n\n```\nstrUs",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127329553,127329553,src/bitcoin-cli.cpp
jnewbery,2017-07-13T21:14:39Z,"we want `-usewallet`. If there are multiple `-wallet` parameters in bitcoin.conf, then I don't think it'll be possible to specify which wallet bitcoin-cli should use.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127332592,127332592,src/bitcoin-cli.cpp
instagibbs,2017-07-13T21:18:03Z,"further, I get ""trapped"" if I have a `wallet` entry in my conf file, since any subsequent `-cli` call will use that parameter, including `stop`, etc, and throw `Incorrect endpoint used` errors. (unless I'm misunderstanding how it's used)",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127333306,127333306,src/bitcoin-cli.cpp
ryanofsky,2017-07-13T21:25:22Z,"Thread https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127314126.\n\nI see, yeah. I guess `-wallet` won't work unless bitcoin-cli is changed to explicitly ignore `-wallet` values that come from the conf file, which might not be a bad idea, but I'm not advocating for.\n\nInterestingly, I guess if if `bitcoin-cli` is changed to accept `-usewallet` and support for node calls on the wall",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127335254,127335254,src/bitcoin-cli.cpp
jnewbery,2017-07-13T21:30:18Z,"> users will be able to specify a ""default wallet"" in their configs\n\nshhhh. Don't tell anyone about the secret hidden default wallet feature.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127336662,127336662,src/bitcoin-cli.cpp
promag,2017-07-14T15:04:30Z,"```cpp\nif (request.URI.compare(0, WALLET_ENDPOINT_BASE.size(), WALLET_ENDPOINT_BASE) == 0)\n```",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127477737,127477737,src/wallet/rpcwallet.cpp
promag,2017-07-14T15:08:14Z,The `} else {` can be removed since the `if` blocks always exists the function.,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127478666,127478666,src/wallet/rpcwallet.cpp
promag,2017-07-14T15:12:40Z,`} else {`?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127479720,127479720,src/httpserver.cpp
promag,2017-07-14T15:17:22Z,"`evhttp_uridecode` works with an empty string, as such this `if` can be removed.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127480814,127480814,src/httpserver.cpp
promag,2017-07-14T15:19:03Z,"```cpp\nif (!request.URI.empty() && ...)\n```",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127481167,127481167,src/rpc/server.cpp
morcos,2017-07-14T15:29:36Z,nit: should your lambda capture list and argument be references?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127483516,127483516,src/httpserver.cpp
promag,2017-07-14T16:04:20Z,"What about something along these lines:\n```cpp\n// only add handlers if they do not exists yet\nfor (auto handler : pathHandlers) {\n    if (handler.prefix == prefix && handler.exactMatch == exactMath) {\n        return;\n    }\n}\n\npathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n```",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127490929,127490929,src/httpserver.cpp
promag,2017-07-14T16:05:18Z,Another option is to implement `HTTPPathHandler::operator==`?,https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127491102,127491102,src/httpserver.cpp
jonasschnelli,2017-07-14T18:16:49Z,"I guess there is no need for an else, it will just return an empty string if URLencode failed which is fine IMO.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127518189,127518189,src/httpserver.cpp
jonasschnelli,2017-07-14T18:20:43Z,"@promag: I think your solution would be a slower find algorithm (but doesn't matter). I had the `==` operator in an earlier version but @ryanofsky said (and I agreed) that this may be dangerous if we not check all of the instance variables (including the handler).\n\n@morcos: Yes, Should be referenced.",https://github.com/bitcoin/bitcoin/pull/10650#discussion_r127519034,127519034,src/httpserver.cpp
