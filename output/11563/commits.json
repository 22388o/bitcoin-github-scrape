[
  {
    "sha": "7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmUxZTM1YzRkMGNjNmMxY2RkMzE2YTc2OWNhNDVkNWYwZDJkZmE1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-26T00:02:45Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-26T00:37:38Z"
      },
      "message": "Validate genesis out of loop in CheckBlockIndex",
      "tree": {
        "sha": "ebfb720d0cd2a282353a30654bbd6385bdf55f9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebfb720d0cd2a282353a30654bbd6385bdf55f9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e1f3040e97e52b4b7084ff90387710be6e0e0790",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
        "patch": "@@ -256,7 +256,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n \n     CBlockIndex* tip = chainActive.Tip();\n     assert(tip != nullptr);\n-    \n+\n     CBlockIndex index;\n     index.pprev = tip;\n     // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n@@ -4097,6 +4097,10 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n     rangeGenesis.first++;\n     assert(rangeGenesis.first == rangeGenesis.second); // There is only one index entry with parent nullptr.\n \n+    // Genesis block checks.\n+    assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n+    assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n+\n     // Iterate over the entire block tree, using depth-first search.\n     // Along the way, remember whether there are blocks on the path from genesis\n     // block being explored which are the first to have certain properties.\n@@ -4119,12 +4123,6 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n         if (pindex->pprev != nullptr && pindexFirstNotChainValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_CHAIN) pindexFirstNotChainValid = pindex;\n         if (pindex->pprev != nullptr && pindexFirstNotScriptsValid == nullptr && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_SCRIPTS) pindexFirstNotScriptsValid = pindex;\n \n-        // Begin: actual consistency checks.\n-        if (pindex->pprev == nullptr) {\n-            // Genesis block checks.\n-            assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n-            assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n-        }\n         if (pindex->nChainTx == 0) assert(pindex->nSequenceId <= 0);  // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n         // VALID_TRANSACTIONS is equivalent to nTx > 0 for all nodes (whether or not pruning has occurred).\n         // HAVE_DATA is only equivalent to nTx > 0 (or VALID_TRANSACTIONS) if no pruning has occurred."
      }
    ]
  },
  {
    "sha": "c13d38f433ab5bedfbda27d11e4c468172ad44a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTNkMzhmNDMzYWI1YmVkZmJkYTI3ZDExZTRjNDY4MTcyYWQ0NGE5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-26T00:27:17Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-26T01:02:06Z"
      },
      "message": "Cache siblings on depth first search in CheckBlockIndex",
      "tree": {
        "sha": "1e48dfc117ed47db49bbe1b1069156edaf13e805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e48dfc117ed47db49bbe1b1069156edaf13e805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c13d38f433ab5bedfbda27d11e4c468172ad44a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c13d38f433ab5bedfbda27d11e4c468172ad44a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c13d38f433ab5bedfbda27d11e4c468172ad44a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c13d38f433ab5bedfbda27d11e4c468172ad44a9/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fe1e35c4d0cc6c1cdd316a769ca45d5f0d2dfa5"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4079b38f7e85ee3bed88a620fb3c3f198c323c60",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c13d38f433ab5bedfbda27d11e4c468172ad44a9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c13d38f433ab5bedfbda27d11e4c468172ad44a9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c13d38f433ab5bedfbda27d11e4c468172ad44a9",
        "patch": "@@ -4092,15 +4092,18 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     assert(forward.size() == mapBlockIndex.size());\n \n-    std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangeGenesis = forward.equal_range(nullptr);\n+    auto rangeGenesis = forward.equal_range(nullptr);\n     CBlockIndex *pindex = rangeGenesis.first->second;\n-    rangeGenesis.first++;\n+    std::stack<std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator>> siblings;\n+    siblings.push(rangeGenesis);\n+    ++rangeGenesis.first;\n     assert(rangeGenesis.first == rangeGenesis.second); // There is only one index entry with parent nullptr.\n \n     // Genesis block checks.\n     assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n     assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n \n+\n     // Iterate over the entire block tree, using depth-first search.\n     // Along the way, remember whether there are blocks on the path from genesis\n     // block being explored which are the first to have certain properties.\n@@ -4204,10 +4207,11 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n         // End: actual consistency checks.\n \n         // Try descending into the first subnode.\n-        std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> range = forward.equal_range(pindex);\n+        auto range = forward.equal_range(pindex);\n         if (range.first != range.second) {\n             // A subnode was found.\n             pindex = range.first->second;\n+            siblings.push(range);\n             nHeight++;\n             continue;\n         }\n@@ -4223,23 +4227,17 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n             if (pindex == pindexFirstNotTransactionsValid) pindexFirstNotTransactionsValid = nullptr;\n             if (pindex == pindexFirstNotChainValid) pindexFirstNotChainValid = nullptr;\n             if (pindex == pindexFirstNotScriptsValid) pindexFirstNotScriptsValid = nullptr;\n-            // Find our parent.\n-            CBlockIndex* pindexPar = pindex->pprev;\n-            // Find which child we just visited.\n-            std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangePar = forward.equal_range(pindexPar);\n-            while (rangePar.first->second != pindex) {\n-                assert(rangePar.first != rangePar.second); // Our parent must have at least the node we're coming from as child.\n-                rangePar.first++;\n-            }\n-            // Proceed to the next one.\n-            rangePar.first++;\n-            if (rangePar.first != rangePar.second) {\n+\n+            // Proceed to the next sibling.\n+            ++siblings.top().first;\n+            if (siblings.top().first != siblings.top().second) {\n                 // Move to the sibling.\n-                pindex = rangePar.first->second;\n+                pindex = siblings.top().first->second;\n                 break;\n             } else {\n                 // Move up further.\n-                pindex = pindexPar;\n+                pindex = pindex->pprev;\n+                siblings.pop();\n                 nHeight--;\n                 continue;\n             }\n@@ -4248,6 +4246,7 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     // Check that we actually traversed the entire map.\n     assert(nNodes == forward.size());\n+    assert(siblings.empty());\n }\n \n std::string CBlockFileInfo::ToString() const"
      }
    ]
  }
]