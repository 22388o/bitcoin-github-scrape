[
  {
    "sha": "ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjU0NGExZGMwYjYwYWEyZDgwOTg2N2MyMmY2NWRjNmQ0OGEwYTFh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-16T14:34:02Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T11:22:20Z"
      },
      "message": "[wallet] tool: deduplicate and make wallet loading code reusable",
      "tree": {
        "sha": "b3bd338f7fcf11c290d99fb8c37e2982e6c2256f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3bd338f7fcf11c290d99fb8c37e2982e6c2256f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxtOHEACgkQV/+b28ww\nEAnC9Q/+PY4eMchxOyJ+KKQHkMK7+DRhyvQBSdwJo3ux2Ydcj4LsJ/J2Hd00QfVP\nkF8Ds7X5kp+lEAkJMGzpzWLpVtjZtqReanM+clwMTQ3anaYnQG9kx2uS3TyAs+ki\nqpzHN14DuqPDtPnTXBmCR6FdYRoPCpS7GUL+RzjKxBupYI2CesrIL5x9dWYv8s4T\nMXRMRZ+U9lGk+IOA29M34peQADR4/VuPmrk80azUTW0QnlhD4qeX53j8lRNFHO0k\nr2T7wFsSInqXuMQnHk/NnoWdaVCqG0U3qhmfhug2EIryHS9xB7TFTKHPhMUimAmN\nvwasjFxBhZjqoJPJM/ueVo5LYyQsC1n7NRcvOG5tWzegJSMhEvH1nCBPB7wko5bd\niisJMIhHeE7bg8mhALR6lnoHpDgkQ+oTmn4CBw4tQdJfpytqewRo77N2B7swk4dj\nGhiwGYgRFC7euPloMD7//AVAHwBGj3S1ur+DaqlfHzDZC+mcwUqCSVk86qA868X6\nk17YdJNUyS9abaSjZF/1tnCmkVfEyl+WAE4er4H8Yq2SviPM0gO6p4njyGhyXXra\n/nJSJMFudLRR/tNPdUrcqFbDq2MbhQjqTCkpb4ouYEyW0b2n6wvo/q6U9zzaeoMF\nlyK5s/lh+RDY3SVPAdfDYufeRFTw7ru9ZMLC1HlLz4Z92wus32E=\n=wc35\n-----END PGP SIGNATURE-----",
        "payload": "tree b3bd338f7fcf11c290d99fb8c37e2982e6c2256f\nparent 38429c4b622887f2c1db15a7826215477ca6868c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550327642 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550661740 +0100\n\n[wallet] tool: deduplicate and make wallet loading code reusable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38429c4b622887f2c1db15a7826215477ca6868c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38429c4b622887f2c1db15a7826215477ca6868c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38429c4b622887f2c1db15a7826215477ca6868c"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 61,
      "deletions": 45
    },
    "files": [
      {
        "sha": "7a629512ccaa342ec9ec8ac874d72fc78e337fb0",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 15,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
        "patch": "@@ -42,12 +42,12 @@ static bool WalletAppInit(int argc, char* argv[])\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n         std::string usage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-                                      \"wallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n-                                      \"By default wallet-tool will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n-                                      \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n-                                      \"Usage:\\n\" +\n-                                     \"  bitcoin-wallet [options] <command>\\n\\n\" +\n-                                     gArgs.GetHelpMessage();\n+                            \"wallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n+                            \"By default wallet-tool will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n+                            \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n+                            \"Usage:\\n\" +\n+                            \"  bitcoin-wallet [options] <method>\\n\\n\" +\n+                            gArgs.GetHelpMessage();\n \n         fprintf(stdout, \"%s\", usage.c_str());\n         return false;\n@@ -85,13 +85,14 @@ int main(int argc, char* argv[])\n     }\n \n     std::string method {};\n+    std::vector<std::string> arguments{};\n     for(int i = 1; i < argc; ++i) {\n         if (!IsSwitchChar(argv[i][0])) {\n-            if (!method.empty()) {\n-                fprintf(stderr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n-                return EXIT_FAILURE;\n+            if (method.empty()) {\n+                method = argv[i];\n+            } else {\n+                arguments.push_back(argv[i]);\n             }\n-            method = argv[i];\n         }\n     }\n \n@@ -100,18 +101,40 @@ int main(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n \n-    // A name must be provided when creating a file\n-    if (method == \"create\" && !gArgs.IsArgSet(\"-wallet\")) {\n-        fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+    const std::set<std::string> methods = {\n+        \"create\",\n+        \"info\"};\n+\n+    if (methods.find(method) == methods.end()) { // Use contains() as of c++20\n+        fprintf(stderr, \"Invalid method: %s\\n\", method.c_str());\n         return EXIT_FAILURE;\n     }\n \n     std::string name = gArgs.GetArg(\"-wallet\", \"\");\n \n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(method, name))\n-        return EXIT_FAILURE;\n+    // A name must be provided when creating a file\n+    if (method == \"create\") {\n+        if (!gArgs.IsArgSet(\"-wallet\")) {\n+            fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        if (!arguments.empty()) {\n+            fprintf(stderr, \"Error: unexpected argument(s)\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        if (!WalletTool::ExecuteCreateWallet(name)) return EXIT_FAILURE;\n+    } else if (method == \"info\") {\n+        if (!arguments.empty()) {\n+            fprintf(stderr, \"Error: unexpected argument(s)\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        if (!WalletTool::ExecuteWalletInfo(name)) return EXIT_FAILURE;\n+    } else {\n+        assert(false);\n+    }\n+\n     ECC_Stop();\n     return EXIT_SUCCESS;\n }"
      },
      {
        "sha": "24e9b0f2b29b58ddfd576defb6d28683b07d5d20",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 24,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
        "patch": "@@ -51,7 +51,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n {\n     if (!fs::exists(path)) {\n-        fprintf(stderr, \"Error: Wallet files does not exist\\n\");\n+        fprintf(stderr, \"Error: no wallet file at %s\\n\", name.c_str());\n         return nullptr;\n     }\n \n@@ -104,35 +104,24 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     fprintf(stdout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n }\n \n-bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n+bool ExecuteCreateWallet(const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n-\n-    if (command == \"create\") {\n-        std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n-        if (wallet_instance) {\n-            WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush(true);\n-        }\n-    } else if (command == \"info\") {\n-        if (!fs::exists(path)) {\n-            fprintf(stderr, \"Error: no wallet file at %s\\n\", name.c_str());\n-            return false;\n-        }\n-        std::string error;\n-        if (!WalletBatch::VerifyEnvironment(path, error)) {\n-            fprintf(stderr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n-            return false;\n-        }\n-        std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n-        if (!wallet_instance) return false;\n+    std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n+    if (wallet_instance) {\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Flush(true);\n-    } else {\n-        fprintf(stderr, \"Invalid command: %s\\n\", command.c_str());\n-        return false;\n     }\n+    return true;\n+}\n \n+bool ExecuteWalletInfo(const std::string& name)\n+{\n+    fs::path path = fs::absolute(name, GetWalletDir());\n+    std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+    if (wallet_instance == nullptr) return false;\n+    WalletShowInfo(wallet_instance.get());\n+    wallet_instance->Flush(true);\n     return true;\n }\n } // namespace WalletTool"
      },
      {
        "sha": "29a94c8c253d69374732ec2b20d3ce43e43e79ea",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
        "patch": "@@ -13,8 +13,8 @@ namespace WalletTool {\n std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path);\n std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path);\n void WalletShowInfo(CWallet* wallet_instance);\n-bool ExecuteWalletToolFunc(const std::string& command, const std::string& file);\n-\n+bool ExecuteCreateWallet(const std::string& name);\n+bool ExecuteWalletInfo(const std::string& name);\n } // namespace WalletTool\n \n #endif // BITCOIN_WALLET_WALLETTOOL_H"
      },
      {
        "sha": "76ce3fea842d3bd36cff9fbaac0d362000899893",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
        "patch": "@@ -38,17 +38,19 @@ def assert_tool_output(self, output, *args):\n \n     def run_test(self):\n \n-        self.assert_raises_tool_error('Invalid command: foo', 'foo')\n+        self.assert_raises_tool_error('Invalid method: foo', 'foo')\n         # `bitcoin-wallet help` is an error. Use `bitcoin-wallet -help`\n-        self.assert_raises_tool_error('Invalid command: help', 'help')\n-        self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n+        self.assert_raises_tool_error('Invalid method: help', 'help')\n+        self.assert_raises_tool_error('Error: unexpected argument(s)', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n-        self.assert_raises_tool_error('Error loading wallet.dat. Is wallet being used by other process?', '-wallet=wallet.dat', 'info')\n+        self.assert_raises_tool_error('Error loading wallet.dat. Is wallet being used by another process?', '-wallet=wallet.dat', 'info')\n         self.assert_raises_tool_error('Error: no wallet file at nonexistent.dat', '-wallet=nonexistent.dat', 'info')\n \n         # stop the node to close the wallet to call info command\n         self.stop_node(0)\n \n+        self.log.info(\"Test method: info\")\n+\n         out = textwrap.dedent('''\\\n             Wallet info\n             ===========\n@@ -76,6 +78,8 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n \n+        self.log.info(\"Test method: create\")\n+\n         out = textwrap.dedent('''\\\n             Topping up keypool...\n             Wallet info"
      }
    ]
  },
  {
    "sha": "a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGZlYzA5Y2Q4YTRiMzc1NzgyODhlOWY0ZmRmN2U5NDFmZTMxMmFk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-16T17:41:11Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T11:23:07Z"
      },
      "message": "[wallet] tool: do not abort loading for DBErrors::NONCRITICAL_ERROR",
      "tree": {
        "sha": "c38e3b67f6c97381e35069b32a7566edd9b1ab12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c38e3b67f6c97381e35069b32a7566edd9b1ab12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxtOJsACgkQV/+b28ww\nEAliTQ//b3ERY4CMDIXbTjKV3HqnWDmioffKVJNXbRnge58fZCQPv7iuowNmGfkg\ns9nuTmg1QfQ9tNjIMOTCWJcoFVv1v1qs/beNThysiVqJB+hWNU0i9pPL6OYKOD+v\nXIoBZX+d4sR+S+RiHn/GeKfT20/PPeLtz4/iU/rAmgqZ9Y4YZaXcl+gLHEAdEItD\nc2Hq3UkD/NyCpBBCqPUg1dO4vnOCg7yEGOTqw6mFu4InHUhgNliKSpnKC8tFCSam\nBfBWHFtnQwkBA1ORy02ROXeZprZnODCYYcW/qd4NC7PONplfpuokmbC+iqUgVJMf\nX0Z2zNSzxDBnjIOfFhVGd1z32N7YRrACeRpQ2j9W5fRC+lnzd+ZerC6zzqnQ6Itw\nnqUjtxeamYh2tLOwtpoJLGymAV3fjoUUL3t4zoTEPr2LAiEOG2Hnu4/sHfPWqnvC\nf/pz0rOKsrGWLWYNbQkKQsfFB5Jc5NhMQsFDFZkjn86fvOZaTv8Nw9MhPg2IYgOB\nzxbSJNcF7byO/BkTfcv0mmLtKZabdoRqfDNEOOv5yLDoNbjeMhWyqTYr7QDUs61u\npr1AEfvohHjGmUGZJpcfjHNnMOhvD9rlfhOvq3JbgQGT51LgxLig/V1V4lmABzZ9\ni3tf6qPyKC9c7bEIK5bQKIoTCVI3vgwJR6pDqa4NDZAGo7MrRN8=\n=x8HM\n-----END PGP SIGNATURE-----",
        "payload": "tree c38e3b67f6c97381e35069b32a7566edd9b1ab12\nparent ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550338871 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550661787 +0100\n\n[wallet] tool: do not abort loading for DBErrors::NONCRITICAL_ERROR\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab544a1dc0b60aa2d809867c22f65dc6d48a0a1a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4478671270a530d0f75c38b7ba018ce45cde0ffe",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
        "patch": "@@ -68,23 +68,26 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n     }\n \n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n-        wallet_instance = nullptr;\n         if (load_wallet_ret == DBErrors::CORRUPT) {\n-            fprintf(stderr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            fprintf(stderr, \"Error loading %s: Wallet corrupted\\n\", name.c_str());\n+            wallet_instance = nullptr;\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NONCRITICAL_ERROR) {\n             fprintf(stderr, \"Error reading %s! All keys read correctly, but transaction data\"\n-                            \" or address book entries might be missing or incorrect.\",\n+                            \" or address book entries might be missing or incorrect.\\n\",\n                 name.c_str());\n         } else if (load_wallet_ret == DBErrors::TOO_NEW) {\n-            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\",\n+            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\\n\",\n                 name.c_str(), PACKAGE_NAME);\n+            wallet_instance = nullptr;\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n-            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n+            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\\n\", PACKAGE_NAME);\n+            wallet_instance = nullptr;\n             return nullptr;\n         } else {\n-            fprintf(stderr, \"Error loading %s\", name.c_str());\n+            fprintf(stderr, \"Error loading %s\\n\", name.c_str());\n+            wallet_instance = nullptr;\n             return nullptr;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODVlNGY3NGE4ZDY2YTQ5NWFiZjYyZDBkN2ViNmUyMTk2ZDIzOTEy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T10:23:48Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T11:24:52Z"
      },
      "message": "[wallet] tool: add keymetadata method and delete operation",
      "tree": {
        "sha": "196118f17921db271524f9119034c747c00a1d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/196118f17921db271524f9119034c747c00a1d41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxtOQUACgkQV/+b28ww\nEAlsCw/+LDvOrWLOlAydEFG+2zc5mroEfuoxtvRqSWJraMceJg6pK9Cz3nNfJGrr\nd0Zf0prwFYbVoytWeTWTAtPzhr0V0pjq4RohIe7RkfDL8Ljihqe+jaFiOlnxKtiC\nJbDpYnE17Jj37ra6fDDtloqO0rAUVVUTkZ+XelbYvxbwCfjZIDv7SuDOvoBQHNTg\njuJdW8gMoJ253Evop8MmwHnLvV9a/MiZBXuon3C/v/C0yiCE7fNJYZLf6mYh8x2o\ncEqNjbxXn/92i4AX6SfrGVdV6uMGtuDFa6e5u4+TNH3ceqMqpVxgkPf0EPeEyTIu\nW9++YfNWUwF4D2jkQjZmk2+ujZqEX4H/47tvRW42EQ60SNuvdRr0NvEmfwE3jcfc\nHdC5CidUmrJtcxgZlPJn0bpOJZ3CdC8GDZLrwu6261sQ8GBuVxNZMpt4lo4cCZdc\nbUSalPlGFHqIjDVq7C1xtYW+EHCsTwrg/ktIdIChtxMXt48neaSkB6cB/CwHlvy3\n5g2dszM8JZLVwlVNtnOKnpeeFtpNrY8Hw8up1arqmvpDV89YocrZBAO2pUBlNEek\nr4ckEWYQ8WxtwM2IhdGcVV661wJ0YEqtCNoLgkgcc967UIikqsgDNlKPblnnDNOz\nzVMJJEys7/BEgAbUkPsTMDj3eqP2IsbUsNI3dasWNAb4D85T8HQ=\n=zU9a\n-----END PGP SIGNATURE-----",
        "payload": "tree 196118f17921db271524f9119034c747c00a1d41\nparent a8fec09cd8a4b37578288e9f4fdf7e941fe312ad\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550658228 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550661892 +0100\n\n[wallet] tool: add keymetadata method and delete operation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8fec09cd8a4b37578288e9f4fdf7e941fe312ad"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 30,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2f6ef63f9faf92a17785b312967b45526fbc91ce",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
        "patch": "@@ -30,6 +30,7 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"keymetadata\", \"Manipulate key metadata: (delete: deletes all key metadata)\", false, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])\n@@ -103,7 +104,8 @@ int main(int argc, char* argv[])\n \n     const std::set<std::string> methods = {\n         \"create\",\n-        \"info\"};\n+        \"info\",\n+        \"keymetadata\"};\n \n     if (methods.find(method) == methods.end()) { // Use contains() as of c++20\n         fprintf(stderr, \"Invalid method: %s\\n\", method.c_str());\n@@ -131,6 +133,19 @@ int main(int argc, char* argv[])\n             return EXIT_FAILURE;\n         }\n         if (!WalletTool::ExecuteWalletInfo(name)) return EXIT_FAILURE;\n+    } else if (method == \"keymetadata\") {\n+        if (arguments.size() > 1) {\n+            fprintf(stderr, \"Error: unexpected argument(s)\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        const std::set<std::string> operations = {\n+            \"delete\"\n+        };\n+        if (arguments.empty() || operations.find(arguments[0]) == operations.end()) {\n+            fprintf(stderr, \"Specify operation: delete\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        if (!WalletTool::ExecuteKeyMetadata(name, arguments[0])) return EXIT_FAILURE;\n     } else {\n         assert(false);\n     }"
      },
      {
        "sha": "c98446b92575f387f28f3d8573a0ddbf5d26ac0d",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
        "patch": "@@ -127,4 +127,17 @@ bool ExecuteWalletInfo(const std::string& name)\n     wallet_instance->Flush(true);\n     return true;\n }\n+\n+bool ExecuteKeyMetadata(const std::string& name, std::string& operation) {\n+    fs::path path = fs::absolute(name, GetWalletDir());\n+    std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+    if (wallet_instance == nullptr) return false;\n+    LOCK(wallet_instance->cs_wallet);\n+    fprintf(stdout, \"Modifying key metadata...\\n=========================\\n\");\n+    fprintf(stdout, \"Operation: %s\\n\", operation.c_str());\n+    fprintf(stdout, \"Key: all\\n\");\n+    // wallet_instance->DeleteKeyMetadata();\n+    wallet_instance->Flush(true);\n+    return true;\n+}\n } // namespace WalletTool"
      },
      {
        "sha": "bab258aa1a9637abd428771bef1bb7eee2ae8189",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d85e4f74a8d66a495abf62d0d7eb6e2196d23912/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
        "patch": "@@ -15,6 +15,7 @@ std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& pat\n void WalletShowInfo(CWallet* wallet_instance);\n bool ExecuteCreateWallet(const std::string& name);\n bool ExecuteWalletInfo(const std::string& name);\n+bool ExecuteKeyMetadata(const std::string& name, std::string& operation);\n } // namespace WalletTool\n \n #endif // BITCOIN_WALLET_WALLETTOOL_H"
      }
    ]
  },
  {
    "sha": "33165a7ac539164c551620b4ed42682ec5e01d1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzE2NWE3YWM1MzkxNjRjNTUxNjIwYjRlZDQyNjgyZWM1ZTAxZDFh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T10:29:38Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T11:27:33Z"
      },
      "message": "[wallet] DeleteKeyMetadata",
      "tree": {
        "sha": "c009732da15c25a3ecba69bfdfc23fd6a21ef9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c009732da15c25a3ecba69bfdfc23fd6a21ef9b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33165a7ac539164c551620b4ed42682ec5e01d1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxtOaYACgkQV/+b28ww\nEAl1aQ//SAygL0Eo+b40/CT8plFapiT5ffRr4hMSIDZdc1vfhBhyGBPsDz4QRM4z\nVp40pGy+Wu4sD0sWgn1u9edh7Lu7XaOlw4MJlrce6oZ3x/klyJkIm71IrWwVCBDm\nAMmr4Motszgdin/ONf2q6JghuwvyQNeU0xTMvmSh0v91rHBDvmC3/5+ITeaRwrRj\nurGdtV6089F1i1/M3t03ak6FewLAa7vVnfwQ3Nn9596bjUxj0MoX9s+Lm0Ah4o6g\nsc3s7U79h1TdHNR7g1wkLfFmI6ZmIb4Fyvd/gR5ZYuPUHOGo6c3Pu2IpiNuD3RTg\ntf93tbATFMKmOuTfqYSrLsCIWiKsG5xih4V1z1M31wH0iTivj5mYUGzVFl3pDzWn\npYnl6s3Tm8rHiad3TIpasifiMthAXqKvlqXuiY+2/xaD/NDhfADlz/vCOmxyz5Ri\n4i6KUw0L2Yeod/RolVBD9W8Zze2tSVHMIXKIPLH5TzW4yGdTrhudtjC621VVXWih\nP8CzFrbQt31AxZ9BWFHlTTguvruO3+S7SJqlbCmTTW2AACXJian1bvjRSlORaeTG\nLG8yKmtU4lFHA4YM5HuaT5V/TrGzZsa1uVjpY4xTvVxt4IBPduBY+ixG1/sSmciu\ntvQJuNCLIoSc7y/AYuWKAQ0p8LAe5fX51TGMr/JEyo8Qcg0hZ1s=\n=Ummb\n-----END PGP SIGNATURE-----",
        "payload": "tree c009732da15c25a3ecba69bfdfc23fd6a21ef9b4\nparent d85e4f74a8d66a495abf62d0d7eb6e2196d23912\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550658578 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550662053 +0100\n\n[wallet] DeleteKeyMetadata\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33165a7ac539164c551620b4ed42682ec5e01d1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33165a7ac539164c551620b4ed42682ec5e01d1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33165a7ac539164c551620b4ed42682ec5e01d1a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d85e4f74a8d66a495abf62d0d7eb6e2196d23912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d85e4f74a8d66a495abf62d0d7eb6e2196d23912"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 59,
      "deletions": 1
    },
    "files": [
      {
        "sha": "05519adda0a2b53c4363cdbc4a0502bf693bf57d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=33165a7ac539164c551620b4ed42682ec5e01d1a",
        "patch": "@@ -358,6 +358,13 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata\n     m_script_metadata[script_id] = meta;\n }\n \n+// Erases a keymetadata for a public key.\n+bool CWallet::EraseKeyMetadata(const CPubKey& pubkey)\n+{\n+    return WalletBatch(*database).EraseKeyMetadata(pubkey);\n+}\n+\n+\n // Writes a keymetadata for a public key. overwrite specifies whether to overwrite an existing metadata for that key if there exists one.\n bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n {\n@@ -406,6 +413,23 @@ void CWallet::UpgradeKeyMetadata()\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n \n+void CWallet::DeleteKeyMetadata()\n+{\n+    // mapKeyMetadata and m_script_metadata may be incomplete if metadata couldn't\n+    // be loaded due to data corruption. Instead we iterate over all pubkeys\n+    // and scripts and delete any possible entry.\n+\n+    const std::set<CKeyID>& keys = GetKeys();\n+\n+    for (const CKeyID& key_id : keys) {\n+        CPubKey pubkey;\n+        CScript script;\n+        if (GetPubKey(key_id, pubkey)) {\n+            EraseKeyMetadata(pubkey);\n+        }\n+    }\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "80fc0916d6b0820066108f1c039a532239274df2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=33165a7ac539164c551620b4ed42682ec5e01d1a",
        "patch": "@@ -779,6 +779,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n+    bool EraseKeyMetadata(const CPubKey& pubkey);\n     bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, bool overwrite);\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n@@ -873,6 +874,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Delete stored CKeyMetadata objects\n+    void DeleteKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "3533660a5613de9f0d1ac8a6f017f80334ce953c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=33165a7ac539164c551620b4ed42682ec5e01d1a",
        "patch": "@@ -57,6 +57,11 @@ bool WalletBatch::EraseTx(uint256 hash)\n     return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n }\n \n+bool WalletBatch::EraseKeyMetadata(const CPubKey& pubkey)\n+{\n+    return EraseIC(std::make_pair(std::string(\"keymeta\"), pubkey));\n+}\n+\n bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n {\n     return WriteIC(std::make_pair(std::string(\"keymeta\"), pubkey), meta, overwrite);"
      },
      {
        "sha": "ff92d5547f4ee2dc6cd48e818b1d19be291f41f1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=33165a7ac539164c551620b4ed42682ec5e01d1a",
        "patch": "@@ -188,6 +188,7 @@ class WalletBatch\n     bool WriteTx(const CWalletTx& wtx);\n     bool EraseTx(uint256 hash);\n \n+    bool EraseKeyMetadata(const CPubKey& pubkey);\n     bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite);\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);"
      },
      {
        "sha": "3430e5b78004a8b63a51ccad15cebb59ed22d59e",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33165a7ac539164c551620b4ed42682ec5e01d1a/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=33165a7ac539164c551620b4ed42682ec5e01d1a",
        "patch": "@@ -136,7 +136,7 @@ bool ExecuteKeyMetadata(const std::string& name, std::string& operation) {\n     fprintf(stdout, \"Modifying key metadata...\\n=========================\\n\");\n     fprintf(stdout, \"Operation: %s\\n\", operation.c_str());\n     fprintf(stdout, \"Key: all\\n\");\n-    // wallet_instance->DeleteKeyMetadata();\n+    wallet_instance->DeleteKeyMetadata();\n     wallet_instance->Flush(true);\n     return true;\n }"
      },
      {
        "sha": "acd70b29ea0fe11f57bde66bcd88af14d24cd9f1",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33165a7ac539164c551620b4ed42682ec5e01d1a/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33165a7ac539164c551620b4ed42682ec5e01d1a/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=33165a7ac539164c551620b4ed42682ec5e01d1a",
        "patch": "@@ -101,5 +101,30 @@ def run_test(self):\n         assert_equal(1000, out['keypoolsize_hd_internal'])\n         assert_equal(True, 'hdseedid' in out)\n \n+        self.log.info(\"Test method: keymetadata\")\n+        self.start_node(0, ['-wallet=foo'])\n+        address = self.nodes[0].getnewaddress()\n+        address_info_before = self.nodes[0].getaddressinfo(address)\n+        assert (\"hdmasterfingerprint\" in address_info_before)\n+        self.nodes[0].importmulti([{\n+            \"desc\":\n+            \"wpkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\",\n+            \"timestamp\": \"now\",\n+            \"watchonly\": True\n+        }])\n+        self.stop_node(0)\n+        out = textwrap.dedent('''\\\n+            Modifying key metadata...\n+            =========================\n+            Operation: delete\n+            Key: all\n+        ''')\n+        self.assert_tool_output(out, '-wallet=foo', 'keymetadata', 'delete')\n+        self.start_node(0, ['-wallet=foo'])\n+        address_info_after = self.nodes[0].getaddressinfo(address)\n+        assert (\"hdmasterfingerprint\" not in address_info_after)\n+        self.stop_node(0)\n+\n+\n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  },
  {
    "sha": "4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjcwN2VhYWE0NWUyY2NhYmZmMDA3NDRmNjE4MWEyZGJkNWIyZTVk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T10:30:03Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-20T13:53:15Z"
      },
      "message": "[wallet] delete watch-only key metadata",
      "tree": {
        "sha": "6305c124a99ac0ff6c914ffa728fab0b2bae18b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6305c124a99ac0ff6c914ffa728fab0b2bae18b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxtW8wACgkQV/+b28ww\nEAkhLA//QJkG+2zXK2pVB2J55Hw183o4WtT+DK1rnsghJ+FFRd0MM1TaTN6UPmBj\nrl+u5Vt6EvjiT/YjTD50pGBX00tduS+LlCAJO2QsNBY0V1I5ZmTBiZKT4ivRupjZ\nPsb8MvVs1JEh0m8j50QGs0sb+mcbZP2js6OzNVh5fx0LoJU4XgKcMhabo0AZ8hHf\nf8wDoWE3RN1hgw6+n4Cee3UMDOO/JjzDB6Td35hUzo2Cm2Kd2waAf/K9RS+F0wwf\nJylRjjd3+KxtLVxxaS0AM37FwtafwAolIP4l9rujATNCWLvPRb0AehM3u2MfUmu+\nH7i1TFyb969wSJFKgAfpCJXe5KbdSDdAblqaSrYhQZRKGOE092pjB+/gIMeeq941\nUn0YPJfEjJBU1f1vz7QrReGta6NfpNcSrhiUh6lW3uj2ApV/pUX2YgGaIUSgZm9M\nsr3ZO3C7Oc7BlvN/oiJv0iafZnoE/RoPNY+7yu8a+xfJkrWE6R8n1wCkZz7YfsvP\nEv+xMgVLnsUuzszpo/WgEfA12cNct2y9hzllUQIgjTrRDGiTZPHhoVNTNIMHl31G\nLIgCvE7ODj6rDnkVOiOKAF2bp8+UW7AzQqxic3Ww9GpSoBQNN25eA8ARS8XaTg6g\nbAUZYtasERK/8mjBGPGqUqfN4aohwEjJsHZhjCZ6ZLw7JIVQOwk=\n=yNvs\n-----END PGP SIGNATURE-----",
        "payload": "tree 6305c124a99ac0ff6c914ffa728fab0b2bae18b3\nparent 33165a7ac539164c551620b4ed42682ec5e01d1a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550658603 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550670795 +0100\n\n[wallet] delete watch-only key metadata\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33165a7ac539164c551620b4ed42682ec5e01d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33165a7ac539164c551620b4ed42682ec5e01d1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33165a7ac539164c551620b4ed42682ec5e01d1a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 37,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ee81989b2ccaf368575f7a73757c8ee5dede224e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
        "patch": "@@ -358,6 +358,13 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata\n     m_script_metadata[script_id] = meta;\n }\n \n+bool CWallet::EraseWatchOnlyMeta(const CScript& dest)\n+{\n+    AssertLockHeld(cs_wallet);\n+    return WalletBatch(*database).EraseWatchOnlyMeta(dest);\n+}\n+\n+\n // Erases a keymetadata for a public key.\n bool CWallet::EraseKeyMetadata(const CPubKey& pubkey)\n {\n@@ -426,6 +433,19 @@ void CWallet::DeleteKeyMetadata()\n         CScript script;\n         if (GetPubKey(key_id, pubkey)) {\n             EraseKeyMetadata(pubkey);\n+            script = GetScriptForRawPubKey(pubkey);\n+            EraseWatchOnlyMeta(script);\n+        }\n+        script = GetScriptForDestination(key_id);\n+        EraseWatchOnlyMeta(script);\n+    }\n+\n+    const std::set<CScriptID> scripts = GetCScripts();\n+\n+    for (const CScriptID& scriptid : scripts) {\n+        CScript script;\n+        if (GetCScript(scriptid, script)) {\n+            EraseWatchOnlyMeta(script);\n         }\n     }\n }"
      },
      {
        "sha": "aff1d07106c302703c08bdbd092e25acbde392fe",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
        "patch": "@@ -872,6 +872,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Load metadata (used by LoadWallet)\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void EraseScriptMetadata(const CScriptID& script_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Delete stored CKeyMetadata objects\n@@ -900,6 +901,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool EraseWatchOnlyMeta(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool RemoveWatchOnly(const CScript &dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);"
      },
      {
        "sha": "e3f689a316c89b748061810c846c3d2fefcdef30",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
        "patch": "@@ -116,9 +116,14 @@ bool WalletBatch::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMet\n     return WriteIC(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n+bool WalletBatch::EraseWatchOnlyMeta(const CScript& dest)\n+{\n+    return EraseIC(std::make_pair(std::string(\"watchmeta\"), dest));\n+}\n+\n bool WalletBatch::EraseWatchOnly(const CScript &dest)\n {\n-    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), dest))) {\n+    if (!EraseWatchOnlyMeta(dest)) {\n         return false;\n     }\n     return EraseIC(std::make_pair(std::string(\"watchs\"), dest));"
      },
      {
        "sha": "04710e334f17aeb856a1097fc6855713e7d42a8f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
        "patch": "@@ -197,6 +197,7 @@ class WalletBatch\n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n     bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n+    bool EraseWatchOnlyMeta(const CScript& script);\n     bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      },
      {
        "sha": "f2eda7e0b1fa726d21e5232daac78153a303dd52",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=4b707eaaa45e2ccabff00744f6181a2dbd5b2e5d",
        "patch": "@@ -106,12 +106,16 @@ def run_test(self):\n         address = self.nodes[0].getnewaddress()\n         address_info_before = self.nodes[0].getaddressinfo(address)\n         assert (\"hdmasterfingerprint\" in address_info_before)\n-        self.nodes[0].importmulti([{\n+        result = self.nodes[0].importmulti([{\n             \"desc\":\n-            \"wpkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\",\n+            \"wpkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)#yk54u40t\",\n             \"timestamp\": \"now\",\n             \"watchonly\": True\n         }])\n+        assert (result[0][\"success\"])\n+        address_watch_only = \"bcrt1qngw83fg8dz0k749cg7k3emc7v98wy0c7azaa6h\"\n+        address_watch_only_info_before = self.nodes[0].getaddressinfo(address_watch_only)\n+        assert_equal(address_watch_only_info_before[\"hdmasterfingerprint\"], \"deadbeef\")\n         self.stop_node(0)\n         out = textwrap.dedent('''\\\n             Modifying key metadata...\n@@ -123,6 +127,8 @@ def run_test(self):\n         self.start_node(0, ['-wallet=foo'])\n         address_info_after = self.nodes[0].getaddressinfo(address)\n         assert (\"hdmasterfingerprint\" not in address_info_after)\n+        address_watch_only_info_after = self.nodes[0].getaddressinfo(address)\n+        assert (\"hdmasterfingerprint\" not in address_watch_only_info_after)\n         self.stop_node(0)\n \n "
      }
    ]
  }
]