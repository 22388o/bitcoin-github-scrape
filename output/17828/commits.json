[
  {
    "sha": "04960621582dbd896005db79df4dd2615016f8b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDk2MDYyMTU4MmRiZDg5NjAwNWRiNzlkZjRkZDI2MTUwMTZmOGIy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-23T23:45:26Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-05T21:27:29Z"
      },
      "message": "net: Use log categories when logging events that P2P peers can trigger arbitrarily",
      "tree": {
        "sha": "9a6b3aa950482e1e1c27fe55b845ef1c09738e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a6b3aa950482e1e1c27fe55b845ef1c09738e8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04960621582dbd896005db79df4dd2615016f8b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04960621582dbd896005db79df4dd2615016f8b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04960621582dbd896005db79df4dd2615016f8b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04960621582dbd896005db79df4dd2615016f8b2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "891464950b071091ecb5166c235ef32ab2eb8bac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/891464950b071091ecb5166c235ef32ab2eb8bac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/891464950b071091ecb5166c235ef32ab2eb8bac"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bf324c937f24d2eb923ee123b8ce536e38cb0cce",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04960621582dbd896005db79df4dd2615016f8b2/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04960621582dbd896005db79df4dd2615016f8b2/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=04960621582dbd896005db79df4dd2615016f8b2",
        "patch": "@@ -52,6 +52,13 @@ bool error(const char* fmt, const Args&... args)\n     return false;\n }\n \n+template<typename... Args>\n+bool error_with_debug_log(const BCLog::LogFlags category, const char* fmt, const Args&... args)\n+{\n+    LogPrint(category, \"ERROR: %s\\n\", tfm::format(fmt, args...));\n+    return false;\n+}\n+\n void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n bool FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);"
      },
      {
        "sha": "2df984698075fcf94580d0c3ea6f1d19452fbe85",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04960621582dbd896005db79df4dd2615016f8b2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04960621582dbd896005db79df4dd2615016f8b2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=04960621582dbd896005db79df4dd2615016f8b2",
        "patch": "@@ -661,7 +661,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     CAmount nFees = 0;\n     if (!Consensus::CheckTxInputs(tx, state, m_view, GetSpendHeight(m_view), nFees)) {\n-        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n+        return error_with_debug_log(BCLog::MEMPOOL, \"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n@@ -3600,13 +3600,13 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n         }\n \n         if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n-            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n+            return error_with_debug_log(BCLog::VALIDATION, \"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         // Get prev block index\n         CBlockIndex* pindexPrev = nullptr;\n         BlockMap::iterator mi = m_block_index.find(block.hashPrevBlock);\n         if (mi == m_block_index.end()) {\n-            LogPrintf(\"ERROR: %s: prev block not found\\n\", __func__);\n+            LogPrint(BCLog::VALIDATION, \"ERROR: %s: prev block not found\\n\", __func__);\n             return state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n         }\n         pindexPrev = (*mi).second;\n@@ -3615,7 +3615,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, \"bad-prevblk\");\n         }\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n-            return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n+            return error_with_debug_log(BCLog::VALIDATION, \"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         /* Determine if this block descends from any block which has been found\n          * invalid (m_failed_blocks), then mark pindexPrev and any blocks between\n@@ -3815,7 +3815,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n+            return error_with_debug_log(BCLog::VALIDATION, \"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n "
      }
    ]
  }
]