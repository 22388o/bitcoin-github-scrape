[
  {
    "sha": "faa669cbcd1fc799517b523b0f850e01b11bf40a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE2NjljYmNkMWZjNzk5NTE3YjUyM2IwZjg1MGUwMWIxMWJmNDBh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T20:58:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T21:51:46Z"
      },
      "message": "qa: Premine to deterministic address with -disablewallet",
      "tree": {
        "sha": "69dd6e0a1a1eee171b5a78a3ba465625e60f5976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69dd6e0a1a1eee171b5a78a3ba465625e60f5976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa669cbcd1fc799517b523b0f850e01b11bf40a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbludyAAoJEM4rdWl+aaVI4QAL/A2rsS6fAP0Dh3Bzz444zqh7\nKSqFYmGNPIDDIwZP4hQWysm9Elf1ezEg02sH4CIUDXVdE4my4f2h8efdhEb7sr/V\nqd+luFA/ecsISYU1rlNCMj0MsXUxmXc3TOhCQBZ8R3nTZRltTxKw8JcPbb+FagVz\nvNFzPIFTpbZgWMRZC6z2iRoXbC9g3nM+bYT3O9J1m+6ZYlR3ryHFZlB50xeCMxPF\nBoLifn5bqN1+qlf/A/kDmPSOfrHQ3H6FQGESaD1KB0eRFe4/DuXhXQu/8Zn0xTZw\nJa8QOle1VUh1XEtsPLya04sjSzpdLAOnRVgFSe8IddqX2iD5NPQnSVQFWzqmEggo\n99BGP446U6Yo9cKp+x1/zw75FaURQjF2R7cXwr9LXSCq3d3PBxRMq5O2IRtM4MIQ\n1cv6ltBuhDDHyg8CetCoo05uaLggj+iSPnxLLfWmhT3kvoZ3veP+NqZ7eIXMfE1K\n1Pg/hTg9MANW3JBYvhe0hPvbt1qmWBZVvu81/+6/PQ==\n=+6H+\n-----END PGP SIGNATURE-----",
        "payload": "tree 69dd6e0a1a1eee171b5a78a3ba465625e60f5976\nparent 4799b0932a10c5a48706700a07899b33ef9c8bae\nauthor MarcoFalke <falke.marco@gmail.com> 1536613095 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1536616306 -0400\n\nqa: Premine to deterministic address with -disablewallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa669cbcd1fc799517b523b0f850e01b11bf40a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa669cbcd1fc799517b523b0f850e01b11bf40a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa669cbcd1fc799517b523b0f850e01b11bf40a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4799b0932a10c5a48706700a07899b33ef9c8bae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4799b0932a10c5a48706700a07899b33ef9c8bae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4799b0932a10c5a48706700a07899b33ef9c8bae"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 122,
      "deletions": 59
    },
    "files": [
      {
        "sha": "bc6cd4bdcf0e3224541c667c6b138f3f093e0603",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -168,6 +168,11 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "745cc9e4fcdd2acbdf8aad2d7e7df39d3a8f9a54",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -40,6 +40,13 @@ def set_test_params(self):\n     def setup_nodes(self):\n         skip_if_no_py3_zmq()\n         skip_if_no_bitcoind_zmq(self)\n+\n+        # Import keys\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         import zmq\n \n         # Initialize ZMQ context and socket.\n@@ -59,10 +66,12 @@ def setup_nodes(self):\n         self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n         self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].extra_args = [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]]\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         try:\n             self._zmq_test()"
      },
      {
        "sha": "e2ac76aac4f7de8ac4cf1bbfcb5e58f68fb5841a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -34,7 +34,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         return (txid, send_value)\n \n     def run_test(self):\n-        ''' Mine some blocks and have them mature. '''\n+        # Mine some blocks and have them mature.\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']"
      },
      {
        "sha": "20f472521a9f6b41dba349b3457ea417846bbc4f",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -70,4 +70,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "c8144bba71fe8f456aa5929200eff1b07fcf13b1",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -47,9 +47,10 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207', '-prune=1']]\n \n     def run_test(self):\n+        self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n+\n         self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n@@ -169,7 +170,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bogosize'], 17000),\n+        assert_equal(res['bogosize'], 15000),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n         size = res['disk_size']\n         assert size > 6400"
      },
      {
        "sha": "afb098395320f3f172013d71c68e7ce19601c0c4",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -158,6 +158,7 @@ def main(self):\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n             self.setup_chain()\n             self.setup_network()\n+            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -247,6 +248,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        if self.setup_clean_chain:\n+            return\n+\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+\n+            n.importprivkey(n.get_deterministic_priv_key()[1])\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n@@ -415,7 +429,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=self.rpc_timewait, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n@@ -439,7 +453,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generate(1)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n@@ -453,8 +467,9 @@ def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n \n             for i in range(MAX_NODES):\n+                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n                 for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['wallets', 'chainstate', 'blocks']:\n+                    if entry not in ['chainstate', 'blocks']:\n                         os.remove(cache_path(i, entry))\n \n         for i in range(self.num_nodes):"
      },
      {
        "sha": "908dda94c579076cfffa2759e5669cc7f730c63c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -97,6 +97,22 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.p2ps = []\n \n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        PRIV_KEYS = [\n+            # adress , privkey\n+            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+        ]\n+        return PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)"
      },
      {
        "sha": "bebaea79566e229946577cef45309a2b3f20fd2e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 52,
        "deletions": 48,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -29,50 +29,54 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_label, comment = line.split(\"#\")\n-                # key = key_label.split(\" \")[0]\n-                keytype = key_label.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addr_keypath = comment.split(\" addr=\")[1]\n-                    addr = addr_keypath.split(\" \")[0]\n+                key_date_label, comment = line.split(\"#\")\n+                key_date_label = key_date_label.split(\" \")\n+                # key = key_date_label[0]\n+                date = key_date_label[1]\n+                keytype = key_date_label[2]\n+                if not len(comment) or date.startswith('1970'):\n+                    continue\n+\n+                addr_keypath = comment.split(\" addr=\")[1]\n+                addr = addr_keypath.split(\" \")[0]\n+                keypath = None\n+                if keytype == \"inactivehdseed=1\":\n+                    # ensure the old master is still available\n+                    assert (hd_master_addr_old == addr)\n+                elif keytype == \"hdseed=1\":\n+                    # ensure we have generated a new hd master key\n+                    assert (hd_master_addr_old != addr)\n+                    hd_master_addr_ret = addr\n+                elif keytype == \"script=1\":\n+                    # scripts don't have keypaths\n                     keypath = None\n-                    if keytype == \"inactivehdseed=1\":\n-                        # ensure the old master is still available\n-                        assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdseed=1\":\n-                        # ensure we have generated a new hd master key\n-                        assert(hd_master_addr_old != addr)\n-                        hd_master_addr_ret = addr\n-                    elif keytype == \"script=1\":\n-                        # scripts don't have keypaths\n-                        keypath = None\n-                    else:\n-                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n-\n-                    # count key types\n-                    for addrObj in addrs:\n-                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labeled entry in the wallet should contain both a native address\n-                            # and the p2sh-p2wpkh address that was added at wallet setup\n-                            if len(addr.split(\",\")) == 2:\n-                                addr_list = addr.split(\",\")\n-                                # the entry should be of the first key in the wallet\n-                                assert_equal(addrs[0]['address'], addr_list[0])\n-                                witness_addr_ret = addr_list[1]\n-                            found_addr += 1\n-                            break\n-                        elif keytype == \"change=1\":\n-                            found_addr_chg += 1\n-                            break\n-                        elif keytype == \"reserve=1\":\n-                            found_addr_rsv += 1\n-                            break\n-\n-                    # count scripts\n-                    for script_addr in script_addrs:\n-                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n-                            found_script_addr += 1\n-                            break\n+                else:\n+                    keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                # count key types\n+                for addrObj in addrs:\n+                    if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        # a labeled entry in the wallet should contain both a native address\n+                        # and the p2sh-p2wpkh address that was added at wallet setup\n+                        if len(addr.split(\",\")) == 2:\n+                            addr_list = addr.split(\",\")\n+                            # the entry should be of the first key in the wallet\n+                            assert_equal(addrs[0]['address'], addr_list[0])\n+                            witness_addr_ret = addr_list[1]\n+                        found_addr += 1\n+                        break\n+                    elif keytype == \"change=1\":\n+                        found_addr_chg += 1\n+                        break\n+                    elif keytype == \"reserve=1\":\n+                        found_addr_rsv += 1\n+                        break\n+\n+                # count scripts\n+                for script_addr in script_addrs:\n+                    if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                        found_script_addr += 1\n+                        break\n \n         return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n@@ -116,9 +120,9 @@ def run_test(self):\n             read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n-        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n-        assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n-        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n+        assert_equal(found_addr_chg, 0)  # 0 blocks where mined\n+        assert_equal(found_addr_rsv, 90 * 2)  # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -132,8 +136,8 @@ def run_test(self):\n             read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n-        assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n-        assert_equal(found_addr_rsv, 90*2)\n+        assert_equal(found_addr_chg, 90 * 2)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 * 2)\n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail"
      },
      {
        "sha": "bb8dee0022a32165e67be28c089069bbf990d8eb",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -116,10 +116,19 @@ def setup_network(self):\n                 extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=extra_args)\n+\n+        # Import keys\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "554cd61daa2de6b14b2afa6b86fa13f31441f247",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa669cbcd1fc799517b523b0f850e01b11bf40a/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "patch": "@@ -18,6 +18,11 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n+        super().import_deterministic_coinbase_privkeys()\n+        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n@@ -64,7 +69,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2)  # Right now 2 entries\n+        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -81,7 +86,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3)  # Became 3 entries\n+        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      }
    ]
  },
  {
    "sha": "fac95398366f644911b58f1605e6bc37fb76782d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM5NTM5ODM2NmY2NDQ5MTFiNThmMTYwNWU2YmMzN2ZiNzY3ODJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-09T17:32:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T21:53:21Z"
      },
      "message": "qa: Run all tests even if wallet is not compiled",
      "tree": {
        "sha": "098e7ed7b1099267673386bd3cca40b31db77741",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/098e7ed7b1099267673386bd3cca40b31db77741"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac95398366f644911b58f1605e6bc37fb76782d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJblufSAAoJEM4rdWl+aaVIOtEMAJ6q9B1c6n34FpWWtufMepY8\n3SphwRqbJ2JpRSMnImwJFfqbhQzePQfG+wmC2Hl532YIZPsrRaz2U69k5KRV929D\nq3XRGWxpM+oCGF+qTwAuTKnXdjVy68S89KUAPR/27Gio8no8mYVBKUj3+YVQuEUR\nVhwXlph+BwFZ6JLE5EjYcmXn+RjIORM53EDQIr6EmRS9MD2rG3wjm2EsyK6Z+MXo\nwVX3q7XxGzYRYp3kbEioqhkH4QaFB8ynoz79ybi9oLhqoexnYtEpigHom2UHYG0q\ncdwkDv+MZYJGd8Dxdw9GppDNql/qEwJOI80GwlXBNwbbO/xuwoK7qkcY3HLnDTAj\n89WIVmQ1bJoaZtkqzcXXdIXBM/pxJ9zYCcCy2axnw1YUpQ7LIj1O0+kqW0YHMZHf\nc98aERP/yJWnNISxs3HFJRUMk95WmkEgzHgKBcC/LUfAKJOyl/Ev+VZtoihz/44D\np2Ix/tA1EM/l4pL+9+2Er3QOx1RLu0byKveHut0BqA==\n=oNj7\n-----END PGP SIGNATURE-----",
        "payload": "tree 098e7ed7b1099267673386bd3cca40b31db77741\nparent faa669cbcd1fc799517b523b0f850e01b11bf40a\nauthor MarcoFalke <falke.marco@gmail.com> 1536514357 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1536616401 -0400\n\nqa: Run all tests even if wallet is not compiled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac95398366f644911b58f1605e6bc37fb76782d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac95398366f644911b58f1605e6bc37fb76782d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac95398366f644911b58f1605e6bc37fb76782d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa669cbcd1fc799517b523b0f850e01b11bf40a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa669cbcd1fc799517b523b0f850e01b11bf40a"
      }
    ],
    "stats": {
      "total": 456,
      "additions": 381,
      "deletions": 75
    },
    "files": [
      {
        "sha": "4c9d60b3376a5c58015711d401f28af6b03c78f5",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -67,10 +67,11 @@ def custom_function():\n     # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n     pass\n \n+\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), skip_test_if_missing_module(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n@@ -84,6 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n     # to be run in automated environments without command-line options."
      },
      {
        "sha": "8466f851caed1b496994ccd3027732d46c90092c",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -25,6 +25,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n "
      },
      {
        "sha": "811d058b8b63e3b6f0ec1c48e2f619fa88420330",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -75,6 +75,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "824f0d7e099e5e69af034c695c1944a918c4a217",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)"
      },
      {
        "sha": "9a53b62abdb5d81b013c8134ca026bd8d50b6935",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -57,6 +57,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "1124119e2bc971e91c7afcf986a37da9069fc483",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_config_file_parser(self):\n         # Assume node is stopped\n "
      },
      {
        "sha": "a2796efa2a396bfd3f58a7366963cb3d551fc941",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -145,6 +145,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def generate_blocks(self, number, version, test_blocks=None):\n         if test_blocks is None:\n             test_blocks = []"
      },
      {
        "sha": "ae1eacf2d7bdd8c989ff25d75d2e29443dc861b6",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -63,6 +63,9 @@ def set_test_params(self):\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "f9e1ef0231bfe40a10f8fc758dc296d2cfb3f71c",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "aaab4279b5f0467cfb2705894bd2aad53d0f6251",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -126,6 +126,9 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters."
      },
      {
        "sha": "a74c413440fd6a7c01b0c0a170cf00ca54d2d8d7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "87c318de9a06a25603282ff88dd12f57e2296fd0",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "5d180c2244d0405d8a3bf82852bbee1a334f6e6b",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2"
      },
      {
        "sha": "25a7329a0d1f516c3a70f025ae7ef39ac0994330",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")"
      },
      {
        "sha": "a79cc3d34bf48b6bb48e12ef950b9e14bd2068a6",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -44,9 +44,12 @@ def set_test_params(self):\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n+        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n "
      },
      {
        "sha": "772151dc4ba1f5649c3ecf5ac35b18278b9de878",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -33,15 +33,20 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\" ]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.extra_args = [self.full_node_default_args,\n-                           self.full_node_default_args,\n-                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-prune=550\"]]\n+        self.extra_args = [\n+            self.full_node_default_args,\n+            self.full_node_default_args,\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "ff7c2b23bf8a6d9d286d2a3de13823699e900d93",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -61,17 +61,26 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     return COutPoint(int(txid, 16), 0)\n \n-class ReplaceByFeeTest(BitcoinTestFramework):\n \n+class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args= [[\"-maxorphantx=1000\",\n-                           \"-whitelist=127.0.0.1\",\n-                           \"-limitancestorcount=50\",\n-                           \"-limitancestorsize=101\",\n-                           \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"],\n-                           [\"-mempoolreplacement=0\"]]\n+        self.extra_args = [\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=127.0.0.1\",\n+                \"-limitancestorcount=50\",\n+                \"-limitancestorsize=101\",\n+                \"-limitdescendantcount=200\",\n+                \"-limitdescendantsize=101\",\n+            ],\n+            [\n+                \"-mempoolreplacement=0\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Leave IBD"
      },
      {
        "sha": "3727eeaeae9dde18e13f9727233fc772aa3e23ed",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "2cbfc26e899f4fd83a8dc08a533b00beead62616",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -46,9 +46,30 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [\n+            [\n+                \"-rpcserialversion=0\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=4\",\n+                \"-rpcserialversion=1\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=536870915\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "cf77720437e4c714fb26960f71f73999c2d68253",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "f311858beeb017b137a739beed9a5bb5636b7e4d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n "
      },
      {
        "sha": "afa9de580f0309922fb7e720b0dacf654b3090f5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -43,6 +43,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n         if req_type == ReqType.JSON:"
      },
      {
        "sha": "c853ba7e3f8d14c4b47c27ed7a5fea78a242d50e",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -5,15 +5,16 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 hash256,\n-                                )\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hash256,\n+)\n from io import BytesIO\n \n+\n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n         self.sequence = 0\n@@ -37,10 +38,12 @@ class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n-    def setup_nodes(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+        self.skip_if_no_wallet()\n \n+    def setup_nodes(self):\n         # Import keys\n         self.add_nodes(self.num_nodes)\n         self.start_nodes()"
      },
      {
        "sha": "8847777ba7b308e97c0f5c86cae7d925571d278b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)"
      },
      {
        "sha": "c0918893cdc9a11d3cdd19634f94fdb4494bcf14",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "9336547a6b42ba94ea030f986ac72499f8abf9e8",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n     def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):"
      },
      {
        "sha": "b4e9d967fd6ccf696a01d2c5be06806143fad1b9",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -47,6 +47,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "123f0b4c28b7507ede041d8cfd1f99635c256761",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -17,6 +17,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     alert_filename = None  # Set by setup_network\n \n     def run_test(self):"
      },
      {
        "sha": "d035ca907a5d778619c0c696993d0e61f9c9ccd0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -13,6 +13,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions"
      },
      {
        "sha": "854d506f0dd712d4cfaf8f6371e1fa6d6684d22f",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -21,6 +21,9 @@ class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "15396c354d6f6de69710df15a685f623c7587a80",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "9a3c15a4a72ce9b0f85b78dd3e29495b024aedf6",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -28,6 +28,9 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "92590717f3c4dac5f4a3fb8c9a7a97bd3cb9403f",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Test `prioritisetransaction` required parameters\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction)"
      },
      {
        "sha": "3a5bdf806b29174152181baa74e463f61eaffb2d",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -102,6 +102,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "d589519e450048fba34f6e610d52d2aeb4a145fe",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -42,6 +42,9 @@ class FeeFilterTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "884fb4b063335024baa779dddc871b065bf1967e",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -30,6 +30,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []"
      },
      {
        "sha": "04d68bee4e88766610f131a2b1a802d61ea8052e",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -24,6 +24,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node"
      },
      {
        "sha": "4cc43a4fa4eee7631f376d0451faaf02140fcd3c",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generate(1)  # Get node out of IBD"
      },
      {
        "sha": "91ef5684381279ee3bc333829fedb680bbd857d8",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n "
      },
      {
        "sha": "05354d17e1c62788ea2386f61a06b9759aeb232f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -93,6 +93,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)"
      },
      {
        "sha": "a16c6a1d4743a0a787308bb2a9978e55ebb62971",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -34,6 +34,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)"
      },
      {
        "sha": "88daa8d27d9ba73de052273ac5689d78b9e4001c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -198,6 +198,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "9a782c0bb9938cbf1d9c35d5ae7dea1e47d312c8",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -208,6 +208,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n "
      },
      {
        "sha": "232274f59eaecc792f06ba096c8e5d12df253c1d",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -66,6 +66,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for"
      },
      {
        "sha": "00317a2c08823276bfa8824e8725e2cece40cd08",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -48,6 +48,9 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n "
      },
      {
        "sha": "3cc35a7b9a4e01978d00681ec20d707cfcb4e4a6",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -12,8 +12,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def get_keys(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n         self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n         self.priv = [node1.dumpprivkey(a) for a in self.add]"
      },
      {
        "sha": "daa890ab15620eadecd95369bad549a31b31aa82",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n "
      },
      {
        "sha": "bc19c60dde0834ad7ade58015e7cf5ae28fd7a21",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -17,15 +17,18 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def run_test (self):\n-        tips = self.nodes[0].getchaintips ()\n-        assert_equal (len (tips), 1)\n-        assert_equal (tips[0]['branchlen'], 0)\n-        assert_equal (tips[0]['height'], 200)\n-        assert_equal (tips[0]['status'], 'active')\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        tips = self.nodes[0].getchaintips()\n+        assert_equal(len(tips), 1)\n+        assert_equal(tips[0]['branchlen'], 0)\n+        assert_equal(tips[0]['height'], 200)\n+        assert_equal(tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n-        self.split_network ()\n+        self.split_network()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])"
      },
      {
        "sha": "be096af892c3375b6fbc3765409b00adbf62ca72",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -4,9 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+\n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -26,12 +27,16 @@ def run_test(self):\n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n \n-        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+\n+        if self.is_wallet_compiled():\n+            components.append('Wallet')\n \n-        if is_zmq_enabled(self):\n+        if self.is_zmq_compiled():\n             components.append('Zmq')\n \n         assert_equal(titles, components)\n \n+\n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "84f7cd05fb403f8887f8164f89280b6267332385",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "f383b82bb5e67c00a4fbae556f01efe9be875a56",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "54dc87144881a94128cb76041b5b31a4cc97074d",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -44,6 +44,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)"
      },
      {
        "sha": "96f9ccdbdbce1c7278033b2793b5838398f08156",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -14,6 +14,10 @@ class ScantxoutsetTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(110)"
      },
      {
        "sha": "ad0e29b4515633c660745d8e00eb37ac062a48a0",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "5c07f2ccae51c19bf12d51ebffacb41daf40cd96",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "867ba25022a6766b2ed6606c8426f40780a7941b",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "bfa6b06f67f2e264fa9dad7eca8f57114f308795",
        "filename": "test/functional/rpc_zmq.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/rpc_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_zmq.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -4,8 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test for the ZMQ RPC methods.\"\"\"\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_py3_zmq, skip_if_no_bitcoind_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n \n@@ -17,9 +16,11 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+\n     def run_test(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n         self._test_getzmqnotifications()\n \n     def _test_getzmqnotifications(self):"
      },
      {
        "sha": "57c985b2a2f1972236bf89f122c1fb5772fd5051",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 49,
        "deletions": 22,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -44,6 +44,13 @@ class TestStatus(Enum):\n TEST_EXIT_SKIPPED = 77\n \n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -156,6 +163,7 @@ def main(self):\n         try:\n             if self.options.usecli and not self.supports_cli:\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n             self.import_deterministic_coinbase_privkeys()\n@@ -221,6 +229,10 @@ def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n         pass\n \n+    def skip_test_if_missing_module(self):\n+        \"\"\"Override this method to skip a test if a module is not compiled\"\"\"\n+        pass\n+\n     def setup_chain(self):\n         \"\"\"Override this method to customize blockchain setup\"\"\"\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n@@ -486,30 +498,45 @@ def _initialize_chain_clean(self):\n         for i in range(self.num_nodes):\n             initialize_datadir(self.options.tmpdir, i)\n \n+    def skip_if_no_py3_zmq(self):\n+        \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n+        try:\n+            import zmq  # noqa\n+        except ImportError:\n+            raise SkipTest(\"python3-zmq module not available.\")\n+\n+    def skip_if_no_bitcoind_zmq(self):\n+        \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+        if not self.is_zmq_compiled():\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+    def skip_if_no_wallet(self):\n+        \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n+        if not self.is_wallet_compiled():\n+            raise SkipTest(\"wallet has not been compiled.\")\n+\n+    def skip_if_no_cli(self):\n+        \"\"\"Skip the running test if bitcoin-cli has not been compiled.\"\"\"\n+        if not self.is_cli_compiled():\n+            raise SkipTest(\"bitcoin-cli has not been compiled.\")\n+\n+    def is_cli_compiled(self):\n+        \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n-\n-def skip_if_no_py3_zmq():\n-    \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n-    try:\n-        import zmq  # noqa\n-    except ImportError:\n-        raise SkipTest(\"python3-zmq module not available.\")\n-\n+        return config[\"components\"].getboolean(\"ENABLE_UTILS\")\n \n-def skip_if_no_bitcoind_zmq(test_instance):\n-    \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n-    if not is_zmq_enabled(test_instance):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    def is_wallet_compiled(self):\n+        \"\"\"Checks whether the wallet module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n+        return config[\"components\"].getboolean(\"ENABLE_WALLET\")\n \n-def is_zmq_enabled(test_instance):\n-    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n-    config = configparser.ConfigParser()\n-    config.read_file(open(test_instance.options.configfile))\n+    def is_zmq_compiled(self):\n+        \"\"\"Checks whether the zmq module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")\n+        return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      },
      {
        "sha": "37b378e9ca87477a0a120f9031b5998569be4437",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -236,8 +236,6 @@ def main():\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n \n-    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n-    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n@@ -246,9 +244,9 @@ def main():\n         print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n-    if not (enable_wallet and enable_utils and enable_bitcoind):\n-        print(\"No functional tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+    if not enable_bitcoind:\n+        print(\"No functional tests to run.\")\n+        print(\"Rerun ./configure with --with-daemon and then make\")\n         sys.exit(0)\n \n     # Build list of tests"
      },
      {
        "sha": "e5ac2c8bd45971c5673d765f84dd5620e03666fc",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[1].generate(100)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "0f75045c9dce50cfc694f0fca4fe1208d0b05e59",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -63,6 +63,7 @@\n     sync_mempools,\n )\n \n+\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n@@ -72,9 +73,12 @@ def set_test_params(self):\n             [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n             [\"-addresstype=bech32\"],\n             [\"-changetype=p2sh-segwit\"],\n-            []\n+            [],\n         ]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "32ec385fa1264c0df62fb64d0d274048acacaf0a",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "4079d054914b637d998a076d33d7e84e53242f99",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)"
      },
      {
        "sha": "2ea72896bbf9c1cfe00842c321f876330980f848",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -31,8 +31,14 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i), \"-mintxfee=0.00002\"]\n-                           for i in range(self.num_nodes)]\n+        self.extra_args = [[\n+            \"-deprecatedrpc=addwitnessaddress\",\n+            \"-walletrbf={}\".format(i),\n+            \"-mintxfee=0.00002\",\n+        ] for i in range(self.num_nodes)]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -17,6 +17,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n         self.log.info(\"Test disableprivatekeys creation.\")"
      },
      {
        "sha": "db731b2a346227a22b77d70ca7435ccc6403dc24",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -87,6 +87,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.rpc_timeout = 120\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "d8c27b09d96e643624b948b386e1d157c9a75d41",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\""
      },
      {
        "sha": "0c67982bbeb2930bdd0b3afd1796deb269baae63",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -11,6 +11,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "9d61483868819137a0e8091e0c0ca298e6cad0b4",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -23,7 +23,10 @@ def set_test_params(self):\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timewait = 120\n \n-    def run_test (self):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n         # Mine some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "48e71f6c40baf22d8062b16c9c471b3c08136981",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -21,6 +21,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)"
      },
      {
        "sha": "aa4e37ed602ca659ed04a92ab15af3440d3885b3",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -109,6 +109,9 @@ class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):"
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "26b181db339b5a5daec285510d96929aba9a08e9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "acc336e4d5f78080121f8d544b120b476191848a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -13,6 +13,9 @@ class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()"
      },
      {
        "sha": "f1a441c399733bb3f3f0da0d5f4f4109785722ff",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")"
      },
      {
        "sha": "8d7c77bb96483cb284f75d1df87dd343e40a1873",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Check that there's no UTXO on the node\n         node = self.nodes[0]"
      },
      {
        "sha": "3485c4470f6b2a42de323785d5c4ff5b5c956568",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -23,6 +23,9 @@ def import_deterministic_coinbase_privkeys(self):\n         super().import_deterministic_coinbase_privkeys()\n         self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "53e671cd3b0ac1172a3b5eaba8511ba04e4606d8",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()"
      },
      {
        "sha": "5a17395abdb82dde8f3d9c3d35c5aadea26db49b",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)"
      },
      {
        "sha": "435821ec4804d9e4c05e4d2cb4e98c126bf2784f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "00bf58d7096597d47aa78405871923b131b65cad",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['--walletbroadcast=false']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)"
      },
      {
        "sha": "d78c105c174903e2a290fc5ca94a559047cffd03",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -16,6 +16,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "f114d5ab688890f352ac14be07086f4e70268eeb",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -18,6 +18,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "adebff360a5ae7f6d77801091007f6868fd54829",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac95398366f644911b58f1605e6bc37fb76782d/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=fac95398366f644911b58f1605e6bc37fb76782d",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)"
      }
    ]
  }
]