[
  {
    "sha": "f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2JmNWM3YTk0NTk4ZGVjMGVlY2FiYWE5NGM4NjM2ZWIyN2JmZTVl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-29T15:36:23Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-19T13:31:59Z"
      },
      "message": "Add a wtxid-index to the mempool",
      "tree": {
        "sha": "c80d607aa3a644f35e4e30630c1a1f20485da924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c80d607aa3a644f35e4e30630c1a1f20485da924"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f72ddb7ee4cc177de31f43c69390ee72687222a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f72ddb7ee4cc177de31f43c69390ee72687222a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f72ddb7ee4cc177de31f43c69390ee72687222a"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 46,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1d9f6a4a46b3d7f1d8d8b77a180285f677a65e18",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
        "patch": "@@ -726,12 +726,12 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     assert(innerUsage == cachedInnerUsage);\n }\n \n-bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)\n+bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid)\n {\n     LOCK(cs);\n-    indexed_transaction_set::const_iterator i = mapTx.find(hasha);\n+    indexed_transaction_set::const_iterator i = wtxid ? get_iter_from_wtxid(hasha) : mapTx.find(hasha);\n     if (i == mapTx.end()) return false;\n-    indexed_transaction_set::const_iterator j = mapTx.find(hashb);\n+    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);\n     if (j == mapTx.end()) return true;\n     uint64_t counta = i->GetCountWithAncestors();\n     uint64_t countb = j->GetCountWithAncestors();\n@@ -811,10 +811,10 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n     return i->GetSharedTx();\n }\n \n-TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n+TxMempoolInfo CTxMemPool::info(const uint256& hash, bool wtxid) const\n {\n     LOCK(cs);\n-    indexed_transaction_set::const_iterator i = mapTx.find(hash);\n+    indexed_transaction_set::const_iterator i = (wtxid ? get_iter_from_wtxid(hash) : mapTx.find(hash));\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n     return GetInfo(i);\n@@ -917,8 +917,8 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    // Estimate the overhead of mapTx to be 12 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n-    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n void CTxMemPool::RemoveUnbroadcastTx(const uint256& txid, const bool unchecked) {"
      },
      {
        "sha": "ff7be62f2e289a6b05e0ac2edde0f8566f18a224",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 39,
        "deletions": 4,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
        "patch": "@@ -198,6 +198,22 @@ struct mempoolentry_txid\n     }\n };\n \n+// extracts a transaction witness-hash from CTxMemPoolEntry or CTransactionRef\n+struct mempoolentry_wtxid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetWitnessHash();\n+    }\n+\n+    result_type operator() (const CTransactionRef& tx) const\n+    {\n+        return tx->GetWitnessHash();\n+    }\n+};\n+\n+\n /** \\class CompareTxMemPoolEntryByDescendantScore\n  *\n  *  Sort an entry by max(score/size of entry's tx, score/size with all descendants).\n@@ -318,6 +334,7 @@ class CompareTxMemPoolEntryByAncestorFee\n struct descendant_score {};\n struct entry_time {};\n struct ancestor_score {};\n+struct index_by_wtxid {};\n \n class CBlockPolicyEstimator;\n \n@@ -383,8 +400,9 @@ class SaltedTxidHasher\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n- * - transaction hash\n+ * mapTx is a boost::multi_index that sorts the mempool on 5 criteria:\n+ * - transaction hash (txid)\n+ * - witness-transaction hash (wtxid)\n  * - descendant feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n  * - ancestor feerate [we use min(feerate of tx, feerate of tx with all unconfirmed ancestors)]\n@@ -469,6 +487,12 @@ class CTxMemPool\n         boost::multi_index::indexed_by<\n             // sorted by txid\n             boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>,\n+            // sorted by wtxid\n+            boost::multi_index::hashed_unique<\n+                boost::multi_index::tag<index_by_wtxid>,\n+                mempoolentry_wtxid,\n+                SaltedTxidHasher\n+            >,\n             // sorted by fee rate\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::tag<descendant_score>,\n@@ -586,7 +610,7 @@ class CTxMemPool\n \n     void clear();\n     void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n-    bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n+    bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid=false);\n     void queryHashes(std::vector<uint256>& vtxid) const;\n     bool isSpent(const COutPoint& outpoint) const;\n     unsigned int GetTransactionsUpdated() const;\n@@ -695,8 +719,19 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n+    bool wtxid_exists(const uint256& hash) const\n+    {\n+        LOCK(cs);\n+        return (mapTx.get<index_by_wtxid>().count(hash) != 0);\n+    }\n+\n     CTransactionRef get(const uint256& hash) const;\n-    TxMempoolInfo info(const uint256& hash) const;\n+    txiter get_iter_from_wtxid(const uint256& wtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n+        return mapTx.project<0>(mapTx.get<index_by_wtxid>().find(wtxid));\n+    }\n+    TxMempoolInfo info(const uint256& hash, bool wtxid=false) const;\n     std::vector<TxMempoolInfo> infoAll() const;\n \n     size_t DynamicMemoryUsage() const;"
      }
    ]
  },
  {
    "sha": "fec2cba022afba0da16ef4a029e4a2cd0c00153f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWMyY2JhMDIyYWZiYTBkYTE2ZWY0YTAyOWU0YTJjZDBjMDAxNTNm",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-05-01T01:20:01Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:23Z"
      },
      "message": "Add wtxid to mempool unbroadcast tracking",
      "tree": {
        "sha": "e5205f5c31c3446932fb1199da8d14bfc7a484fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5205f5c31c3446932fb1199da8d14bfc7a484fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fec2cba022afba0da16ef4a029e4a2cd0c00153f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec2cba022afba0da16ef4a029e4a2cd0c00153f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fec2cba022afba0da16ef4a029e4a2cd0c00153f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec2cba022afba0da16ef4a029e4a2cd0c00153f/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7bf5c7a94598dec0eecabaa94c8636eb27bfe5e"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9e86f5442d6522ff9dd902901971fbe372b0e8ee",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fec2cba022afba0da16ef4a029e4a2cd0c00153f",
        "patch": "@@ -818,14 +818,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n \n void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n {\n-    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+    std::map<uint256, uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n \n-    for (const uint256& txid : unbroadcast_txids) {\n+    for (const auto& elem : unbroadcast_txids) {\n         // Sanity check: all unbroadcast txns should exist in the mempool\n-        if (m_mempool.exists(txid)) {\n-            RelayTransaction(txid, *connman);\n+        if (m_mempool.exists(elem.first)) {\n+            RelayTransaction(elem.first, *connman);\n         } else {\n-            m_mempool.RemoveUnbroadcastTx(txid, true);\n+            m_mempool.RemoveUnbroadcastTx(elem.first, true);\n         }\n     }\n "
      },
      {
        "sha": "a571e3b02a7f7c5f454426e321ecf5a4eb2a99b7",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=fec2cba022afba0da16ef4a029e4a2cd0c00153f",
        "patch": "@@ -80,7 +80,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     if (relay) {\n         // the mempool tracks locally submitted transactions to make a\n         // best-effort of initial broadcast\n-        node.mempool->AddUnbroadcastTx(hashTx);\n+        node.mempool->AddUnbroadcastTx(hashTx, tx->GetWitnessHash());\n \n         RelayTransaction(hashTx, *node.connman);\n     }"
      },
      {
        "sha": "4df2cb51147712a8e48a2376ecc8311974ac9547",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fec2cba022afba0da16ef4a029e4a2cd0c00153f",
        "patch": "@@ -573,8 +573,11 @@ class CTxMemPool\n \n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** track locally submitted transactions to periodically retry initial broadcast */\n-    std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n+    /**\n+     * track locally submitted transactions to periodically retry initial broadcast\n+     * map of txid -> wtxid\n+     */\n+    std::map<uint256, uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n@@ -737,19 +740,19 @@ class CTxMemPool\n     size_t DynamicMemoryUsage() const;\n \n     /** Adds a transaction to the unbroadcast set */\n-    void AddUnbroadcastTx(const uint256& txid) {\n+    void AddUnbroadcastTx(const uint256& txid, const uint256& wtxid) {\n         LOCK(cs);\n         // Sanity Check: the transaction should also be in the mempool\n         if (exists(txid)) {\n-            m_unbroadcast_txids.insert(txid);\n+            m_unbroadcast_txids[txid] = wtxid;\n         }\n     }\n \n     /** Removes a transaction from the unbroadcast set */\n     void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false);\n \n     /** Returns transactions in unbroadcast set */\n-    std::set<uint256> GetUnbroadcastTxs() const {\n+    const std::map<uint256, uint256>& GetUnbroadcastTxs() const {\n         LOCK(cs);\n         return m_unbroadcast_txids;\n     }"
      },
      {
        "sha": "c977cd2b6bb48216765be26e704a4ed90908258d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec2cba022afba0da16ef4a029e4a2cd0c00153f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fec2cba022afba0da16ef4a029e4a2cd0c00153f",
        "patch": "@@ -5091,19 +5091,22 @@ bool LoadMempool(CTxMemPool& pool)\n         }\n \n         // TODO: remove this try except in v0.22\n+        std::map<uint256, uint256> unbroadcast_txids;\n         try {\n-          std::set<uint256> unbroadcast_txids;\n           file >> unbroadcast_txids;\n           unbroadcast = unbroadcast_txids.size();\n-\n-          for (const auto& txid : unbroadcast_txids) {\n-            pool.AddUnbroadcastTx(txid);\n-          }\n         } catch (const std::exception&) {\n           // mempool.dat files created prior to v0.21 will not have an\n           // unbroadcast set. No need to log a failure if parsing fails here.\n         }\n-\n+        for (const auto& elem : unbroadcast_txids) {\n+            // Don't add unbroadcast transactions that didn't get back into the\n+            // mempool.\n+            const CTransactionRef& added_tx = pool.get(elem.first);\n+            if (added_tx != nullptr) {\n+                pool.AddUnbroadcastTx(elem.first, added_tx->GetWitnessHash());\n+            }\n+        }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n         return false;\n@@ -5119,7 +5122,7 @@ bool DumpMempool(const CTxMemPool& pool)\n \n     std::map<uint256, CAmount> mapDeltas;\n     std::vector<TxMempoolInfo> vinfo;\n-    std::set<uint256> unbroadcast_txids;\n+    std::map<uint256, uint256> unbroadcast_txids;\n \n     static Mutex dump_mutex;\n     LOCK(dump_mutex);"
      }
    ]
  },
  {
    "sha": "81533be705bf3ae1d44a85776d442ad6e882e6cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTUzM2JlNzA1YmYzYWUxZDQ0YTg1Nzc2ZDQ0MmFkNmU4ODJlNmNm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-30T16:12:56Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Just pass a hash to AddInventoryKnown\n\nSince it's only used for transactions, there's no need to pass in an inv type.",
      "tree": {
        "sha": "260500199c3994f8b3a0a21618da3b1f060c2aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/260500199c3994f8b3a0a21618da3b1f060c2aed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81533be705bf3ae1d44a85776d442ad6e882e6cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81533be705bf3ae1d44a85776d442ad6e882e6cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81533be705bf3ae1d44a85776d442ad6e882e6cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81533be705bf3ae1d44a85776d442ad6e882e6cf/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fec2cba022afba0da16ef4a029e4a2cd0c00153f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec2cba022afba0da16ef4a029e4a2cd0c00153f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fec2cba022afba0da16ef4a029e4a2cd0c00153f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "86e190fea8f6d428040df6aea6cdae25af606965",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81533be705bf3ae1d44a85776d442ad6e882e6cf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81533be705bf3ae1d44a85776d442ad6e882e6cf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=81533be705bf3ae1d44a85776d442ad6e882e6cf",
        "patch": "@@ -965,11 +965,11 @@ class CNode\n     }\n \n \n-    void AddInventoryKnown(const CInv& inv)\n+    void AddInventoryKnown(const uint256& hash)\n     {\n         if (m_tx_relay != nullptr) {\n             LOCK(m_tx_relay->cs_tx_inventory);\n-            m_tx_relay->filterInventoryKnown.insert(inv.hash);\n+            m_tx_relay->filterInventoryKnown.insert(hash);\n         }\n     }\n "
      },
      {
        "sha": "5596872b92baa00bcd87dbc41081b5bc12fed97b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81533be705bf3ae1d44a85776d442ad6e882e6cf/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81533be705bf3ae1d44a85776d442ad6e882e6cf/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=81533be705bf3ae1d44a85776d442ad6e882e6cf",
        "patch": "@@ -2571,7 +2571,7 @@ void ProcessMessage(\n                     best_block = &inv.hash;\n                 }\n             } else {\n-                pfrom.AddInventoryKnown(inv);\n+                pfrom.AddInventoryKnown(inv.hash);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom.GetId());\n                     pfrom.fDisconnect = true;\n@@ -2810,26 +2810,26 @@ void ProcessMessage(\n         vRecv >> ptx;\n         const CTransaction& tx = *ptx;\n \n-        CInv inv(MSG_TX, tx.GetHash());\n-        pfrom.AddInventoryKnown(inv);\n+        const uint256& txid = ptx->GetHash();\n+        pfrom.AddInventoryKnown(txid);\n \n         LOCK2(cs_main, g_cs_orphans);\n \n         TxValidationState state;\n \n         CNodeState* nodestate = State(pfrom.GetId());\n-        nodestate->m_tx_download.m_tx_announced.erase(inv.hash);\n-        nodestate->m_tx_download.m_tx_in_flight.erase(inv.hash);\n-        EraseTxRequest(inv.hash);\n+        nodestate->m_tx_download.m_tx_announced.erase(txid);\n+        nodestate->m_tx_download.m_tx_in_flight.erase(txid);\n+        EraseTxRequest(txid);\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(inv, mempool) &&\n+        if (!AlreadyHave(CInv(MSG_TX, txid), mempool) &&\n             AcceptToMemoryPool(mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), *connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(inv.hash, i));\n+                auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(txid, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n                     for (const auto& elem : it_by_prev->second) {\n                         pfrom.orphan_work_set.insert(elem->first);\n@@ -2862,7 +2862,7 @@ void ProcessMessage(\n \n                 for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n-                    pfrom.AddInventoryKnown(_inv);\n+                    pfrom.AddInventoryKnown(txin.prevout.hash);\n                     if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), _inv.hash, current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom.GetId());"
      }
    ]
  },
  {
    "sha": "85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWFjMWY1NmY3YTdhNGYzYzFhZGFmMmI4YTY0MTU2YmQ3OTZjZjY2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-29T15:40:54Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Add a wtxid-index to mapRelay",
      "tree": {
        "sha": "ac5ae44a02a6268eec6581c2dfc17e2686183cda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac5ae44a02a6268eec6581c2dfc17e2686183cda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81533be705bf3ae1d44a85776d442ad6e882e6cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81533be705bf3ae1d44a85776d442ad6e882e6cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81533be705bf3ae1d44a85776d442ad6e882e6cf"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "665c13eceffbb67e0274847281d1ee6214d4da86",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
        "patch": "@@ -4221,6 +4221,11 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                             if (ret.second) {\n                                 vRelayExpiration.push_back(std::make_pair(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first));\n                             }\n+                            // Add wtxid-based lookup into mapRelay as well, so that peers can request by wtxid\n+                            auto ret2 = mapRelay.emplace(ret.first->second->GetWitnessHash(), ret.first->second);\n+                            if (ret2.second) {\n+                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret2.first);\n+                            }\n                         }\n                         if (vInv.size() == MAX_INV_SZ) {\n                             connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));"
      }
    ]
  },
  {
    "sha": "911f570485d709f49bfe727ceec28c866bbcfba1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTFmNTcwNDg1ZDcwOWY0OWJmZTcyN2NlZWMyOGM4NjZiYmNmYmEx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-29T15:51:45Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Add wtxid-index to orphan map",
      "tree": {
        "sha": "5c1dc4396be3bf5bcc4fcdd5c39ae4276a55a5f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1dc4396be3bf5bcc4fcdd5c39ae4276a55a5f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/911f570485d709f49bfe727ceec28c866bbcfba1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911f570485d709f49bfe727ceec28c866bbcfba1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/911f570485d709f49bfe727ceec28c866bbcfba1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911f570485d709f49bfe727ceec28c866bbcfba1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85ac1f56f7a7a4f3c1adaf2b8a64156bd796cf66"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a6e67386a621117edb5bb0dfd28d8ec805ee4312",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911f570485d709f49bfe727ceec28c866bbcfba1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911f570485d709f49bfe727ceec28c866bbcfba1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=911f570485d709f49bfe727ceec28c866bbcfba1",
        "patch": "@@ -143,6 +143,7 @@ struct COrphanTx {\n };\n RecursiveMutex g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n \n@@ -924,6 +925,8 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n     auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, g_orphan_list.size()});\n     assert(ret.second);\n     g_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    g_orphans_by_wtxid.emplace(tx->GetWitnessHash(), ret.first);\n     for (const CTxIn& txin : tx->vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n@@ -960,6 +963,7 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n         it_last->second.list_pos = old_pos;\n     }\n     g_orphan_list.pop_back();\n+    g_orphans_by_wtxid.erase(it->second.tx->GetWitnessHash());\n \n     mapOrphanTransactions.erase(it);\n     return 1;\n@@ -4428,6 +4432,7 @@ class CNetProcessingCleanup\n         // orphan transactions\n         mapOrphanTransactions.clear();\n         mapOrphanTransactionsByPrev.clear();\n+        g_orphans_by_wtxid.clear();\n     }\n };\n static CNetProcessingCleanup instance_of_cnetprocessingcleanup;"
      }
    ]
  },
  {
    "sha": "6d55834ab76a81c859bda25ff1ffad7607460c41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDU1ODM0YWI3NmE4MWM4NTliZGEyNWZmMWZmYWQ3NjA3NDYwYzQx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-29T15:57:08Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Add wtxids of confirmed transactions to bloom filter\n\nThis is in preparation for wtxid-based invs (we need to be able to tell whether\nwe AlreadyHave() a transaction based on either txid or wtxid).\n\nThis also double the size of the bloom filter, which is overkill, but still\nuses a manageable amount of memory.",
      "tree": {
        "sha": "3f2c5a2eb8db51f171095517c27d84f87d4e3e1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f2c5a2eb8db51f171095517c27d84f87d4e3e1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d55834ab76a81c859bda25ff1ffad7607460c41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d55834ab76a81c859bda25ff1ffad7607460c41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d55834ab76a81c859bda25ff1ffad7607460c41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d55834ab76a81c859bda25ff1ffad7607460c41/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "911f570485d709f49bfe727ceec28c866bbcfba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911f570485d709f49bfe727ceec28c866bbcfba1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/911f570485d709f49bfe727ceec28c866bbcfba1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "484038e51b138cba49276017786013ab1358dbfb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d55834ab76a81c859bda25ff1ffad7607460c41/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d55834ab76a81c859bda25ff1ffad7607460c41/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6d55834ab76a81c859bda25ff1ffad7607460c41",
        "patch": "@@ -1173,14 +1173,15 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n \n     // Blocks don't typically have more than 4000 transactions, so this should\n-    // be at least six blocks (~1 hr) worth of transactions that we can store.\n+    // be at least six blocks (~1 hr) worth of transactions that we can store,\n+    // inserting both a txid and wtxid for every observed transaction.\n     // If the number of transactions appearing in a block goes up, or if we are\n     // seeing getdata requests more than an hour after initial announcement, we\n     // can increase this number.\n     // The false positive rate of 1/1M should come out to less than 1\n     // transaction per day that would be inadvertently ignored (which is the\n     // same probability that we have in the reject filter).\n-    g_recent_confirmed_transactions.reset(new CRollingBloomFilter(24000, 0.000001));\n+    g_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Stale tip checking and peer eviction are on two different timers, but we\n@@ -1236,6 +1237,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         LOCK(g_cs_recent_confirmed_transactions);\n         for (const auto& ptx : pblock->vtx) {\n             g_recent_confirmed_transactions->insert(ptx->GetHash());\n+            g_recent_confirmed_transactions->insert(ptx->GetWitnessHash());\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "444e94714584b8a5318e443a1a9824b5afea3720",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDRlOTQ3MTQ1ODRiOGE1MzE4ZTQ0M2ExYTk4MjRiNWFmZWEzNzIw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-29T19:09:08Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Add wtxids to recentRejects instead of txids\n\nPreviously, we only added txids to recentRejects if we were sure that the\ntransaction couldn't have had the wrong witness (either because the witness was\nmalleated or stripped).\n\nIn preparation for wtxid-based relay, we can observe that txid == wtxid for\ntransactions that have no witness, and add the wtxid of rejected transactions,\nprovided the transaction wasn't a witness-stripped one. This means that we now\nadd more data to the filter (as prior to this commit, any transaction with a\nwitness that failed to be accepted was being skipped for inclusion in the\nfilter) but witness malleation should still not interfere with relay of a valid\nsegwit transaction, because the txid of a segwit transaction would not be added\nto the filter after failing validation.\n\nIn the future, having wtxids in the recent rejects filter will allow us to\nskip downloading the same wtxid multiple times, once our peers use wtxids for\ntransaction relay.",
      "tree": {
        "sha": "70cc44418464951c03725a5a1555301a28040853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70cc44418464951c03725a5a1555301a28040853"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/444e94714584b8a5318e443a1a9824b5afea3720",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444e94714584b8a5318e443a1a9824b5afea3720",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/444e94714584b8a5318e443a1a9824b5afea3720",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444e94714584b8a5318e443a1a9824b5afea3720/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d55834ab76a81c859bda25ff1ffad7607460c41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d55834ab76a81c859bda25ff1ffad7607460c41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d55834ab76a81c859bda25ff1ffad7607460c41"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b2e2293778123b1cf431b3107183f66caf1fb00d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/444e94714584b8a5318e443a1a9824b5afea3720/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/444e94714584b8a5318e443a1a9824b5afea3720/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=444e94714584b8a5318e443a1a9824b5afea3720",
        "patch": "@@ -1979,12 +1979,12 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n             // Has inputs but not accepted to mempool\n             // Probably non-standard or insufficient fee\n             LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-            if (!orphanTx.HasWitness() && orphan_state.GetResult() != TxValidationResult::TX_WITNESS_MUTATED) {\n+            if (orphanTx.HasWitness() || orphan_state.GetResult() != TxValidationResult::TX_WITNESS_MUTATED) {\n                 // Do not use rejection cache for witness transactions or\n                 // witness-stripped transactions, as they can have been malleated.\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n                 assert(recentRejects);\n-                recentRejects->insert(orphanHash);\n+                recentRejects->insert(orphanTx.GetWitnessHash());\n             }\n             EraseOrphanTx(orphanHash);\n             done = true;\n@@ -2884,14 +2884,15 @@ void ProcessMessage(\n                 // We will continue to reject this tx since it has rejected\n                 // parents so avoid re-requesting it from other peers.\n                 recentRejects->insert(tx.GetHash());\n+                recentRejects->insert(tx.GetWitnessHash());\n             }\n         } else {\n-            if (!tx.HasWitness() && state.GetResult() != TxValidationResult::TX_WITNESS_MUTATED) {\n+            if (tx.HasWitness() || state.GetResult() != TxValidationResult::TX_WITNESS_MUTATED) {\n                 // Do not use rejection cache for witness transactions or\n                 // witness-stripped transactions, as they can have been malleated.\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n                 assert(recentRejects);\n-                recentRejects->insert(tx.GetHash());\n+                recentRejects->insert(tx.GetWitnessHash());\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n                 }"
      }
    ]
  },
  {
    "sha": "af8e570be4a059d254492b304f60bb0039052094",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjhlNTcwYmU0YTA1OWQyNTQ0OTJiMzA0ZjYwYmIwMDM5MDUyMDk0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-30T14:35:00Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Add support for tx-relay via wtxid\n\nThis adds a field to CNodeState that tracks whether to relay transactions with\nthat peer via wtxid, instead of txid. As of this commit the field will always\nbe false, but in a later commit we will add a way to negotiate turning this on\nvia p2p messages exchanged with the peer.",
      "tree": {
        "sha": "34edc295326c8aac6124406358278544877413d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34edc295326c8aac6124406358278544877413d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af8e570be4a059d254492b304f60bb0039052094",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8e570be4a059d254492b304f60bb0039052094",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af8e570be4a059d254492b304f60bb0039052094",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8e570be4a059d254492b304f60bb0039052094/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "444e94714584b8a5318e443a1a9824b5afea3720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444e94714584b8a5318e443a1a9824b5afea3720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/444e94714584b8a5318e443a1a9824b5afea3720"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 87,
      "deletions": 41
    },
    "files": [
      {
        "sha": "bd4f83e5130aa3fb7ea72bbcf150c9909c2db42a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 36,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8e570be4a059d254492b304f60bb0039052094/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8e570be4a059d254492b304f60bb0039052094/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=af8e570be4a059d254492b304f60bb0039052094",
        "patch": "@@ -399,6 +399,9 @@ struct CNodeState {\n     //! Whether this peer is a manual connection\n     bool m_is_manual_connection;\n \n+    //! Whether this peer relays txs via wtxid\n+    bool m_wtxid_relay{false};\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn, bool is_inbound, bool is_manual) :\n         address(addrIn), name(std::move(addrNameIn)), m_is_inbound(is_inbound),\n         m_is_manual_connection (is_manual)\n@@ -824,7 +827,8 @@ void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n     for (const auto& elem : unbroadcast_txids) {\n         // Sanity check: all unbroadcast txns should exist in the mempool\n         if (m_mempool.exists(elem.first)) {\n-            RelayTransaction(elem.first, *connman);\n+            LOCK(cs_main);\n+            RelayTransaction(elem.first, elem.second, *connman);\n         } else {\n             m_mempool.RemoveUnbroadcastTx(elem.first, true);\n         }\n@@ -1390,6 +1394,7 @@ bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LO\n     {\n     case MSG_TX:\n     case MSG_WITNESS_TX:\n+    case MSG_WTX:\n         {\n             assert(recentRejects);\n             if (::ChainActive().Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n@@ -1404,7 +1409,11 @@ bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LO\n \n             {\n                 LOCK(g_cs_orphans);\n-                if (mapOrphanTransactions.count(inv.hash)) return true;\n+                if (inv.type != MSG_WTX && mapOrphanTransactions.count(inv.hash)) {\n+                    return true;\n+                } else if (inv.type == MSG_WTX && g_orphans_by_wtxid.count(inv.hash)) {\n+                    return true;\n+                }\n             }\n \n             {\n@@ -1413,7 +1422,8 @@ bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LO\n             }\n \n             return recentRejects->contains(inv.hash) ||\n-                   mempool.exists(inv.hash);\n+                   (inv.type != MSG_WTX && mempool.exists(inv.hash)) ||\n+                   (inv.type == MSG_WTX && mempool.wtxid_exists(inv.hash));\n         }\n     case MSG_BLOCK:\n     case MSG_WITNESS_BLOCK:\n@@ -1423,11 +1433,17 @@ bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LO\n     return true;\n }\n \n-void RelayTransaction(const uint256& txid, const CConnman& connman)\n+void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n {\n-    connman.ForEachNode([&txid](CNode* pnode)\n+    connman.ForEachNode([&txid, &wtxid](CNode* pnode)\n     {\n-        pnode->PushTxInventory(txid);\n+        AssertLockHeld(cs_main);\n+        CNodeState &state = *State(pnode->GetId());\n+        if (state.m_wtxid_relay) {\n+            pnode->PushTxInventory(wtxid);\n+        } else {\n+            pnode->PushTxInventory(txid);\n+        }\n     });\n }\n \n@@ -1625,24 +1641,24 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n }\n \n //! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n-CTransactionRef static FindTxForGetData(CNode& peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)\n+CTransactionRef static FindTxForGetData(CNode& peer, const uint256& txid_or_wtxid, bool use_wtxid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)\n {\n     // Check if the requested transaction is so recent that we're just\n     // about to announce it to the peer; if so, they certainly shouldn't\n     // know we already have it.\n     {\n         LOCK(peer.m_tx_relay->cs_tx_inventory);\n-        if (peer.m_tx_relay->setInventoryTxToSend.count(txid)) return {};\n+        if (peer.m_tx_relay->setInventoryTxToSend.count(txid_or_wtxid)) return {};\n     }\n \n     {\n         LOCK(cs_main);\n         // Look up transaction in relay pool\n-        auto mi = mapRelay.find(txid);\n+        auto mi = mapRelay.find(txid_or_wtxid);\n         if (mi != mapRelay.end()) return mi->second;\n     }\n \n-    auto txinfo = mempool.info(txid);\n+    auto txinfo = mempool.info(txid_or_wtxid, use_wtxid);\n     if (txinfo.tx) {\n         // To protect privacy, do not answer getdata using the mempool when\n         // that TX couldn't have been INVed in reply to a MEMPOOL request,\n@@ -1672,7 +1688,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n     // Process as many TX items from the front of the getdata queue as\n     // possible, since they're common and it's efficient to batch process\n     // them.\n-    while (it != pfrom.vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n+    while (it != pfrom.vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX || it->type == MSG_WTX)) {\n         if (interruptMsgProc) return;\n         // The send buffer provides backpressure. If there's no space in\n         // the buffer, pause processing until the next call.\n@@ -1685,8 +1701,9 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n             continue;\n         }\n \n-        CTransactionRef tx = FindTxForGetData(pfrom, inv.hash, mempool_req, longlived_mempool_time);\n+        CTransactionRef tx = FindTxForGetData(pfrom, inv.hash, inv.type == MSG_WTX, mempool_req, longlived_mempool_time);\n         if (tx) {\n+            // WTX and WITNESS_TX imply we serialize with witness\n             int nSendFlags = (inv.type == MSG_TX ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\n             connman->PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *tx));\n             mempool.RemoveUnbroadcastTx(inv.hash);\n@@ -1957,7 +1974,7 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n         if (setMisbehaving.count(fromPeer)) continue;\n         if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, *connman);\n+            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), *connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n@@ -2817,23 +2834,39 @@ void ProcessMessage(\n         const CTransaction& tx = *ptx;\n \n         const uint256& txid = ptx->GetHash();\n-        pfrom.AddInventoryKnown(txid);\n+        const uint256& wtxid = ptx->GetWitnessHash();\n \n         LOCK2(cs_main, g_cs_orphans);\n \n+        CNodeState* nodestate = State(pfrom.GetId());\n+\n+        const uint256& hash = nodestate->m_wtxid_relay ? wtxid : txid;\n+        pfrom.AddInventoryKnown(hash);\n+\n         TxValidationState state;\n \n-        CNodeState* nodestate = State(pfrom.GetId());\n-        nodestate->m_tx_download.m_tx_announced.erase(txid);\n-        nodestate->m_tx_download.m_tx_in_flight.erase(txid);\n-        EraseTxRequest(txid);\n+        nodestate->m_tx_download.m_tx_announced.erase(hash);\n+        nodestate->m_tx_download.m_tx_in_flight.erase(hash);\n+        EraseTxRequest(hash);\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(CInv(MSG_TX, txid), mempool) &&\n+        // We do the AlreadyHave() check using wtxid, rather than txid - in the\n+        // absence of witness malleation, this is strictly better, because the\n+        // recent rejects filter may contain the wtxid but will never contain\n+        // the txid of a segwit transaction that has been rejected.\n+        // In the presence of witness malleation, it's possible that by only\n+        // doing the check with wtxid, we could overlook a transaction which\n+        // was confirmed with a different witness, or exists in our mempool\n+        // with a different witness, but this has limited downside:\n+        // mempool validation does its own lookup of whether we have the txid\n+        // already; and an adversary can already relay us old transactions\n+        // (older than our recency filter) if trying to DoS us, without any need\n+        // for witness malleation.\n+        if (!AlreadyHave(CInv(MSG_WTX, wtxid), mempool) &&\n             AcceptToMemoryPool(mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             mempool.check(&::ChainstateActive().CoinsTip());\n-            RelayTransaction(tx.GetHash(), *connman);\n+            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), *connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(txid, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n@@ -2866,10 +2899,17 @@ void ProcessMessage(\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                 const auto current_time = GetTime<std::chrono::microseconds>();\n \n-                for (const CTxIn& txin : tx.vin) {\n-                    CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n-                    pfrom.AddInventoryKnown(txin.prevout.hash);\n-                    if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), _inv.hash, current_time);\n+                if (!State(pfrom.GetId())->m_wtxid_relay) {\n+                    for (const CTxIn& txin : tx.vin) {\n+                        // Here, we only have the txid (and not wtxid) of the\n+                        // inputs, so we only request parents from\n+                        // non-wtxid-relay peers.\n+                        // Eventually we should replace this with an improved\n+                        // protocol for getting all unconfirmed parents.\n+                        CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n+                        pfrom.AddInventoryKnown(txin.prevout.hash);\n+                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), _inv.hash, current_time);\n+                    }\n                 }\n                 AddOrphanTx(ptx, pfrom.GetId());\n \n@@ -2909,7 +2949,7 @@ void ProcessMessage(\n                     LogPrintf(\"Not relaying non-mempool transaction %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n-                    RelayTransaction(tx.GetHash(), *connman);\n+                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), *connman);\n                 }\n             }\n         }\n@@ -3549,7 +3589,7 @@ void ProcessMessage(\n         vRecv >> vInv;\n         if (vInv.size() <= MAX_PEER_TX_IN_FLIGHT + MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             for (CInv &inv : vInv) {\n-                if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) {\n+                if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX || inv.type == MSG_WTX) {\n                     // If we receive a NOTFOUND message for a txid we requested, erase\n                     // it from our data structures for this peer.\n                     auto in_flight_it = state->m_tx_download.m_tx_in_flight.find(inv.hash);\n@@ -3833,17 +3873,19 @@ namespace {\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n+    bool m_wtxid_relay;\n public:\n-    explicit CompareInvMempoolOrder(CTxMemPool *_mempool)\n+    explicit CompareInvMempoolOrder(CTxMemPool *_mempool, bool use_wtxid)\n     {\n         mp = _mempool;\n+        m_wtxid_relay = use_wtxid;\n     }\n \n     bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)\n     {\n         /* As std::make_heap produces a max-heap, we want the entries with the\n          * fewest ancestors/highest fee to sort later. */\n-        return mp->CompareDepthAndScore(*b, *a);\n+        return mp->CompareDepthAndScore(*b, *a, m_wtxid_relay);\n     }\n };\n }\n@@ -4150,8 +4192,8 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     LOCK(pto->m_tx_relay->cs_filter);\n \n                     for (const auto& txinfo : vtxinfo) {\n-                        const uint256& hash = txinfo.tx->GetHash();\n-                        CInv inv(MSG_TX, hash);\n+                        const uint256& hash = state.m_wtxid_relay ? txinfo.tx->GetWitnessHash() : txinfo.tx->GetHash();\n+                        CInv inv(state.m_wtxid_relay ? MSG_WTX : MSG_TX, hash);\n                         pto->m_tx_relay->setInventoryTxToSend.erase(hash);\n                         // Don't send transactions that peers will not put into their mempool\n                         if (txinfo.fee < filterrate.GetFee(txinfo.vsize)) {\n@@ -4185,7 +4227,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                     // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n                     // A heap is used so that not all items need sorting if only a few are being sent.\n-                    CompareInvMempoolOrder compareInvMempoolOrder(&m_mempool);\n+                    CompareInvMempoolOrder compareInvMempoolOrder(&m_mempool, state.m_wtxid_relay);\n                     std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n@@ -4204,7 +4246,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                             continue;\n                         }\n                         // Not in the mempool anymore? don't bother sending it.\n-                        auto txinfo = m_mempool.info(hash);\n+                        auto txinfo = m_mempool.info(hash, state.m_wtxid_relay);\n                         if (!txinfo.tx) {\n                             continue;\n                         }\n@@ -4214,7 +4256,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                         }\n                         if (pto->m_tx_relay->pfilter && !pto->m_tx_relay->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(CInv(MSG_TX, hash));\n+                        vInv.push_back(CInv(state.m_wtxid_relay ? MSG_WTX : MSG_TX, hash));\n                         nRelayedTransactions++;\n                         {\n                             // Expire old relay messages\n@@ -4224,9 +4266,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                                 vRelayExpiration.pop_front();\n                             }\n \n-                            auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n+                            auto ret = mapRelay.emplace(hash, std::move(txinfo.tx));\n                             if (ret.second) {\n-                                vRelayExpiration.push_back(std::make_pair(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first));\n+                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first);\n                             }\n                             // Add wtxid-based lookup into mapRelay as well, so that peers can request by wtxid\n                             auto ret2 = mapRelay.emplace(ret.first->second->GetWitnessHash(), ret.first->second);\n@@ -4363,7 +4405,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             // Erase this entry from tx_process_time (it may be added back for\n             // processing at a later time, see below)\n             tx_process_time.erase(tx_process_time.begin());\n-            CInv inv(MSG_TX | GetFetchFlags(*pto), txid);\n+            CInv inv(state.m_wtxid_relay ? MSG_WTX : (MSG_TX | GetFetchFlags(*pto)), txid);\n             if (!AlreadyHave(inv, m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request."
      },
      {
        "sha": "1fd64e0a9a39907ad38937e155e3202fd4cbd4a5",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8e570be4a059d254492b304f60bb0039052094/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8e570be4a059d254492b304f60bb0039052094/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=af8e570be4a059d254492b304f60bb0039052094",
        "patch": "@@ -97,6 +97,6 @@ struct CNodeStateStats {\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n \n /** Relay transaction to every node */\n-void RelayTransaction(const uint256&, const CConnman& connman);\n+void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "5633abe817fd7bd2e298d7a34255c3b5b8ad8a1b",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8e570be4a059d254492b304f60bb0039052094/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8e570be4a059d254492b304f60bb0039052094/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=af8e570be4a059d254492b304f60bb0039052094",
        "patch": "@@ -82,7 +82,8 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // best-effort of initial broadcast\n         node.mempool->AddUnbroadcastTx(hashTx, tx->GetWitnessHash());\n \n-        RelayTransaction(hashTx, *node.connman);\n+        LOCK(cs_main);\n+        RelayTransaction(hashTx, tx->GetWitnessHash(), *node.connman);\n     }\n \n     return TransactionError::OK;"
      },
      {
        "sha": "30a0d5dd869b1dd0256fb52aeea186f2a30aa83a",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8e570be4a059d254492b304f60bb0039052094/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8e570be4a059d254492b304f60bb0039052094/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=af8e570be4a059d254492b304f60bb0039052094",
        "patch": "@@ -177,6 +177,8 @@ std::string CInv::GetCommand() const\n     switch (masked)\n     {\n     case MSG_TX:             return cmd.append(NetMsgType::TX);\n+    // WTX is not a message type, just an inv type\n+    case MSG_WTX:            return cmd.append(\"wtx\");\n     case MSG_BLOCK:          return cmd.append(NetMsgType::BLOCK);\n     case MSG_FILTERED_BLOCK: return cmd.append(NetMsgType::MERKLEBLOCK);\n     case MSG_CMPCT_BLOCK:    return cmd.append(NetMsgType::CMPCTBLOCK);"
      },
      {
        "sha": "b212c58773fdd03fe4d6db1aa83b60d144128143",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8e570be4a059d254492b304f60bb0039052094/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8e570be4a059d254492b304f60bb0039052094/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=af8e570be4a059d254492b304f60bb0039052094",
        "patch": "@@ -391,10 +391,11 @@ const uint32_t MSG_TYPE_MASK = 0xffffffff >> 2;\n  * These numbers are defined by the protocol. When adding a new value, be sure\n  * to mention it in the respective BIP.\n  */\n-enum GetDataMsg {\n+enum GetDataMsg : uint32_t {\n     UNDEFINED = 0,\n     MSG_TX = 1,\n     MSG_BLOCK = 2,\n+    MSG_WTX = 5,                                      //!< Defined in BIP XXX\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK = 3,                           //!< Defined in BIP37\n     MSG_CMPCT_BLOCK = 4,                              //!< Defined in BIP152"
      },
      {
        "sha": "93633775a768236114f1faae666f708a867819ec",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8e570be4a059d254492b304f60bb0039052094/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8e570be4a059d254492b304f60bb0039052094/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=af8e570be4a059d254492b304f60bb0039052094",
        "patch": "@@ -1296,9 +1296,9 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, 'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False)\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, 'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False)\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))"
      }
    ]
  },
  {
    "sha": "e360aac98862132b22ee7833fbde814bbc396aa9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzYwYWFjOTg4NjIxMzJiMjJlZTc4MzNmYmRlODE0YmJjMzk2YWE5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-30T15:10:50Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Add p2p message \"wtxidrelay\"\n\nWhen sent to and received from a given peer, enables using wtxid's for\nannouncing and fetching transactions with that peer.",
      "tree": {
        "sha": "8fbba281f880e39152825f77641447478e1d0c88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fbba281f880e39152825f77641447478e1d0c88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e360aac98862132b22ee7833fbde814bbc396aa9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e360aac98862132b22ee7833fbde814bbc396aa9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e360aac98862132b22ee7833fbde814bbc396aa9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e360aac98862132b22ee7833fbde814bbc396aa9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af8e570be4a059d254492b304f60bb0039052094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8e570be4a059d254492b304f60bb0039052094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af8e570be4a059d254492b304f60bb0039052094"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 28,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b4641703e5a082b9417fa5b362f0eb09e55cdb06",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e360aac98862132b22ee7833fbde814bbc396aa9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e360aac98862132b22ee7833fbde814bbc396aa9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e360aac98862132b22ee7833fbde814bbc396aa9",
        "patch": "@@ -2318,6 +2318,10 @@ void ProcessMessage(\n         if (pfrom.fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n+        if (nVersion >= WTXID_RELAY_VERSION) {\n+            connman->PushMessage(&pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::WTXIDRELAY));\n+        }\n+\n         connman->PushMessage(&pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom.nServices = nServices;\n@@ -2457,6 +2461,18 @@ void ProcessMessage(\n         return;\n     }\n \n+    // Feature negotiation of wtxidrelay should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up\n+    if (msg_type == NetMsgType::WTXIDRELAY) {\n+        if (pfrom.nVersion >= WTXID_RELAY_VERSION) {\n+            LOCK(cs_main);\n+            if (!State(pfrom.GetId())->m_wtxid_relay) {\n+                State(pfrom.GetId())->m_wtxid_relay = true;\n+            }\n+        }\n+        return;\n+    }\n+\n     if (!pfrom.fSuccessfullyConnected) {\n         // Must have a verack message before anything else\n         LOCK(cs_main);"
      },
      {
        "sha": "ee77ca3b94ba8467b1c864a6ec5c50736efc8545",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e360aac98862132b22ee7833fbde814bbc396aa9/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e360aac98862132b22ee7833fbde814bbc396aa9/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=e360aac98862132b22ee7833fbde814bbc396aa9",
        "patch": "@@ -46,6 +46,7 @@ const char *GETCFHEADERS=\"getcfheaders\";\n const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n+const char *WTXIDRELAY=\"wtxidrelay\";\n } // namespace NetMsgType\n \n /** All known message types. Keep this in the same order as the list of\n@@ -83,6 +84,7 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CFHEADERS,\n     NetMsgType::GETCFCHECKPT,\n     NetMsgType::CFCHECKPT,\n+    NetMsgType::WTXIDRELAY,\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n "
      },
      {
        "sha": "90b864758675af42ad336b1ded8c2d8858dcbef2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e360aac98862132b22ee7833fbde814bbc396aa9/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e360aac98862132b22ee7833fbde814bbc396aa9/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=e360aac98862132b22ee7833fbde814bbc396aa9",
        "patch": "@@ -261,6 +261,12 @@ extern const char* GETCFCHECKPT;\n  * evenly spaced filter headers for blocks on the requested chain.\n  */\n extern const char* CFCHECKPT;\n+/**\n+ * Indicates that a node prefers to relay transactions via wtxid, rather than\n+ * txid.\n+ * @since protocol version 70016 as described by BIP XXX.\n+ */\n+extern const char *WTXIDRELAY;\n }; // namespace NetMsgType\n \n /* Get a vector of all valid message types (see above) */"
      },
      {
        "sha": "e55871fc413aa04e5478dd1108bc1e175b921369",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e360aac98862132b22ee7833fbde814bbc396aa9/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e360aac98862132b22ee7833fbde814bbc396aa9/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=e360aac98862132b22ee7833fbde814bbc396aa9",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70015;\n+static const int PROTOCOL_VERSION = 70016;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -42,4 +42,7 @@ static const int SHORT_IDS_BLOCKS_VERSION = 70014;\n //! not banning for invalid compact blocks starts with this version\n static const int INVALID_CB_NO_BAN_VERSION = 70015;\n \n+//! \"wtxidrelay\" command for wtxid-based relay starts with this version\n+static const int WTXID_RELAY_VERSION = 70016;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "bc565ee3bd8232ec79540061d548488fa0681c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzU2NWVlM2JkODIzMmVjNzk1NDAwNjFkNTQ4NDg4ZmEwNjgxYzY4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-31T16:23:27Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Delay getdata requests from peers using txid-based relay\n\nUsing both txid and wtxid-based relay with peers means that we could sometimes\ndownload the same transaction twice, if announced via two different hashes from\ndifferent peers.\n\nUse a heuristic of delaying txid-peer-getdata requests by 2 seconds, if we have\nat least one wtxid-based peer.",
      "tree": {
        "sha": "1483a010430a0a57f70efea2cb424f169da664d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1483a010430a0a57f70efea2cb424f169da664d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc565ee3bd8232ec79540061d548488fa0681c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc565ee3bd8232ec79540061d548488fa0681c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc565ee3bd8232ec79540061d548488fa0681c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc565ee3bd8232ec79540061d548488fa0681c68/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e360aac98862132b22ee7833fbde814bbc396aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e360aac98862132b22ee7833fbde814bbc396aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e360aac98862132b22ee7833fbde814bbc396aa9"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 25,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f57f79e019ba9aaae60ef284124fe2066cf935f7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc565ee3bd8232ec79540061d548488fa0681c68/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc565ee3bd8232ec79540061d548488fa0681c68/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bc565ee3bd8232ec79540061d548488fa0681c68",
        "patch": "@@ -76,6 +76,8 @@ static const unsigned int MAX_INV_SZ = 50000;\n static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n /** Maximum number of announced transactions from a peer */\n static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;\n+/** How many microseconds to delay requesting transactions via txids, if we have wtxid-relaying peers */\n+static constexpr std::chrono::microseconds TXID_RELAY_DELAY{std::chrono::seconds{2}};\n /** How many microseconds to delay requesting transactions from inbound peers */\n static constexpr std::chrono::microseconds INBOUND_PEER_TX_DELAY{std::chrono::seconds{2}};\n /** How long to wait (in microseconds) before downloading a transaction from an additional peer */\n@@ -211,6 +213,9 @@ namespace {\n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads GUARDED_BY(cs_main) = 0;\n \n+    /** Number of peers with wtxid relay. */\n+    int g_wtxid_relay_peers GUARDED_BY(cs_main) = 0;\n+\n     /** Number of outbound peers with m_chain_sync.m_protect. */\n     int g_outbound_peers_with_protect_from_disconnect GUARDED_BY(cs_main) = 0;\n \n@@ -752,7 +757,7 @@ void UpdateTxRequestTime(const uint256& txid, std::chrono::microseconds request_\n     }\n }\n \n-std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chrono::microseconds current_time, bool use_inbound_delay) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chrono::microseconds current_time, bool use_inbound_delay, bool use_txid_delay) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::chrono::microseconds process_time;\n     const auto last_request_time = GetTxRequestTime(txid);\n@@ -768,6 +773,9 @@ std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chron\n     // We delay processing announcements from inbound peers\n     if (use_inbound_delay) process_time += INBOUND_PEER_TX_DELAY;\n \n+    // We delay processing announcements from peers that use txid-relay (instead of wtxid)\n+    if (use_txid_delay) process_time += TXID_RELAY_DELAY;\n+\n     return process_time;\n }\n \n@@ -785,7 +793,7 @@ void RequestTx(CNodeState* state, const uint256& txid, std::chrono::microseconds\n \n     // Calculate the time to try requesting this transaction. Use\n     // fPreferredDownload as a proxy for outbound peers.\n-    const auto process_time = CalculateTxGetDataTime(txid, current_time, !state->fPreferredDownload);\n+    const auto process_time = CalculateTxGetDataTime(txid, current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n \n     peer_download_state.m_tx_process_time.emplace(process_time, txid);\n }\n@@ -862,6 +870,8 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     assert(nPeersWithValidatedDownloads >= 0);\n     g_outbound_peers_with_protect_from_disconnect -= state->m_chain_sync.m_protect;\n     assert(g_outbound_peers_with_protect_from_disconnect >= 0);\n+    g_wtxid_relay_peers -= state->m_wtxid_relay;\n+    assert(g_wtxid_relay_peers >= 0);\n \n     mapNodeState.erase(nodeid);\n \n@@ -871,6 +881,7 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n         assert(nPreferredDownload == 0);\n         assert(nPeersWithValidatedDownloads == 0);\n         assert(g_outbound_peers_with_protect_from_disconnect == 0);\n+        assert(g_wtxid_relay_peers == 0);\n     }\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n@@ -2468,6 +2479,7 @@ void ProcessMessage(\n             LOCK(cs_main);\n             if (!State(pfrom.GetId())->m_wtxid_relay) {\n                 State(pfrom.GetId())->m_wtxid_relay = true;\n+                g_wtxid_relay_peers++;\n             }\n         }\n         return;\n@@ -4440,7 +4452,15 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // up processing to happen after the download times out\n                     // (with a slight delay for inbound peers, to prefer\n                     // requests to outbound peers).\n-                    const auto next_process_time = CalculateTxGetDataTime(txid, current_time, !state.fPreferredDownload);\n+                    // Don't apply the txid-delay to re-requests of a\n+                    // transaction; the heuristic of delaying requests to\n+                    // txid-relay peers is to save bandwidth on initial\n+                    // announcement of a transaction, and doesn't make sense\n+                    // for a followup request if our first peer times out (and\n+                    // would open us up to an attacker using inbound\n+                    // wtxid-relay to prevent us from requesting transactions\n+                    // from outbound txid-relay peers).\n+                    const auto next_process_time = CalculateTxGetDataTime(txid, current_time, !state.fPreferredDownload, false);\n                     tx_process_time.emplace(next_process_time, txid);\n                 }\n             } else {"
      },
      {
        "sha": "cd64d57d491e3327035b0944174ce032c97efdca",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc565ee3bd8232ec79540061d548488fa0681c68/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc565ee3bd8232ec79540061d548488fa0681c68/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=bc565ee3bd8232ec79540061d548488fa0681c68",
        "patch": "@@ -44,12 +44,13 @@ def on_getdata(self, message):\n GETDATA_TX_INTERVAL = 60  # seconds\n MAX_GETDATA_RANDOM_DELAY = 2  # seconds\n INBOUND_PEER_TX_DELAY = 2  # seconds\n+TXID_RELAY_DELAY = 2 # seconds\n MAX_GETDATA_IN_FLIGHT = 100\n TX_EXPIRY_INTERVAL = GETDATA_TX_INTERVAL * 10\n \n # Python test constants\n NUM_INBOUND = 10\n-MAX_GETDATA_INBOUND_WAIT = GETDATA_TX_INTERVAL + MAX_GETDATA_RANDOM_DELAY + INBOUND_PEER_TX_DELAY\n+MAX_GETDATA_INBOUND_WAIT = GETDATA_TX_INTERVAL + MAX_GETDATA_RANDOM_DELAY + INBOUND_PEER_TX_DELAY + TXID_RELAY_DELAY\n \n \n class TxDownloadTest(BitcoinTestFramework):"
      }
    ]
  },
  {
    "sha": "b5e6e5bbc8cb2651189878f35b4a0db466836f66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWU2ZTViYmM4Y2IyNjUxMTg5ODc4ZjM1YjRhMGRiNDY2ODM2ZjY2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-02-07T09:30:41Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Make TX_WITNESS_STRIPPED its own rejection reason\n\nPreviously, TX_WITNESS_MUTATED could be returned during transaction validation\nfor either transactions that had a witness that was non-standard, or for\ntransactions that had no witness but were invalid due to segwit validation\nrules.\n\nHowever, for txid/wtxid-relay considerations, net_processing distinguishes the\nwitness stripped case separately, because it affects whether a wtxid should be\nable to be added to the reject filter. It is safe to add the wtxid of a\nwitness-mutated transaction to the filter (as that wtxid shouldn't collide with\nthe txid, and hence it wouldn't interfere with transaction relay from\ntxid-relay peers), but it is not safe to add the wtxid (== txid) of a\nwitness-stripped transaction to the filter, because that would interfere with\nrelay of another transaction with the same txid (but different wtxid) when\nrelaying from txid-relay peers.\n\nAlso updates the comment explaining this logic, and explaining that we can get\nrid of this complexity once there's a sufficient deployment of wtxid-relaying\npeers on the network.",
      "tree": {
        "sha": "670a8f3e13087a05bd36876fa8d502f52adbad0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/670a8f3e13087a05bd36876fa8d502f52adbad0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e6e5bbc8cb2651189878f35b4a0db466836f66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e6e5bbc8cb2651189878f35b4a0db466836f66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e6e5bbc8cb2651189878f35b4a0db466836f66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e6e5bbc8cb2651189878f35b4a0db466836f66/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc565ee3bd8232ec79540061d548488fa0681c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc565ee3bd8232ec79540061d548488fa0681c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc565ee3bd8232ec79540061d548488fa0681c68"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 27,
      "deletions": 10
    },
    "files": [
      {
        "sha": "337ee244d336e2c03608e7ccf2c9c570e029dcc6",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e6e5bbc8cb2651189878f35b4a0db466836f66/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e6e5bbc8cb2651189878f35b4a0db466836f66/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=b5e6e5bbc8cb2651189878f35b4a0db466836f66",
        "patch": "@@ -30,11 +30,15 @@ enum class TxValidationResult {\n     TX_MISSING_INPUTS,        //!< transaction was missing some of its inputs\n     TX_PREMATURE_SPEND,       //!< transaction spends a coinbase too early, or violates locktime/sequence locks\n     /**\n-     * Transaction might be missing a witness, have a witness prior to SegWit\n+     * Transaction might have a witness prior to SegWit\n      * activation, or witness may have been malleated (which includes\n      * non-standard witnesses).\n      */\n     TX_WITNESS_MUTATED,\n+    /**\n+     * Transaction is missing a witness.\n+     */\n+    TX_WITNESS_STRIPPED,\n     /**\n      * Tx already in mempool or conflicts with a tx in the chain\n      * (if it conflicts with another tx in mempool, we use MEMPOOL_POLICY as it failed to reach the RBF threshold)"
      },
      {
        "sha": "eef9e7325965472cc1441c16e08f6fd3bbea67fb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 8,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e6e5bbc8cb2651189878f35b4a0db466836f66/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e6e5bbc8cb2651189878f35b4a0db466836f66/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b5e6e5bbc8cb2651189878f35b4a0db466836f66",
        "patch": "@@ -1148,6 +1148,7 @@ static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state,\n     case TxValidationResult::TX_MISSING_INPUTS:\n     case TxValidationResult::TX_PREMATURE_SPEND:\n     case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n     case TxValidationResult::TX_CONFLICT:\n     case TxValidationResult::TX_MEMPOOL_POLICY:\n         break;\n@@ -2007,10 +2008,16 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n             // Has inputs but not accepted to mempool\n             // Probably non-standard or insufficient fee\n             LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-            if (orphanTx.HasWitness() || orphan_state.GetResult() != TxValidationResult::TX_WITNESS_MUTATED) {\n-                // Do not use rejection cache for witness transactions or\n-                // witness-stripped transactions, as they can have been malleated.\n-                // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+            if (orphan_state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n+                // Do not add txids of witness transactions or witness-stripped\n+                // transactions to the filter, as they can have been malleated;\n+                // adding such txids to the reject filter would potentially\n+                // interfere with relay of valid transactions from peers that\n+                // do not support wtxid-based relay. See\n+                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+                // We can remove this restriction (and always add wtxids to\n+                // the filter even for witness stripped transactions) once\n+                // wtxid-based relay is broadly deployed.\n                 assert(recentRejects);\n                 recentRejects->insert(orphanTx.GetWitnessHash());\n             }\n@@ -2955,10 +2962,16 @@ void ProcessMessage(\n                 recentRejects->insert(tx.GetWitnessHash());\n             }\n         } else {\n-            if (tx.HasWitness() || state.GetResult() != TxValidationResult::TX_WITNESS_MUTATED) {\n-                // Do not use rejection cache for witness transactions or\n-                // witness-stripped transactions, as they can have been malleated.\n-                // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n+                // Do not add txids of witness transactions or witness-stripped\n+                // transactions to the filter, as they can have been malleated;\n+                // adding such txids to the reject filter would potentially\n+                // interfere with relay of valid transactions from peers that\n+                // do not support wtxid-based relay. See\n+                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+                // We can remove this restriction (and always add wtxids to\n+                // the filter even for witness stripped transactions) once\n+                // wtxid-based relay is broadly deployed.\n                 assert(recentRejects);\n                 recentRejects->insert(tx.GetWitnessHash());\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {"
      },
      {
        "sha": "ea0e805a24911b0c200db48883e36493cd032d8f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e6e5bbc8cb2651189878f35b4a0db466836f66/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e6e5bbc8cb2651189878f35b4a0db466836f66/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b5e6e5bbc8cb2651189878f35b4a0db466836f66",
        "patch": "@@ -941,7 +941,7 @@ bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, Workspace& ws, Precompute\n         if (!tx.HasWitness() && CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n                 !CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n             // Only the witness is missing, so the transaction itself may be fine.\n-            state.Invalid(TxValidationResult::TX_WITNESS_MUTATED,\n+            state.Invalid(TxValidationResult::TX_WITNESS_STRIPPED,\n                     state.GetRejectReason(), state.GetDebugMessage());\n         }\n         return false; // state filled in by CheckInputScripts"
      }
    ]
  },
  {
    "sha": "da72e51996fbfd4b50e8433710044485a6181f23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTcyZTUxOTk2ZmJmZDRiNTBlODQzMzcxMDA0NDQ4NWE2MTgxZjIz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-02-26T18:36:35Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-06-22T16:32:26Z"
      },
      "message": "Rename AddInventoryKnown() to AddKnownTx()",
      "tree": {
        "sha": "e807e928d551cf1c423e9f32c35353ca6ca2a83e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e807e928d551cf1c423e9f32c35353ca6ca2a83e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da72e51996fbfd4b50e8433710044485a6181f23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da72e51996fbfd4b50e8433710044485a6181f23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da72e51996fbfd4b50e8433710044485a6181f23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da72e51996fbfd4b50e8433710044485a6181f23/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5e6e5bbc8cb2651189878f35b4a0db466836f66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e6e5bbc8cb2651189878f35b4a0db466836f66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e6e5bbc8cb2651189878f35b4a0db466836f66"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9b0caecc3ff07d8802be23103a1924444141ceac",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da72e51996fbfd4b50e8433710044485a6181f23/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da72e51996fbfd4b50e8433710044485a6181f23/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=da72e51996fbfd4b50e8433710044485a6181f23",
        "patch": "@@ -965,7 +965,7 @@ class CNode\n     }\n \n \n-    void AddInventoryKnown(const uint256& hash)\n+    void AddKnownTx(const uint256& hash)\n     {\n         if (m_tx_relay != nullptr) {\n             LOCK(m_tx_relay->cs_tx_inventory);"
      },
      {
        "sha": "0eda395cd381385f10e92cb78e054a19bd22553f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da72e51996fbfd4b50e8433710044485a6181f23/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da72e51996fbfd4b50e8433710044485a6181f23/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=da72e51996fbfd4b50e8433710044485a6181f23",
        "patch": "@@ -2629,7 +2629,7 @@ void ProcessMessage(\n                     best_block = &inv.hash;\n                 }\n             } else {\n-                pfrom.AddInventoryKnown(inv.hash);\n+                pfrom.AddKnownTx(inv.hash);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom.GetId());\n                     pfrom.fDisconnect = true;\n@@ -2876,7 +2876,7 @@ void ProcessMessage(\n         CNodeState* nodestate = State(pfrom.GetId());\n \n         const uint256& hash = nodestate->m_wtxid_relay ? wtxid : txid;\n-        pfrom.AddInventoryKnown(hash);\n+        pfrom.AddKnownTx(hash);\n \n         TxValidationState state;\n \n@@ -2942,7 +2942,7 @@ void ProcessMessage(\n                         // Eventually we should replace this with an improved\n                         // protocol for getting all unconfirmed parents.\n                         CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n-                        pfrom.AddInventoryKnown(txin.prevout.hash);\n+                        pfrom.AddKnownTx(txin.prevout.hash);\n                         if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), _inv.hash, current_time);\n                     }\n                 }"
      }
    ]
  },
  {
    "sha": "3db6c72282fd0c5c837a29683db8468da49a5150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGI2YzcyMjgyZmQwYzVjODM3YTI5NjgzZGI4NDY4ZGE0OWE1MTUw",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-27T01:12:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-26T20:14:46Z"
      },
      "message": "test: Update test framework p2p protocol version to 70016\n\nThis new p2p protocol version allows to use WTXIDs for tx relay.",
      "tree": {
        "sha": "d292f4bf65b24bc294c23afd5ac6c2753b363cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d292f4bf65b24bc294c23afd5ac6c2753b363cb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3db6c72282fd0c5c837a29683db8468da49a5150",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl72Vz8VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNN+oP/iQgRhIlH6TxnHsyCTqz3xMkNtbj\nzzuqcgwqJYOBgZaPxQuYcRZW0aanSsNsFCzm3i5OOHn9n3jp74VIqEmYe22OkEtX\nQVr9jXmn4NA1EXwxMZ+ts+uEbEK0Y5ErsRycoukdzIdowA7OKnA1GPZvSn/nTmvz\nNaxZsv6coV5QdYfJddQodtTlhFXudOhyY8T47ZhETrIRoRFJCiR2MRV7btS1LcFd\nTZQ1kV151k7NyuoRI+FDnAgo+QwQVCzvXnfb+c+kXphcX6aQmdpYFvShmTAIjlqS\n+7g/TniZ6g45WZPYMp0gkfMq14YEn+C8soOiYUFX+Z1WghlBG/fsugETS+CLpvFT\nzCAYfGiCI9lvX21Voq9v9aO6p2nGyZpmByU5ZnpswzR+6eHXgxXJoLtTtqxrDVLY\n0Ax+WngTHBU+wPVvv4CAcf5CkNW8ewqoZPBsKbgGJBK2iVRzc7H/tCMCLskqDtQE\nc2qSpluvnuPtzpGVNUX5M3j37k7l1UT1s7CDVj+Yn05YR5j89UM+tbXjZgfshXOq\nsfzuRD4v3+WP4gyWdowXTpPAUTbBBsrh2FjjSMcaa5n9Rjuigg3wIJkKckYY1XZh\nsGQSZkTieQgWNOo13Tr9PLG+j6nSMuJvGA1nuaXNO0hJVOfGTcDK49eRUMSRw8I3\nxAJ0OFlo3W4ur1Sr\n=KckK\n-----END PGP SIGNATURE-----",
        "payload": "tree d292f4bf65b24bc294c23afd5ac6c2753b363cb4\nparent da72e51996fbfd4b50e8433710044485a6181f23\nauthor Fabian Jahr <fjahr@protonmail.com> 1585271567 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1593202486 +0200\n\ntest: Update test framework p2p protocol version to 70016\n\nThis new p2p protocol version allows to use WTXIDs for tx relay.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3db6c72282fd0c5c837a29683db8468da49a5150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3db6c72282fd0c5c837a29683db8468da49a5150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3db6c72282fd0c5c837a29683db8468da49a5150/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da72e51996fbfd4b50e8433710044485a6181f23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da72e51996fbfd4b50e8433710044485a6181f23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da72e51996fbfd4b50e8433710044485a6181f23"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c7fd273026d66dce8537b0c1768b8508cf191da9",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db6c72282fd0c5c837a29683db8468da49a5150/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db6c72282fd0c5c837a29683db8468da49a5150/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=3db6c72282fd0c5c837a29683db8468da49a5150",
        "patch": "@@ -31,7 +31,7 @@\n from test_framework.util import hex_str_to_bytes, assert_equal\n \n MIN_VERSION_SUPPORTED = 60001\n-MY_VERSION = 70014  # past bip-31 for ping/pong\n+MY_VERSION = 70016  # past wtxid relay\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n \n@@ -55,6 +55,7 @@\n MSG_BLOCK = 2\n MSG_FILTERED_BLOCK = 3\n MSG_CMPCT_BLOCK = 4\n+MSG_WTX = 5\n MSG_WITNESS_FLAG = 1 << 30\n MSG_TYPE_MASK = 0xffffffff >> 2\n \n@@ -236,7 +237,8 @@ class CInv:\n         MSG_TX | MSG_WITNESS_FLAG: \"WitnessTx\",\n         MSG_BLOCK | MSG_WITNESS_FLAG: \"WitnessBlock\",\n         MSG_FILTERED_BLOCK: \"filtered Block\",\n-        4: \"CompactBlock\"\n+        4: \"CompactBlock\",\n+        5: \"WTX\",\n     }\n \n     def __init__(self, t=0, h=0):\n@@ -257,6 +259,9 @@ def __repr__(self):\n         return \"CInv(type=%s hash=%064x)\" \\\n             % (self.typemap[self.type], self.hash)\n \n+    def __eq__(self, other):\n+        return isinstance(other, CInv) and self.hash == other.hash and self.type == other.type\n+\n \n class CBlockLocator:\n     __slots__ = (\"nVersion\", \"vHave\")\n@@ -1118,6 +1123,22 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_tx(tx=%s)\" % (repr(self.tx))\n \n+class msg_wtxidrelay:\n+    __slots__ = ()\n+    msgtype = b\"wtxidrelay\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_wtxidrelay()\"\n+\n \n class msg_no_witness_tx(msg_tx):\n     __slots__ = ()"
      },
      {
        "sha": "a0f5909698d0901bd761f57b3c1cb855585f3dc8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db6c72282fd0c5c837a29683db8468da49a5150/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db6c72282fd0c5c837a29683db8468da49a5150/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=3db6c72282fd0c5c837a29683db8468da49a5150",
        "patch": "@@ -58,6 +58,8 @@\n     MSG_TYPE_MASK,\n     msg_verack,\n     msg_version,\n+    MSG_WTX,\n+    msg_wtxidrelay,\n     NODE_NETWORK,\n     NODE_WITNESS,\n     sha256,\n@@ -95,6 +97,7 @@\n     b\"tx\": msg_tx,\n     b\"verack\": msg_verack,\n     b\"version\": msg_version,\n+    b\"wtxidrelay\": msg_wtxidrelay,\n }\n \n MAGIC_BYTES = {\n@@ -355,6 +358,7 @@ def on_pong(self, message): pass\n     def on_sendcmpct(self, message): pass\n     def on_sendheaders(self, message): pass\n     def on_tx(self, message): pass\n+    def on_wtxidrelay(self, message): pass\n \n     def on_inv(self, message):\n         want = msg_getdata()\n@@ -654,7 +658,7 @@ def on_inv(self, message):\n         super().on_inv(message) # Send getdata in response.\n         # Store how many times invs have been received for each tx.\n         for i in message.inv:\n-            if i.type == MSG_TX:\n+            if (i.type == MSG_TX) or (i.type == MSG_WTX):\n                 # save txid\n                 self.tx_invs_received[i.hash] += 1\n "
      }
    ]
  },
  {
    "sha": "b10e09036a1ab48831957826477db7287dde273a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTBlMDkwMzZhMWFiNDg4MzE5NTc4MjY0NzdkYjcyODdkZGUyNzNh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-27T01:13:32Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-26T22:28:10Z"
      },
      "message": "test: Add tests for wtxid tx relay in segwit test\n\nAlso cleans up some doublicate lines in the rest of the test.\n\nco-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "c9a0458c2933177c279dab1d467313d9a634461b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9a0458c2933177c279dab1d467313d9a634461b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b10e09036a1ab48831957826477db7287dde273a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl72dnwVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNV7gP/RcytzGq18IKF1VZ8nkeMKt1lu61\nYfYIvnfMx9v5cxUeEGyKuPPb594LyarrJqpefub+MaDIjT9DLKaoJLWt1IewZk2A\nRS8b+wFhnP18tc8r1WKmYKSEJ0bxva4SCEkYacm0kQKMoWbHT1G8wt6bbt+tyYKu\n0KMDd7bAjqXFfsqfbm1PyJLJO5PWCZxFgtKA92LBKz5rMFJHoJuVo8c47hgEvJ29\nIkbIhidZXU4XwilUyz5iwzfPOvLkdGf3kjgT177IbVsFf7X5MqQk8uX1XpybTmR9\nNVQ5DdhEo8qjeCsEGBsRo3onaX9cxPY0x6ZumgT0PWeqUcKRw0Dg9B3LNzZ1d5+w\nbVauKv7VoWOPsIgg2MWKD8ZlsQwgfnm3eP6bRoU0MPbPZ2FD0RCbLYy/SsGupwqg\n/5W5LW4IGesR99xH/kc7bNkq/gGKdowRvP0v+pHhINoZRF0RCNt5wuffR2d2z2MV\nxMFAkox3YQToC/svuaHNjX4/A/GKlgXcvhMmuRG4Au9ySLs2jEX2edyTa9pw8XGk\nhjJkB8WbJH+8q0AiDkO08hre8pHdeKev5CslCyagUfZMccNaw8DZYyBNQ7+HRmR+\nk6IHlrTBj2VieuaMuabVm62QQburO34jvo3jheqWAXDJHwJpHVnmcHGpyZR74X/j\nlxpLCY8xeuwAjkPx\n=tPcP\n-----END PGP SIGNATURE-----",
        "payload": "tree c9a0458c2933177c279dab1d467313d9a634461b\nparent 3db6c72282fd0c5c837a29683db8468da49a5150\nauthor Fabian Jahr <fjahr@protonmail.com> 1585271612 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1593210490 +0200\n\ntest: Add tests for wtxid tx relay in segwit test\n\nAlso cleans up some doublicate lines in the rest of the test.\n\nco-authored-by: Anthony Towns <aj@erisian.com.au>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b10e09036a1ab48831957826477db7287dde273a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b10e09036a1ab48831957826477db7287dde273a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b10e09036a1ab48831957826477db7287dde273a/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3db6c72282fd0c5c837a29683db8468da49a5150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3db6c72282fd0c5c837a29683db8468da49a5150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3db6c72282fd0c5c837a29683db8468da49a5150"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 94,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4f653072ba6559552025d68c5ec0434401c91c43",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 94,
        "deletions": 7,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b10e09036a1ab48831957826477db7287dde273a/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b10e09036a1ab48831957826477db7287dde273a/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=b10e09036a1ab48831957826477db7287dde273a",
        "patch": "@@ -25,6 +25,7 @@\n     MSG_BLOCK,\n     MSG_TX,\n     MSG_WITNESS_FLAG,\n+    MSG_WTX,\n     NODE_NETWORK,\n     NODE_WITNESS,\n     msg_no_witness_block,\n@@ -34,6 +35,7 @@\n     msg_tx,\n     msg_block,\n     msg_no_witness_tx,\n+    msg_verack,\n     ser_uint256,\n     ser_vector,\n     sha256,\n@@ -81,6 +83,7 @@\n     softfork_active,\n     hex_str_to_bytes,\n     assert_raises_rpc_error,\n+    wait_until,\n )\n \n # The versionbit bit used to signal activation of SegWit\n@@ -143,25 +146,45 @@ def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=Non\n \n \n class TestP2PConn(P2PInterface):\n-    def __init__(self):\n+    def __init__(self, wtxidrelay=False):\n         super().__init__()\n         self.getdataset = set()\n+        self.last_wtxidrelay = []\n+        self.lastgetdata = []\n+        self.wtxidrelay = wtxidrelay\n \n     # Avoid sending out msg_getdata in the mininode thread as a reply to invs.\n     # They are not needed and would only lead to races because we send msg_getdata out in the test thread\n     def on_inv(self, message):\n         pass\n \n+    def on_version(self, message):\n+        if self.wtxidrelay:\n+            self.send_message(msg_wtxidrelay())\n+        super().on_version(message)\n+\n     def on_getdata(self, message):\n+        self.lastgetdata = message.inv\n         for inv in message.inv:\n             self.getdataset.add(inv.hash)\n \n-    def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True):\n+    def on_wtxidrelay(self, message):\n+        self.last_wtxidrelay.append(message)\n+\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True, use_wtxid=False):\n         with mininode_lock:\n             self.last_message.pop(\"getdata\", None)\n-        self.send_message(msg_inv(inv=[CInv(MSG_TX, tx.sha256)]))\n+        if use_wtxid:\n+            wtxid = tx.calc_sha256(True)\n+            self.send_message(msg_inv(inv=[CInv(MSG_WTX, wtxid)]))\n+        else:\n+            self.send_message(msg_inv(inv=[CInv(MSG_TX, tx.sha256)]))\n+\n         if success:\n-            self.wait_for_getdata([tx.sha256], timeout)\n+            if use_wtxid:\n+                self.wait_for_getdata([wtxid], timeout)\n+            else:\n+                self.wait_for_getdata([tx.sha256], timeout)\n         else:\n             time.sleep(timeout)\n             assert not self.last_message.get(\"getdata\")\n@@ -277,6 +300,7 @@ def run_test(self):\n         self.test_upgrade_after_activation()\n         self.test_witness_sigops()\n         self.test_superfluous_witness()\n+        self.test_wtxid_relay()\n \n     # Individual tests\n \n@@ -1270,7 +1294,6 @@ def test_tx_relay_after_segwit_activation(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n-        self.test_node.announce_tx_and_wait_for_getdata(tx)\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n@@ -1297,8 +1320,6 @@ def test_tx_relay_after_segwit_activation(self):\n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n         test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False)\n-        self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False)\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n@@ -2017,6 +2038,11 @@ def test_witness_sigops(self):\n \n         # TODO: test p2sh sigop counting\n \n+        # Cleanup and prep for next test\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n+\n+    @subtest  # type: ignore\n     def test_superfluous_witness(self):\n         # Serialization of tx that puts witness flag to 3 always\n         def serialize_with_bogus_witness(tx):\n@@ -2060,6 +2086,67 @@ def serialize(self):\n         with self.nodes[0].assert_debug_log(['Unknown transaction optional data']):\n             self.nodes[0].p2p.send_and_ping(msg_bogus_tx(tx))\n \n+    @subtest  # type: ignore\n+    def test_wtxid_relay(self):\n+        # Use brand new nodes to avoid contamination from earlier tests\n+        self.wtx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=True), services=NODE_NETWORK | NODE_WITNESS)\n+        self.tx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=False), services=NODE_NETWORK | NODE_WITNESS)\n+\n+        # Check wtxidrelay feature negotiation message through connecting a new peer\n+        def received_wtxidrelay():\n+            return (len(self.wtx_node.last_wtxidrelay) > 0)\n+        wait_until(received_wtxidrelay, timeout=60, lock=mininode_lock)\n+\n+        # Create a Segwit output from the latest UTXO\n+        # and announce it to the network\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        script_pubkey = CScript([OP_0, witness_hash])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n+        tx.rehash()\n+\n+        # Create a Segwit transaction\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_pubkey))\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx2.rehash()\n+\n+        # Announce Segwit transaction with wtxid\n+        # and wait for getdata\n+        self.wtx_node.announce_tx_and_wait_for_getdata(tx2, use_wtxid=True)\n+        with mininode_lock:\n+            lgd = self.wtx_node.lastgetdata[:]\n+        assert_equal(lgd, [CInv(MSG_WTX, tx2.calc_sha256(True))])\n+\n+        # Announce Segwit transaction from non wtxidrelay peer\n+        # and wait for getdata\n+        self.tx_node.announce_tx_and_wait_for_getdata(tx2, use_wtxid=False)\n+        with mininode_lock:\n+            lgd = self.tx_node.lastgetdata[:]\n+        assert_equal(lgd, [CInv(MSG_TX|MSG_WITNESS_FLAG, tx2.sha256)])\n+\n+        # Send tx2 through; it's an orphan so won't be accepted\n+        with mininode_lock:\n+            self.tx_node.last_message.pop(\"getdata\", None)\n+        test_transaction_acceptance(self.nodes[0], self.tx_node, tx2, with_witness=True, accepted=False)\n+\n+        # Expect a request for parent (tx) due to use of non-WTX peer\n+        self.tx_node.wait_for_getdata([tx.sha256], 60)\n+        with mininode_lock:\n+            lgd = self.tx_node.lastgetdata[:]\n+        assert_equal(lgd, [CInv(MSG_TX|MSG_WITNESS_FLAG, tx.sha256)])\n+\n+        # Send tx through\n+        test_transaction_acceptance(self.nodes[0], self.tx_node, tx, with_witness=False, accepted=True)\n+\n+        # Check tx2 is there now\n+        assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)\n+\n \n if __name__ == '__main__':\n     SegWitTest().main()"
      }
    ]
  },
  {
    "sha": "5d6f913f6310a14ded2add2a7d0ad94c621b5503",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDZmOTEzZjYzMTBhMTRkZWQyYWRkMmE3ZDBhZDk0YzYyMWI1NTAz",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-04-21T15:02:46Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-26T22:28:14Z"
      },
      "message": "test: Use wtxid relay generally in functional tests",
      "tree": {
        "sha": "06406603fec95a72df790913f014888c0515005b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06406603fec95a72df790913f014888c0515005b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d6f913f6310a14ded2add2a7d0ad94c621b5503",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl72dn4VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNXEUP/j8q9dUg4MRSYQpCkQrWRYJ6I7cX\nTqAsM3GOSWxYDdlQWruT1igOt+xZzki0ZgsLOSYIJQDh0EAgt5dZxi0D+kbQPUQx\nEIwTHTAObH9esqO19TGM55Ij4mdKwZqLvzGxWnmn95G+wRL10/OrrgRBTd2uZ3vW\nWtTieNHkqjLwplrAWL4QeW4LGhZe+0Bcd3zvAarY7bUV7CS7ehVm0F6s2v1phIGm\nBmb+InAnNiuRZpAk6M6RbqtPJu/LWZMqkTYX8CKbhivR6xnhddOjXscKk1iwz5uT\nBd9m/DPpwQtEg66rjyMyMiKM4f4XWpubgcvOCkDWkEXsN1T1NP5/k4AlXBwZUqEE\naOrrH8WPiuuAHT7+ShruWeMEYc1UnNQyfxer8dcspaulegCb0Jgf2Y4ARwOA4JJ4\n8XFyPJ6musNqbkrSqbsmqp7ScTfsUOq2rbQDLV0wBJJV8EsciqCXbcQBJO11urj3\nRD4JxDq2Pjwa2triBh79JI7B4fd1ykWzzJJNcKR1z5cG7U7e71TodCwmWWZbCKwU\nsq3aL5yKTbUICJmoSTwokSoBogdSt5Ito/WDTVvpu52Ov8RkAwdHq5ARGMkdxMzd\nYrBf/ntM7I9U9Yr3c2CkIW1NuncItgwY6+vkQr+VMjUMDsMzxsfn6OpMLa0bPMns\nGmzGSjJTY8lxD0eH\n=31Yo\n-----END PGP SIGNATURE-----",
        "payload": "tree 06406603fec95a72df790913f014888c0515005b\nparent b10e09036a1ab48831957826477db7287dde273a\nauthor Fabian Jahr <fjahr@protonmail.com> 1587481366 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1593210494 +0200\n\ntest: Use wtxid relay generally in functional tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d6f913f6310a14ded2add2a7d0ad94c621b5503",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d6f913f6310a14ded2add2a7d0ad94c621b5503",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d6f913f6310a14ded2add2a7d0ad94c621b5503/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b10e09036a1ab48831957826477db7287dde273a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b10e09036a1ab48831957826477db7287dde273a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b10e09036a1ab48831957826477db7287dde273a"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 20,
      "deletions": 10
    },
    "files": [
      {
        "sha": "542d24f4bef367e2247473a84b064aa3bb764f69",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=5d6f913f6310a14ded2add2a7d0ad94c621b5503",
        "patch": "@@ -69,14 +69,19 @@ def run_test(self):\n         fee = Decimal(\"0.0001\")\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n+        witness_chain = []\n         for i in range(MAX_ANCESTORS):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, 0, value, fee, 1)\n             value = sent_value\n             chain.append(txid)\n+            # We need the wtxids to check P2P announcements\n+            fulltx = self.nodes[0].getrawtransaction(txid)\n+            witnesstx = self.nodes[0].decoderawtransaction(fulltx, True)\n+            witness_chain.append(witnesstx['hash'])\n \n         # Wait until mempool transactions have passed initial broadcast (sent inv and received getdata)\n         # Otherwise, getrawmempool may be inconsistent with getmempoolentry if unbroadcast changes in between\n-        self.nodes[0].p2p.wait_for_broadcast(chain)\n+        self.nodes[0].p2p.wait_for_broadcast(witness_chain)\n \n         # Check mempool has MAX_ANCESTORS transactions in it, and descendant and ancestor\n         # count and fees should look correct"
      },
      {
        "sha": "bf631c8883ddd7da649f386df39d25d71ab396ed",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=5d6f913f6310a14ded2add2a7d0ad94c621b5503",
        "patch": "@@ -52,7 +52,7 @@ def run_test(self):\n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n         txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n-        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=1'.format(txid)]):\n+        with self.nodes[0].assert_debug_log(['received getdata for: wtx {} peer=1'.format(txid)]):\n             self.nodes[0].sendrawtransaction(sigtx)\n             self.nodes[0].p2p.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)"
      },
      {
        "sha": "f77937d726b501074f059e3f6a3b04d845b55ae5",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=5d6f913f6310a14ded2add2a7d0ad94c621b5503",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n import time\n \n-from test_framework.messages import MSG_TX, msg_feefilter\n+from test_framework.messages import MSG_TX, MSG_WTX, msg_feefilter\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n@@ -31,7 +31,7 @@ def __init__(self):\n \n     def on_inv(self, message):\n         for i in message.inv:\n-            if (i.type == MSG_TX):\n+            if (i.type == MSG_TX) or (i.type == MSG_WTX):\n                 self.txinvs.append(hashToHex(i.hash))\n \n     def clear_invs(self):"
      },
      {
        "sha": "014e3e59b060d889daff4e92caa93a5b945e0c41",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=5d6f913f6310a14ded2add2a7d0ad94c621b5503",
        "patch": "@@ -160,8 +160,10 @@ def on_inv(self, message):\n \n     def on_version(self, message):\n         if self.wtxidrelay:\n-            self.send_message(msg_wtxidrelay())\n-        super().on_version(message)\n+            super().on_version(message)\n+        else:\n+            self.send_message(msg_verack())\n+            self.nServices = message.nServices\n \n     def on_getdata(self, message):\n         self.lastgetdata = message.inv"
      },
      {
        "sha": "2527edc1353b15456ff88130628ff0a03e8f216a",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=5d6f913f6310a14ded2add2a7d0ad94c621b5503",
        "patch": "@@ -12,6 +12,7 @@\n     FromHex,\n     MSG_TX,\n     MSG_TYPE_MASK,\n+    MSG_WTX,\n     msg_inv,\n     msg_notfound,\n )\n@@ -36,7 +37,7 @@ def __init__(self):\n \n     def on_getdata(self, message):\n         for i in message.inv:\n-            if i.type & MSG_TYPE_MASK == MSG_TX:\n+            if i.type & MSG_TYPE_MASK == MSG_TX or i.type & MSG_TYPE_MASK == MSG_WTX:\n                 self.tx_getdata_count += 1\n \n \n@@ -64,7 +65,7 @@ def test_tx_requests(self):\n         txid = 0xdeadbeef\n \n         self.log.info(\"Announce the txid from each incoming peer to node 0\")\n-        msg = msg_inv([CInv(t=MSG_TX, h=txid)])\n+        msg = msg_inv([CInv(t=MSG_WTX, h=txid)])\n         for p in self.nodes[0].p2ps:\n             p.send_and_ping(msg)\n \n@@ -136,13 +137,13 @@ def test_in_flight_max(self):\n         with mininode_lock:\n             p.tx_getdata_count = 0\n \n-        p.send_message(msg_inv([CInv(t=MSG_TX, h=i) for i in txids]))\n+        p.send_message(msg_inv([CInv(t=MSG_WTX, h=i) for i in txids]))\n         wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT, lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(p.tx_getdata_count, MAX_GETDATA_IN_FLIGHT)\n \n         self.log.info(\"Now check that if we send a NOTFOUND for a transaction, we'll get one more request\")\n-        p.send_message(msg_notfound(vec=[CInv(t=MSG_TX, h=txids[0])]))\n+        p.send_message(msg_notfound(vec=[CInv(t=MSG_WTX, h=txids[0])]))\n         wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT + 1, timeout=10, lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(p.tx_getdata_count, MAX_GETDATA_IN_FLIGHT + 1)"
      },
      {
        "sha": "7930c41f687e912f925ac3e267c4e0f0b027018b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d6f913f6310a14ded2add2a7d0ad94c621b5503/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5d6f913f6310a14ded2add2a7d0ad94c621b5503",
        "patch": "@@ -376,6 +376,8 @@ def on_verack(self, message):\n \n     def on_version(self, message):\n         assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n+        if message.nVersion >= 70016:\n+            self.send_message(msg_wtxidrelay())\n         self.send_message(msg_verack())\n         self.nServices = message.nServices\n "
      }
    ]
  }
]