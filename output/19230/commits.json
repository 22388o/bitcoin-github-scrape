[
  {
    "sha": "c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzVkZTVkYTVmZGQzYTMwNGY5ZGEzZDhhMmUwMzcwZDE3MjNkZGQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-02T20:59:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-10T00:50:50Z"
      },
      "message": "[TESTS] Move base58 to own module to break circular dependency\n\nThis breaks the script->key->address->script dependency cycle.",
      "tree": {
        "sha": "5da616ca84e1c1f94457e95fb71615684afc6300",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5da616ca84e1c1f94457e95fb71615684afc6300"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8364df25070cea08f0fb5bbbb212f1ff72f9d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8364df25070cea08f0fb5bbbb212f1ff72f9d21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8364df25070cea08f0fb5bbbb212f1ff72f9d21"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 74,
      "deletions": 71
    },
    "files": [
      {
        "sha": "822a7f97632f5c71ff8a3f7ebd91a83465f9cd7e",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 2,
        "deletions": 69,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
        "patch": "@@ -5,15 +5,13 @@\n \"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\"\n \n import enum\n-import unittest\n \n-from .script import hash256, hash160, sha256, CScript, OP_0\n+from .base58 import byte_to_base58\n+from .script import hash160, sha256, CScript, OP_0\n from .util import hex_str_to_bytes\n \n from . import segwit_addr\n \n-from test_framework.util import assert_equal\n-\n ADDRESS_BCRT1_UNSPENDABLE = 'bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj'\n ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR = 'addr(bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj)#juyq9d97'\n # Coins sent to this address can be spent with a witness stack of just OP_TRUE\n@@ -25,52 +23,6 @@ class AddressType(enum.Enum):\n     p2sh_segwit = 'p2sh-segwit'\n     legacy = 'legacy'  # P2PKH\n \n-\n-chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n-\n-\n-def byte_to_base58(b, version):\n-    result = ''\n-    str = b.hex()\n-    str = chr(version).encode('latin-1').hex() + str\n-    checksum = hash256(hex_str_to_bytes(str)).hex()\n-    str += checksum[:8]\n-    value = int('0x'+str,0)\n-    while value > 0:\n-        result = chars[value % 58] + result\n-        value //= 58\n-    while (str[:2] == '00'):\n-        result = chars[0] + result\n-        str = str[2:]\n-    return result\n-\n-\n-def base58_to_byte(s, verify_checksum=True):\n-    if not s:\n-        return b''\n-    n = 0\n-    for c in s:\n-        n *= 58\n-        assert c in chars\n-        digit = chars.index(c)\n-        n += digit\n-    h = '%x' % n\n-    if len(h) % 2:\n-        h = '0' + h\n-    res = n.to_bytes((n.bit_length() + 7) // 8, 'big')\n-    pad = 0\n-    for c in s:\n-        if c == chars[0]:\n-            pad += 1\n-        else:\n-            break\n-    res = b'\\x00' * pad + res\n-    if verify_checksum:\n-        assert_equal(hash256(res[:-4])[:4], res[-4:])\n-\n-    return res[1:-4], int(res[0])\n-\n-\n def keyhash_to_p2pkh(hash, main = False):\n     assert len(hash) == 20\n     version = 0 if main else 111\n@@ -128,22 +80,3 @@ def check_script(script):\n     if (type(script) is bytes or type(script) is CScript):\n         return script\n     assert False\n-\n-\n-class TestFrameworkScript(unittest.TestCase):\n-    def test_base58encodedecode(self):\n-        def check_base58(data, version):\n-            self.assertEqual(base58_to_byte(byte_to_base58(data, version)), (data, version))\n-\n-        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 111)\n-        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 111)\n-        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 0)\n-        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 0)\n-        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n-        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n-        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n-        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)"
      },
      {
        "sha": "3dab3569d0c1c246d25b4dfcacdc4ef7b34926e2",
        "filename": "test/functional/test_framework/base58.py",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_framework/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_framework/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/base58.py?ref=c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
        "patch": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Encode BASE58.\"\"\"\n+\n+import unittest\n+\n+from .messages import hash256\n+from .util import hex_str_to_bytes, assert_equal\n+\n+chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n+\n+def byte_to_base58(b, version):\n+    result = ''\n+    str = b.hex()\n+    str = chr(version).encode('latin-1').hex() + str\n+    checksum = hash256(hex_str_to_bytes(str)).hex()\n+    str += checksum[:8]\n+    value = int('0x'+str,0)\n+    while value > 0:\n+        result = chars[value % 58] + result\n+        value //= 58\n+    while (str[:2] == '00'):\n+        result = chars[0] + result\n+        str = str[2:]\n+    return result\n+\n+def base58_to_byte(s, verify_checksum=True):\n+    if not s:\n+        return b''\n+    n = 0\n+    for c in s:\n+        n *= 58\n+        assert c in chars\n+        digit = chars.index(c)\n+        n += digit\n+    h = '%x' % n\n+    if len(h) % 2:\n+        h = '0' + h\n+    res = n.to_bytes((n.bit_length() + 7) // 8, 'big')\n+    pad = 0\n+    for c in s:\n+        if c == chars[0]:\n+            pad += 1\n+        else:\n+            break\n+    res = b'\\x00' * pad + res\n+    if verify_checksum:\n+        assert_equal(hash256(res[:-4])[:4], res[-4:])\n+\n+    return res[1:-4], int(res[0])\n+\n+class TestFrameworkScript(unittest.TestCase):\n+    def test_base58encodedecode(self):\n+        def check_base58(data, version):\n+            self.assertEqual(base58_to_byte(byte_to_base58(data, version)), (data, version))\n+\n+        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 111)\n+        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 111)\n+        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 0)\n+        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 0)\n+        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n+        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n+        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n+        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)"
      },
      {
        "sha": "5a6d0b912b2d26d1b40f4e02872d6e276dbce01d",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
        "patch": "@@ -8,7 +8,7 @@\n anything but tests.\"\"\"\n import random\n \n-from .address import byte_to_base58\n+from .base58 import byte_to_base58\n \n def modinv(a, n):\n     \"\"\"Compute the modular inverse of a modulo n"
      },
      {
        "sha": "0acd1e552a5f1947b1d43d176d9f6d0cc9ff7a31",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0",
        "patch": "@@ -67,7 +67,7 @@\n TEST_EXIT_SKIPPED = 77\n \n TEST_FRAMEWORK_MODULES = [\n-    \"address\",\n+    \"base58\",\n     \"blocktools\",\n     \"script\",\n ]"
      }
    ]
  }
]