DrahtBot,2020-02-17 03:53:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18204 (descriptors: improve descriptor cache and cache xpubs by achow101)\n* #16549 ([WIP] UI external signer support (e.",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-586806563,586806563,
instagibbs,2020-02-19 13:56:16,"Is there a practical consideration for this change? It seems to make sense, just wondering if downstream applications are made easier by this or something.",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-588243652,588243652,
achow101,2020-02-19 17:22:32,"> Is there a practical consideration for this change?\n\nIt would allow for descriptor wallets that import a descriptor with a private key and hardened steps to be able to derive scriptPubKeys without needing to be unlocked.",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-588339344,588339344,
instagibbs,2020-02-19 17:26:05,"Adding that to OP would be OP\n\nconcept ACK!",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-588341241,588341241,
achow101,2020-02-21 16:25:59,"> That said, I feel a bit ambivalent about adding origin info to descriptors that don't already have it. For example `pkh(xprv9...C2U/0'/0'/0)` becomes `pkh([bd16bee5/0'/0']xpub6AVD...pQKh/0)`. Perhaps normalisation should only happen for descriptors with origin info.\n\nThen we wouldn't achieve the primary goal of this PR. People could import xprvs without origin info that have some hardened de",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589727243,589727243,
Sjors,2020-02-21 18:42:20,"ACK b674297c7c491ea09cef171ed083533f23c9ffa9\n\nI've never imported keys without origin info, but if you find it useful, I'm fine with supporting it.",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589781864,589781864,
achow101,2020-02-21 19:50:21,Had to rebase,https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589808558,589808558,
Sjors,2020-02-21 21:43:35,Code review re-ACK f8274751f6eb7dbd2207ff4232131dfc0f9ff978 (rebased on #18034),https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589849715,589849715,
sipa,2020-02-22 17:53:25,"I discussed this with @achow101 IRL.\n\nOne alternative I'd like to see explored is instead of rewriting the descriptor itself, having an ""xpub cache"" added to the descriptor interface (and later the wallet itself), similar to the existing pubkey cache, but shared across indexes. This would have all the availability benefits of a change like this, but also speed up operations on descriptors that i",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589981472,589981472,
Sjors,2020-02-22 18:57:18,"That would take case of this TODO, right?\n\nhttps://github.com/bitcoin/bitcoin/blob/ab9de435880c9d77e4137b65050591ef2d14f809/src/script/descriptor.cpp#L286-L291\n\nRewriting the descriptor has merit in any case; a descriptor like `wpkh([d34db33f/xpub /0'/0'].../*)` makes no sense, because you can't actually derive any addresses without also knowing the `xpriv`. Whereas with `wpkh([d34db33f/0'",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589987371,589987371,
instagibbs,2020-04-08 15:44:15,"something ""like"" this is probably nice to have for multisig setups. I'm looking into it for a `dumpdescriptors` RPC command for that type of setup",https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-611034886,611034886,
Sjors,2020-02-19 10:37:31,"Travis doesn't like this: https://travis-ci.org/bitcoin/bitcoin/jobs/651243106#L4064\n\n```\nError: attempt to decrement a dereferenceable (start-of-sequence) iterator.\n```\n\nIt sounds like a job for `std::find_end` with a binary predicate, since you're looking for a hardened path element by an unhardened one. ",https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381209343,381209343,src/script/descriptor.cpp
achow101,2020-02-19 23:06:17,I was able to use `std::find_if` for this.,https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381599319,381599319,src/script/descriptor.cpp
Sjors,2020-02-20 09:14:35,"nit: add helper function in `key.h`: `bool DerivePath(CExtKey& out, KeyPath& path, bool neutered = false) const;`",https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381870224,381870224,src/script/descriptor.cpp
Sjors,2020-02-20 09:45:29,"nit: ""one""",https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381887868,381887868,src/script/descriptor.cpp
Sjors,2020-02-20 09:49:52,Duplicate line,https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381890427,381890427,src/script/descriptor.cpp
achow101,2020-02-21 17:55:58,Done,https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722253,382722253,src/script/descriptor.cpp
achow101,2020-02-21 17:56:03,Fixed,https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722287,382722287,src/script/descriptor.cpp
achow101,2020-02-21 17:56:08,Removed,https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722320,382722320,src/script/descriptor.cpp
