[
  {
    "sha": "136d8f826e9806a13cc08f91f928d4dc700d7445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzZkOGY4MjZlOTgwNmExM2NjMDhmOTFmOTI4ZDRkYzcwMGQ3NDQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:45:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T19:29:52Z"
      },
      "message": "Add DerivePath to CExtKey\n\nUtility function to derive at a path from an CExtKey instead\nof implementing this externally every time we want to derive at\na path.",
      "tree": {
        "sha": "2365936f3c68e6761985552d97343ba15d70a569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2365936f3c68e6761985552d97343ba15d70a569"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/136d8f826e9806a13cc08f91f928d4dc700d7445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/136d8f826e9806a13cc08f91f928d4dc700d7445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/136d8f826e9806a13cc08f91f928d4dc700d7445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/136d8f826e9806a13cc08f91f928d4dc700d7445/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dd7bd47be2f046ea4b114ab86a099ec483d9f3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd7bd47be2f046ea4b114ab86a099ec483d9f3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd7bd47be2f046ea4b114ab86a099ec483d9f3a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "064ba8020290fc0f03a0400ae61e6b1a89052ffa",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/136d8f826e9806a13cc08f91f928d4dc700d7445/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/136d8f826e9806a13cc08f91f928d4dc700d7445/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=136d8f826e9806a13cc08f91f928d4dc700d7445",
        "patch": "@@ -298,6 +298,17 @@ bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n     return key.Derive(out.key, out.chaincode, _nChild, chaincode);\n }\n \n+bool CExtKey::DerivePath(CExtKey& out, std::vector<uint32_t> path)\n+{\n+    CExtKey& der = *this;\n+    bool result = true;\n+    for (const uint32_t& i : path) {\n+        result &= der.Derive(der, i);\n+    }\n+    out = der;\n+    return result;\n+}\n+\n void CExtKey::SetSeed(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);"
      },
      {
        "sha": "aafa6661bf29177091257d637fdfe813d48dbd6d",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/136d8f826e9806a13cc08f91f928d4dc700d7445/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/136d8f826e9806a13cc08f91f928d4dc700d7445/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=136d8f826e9806a13cc08f91f928d4dc700d7445",
        "patch": "@@ -160,6 +160,7 @@ struct CExtKey {\n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtKey& out, unsigned int nChild) const;\n+    bool DerivePath(CExtKey& out, std::vector<uint32_t> path);\n     CExtPubKey Neuter() const;\n     void SetSeed(const unsigned char* seed, unsigned int nSeedLen);\n };"
      }
    ]
  },
  {
    "sha": "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODI3NDc1MWY2ZWI3ZGJkMjIwN2ZmNDIzMjEzMWRmYzBmOWZmOTc4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-15T00:54:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T19:49:41Z"
      },
      "message": "descriptors: Use xpub at last hardened step if possible",
      "tree": {
        "sha": "40c39786aedb9f6fb223a5c940bc71f3bbb5318b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40c39786aedb9f6fb223a5c940bc71f3bbb5318b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8274751f6eb7dbd2207ff4232131dfc0f9ff978/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "136d8f826e9806a13cc08f91f928d4dc700d7445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/136d8f826e9806a13cc08f91f928d4dc700d7445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/136d8f826e9806a13cc08f91f928d4dc700d7445"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 94,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4037198adc97c60fba9cd483755e474f6671f8e0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8274751f6eb7dbd2207ff4232131dfc0f9ff978/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8274751f6eb7dbd2207ff4232131dfc0f9ff978/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
        "patch": "@@ -173,9 +173,11 @@ struct PubkeyProvider\n \n class OriginPubkeyProvider final : public PubkeyProvider\n {\n+public:\n     KeyOriginInfo m_origin;\n     std::unique_ptr<PubkeyProvider> m_provider;\n \n+private:\n     std::string OriginString() const\n     {\n         return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatHDKeypath(m_origin.path);\n@@ -697,6 +699,11 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n     return true;\n }\n \n+static bool IsHardened(const uint32_t& a)\n+{\n+    return a & 0x80000000UL;\n+}\n+\n /** Parse a public key that excludes origin information. */\n std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n@@ -743,6 +750,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     }\n     KeyPath path;\n     DeriveType type = DeriveType::NO;\n+    bool hardened = split.back() == MakeSpan(\"'\").first(1) || split.back() == MakeSpan(\"h\").first(1);\n     if (split.back() == MakeSpan(\"*\").first(1)) {\n         split.pop_back();\n         type = DeriveType::UNHARDENED;\n@@ -754,6 +762,43 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key\n+                extkey.DerivePath(extkey, last_hardened_info.path);\n+                extpubkey = extkey.Neuter();\n+                out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+                // Shorten path to the unhardened stuff\n+                if (last_hardened_info.path.size() < path.size()) {\n+                    // At least one step is unhardened\n+                    KeyPath new_path;\n+                    new_path.insert(new_path.end(), last_hard_it, path.end());\n+                    path = new_path;\n+                } else {\n+                    // All steps are hardened\n+                    path.clear();\n+                }\n+\n+                // Make a BIP32PubkeyProvider for the unhardened derivation\n+                auto bip32prov = MakeUnique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n+\n+                // Make an OriginPubkeyProvider for the hardened stuff\n+                return MakeUnique<OriginPubkeyProvider>(std::move(last_hardened_info), std::move(bip32prov));\n+            }\n+        }\n     }\n     return MakeUnique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n }\n@@ -791,6 +836,15 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n     if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n     auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n+\n+    // ParsePubkeyInner can return an OriginPubkeyProvider which we need to flatten with the one we are about to make\n+    OriginPubkeyProvider* orig_provider = dynamic_cast<OriginPubkeyProvider*>(provider.get());\n+    if (orig_provider) {\n+        // Extend the info path with the path from provider\n+        info.path.insert(info.path.end(), orig_provider->m_origin.path.begin(), orig_provider->m_origin.path.end());\n+        provider = std::move(orig_provider->m_provider);\n+    }\n+\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n "
      },
      {
        "sha": "b69c6ec88c89130b20cd030822ee39352210f8cf",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 16,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8274751f6eb7dbd2207ff4232131dfc0f9ff978/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8274751f6eb7dbd2207ff4232131dfc0f9ff978/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
        "patch": "@@ -63,7 +63,7 @@ std::string UseHInsteadOfApostrophe(const std::string& desc)\n const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n \n void DoCheck(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n-    bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false)\n+    bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false, bool skip_priv_round_trip = false)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n     std::set<std::vector<uint32_t>> left_paths = paths;\n@@ -100,14 +100,16 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n     BOOST_CHECK(EqualDescriptor(pub, pub1));\n     BOOST_CHECK(EqualDescriptor(pub, pub2));\n \n-    // Check that both can be serialized with private key back to the private version, but not without private key.\n-    std::string prv1;\n-    BOOST_CHECK(parse_priv->ToPrivateString(keys_priv, prv1));\n-    BOOST_CHECK(EqualDescriptor(prv, prv1));\n-    BOOST_CHECK(!parse_priv->ToPrivateString(keys_pub, prv1));\n-    BOOST_CHECK(parse_pub->ToPrivateString(keys_priv, prv1));\n-    BOOST_CHECK(EqualDescriptor(prv, prv1));\n-    BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n+    if (!skip_priv_round_trip) {\n+        // Check that both can be serialized with private key back to the private version, but not without private key.\n+        std::string prv1;\n+        BOOST_CHECK(parse_priv->ToPrivateString(keys_priv, prv1));\n+        BOOST_CHECK(EqualDescriptor(prv, prv1));\n+        BOOST_CHECK(!parse_priv->ToPrivateString(keys_pub, prv1));\n+        BOOST_CHECK(parse_pub->ToPrivateString(keys_priv, prv1));\n+        BOOST_CHECK(EqualDescriptor(prv, prv1));\n+        BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n+    }\n \n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);\n@@ -185,32 +187,48 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY, bool skip_priv_round_trip = false)\n {\n     bool found_apostrophes_in_prv = false;\n     bool found_apostrophes_in_pub = false;\n \n     // Do not replace apostrophes with 'h' in prv and pub\n-    DoCheck(prv, pub, flags, scripts, type, paths);\n+    DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false, /*replace_apostrophe_with_h_in_pub = */false, skip_priv_round_trip);\n \n     // Replace apostrophes with 'h' in prv but not in pub, if apostrophes are found in prv\n     if (prv.find('\\'') != std::string::npos) {\n         found_apostrophes_in_prv = true;\n-        DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */false);\n+        DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */false, skip_priv_round_trip);\n     }\n \n     // Replace apostrophes with 'h' in pub but not in prv, if apostrophes are found in pub\n     if (pub.find('\\'') != std::string::npos) {\n         found_apostrophes_in_pub = true;\n-        DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false, /*replace_apostrophe_with_h_in_pub = */true);\n+        DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false, /*replace_apostrophe_with_h_in_pub = */true, skip_priv_round_trip);\n     }\n \n     // Replace apostrophes with 'h' both in prv and in pub, if apostrophes are found in both\n     if (found_apostrophes_in_prv && found_apostrophes_in_pub) {\n-        DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */true);\n+        DoCheck(prv, pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */true, skip_priv_round_trip);\n     }\n }\n \n+void CheckNormalization(const std::string& orig, const std::string& prv, const std::string& pub)\n+{\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> parse = Parse(orig, keys, error);\n+    BOOST_CHECK(parse);\n+\n+    // Check that we get pub\n+    BOOST_CHECK(EqualDescriptor(parse->ToString(), pub));\n+\n+    // Check that we get prv\n+    std::string prv_ret;\n+    BOOST_CHECK(parse->ToPrivateString(keys, prv_ret));\n+    BOOST_CHECK(EqualDescriptor(prv_ret, prv));\n+}\n+\n }\n \n BOOST_FIXTURE_TEST_SUITE(descriptor_tests, BasicTestingSetup)\n@@ -246,7 +264,7 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     // Versions with BIP32 derivations\n     Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}}, nullopt);\n     Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, nullopt, {{0}});\n-    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{0xFFFFFFFFUL,0}});\n+    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh([bd16bee5/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{0xFFFFFFFFUL,0}}, true);\n     Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, OutputType::BECH32, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n     Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, OutputType::P2SH_SEGWIT, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, nullopt, {{0}, {1}});\n@@ -260,7 +278,7 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, OutputType::LEGACY, {{0x8000006FUL,222},{0}});\n     Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, nullopt, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n-    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, OutputType::BECH32, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[bd16bee5/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, OutputType::BECH32, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}}, true);\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}}, OutputType::P2SH_SEGWIT);\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\", \"P2SH script is too large, 547 bytes is larger than 520 bytes\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n     CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Multiple ']' characters found for a single pubkey\"); // Double key origin descriptor\n@@ -297,6 +315,12 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"\", \"addr(asdf)\", \"Address is not valid\"); // Invalid address\n     CheckUnparsable(\"\", \"raw(asdf)\", \"Raw script is not hex\"); // Invalid script\n     CheckUnparsable(\"\", \"raw(\u00dc)#00000000\", \"Invalid characters in payload\"); // Invalid chars\n+\n+    // Check the normalizations\n+    CheckNormalization(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/0'/0'/0)\", \"pkh([bd16bee5/0'/0']xprv9wVsMas2E9zyEkJy37eMph5TwfRC7Fi7Fza323HNerYTWLtCZEMF9Ucf5w9Udn4DJoKgFTLuVvRWhB7hnE6gMMKL9LNkDSLZyiLyrJX2Mec/0)\", \"pkh([bd16bee5/0'/0']xpub6AVDm6Pv4XZGTEPS99BNBq2CVhFgWiRxdDVdpRgzDC5SP9DM6mfVhGw8wDUDM4PTYP44Ufp6H7UDGqU9Sp1LaZjGWUbLBMsMh3N7LBRpQKh/0)\");\n+    CheckNormalization(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/0'/0'/*)\", \"pkh([bd16bee5/0'/0']xprv9wVsMas2E9zyEkJy37eMph5TwfRC7Fi7Fza323HNerYTWLtCZEMF9Ucf5w9Udn4DJoKgFTLuVvRWhB7hnE6gMMKL9LNkDSLZyiLyrJX2Mec/*)\", \"pkh([bd16bee5/0'/0']xpub6AVDm6Pv4XZGTEPS99BNBq2CVhFgWiRxdDVdpRgzDC5SP9DM6mfVhGw8wDUDM4PTYP44Ufp6H7UDGqU9Sp1LaZjGWUbLBMsMh3N7LBRpQKh/*)\");\n+    CheckNormalization(\"pkh([deadbeef/0']xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/0'/0'/*)\", \"pkh([deadbeef/0'/0'/0']xprv9wVsMas2E9zyEkJy37eMph5TwfRC7Fi7Fza323HNerYTWLtCZEMF9Ucf5w9Udn4DJoKgFTLuVvRWhB7hnE6gMMKL9LNkDSLZyiLyrJX2Mec/*)\", \"pkh([deadbeef/0'/0'/0']xpub6AVDm6Pv4XZGTEPS99BNBq2CVhFgWiRxdDVdpRgzDC5SP9DM6mfVhGw8wDUDM4PTYP44Ufp6H7UDGqU9Sp1LaZjGWUbLBMsMh3N7LBRpQKh/*)\");\n+    CheckNormalization(\"pkh([deadbeef/0']xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/0'/0'/*')\", \"pkh([deadbeef/0']xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/0'/0'/*')\", \"pkh([deadbeef/0']xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/0'/0'/*')\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]