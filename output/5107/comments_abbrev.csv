sipa,2014-10-20T05:56:12Z,One small nit before actual review: you're committing a Makefile to the repository.\n,https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-59686671,59686671,
CodeShark,2014-10-20T06:31:07Z,Doh - dunno how that got in there...should be fixed now.\n,https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-59688671,59688671,
CodeShark,2014-10-20T08:24:24Z,"Before these commits, the getblocktemplate thread was being woken up before joining the thread. I had moved the signal to the end of StopRPCThreads, but I think we could end up with a deadlock if we wait to signal until after joining the thread.\n",https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-59704348,59704348,
laanwj,2014-10-22T09:23:33Z,"Concept ACK, I now like the approach you take to pushing down the locks.\n\n(someone will have to verify that all the RPC methods get the right locks, but this is easier to review than functional changes inside the methods)\n",https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-60057946,60057946,
laanwj,2014-10-27T17:32:28Z,"I checked locking for all RPC calls after your change.\n\n## Non-threadsafe RPC functions\n\naccording to the table in https://github.com/CodeShark/bitcoin/blob/No_main_in_rpcserver/src/rpcserver.cpp :\n- `getinfo`: locks cs_main, and cs_wallet if there is a wallet, https://github.com/CodeShark/bitcoin/blob/No_main_in_rpcserver/src/rpcmisc.cpp#L74\n- `signrawtransaction`: locks cs_main, and cs_wal",https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-60634011,60634011,
laanwj,2014-10-30T16:48:49Z,"utACK, going to test this\n",https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-61126147,61126147,
sipa,2014-11-04T13:39:25Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-61640105,61640105,
laanwj,2015-01-26T12:56:43Z,Closing in favor of rebased #5711\n,https://github.com/bitcoin/bitcoin/pull/5107#issuecomment-71456662,71456662,
laanwj,2014-10-20T11:12:10Z,Please either remove these debugging statements or replace them with category-specific LogPrint()\n,https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19078795,19078795,src/init.cpp
CodeShark,2014-10-20T23:18:08Z,I'll remove all LogPrint() once we've tested.\n,https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19120913,19120913,src/init.cpp
Diapolo,2014-10-21T10:44:05Z,Nit: Can you make this a 2-liner? Same nit for the change below.\n,https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19140474,19140474,src/rpcmisc.cpp
Diapolo,2014-10-21T10:44:40Z,Nit: random should be placed where main was (alphabetical ordering).\n,https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19140493,19140493,src/rpcserver.cpp
Diapolo,2014-10-21T10:45:21Z,Nit: Should be above thread (alphabetical ordering).\n,https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19140515,19140515,src/rpcserver.cpp
Diapolo,2014-10-21T10:45:51Z,Nit: Should be above std (alphabetical ordering).\n,https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19140539,19140539,src/rpcserver.cpp
CodeShark,2014-10-22T05:07:20Z,"This should be seen as a minimally-invasive temporary fix, allowing us to use RAII on mutexes whose existence we can only know about at runtime (i.e. pwalletMain->cs_wallet).\n\nThe permanent fix will be to move all functionality depending on pwalletMain->cs_wallet into separate functions altogether - or perhaps to encapsulate locking within the wallet class itself.\n",https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19194585,19194585,src/sync.h
laanwj,2014-10-30T16:39:44Z,"Not sure where to move them otherwise (probably a bitcoin-specific RPC server module, where the method registration belongs too) but it's not very nice to have these RPC-specific implementation functions in init.cpp\n",https://github.com/bitcoin/bitcoin/pull/5107#discussion_r19617467,19617467,src/init.cpp
