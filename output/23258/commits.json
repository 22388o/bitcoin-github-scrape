[
  {
    "sha": "a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
    "node_id": "C_kwDOABII59oAKGEwZWZlNTI5ZTRmZDA1M2I4OTA0NTA0MTNiOWNhNWUxYmNkOGYyYzI",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-12T01:36:51Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-12T01:36:51Z"
      },
      "message": "Fix outdated comments referring to ::ChainActive()",
      "tree": {
        "sha": "79411554469949d6d3d988420d13e3bb986bba40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79411554469949d6d3d988420d13e3bb986bba40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e418a8e675e4dbca9f9c3cf7dd4633aa3c6c196e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e418a8e675e4dbca9f9c3cf7dd4633aa3c6c196e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e418a8e675e4dbca9f9c3cf7dd4633aa3c6c196e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "fc6dd77a72f28bcfe1da2060ac32ece440807ab1",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
        "patch": "@@ -321,7 +321,7 @@ bool BaseIndex::BlockUntilSyncedToCurrentChain() const\n \n     {\n         // Skip the queue-draining stuff if we know we're caught up with\n-        // ::ChainActive().Tip().\n+        // m_chain.Tip().\n         LOCK(cs_main);\n         const CBlockIndex* chain_tip = m_chainstate->m_chain.Tip();\n         const CBlockIndex* best_block_index = m_best_block_index.load();"
      },
      {
        "sha": "2e2061d0a14281f45845cea3feb74626c7abd77b",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
        "patch": "@@ -549,7 +549,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     if (txHeight != nBestSeenHeight) {\n         // Ignore side chains and re-orgs; assuming they are random they don't\n         // affect the estimate.  We'll potentially double count transactions in 1-block reorgs.\n-        // Ignore txs if BlockPolicyEstimator is not in sync with ::ChainActive().Tip().\n+        // Ignore txs if BlockPolicyEstimator is not in sync with ActiveChain().Tip().\n         // It will be synced next time a block is processed.\n         return;\n     }"
      },
      {
        "sha": "460e9d0ceba86928067865264202ed56a5934d33",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
        "patch": "@@ -542,7 +542,7 @@ class CTxMemPool\n      * By design, it is guaranteed that:\n      *\n      * 1. Locking both `cs_main` and `mempool.cs` will give a view of mempool\n-     *    that is consistent with current chain tip (`::ChainActive()` and\n+     *    that is consistent with current chain tip (`ActiveChain()` and\n      *    `CoinsTip()`) and is fully populated. Fully populated means that if the\n      *    current active chain is missing transactions that were present in a\n      *    previously active chain, all the missing transactions will have been"
      },
      {
        "sha": "c21a87e6d365020ff0de9762b4bc1e30bc5c6d6d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
        "patch": "@@ -219,7 +219,7 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n     // If there are relative lock times then the maxInputBlock will be set\n     // If there are no relative lock times, the LockPoints don't depend on the chain\n     if (lp->maxInputBlock) {\n-        // Check whether ::ChainActive() is an extension of the block at which the LockPoints\n+        // Check whether active_chain is an extension of the block at which the LockPoints\n         // calculation was valid.  If not LockPoints are no longer valid\n         if (!active_chain.Contains(lp->maxInputBlock)) {\n             return false;"
      },
      {
        "sha": "1c23b3ad5cc0409b453b1ba837fbc66d9e341868",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
        "patch": "@@ -75,7 +75,7 @@ static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n /** Default for -stopatheight */\n static const int DEFAULT_STOPATHEIGHT = 0;\n-/** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of ::ChainActive().Tip() will not be pruned. */\n+/** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of ActiveChain().Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n static const signed int DEFAULT_CHECKBLOCKS = 6;\n static const unsigned int DEFAULT_CHECKLEVEL = 3;"
      },
      {
        "sha": "180d9d652ad4a282dbbe7ad503db9355e71cc52f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0efe529e4fd053b890450413b9ca5e1bcd8f2c2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a0efe529e4fd053b890450413b9ca5e1bcd8f2c2",
        "patch": "@@ -1294,7 +1294,7 @@ void CWallet::updatedBlockTip()\n void CWallet::BlockUntilSyncedToCurrentChain() const {\n     AssertLockNotHeld(cs_wallet);\n     // Skip the queue-draining stuff if we know we're caught up with\n-    // ::ChainActive().Tip(), otherwise put a callback in the validation interface queue and wait\n+    // chain().Tip(), otherwise put a callback in the validation interface queue and wait\n     // for the queue to drain enough to execute it (indicating we are caught up\n     // at least with the time we entered this function).\n     uint256 last_block_hash = WITH_LOCK(cs_wallet, return m_last_block_processed);"
      }
    ]
  }
]