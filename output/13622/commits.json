[
  {
    "sha": "beef7ec4be725beea870a2da510d2817487601ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWVmN2VjNGJlNzI1YmVlYTg3MGEyZGE1MTBkMjgxNzQ4NzYwMWVj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-07-10T00:06:39Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-07-10T00:06:39Z"
      },
      "message": "Remove useless mapRequest tracking that just effects Qt display.\n\nI thought we had removed this a long time ago, TBH, its really\nconfusing feedback to users that we display whether a tx was\nbroadcast to immediate neighbor nodes, given that has little\nindication of whether the tx propagated very far.",
      "tree": {
        "sha": "ef04c6baeb971bf61a8d4024e15034c527ac059b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef04c6baeb971bf61a8d4024e15034c527ac059b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beef7ec4be725beea870a2da510d2817487601ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beef7ec4be725beea870a2da510d2817487601ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beef7ec4be725beea870a2da510d2817487601ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beef7ec4be725beea870a2da510d2817487601ec/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b641f60425674d737d77abd8c49929d953ea4154",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b641f60425674d737d77abd8c49929d953ea4154",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b641f60425674d737d77abd8c49929d953ea4154"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 1,
      "deletions": 111
    },
    "files": [
      {
        "sha": "aade4b2df357dc39e5bb44cf9d99eb3dcbd33b4d",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -93,7 +93,6 @@ WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n     result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max()),\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();\n-    result.request_count = wtx.GetRequestCount();\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n     result.is_final = CheckFinalTx(*wtx.tx);"
      },
      {
        "sha": "96e742eacae919286d84daa1591eb5bf74f5aef2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -346,7 +346,6 @@ struct WalletTxStatus\n     int block_height;\n     int blocks_to_maturity;\n     int depth_in_main_chain;\n-    int request_count;\n     unsigned int time_received;\n     uint32_t lock_time;\n     bool is_final;"
      },
      {
        "sha": "2f3a60406412594869a5969b33091159bac8dc40",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -1264,9 +1264,6 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (!push) {\n                 vNotFound.push_back(inv);\n             }\n-\n-            // Track requests for our stuff.\n-            GetMainSignals().Inventory(inv.hash);\n         }\n     } // release cs_main\n \n@@ -1965,9 +1962,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     pfrom->AskFor(inv);\n                 }\n             }\n-\n-            // Track requests for our stuff\n-            GetMainSignals().Inventory(inv.hash);\n         }\n     }\n "
      },
      {
        "sha": "ff47653fb770a391aa6fc37eea92b73d5384a68f",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -27,8 +27,6 @@ static const bool DEFAULT_SPLASHSCREEN = true;\n #define COLOR_BAREADDRESS QColor(140, 140, 140)\n /* Transaction list -- TX status decoration - open until date */\n #define COLOR_TX_STATUS_OPENUNTILDATE QColor(64, 64, 255)\n-/* Transaction list -- TX status decoration - offline */\n-#define COLOR_TX_STATUS_OFFLINE QColor(192, 192, 192)\n /* Transaction list -- TX status decoration - danger, tx needs attention */\n #define COLOR_TX_STATUS_DANGER QColor(200, 100, 100)\n /* Transaction list -- TX status decoration - default color */"
      },
      {
        "sha": "8297f75799572f4dd9114894482530a273964a6c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -37,8 +37,6 @@ QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const i\n         int nDepth = status.depth_in_main_chain;\n         if (nDepth < 0)\n             return tr(\"conflicted with a transaction with %1 confirmations\").arg(-nDepth);\n-        else if (adjustedTime - status.time_received > 2 * 60 && status.request_count == 0)\n-            return tr(\"%1/offline\").arg(nDepth);\n         else if (nDepth == 0)\n             return tr(\"0/unconfirmed, %1\").arg((inMempool ? tr(\"in memory pool\") : tr(\"not in memory pool\"))) + (status.is_abandoned ? \", \"+tr(\"abandoned\") : \"\");\n         else if (nDepth < 6)\n@@ -68,14 +66,6 @@ QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wall\n     CAmount nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx, status, inMempool, numBlocks, adjustedTime);\n-    int nRequests = status.request_count;\n-    if (nRequests != -1)\n-    {\n-        if (nRequests == 0)\n-            strHTML += tr(\", has not been successfully broadcast yet\");\n-        else if (nRequests > 0)\n-            strHTML += tr(\", broadcast through %n node(s)\", \"\", nRequests);\n-    }\n     strHTML += \"<br>\";\n \n     strHTML += \"<b>\" + tr(\"Date\") + \":</b> \" + (nTime ? GUIUtil::dateTimeStr(nTime) : \"\") + \"<br>\";"
      },
      {
        "sha": "65f5e87d150e0f035e2ee6f8813561857e97d51e",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -195,10 +195,6 @@ void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int\n             if (wtx.is_in_main_chain)\n             {\n                 status.matures_in = wtx.blocks_to_maturity;\n-\n-                // Check if the block was requested by anyone\n-                if (adjustedTime - wtx.time_received > 2 * 60 && wtx.request_count == 0)\n-                    status.status = TransactionStatus::MaturesWarning;\n             }\n             else\n             {\n@@ -216,10 +212,6 @@ void TransactionRecord::updateStatus(const interfaces::WalletTxStatus& wtx, int\n         {\n             status.status = TransactionStatus::Conflicted;\n         }\n-        else if (adjustedTime - wtx.time_received > 2 * 60 && wtx.request_count == 0)\n-        {\n-            status.status = TransactionStatus::Offline;\n-        }\n         else if (status.depth == 0)\n         {\n             status.status = TransactionStatus::Unconfirmed;"
      },
      {
        "sha": "a6424e74fa2ef901d7699093b0307dbe96b4fd2c",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -25,22 +25,20 @@ class TransactionStatus\n public:\n     TransactionStatus():\n         countsForBalance(false), sortKey(\"\"),\n-        matures_in(0), status(Offline), depth(0), open_for(0), cur_num_blocks(-1)\n+        matures_in(0), status(Unconfirmed), depth(0), open_for(0), cur_num_blocks(-1)\n     { }\n \n     enum Status {\n         Confirmed,          /**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **/\n         /// Normal (sent/received) transactions\n         OpenUntilDate,      /**< Transaction not yet final, waiting for date */\n         OpenUntilBlock,     /**< Transaction not yet final, waiting for block */\n-        Offline,            /**< Not sent to any other nodes **/\n         Unconfirmed,        /**< Not yet mined into a block **/\n         Confirming,         /**< Confirmed, but waiting for the recommended number of confirmations **/\n         Conflicted,         /**< Conflicts with other transaction or mempool **/\n         Abandoned,          /**< Abandoned from the wallet **/\n         /// Generated (mined) transactions\n         Immature,           /**< Mined but waiting for maturity */\n-        MaturesWarning,     /**< Transaction will likely not mature because no nodes have confirmed */\n         NotAccepted         /**< Mined but not accepted */\n     };\n "
      },
      {
        "sha": "63a4afe191cea90d6b5e5d3ff62b9641f019cb6b",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -286,9 +286,6 @@ QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) cons\n     case TransactionStatus::OpenUntilDate:\n         status = tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx->status.open_for));\n         break;\n-    case TransactionStatus::Offline:\n-        status = tr(\"Offline\");\n-        break;\n     case TransactionStatus::Unconfirmed:\n         status = tr(\"Unconfirmed\");\n         break;\n@@ -307,9 +304,6 @@ QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) cons\n     case TransactionStatus::Immature:\n         status = tr(\"Immature (%1 confirmations, will be available after %2)\").arg(wtx->status.depth).arg(wtx->status.depth + wtx->status.matures_in);\n         break;\n-    case TransactionStatus::MaturesWarning:\n-        status = tr(\"This block was not received by any other nodes and will probably not be accepted!\");\n-        break;\n     case TransactionStatus::NotAccepted:\n         status = tr(\"Generated but not accepted\");\n         break;\n@@ -447,8 +441,6 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n     case TransactionStatus::OpenUntilBlock:\n     case TransactionStatus::OpenUntilDate:\n         return COLOR_TX_STATUS_OPENUNTILDATE;\n-    case TransactionStatus::Offline:\n-        return COLOR_TX_STATUS_OFFLINE;\n     case TransactionStatus::Unconfirmed:\n         return QIcon(\":/icons/transaction_0\");\n     case TransactionStatus::Abandoned:\n@@ -471,7 +463,6 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n         int part = (wtx->status.depth * 4 / total) + 1;\n         return QIcon(QString(\":/icons/transaction_%1\").arg(part));\n         }\n-    case TransactionStatus::MaturesWarning:\n     case TransactionStatus::NotAccepted:\n         return QIcon(\":/icons/transaction_0\");\n     default:"
      },
      {
        "sha": "aff4c44cea6ab0cdda609704b1b86a5c2784e004",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -25,7 +25,6 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n@@ -80,7 +79,6 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n-    g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n@@ -89,7 +87,6 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n@@ -105,7 +102,6 @@ void UnregisterAllValidationInterfaces() {\n     }\n     g_signals.m_internals->BlockChecked.disconnect_all_slots();\n     g_signals.m_internals->Broadcast.disconnect_all_slots();\n-    g_signals.m_internals->Inventory.disconnect_all_slots();\n     g_signals.m_internals->ChainStateFlushed.disconnect_all_slots();\n     g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n     g_signals.m_internals->BlockConnected.disconnect_all_slots();\n@@ -171,12 +167,6 @@ void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n     });\n }\n \n-void CMainSignals::Inventory(const uint256 &hash) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([hash, this] {\n-        m_internals->Inventory(hash);\n-    });\n-}\n-\n void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {\n     m_internals->Broadcast(nBestBlockTime, connman);\n }"
      },
      {
        "sha": "42cc2e9a20bd8840fba6e30378e0714cfd210ebd",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -117,12 +117,6 @@ class CValidationInterface {\n      * Called on a background thread.\n      */\n     virtual void ChainStateFlushed(const CBlockLocator &locator) {}\n-    /**\n-     * Notifies listeners about an inventory item being seen on the network.\n-     *\n-     * Called on a background thread.\n-     */\n-    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n@@ -173,7 +167,6 @@ class CMainSignals {\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void ChainStateFlushed(const CBlockLocator &);\n-    void Inventory(const uint256 &);\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);"
      },
      {
        "sha": "aa9508a02d83cf20b4184e51d770c345acdc21d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -1532,45 +1532,6 @@ int64_t CWalletTx::GetTxTime() const\n     return n ? n : nTimeReceived;\n }\n \n-int CWalletTx::GetRequestCount() const\n-{\n-    // Returns -1 if it wasn't being tracked\n-    int nRequests = -1;\n-    {\n-        LOCK(pwallet->cs_wallet);\n-        if (IsCoinBase())\n-        {\n-            // Generated block\n-            if (!hashUnset())\n-            {\n-                std::map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n-                if (mi != pwallet->mapRequestCount.end())\n-                    nRequests = (*mi).second;\n-            }\n-        }\n-        else\n-        {\n-            // Did anyone request this transaction?\n-            std::map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(GetHash());\n-            if (mi != pwallet->mapRequestCount.end())\n-            {\n-                nRequests = (*mi).second;\n-\n-                // How about the block it's in?\n-                if (nRequests == 0 && !hashUnset())\n-                {\n-                    std::map<uint256, int>::const_iterator _mi = pwallet->mapRequestCount.find(hashBlock);\n-                    if (_mi != pwallet->mapRequestCount.end())\n-                        nRequests = (*_mi).second;\n-                    else\n-                        nRequests = 1; // If it's in someone else's block it must have got out\n-                }\n-            }\n-        }\n-    }\n-    return nRequests;\n-}\n-\n // Helper for producing a max-sized low-S signature (eg 72 bytes)\n bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n {\n@@ -3145,9 +3106,6 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n             }\n         }\n \n-        // Track how many getdata requests our transaction gets\n-        mapRequestCount[wtxNew.GetHash()] = 0;\n-\n         // Get the inserted-CWalletTx from mapWallet so that the\n         // fInMempool flag is cached properly\n         CWalletTx& wtx = mapWallet.at(wtxNew.GetHash());"
      },
      {
        "sha": "ef03a1eaed6adff307599a589e189344ea0d95c0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beef7ec4be725beea870a2da510d2817487601ec/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beef7ec4be725beea870a2da510d2817487601ec/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=beef7ec4be725beea870a2da510d2817487601ec",
        "patch": "@@ -486,7 +486,6 @@ class CWalletTx : public CMerkleTx\n     bool IsTrusted() const;\n \n     int64_t GetTxTime() const;\n-    int GetRequestCount() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n     bool RelayWalletTransaction(CConnman* connman);\n@@ -820,7 +819,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nOrderPosNext = 0;\n     uint64_t nAccountingEntryNumber = 0;\n-    std::map<uint256, int> mapRequestCount;\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n@@ -1064,16 +1062,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string& GetLabelName(const CScript& scriptPubKey) const;\n \n-    void Inventory(const uint256 &hash) override\n-    {\n-        {\n-            LOCK(cs_wallet);\n-            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n-            if (mi != mapRequestCount.end())\n-                (*mi).second++;\n-        }\n-    }\n-\n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n \n     unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)"
      }
    ]
  }
]