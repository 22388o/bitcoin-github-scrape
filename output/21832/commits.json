[
  {
    "sha": "a37e29d32fde8c7b4143322deeef2a8a06114d43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzdlMjlkMzJmZGU4YzdiNDE0MzMyMmRlZWVmMmE4YTA2MTE0ZDQz",
    "commit": {
      "author": {
        "name": "Klement Tan",
        "email": "klementtan@gmail.com",
        "date": "2021-05-02T08:31:52Z"
      },
      "committer": {
        "name": "klementtan",
        "email": "klementtan@gmail.com",
        "date": "2021-07-21T11:27:04Z"
      },
      "message": "cli: Implement human readable -getinfo.",
      "tree": {
        "sha": "9caa21bc09632e7bf186880f0300e34f7db92856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9caa21bc09632e7bf186880f0300e34f7db92856"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a37e29d32fde8c7b4143322deeef2a8a06114d43",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdzBbFgjg1umjfk4MZcjk/steXaIFAmD4BI4ACgkQZcjk/ste\nXaJHPQ//VjbyZZdTlqBP0eNkG1BrWE45Ha7q+rzx9TCQcPJ6rl9MLRBZHcCQSxck\nb7UnizWwHg6/auURpuB+fjc5yuXHsOkih2lhtitPWurBTa3yw+gJdmsIuNtY5+ph\n69Pqa791BDCJn6RkGW6eur/NzLDlkYdbZf0auLz0qQ5rRIm2IT6JaBGvGJfrwVuP\nM38t2FvNhq90Y5CCaNgMZMmre94FoFIWiieo75V/k+2O0bvfxP/7/He5riz3HV+0\n6fkIbZ3yIseIpnCQPMFRnjs58QfXKFqMauyxVLvutZLck0d2fFowbUHa7cLNvn2I\nRrNj36vOvkRbaQS4+1sI5hhfeufHePwu9/yJuOtTGEZ7O+1Kk3n7o4yPdMmW9Hvg\nicQTR+r6zyy+ihQqzm99aJHddz+OBOTICFBllyF3To73tBc2qNvz8WNl/pBiZjGv\nC10Hl4CIjycgRdpC/rR0anf80/gObigJNSeXDC20rM+fmc0mrp7qAZoGElogbCWQ\nWye2UwEudnwRfB9dDilMbmR06OhPMcvNJFIPvijw1Tfi/njwW4crmSZuMjXGGKTF\nesUPjcrHxYM8lx3j9REbBpVr8Fx+DYLZafbTMeXLx7q96Yftv//9unO+Rz6Fv3L3\ny3oYniip7wilDAEP2l4Ot/6cqTwyq5c89/88sQeDKaYrMYxH7zo=\n=t7i0\n-----END PGP SIGNATURE-----",
        "payload": "tree 9caa21bc09632e7bf186880f0300e34f7db92856\nparent 1c046bb7ac0261d1d8f231ae1d8b39551ee60955\nauthor Klement Tan <klementtan@gmail.com> 1619944312 +0800\ncommitter klementtan <klementtan@gmail.com> 1626866824 +0800\n\ncli: Implement human readable -getinfo.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a37e29d32fde8c7b4143322deeef2a8a06114d43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a37e29d32fde8c7b4143322deeef2a8a06114d43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a37e29d32fde8c7b4143322deeef2a8a06114d43/comments",
    "author": {
      "login": "klementtan",
      "id": 49265907,
      "node_id": "MDQ6VXNlcjQ5MjY1OTA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/49265907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klementtan",
      "html_url": "https://github.com/klementtan",
      "followers_url": "https://api.github.com/users/klementtan/followers",
      "following_url": "https://api.github.com/users/klementtan/following{/other_user}",
      "gists_url": "https://api.github.com/users/klementtan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klementtan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klementtan/subscriptions",
      "organizations_url": "https://api.github.com/users/klementtan/orgs",
      "repos_url": "https://api.github.com/users/klementtan/repos",
      "events_url": "https://api.github.com/users/klementtan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klementtan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "klementtan",
      "id": 49265907,
      "node_id": "MDQ6VXNlcjQ5MjY1OTA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/49265907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klementtan",
      "html_url": "https://github.com/klementtan",
      "followers_url": "https://api.github.com/users/klementtan/followers",
      "following_url": "https://api.github.com/users/klementtan/following{/other_user}",
      "gists_url": "https://api.github.com/users/klementtan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klementtan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klementtan/subscriptions",
      "organizations_url": "https://api.github.com/users/klementtan/orgs",
      "repos_url": "https://api.github.com/users/klementtan/repos",
      "events_url": "https://api.github.com/users/klementtan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klementtan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c046bb7ac0261d1d8f231ae1d8b39551ee60955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c046bb7ac0261d1d8f231ae1d8b39551ee60955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c046bb7ac0261d1d8f231ae1d8b39551ee60955"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 211,
      "deletions": 45
    },
    "files": [
      {
        "sha": "cf9edd9b0865a5c8fb7e98849ff6dadcaeeb2450",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a37e29d32fde8c7b4143322deeef2a8a06114d43/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a37e29d32fde8c7b4143322deeef2a8a06114d43/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a37e29d32fde8c7b4143322deeef2a8a06114d43",
        "patch": "@@ -75,6 +75,8 @@ Updated settings\n Tools and Utilities\n -------------------\n \n+- Update `-getinfo` to return data in a user-friendly format that also reduces vertical space. (#21832)\n+\n Wallet\n ------\n "
      },
      {
        "sha": "1ec6411e32cd31b7459965d5299af5d7c1e5b761",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 2,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a37e29d32fde8c7b4143322deeef2a8a06114d43/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a37e29d32fde8c7b4143322deeef2a8a06114d43/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a37e29d32fde8c7b4143322deeef2a8a06114d43",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <policy/feerate.h>\n #include <rpc/client.h>\n #include <rpc/mining.h>\n #include <rpc/protocol.h>\n@@ -28,6 +29,10 @@\n #include <string>\n #include <tuple>\n \n+#ifndef WIN32\n+#include <unistd.h>\n+#endif\n+\n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n #include <support/events.h>\n@@ -48,6 +53,9 @@ static constexpr int8_t UNKNOWN_NETWORK{-1};\n /** Default number of blocks to generate for RPC generatetoaddress. */\n static const std::string DEFAULT_NBLOCKS = \"1\";\n \n+/** Default -color setting. */\n+static const std::string DEFAULT_COLOR_SETTING{\"auto\"};\n+\n static void SetupCliArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n@@ -66,6 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0). Pass \\\"help\\\" for detailed help documentation.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     SetupChainParamsBaseOptions(argsman);\n+    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -338,7 +347,9 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n         result.pushKV(\"chain\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"]));\n         if (!batch[ID_WALLETINFO][\"result\"].isNull()) {\n+            result.pushKV(\"has_wallet\", true);\n             result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n+            result.pushKV(\"walletname\", batch[ID_WALLETINFO][\"result\"][\"walletname\"]);\n             if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n                 result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);\n             }\n@@ -873,6 +884,100 @@ static void GetWalletBalances(UniValue& result)\n     result.pushKV(\"balances\", balances);\n }\n \n+/**\n+ * ParseGetInfoResult takes in -getinfo result in UniValue object and parses it\n+ * into a user friendly UniValue string to be printed on the console.\n+ * @param[out] result  Reference to UniValue result containing the -getinfo output.\n+ */\n+static void ParseGetInfoResult(UniValue& result)\n+{\n+    if (!find_value(result, \"error\").isNull()) return;\n+\n+    std::string RESET, GREEN, BLUE, YELLOW, MAGENTA, CYAN;\n+    bool should_colorize = false;\n+\n+#ifndef WIN32\n+    if (isatty(fileno(stdout))) {\n+        // By default, only print colored text if OS is not WIN32 and stdout is connected to a terminal.\n+        should_colorize = true;\n+    }\n+#endif\n+\n+    if (gArgs.IsArgSet(\"-color\")) {\n+        const std::string color{gArgs.GetArg(\"-color\", DEFAULT_COLOR_SETTING)};\n+        if (color == \"always\") {\n+            should_colorize = true;\n+        } else if (color == \"never\") {\n+            should_colorize = false;\n+        } else if (color != \"auto\") {\n+            throw std::runtime_error(\"Invalid value for -color option. Valid values: always, auto, never.\");\n+        }\n+    }\n+\n+    if (should_colorize) {\n+        RESET = \"\\x1B[0m\";\n+        GREEN = \"\\x1B[32m\";\n+        BLUE = \"\\x1B[34m\";\n+        YELLOW = \"\\x1B[33m\";\n+        MAGENTA = \"\\x1B[35m\";\n+        CYAN = \"\\x1B[36m\";\n+    }\n+\n+    std::string result_string = strprintf(\"%sChain: %s%s\\n\", BLUE, result[\"chain\"].getValStr(), RESET);\n+    result_string += strprintf(\"Blocks: %s\\n\", result[\"blocks\"].getValStr());\n+    result_string += strprintf(\"Headers: %s\\n\", result[\"headers\"].getValStr());\n+    result_string += strprintf(\"Verification progress: %.4f%%\\n\", result[\"verificationprogress\"].get_real() * 100);\n+    result_string += strprintf(\"Difficulty: %s\\n\\n\", result[\"difficulty\"].getValStr());\n+\n+    result_string += strprintf(\n+        \"%sNetwork: in %s, out %s, total %s%s\\n\",\n+        GREEN,\n+        result[\"connections\"][\"in\"].getValStr(),\n+        result[\"connections\"][\"out\"].getValStr(),\n+        result[\"connections\"][\"total\"].getValStr(),\n+        RESET);\n+    result_string += strprintf(\"Version: %s\\n\", result[\"version\"].getValStr());\n+    result_string += strprintf(\"Time offset (s): %s\\n\", result[\"timeoffset\"].getValStr());\n+    const std::string proxy = result[\"proxy\"].getValStr();\n+    result_string += strprintf(\"Proxy: %s\\n\", proxy.empty() ? \"N/A\" : proxy);\n+    result_string += strprintf(\"Min tx relay fee rate (%s/kvB): %s\\n\\n\", CURRENCY_UNIT, result[\"relayfee\"].getValStr());\n+\n+    if (!result[\"has_wallet\"].isNull()) {\n+        const std::string walletname = result[\"walletname\"].getValStr();\n+        result_string += strprintf(\"%sWallet: %s%s\\n\", MAGENTA, walletname.empty() ? \"\\\"\\\"\" : walletname, RESET);\n+\n+        result_string += strprintf(\"Keypool size: %s\\n\", result[\"keypoolsize\"].getValStr());\n+        if (!result[\"unlocked_until\"].isNull()) {\n+            result_string += strprintf(\"Unlocked until: %s\\n\", result[\"unlocked_until\"].getValStr());\n+        }\n+        result_string += strprintf(\"Transaction fee rate (-paytxfee) (%s/kvB): %s\\n\\n\", CURRENCY_UNIT, result[\"paytxfee\"].getValStr());\n+    }\n+    if (!result[\"balance\"].isNull()) {\n+        result_string += strprintf(\"%sBalance:%s %s\\n\\n\", CYAN, RESET, result[\"balance\"].getValStr());\n+    }\n+\n+    if (!result[\"balances\"].isNull()) {\n+        result_string += strprintf(\"%sBalances%s\\n\", CYAN, RESET);\n+\n+        size_t max_balance_length{10};\n+\n+        for (const std::string& wallet : result[\"balances\"].getKeys()) {\n+            max_balance_length = std::max(result[\"balances\"][wallet].getValStr().length(), max_balance_length);\n+        }\n+\n+        for (const std::string& wallet : result[\"balances\"].getKeys()) {\n+            result_string += strprintf(\"%*s %s\\n\",\n+                                       max_balance_length,\n+                                       result[\"balances\"][wallet].getValStr(),\n+                                       wallet.empty() ? \"\\\"\\\"\" : wallet);\n+        }\n+        result_string += \"\\n\";\n+    }\n+\n+    result_string += strprintf(\"%sWarnings:%s %s\", YELLOW, RESET, result[\"warnings\"].getValStr());\n+    result.setStr(result_string);\n+}\n+\n /**\n  * Call RPC getnewaddress.\n  * @returns getnewaddress response as a UniValue object.\n@@ -994,9 +1099,13 @@ static int CommandLineRPC(int argc, char *argv[])\n             UniValue result = find_value(reply, \"result\");\n             const UniValue& error = find_value(reply, \"error\");\n             if (error.isNull()) {\n-                if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\n-                    GetWalletBalances(result); // fetch multiwallet balances and append to result\n+                if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+                    if (!gArgs.IsArgSet(\"-rpcwallet\")) {\n+                        GetWalletBalances(result); // fetch multiwallet balances and append to result\n+                    }\n+                    ParseGetInfoResult(result);\n                 }\n+\n                 ParseResult(result, strPrint);\n             } else {\n                 ParseError(error, strPrint, nRet);"
      },
      {
        "sha": "dfa448a1a867a9b8652ecb7a68d5e2d7ecb59e55",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 98,
        "deletions": 43,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a37e29d32fde8c7b4143322deeef2a8a06114d43/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a37e29d32fde8c7b4143322deeef2a8a06114d43/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=a37e29d32fde8c7b4143322deeef2a8a06114d43",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test bitcoin-cli\"\"\"\n \n from decimal import Decimal\n+import re\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n@@ -29,6 +30,41 @@\n WALLET_NOT_LOADED = 'Requested wallet does not exist or is not loaded'\n WALLET_NOT_SPECIFIED = 'Wallet file not specified'\n \n+\n+def cli_get_info_string_to_dict(cli_get_info_string):\n+    \"\"\"Helper method to convert human-readable -getinfo into a dictionary\"\"\"\n+    cli_get_info = {}\n+    lines = cli_get_info_string.splitlines()\n+    line_idx = 0\n+    ansi_escape = re.compile(r'(\\x9B|\\x1B\\[)[0-?]*[ -\\/]*[@-~]')\n+    while line_idx < len(lines):\n+        # Remove ansi colour code\n+        line = ansi_escape.sub('', lines[line_idx])\n+        if \"Balances\" in line:\n+            # When \"Balances\" appears in a line, all of the following lines contain \"balance: wallet\" until an empty line\n+            cli_get_info[\"Balances\"] = {}\n+            while line_idx < len(lines) and not (lines[line_idx + 1] == ''):\n+                line_idx += 1\n+                balance, wallet = lines[line_idx].strip().split(\" \")\n+                # Remove right justification padding\n+                wallet = wallet.strip()\n+                if wallet == '\"\"':\n+                    # Set default wallet(\"\") to empty string\n+                    wallet = ''\n+                cli_get_info[\"Balances\"][wallet] = balance.strip()\n+        elif \": \" in line:\n+            key, value = line.split(\": \")\n+            if key == 'Wallet' and value == '\"\"':\n+                # Set default wallet(\"\") to empty string\n+                value = ''\n+            if key == \"Proxy\" and value == \"N/A\":\n+                # Set N/A to empty string to represent no proxy\n+                value = ''\n+            cli_get_info[key.strip()] = value.strip()\n+        line_idx += 1\n+    return cli_get_info\n+\n+\n class TestBitcoinCli(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -67,37 +103,43 @@ def run_test(self):\n         self.log.info(\"Test -getinfo with arguments fails\")\n         assert_raises_process_error(1, \"-getinfo takes no arguments\", self.nodes[0].cli('-getinfo').help)\n \n+        self.log.info(\"Test -getinfo with -color=never does not return ANSI escape codes\")\n+        assert \"\\u001b[0m\" not in self.nodes[0].cli('-getinfo', '-color=never').send_cli()\n+\n+        self.log.info(\"Test -getinfo with -color=always returns ANSI escape codes\")\n+        assert \"\\u001b[0m\" in self.nodes[0].cli('-getinfo', '-color=always').send_cli()\n+\n+        self.log.info(\"Test -getinfo with invalid value for -color option\")\n+        assert_raises_process_error(1, \"Invalid value for -color option. Valid values: always, auto, never.\", self.nodes[0].cli('-getinfo', '-color=foo').send_cli)\n+\n         self.log.info(\"Test -getinfo returns expected network and blockchain info\")\n         if self.is_wallet_compiled():\n             self.nodes[0].encryptwallet(password)\n-        cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n+        cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()\n+        cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n+\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()\n-        assert_equal(cli_get_info['version'], network_info['version'])\n-        assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n-        assert_equal(cli_get_info['headers'], blockchain_info['headers'])\n-        assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n-        assert_equal(\n-            cli_get_info['connections'],\n-            {\n-                'in': network_info['connections_in'],\n-                'out': network_info['connections_out'],\n-                'total': network_info['connections']\n-            }\n-        )\n-        assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n-        assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n-        assert_equal(cli_get_info['chain'], blockchain_info['chain'])\n+        assert_equal(int(cli_get_info['Version']), network_info['version'])\n+        assert_equal(cli_get_info['Verification progress'], \"%.4f%%\" % (blockchain_info['verificationprogress'] * 100))\n+        assert_equal(int(cli_get_info['Blocks']), blockchain_info['blocks'])\n+        assert_equal(int(cli_get_info['Headers']), blockchain_info['headers'])\n+        assert_equal(int(cli_get_info['Time offset (s)']), network_info['timeoffset'])\n+        expected_network_info = f\"in {network_info['connections_in']}, out {network_info['connections_out']}, total {network_info['connections']}\"\n+        assert_equal(cli_get_info[\"Network\"], expected_network_info)\n+        assert_equal(cli_get_info['Proxy'], network_info['networks'][0]['proxy'])\n+        assert_equal(Decimal(cli_get_info['Difficulty']), blockchain_info['difficulty'])\n+        assert_equal(cli_get_info['Chain'], blockchain_info['chain'])\n \n         if self.is_wallet_compiled():\n             self.log.info(\"Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info\")\n-            assert_equal(cli_get_info['balance'], BALANCE)\n-            assert 'balances' not in cli_get_info.keys()\n+            assert_equal(Decimal(cli_get_info['Balance']), BALANCE)\n+            assert 'Balances' not in cli_get_info_string\n             wallet_info = self.nodes[0].getwalletinfo()\n-            assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n-            assert_equal(cli_get_info['unlocked_until'], wallet_info['unlocked_until'])\n-            assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n-            assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n+            assert_equal(int(cli_get_info['Keypool size']), wallet_info['keypoolsize'])\n+            assert_equal(int(cli_get_info['Unlocked until']), wallet_info['unlocked_until'])\n+            assert_equal(Decimal(cli_get_info['Transaction fee rate (-paytxfee) (BTC/kvB)']), wallet_info['paytxfee'])\n+            assert_equal(Decimal(cli_get_info['Min tx relay fee rate (BTC/kvB)']), network_info['relayfee'])\n             assert_equal(self.nodes[0].cli.getwalletinfo(), wallet_info)\n \n             # Setup to test -getinfo, -generate, and -rpcwallet= with multiple wallets.\n@@ -120,44 +162,57 @@ def run_test(self):\n \n             self.log.info(\"Test -getinfo with multiple wallets and -rpcwallet returns specified wallet balance\")\n             for i in range(len(wallets)):\n-                cli_get_info = self.nodes[0].cli('-getinfo', '-rpcwallet={}'.format(wallets[i])).send_cli()\n-                assert 'balances' not in cli_get_info.keys()\n-                assert_equal(cli_get_info['balance'], amounts[i])\n+                cli_get_info_string = self.nodes[0].cli('-getinfo', '-rpcwallet={}'.format(wallets[i])).send_cli()\n+                cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n+                assert 'Balances' not in cli_get_info_string\n+                assert_equal(cli_get_info[\"Wallet\"], wallets[i])\n+                assert_equal(Decimal(cli_get_info['Balance']), amounts[i])\n \n             self.log.info(\"Test -getinfo with multiple wallets and -rpcwallet=non-existing-wallet returns no balances\")\n-            cli_get_info_keys = self.nodes[0].cli('-getinfo', '-rpcwallet=does-not-exist').send_cli().keys()\n-            assert 'balance' not in cli_get_info_keys\n-            assert 'balances' not in cli_get_info_keys\n+            cli_get_info_string = self.nodes[0].cli('-getinfo', '-rpcwallet=does-not-exist').send_cli()\n+            assert 'Balance' not in cli_get_info_string\n+            assert 'Balances' not in cli_get_info_string\n \n             self.log.info(\"Test -getinfo with multiple wallets returns all loaded wallet names and balances\")\n             assert_equal(set(self.nodes[0].listwallets()), set(wallets))\n-            cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n-            assert 'balance' not in cli_get_info.keys()\n-            assert_equal(cli_get_info['balances'], {k: v for k, v in zip(wallets, amounts)})\n+            cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()\n+            cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n+            assert 'Balance' not in cli_get_info\n+            for k, v in zip(wallets, amounts):\n+                assert_equal(Decimal(cli_get_info['Balances'][k]), v)\n \n             # Unload the default wallet and re-verify.\n             self.nodes[0].unloadwallet(wallets[0])\n             assert wallets[0] not in self.nodes[0].listwallets()\n-            cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n-            assert 'balance' not in cli_get_info.keys()\n-            assert_equal(cli_get_info['balances'], {k: v for k, v in zip(wallets[1:], amounts[1:])})\n+            cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()\n+            cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n+            assert 'Balance' not in cli_get_info\n+            assert 'Balances' in cli_get_info_string\n+            for k, v in zip(wallets[1:], amounts[1:]):\n+                assert_equal(Decimal(cli_get_info['Balances'][k]), v)\n+            assert wallets[0] not in cli_get_info\n \n             self.log.info(\"Test -getinfo after unloading all wallets except a non-default one returns its balance\")\n             self.nodes[0].unloadwallet(wallets[2])\n             assert_equal(self.nodes[0].listwallets(), [wallets[1]])\n-            cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n-            assert 'balances' not in cli_get_info.keys()\n-            assert_equal(cli_get_info['balance'], amounts[1])\n+            cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()\n+            cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n+            assert 'Balances' not in cli_get_info_string\n+            assert_equal(cli_get_info['Wallet'], wallets[1])\n+            assert_equal(Decimal(cli_get_info['Balance']), amounts[1])\n \n             self.log.info(\"Test -getinfo with -rpcwallet=remaining-non-default-wallet returns only its balance\")\n-            cli_get_info = self.nodes[0].cli('-getinfo', rpcwallet2).send_cli()\n-            assert 'balances' not in cli_get_info.keys()\n-            assert_equal(cli_get_info['balance'], amounts[1])\n+            cli_get_info_string = self.nodes[0].cli('-getinfo', rpcwallet2).send_cli()\n+            cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)\n+            assert 'Balances' not in cli_get_info_string\n+            assert_equal(cli_get_info['Wallet'], wallets[1])\n+            assert_equal(Decimal(cli_get_info['Balance']), amounts[1])\n \n             self.log.info(\"Test -getinfo with -rpcwallet=unloaded wallet returns no balances\")\n-            cli_get_info_keys = self.nodes[0].cli('-getinfo', rpcwallet3).send_cli().keys()\n-            assert 'balance' not in cli_get_info_keys\n-            assert 'balances' not in cli_get_info_keys\n+            cli_get_info_string = self.nodes[0].cli('-getinfo', rpcwallet3).send_cli()\n+            cli_get_info_keys = cli_get_info_string_to_dict(cli_get_info_string)\n+            assert 'Balance' not in cli_get_info_keys\n+            assert 'Balances' not in cli_get_info_string\n \n             # Test bitcoin-cli -generate.\n             n1 = 3"
      }
    ]
  }
]