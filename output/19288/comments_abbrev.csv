DrahtBot,2020-06-16 09:52:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #15423 (torcontrol: Query Tor for correct -onion configuration by luke-jr)\n\nIf you consider this pull request important,",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-644661174,644661174,
laanwj,2020-07-15 13:43:09,"Concept ACK\nI don't really like moving all kinds of internal details to the public header, but testability and encapsuation are always a bit at odds.",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-658775785,658775785,
jonatack,2020-08-14 16:56:03,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-674167702,674167702,
Crypt-iQ,2020-08-26 09:41:18,"Runs without complaint on Ubuntu 18:\n`./configure --enable-fuzz --with-sanitizers=address,undefined,fuzzer CC=clang-10 CXX=clang++-10`\n\nWill build on macOS and report back.",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-680774849,680774849,
Crypt-iQ,2020-08-28 21:29:58,"Builds on macOS:\n`./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined` no actionable complaints\n`./configure --enable-fuzz --with-sanitizers=fuzzer,integer,undefined` no actionable complaints\n\nRan with Ubuntu 18 again:\n`./configure --enable-fuzz --with-sanitizers=fuzzer,integer`:\n```\n/usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/basic_",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-683155088,683155088,
Crypt-iQ,2020-08-29 05:34:47,ACK 9b825840daf72f20444c2ec13c3aa681df8b594f,https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-683240427,683240427,
practicalswift,2020-08-29 09:49:55,@Crypt-iQ Thanks for reviewing! I've now added relevant `-fsanitize=integer` suppressions (all non-UB). Please re-review :),https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-683266759,683266759,
Crypt-iQ,2020-09-05 14:31:06,ACK f87801d2fc0e27271aa71861979a8ef3e1fe935f,https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-687619171,687619171,
practicalswift,2020-09-12 17:15:10,Ready for merge? :),https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-691518941,691518941,
jonatack,2020-09-12 17:28:38,"Oh, nice -- will try to review this soon.",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-691520799,691520799,
practicalswift,2020-09-17 13:22:48,"Had to rebase after the merge of 15c27c44417ab77a660b53b8574f7eb5261b19f8.\n\n@Crypt-iQ Thanks a lot for reviewing. May I ask you a re-review and hopefully give your third(!) ACK for this change? :)",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-694229491,694229491,
Crypt-iQ,2020-09-20 10:50:45,ACK 2a5c8188209cc6d6654ef3fefb80acbb87c134a1,https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-695772719,695772719,
practicalswift,2020-10-06 19:41:32,"Had to rebase again due to a merge conflict.\n\n@Crypt-iQ Again: thanks a lot for your efforts in reviewing the fuzzing harnesses. May I ask you a re-review and hopefully give your fourth(!) ACK for this change? :)\n\n---\n\n**Fuzzing review beg: If we only had two or three more reviewers (like @Crypt-iQ!) who were willing to review fuzzing harnesses that would make such a huge difference fo",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-704511024,704511024,
Crypt-iQ,2020-12-05 15:44:36,Will review again @practicalswift ,https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-739312411,739312411,
Crypt-iQ,2020-12-14 10:32:15,"ACK 00e48011c3e1235077353ca7d209661de66e9aab\n\nReviewed code and ran locally on macOS 10.15.4 with clang-10.",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-744346434,744346434,
practicalswift,2021-01-16 10:18:54,"Updated to use the excellent `CallOneOf`!\n\nShould be ready for final review :)",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-761539396,761539396,
practicalswift,2021-01-26 10:19:08,"Compared to other fuzzing PRs this PR is relatively cumbersome to keep up to date over time due to the code move from `torcontrol.cpp` to `torcontrol.h` which must be kept in sync. Final review welcome :)\n\nCurrent status:\n\nConcept ACK\n* @laanwj\n* @jonatack\n\nACKs\n* @Crypt-iQ: counting four now stale ACK:s - thanks for being patient! :)",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-767445626,767445626,
practicalswift,2021-01-26 15:13:04,"The first commit which is move-only is best viewed dimmed ðŸ¦“  style: \n\n```\n$ git show --color-moved=dimmed_zebra bb643af8a1bc207935e9ae2c0fe61378ee935bde\n```",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-767609842,767609842,
practicalswift,2021-02-28 17:59:08,"This PR has one stale ACK and three Concept ACKs, and I believe all feedback has been addressed.\n\nReady for merge after re-review?",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-787492888,787492888,
laanwj,2021-03-01 10:59:47,"Sorry, forgot about this a bit. I'll have a look.\n\nLooks like this has a silent merge conflict on current master:\n```\nâ€¦/bitcoin/src/test/fuzz/torcontrol.cpp:38:39: error: use of undeclared identifier 'MakeFuzzingContext'\n    static const auto testing_setup = MakeFuzzingContext<>();\n                                      ^\n1 error generated.\n```",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-787858608,787858608,
practicalswift,2021-03-01 11:18:06,"@laanwj \n\n> Looks like this has a silent merge conflict on current master:\n> \n> ```\n> â€¦/bitcoin/src/test/fuzz/torcontrol.cpp:38:39: error: use of undeclared identifier 'MakeFuzzingContext'\n>     static const auto testing_setup = MakeFuzzingContext<>();\n>                                       ^\n> 1 error generated.\n> ```\n\nOh, thanks for noticing!\n\nNow addressed :)",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-787870454,787870454,
laanwj,2021-03-03 10:39:52,"I want to say this one more time before merging: I dislike moving internal implementation details to the header for testing purposes. It kind of violates encapsulation and makes the headers larger and less usefully self-documenting.\n\nThat said, I do not see any other solution in the immediate context here. A longer-term direction would be to have test-specific headers that expose internal func",https://github.com/bitcoin/bitcoin/pull/19288#issuecomment-789616254,789616254,
Crypt-iQ,2020-07-23 06:24:34,Can't this be replaced by `TorControlConnection tor_control_connection{nullptr};` and then you can get rid of the `DummyTorControlConnection` class?,https://github.com/bitcoin/bitcoin/pull/19288#discussion_r459236650,459236650,src/test/fuzz/torcontrol.cpp
practicalswift,2020-08-14 16:46:42,"We don't want `TorControlConnection::{Connect,Disconnect,Command}` to be called, right? :)  My intention with adding `DummyTorControlConnection` was to make sure `{Connect,Disconnect,Command}` return immediately (and thus be guaranteed to be safe regardless of the state of things).",https://github.com/bitcoin/bitcoin/pull/19288#discussion_r470737648,470737648,src/test/fuzz/torcontrol.cpp
Crypt-iQ,2020-08-14 17:16:14,"Yes I think that's the right approach, I think my coverage confused me again as it showed `DummyTorControlConnection` as unused.",https://github.com/bitcoin/bitcoin/pull/19288#discussion_r470752497,470752497,src/test/fuzz/torcontrol.cpp
Crypt-iQ,2020-08-29 14:57:14,`chain.h` & `test/skiplist_tests.cpp` missing the `implicit-signed-integer-truncation` suppression in the new version. Then CI should pass.,https://github.com/bitcoin/bitcoin/pull/19288#discussion_r479657454,479657454,test/sanitizer_suppressions/ubsan
Crypt-iQ,2020-08-29 18:03:01,"This will hide other unsigned int overflows that occur from different call sites. I think it should eventually be deleted, no?",https://github.com/bitcoin/bitcoin/pull/19288#discussion_r479674484,479674484,test/sanitizer_suppressions/ubsan
practicalswift,2020-09-01 09:36:55,Thanks! Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/19288#discussion_r481004485,481004485,test/sanitizer_suppressions/ubsan
practicalswift,2020-09-01 09:41:00,AFAICT we can't do anything meaningful about these unsigned integer wraparounds in `basic_string.tcc`. I think that suppressing them is fine: unsigned integer wraparound is not UB after all :),https://github.com/bitcoin/bitcoin/pull/19288#discussion_r481006871,481006871,test/sanitizer_suppressions/ubsan
MarcoFalke,2021-01-04 11:01:39,what are the steps to reproduce this?,https://github.com/bitcoin/bitcoin/pull/19288#discussion_r551249689,551249689,test/sanitizer_suppressions/ubsan
practicalswift,2021-01-15 13:23:59,I don't think is needed now that we've updated `FuzzedDataProvider.h` to the most recent version. Suppression removed! :),https://github.com/bitcoin/bitcoin/pull/19288#discussion_r558303306,558303306,test/sanitizer_suppressions/ubsan
MarcoFalke,2021-01-15 13:38:04,nit: CallOneOf?,https://github.com/bitcoin/bitcoin/pull/19288#discussion_r558311229,558311229,src/test/fuzz/torcontrol.cpp
MarcoFalke,2021-01-15 13:39:18,"nit: Are the constants from our source code or from somewhere else? Like https://src-ref.docs.torproject.org/tor/control__cmd_8c_source.html ?\n\nNot sure, but if you want, you can also use `CallOneOf` here:\n\n```suggestion\n        CallOneOf (fuzzed_data_provider,\n        [&] {\n            tor_control_reply.code = 250;\n        } ,\n        [&]{\n            tor_control_reply.code = ",https://github.com/bitcoin/bitcoin/pull/19288#discussion_r558311923,558311923,src/test/fuzz/torcontrol.cpp
Crypt-iQ,2021-01-16 00:25:48,"`test_runner.py` on macOS, clang-11, `--with-sanitizers=fuzzer,undefined,integer`, commit 6d81d7aa87a15edd87175c33d1fd4a2accb3549d:\n```\ntest/fuzz/FuzzedDataProvider.h:211:49: runtime error: implicit conversion from type 'int' of value -2147483648 (32-bit, signed) to type 'unsigned long long' changed the value to 18446744071562067968 (64-bit, unsigned)\nSUMMARY: UndefinedBehaviorSanitizer: und",https://github.com/bitcoin/bitcoin/pull/19288#discussion_r558707642,558707642,test/sanitizer_suppressions/ubsan
practicalswift,2021-01-16 10:15:17,Good point! Fixed!,https://github.com/bitcoin/bitcoin/pull/19288#discussion_r558835790,558835790,src/test/fuzz/torcontrol.cpp
practicalswift,2021-01-16 10:17:54,"Good point. Now using `CallOneOf`.\n\n`250` and `510` are from our source:\n\n```sh\n$ git grep reply.code\nsrc/test/fuzz/torcontrol.cpp:                tor_control_reply.code = 250;\nsrc/test/fuzz/torcontrol.cpp:                tor_control_reply.code = 510;\nsrc/test/fuzz/torcontrol.cpp:                tor_control_reply.code = fuzzed_data_provider.ConsumeIntegral<int>();\nsrc/torcontrol.",https://github.com/bitcoin/bitcoin/pull/19288#discussion_r558836126,558836126,src/test/fuzz/torcontrol.cpp
