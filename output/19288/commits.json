[
  {
    "sha": "64219c01dcb0aec6ca26170c94223bd7a29dad19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDIxOWMwMWRjYjBhZWM2Y2EyNjE3MGM5NDIyM2JkN2EyOWRhZDE5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-10-06T19:01:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-02T12:21:32Z"
      },
      "message": "torcontrol: Move TorControlReply, TorControlConnection and TorController to improve testability",
      "tree": {
        "sha": "0cdf01428401e5e8e0ebde23823d8cbec6062c47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cdf01428401e5e8e0ebde23823d8cbec6062c47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64219c01dcb0aec6ca26170c94223bd7a29dad19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64219c01dcb0aec6ca26170c94223bd7a29dad19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64219c01dcb0aec6ca26170c94223bd7a29dad19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64219c01dcb0aec6ca26170c94223bd7a29dad19/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f41df1ead4b6a83a51fc41966b111c8459c313"
      }
    ],
    "stats": {
      "total": 252,
      "additions": 132,
      "deletions": 120
    },
    "files": [
      {
        "sha": "6666e49a2b56232d7535ba1cb2c1b46fd7505817",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 120,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64219c01dcb0aec6ca26170c94223bd7a29dad19/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64219c01dcb0aec6ca26170c94223bd7a29dad19/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=64219c01dcb0aec6ca26170c94223bd7a29dad19",
        "patch": "@@ -56,77 +56,6 @@ static const int MAX_LINE_LENGTH = 100000;\n \n /****** Low-level TorControlConnection ********/\n \n-/** Reply from Tor, can be single or multi-line */\n-class TorControlReply\n-{\n-public:\n-    TorControlReply() { Clear(); }\n-\n-    int code;\n-    std::vector<std::string> lines;\n-\n-    void Clear()\n-    {\n-        code = 0;\n-        lines.clear();\n-    }\n-};\n-\n-/** Low-level handling for Tor control connection.\n- * Speaks the SMTP-like protocol as defined in torspec/control-spec.txt\n- */\n-class TorControlConnection\n-{\n-public:\n-    typedef std::function<void(TorControlConnection&)> ConnectionCB;\n-    typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;\n-\n-    /** Create a new TorControlConnection.\n-     */\n-    explicit TorControlConnection(struct event_base *base);\n-    ~TorControlConnection();\n-\n-    /**\n-     * Connect to a Tor control port.\n-     * tor_control_center is address of the form host:port.\n-     * connected is the handler that is called when connection is successfully established.\n-     * disconnected is a handler that is called when the connection is broken.\n-     * Return true on success.\n-     */\n-    bool Connect(const std::string& tor_control_center, const ConnectionCB& connected, const ConnectionCB& disconnected);\n-\n-    /**\n-     * Disconnect from Tor control port.\n-     */\n-    void Disconnect();\n-\n-    /** Send a command, register a handler for the reply.\n-     * A trailing CRLF is automatically added.\n-     * Return true on success.\n-     */\n-    bool Command(const std::string &cmd, const ReplyHandlerCB& reply_handler);\n-\n-    /** Response handlers for async replies */\n-    boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;\n-private:\n-    /** Callback when ready for use */\n-    std::function<void(TorControlConnection&)> connected;\n-    /** Callback when connection lost */\n-    std::function<void(TorControlConnection&)> disconnected;\n-    /** Libevent event base */\n-    struct event_base *base;\n-    /** Connection to control socket */\n-    struct bufferevent *b_conn;\n-    /** Message being received */\n-    TorControlReply message;\n-    /** Response handlers */\n-    std::deque<ReplyHandlerCB> reply_handlers;\n-\n-    /** Libevent handlers: internal */\n-    static void readcb(struct bufferevent *bev, void *ctx);\n-    static void eventcb(struct bufferevent *bev, short what, void *ctx);\n-};\n-\n TorControlConnection::TorControlConnection(struct event_base *_base):\n     base(_base), b_conn(nullptr)\n {\n@@ -363,55 +292,6 @@ std::map<std::string,std::string> ParseTorReplyMapping(const std::string &s)\n     return mapping;\n }\n \n-/****** Bitcoin specific TorController implementation ********/\n-\n-/** Controller that connects to Tor control socket, authenticate, then create\n- * and maintain an ephemeral onion service.\n- */\n-class TorController\n-{\n-public:\n-    TorController(struct event_base* base, const std::string& tor_control_center, const CService& target);\n-    ~TorController();\n-\n-    /** Get name of file to store private key in */\n-    fs::path GetPrivateKeyFile();\n-\n-    /** Reconnect, after getting disconnected */\n-    void Reconnect();\n-private:\n-    struct event_base* base;\n-    const std::string m_tor_control_center;\n-    TorControlConnection conn;\n-    std::string private_key;\n-    std::string service_id;\n-    bool reconnect;\n-    struct event *reconnect_ev;\n-    float reconnect_timeout;\n-    CService service;\n-    const CService m_target;\n-    /** Cookie for SAFECOOKIE auth */\n-    std::vector<uint8_t> cookie;\n-    /** ClientNonce for SAFECOOKIE auth */\n-    std::vector<uint8_t> clientNonce;\n-\n-    /** Callback for ADD_ONION result */\n-    void add_onion_cb(TorControlConnection& conn, const TorControlReply& reply);\n-    /** Callback for AUTHENTICATE result */\n-    void auth_cb(TorControlConnection& conn, const TorControlReply& reply);\n-    /** Callback for AUTHCHALLENGE result */\n-    void authchallenge_cb(TorControlConnection& conn, const TorControlReply& reply);\n-    /** Callback for PROTOCOLINFO result */\n-    void protocolinfo_cb(TorControlConnection& conn, const TorControlReply& reply);\n-    /** Callback after successful connection */\n-    void connected_cb(TorControlConnection& conn);\n-    /** Callback after connection lost or failed connection attempt */\n-    void disconnected_cb(TorControlConnection& conn);\n-\n-    /** Callback for reconnect timer */\n-    static void reconnect_cb(evutil_socket_t fd, short what, void *arg);\n-};\n-\n TorController::TorController(struct event_base* _base, const std::string& tor_control_center, const CService& target):\n     base(_base),\n     m_tor_control_center(tor_control_center), conn(base), reconnect(true), reconnect_ev(0),"
      },
      {
        "sha": "ecf26d89c1bcdd1841fbfc8f4a660d6ac199f940",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64219c01dcb0aec6ca26170c94223bd7a29dad19/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64219c01dcb0aec6ca26170c94223bd7a29dad19/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=64219c01dcb0aec6ca26170c94223bd7a29dad19",
        "patch": "@@ -8,7 +8,19 @@\n #ifndef BITCOIN_TORCONTROL_H\n #define BITCOIN_TORCONTROL_H\n \n+#include <fs.h>\n+#include <netaddress.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+#include <event2/bufferevent.h>\n+#include <event2/event.h>\n+\n+#include <cstdlib>\n+#include <deque>\n+#include <functional>\n #include <string>\n+#include <vector>\n \n class CService;\n \n@@ -21,4 +33,124 @@ void StopTorControl();\n \n CService DefaultOnionServiceTarget();\n \n+/** Reply from Tor, can be single or multi-line */\n+class TorControlReply\n+{\n+public:\n+    TorControlReply() { Clear(); }\n+\n+    int code;\n+    std::vector<std::string> lines;\n+\n+    void Clear()\n+    {\n+        code = 0;\n+        lines.clear();\n+    }\n+};\n+\n+/** Low-level handling for Tor control connection.\n+ * Speaks the SMTP-like protocol as defined in torspec/control-spec.txt\n+ */\n+class TorControlConnection\n+{\n+public:\n+    typedef std::function<void(TorControlConnection&)> ConnectionCB;\n+    typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;\n+\n+    /** Create a new TorControlConnection.\n+     */\n+    explicit TorControlConnection(struct event_base *base);\n+    ~TorControlConnection();\n+\n+    /**\n+     * Connect to a Tor control port.\n+     * tor_control_center is address of the form host:port.\n+     * connected is the handler that is called when connection is successfully established.\n+     * disconnected is a handler that is called when the connection is broken.\n+     * Return true on success.\n+     */\n+    bool Connect(const std::string& tor_control_center, const ConnectionCB& connected, const ConnectionCB& disconnected);\n+\n+    /**\n+     * Disconnect from Tor control port.\n+     */\n+    void Disconnect();\n+\n+    /** Send a command, register a handler for the reply.\n+     * A trailing CRLF is automatically added.\n+     * Return true on success.\n+     */\n+    bool Command(const std::string &cmd, const ReplyHandlerCB& reply_handler);\n+\n+    /** Response handlers for async replies */\n+    boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;\n+private:\n+    /** Callback when ready for use */\n+    std::function<void(TorControlConnection&)> connected;\n+    /** Callback when connection lost */\n+    std::function<void(TorControlConnection&)> disconnected;\n+    /** Libevent event base */\n+    struct event_base *base;\n+    /** Connection to control socket */\n+    struct bufferevent *b_conn;\n+    /** Message being received */\n+    TorControlReply message;\n+    /** Response handlers */\n+    std::deque<ReplyHandlerCB> reply_handlers;\n+\n+    /** Libevent handlers: internal */\n+    static void readcb(struct bufferevent *bev, void *ctx);\n+    static void eventcb(struct bufferevent *bev, short what, void *ctx);\n+};\n+\n+/****** Bitcoin specific TorController implementation ********/\n+\n+/** Controller that connects to Tor control socket, authenticate, then create\n+ * and maintain an ephemeral onion service.\n+ */\n+class TorController\n+{\n+public:\n+    TorController(struct event_base* base, const std::string& tor_control_center, const CService& target);\n+    ~TorController();\n+\n+    /** Get name of file to store private key in */\n+    fs::path GetPrivateKeyFile();\n+\n+    /** Reconnect, after getting disconnected */\n+    void Reconnect();\n+private:\n+    struct event_base* base;\n+    const std::string m_tor_control_center;\n+    TorControlConnection conn;\n+    std::string private_key;\n+    std::string service_id;\n+    bool reconnect;\n+    struct event *reconnect_ev;\n+    float reconnect_timeout;\n+    CService service;\n+    const CService m_target;\n+    /** Cookie for SAFECOOKIE auth */\n+    std::vector<uint8_t> cookie;\n+    /** ClientNonce for SAFECOOKIE auth */\n+    std::vector<uint8_t> clientNonce;\n+\n+    /** Callback for ADD_ONION result */\n+    void add_onion_cb(TorControlConnection& conn, const TorControlReply& reply);\n+    /** Callback for AUTHENTICATE result */\n+    void auth_cb(TorControlConnection& conn, const TorControlReply& reply);\n+    /** Callback for AUTHCHALLENGE result */\n+    void authchallenge_cb(TorControlConnection& conn, const TorControlReply& reply);\n+    /** Callback for PROTOCOLINFO result */\n+    void protocolinfo_cb(TorControlConnection& conn, const TorControlReply& reply);\n+    /** Callback after successful connection */\n+    void connected_cb(TorControlConnection& conn);\n+    /** Callback after connection lost or failed connection attempt */\n+    void disconnected_cb(TorControlConnection& conn);\n+\n+    /** Callback for reconnect timer */\n+    static void reconnect_cb(evutil_socket_t fd, short what, void *arg);\n+};\n+\n #endif /* BITCOIN_TORCONTROL_H */"
      }
    ]
  },
  {
    "sha": "10d4477dae663631411a1bd5a92e4fa941d3a96c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGQ0NDc3ZGFlNjYzNjMxNDExYTFiZDVhOTJlNGZhOTQxZDNhOTZj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-15T21:05:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-02T12:21:32Z"
      },
      "message": "tests: Add fuzzing harness for TorController",
      "tree": {
        "sha": "f80c5ea181c79d4c7215316a170511936f390550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f80c5ea181c79d4c7215316a170511936f390550"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10d4477dae663631411a1bd5a92e4fa941d3a96c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d4477dae663631411a1bd5a92e4fa941d3a96c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10d4477dae663631411a1bd5a92e4fa941d3a96c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d4477dae663631411a1bd5a92e4fa941d3a96c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64219c01dcb0aec6ca26170c94223bd7a29dad19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64219c01dcb0aec6ca26170c94223bd7a29dad19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64219c01dcb0aec6ca26170c94223bd7a29dad19"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 85,
      "deletions": 1
    },
    "files": [
      {
        "sha": "03b9e50f76c23384a9a04479b0e2cf9458f3ade5",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10d4477dae663631411a1bd5a92e4fa941d3a96c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10d4477dae663631411a1bd5a92e4fa941d3a96c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=10d4477dae663631411a1bd5a92e4fa941d3a96c",
        "patch": "@@ -291,6 +291,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/strprintf.cpp \\\n  test/fuzz/system.cpp \\\n  test/fuzz/timedata.cpp \\\n+ test/fuzz/torcontrol.cpp \\\n  test/fuzz/transaction.cpp \\\n  test/fuzz/tx_in.cpp \\\n  test/fuzz/tx_out.cpp \\"
      },
      {
        "sha": "b7a42ea7f47faaff5f78bb9fd415588277fc91ee",
        "filename": "src/test/fuzz/torcontrol.cpp",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10d4477dae663631411a1bd5a92e4fa941d3a96c/src/test/fuzz/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10d4477dae663631411a1bd5a92e4fa941d3a96c/src/test/fuzz/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/torcontrol.cpp?ref=10d4477dae663631411a1bd5a92e4fa941d3a96c",
        "patch": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <torcontrol.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+class DummyTorControlConnection : public TorControlConnection\n+{\n+public:\n+    DummyTorControlConnection() : TorControlConnection{nullptr}\n+    {\n+    }\n+\n+    bool Connect(const std::string&, const ConnectionCB&, const ConnectionCB&)\n+    {\n+        return true;\n+    }\n+\n+    void Disconnect()\n+    {\n+    }\n+\n+    bool Command(const std::string&, const ReplyHandlerCB&)\n+    {\n+        return true;\n+    }\n+};\n+\n+void initialize_torcontrol()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>();\n+}\n+\n+FUZZ_TARGET_INIT(torcontrol, initialize_torcontrol)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    TorController tor_controller;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        TorControlReply tor_control_reply;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                tor_control_reply.code = 250;\n+            },\n+            [&] {\n+                tor_control_reply.code = 510;\n+            },\n+            [&] {\n+                tor_control_reply.code = fuzzed_data_provider.ConsumeIntegral<int>();\n+            });\n+        tor_control_reply.lines = ConsumeRandomLengthStringVector(fuzzed_data_provider);\n+        if (tor_control_reply.lines.empty()) {\n+            break;\n+        }\n+        DummyTorControlConnection dummy_tor_control_connection;\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                tor_controller.add_onion_cb(dummy_tor_control_connection, tor_control_reply);\n+            },\n+            [&] {\n+                tor_controller.auth_cb(dummy_tor_control_connection, tor_control_reply);\n+            },\n+            [&] {\n+                tor_controller.authchallenge_cb(dummy_tor_control_connection, tor_control_reply);\n+            },\n+            [&] {\n+                tor_controller.protocolinfo_cb(dummy_tor_control_connection, tor_control_reply);\n+            });\n+    }\n+}"
      },
      {
        "sha": "7258f27cb69cefc112db67dd0dff8eb082157f29",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10d4477dae663631411a1bd5a92e4fa941d3a96c/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10d4477dae663631411a1bd5a92e4fa941d3a96c/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=10d4477dae663631411a1bd5a92e4fa941d3a96c",
        "patch": "@@ -113,6 +113,9 @@ class TorController\n {\n public:\n     TorController(struct event_base* base, const std::string& tor_control_center, const CService& target);\n+    TorController() : conn{nullptr} {\n+        // Used for testing only.\n+    }\n     ~TorController();\n \n     /** Get name of file to store private key in */\n@@ -127,7 +130,7 @@ class TorController\n     std::string private_key;\n     std::string service_id;\n     bool reconnect;\n-    struct event *reconnect_ev;\n+    struct event *reconnect_ev = nullptr;\n     float reconnect_timeout;\n     CService service;\n     const CService m_target;\n@@ -136,6 +139,7 @@ class TorController\n     /** ClientNonce for SAFECOOKIE auth */\n     std::vector<uint8_t> clientNonce;\n \n+public:\n     /** Callback for ADD_ONION result */\n     void add_onion_cb(TorControlConnection& conn, const TorControlReply& reply);\n     /** Callback for AUTHENTICATE result */"
      }
    ]
  }
]