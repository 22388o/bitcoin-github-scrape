[
  {
    "sha": "fa0330024087235d1dab34253355458656d88f67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTAzMzAwMjQwODcyMzVkMWRhYjM0MjUzMzU1NDU4NjU2ZDg4ZjY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-03-25T15:21:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-03-26T11:19:10Z"
      },
      "message": "[qa] Fundraw: Use named args to limit scope of names",
      "tree": {
        "sha": "cc9049b1fb68e5d763f2b2bc3e94943852cd8c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc9049b1fb68e5d763f2b2bc3e94943852cd8c7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0330024087235d1dab34253355458656d88f67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0330024087235d1dab34253355458656d88f67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0330024087235d1dab34253355458656d88f67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0330024087235d1dab34253355458656d88f67/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "803e6a35037e7371f767585fec36ba17bdd36f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/803e6a35037e7371f767585fec36ba17bdd36f4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/803e6a35037e7371f767585fec36ba17bdd36f4a"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 82,
      "deletions": 82
    },
    "files": [
      {
        "sha": "eee1a068f82b7d8b85bb86f28a7085bfbf0c1107",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 82,
        "deletions": 82,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0330024087235d1dab34253355458656d88f67/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0330024087235d1dab34253355458656d88f67/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=fa0330024087235d1dab34253355458656d88f67",
        "patch": "@@ -70,9 +70,9 @@ def run_test(self):\n         ###############\n         # simple test #\n         ###############\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 1.0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n@@ -82,9 +82,9 @@ def run_test(self):\n         ##############################\n         # simple test with two coins #\n         ##############################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.2 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 2.2})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n@@ -95,9 +95,9 @@ def run_test(self):\n         ##############################\n         # simple test with two coins #\n         ##############################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.6 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 2.6})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n@@ -110,9 +110,9 @@ def run_test(self):\n         ################################\n         # simple test with two outputs #\n         ################################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.6, self.nodes[1].getnewaddress() : 2.5 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 2.6, self.nodes[1].getnewaddress(): 2.5})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n@@ -131,9 +131,9 @@ def run_test(self):\n         #########################################################################\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}],\n+            outputs={self.nodes[0].getnewaddress(): 1.0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -152,9 +152,9 @@ def run_test(self):\n         #####################################################################\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}],\n+            outputs={self.nodes[0].getnewaddress(): Decimal(5.0) - fee - feeTolerance})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -174,9 +174,9 @@ def run_test(self):\n         ####################################################\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}],\n+            outputs={self.nodes[0].getnewaddress(): Decimal(4.0)})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -187,9 +187,9 @@ def run_test(self):\n         ############################################################\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}],\n+            outputs={self.nodes[0].getnewaddress(): Decimal(4.0)})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -200,9 +200,9 @@ def run_test(self):\n         ############################################################\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}],\n+            outputs={self.nodes[0].getnewaddress(): Decimal(4.0)})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -219,9 +219,10 @@ def run_test(self):\n         #########################################################################\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        outputs = {self.nodes[0].getnewaddress(): 1.0}\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}],\n+            outputs=outputs)\n \n         # 4-byte version + 1-byte vin count + 36-byte prevout then script_len\n         rawtx = rawtx[:82] + \"0100\" + rawtx[84:]\n@@ -255,9 +256,9 @@ def run_test(self):\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n         utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : 6.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        inputs_check = [{'txid': utx['txid'], 'vout': utx['vout']}, {'txid': utx2['txid'], 'vout': utx2['vout']}]\n+        outputs = {self.nodes[0].getnewaddress(): 6.0}\n+        rawtx = self.nodes[2].createrawtransaction(inputs=inputs_check, outputs=outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -276,7 +277,7 @@ def run_test(self):\n \n         matchingIns = 0\n         for vinOut in dec_tx['vin']:\n-            for vinIn in inputs:\n+            for vinIn in inputs_check:\n                 if vinIn['txid'] == vinOut['txid']:\n                     matchingIns+=1\n \n@@ -288,9 +289,10 @@ def run_test(self):\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n         utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n \n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        outputs = {self.nodes[0].getnewaddress(): 6.0, self.nodes[0].getnewaddress(): 1.0}\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': utx['txid'], 'vout': utx['vout']}, {'txid': utx2['txid'], 'vout': utx2['vout']}],\n+            outputs=outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n@@ -311,18 +313,18 @@ def run_test(self):\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n         listunspent = self.nodes[2].listunspent()\n-        inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n-        outputs = { self.nodes[0].getnewaddress() : 1.0}\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[2].createrawtransaction(\n+            inputs=[{'txid': \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout': 0}],  #invalid vin!\n+            outputs={self.nodes[0].getnewaddress(): 1.0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n-        inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[0].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[1].getnewaddress(): 1.1})\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n@@ -336,9 +338,8 @@ def run_test(self):\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction with multiple outputs\n-        inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1,self.nodes[1].getnewaddress():1.2,self.nodes[1].getnewaddress():0.1,self.nodes[1].getnewaddress():1.3,self.nodes[1].getnewaddress():0.2,self.nodes[1].getnewaddress():0.3}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        outputs = {self.nodes[1].getnewaddress(): 1.1, self.nodes[1].getnewaddress(): 1.2, self.nodes[1].getnewaddress(): 0.1, self.nodes[1].getnewaddress(): 1.3, self.nodes[1].getnewaddress(): 0.2, self.nodes[1].getnewaddress(): 0.3}\n+        rawTx = self.nodes[0].createrawtransaction(inputs=[], outputs=outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendmany(\"\", outputs)\n@@ -362,9 +363,9 @@ def run_test(self):\n \n         mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n \n-        inputs = []\n-        outputs = {mSigObj:1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[0].createrawtransaction(\n+            inputs=[],\n+            outputs={mSigObj: 1.1})\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n@@ -395,9 +396,9 @@ def run_test(self):\n \n         mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])\n \n-        inputs = []\n-        outputs = {mSigObj:1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[0].createrawtransaction(\n+            inputs=[],\n+            outputs={mSigObj: 1.1})\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n@@ -430,9 +431,9 @@ def run_test(self):\n         self.sync_all()\n \n         oldBalance = self.nodes[1].getbalance()\n-        inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[2].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[1].getnewaddress(): 1.1})\n         fundedTx = self.nodes[2].fundrawtransaction(rawTx)\n \n         signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n@@ -467,9 +468,9 @@ def run_test(self):\n \n         # drain the keypool\n         self.nodes[1].getnewaddress()\n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[1].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 1.1})\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n         assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawTx)\n@@ -482,9 +483,9 @@ def run_test(self):\n \n         oldBalance = self.nodes[0].getbalance()\n \n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[1].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 1.1})\n         fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n \n         #now we need to unlock\n@@ -514,9 +515,8 @@ def run_test(self):\n         self.sync_all()\n \n         #fund a tx with ~20 small inputs\n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        outputs = {self.nodes[0].getnewaddress(): 0.15, self.nodes[0].getnewaddress(): 0.04}\n+        rawTx = self.nodes[1].createrawtransaction(inputs=[], outputs=outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n@@ -546,9 +546,9 @@ def run_test(self):\n         #fund a tx with ~20 small inputs\n         oldBalance = self.nodes[0].getbalance()\n \n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        rawTx = self.nodes[1].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[0].getnewaddress(): 0.15, self.nodes[0].getnewaddress(): 0.04})\n         fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n         fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n@@ -578,9 +578,9 @@ def run_test(self):\n         # test a fundrawtransaction using only watchonly #\n         ##################################################\n \n-        inputs = []\n-        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[3].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[2].getnewaddress(): watchonly_amount / 2})\n \n         result = self.nodes[3].fundrawtransaction(rawtx, {'includeWatching': True })\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n@@ -594,9 +594,9 @@ def run_test(self):\n         # test fundrawtransaction using the entirety of watched funds #\n         ###############################################################\n \n-        inputs = []\n-        outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[3].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[2].getnewaddress(): watchonly_amount})\n \n         # Backward compatibility test (2nd param is includeWatching)\n         result = self.nodes[3].fundrawtransaction(rawtx, True)\n@@ -623,9 +623,9 @@ def run_test(self):\n         # Make sure there is exactly one input so coin selection can't skew the result\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n \n-        inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[3].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[3].getnewaddress(): 1})\n         result = self.nodes[3].fundrawtransaction(rawtx) # uses min_relay_tx_fee (set by settxfee)\n         result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee})\n         result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10*min_relay_tx_fee})\n@@ -666,9 +666,9 @@ def run_test(self):\n         # Make sure there is exactly one input so coin selection can't skew the result\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n \n-        inputs = []\n-        outputs = {self.nodes[2].getnewaddress(): 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[3].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[2].getnewaddress(): 1})\n \n         result = [self.nodes[3].fundrawtransaction(rawtx), # uses min_relay_tx_fee (set by settxfee)\n                   self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": []}), # empty subtraction list\n@@ -689,9 +689,9 @@ def run_test(self):\n         assert_equal(output[3], output[4] + result[4]['fee'])\n         assert_equal(change[3] + result[3]['fee'], change[4])\n \n-        inputs = []\n-        outputs = {self.nodes[2].getnewaddress(): value for value in (1.0, 1.1, 1.2, 1.3)}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[3].createrawtransaction(\n+            inputs=[],\n+            outputs={self.nodes[2].getnewaddress(): value for value in (1.0, 1.1, 1.2, 1.3)})\n \n         result = [self.nodes[3].fundrawtransaction(rawtx),\n                   # split the fee between outputs 0, 2, and 3, but not output 1"
      }
    ]
  }
]