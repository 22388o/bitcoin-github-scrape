LarryRuane,2020-08-10 03:50:05,This PR was suggested by @hebasto https://github.com/bitcoin/bitcoin/pull/16981#issuecomment-669658597 (thank you!),https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671150925,671150925,
hebasto,2020-08-10 11:10:25,"@LarryRuane \n> ... improving its CPU runtime by a factor of about 25 in typical use.\n\nHow was it measured?\n\n",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671293857,671293857,
laanwj,2020-08-10 11:38:51,"Any idea *why* this is so much faster? As far as I know, there is no faster algorithm to look for the first occurrence of a single byte in a memory array than a linear iteration over it. I'd expect `std::find` of a byte to simply unroll into a loop.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671305132,671305132,
LarryRuane,2020-08-10 14:38:55,"> How was it measured?\n\nI ran:\n```\ntime src/test/test_bitcoin --run_test=streams_tests/streams_findbyte\n```\nwith master (1m20s) and with master + PR (3s).\n\n> Any idea _why_ this is so much faster? \n\nI think you're correct that there's no faster way than a loop with runtime proportional to the number of bytes to scan, but I assume `std::find()` on a char vector is highly optimiz",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671395708,671395708,
LarryRuane,2020-08-10 14:46:52,"Force-push a small fix to the test, so it doesn't take 3 seconds to run.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671400344,671400344,
laanwj,2020-08-10 16:43:57,"> but I assume std::find() on a char vector is highly optimized, probably using memchr() or memcmp(), which are implemented in assembly language\n\nThat's true, it's possible to optimize that with assembly language (definitely with specific instruction sets).\n\nit still surprises me because you'd expect the I/O, to read the data from disk, to dominate greatly in the block importing. Not looki",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671464582,671464582,
LarryRuane,2020-08-10 20:08:50,"> it still surprises me because you'd expect the I/O, to read the data from disk, to dominate greatly in the block importing.\n\n`FindByte()` only reads from disk by calling `Fill()` (when the buffer is empty), which is rare. In this test, `Fill()` gets called only once, the first time `FindByte()` runs, because I wanted to isolate the modified part of the code.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671562959,671562959,
sipa,2020-08-11 00:42:37,"@gmaxwell pointed out to me why this is so much faster: it's not that std::find is amazing, but that the original code (which I wrote in 2012, it seems!) is doing a modulus operation for every character (which is often orders of magnitude slower than the byte comparison or addition/subtraction).\n\nThinking about this a bit more high level: the end goal is just to scan quickly for the 4-byte net",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-671659440,671659440,
LarryRuane,2020-08-12 14:10:48,"Here's a version that's very close in implementation to master that eliminates the `%` operation on every character:\n```\n    void FindByte(char ch) {\n        size_t start = nReadPos % vchBuf.size();\n        while (true) {\n            if (nReadPos == nSrcPos)\n                Fill();\n            if (vchBuf[start] == ch)\n                break;\n            nReadPos++;\n            s",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-672894853,672894853,
LarryRuane,2020-08-13 05:35:58,"I just added a new commit (25413ab, can squash later) to implement @sipa's suggestion to add a method to `CBufferedFile` to find a sequence of bytes, rather than just one byte, as `FindByte()` does. This simplifies `LoadExternalBlockFile()`; the overall code base isn't simpler, but it encapsulates complexity nicely within the `CBufferedFile` class. \n\nIt didn't work out to use `std::search()` b",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-673270669,673270669,
adamjonas,2020-08-14 00:39:41,"Looks like one of the sanitizers is finding an implicit-integer-sign-change problem in the latest update:\n\n```\nï¿½[0;34m node0 stderr streams.h:857:22: runtime error: implicit conversion from type 'unsigned char' of value 250 (8-bit, unsigned) to type 'char' changed the value to -6 (8-bit, signed)\n    #0 0x55f6d4cc6285 in CBufferedFile::Search(unsigned char const*, unsigned long) /tmp/cirrus",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-673777171,673777171,
LarryRuane,2020-08-14 06:05:58,"Thanks, @adamjonas, force-pushed a fix for that signed-unsigned CI failure, added another unit test, some improvements to `Search()`, some `clang-format-diff.py` cleanups.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-673904127,673904127,
DrahtBot,2020-08-20 20:44:32,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23438](https://github.com/bitcoin/bitcoin/pull/23438) (refactor: Use spans of std::byte in serialize by MarcoFalke)\n\nI",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-677894346,677894346,
laanwj,2020-11-20 04:08:34,"Code review ACK 8f2e8c27bb9bb3ebb9f094129ce4a6019c46cfc0, this looks like a better abstraction, and it's an improvement not to do a modulus for every byte.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-730832077,730832077,
LarryRuane,2020-12-04 21:33:10,"Force-pushed to rationalize the commits, so I think it's in a good state for merging. I reordered the commit that adds the benchmark test, b576994bea620c7d065dd558c93222391151c9ff, to be first, so it's easy for reviewers to checkout that commit and run the new benchmark test without the improvements:\n```\nsrc/bench/bench_bitcoin -filter=FindByte\n```\nI re-ran those tests just now, and on my ",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739032586,739032586,
sipa,2020-12-04 22:33:26,"Code review ACK 566c2e2eec1e84af5143f1554613a89192e29433. I think it'd be good to move the refactoring to FindByte in the last commit to a separate commit.\n",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739059080,739059080,
LarryRuane,2020-12-05 01:14:18,"Force-pushed to implement latest [review suggestion](https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739059080), changes are more cleanly separated among the commits (no code changes overall), thanks @sipa.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739098789,739098789,
practicalswift,2020-12-05 16:55:59,"@LarryRuane \n\nThanks for providing promising micro benchmarks. AFAICT `FindByte` is only used when doing `-reindex` and `-loadblock`. Do you have any macro numbers too where the gains from switching to this improved version are measured in terms of the overall speed-up of said operations?\n\nAnother thing: when fuzzing `CBufferedFile` I noticed that calling `FindByte` after a failed `SetPos`",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739320594,739320594,
hebasto,2020-12-05 17:01:15,"> Another thing: when fuzzing `CBufferedFile` I noticed that calling `FindByte` after a failed `SetPos` call may result in an infinite loop. Does the new code have that gotcha too? If not we can drop the `setpos_fail` logic in `src/test/fuzz/buffered_file.cpp` :)\n\nAlso some failed tests:\n- https://cirrus-ci.com/task/4540479469518848\n- https://bitcoinbuilds.org/?job=34de38c2-b334-4dde-b067-",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739321236,739321236,
LarryRuane,2020-12-07 06:30:54,"@practicalswift\n> Do you have any macro numbers too where the gains from switching to this improved version are measured in terms of the overall speed-up of [`-reindex` and `-loadblock`]?\n\nI don't think there will be any measurable improvement in the sunny-day case, because the byte being searched for is the very first byte at the stream pointer. So no looping is needed (and this PR only imp",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-739700330,739700330,
LarryRuane,2020-12-07 17:51:07,"Force-pushed the latest review suggestions:\n- remove unneeded `protected:` tag\n- remove unneeded `setpos_fail` from fuzz test\n- add fuzz test for new `CBufferedFile::Search()` method\n- simplify checking for expected exception in unit test (use `BOOST_CHECK_EXCEPTION`)\n\n@hebasto \n> Also some failed tests\n\nI could not figure out those failures; I don't see how they have any relatio",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-740076745,740076745,
LarryRuane,2020-12-10 02:33:48,"@hebasto, thank you for your careful review! I force-pushed your suggestions except for moving `nReadPos % vchBuf.size();` inside the loop. That does reduce the amount of code slightly, but the benchmark test showed that the time per operation consistently increased from 55ns to 67ns. That's still very good (much better than without this PR), but as long as we're changing this code, we may as well",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-742195617,742195617,
hebasto,2020-12-10 08:04:12,"> It will be interesting to see if now the fuzzing passes. I don't understand how you determined (from the [link](https://cirrus-ci.com/build/5192315515961344) you gave) that the problem is in `load_external_block_file`.\n\nJob is timed out and the `load_external_block_file` is not listed in the log.",https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-742348046,742348046,
sipa,2021-06-06 18:56:38,Rebase to get new CI?,https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-855445200,855445200,
LarryRuane,2021-06-08 20:56:24,Rebased.,https://github.com/bitcoin/bitcoin/pull/19690#issuecomment-857137145,857137145,
promag,2020-08-10 08:09:41,"nit, join with above line.",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r467746632,467746632,src/streams.h
glozow,2020-08-10 19:19:00,"I don't fully understand how the performance increase is so significant, but why not a bench if you're worried about burdening the unit tests? I [tried](https://github.com/gzhao408/bitcoin/blob/c3f7075f538cca89f44923d9489403581650edc8/src/bench/streams_findbyte.cpp) to do this but I must be doing something wrong because I can't seem to reproduce the speedup. ð ",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r468123489,468123489,src/test/streams_tests.cpp
sipa,2020-08-10 20:12:43,"The performance impact may be very compiler/architecture/stdlib dependent. I'm kind of surprised std::find has optimizations beyond the naive loop implementation in the first place on some platforms, so I certainly wouldn't be surprised if others don't have it.",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r468154617,468154617,src/test/streams_tests.cpp
LarryRuane,2020-08-10 21:39:25,"@gzhao408, thank you, I wasn't aware of `bench`. I suspect the iteration count, 100, is far too low and the difference is swamped by the noise. I increased the iteration count to 10m (`1e7`) and it showed the expected difference, master: 1,659.30 ns/op, PR: 52.66 ns/op (ratio is about 31).\n\nI just force-pushed ([diff](https://github.com/bitcoin/bitcoin/compare/a31aa3255499ba8878ba98e4ac5a22a40",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r468201206,468201206,src/test/streams_tests.cpp
elichai,2020-08-30 10:09:09,"Could we maybe use something like `memfd_create(2)` for the benchmark, to decrease I/O noise?\nAnyone knows if there is a windows equivalent or a higher abstraction in boost::filesystem?\n",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r479749877,479749877,src/bench/streams_findbyte.cpp
elichai,2020-08-30 10:12:09,`fmemopen(3)` also looks interesting,https://github.com/bitcoin/bitcoin/pull/19690#discussion_r479750181,479750181,src/bench/streams_findbyte.cpp
elichai,2020-08-30 10:24:53,Maybe this can give us that? https://www.boost.org/doc/libs/1_72_0/libs/iostreams/doc/classes/mapped_file.html,https://github.com/bitcoin/bitcoin/pull/19690#discussion_r479751366,479751366,src/bench/streams_findbyte.cpp
LarryRuane,2020-08-31 15:28:02,"Thanks for the suggestions, but I don't think this matters, because the file IO (read) occurs only on the very first benchmark loop iteration; after that, the data is in memory and there is no IO at all. Each iteration repositions the stream pointer to zero (`bf.SetPos(0)`) and then searches forward for the value 1 (`bf.FindByte(1)`), which is 200 bytes away. But after the first iteration, all of ",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r480206669,480206669,src/bench/streams_findbyte.cpp
hebasto,2020-12-05 14:28:07,"b576994bea620c7d065dd558c93222391151c9ff, nit: Add EOL\n![Screenshot from 2020-12-05 16-27-26](https://user-images.githubusercontent.com/32963518/101245636-d490ce00-3716-11eb-87e3-090b962e850f.png)\n",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r536789178,536789178,src/bench/streams_findbyte.cpp
hebasto,2020-12-05 14:30:19,"134de90f2b64ede6dbd812a9a88b00708685394d\n```suggestion\n    BOOST_CHECK_EXCEPTION(bf.FindByte(99), std::ios_base::failure, HasReason(""CBufferedFile::Fill: end of file""));```",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r536790148,536790148,src/test/streams_tests.cpp
hebasto,2020-12-05 14:30:47,"134de90f2b64ede6dbd812a9a88b00708685394d\n```suggestion\n        BOOST_CHECK_EXCEPTION(bf.Search(needle, 2), std::ios_base::failure, HasReason(""CBufferedFile::Fill: end of file""));\n```",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r536790336,536790336,src/test/streams_tests.cpp
hebasto,2020-12-05 15:54:43,"While the `CBufferedFile` class is already touched, maybe make `CBufferedFile::Fill` private by removing this line?",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r536812913,536812913,src/streams.h
hebasto,2020-12-08 14:31:20,"b576994bea620c7d065dd558c93222391151c9ff\n```suggestion\n#include <bench/bench.h>\n\n#include <fs.h>\n#include <stdio.h>\n#include <streams.h>\n```",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r538435590,538435590,src/bench/streams_findbyte.cpp
hebasto,2020-12-08 14:33:08,"b576994bea620c7d065dd558c93222391151c9ff\n```suggestion\n    const size_t file_size = 200;\n```",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r538437643,538437643,src/bench/streams_findbyte.cpp
hebasto,2020-12-08 14:44:15,"865ed617512edb9e62dcce61aa48818c4ef3a295\n\nSome `if` statements could be eliminated :)\n\n```\n    void FindByte(unsigned char ch)\n    {\n        while (true) {\n            if (nReadPos == nSrcPos) Fill();\n            const size_t i = nReadPos % vchBuf.size();\n            const size_t n = std::min<size_t>(vchBuf.size() - i, nSrcPos - nReadPos);\n            const auto it_start = vc",https://github.com/bitcoin/bitcoin/pull/19690#discussion_r538449929,538449929,src/streams.h
