[
  {
    "sha": "bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmIwOTM2NTJlMzNjMDkwNWQ5M2Y5ZDRiYjcwZGJhZjI2OWUwY2Fk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-29T14:48:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:12Z"
      },
      "message": "Move HelpExample* from rpcwallet to rpcserver\n\nGeneral functions used throughout the RPC framework\ndon't belong in rpcwallet.",
      "tree": {
        "sha": "4ab8dab830faf7c10e4fb0f9acfdcd53906bd7e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ab8dab830faf7c10e4fb0f9acfdcd53906bd7e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb093652e33c0905d93f9d4bb70dbaf269e0cad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00cfc9f0749daed5137bea78a4234c3d074e8889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00cfc9f0749daed5137bea78a4234c3d074e8889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00cfc9f0749daed5137bea78a4234c3d074e8889"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "949e81e07f07f92ed019a0ac95fe8859dcbe318f",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb093652e33c0905d93f9d4bb70dbaf269e0cad/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb093652e33c0905d93f9d4bb70dbaf269e0cad/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
        "patch": "@@ -820,4 +820,13 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     }\n }\n \n+std::string HelpExampleCli(string methodname, string args){\n+    return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n+}\n+\n+std::string HelpExampleRpc(string methodname, string args){\n+    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n+        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n+}\n+\n const CRPCTable tableRPC;"
      },
      {
        "sha": "77ebc189a8184feb7a1d0caa6153db5e705f2492",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb093652e33c0905d93f9d4bb70dbaf269e0cad/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb093652e33c0905d93f9d4bb70dbaf269e0cad/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
        "patch": "@@ -33,15 +33,6 @@ std::string HelpRequiringPassphrase()\n         : \"\";\n }\n \n-std::string HelpExampleCli(string methodname, string args){\n-    return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n-}\n-\n-std::string HelpExampleRpc(string methodname, string args){\n-    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n-        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n-}\n-\n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())"
      }
    ]
  },
  {
    "sha": "991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTE2ODVkM2RjMjA4Y2ZjYmMyZjI3OTAwYTcyNTJmYjE0YzhmN2Fk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-29T15:00:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:13Z"
      },
      "message": "Move getinfo to rpcnet.cpp\n\nWhere to place `getinfo` is a difficult issue\nas it shows information from the wallet, net and\nblock chain. However, I moved it out of rpcwallet\nas the command needs also to be available without\nwallet.",
      "tree": {
        "sha": "fa1b64162c5ccfc62b41f09723a299801795221b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa1b64162c5ccfc62b41f09723a299801795221b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/991685d3dc208cfcbc2f27900a7252fb14c8f7ad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb093652e33c0905d93f9d4bb70dbaf269e0cad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb093652e33c0905d93f9d4bb70dbaf269e0cad"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 59,
      "deletions": 58
    },
    "files": [
      {
        "sha": "71b55bca1ed5b08bd8552496c6ceea714e4e5106",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/991685d3dc208cfcbc2f27900a7252fb14c8f7ad/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/991685d3dc208cfcbc2f27900a7252fb14c8f7ad/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
        "patch": "@@ -8,6 +8,9 @@\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"util.h\"\n+#include \"wallet.h\" // for getinfo\n+#include \"init.h\" // for getinfo\n+#include \"main.h\" // for getinfo\n \n #include <inttypes.h>\n \n@@ -329,3 +332,59 @@ Value getnettotals(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"timemillis\", static_cast<boost::int64_t>(GetTimeMillis())));\n     return obj;\n }\n+\n+Value getinfo(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getinfo\\n\"\n+            \"Returns an object containing various state info.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n+            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n+            \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n+            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n+            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n+            \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n+            \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n+            \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getinfo\", \"\")\n+            + HelpExampleRpc(\"getinfo\", \"\")\n+        );\n+\n+    proxyType proxy;\n+    GetProxy(NET_IPV4, proxy);\n+\n+    Object obj;\n+    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+    if (pwalletMain) {\n+        obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n+        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+    }\n+    obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n+    obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n+    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n+    obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n+    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n+    obj.push_back(Pair(\"testnet\",       TestNet()));\n+    if (pwalletMain) {\n+        obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n+        obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n+    }\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    if (pwalletMain && pwalletMain->IsCrypted())\n+        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n+    return obj;\n+}"
      },
      {
        "sha": "bb87afec5b618b361d5959ee414409a1ecf57abe",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/991685d3dc208cfcbc2f27900a7252fb14c8f7ad/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/991685d3dc208cfcbc2f27900a7252fb14c8f7ad/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
        "patch": "@@ -66,64 +66,6 @@ string AccountFromValue(const Value& value)\n     return strAccount;\n }\n \n-Value getinfo(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"getinfo\\n\"\n-            \"Returns an object containing various state info.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n-            \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n-            \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getinfo\", \"\")\n-            + HelpExampleRpc(\"getinfo\", \"\")\n-        );\n-\n-    proxyType proxy;\n-    GetProxy(NET_IPV4, proxy);\n-\n-    Object obj;\n-    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n-    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n-    if (pwalletMain) {\n-        obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n-    }\n-    obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n-    obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n-    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n-    obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n-    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       TestNet()));\n-    if (pwalletMain) {\n-        obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n-        obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n-    }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-    if (pwalletMain && pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n-    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n-    return obj;\n-}\n-\n-\n-\n Value getnewaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)"
      }
    ]
  },
  {
    "sha": "48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGJhNTZjZGZkMWYwZDI0NzhiMGQ4Y2ZmYjgyOGVmYjY5ODJlZDc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-29T15:04:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:13Z"
      },
      "message": "Delimit code with #ifdef ENABLE_WALLET\n\nDelimit all code that uses the wallet functions\nin implementation files that conditionally use the wallet.",
      "tree": {
        "sha": "9616a93d913e09f9a7b63878c107a591615cc6e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9616a93d913e09f9a7b63878c107a591615cc6e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/991685d3dc208cfcbc2f27900a7252fb14c8f7ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/991685d3dc208cfcbc2f27900a7252fb14c8f7ad"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 101,
      "deletions": 24
    },
    "files": [
      {
        "sha": "fc15df05942a4201e77565d4ee72df58daa094d6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 8,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "patch": "@@ -10,15 +10,18 @@\n #include \"init.h\"\n \n #include \"addrman.h\"\n+#include \"db.h\"\n #include \"rpcserver.h\"\n #include \"checkpoints.h\"\n #include \"miner.h\"\n #include \"net.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #include \"walletdb.h\"\n+#endif\n \n #include <inttypes.h>\n #include <stdint.h>\n@@ -35,8 +38,10 @@\n using namespace std;\n using namespace boost;\n \n+#ifdef ENABLE_WALLET\n std::string strWalletFile;\n CWallet* pwalletMain;\n+#endif\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -108,15 +113,19 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n+#ifdef ENABLE_WALLET\n     ShutdownRPCMining();\n     if (pwalletMain)\n         bitdb.Flush(false);\n     GenerateBitcoins(false, NULL, 0);\n+#endif\n     StopNode();\n     {\n         LOCK(cs_main);\n+#ifdef ENABLE_WALLET\n         if (pwalletMain)\n             pwalletMain->SetBestChain(chainActive.GetLocator());\n+#endif\n         if (pblocktree)\n             pblocktree->Flush();\n         if (pcoinsTip)\n@@ -125,12 +134,16 @@ void Shutdown()\n         delete pcoinsdbview; pcoinsdbview = NULL;\n         delete pblocktree; pblocktree = NULL;\n     }\n+#ifdef ENABLE_WALLET\n     if (pwalletMain)\n         bitdb.Flush(true);\n+#endif\n     boost::filesystem::remove(GetPidFile());\n     UnregisterAllWallets();\n+#ifdef ENABLE_WALLET\n     if (pwalletMain)\n         delete pwalletMain;\n+#endif\n     LogPrintf(\"Shutdown : done\\n\");\n }\n \n@@ -479,7 +492,9 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+#ifdef ENABLE_WALLET\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n+#endif\n \n     if (mapArgs.count(\"-timeout\"))\n     {\n@@ -525,16 +540,17 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n     }\n \n+#ifdef ENABLE_WALLET\n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n-\n+#endif\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();\n-\n+#ifdef ENABLE_WALLET\n     // Wallet file must be a plain filename without a directory\n     if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n         return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\"), strWalletFile.c_str(), strDataDir.c_str()));\n-\n+#endif\n     // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n@@ -567,7 +583,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     int64_t nStart;\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-\n+#ifdef ENABLE_WALLET\n     if (!fDisableWallet) {\n         uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n@@ -613,7 +629,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n                 return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n         }\n     } // (!fDisableWallet)\n-\n+#endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization\n \n     RegisterNodeSignals(GetNodeSignals());\n@@ -880,7 +896,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     }\n \n     // ********************************************************* Step 8: load wallet\n-\n+#ifdef ENABLE_WALLET\n     if (fDisableWallet) {\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n@@ -972,7 +988,9 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             nWalletDBUpdated++;\n         }\n     } // (!fDisableWallet)\n-\n+#else // ENABLE_WALLET\n+    LogPrintf(\"No wallet compiled in!\\n\");\n+#endif // !ENABLE_WALLET\n     // ********************************************************* Step 9: import blocks\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n@@ -1016,32 +1034,39 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n+#ifdef ENABLE_WALLET\n     LogPrintf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n     LogPrintf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n     LogPrintf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+#endif\n \n     StartNode(threadGroup);\n-\n+#ifdef ENABLE_WALLET\n     // InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly.\n     InitRPCMining();\n+#endif\n     if (fServer)\n         StartRPCThreads();\n \n+#ifdef ENABLE_WALLET\n     // Generate coins in the background\n     if (pwalletMain)\n         GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", -1));\n+#endif\n \n     // ********************************************************* Step 12: finished\n \n     uiInterface.InitMessage(_(\"Done loading\"));\n \n+#ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         // Add wallet transactions that aren't already in a block to mapTransactions\n         pwalletMain->ReacceptWalletTransactions();\n \n         // Run a thread to flush wallet periodically\n         threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n     }\n+#endif\n \n     return !fRequestShutdown;\n }"
      },
      {
        "sha": "89bf53060e260c8d179e558a0c9234accc2ebc5f",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "patch": "@@ -1,15 +1,16 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n #include \"rpcserver.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"util.h\"\n+#ifdef ENABLE_WALLET\n #include \"wallet.h\" // for getinfo\n #include \"init.h\" // for getinfo\n+#endif\n #include \"main.h\" // for getinfo\n \n #include <inttypes.h>\n@@ -368,23 +369,29 @@ Value getinfo(const Array& params, bool fHelp)\n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+#ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n         obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     }\n+#endif\n     obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n     obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       TestNet()));\n+#ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     }\n+#endif\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+#ifdef ENABLE_WALLET\n     if (pwalletMain && pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+#endif\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "abbc33cc56aefecaa13bd01174ce6ddb4f79368e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "patch": "@@ -8,7 +8,12 @@\n #include \"init.h\"\n #include \"net.h\"\n #include \"uint256.h\"\n+#include \"core.h\"\n+#include \"main.h\"\n+#include \"keystore.h\"\n+#ifdef ENABLE_WALLET\n #include \"wallet.h\"\n+#endif\n \n #include <stdint.h>\n \n@@ -190,6 +195,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n+#ifdef ENABLE_WALLET\n Value listunspent(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n@@ -303,6 +309,7 @@ Value listunspent(const Array& params, bool fHelp)\n \n     return results;\n }\n+#endif\n \n Value createrawtransaction(const Array& params, bool fHelp)\n {\n@@ -508,7 +515,9 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             \"this transaction depends on but may not yet be in the block chain.\\n\"\n             \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n             + HelpRequiringPassphrase() + \"\\n\"\n+#endif\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n@@ -605,8 +614,10 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             tempKeystore.AddKey(key);\n         }\n     }\n+#ifdef ENABLE_WALLET\n     else\n         EnsureWalletIsUnlocked();\n+#endif\n \n     // Add previous txouts given in the RPC call:\n     if (params.size() > 1 && params[1].type() != null_type)\n@@ -662,7 +673,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n \n+#ifdef ENABLE_WALLET\n     const CKeyStore& keystore = ((fGivenKeys || !pwalletMain) ? tempKeystore : *pwalletMain);\n+#else\n+    const CKeyStore& keystore = tempKeystore;\n+#endif\n \n     int nHashType = SIGHASH_ALL;\n     if (params.size() > 3 && params[3].type() != null_type)"
      },
      {
        "sha": "2dc7b34f8823ac3f05f7af63f1015e1abd6386b1",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 14,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "patch": "@@ -9,7 +9,10 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"util.h\"\n+#include \"ui_interface.h\"\n+#ifdef ENABLE_WALLET\n #include \"wallet.h\"\n+#endif\n \n #include <boost/algorithm/string.hpp>\n #include <boost/asio.hpp>\n@@ -149,8 +152,10 @@ string CRPCTable::help(string strCommand) const\n             continue;\n         if (strCommand != \"\" && strMethod != strCommand)\n             continue;\n+#ifdef ENABLE_WALLET\n         if (pcmd->reqWallet && !pwalletMain)\n             continue;\n+#endif\n \n         try\n         {\n@@ -228,11 +233,26 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n     { \"getnettotals\",           &getnettotals,           true,      true,       false },\n     { \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n+    { \"getinfo\",                &getinfo,                true,      false,      false },\n+    { \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n+    { \"getblock\",               &getblock,               false,     false,      false },\n+    { \"getblockhash\",           &getblockhash,           false,     false,      false },\n+    { \"settxfee\",               &settxfee,               false,     false,      true },\n+    { \"getrawtransaction\",      &getrawtransaction,      false,     false,      false },\n+    { \"createrawtransaction\",   &createrawtransaction,   false,     false,      false },\n+    { \"decoderawtransaction\",   &decoderawtransaction,   false,     false,      false },\n+    { \"decodescript\",           &decodescript,           false,     false,      false },\n+    { \"signrawtransaction\",     &signrawtransaction,     false,     false,      false },\n+    { \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n+    { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n+    { \"gettxout\",               &gettxout,               true,      false,      false },\n+    { \"verifychain\",            &verifychain,            true,      false,      false },\n+\n+#ifdef ENABLE_WALLET\n     { \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },\n     { \"setgenerate\",            &setgenerate,            true,      true,       false },\n     { \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n-    { \"getinfo\",                &getinfo,                true,      false,      false },\n     { \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n     { \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n     { \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n@@ -258,17 +278,13 @@ static const CRPCCommand vRPCCommands[] =\n     { \"sendmany\",               &sendmany,               false,     false,      true },\n     { \"addmultisigaddress\",     &addmultisigaddress,     false,     false,      true },\n     { \"createmultisig\",         &createmultisig,         true,      true ,      false },\n-    { \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n-    { \"getblock\",               &getblock,               false,     false,      false },\n-    { \"getblockhash\",           &getblockhash,           false,     false,      false },\n     { \"gettransaction\",         &gettransaction,         false,     false,      true },\n     { \"listtransactions\",       &listtransactions,       false,     false,      true },\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n     { \"signmessage\",            &signmessage,            false,     false,      true },\n     { \"verifymessage\",          &verifymessage,          false,     false,      false },\n     { \"getwork\",                &getwork,                true,      false,      true },\n     { \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"settxfee\",               &settxfee,               false,     false,      true },\n     { \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n     { \"submitblock\",            &submitblock,            false,     false,      false },\n     { \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n@@ -277,17 +293,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"importprivkey\",          &importprivkey,          false,     false,      true },\n     { \"importwallet\",           &importwallet,           false,     false,      true },\n     { \"listunspent\",            &listunspent,            false,     false,      true },\n-    { \"getrawtransaction\",      &getrawtransaction,      false,     false,      false },\n-    { \"createrawtransaction\",   &createrawtransaction,   false,     false,      false },\n-    { \"decoderawtransaction\",   &decoderawtransaction,   false,     false,      false },\n-    { \"decodescript\",           &decodescript,           false,     false,      false },\n-    { \"signrawtransaction\",     &signrawtransaction,     false,     false,      false },\n-    { \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n-    { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n-    { \"gettxout\",               &gettxout,               true,      false,      false },\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n-    { \"verifychain\",            &verifychain,            true,      false,      false },\n+#endif // ENABLE_WALLET\n };\n \n CRPCTable::CRPCTable()\n@@ -788,8 +796,10 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n+#ifdef ENABLE_WALLET\n     if (pcmd->reqWallet && !pwalletMain)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+#endif\n \n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n@@ -804,13 +814,20 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         {\n             if (pcmd->threadSafe)\n                 result = pcmd->actor(params, false);\n+#ifdef ENABLE_WALLET\n             else if (!pwalletMain) {\n                 LOCK(cs_main);\n                 result = pcmd->actor(params, false);\n             } else {\n                 LOCK2(cs_main, pwalletMain->cs_wallet);\n                 result = pcmd->actor(params, false);\n             }\n+#else // ENABLE_WALLET\n+            else {\n+                LOCK(cs_main);\n+                result = pcmd->actor(params, false);\n+            }\n+#endif // !ENABLE_WALLET\n         }\n         return result;\n     }"
      },
      {
        "sha": "e56aae225ed4ff741f2e6d9ca0676e5aa78b6ea8",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "patch": "@@ -23,6 +23,7 @@ createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n     return result;\n }\n \n+#ifdef ENABLE_WALLET\n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {\n     rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n@@ -59,6 +60,7 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n     string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n     BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n }\n+#endif\n \n static Value CallRPC(string args)\n {\n@@ -79,6 +81,7 @@ static Value CallRPC(string args)\n     }\n }\n \n+#ifdef ENABLE_WALLET\n BOOST_AUTO_TEST_CASE(rpc_wallet)\n {\n     // Test RPC calls for various wallet statistics\n@@ -106,7 +109,7 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0 true\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n }\n-\n+#endif\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "a804ff3803cf8099c44aa8685fc229be8d8f6de7",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "patch": "@@ -7,7 +7,9 @@\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#ifdef ENABLE_WALLET\n #include \"wallet.h\"\n+#endif\n \n #include <boost/filesystem.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -26,18 +28,22 @@ struct TestingSetup {\n     TestingSetup() {\n         fPrintToDebugger = true; // don't want to write to debug.log file\n         noui_connect();\n+#ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n+#endif\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n         mapArgs[\"-datadir\"] = pathTemp.string();\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n         InitBlockIndex();\n+#ifdef ENABLE_WALLET\n         bool fFirstRun;\n         pwalletMain = new CWallet(\"wallet.dat\");\n         pwalletMain->LoadWallet(fFirstRun);\n         RegisterWallet(pwalletMain);\n+#endif\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n@@ -46,12 +52,16 @@ struct TestingSetup {\n     {\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+#ifdef ENABLE_WALLET\n         delete pwalletMain;\n         pwalletMain = NULL;\n+#endif\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n+#ifdef ENABLE_WALLET\n         bitdb.Flush(true);\n+#endif\n         boost::filesystem::remove_all(pathTemp);\n     }\n };"
      }
    ]
  },
  {
    "sha": "d004d7279ff21b7ee90207a850ec26ba044799bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDA0ZDcyNzlmZjIxYjdlZTkwMjA3YTg1MGVjMjZiYTA0NDc5OWJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-29T15:33:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:13Z"
      },
      "message": "Move CAddrDB frrom db to net\n\nThis was a leftover from the times in which\npeers.dat depended in BDB.\n\nOther functions in db.cpp still depend on BerkelyDB,\nto be able to compile without BDB this (small)\nfunctionality needs to be moved to another file.",
      "tree": {
        "sha": "37ddc5ee8062d6b85905bf4ffb82fcc78dbc4ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37ddc5ee8062d6b85905bf4ffb82fcc78dbc4ae0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d004d7279ff21b7ee90207a850ec26ba044799bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d004d7279ff21b7ee90207a850ec26ba044799bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d004d7279ff21b7ee90207a850ec26ba044799bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d004d7279ff21b7ee90207a850ec26ba044799bb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48ba56cdfd1f0d2478b0d8cffb828efb6982ed76"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 111,
      "deletions": 128
    },
    "files": [
      {
        "sha": "1f2ee1c554041d164060ec89be7d07a88092acb2",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 110,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d004d7279ff21b7ee90207a850ec26ba044799bb/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d004d7279ff21b7ee90207a850ec26ba044799bb/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=d004d7279ff21b7ee90207a850ec26ba044799bb",
        "patch": "@@ -479,113 +479,3 @@ void CDBEnv::Flush(bool fShutdown)\n     }\n }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-//\n-// CAddrDB\n-//\n-\n-CAddrDB::CAddrDB()\n-{\n-    pathAddr = GetDataDir() / \"peers.dat\";\n-}\n-\n-bool CAddrDB::Write(const CAddrMan& addr)\n-{\n-    // Generate random temporary filename\n-    unsigned short randv = 0;\n-    RAND_bytes((unsigned char *)&randv, sizeof(randv));\n-    std::string tmpfn = strprintf(\"peers.dat.%04x\", randv);\n-\n-    // serialize addresses, checksum data up to that point, then append csum\n-    CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n-    ssPeers << FLATDATA(Params().MessageStart());\n-    ssPeers << addr;\n-    uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n-    ssPeers << hash;\n-\n-    // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n-    CAutoFile fileout = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n-    if (!fileout)\n-        return error(\"CAddrman::Write() : open failed\");\n-\n-    // Write and commit header, data\n-    try {\n-        fileout << ssPeers;\n-    }\n-    catch (std::exception &e) {\n-        return error(\"CAddrman::Write() : I/O error\");\n-    }\n-    FileCommit(fileout);\n-    fileout.fclose();\n-\n-    // replace existing peers.dat, if any, with new peers.dat.XXXX\n-    if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"CAddrman::Write() : Rename-into-place failed\");\n-\n-    return true;\n-}\n-\n-bool CAddrDB::Read(CAddrMan& addr)\n-{\n-    // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n-    CAutoFile filein = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n-    if (!filein)\n-        return error(\"CAddrman::Read() : open failed\");\n-\n-    // use file size to size memory buffer\n-    int fileSize = GetFilesize(filein);\n-    int dataSize = fileSize - sizeof(uint256);\n-    //Don't try to resize to a negative number if file is small\n-    if ( dataSize < 0 ) dataSize = 0;\n-    vector<unsigned char> vchData;\n-    vchData.resize(dataSize);\n-    uint256 hashIn;\n-\n-    // read data and checksum from file\n-    try {\n-        filein.read((char *)&vchData[0], dataSize);\n-        filein >> hashIn;\n-    }\n-    catch (std::exception &e) {\n-        return error(\"CAddrman::Read() 2 : I/O error or stream data corrupted\");\n-    }\n-    filein.fclose();\n-\n-    CDataStream ssPeers(vchData, SER_DISK, CLIENT_VERSION);\n-\n-    // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n-    if (hashIn != hashTmp)\n-        return error(\"CAddrman::Read() : checksum mismatch; data corrupted\");\n-\n-    unsigned char pchMsgTmp[4];\n-    try {\n-        // de-serialize file header (network specific magic number) and ..\n-        ssPeers >> FLATDATA(pchMsgTmp);\n-\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"CAddrman::Read() : invalid network magic number\");\n-\n-        // de-serialize address data into one CAddrMan object\n-        ssPeers >> addr;\n-    }\n-    catch (std::exception &e) {\n-        return error(\"CAddrman::Read() : I/O error or stream data corrupted\");\n-    }\n-\n-    return true;\n-}\n-"
      },
      {
        "sha": "66d7f319174d1cd0334eaa82c996c2e319e166d1",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d004d7279ff21b7ee90207a850ec26ba044799bb/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d004d7279ff21b7ee90207a850ec26ba044799bb/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=d004d7279ff21b7ee90207a850ec26ba044799bb",
        "patch": "@@ -305,22 +305,4 @@ class CDB\n     bool static Rewrite(const std::string& strFile, const char* pszSkip = NULL);\n };\n \n-\n-\n-\n-\n-\n-\n-\n-/** Access to the (IP) address database (peers.dat) */\n-class CAddrDB\n-{\n-private:\n-    boost::filesystem::path pathAddr;\n-public:\n-    CAddrDB();\n-    bool Write(const CAddrMan& addr);\n-    bool Read(CAddrMan& addr);\n-};\n-\n #endif // BITCOIN_DB_H"
      },
      {
        "sha": "afffbdf1da64423ef4cba52b1e06805c0593e8f6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d004d7279ff21b7ee90207a850ec26ba044799bb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d004d7279ff21b7ee90207a850ec26ba044799bb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d004d7279ff21b7ee90207a850ec26ba044799bb",
        "patch": "@@ -1942,3 +1942,103 @@ void CNode::Fuzz(int nChance)\n     // (more changes exponentially less likely):\n     Fuzz(2);\n }\n+\n+//\n+// CAddrDB\n+//\n+\n+CAddrDB::CAddrDB()\n+{\n+    pathAddr = GetDataDir() / \"peers.dat\";\n+}\n+\n+bool CAddrDB::Write(const CAddrMan& addr)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    RAND_bytes((unsigned char *)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"peers.dat.%04x\", randv);\n+\n+    // serialize addresses, checksum data up to that point, then append csum\n+    CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n+    ssPeers << FLATDATA(Params().MessageStart());\n+    ssPeers << addr;\n+    uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n+    ssPeers << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"CAddrman::Write() : open failed\");\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssPeers;\n+    }\n+    catch (std::exception &e) {\n+        return error(\"CAddrman::Write() : I/O error\");\n+    }\n+    FileCommit(fileout);\n+    fileout.fclose();\n+\n+    // replace existing peers.dat, if any, with new peers.dat.XXXX\n+    if (!RenameOver(pathTmp, pathAddr))\n+        return error(\"CAddrman::Write() : Rename-into-place failed\");\n+\n+    return true;\n+}\n+\n+bool CAddrDB::Read(CAddrMan& addr)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n+    CAutoFile filein = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"CAddrman::Read() : open failed\");\n+\n+    // use file size to size memory buffer\n+    int fileSize = GetFilesize(filein);\n+    int dataSize = fileSize - sizeof(uint256);\n+    //Don't try to resize to a negative number if file is small\n+    if ( dataSize < 0 ) dataSize = 0;\n+    vector<unsigned char> vchData;\n+    vchData.resize(dataSize);\n+    uint256 hashIn;\n+\n+    // read data and checksum from file\n+    try {\n+        filein.read((char *)&vchData[0], dataSize);\n+        filein >> hashIn;\n+    }\n+    catch (std::exception &e) {\n+        return error(\"CAddrman::Read() 2 : I/O error or stream data corrupted\");\n+    }\n+    filein.fclose();\n+\n+    CDataStream ssPeers(vchData, SER_DISK, CLIENT_VERSION);\n+\n+    // verify stored checksum matches input data\n+    uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n+    if (hashIn != hashTmp)\n+        return error(\"CAddrman::Read() : checksum mismatch; data corrupted\");\n+\n+    unsigned char pchMsgTmp[4];\n+    try {\n+        // de-serialize file header (network specific magic number) and ..\n+        ssPeers >> FLATDATA(pchMsgTmp);\n+\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n+            return error(\"CAddrman::Read() : invalid network magic number\");\n+\n+        // de-serialize address data into one CAddrMan object\n+        ssPeers >> addr;\n+    }\n+    catch (std::exception &e) {\n+        return error(\"CAddrman::Read() : I/O error or stream data corrupted\");\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "28359ea12b236cd08851b5fa8fdf93c63bf452b3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d004d7279ff21b7ee90207a850ec26ba044799bb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d004d7279ff21b7ee90207a850ec26ba044799bb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d004d7279ff21b7ee90207a850ec26ba044799bb",
        "patch": "@@ -690,4 +690,15 @@ class CTransaction;\n void RelayTransaction(const CTransaction& tx, const uint256& hash);\n void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataStream& ss);\n \n+/** Access to the (IP) address database (peers.dat) */\n+class CAddrDB\n+{\n+private:\n+    boost::filesystem::path pathAddr;\n+public:\n+    CAddrDB();\n+    bool Write(const CAddrMan& addr);\n+    bool Read(CAddrMan& addr);\n+};\n+\n #endif"
      }
    ]
  },
  {
    "sha": "4f9e993bc9beb8261022aad6668d675dccb1e6c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjllOTkzYmM5YmViODI2MTAyMmFhZDY2NjhkNjc1ZGNjYjFlNmM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-29T15:50:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:13Z"
      },
      "message": "Add --disable-wallet option to build system\n\nMake it possible to build Bitcoin without wallet\n(and thus without BDB) so that it only functions as node.",
      "tree": {
        "sha": "f6c5b75c65774abf96619076d9f58193b55c351c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6c5b75c65774abf96619076d9f58193b55c351c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f9e993bc9beb8261022aad6668d675dccb1e6c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f9e993bc9beb8261022aad6668d675dccb1e6c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f9e993bc9beb8261022aad6668d675dccb1e6c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f9e993bc9beb8261022aad6668d675dccb1e6c4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d004d7279ff21b7ee90207a850ec26ba044799bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d004d7279ff21b7ee90207a850ec26ba044799bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d004d7279ff21b7ee90207a850ec26ba044799bb"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 77,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0f99675fb44c92a5e27ef7f76c6c528bac66dece",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f9e993bc9beb8261022aad6668d675dccb1e6c4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f9e993bc9beb8261022aad6668d675dccb1e6c4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "patch": "@@ -37,6 +37,13 @@ AM_MAINTAINER_MODE([enable])\n dnl make the compilation flags quiet unless V=1 is used\n m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n \n+# Enable wallet\n+AC_ARG_ENABLE([wallet],\n+  [AS_HELP_STRING([--enable-wallet],\n+  [enable wallet (default is yes)])],\n+  [enable_wallet=$enableval],\n+  [enable_wallet=yes])\n+\n AC_ARG_WITH([miniupnpc],\n   [AS_HELP_STRING([--with-miniupnpc],\n   [enable UPNP (default is yes if libminiupnpc is found)])],\n@@ -362,8 +369,10 @@ AC_TRY_COMPILE([#include <sys/socket.h>],\n  [ AC_MSG_RESULT(no)]\n )\n \n-dnl Check for libdb_cxx\n-BITCOIN_FIND_BDB48\n+if test x$enable_wallet != xno; then\n+    dnl Check for libdb_cxx only if wallet enabled\n+    BITCOIN_FIND_BDB48\n+fi\n \n dnl Check for libminiupnpc (optional)\n if test x$use_upnp != xno; then\n@@ -593,6 +602,20 @@ if test \"x$use_ccache\" != \"xno\"; then\n   AC_MSG_RESULT($use_ccache)\n fi\n \n+dnl enable wallet\n+AC_MSG_CHECKING([if wallet should be enabled])\n+if test x$enable_wallet != xno; then\n+  AC_MSG_RESULT(yes)\n+  AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n+\n+else\n+  AC_MSG_RESULT(no)\n+\n+  if test \"x$use_qt\" != \"xno\"; then\n+    AC_MSG_ERROR([Cannot currently build Qt GUI with wallet disabled. Use --without-qt.])\n+  fi\n+fi\n+\n dnl enable ipv6 support\n AC_MSG_CHECKING([if ipv6 should be enabled])\n if test x$have_ipv6 = xno; then\n@@ -705,6 +728,7 @@ fi\n \n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n+AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet == xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov == xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])"
      },
      {
        "sha": "5daf625695b9c59f6b86c338cf37d114355aafa7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 35,
        "deletions": 6,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "patch": "@@ -4,6 +4,9 @@ AM_CPPFLAGS += -I$(top_srcdir)/src/leveldb/helpers/memenv \\\n   -I$(builddir)\n \n noinst_LIBRARIES = libbitcoin_server.a libbitcoin_common.a libbitcoin_cli.a\n+if ENABLE_WALLET\n+noinst_LIBRARIES += libbitcoin_wallet.a\n+endif\n \n bin_PROGRAMS = bitcoind bitcoin-cli\n \n@@ -33,14 +36,37 @@ obj/build.h: FORCE\n \t  $(abs_top_srcdir)\n version.o: obj/build.h\n \n-libbitcoin_server_a_SOURCES = addrman.cpp alert.cpp \\\n+libbitcoin_server_a_SOURCES = \\\n+  addrman.cpp \\\n+  alert.cpp \\\n+  crypter.cpp \\\n   rpcserver.cpp \\\n   bloom.cpp \\\n-  chainparams.cpp checkpoints.cpp coins.cpp crypter.cpp db.cpp \\\n-  init.cpp keystore.cpp leveldbwrapper.cpp main.cpp miner.cpp \\\n-  net.cpp noui.cpp rpcblockchain.cpp rpcdump.cpp \\\n-  rpcmining.cpp rpcnet.cpp rpcrawtransaction.cpp rpcwallet.cpp \\\n-  txdb.cpp txmempool.cpp wallet.cpp walletdb.cpp $(JSON_H) \\\n+  chainparams.cpp \\\n+  checkpoints.cpp \\\n+  coins.cpp \\\n+  init.cpp \\\n+  keystore.cpp \\\n+  leveldbwrapper.cpp \\\n+  main.cpp \\\n+  net.cpp \\\n+  noui.cpp \\\n+  rpcblockchain.cpp \\\n+  rpcnet.cpp \\\n+  rpcrawtransaction.cpp \\\n+  txdb.cpp \\\n+  txmempool.cpp \\\n+  $(JSON_H) \\\n+  $(BITCOIN_CORE_H)\n+\n+libbitcoin_wallet_a_SOURCES = \\\n+  db.cpp \\\n+  miner.cpp \\\n+  rpcdump.cpp \\\n+  rpcmining.cpp \\\n+  rpcwallet.cpp \\\n+  wallet.cpp \\\n+  walletdb.cpp \\\n   $(BITCOIN_CORE_H)\n \n libbitcoin_common_a_SOURCES = \\\n@@ -68,6 +94,9 @@ nodist_libbitcoin_common_a_SOURCES = $(top_srcdir)/src/obj/build.h\n # bitcoind binary #\n bitcoind_LDADD = libbitcoin_server.a libbitcoin_cli.a libbitcoin_common.a leveldb/libleveldb.a leveldb/libmemenv.a \\\n   $(BOOST_LIBS)\n+if ENABLE_WALLET\n+bitcoind_LDADD += libbitcoin_wallet.a\n+endif\n bitcoind_SOURCES = bitcoind.cpp\n #\n "
      },
      {
        "sha": "13cffd29bc2a76ab8498c03eaf0d2750bbb8948e",
        "filename": "src/Makefile.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/Makefile.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/Makefile.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.include?ref=4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "patch": "@@ -6,6 +6,7 @@ AM_CPPFLAGS =  $(INCLUDES) \\\n AM_LDFLAGS = $(PTHREAD_CFLAGS)\n \n LIBBITCOIN_SERVER=$(top_builddir)/src/libbitcoin_server.a\n+LIBBITCOIN_WALLET=$(top_builddir)/src/libbitcoin_wallet.a\n LIBBITCOIN_COMMON=$(top_builddir)/src/libbitcoin_common.a\n LIBBITCOIN_CLI=$(top_builddir)/src/libbitcoin_cli.a\n LIBLEVELDB=$(top_builddir)/src/leveldb/libleveldb.a"
      },
      {
        "sha": "08846604ea3321e482950dda69ccb356a0751a82",
        "filename": "src/qt/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "patch": "@@ -197,7 +197,7 @@ endif\n bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) \\\n   -I$(top_srcdir)/src/qt/forms\n bitcoin_qt_SOURCES = bitcoin.cpp\n-bitcoin_qt_LDADD = libbitcoinqt.a $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n+bitcoin_qt_LDADD = libbitcoinqt.a $(LIBBITCOIN_SERVER) $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n \n # forms/foo.h -> forms/ui_foo.h"
      },
      {
        "sha": "cb6874700e94a0c672e122185bd10326f5a7a31b",
        "filename": "src/qt/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/qt/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/qt/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/Makefile.am?ref=4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "patch": "@@ -17,7 +17,7 @@ BUILT_SOURCES = $(TEST_QT_MOC_CPP)\n test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n test_bitcoin_qt_SOURCES = test_main.cpp uritests.cpp paymentservertests.cpp $(TEST_QT_H)\n nodist_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n-test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) \\\n+test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER) $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n "
      },
      {
        "sha": "715020a9819604fd7ffd71007ca491a75894f747",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f9e993bc9beb8261022aad6668d675dccb1e6c4/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "patch": "@@ -21,16 +21,25 @@ BUILT_SOURCES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n # test_bitcoin binary #\n test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(TESTDEFS)\n test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(BDB_LIBS)\n-test_bitcoin_SOURCES = accounting_tests.cpp alert_tests.cpp \\\n+  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n+if ENABLE_WALLET\n+test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n+endif\n+test_bitcoin_LDADD += $(BDB_LIBS)\n+\n+test_bitcoin_SOURCES = alert_tests.cpp \\\n   allocator_tests.cpp base32_tests.cpp base58_tests.cpp base64_tests.cpp \\\n   bignum_tests.cpp bloom_tests.cpp canonical_tests.cpp checkblock_tests.cpp \\\n   Checkpoints_tests.cpp compress_tests.cpp DoS_tests.cpp getarg_tests.cpp \\\n-  key_tests.cpp miner_tests.cpp mruset_tests.cpp multisig_tests.cpp \\\n+  key_tests.cpp mruset_tests.cpp multisig_tests.cpp \\\n   netbase_tests.cpp pmt_tests.cpp rpc_tests.cpp script_P2SH_tests.cpp \\\n   script_tests.cpp serialize_tests.cpp sigopcount_tests.cpp test_bitcoin.cpp \\\n   transaction_tests.cpp uint160_tests.cpp uint256_tests.cpp util_tests.cpp \\\n-  wallet_tests.cpp sighash_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n+  sighash_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n+\n+if ENABLE_WALLET\n+test_bitcoin_SOURCES += accounting_tests.cpp wallet_tests.cpp miner_tests.cpp\n+endif\n \n nodist_test_bitcoin_SOURCES = $(BUILT_SOURCES)\n "
      }
    ]
  },
  {
    "sha": "ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTZlYTVhNmZhNGE2NzRmYzFjOTg5ZGY2ZjRlYzk0NWRmMWFhNTM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-29T17:37:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:13Z"
      },
      "message": "Update build-unix.md to mention --disable-wallet\n\nMention the new --disable-wallet mode.\nAlso, correct the BDB entry in the dependencies table.",
      "tree": {
        "sha": "f9d64677d22b9b0127c32c76b136bf71c269fb4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9d64677d22b9b0127c32c76b136bf71c269fb4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f9e993bc9beb8261022aad6668d675dccb1e6c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f9e993bc9beb8261022aad6668d675dccb1e6c4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1d9d96a1ca147aba3d16e7f6319a4ef53801f1d5",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
        "patch": "@@ -22,7 +22,7 @@ Dependencies\n  Library     Purpose           Description\n  -------     -------           -----------\n  libssl      SSL Support       Secure communications\n- libdb4.8    Berkeley DB       Blockchain & wallet storage\n+ libdb4.8    Berkeley DB       Wallet storage\n  libboost    Boost             C++ Library\n  miniupnpc   UPnP Support      Optional firewall-jumping support\n  qt          GUI               GUI toolkit\n@@ -178,3 +178,12 @@ Hardening enables the following features:\n \tRW- R-- RW-\n \n     The STK RW- means that the stack is readable and writeable but not executable.\n+\n+Disable-wallet mode\n+--------------------\n+When the intention is to run only a P2P node without a wallet, bitcoin may be compiled in\n+disable-wallet mode with:\n+\n+    ./configure --disable-wallet\n+\n+In this case there is no dependency on Berkeley DB 4.8."
      }
    ]
  },
  {
    "sha": "829c9203874277265613185c73f96760ae4b9356",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjljOTIwMzg3NDI3NzI2NTYxMzE4NWM3M2Y5Njc2MGFlNGI5MzU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-30T05:09:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:13Z"
      },
      "message": "Move CCryptoKeyStore to crypter.cpp\n\nThis breaks the dependency on crypter for disable-wallet builds.",
      "tree": {
        "sha": "5df689e450592e2e0636662c4d613fda9e6b063e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5df689e450592e2e0636662c4d613fda9e6b063e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/829c9203874277265613185c73f96760ae4b9356",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/829c9203874277265613185c73f96760ae4b9356",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/829c9203874277265613185c73f96760ae4b9356",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/829c9203874277265613185c73f96760ae4b9356/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae6ea5a6fa4a674fc1c989df6f4ec945df1aa534"
      }
    ],
    "stats": {
      "total": 477,
      "additions": 240,
      "deletions": 237
    },
    "files": [
      {
        "sha": "89879d5cd829df56ff133823f432e1acfc7403d3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/829c9203874277265613185c73f96760ae4b9356/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/829c9203874277265613185c73f96760ae4b9356/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=829c9203874277265613185c73f96760ae4b9356",
        "patch": "@@ -39,7 +39,6 @@ version.o: obj/build.h\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   alert.cpp \\\n-  crypter.cpp \\\n   rpcserver.cpp \\\n   bloom.cpp \\\n   chainparams.cpp \\\n@@ -61,6 +60,7 @@ libbitcoin_server_a_SOURCES = \\\n \n libbitcoin_wallet_a_SOURCES = \\\n   db.cpp \\\n+  crypter.cpp \\\n   miner.cpp \\\n   rpcdump.cpp \\\n   rpcmining.cpp \\"
      },
      {
        "sha": "4c43e3a7986da977da6d20a777e947076cdf6342",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 156,
        "deletions": 1,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/829c9203874277265613185c73f96760ae4b9356/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/829c9203874277265613185c73f96760ae4b9356/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=829c9203874277265613185c73f96760ae4b9356",
        "patch": "@@ -4,9 +4,11 @@\n \n #include \"crypter.h\"\n \n+#include \"script.h\"\n+\n #include <string>\n #include <vector>\n-\n+#include <boost/foreach.hpp>\n #include <openssl/aes.h>\n #include <openssl/evp.h>\n \n@@ -117,3 +119,156 @@ bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned\n         return false;\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n }\n+\n+bool CCryptoKeyStore::SetCrypted()\n+{\n+    LOCK(cs_KeyStore);\n+    if (fUseCrypto)\n+        return true;\n+    if (!mapKeys.empty())\n+        return false;\n+    fUseCrypto = true;\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    NotifyStatusChanged(this);\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!SetCrypted())\n+            return false;\n+\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKeyingMaterial vchSecret;\n+            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n+                return false;\n+            if (vchSecret.size() != 32)\n+                return false;\n+            CKey key;\n+            key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n+            if (key.GetPubKey() == vchPubKey)\n+                break;\n+            return false;\n+        }\n+        vMasterKey = vMasterKeyIn;\n+    }\n+    NotifyStatusChanged(this);\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted())\n+            return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n+\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret))\n+            return false;\n+\n+        if (!AddCryptedKey(pubkey, vchCryptedSecret))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+\n+bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!SetCrypted())\n+            return false;\n+\n+        mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n+    }\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted())\n+            return CBasicKeyStore::GetKey(address, keyOut);\n+\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+        if (mi != mapCryptedKeys.end())\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKeyingMaterial vchSecret;\n+            if (!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n+                return false;\n+            if (vchSecret.size() != 32)\n+                return false;\n+            keyOut.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted())\n+            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n+\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+        if (mi != mapCryptedKeys.end())\n+        {\n+            vchPubKeyOut = (*mi).second.first;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapCryptedKeys.empty() || IsCrypted())\n+            return false;\n+\n+        fUseCrypto = true;\n+        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n+        {\n+            const CKey &key = mKey.second;\n+            CPubKey vchPubKey = key.GetPubKey();\n+            CKeyingMaterial vchSecret(key.begin(), key.end());\n+            std::vector<unsigned char> vchCryptedSecret;\n+            if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n+                return false;\n+            if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n+                return false;\n+        }\n+        mapKeys.clear();\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "4791428b485f086cb03853e74fad04fc5ae176f4",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 83,
        "deletions": 0,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/829c9203874277265613185c73f96760ae4b9356/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/829c9203874277265613185c73f96760ae4b9356/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=829c9203874277265613185c73f96760ae4b9356",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"allocators.h\"\n #include \"serialize.h\"\n+#include \"keystore.h\"\n \n class uint256;\n \n@@ -106,4 +107,86 @@ class CCrypter\n bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n \n+/** Keystore which keeps the private keys encrypted.\n+ * It derives from the basic key store, which is used if no encryption is active.\n+ */\n+class CCryptoKeyStore : public CBasicKeyStore\n+{\n+private:\n+    CryptedKeyMap mapCryptedKeys;\n+\n+    CKeyingMaterial vMasterKey;\n+\n+    // if fUseCrypto is true, mapKeys must be empty\n+    // if fUseCrypto is false, vMasterKey must be empty\n+    bool fUseCrypto;\n+\n+protected:\n+    bool SetCrypted();\n+\n+    // will encrypt previously unencrypted keys\n+    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+\n+public:\n+    CCryptoKeyStore() : fUseCrypto(false)\n+    {\n+    }\n+\n+    bool IsCrypted() const\n+    {\n+        return fUseCrypto;\n+    }\n+\n+    bool IsLocked() const\n+    {\n+        if (!IsCrypted())\n+            return false;\n+        bool result;\n+        {\n+            LOCK(cs_KeyStore);\n+            result = vMasterKey.empty();\n+        }\n+        return result;\n+    }\n+\n+    bool Lock();\n+\n+    virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool HaveKey(const CKeyID &address) const\n+    {\n+        {\n+            LOCK(cs_KeyStore);\n+            if (!IsCrypted())\n+                return CBasicKeyStore::HaveKey(address);\n+            return mapCryptedKeys.count(address) > 0;\n+        }\n+        return false;\n+    }\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    void GetKeys(std::set<CKeyID> &setAddress) const\n+    {\n+        if (!IsCrypted())\n+        {\n+            CBasicKeyStore::GetKeys(setAddress);\n+            return;\n+        }\n+        setAddress.clear();\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        while (mi != mapCryptedKeys.end())\n+        {\n+            setAddress.insert((*mi).first);\n+            mi++;\n+        }\n+    }\n+\n+    /* Wallet status (encrypted, locked) changed.\n+     * Note: Called without locks held.\n+     */\n+    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n+};\n+\n #endif"
      },
      {
        "sha": "46402ea25b74333e841d9b47ecfc95d4c9abdf5e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 152,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/829c9203874277265613185c73f96760ae4b9356/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/829c9203874277265613185c73f96760ae4b9356/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=829c9203874277265613185c73f96760ae4b9356",
        "patch": "@@ -56,155 +56,3 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n-bool CCryptoKeyStore::SetCrypted()\n-{\n-    LOCK(cs_KeyStore);\n-    if (fUseCrypto)\n-        return true;\n-    if (!mapKeys.empty())\n-        return false;\n-    fUseCrypto = true;\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::Lock()\n-{\n-    if (!SetCrypted())\n-        return false;\n-\n-    {\n-        LOCK(cs_KeyStore);\n-        vMasterKey.clear();\n-    }\n-\n-    NotifyStatusChanged(this);\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        for (; mi != mapCryptedKeys.end(); ++mi)\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-                return false;\n-            if (vchSecret.size() != 32)\n-                return false;\n-            CKey key;\n-            key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            if (key.GetPubKey() == vchPubKey)\n-                break;\n-            return false;\n-        }\n-        vMasterKey = vMasterKeyIn;\n-    }\n-    NotifyStatusChanged(this);\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n-\n-        if (IsLocked())\n-            return false;\n-\n-        std::vector<unsigned char> vchCryptedSecret;\n-        CKeyingMaterial vchSecret(key.begin(), key.end());\n-        if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret))\n-            return false;\n-\n-        if (!AddCryptedKey(pubkey, vchCryptedSecret))\n-            return false;\n-    }\n-    return true;\n-}\n-\n-\n-bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n-    }\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::GetKey(address, keyOut);\n-\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-        if (mi != mapCryptedKeys.end())\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if (!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-                return false;\n-            if (vchSecret.size() != 32)\n-                return false;\n-            keyOut.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n-\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-        if (mi != mapCryptedKeys.end())\n-        {\n-            vchPubKeyOut = (*mi).second.first;\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!mapCryptedKeys.empty() || IsCrypted())\n-            return false;\n-\n-        fUseCrypto = true;\n-        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n-        {\n-            const CKey &key = mKey.second;\n-            CPubKey vchPubKey = key.GetPubKey();\n-            CKeyingMaterial vchSecret(key.begin(), key.end());\n-            std::vector<unsigned char> vchCryptedSecret;\n-            if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n-                return false;\n-            if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n-                return false;\n-        }\n-        mapKeys.clear();\n-    }\n-    return true;\n-}"
      },
      {
        "sha": "0d55e6c81ef0da788a59142664883024946ed188",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 0,
        "deletions": 83,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/829c9203874277265613185c73f96760ae4b9356/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/829c9203874277265613185c73f96760ae4b9356/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=829c9203874277265613185c73f96760ae4b9356",
        "patch": "@@ -93,87 +93,4 @@ class CBasicKeyStore : public CKeyStore\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n \n-\n-/** Keystore which keeps the private keys encrypted.\n- * It derives from the basic key store, which is used if no encryption is active.\n- */\n-class CCryptoKeyStore : public CBasicKeyStore\n-{\n-private:\n-    CryptedKeyMap mapCryptedKeys;\n-\n-    CKeyingMaterial vMasterKey;\n-\n-    // if fUseCrypto is true, mapKeys must be empty\n-    // if fUseCrypto is false, vMasterKey must be empty\n-    bool fUseCrypto;\n-\n-protected:\n-    bool SetCrypted();\n-\n-    // will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n-\n-    bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n-\n-public:\n-    CCryptoKeyStore() : fUseCrypto(false)\n-    {\n-    }\n-\n-    bool IsCrypted() const\n-    {\n-        return fUseCrypto;\n-    }\n-\n-    bool IsLocked() const\n-    {\n-        if (!IsCrypted())\n-            return false;\n-        bool result;\n-        {\n-            LOCK(cs_KeyStore);\n-            result = vMasterKey.empty();\n-        }\n-        return result;\n-    }\n-\n-    bool Lock();\n-\n-    virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool HaveKey(const CKeyID &address) const\n-    {\n-        {\n-            LOCK(cs_KeyStore);\n-            if (!IsCrypted())\n-                return CBasicKeyStore::HaveKey(address);\n-            return mapCryptedKeys.count(address) > 0;\n-        }\n-        return false;\n-    }\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n-    {\n-        if (!IsCrypted())\n-        {\n-            CBasicKeyStore::GetKeys(setAddress);\n-            return;\n-        }\n-        setAddress.clear();\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        while (mi != mapCryptedKeys.end())\n-        {\n-            setAddress.insert((*mi).first);\n-            mi++;\n-        }\n-    }\n-\n-    /* Wallet status (encrypted, locked) changed.\n-     * Note: Called without locks held.\n-     */\n-    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n-};\n-\n #endif"
      }
    ]
  },
  {
    "sha": "5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDk0ZjhkNDZmZTNhMGYwYmNlZTkxM2Q2ZjE1ODZkY2VmMzU3NDll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-30T10:10:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-04T11:46:14Z"
      },
      "message": "Split off rpc_wallet_tests\n\nSplit wallet tests from other RPC tests.\nNow no #ifdef ENABLE_WALLET are needed anymore in either file.",
      "tree": {
        "sha": "45266d8ff7f86d3db40bd6ae54c37d9b831c638d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45266d8ff7f86d3db40bd6ae54c37d9b831c638d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "829c9203874277265613185c73f96760ae4b9356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/829c9203874277265613185c73f96760ae4b9356",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/829c9203874277265613185c73f96760ae4b9356"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 86,
      "deletions": 72
    },
    "files": [
      {
        "sha": "dccd264e5a978df299566151f8b8ae0bae971a0a",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
        "patch": "@@ -38,7 +38,7 @@ test_bitcoin_SOURCES = alert_tests.cpp \\\n   sighash_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n \n if ENABLE_WALLET\n-test_bitcoin_SOURCES += accounting_tests.cpp wallet_tests.cpp miner_tests.cpp\n+test_bitcoin_SOURCES += accounting_tests.cpp wallet_tests.cpp miner_tests.cpp rpc_wallet_tests.cpp\n endif\n \n nodist_test_bitcoin_SOURCES = $(BUILT_SOURCES)"
      },
      {
        "sha": "29195545dad9a04c5bd7cdc465eea08ac7fb029e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 71,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
        "patch": "@@ -9,9 +9,7 @@\n using namespace std;\n using namespace json_spirit;\n \n-BOOST_AUTO_TEST_SUITE(rpc_tests)\n-\n-static Array\n+Array\n createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n {\n     Array result;\n@@ -23,46 +21,7 @@ createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n     return result;\n }\n \n-#ifdef ENABLE_WALLET\n-BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n-{\n-    rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n-\n-    // old, 65-byte-long:\n-    const char address1Hex[] = \"0434e3e09f49ea168c5bbf53f877ff4206923858aab7c7e1df25bc263978107c95e35065a27ef6f1b27222db0ec97e0e895eaca603d3ee0d4c060ce3d8a00286c8\";\n-    // new, compressed:\n-    const char address2Hex[] = \"0388c2037017c62240b6b72ac1a2a5f94da790596ebd06177c8572752922165cb4\";\n-\n-    Value v;\n-    CBitcoinAddress address;\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex), false));\n-    address.SetString(v.get_str());\n-    BOOST_CHECK(address.IsValid() && address.IsScript());\n-\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex, address2Hex), false));\n-    address.SetString(v.get_str());\n-    BOOST_CHECK(address.IsValid() && address.IsScript());\n-\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(2, address1Hex, address2Hex), false));\n-    address.SetString(v.get_str());\n-    BOOST_CHECK(address.IsValid() && address.IsScript());\n-\n-    BOOST_CHECK_THROW(addmultisig(createArgs(0), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, address1Hex), false), runtime_error);\n-\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n-\n-    string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n-\n-    string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n-}\n-#endif\n-\n-static Value CallRPC(string args)\n+Value CallRPC(string args)\n {\n     vector<string> vArgs;\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n@@ -81,35 +40,8 @@ static Value CallRPC(string args)\n     }\n }\n \n-#ifdef ENABLE_WALLET\n-BOOST_AUTO_TEST_CASE(rpc_wallet)\n-{\n-    // Test RPC calls for various wallet statistics\n-    Value r;\n \n-    BOOST_CHECK_NO_THROW(CallRPC(\"listunspent\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent string\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 string\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 not_array\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 [] extra\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(r=CallRPC(\"listunspent 0 1 []\"));\n-    BOOST_CHECK(r.get_array().empty());\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress not_int\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 not_bool\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0 true\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 true extra\"), runtime_error);\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount not_int\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 not_bool\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0 true\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n-}\n-#endif\n+BOOST_AUTO_TEST_SUITE(rpc_tests)\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "2cf0fb350bba4c209f42139820e8dd85569debb9",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5094f8d46fe3a0f0bcee913d6f1586dcef35749e/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=5094f8d46fe3a0f0bcee913d6f1586dcef35749e",
        "patch": "@@ -0,0 +1,82 @@\n+#include \"rpcserver.h\"\n+#include \"rpcclient.h\"\n+\n+#include \"base58.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+using namespace json_spirit;\n+\n+extern Array createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL);\n+extern Value CallRPC(string args);\n+\n+BOOST_AUTO_TEST_SUITE(rpc_wallet_tests)\n+\n+BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n+{\n+    rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n+\n+    // old, 65-byte-long:\n+    const char address1Hex[] = \"0434e3e09f49ea168c5bbf53f877ff4206923858aab7c7e1df25bc263978107c95e35065a27ef6f1b27222db0ec97e0e895eaca603d3ee0d4c060ce3d8a00286c8\";\n+    // new, compressed:\n+    const char address2Hex[] = \"0388c2037017c62240b6b72ac1a2a5f94da790596ebd06177c8572752922165cb4\";\n+\n+    Value v;\n+    CBitcoinAddress address;\n+    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex), false));\n+    address.SetString(v.get_str());\n+    BOOST_CHECK(address.IsValid() && address.IsScript());\n+\n+    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex, address2Hex), false));\n+    address.SetString(v.get_str());\n+    BOOST_CHECK(address.IsValid() && address.IsScript());\n+\n+    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(2, address1Hex, address2Hex), false));\n+    address.SetString(v.get_str());\n+    BOOST_CHECK(address.IsValid() && address.IsScript());\n+\n+    BOOST_CHECK_THROW(addmultisig(createArgs(0), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(createArgs(1), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(createArgs(2, address1Hex), false), runtime_error);\n+\n+    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n+\n+    string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n+    BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n+\n+    string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n+    BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_CASE(rpc_wallet)\n+{\n+    // Test RPC calls for various wallet statistics\n+    Value r;\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listunspent\"));\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent string\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 string\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 not_array\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 [] extra\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(r=CallRPC(\"listunspent 0 1 []\"));\n+    BOOST_CHECK(r.get_array().empty());\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress\"));\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0\"));\n+    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress not_int\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 not_bool\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0 true\"));\n+    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 true extra\"), runtime_error);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount\"));\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0\"));\n+    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount not_int\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 not_bool\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0 true\"));\n+    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]