[
  {
    "sha": "80175472d1a9687da704c5180bda173596271b12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDE3NTQ3MmQxYTk2ODdkYTcwNGM1MTgwYmRhMTczNTk2MjcxYjEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-19T07:03:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-04T20:56:08Z"
      },
      "message": "Make CBlockIndex*es in net_processing const",
      "tree": {
        "sha": "f9986f148b949adf707a01c352551fbf871c1ace",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9986f148b949adf707a01c352551fbf871c1ace"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80175472d1a9687da704c5180bda173596271b12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80175472d1a9687da704c5180bda173596271b12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80175472d1a9687da704c5180bda173596271b12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80175472d1a9687da704c5180bda173596271b12/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dac1e5e9e887f5f6ff146e812a05bd3bf281eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dac1e5e9e887f5f6ff146e812a05bd3bf281eae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dac1e5e9e887f5f6ff146e812a05bd3bf281eae"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 29,
      "deletions": 27
    },
    "files": [
      {
        "sha": "4374b5be3e4de53bd83143e6e1e22509ccd89159",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80175472d1a9687da704c5180bda173596271b12/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80175472d1a9687da704c5180bda173596271b12/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=80175472d1a9687da704c5180bda173596271b12",
        "patch": "@@ -101,7 +101,7 @@ namespace {\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n-        CBlockIndex* pindex;                                     //!< Optional.\n+        const CBlockIndex* pindex;                               //!< Optional.\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n     };\n@@ -156,13 +156,13 @@ struct CNodeState {\n     //! List of asynchronously-determined block rejections to notify this peer about.\n     std::vector<CBlockReject> rejects;\n     //! The best known block we know this peer has announced.\n-    CBlockIndex *pindexBestKnownBlock;\n+    const CBlockIndex *pindexBestKnownBlock;\n     //! The hash of the last unknown block this peer has announced.\n     uint256 hashLastUnknownBlock;\n     //! The last full block we both have.\n-    CBlockIndex *pindexLastCommonBlock;\n+    const CBlockIndex *pindexLastCommonBlock;\n     //! The best header we have sent our peer.\n-    CBlockIndex *pindexBestHeaderSent;\n+    const CBlockIndex *pindexBestHeaderSent;\n     //! Length of current-streak of unconnecting headers announcements\n     int nUnconnectingHeaders;\n     //! Whether we've started headers synchronization with this peer.\n@@ -331,7 +331,7 @@ bool MarkBlockAsReceived(const uint256& hash) {\n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n@@ -432,7 +432,7 @@ bool CanDirectFetch(const Consensus::Params &consensusParams)\n }\n \n // Requires cs_main\n-bool PeerHasHeader(CNodeState *state, CBlockIndex *pindex)\n+bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n {\n     if (state->pindexBestKnownBlock && pindex == state->pindexBestKnownBlock->GetAncestor(pindex->nHeight))\n         return true;\n@@ -443,7 +443,7 @@ bool PeerHasHeader(CNodeState *state, CBlockIndex *pindex)\n \n /** Find the last common ancestor two blocks have.\n  *  Both pa and pb must be non-NULL. */\n-CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {\n+const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {\n     if (pa->nHeight > pb->nHeight) {\n         pa = pa->GetAncestor(pb->nHeight);\n     } else if (pb->nHeight > pa->nHeight) {\n@@ -462,7 +462,7 @@ CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n     if (count == 0)\n         return;\n \n@@ -490,8 +490,8 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n     if (state->pindexLastCommonBlock == state->pindexBestKnownBlock)\n         return;\n \n-    std::vector<CBlockIndex*> vToFetch;\n-    CBlockIndex *pindexWalk = state->pindexLastCommonBlock;\n+    std::vector<const CBlockIndex*> vToFetch;\n+    const CBlockIndex *pindexWalk = state->pindexLastCommonBlock;\n     // Never fetch further than the best block we know the peer has, or more than BLOCK_DOWNLOAD_WINDOW + 1 beyond the last\n     // linked block we have in common with this peer. The +1 is so we can detect stalling, namely if we would be able to\n     // download that next block if the window were 1 larger.\n@@ -514,7 +514,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n         // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n         // already part of our chain (and therefore don't need it even if pruned).\n-        BOOST_FOREACH(CBlockIndex* pindex, vToFetch) {\n+        BOOST_FOREACH(const CBlockIndex* pindex, vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n@@ -1049,7 +1049,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n     }\n }\n \n-uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params& chainparams) {\n+uint32_t GetFetchFlags(CNode* pfrom, const CBlockIndex* pprev, const Consensus::Params& chainparams) {\n     uint32_t nFetchFlags = 0;\n     if ((pfrom->GetLocalServices() & NODE_WITNESS) && State(pfrom->GetId())->fHaveWitness) {\n         nFetchFlags |= MSG_WITNESS_FLAG;\n@@ -1456,7 +1456,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         LOCK(cs_main);\n \n         // Find the last block the caller has in the main chain\n-        CBlockIndex* pindex = FindForkInGlobalIndex(chainActive, locator);\n+        const CBlockIndex* pindex = FindForkInGlobalIndex(chainActive, locator);\n \n         // Send the rest of the chain\n         if (pindex)\n@@ -1552,7 +1552,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         CNodeState *nodestate = State(pfrom->GetId());\n-        CBlockIndex* pindex = NULL;\n+        const CBlockIndex* pindex = NULL;\n         if (locator.IsNull())\n         {\n             // If locator is null, return the hashStop block\n@@ -1775,7 +1775,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n         }\n \n-        CBlockIndex *pindex = NULL;\n+        const CBlockIndex *pindex = NULL;\n         CValidationState state;\n         if (!ProcessNewBlockHeaders({cmpctblock.header}, state, chainparams, &pindex)) {\n             int nDoS;\n@@ -2051,7 +2051,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        CBlockIndex *pindexLast = NULL;\n+        const CBlockIndex *pindexLast = NULL;\n         {\n         LOCK(cs_main);\n         CNodeState *nodestate = State(pfrom->GetId());\n@@ -2128,8 +2128,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n         if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            vector<CBlockIndex *> vToFetch;\n-            CBlockIndex *pindexWalk = pindexLast;\n+            vector<const CBlockIndex *> vToFetch;\n+            const CBlockIndex *pindexWalk = pindexLast;\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n@@ -2151,7 +2151,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             } else {\n                 vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n-                BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vToFetch) {\n+                BOOST_REVERSE_FOREACH(const CBlockIndex *pindex, vToFetch) {\n                     if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                         // Can't download any more from this peer\n                         break;\n@@ -2740,7 +2740,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             bool fRevertToInv = ((!state.fPreferHeaders &&\n                                  (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n                                 pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n-            CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n+            const CBlockIndex *pBestIndex = NULL; // last header queued for delivery\n             ProcessBlockAvailability(pto->id); // ensure pindexBestKnownBlock is up-to-date\n \n             if (!fRevertToInv) {\n@@ -2751,7 +2751,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                 BOOST_FOREACH(const uint256 &hash, pto->vBlockHashesToAnnounce) {\n                     BlockMap::iterator mi = mapBlockIndex.find(hash);\n                     assert(mi != mapBlockIndex.end());\n-                    CBlockIndex *pindex = mi->second;\n+                    const CBlockIndex *pindex = mi->second;\n                     if (chainActive[pindex->nHeight] != pindex) {\n                         // Bail out if we reorged away from this block\n                         fRevertToInv = true;\n@@ -2828,7 +2828,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                     const uint256 &hashToAnnounce = pto->vBlockHashesToAnnounce.back();\n                     BlockMap::iterator mi = mapBlockIndex.find(hashToAnnounce);\n                     assert(mi != mapBlockIndex.end());\n-                    CBlockIndex *pindex = mi->second;\n+                    const CBlockIndex *pindex = mi->second;\n \n                     // Warn if we're announcing a block that is not on the main chain.\n                     // This should be very rare and could be optimized out.\n@@ -3013,10 +3013,10 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         vector<CInv> vGetData;\n         if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-            vector<CBlockIndex*> vToDownload;\n+            vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n-            BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n+            BOOST_FOREACH(const CBlockIndex *pindex, vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);"
      },
      {
        "sha": "a6466334a1ce5de47444cf8dda46ec8d343cc976",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80175472d1a9687da704c5180bda173596271b12/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80175472d1a9687da704c5180bda173596271b12/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=80175472d1a9687da704c5180bda173596271b12",
        "patch": "@@ -3030,12 +3030,14 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n // Exposed wrapper for AcceptBlockHeader\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n-            if (!AcceptBlockHeader(header, state, chainparams, ppindex)) {\n+            // cast away the ppindex-returns-const CBlockIndex - we're just assigning it to a CBlockIndex*\n+            // that we own and is updated non-const anyway\n+            if (!AcceptBlockHeader(header, state, chainparams, const_cast<CBlockIndex**>(ppindex))) {\n                 return false;\n             }\n         }"
      },
      {
        "sha": "be49b0e65b796baa138deecbb9ef65f30d95f7e0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80175472d1a9687da704c5180bda173596271b12/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80175472d1a9687da704c5180bda173596271b12/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=80175472d1a9687da704c5180bda173596271b12",
        "patch": "@@ -243,7 +243,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[in]  chainparams The params for the chain we want to connect to\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex=NULL);\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=NULL);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);"
      }
    ]
  },
  {
    "sha": "9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTBiMmY0YzViNWNiZGYzN2M2ODcxMGFiOGFmODc3YmQzMjJkOTlj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-04T00:28:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-04T20:56:08Z"
      },
      "message": "[qa] Make compact blocks test construction using fetch methods",
      "tree": {
        "sha": "4467286ddca04f030f8e6db13a3a7585178b0a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4467286ddca04f030f8e6db13a3a7585178b0a94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80175472d1a9687da704c5180bda173596271b12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80175472d1a9687da704c5180bda173596271b12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80175472d1a9687da704c5180bda173596271b12"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 19,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9151ecf5de36b36fe7b5b22173682f1d19aa0f3a",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
        "patch": "@@ -310,6 +310,9 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         tip = int(node.getbestblockhash(), 16)\n         assert(test_node.wait_for_block_announcement(tip))\n \n+        # Make sure we will receive a fast-announce compact block\n+        self.request_cb_announcements(test_node, node, version)\n+\n         # Now mine a block, and look at the resulting compact block.\n         test_node.clear_block_announcement()\n         block_hash = int(node.generate(1)[0], 16)\n@@ -319,27 +322,36 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         [tx.calc_sha256() for tx in block.vtx]\n         block.rehash()\n \n-        # Don't care which type of announcement came back for this test; just\n-        # request the compact block if we didn't get one yet.\n+        # Wait until the block was announced (via compact blocks)\n         wait_until(test_node.received_block_announcement, timeout=30)\n         assert(test_node.received_block_announcement())\n \n+        # Now fetch and check the compact block\n+        header_and_shortids = None\n+        with mininode_lock:\n+            assert(test_node.last_cmpctblock is not None)\n+            # Convert the on-the-wire representation to absolute indexes\n+            header_and_shortids = HeaderAndShortIDs(test_node.last_cmpctblock.header_and_shortids)\n+        self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n+\n+        # Now fetch the compact block using a normal non-announce getdata\n         with mininode_lock:\n-            if test_node.last_cmpctblock is None:\n-                test_node.clear_block_announcement()\n-                inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n-                test_node.send_message(msg_getdata([inv]))\n+            test_node.clear_block_announcement()\n+            inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n+            test_node.send_message(msg_getdata([inv]))\n \n         wait_until(test_node.received_block_announcement, timeout=30)\n         assert(test_node.received_block_announcement())\n \n-        # Now we should have the compactblock\n+        # Now fetch and check the compact block\n         header_and_shortids = None\n         with mininode_lock:\n             assert(test_node.last_cmpctblock is not None)\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_cmpctblock.header_and_shortids)\n+        self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n \n+    def check_compactblock_construction_from_block(self, version, header_and_shortids, block_hash, block):\n         # Check that we got the right block!\n         header_and_shortids.header.calc_sha256()\n         assert_equal(header_and_shortids.header.sha256, block_hash)"
      }
    ]
  },
  {
    "sha": "8baaba653ef67097eb3d3a4b4d25f907111830b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmFhYmE2NTNlZjY3MDk3ZWIzZDNhNGI0ZDI1ZjkwNzExMTgzMGIx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-19T08:47:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-04T20:56:08Z"
      },
      "message": "[qa] Avoid race in preciousblock test.\n\nIf node 0 is sufficiently fast to announce its block to node 1,\nnode 1 might already have the block by the time the\nnode_sync_via_rpc loop gets around to node 1, resulting in the\nsubmitblock result \"duplicate-inconclusive\" as node 1 has the block,\nbut prefers an alternate chain.",
      "tree": {
        "sha": "0d42670b935a5e1b6cf0868c8f0c5972fb58f20c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d42670b935a5e1b6cf0868c8f0c5972fb58f20c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8baaba653ef67097eb3d3a4b4d25f907111830b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8baaba653ef67097eb3d3a4b4d25f907111830b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8baaba653ef67097eb3d3a4b4d25f907111830b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8baaba653ef67097eb3d3a4b4d25f907111830b1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0b2f4c5b5cbdf37c68710ab8af877bd322d99c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a8062946484109ef21e618d7f35d372b95568f80",
        "filename": "qa/rpc-tests/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8baaba653ef67097eb3d3a4b4d25f907111830b1/qa/rpc-tests/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8baaba653ef67097eb3d3a4b4d25f907111830b1/qa/rpc-tests/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/preciousblock.py?ref=8baaba653ef67097eb3d3a4b4d25f907111830b1",
        "patch": "@@ -102,7 +102,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         print(\"Connect nodes and check no reorg occurs\")\n-        node_sync_via_rpc(self.nodes[0:3])\n+        node_sync_via_rpc(self.nodes[1:3])\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         assert_equal(self.nodes[0].getbestblockhash(), hashH)"
      }
    ]
  },
  {
    "sha": "180586fd44c3154af846e18850c83d0ac1296787",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODA1ODZmZDQ0YzMxNTRhZjg0NmUxODg1MGM4M2QwYWMxMjk2Nzg3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-19T07:24:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-04T20:56:08Z"
      },
      "message": "Call AcceptBlock with the block's shared_ptr instead of CBlock&",
      "tree": {
        "sha": "b12a9dcd52e79dbb852f55d3d0406dc214269505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b12a9dcd52e79dbb852f55d3d0406dc214269505"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/180586fd44c3154af846e18850c83d0ac1296787",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/180586fd44c3154af846e18850c83d0ac1296787",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/180586fd44c3154af846e18850c83d0ac1296787",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/180586fd44c3154af846e18850c83d0ac1296787/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8baaba653ef67097eb3d3a4b4d25f907111830b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8baaba653ef67097eb3d3a4b4d25f907111830b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8baaba653ef67097eb3d3a4b4d25f907111830b1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d6bd78964761375f1080be2881502b921f8588f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/180586fd44c3154af846e18850c83d0ac1296787/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/180586fd44c3154af846e18850c83d0ac1296787/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=180586fd44c3154af846e18850c83d0ac1296787",
        "patch": "@@ -3047,8 +3047,10 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n+    const CBlock& block = *pblock;\n+\n     if (fNewBlock) *fNewBlock = false;\n     AssertLockHeld(cs_main);\n \n@@ -3128,7 +3130,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n@@ -3755,7 +3757,8 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     dbp->nPos = nBlockPos;\n                 blkdat.SetLimit(nBlockPos + nSize);\n                 blkdat.SetPos(nBlockPos);\n-                CBlock block;\n+                std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n+                CBlock& block = *pblock;\n                 blkdat >> block;\n                 nRewind = blkdat.GetPos();\n \n@@ -3773,7 +3776,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(block, state, chainparams, NULL, true, dbp, NULL))\n+                    if (AcceptBlock(pblock, state, chainparams, NULL, true, dbp, NULL))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -3800,16 +3803,17 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     std::pair<std::multimap<uint256, CDiskBlockPos>::iterator, std::multimap<uint256, CDiskBlockPos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n                         std::multimap<uint256, CDiskBlockPos>::iterator it = range.first;\n-                        if (ReadBlockFromDisk(block, it->second, chainparams.GetConsensus()))\n+                        std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n+                        if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n                         {\n-                            LogPrint(\"reindex\", \"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n+                            LogPrint(\"reindex\", \"%s: Processing out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(block, dummy, chainparams, NULL, true, &it->second, NULL))\n+                            if (AcceptBlock(pblockrecursive, dummy, chainparams, NULL, true, &it->second, NULL))\n                             {\n                                 nLoaded++;\n-                                queue.push_back(block.GetHash());\n+                                queue.push_back(pblockrecursive->GetHash());\n                             }\n                         }\n                         range.first++;"
      }
    ]
  },
  {
    "sha": "69872195773870de8ee6521c9f555d60395a5ad9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTg3MjE5NTc3Mzg3MGRlOGVlNjUyMWM5ZjU1NWQ2MDM5NWE1YWQ5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-19T07:26:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T15:32:07Z"
      },
      "message": "Add a CValidationInterface::NewPoWValidBlock callback",
      "tree": {
        "sha": "1908f376ec268604207ed61bab985c5e851d9e27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1908f376ec268604207ed61bab985c5e851d9e27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69872195773870de8ee6521c9f555d60395a5ad9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69872195773870de8ee6521c9f555d60395a5ad9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69872195773870de8ee6521c9f555d60395a5ad9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69872195773870de8ee6521c9f555d60395a5ad9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "180586fd44c3154af846e18850c83d0ac1296787",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/180586fd44c3154af846e18850c83d0ac1296787",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/180586fd44c3154af846e18850c83d0ac1296787"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20d75d957f37a24b52af310138ef7d388287a245",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69872195773870de8ee6521c9f555d60395a5ad9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69872195773870de8ee6521c9f555d60395a5ad9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=69872195773870de8ee6521c9f555d60395a5ad9",
        "patch": "@@ -3096,6 +3096,11 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }\n \n+    // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n+    // (but if it does not build on our best tip, let the SendMessages loop relay it)\n+    if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n+        GetMainSignals().NewPoWValidBlock(pindex, pblock);\n+\n     int nHeight = pindex->nHeight;\n \n     // Write block to history file"
      },
      {
        "sha": "d4121a28bc72cc7aefb423ba654f82ab03fb12c8",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69872195773870de8ee6521c9f555d60395a5ad9/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69872195773870de8ee6521c9f555d60395a5ad9/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=69872195773870de8ee6521c9f555d60395a5ad9",
        "patch": "@@ -22,6 +22,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n+    g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n@@ -34,6 +35,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterAllValidationInterfaces() {\n@@ -46,4 +48,5 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n     g_signals.SyncTransaction.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n+    g_signals.NewPoWValidBlock.disconnect_all_slots();\n }"
      },
      {
        "sha": "594072719c6f2ff15d67e21daebfc1c622729ffd",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69872195773870de8ee6521c9f555d60395a5ad9/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69872195773870de8ee6521c9f555d60395a5ad9/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=69872195773870de8ee6521c9f555d60395a5ad9",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <boost/signals2/signal.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <memory>\n \n class CBlock;\n class CBlockIndex;\n@@ -40,6 +41,7 @@ class CValidationInterface {\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n     virtual void ResetRequestCount(const uint256 &hash) {};\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -66,6 +68,10 @@ struct CMainSignals {\n     boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /** Notifies listeners that a block has been successfully mined */\n     boost::signals2::signal<void (const uint256 &)> BlockFound;\n+    /**\n+     * Notifies listeners that a block which builds directly on our current tip\n+     * has been received and connected to the headers tree, though not validated yet */\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "c80209214208621b84da10895427e1e5f381d1b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODAyMDkyMTQyMDg2MjFiODRkYTEwODk1NDI3ZTFlNWYzODFkMWI4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T15:31:39Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T15:32:07Z"
      },
      "message": "Relay compact block messages prior to full block connection",
      "tree": {
        "sha": "76d664bf1f5edd8709440c09c93c4e2846ccf5a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76d664bf1f5edd8709440c09c93c4e2846ccf5a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c80209214208621b84da10895427e1e5f381d1b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80209214208621b84da10895427e1e5f381d1b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c80209214208621b84da10895427e1e5f381d1b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80209214208621b84da10895427e1e5f381d1b8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69872195773870de8ee6521c9f555d60395a5ad9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69872195773870de8ee6521c9f555d60395a5ad9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69872195773870de8ee6521c9f555d60395a5ad9"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "15bdef86fa02cc7f359945836b616ae0aa60e678",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c80209214208621b84da10895427e1e5f381d1b8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c80209214208621b84da10895427e1e5f381d1b8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c80209214208621b84da10895427e1e5f381d1b8",
        "patch": "@@ -752,6 +752,39 @@ void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIn\n     }\n }\n \n+void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n+    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, true);\n+    CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n+\n+    LOCK(cs_main);\n+\n+    static int nHighestFastAnnounce = 0;\n+    if (pindex->nHeight <= nHighestFastAnnounce)\n+        return;\n+    nHighestFastAnnounce = pindex->nHeight;\n+\n+    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, Params().GetConsensus());\n+    uint256 hashBlock(pblock->GetHash());\n+\n+    connman->ForEachNode([this, &cmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n+        // TODO: Avoid the repeated-serialization here\n+        if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n+            return;\n+        ProcessBlockAvailability(pnode->GetId());\n+        CNodeState &state = *State(pnode->GetId());\n+        // If the peer has, or we announced to them the previous block already,\n+        // but we don't think they have this one, go ahead and announce it\n+        if (state.fPreferHeaderAndIDs && (!fWitnessEnabled || state.fWantsCmpctWitness) &&\n+                !PeerHasHeader(&state, pindex) && PeerHasHeader(&state, pindex->pprev)) {\n+\n+            LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", \"PeerLogicValidation::NewPoWValidBlock\",\n+                    hashBlock.ToString(), pnode->id);\n+            connman->PushMessage(pnode, msgMaker.Make(NetMsgType::CMPCTBLOCK, cmpctblock));\n+            state.pindexBestHeaderSent = pindex;\n+        }\n+    });\n+}\n+\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);"
      },
      {
        "sha": "9d0d7944856ffbd9518e06ddc6ac18fcd69a3b33",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c80209214208621b84da10895427e1e5f381d1b8/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c80209214208621b84da10895427e1e5f381d1b8/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=c80209214208621b84da10895427e1e5f381d1b8",
        "patch": "@@ -24,6 +24,7 @@ class PeerLogicValidation : public CValidationInterface {\n     virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock);\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock);\n };\n \n struct CNodeStateStats {"
      }
    ]
  },
  {
    "sha": "9eaec08dd236a9e73c7993d25274ec913c999c63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWFlYzA4ZGQyMzZhOWU3M2M3OTkzZDI1Mjc0ZWM5MTNjOTk5YzYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-15T00:28:22Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T15:32:07Z"
      },
      "message": "Cache most-recently-announced block's shared_ptr",
      "tree": {
        "sha": "25f09cdc598e3e7170dfdeee7a17f339d15eb636",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25f09cdc598e3e7170dfdeee7a17f339d15eb636"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9eaec08dd236a9e73c7993d25274ec913c999c63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eaec08dd236a9e73c7993d25274ec913c999c63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9eaec08dd236a9e73c7993d25274ec913c999c63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eaec08dd236a9e73c7993d25274ec913c999c63/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c80209214208621b84da10895427e1e5f381d1b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80209214208621b84da10895427e1e5f381d1b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c80209214208621b84da10895427e1e5f381d1b8"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 40,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5de103d4efeabc221a8fb038afbec184c7a9affc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 11,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaec08dd236a9e73c7993d25274ec913c999c63/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaec08dd236a9e73c7993d25274ec913c999c63/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9eaec08dd236a9e73c7993d25274ec913c999c63",
        "patch": "@@ -752,6 +752,10 @@ void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIn\n     }\n }\n \n+static CCriticalSection cs_most_recent_block;\n+static std::shared_ptr<const CBlock> most_recent_block;\n+static uint256 most_recent_block_hash;\n+\n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     CBlockHeaderAndShortTxIDs cmpctblock(*pblock, true);\n     CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n@@ -766,6 +770,12 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, Params().GetConsensus());\n     uint256 hashBlock(pblock->GetHash());\n \n+    {\n+        LOCK(cs_most_recent_block);\n+        most_recent_block_hash = hashBlock;\n+        most_recent_block = pblock;\n+    }\n+\n     connman->ForEachNode([this, &cmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n         // TODO: Avoid the repeated-serialization here\n         if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n@@ -1090,6 +1100,23 @@ uint32_t GetFetchFlags(CNode* pfrom, const CBlockIndex* pprev, const Consensus::\n     return nFetchFlags;\n }\n \n+inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman& connman) {\n+    BlockTransactions resp(req);\n+    for (size_t i = 0; i < req.indexes.size(); i++) {\n+        if (req.indexes[i] >= block.vtx.size()) {\n+            LOCK(cs_main);\n+            Misbehaving(pfrom->GetId(), 100);\n+            LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->id);\n+            return;\n+        }\n+        resp.txn[i] = block.vtx[req.indexes[i]];\n+    }\n+    LOCK(cs_main);\n+    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+    connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n+}\n+\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n@@ -1529,6 +1556,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n+        std::shared_ptr<const CBlock> recent_block;\n+        {\n+            LOCK(cs_most_recent_block);\n+            if (most_recent_block_hash == req.blockhash)\n+                recent_block = most_recent_block;\n+            // Unlock cs_most_recent_block to avoid cs_main lock inversion\n+        }\n+        if (recent_block) {\n+            SendBlockTransactions(*recent_block, req, pfrom, connman);\n+            return true;\n+        }\n+\n         LOCK(cs_main);\n \n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n@@ -1558,17 +1597,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         bool ret = ReadBlockFromDisk(block, it->second, chainparams.GetConsensus());\n         assert(ret);\n \n-        BlockTransactions resp(req);\n-        for (size_t i = 0; i < req.indexes.size(); i++) {\n-            if (req.indexes[i] >= block.vtx.size()) {\n-                Misbehaving(pfrom->GetId(), 100);\n-                LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->id);\n-                return true;\n-            }\n-            resp.txn[i] = block.vtx[req.indexes[i]];\n-        }\n-        int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-        connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n+        SendBlockTransactions(block, req, pfrom, connman);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzQ5YTg1M2I5ZjQ2Y2M1OGQ1MWFhZThiNWQ0ZGNiZDExMGEyMGNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-22T23:29:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T15:32:07Z"
      },
      "message": "Cache most-recently-connected compact block",
      "tree": {
        "sha": "f2509e42993968db19fa9b117617fd0d7eadf1ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2509e42993968db19fa9b117617fd0d7eadf1ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9eaec08dd236a9e73c7993d25274ec913c999c63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eaec08dd236a9e73c7993d25274ec913c999c63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9eaec08dd236a9e73c7993d25274ec913c999c63"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "669be6e89b197506c6f1225e52274b4ece0fadac",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
        "patch": "@@ -754,10 +754,11 @@ void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIn\n \n static CCriticalSection cs_most_recent_block;\n static std::shared_ptr<const CBlock> most_recent_block;\n+static std::shared_ptr<CBlockHeaderAndShortTxIDs> most_recent_compact_block;\n static uint256 most_recent_block_hash;\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n-    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, true);\n+    std::shared_ptr<CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<CBlockHeaderAndShortTxIDs> (*pblock, true);\n     CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n     LOCK(cs_main);\n@@ -774,9 +775,10 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n         LOCK(cs_most_recent_block);\n         most_recent_block_hash = hashBlock;\n         most_recent_block = pblock;\n+        most_recent_compact_block = pcmpctblock;\n     }\n \n-    connman->ForEachNode([this, &cmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n+    connman->ForEachNode([this, &pcmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n         // TODO: Avoid the repeated-serialization here\n         if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n             return;\n@@ -789,7 +791,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n \n             LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", \"PeerLogicValidation::NewPoWValidBlock\",\n                     hashBlock.ToString(), pnode->id);\n-            connman->PushMessage(pnode, msgMaker.Make(NetMsgType::CMPCTBLOCK, cmpctblock));\n+            connman->PushMessage(pnode, msgMaker.Make(NetMsgType::CMPCTBLOCK, *pcmpctblock));\n             state.pindexBestHeaderSent = pindex;\n         }\n     });\n@@ -2859,13 +2861,24 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                     // probably means we're doing an initial-ish-sync or they're slow\n                     LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n                             vHeaders.front().GetHash().ToString(), pto->id);\n-                    //TODO: Shouldn't need to reload block from disk, but requires refactor\n-                    CBlock block;\n-                    bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams);\n-                    assert(ret);\n-                    CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n+\n                     int nSendFlags = state.fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-                    connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+\n+                    LOCK(cs_most_recent_block);\n+                    if (most_recent_block_hash == pBestIndex->GetBlockHash()) {\n+                        if (state.fWantsCmpctWitness)\n+                            connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n+                        else {\n+                            CBlockHeaderAndShortTxIDs cmpctblock(*most_recent_block, state.fWantsCmpctWitness);\n+                            connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                        }\n+                    } else {\n+                        CBlock block;\n+                        bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams);\n+                        assert(ret);\n+                        CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n+                        connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                    }\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {"
      }
    ]
  },
  {
    "sha": "9eb67f50008970d09a8253475d591cdad872692e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWI2N2Y1MDAwODk3MGQwOWE4MjUzNDc1ZDU5MWNkYWQ4NzI2OTJl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-31T17:16:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T15:32:07Z"
      },
      "message": "Ensure we meet the BIP 152 old-relay-types response requirements\n\nIn order to do this, we must call ActivateBestChain prior to\nresponding getdata requests for blocks which we announced using\ncompact blocks.\n\nFor getheaders responses we dont need code changes, but do note\nthat we must reset the bestHeaderSent so that the SendMessages call\nre-announces the header in question.\n\nWhile we could do something smarter for getblocks, calling\nActivateBestChain is simple and more obviously correct, instead of\ndoing something more similar to getheaders.\n\nSee-also the BIP clarifications at\nhttps://github.com/bitcoin/bips/pull/486",
      "tree": {
        "sha": "4aee68b3f671390337438bddefd4f64e73be3927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aee68b3f671390337438bddefd4f64e73be3927"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9eb67f50008970d09a8253475d591cdad872692e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eb67f50008970d09a8253475d591cdad872692e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9eb67f50008970d09a8253475d591cdad872692e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eb67f50008970d09a8253475d591cdad872692e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5749a853b9f46cc58d51aae8b5d4dcbd110a20ca"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fdb70d6578cf452e537c3e6ebd2a592a05e6f6ac",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eb67f50008970d09a8253475d591cdad872692e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eb67f50008970d09a8253475d591cdad872692e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9eb67f50008970d09a8253475d591cdad872692e",
        "patch": "@@ -957,6 +957,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n+                    if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                            mi->second->IsValid(BLOCK_VALID_TREE)) {\n+                        // If we have the block and all of its parents, but have not yet validated it,\n+                        // we might be in the middle of connecting it (ie in the unlock of cs_main\n+                        // before ActivateBestChain but after AcceptBlock).\n+                        // In this case, we need to run ActivateBestChain prior to checking the relay\n+                        // conditions below.\n+                        CValidationState dummy;\n+                        ActivateBestChain(dummy, Params());\n+                    }\n                     if (chainActive.Contains(mi->second)) {\n                         send = true;\n                     } else {\n@@ -1517,6 +1527,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n \n+        // We might have announced the currently-being-connected tip using a\n+        // compact block, which resulted in the peer sending a getblocks\n+        // request, which we would otherwise respond to without the new block.\n+        // To avoid this situation we simply verify that we are on our best\n+        // known chain now. This is super overkill, but we handle it better\n+        // for getheaders requests, and there are no known nodes which support\n+        // compact blocks but still use getblocks to request blocks.\n+        {\n+            CValidationState dummy;\n+            ActivateBestChain(dummy, Params());\n+        }\n+\n         // Find the last block the caller has in the main chain\n         const CBlockIndex* pindex = FindForkInGlobalIndex(chainActive, locator);\n \n@@ -1647,6 +1669,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // if our peer has chainActive.Tip() (and thus we are sending an empty\n         // headers message). In both cases it's safe to update\n         // pindexBestHeaderSent to be our tip.\n+        //\n+        // It is important that we simply reset the BestHeaderSent value here,\n+        // and not max(BestHeaderSent, newHeaderSent). We might have announced\n+        // the currently-being-connected tip using a compact block, which\n+        // resulted in the peer sending a headers request, which we respond to\n+        // without the new block. By resetting the BestHeaderSent, we ensure we\n+        // will re-announce the new block via headers (or compact blocks again)\n+        // in the SendMessages logic.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n         connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n     }"
      }
    ]
  },
  {
    "sha": "c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWFlNGZjZjdkNWQ4NWMxODJlMzZmZjZmN2E1MjlmOGE4NGFhMzcy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T20:15:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-05T20:16:34Z"
      },
      "message": "Avoid holding cs_most_recent_block while calling ReadBlockFromDisk",
      "tree": {
        "sha": "ab3ebc2399867bab9a6e07a29e66d47bca229e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab3ebc2399867bab9a6e07a29e66d47bca229e0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9eb67f50008970d09a8253475d591cdad872692e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eb67f50008970d09a8253475d591cdad872692e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9eb67f50008970d09a8253475d591cdad872692e"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "440696ae55daa7eadb9cbf80a1f3767c1a142baa",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
        "patch": "@@ -2894,15 +2894,20 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n \n                     int nSendFlags = state.fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n \n-                    LOCK(cs_most_recent_block);\n-                    if (most_recent_block_hash == pBestIndex->GetBlockHash()) {\n-                        if (state.fWantsCmpctWitness)\n-                            connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n-                        else {\n-                            CBlockHeaderAndShortTxIDs cmpctblock(*most_recent_block, state.fWantsCmpctWitness);\n-                            connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                    bool fGotBlockFromCache = false;\n+                    {\n+                        LOCK(cs_most_recent_block);\n+                        if (most_recent_block_hash == pBestIndex->GetBlockHash()) {\n+                            if (state.fWantsCmpctWitness)\n+                                connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n+                            else {\n+                                CBlockHeaderAndShortTxIDs cmpctblock(*most_recent_block, state.fWantsCmpctWitness);\n+                                connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                            }\n+                            fGotBlockFromCache = true;\n                         }\n-                    } else {\n+                    }\n+                    if (!fGotBlockFromCache) {\n                         CBlock block;\n                         bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams);\n                         assert(ret);"
      }
    ]
  },
  {
    "sha": "e6111b2398ca21f0e38333236abb0be7fa48c95f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjExMWIyMzk4Y2EyMWYwZTM4MzMzMjM2YWJiMGJlN2ZhNDhjOTVm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-07T21:19:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-07T21:19:34Z"
      },
      "message": "Make peer id logging consistent (\"peer=%d\" instead of \"peer %d\")",
      "tree": {
        "sha": "fa4017d0d51a1c603d59daaa86b233ddd0199e47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa4017d0d51a1c603d59daaa86b233ddd0199e47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6111b2398ca21f0e38333236abb0be7fa48c95f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6111b2398ca21f0e38333236abb0be7fa48c95f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6111b2398ca21f0e38333236abb0be7fa48c95f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6111b2398ca21f0e38333236abb0be7fa48c95f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ae4fcf7d5d85c182e36ff6f7a529f8a84aa372"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "77aede511de1b68d9b4c8cd89c4965806f600aa3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6111b2398ca21f0e38333236abb0be7fa48c95f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6111b2398ca21f0e38333236abb0be7fa48c95f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e6111b2398ca21f0e38333236abb0be7fa48c95f",
        "patch": "@@ -647,7 +647,7 @@ void EraseOrphansFor(NodeId peer)\n             nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n         }\n     }\n-    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n \n@@ -789,7 +789,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n         if (state.fPreferHeaderAndIDs && (!fWitnessEnabled || state.fWantsCmpctWitness) &&\n                 !PeerHasHeader(&state, pindex) && PeerHasHeader(&state, pindex->pprev)) {\n \n-            LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", \"PeerLogicValidation::NewPoWValidBlock\",\n+            LogPrint(\"net\", \"%s sending header-and-ids %s to peer=%d\\n\", \"PeerLogicValidation::NewPoWValidBlock\",\n                     hashBlock.ToString(), pnode->id);\n             connman->PushMessage(pnode, msgMaker.Make(NetMsgType::CMPCTBLOCK, *pcmpctblock));\n             state.pindexBestHeaderSent = pindex;\n@@ -2889,7 +2889,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"net\", \"%s sending header-and-ids %s to peer=%d\\n\", __func__,\n                             vHeaders.front().GetHash().ToString(), pto->id);\n \n                     int nSendFlags = state.fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;"
      }
    ]
  }
]