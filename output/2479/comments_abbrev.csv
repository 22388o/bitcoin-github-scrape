BitcoinPullTester,2013-04-07T06:39:14Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/1966c325a4e5e9de7c89f98869663272d33fab94 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16010497,16010497,
brandondahler,2013-04-07T06:52:04Z,"Build failure above appears to be a false-positive--the patch ""bitcoind-comparison.patch"" needs to be updated to be able to apply to commits after 8c222dca4f961ad13ec64d690134a40d09b20813.\n",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16010605,16010605,
yhaenggi,2013-04-07T07:22:46Z,this is just fking awesome! thanks :)\n,https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16010890,16010890,
gmaxwell,2013-04-07T07:30:52Z,"Very cool that you're working on this.  But unless I'm reading this wrong, it looks like when it hits the limit it will just stop sending messages to peers.  This would break the network and its not something we can merge.\n\nAs you note in your spreadsheet, virtually all the bandwidth usage is relaying blocks— and I expect that if you instrumented for it you'd find it was from relaying historic o",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16010963,16010963,
mikehearn,2013-04-07T15:35:21Z,"Yeah, you can't just not respond to getblocks requests, that will break things (today). Even just serving it very slowly won't work well (the peers won't switch to a faster node).\n\nLong term we need some better mechanisms for network load balancing. If a node is running out of resources, it'd be good if it could redirect peers to other nodes that have more capacity. For that we need an upgrade t",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16017106,16017106,
mikehearn,2013-04-07T15:37:27Z,You could also stop setting the version services bit indicating you can serve the chain. That way peers will think you're an SPV node and won't ask for the chain.\n,https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16017154,16017154,
brandondahler,2013-04-07T18:11:35Z,"@gmaxwell @mikehearn : Is there currently a proper way to refuse a getblocks request?  Right now there is a mechanism that will allow callers of the PushMessage functions to see if they failed to be sent or not, having them send a different response based on that is trivial.  \n\nIt sounds like closing all connections will be a good idea for nodes that have met their overall max bandwidth.  I will",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16020079,16020079,
sipa,2013-04-07T18:50:02Z,"I think the only current way to not respond to getblocks (and getdata, which is the actual expensive part) is not advertizing that you do in the first place. Which indeed means disconnecting or not setting NODE_NETWORK, right now.\n\nThis discussion will probably be needed soon anyway, if we want to move forward with pruned nodes (which only store part of the block chain, and may only relay parts ",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16020892,16020892,
jgarzik,2013-04-08T05:19:58Z,"Bandwidth limits are a common P2P knob, well within reasonable user expectations.  It has been said for years, in the Linux kernel, that  it was awful to put bandwidth limits inside each application, when instead smarter, higher level layers such as cgroups and tc/qdisc would be far more appropriate.\n\nIn theory, that is true.  In practice, it is easier to deploy immediately in a user application",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16032987,16032987,
jgarzik,2013-04-08T05:22:42Z,"Also, bandwidth limits simply makes the local node's behavior more predictable.  You can guarantee that your VPS does not exceed its bandwidth budget.  You may guarantee that bitcoind will never burst sufficiently to disrupt your game of Star Wars: The Old Republic.  There is nothing wrong with users that want this accounting ability.\n\nSee Tor's torrc for one very flexible method of specifying b",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16033046,16033046,
jgarzik,2013-04-08T05:28:50Z,"To be clear, NAK on anything that drops getblocks requests, or similar.  As @mikehearn said, ""you can't just not respond to getblocks requests, that will break things""\n",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16033183,16033183,
gmaxwell,2013-04-08T05:57:02Z,"I am absolutely not opposed to having bandwidth limits (in whatever structure people want them in— Tor has both short timescale and long term accounting limits).  I have no idea how Jeff got the idea that I (or anyone else here) doesn't fully support having them.\n\nWe just cannot have them yet, as I said: ""but we can't take limiting on those timescales until the initial block download process is ",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16033801,16033801,
jgarzik,2013-04-08T06:09:25Z,"Even a simple kb/sec upload limit would be fine.  There is no need for that to be N versions out.\n\nBandwidth limiting occurs naturally on the Internet.  Therefore, it seems exaggerated to suggest that an optional limit, mimicing a found-in-nature condition, will _break_ much of anything.\n",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16034131,16034131,
gmaxwell,2013-04-08T06:11:18Z,"@jgarzik Right now ""bitcoin took two (or more) days to synchronize"" is _the_ most common complaint I hear about the software.  This is a direct result of fetching from low bandwidth peers. I do not think that we can afford to make that worse before we make it better.\n",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16034175,16034175,
jgarzik,2013-04-08T06:22:57Z,"""make that worse"" is a severely constrained point of view.  Blocking a user from better control over their own private property (by arguing against bandwidth limits commits) is the wrong way to achieve that goal.  The net result discourages people from running peers at all, because the default software is less predictable, more susceptible to the whims of remote peers.\n\n""make that worse"" implies",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16034473,16034473,
gmaxwell,2013-04-08T06:28:32Z,"@jgarzik I fully support people controlling their own systems. **[Edit: I've toned this down a bit. I know Jeff doesn't intend to insult me, and if I've some how left him thinking that I want to restrict choice then I've been doing a very poor job expressing myself, and thats my fault not his]**\n\nRight now users can stop the high bandwidth usage by simply disabling listening. _At the moment_, be",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16034613,16034613,
sipa,2013-04-08T08:46:28Z,"@jgarzik @gmaxwell I think you're talking about different things.\n\nNobody is saying that bandwidth control in general is a bad idea. It's a common expectation from P2P software, and a very reasonable one.\n\nHowever, with the current software, effectively the first peer connected to is being used to fetch blocks from. I consider that a bug, and it needs fixing independently from this issue. None",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16039010,16039010,
mikehearn,2013-04-08T08:47:03Z,"Yeah, I'm all for a smarter networking protocol too - it's just that this patch doesn't do that, as is.\n\nAlso, bear in mind that if the networking protocol changes, everything that talks it has to be upgraded. Currently bitcoinj scores peers by ping time (amongst other things), because peers that are very slow/busy serving the chain to someone else/overloaded/bandwidth-saturated tend to have hig",https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16039035,16039035,
gavinandresen,2013-04-09T17:56:50Z,No consensus. Closing.\n,https://github.com/bitcoin/bitcoin/pull/2479#issuecomment-16129105,16129105,
