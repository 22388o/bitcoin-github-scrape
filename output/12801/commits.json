[
  {
    "sha": "3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTRkZDcyZDQyZjU2NTNhMWMzOGUwZWQ1ZmExYWE0MzY1NzQ5NjJj",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-27T16:18:58Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-28T14:26:38Z"
      },
      "message": "Add option to only notify after wallet transactions are confirmed\n\nAdds option: -walletnotifyconfirmations=<n> (default: 0) which\nworks in conjunction with walletnotify=<cmd>\nDefault value of 0 maintains existing behavior: notification will occur every time a wallet transaction is changed\nIf set to n >= 1 then notification will occur at most once after a transaction\nis confirmed by n blocks",
      "tree": {
        "sha": "a267962345c49c23fd996fc520651f46a68f41b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a267962345c49c23fd996fc520651f46a68f41b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "174d0160cb6bf77b958e1a44f1e460d35c19fdbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174d0160cb6bf77b958e1a44f1e460d35c19fdbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/174d0160cb6bf77b958e1a44f1e460d35c19fdbf"
      }
    ],
    "stats": {
      "total": 241,
      "additions": 222,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4a7c5800e1a353db5fcf19324a738e70bed87662",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
        "patch": "@@ -39,6 +39,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-walletnotifyconfirmations=<n>\", strprintf(_(\"Number of confirmations to wait before calling wallet notify command (default: %u)\"), DEFAULT_WALLETNOTIFY_NCONFIRMATIONS));\n     strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n                                \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -110,6 +111,15 @@ bool WalletParameterInteraction()\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n+    if (gArgs.IsArgSet(\"-walletnotifyconfirmations\")) {\n+        int n_confirmations = gArgs.GetArg(\"-walletnotifyconfirmations\", DEFAULT_WALLETNOTIFY_NCONFIRMATIONS);\n+        if (n_confirmations < 0) {\n+            return InitError(strprintf(_(\"-walletnotifyconfirmations must be >= 0 (value: %d)\"), n_confirmations));\n+        } else if (!gArgs.IsArgSet(\"-walletnotify\")) {\n+            return InitError(strprintf(_(\"No -walletnotify command specified but -walletnotifyconfirmations is provided (value: %d)\"), n_confirmations));\n+        }\n+    }\n+\n     if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));"
      },
      {
        "sha": "a6ce09c31426b9a8739d50235525ad54da4c4c49",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 11,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
        "patch": "@@ -34,8 +34,6 @@\n #include <assert.h>\n #include <future>\n \n-#include <boost/algorithm/string/replace.hpp>\n-\n std::vector<CWalletRef> vpwallets;\n /** Transaction fee set by the user */\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n@@ -959,15 +957,10 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     // Notify UI of new or updated transaction\n     NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n+    // if nconfirmations=0 then - notify on every transaction change\n     // notify an external script when a wallet transaction comes in or is updated\n-    std::string strCmd = gArgs.GetArg(\"-walletnotify\", \"\");\n-\n-    if (!strCmd.empty())\n-    {\n-        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        std::thread t(runCommand, strCmd);\n-        t.detach(); // thread runs free\n-    }\n+    if (m_notifier.GetConfirmationsRequired() == 0)\n+        m_notifier.AddTransaction(*wtxIn.tx);\n \n     return true;\n }\n@@ -1206,6 +1199,10 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n             it->second.MarkDirty();\n         }\n     }\n+\n+    // if we are notifying in confirmed mode and this was due to a connected block\n+    if (pindex && m_notifier.GetConfirmationsRequired() > 1)\n+        m_notifier.AddTransaction(*ptx, pindex->nHeight);\n }\n \n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n@@ -1228,6 +1225,13 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n \n void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK2(cs_main, cs_wallet);\n+\n+    // call the notifier to notify on any transactions that have now\n+    // reached the required number of block confirmations\n+    // must be done first as the bucket storing these transactions will be\n+    // emptied here and then reused below in SyncTransaction\n+    m_notifier.BlockConnected(pindex->nHeight);\n+\n     // TODO: Temporarily ensure that mempool removals are notified before\n     // connected transactions.  This shouldn't matter, but the abandoned\n     // state of transactions in our wallet is currently cleared when we\n@@ -3989,6 +3993,15 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         walletInstance->SetMaxVersion(nMaxVersion);\n     }\n \n+    if (gArgs.IsArgSet(\"-walletnotify\")) {\n+        std::string notify_command = gArgs.GetArg(\"-walletnotify\", \"\");\n+        int confirmations_required = gArgs.GetArg(\"-walletnotifyconfirmations\", DEFAULT_WALLETNOTIFY_NCONFIRMATIONS);\n+\n+        walletInstance->m_notifier = WalletTransactionNotifier(notify_command, confirmations_required, chainActive.Height());\n+        std::string notification_policy = (confirmations_required == 0) ? \"all updates\" : strprintf(\"%d confirmations\", confirmations_required);\n+        LogPrintf(\"Wallet transaction notifications enabled: command_template='%s' (notification policy: %s)\\n\", notify_command, notification_policy);\n+    }\n+\n     if (fFirstRun)\n     {\n         // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key\n@@ -4055,6 +4068,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     walletInstance->m_last_block_processed = chainActive.Tip();\n     RegisterValidationInterface(walletInstance);\n \n+    // rewind the rescan start to at least the number of confirmations required in the past\n+    int max_rescan_height = std::max<int>(0, chainActive.Height() - walletInstance->m_notifier.GetConfirmationsRequired() + 1);\n+    if (pindexRescan && pindexRescan->nHeight > max_rescan_height)\n+        pindexRescan = chainActive[max_rescan_height];\n+\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n@@ -4077,7 +4095,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n+        while (pindexRescan && pindexRescan->nHeight <= max_rescan_height && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n             pindexRescan = chainActive.Next(pindexRescan);\n         }\n "
      },
      {
        "sha": "ddbc7a2c3f05dadfb4ad1615773fbb0bc6ab0ec3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 151,
        "deletions": 8,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
        "patch": "@@ -31,6 +31,8 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/algorithm/string/replace.hpp>\n+\n typedef CWallet* CWalletRef;\n extern std::vector<CWalletRef> vpwallets;\n \n@@ -65,6 +67,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n+static const unsigned int DEFAULT_WALLETNOTIFY_NCONFIRMATIONS = 0;\n \n static const int64_t TIMESTAMP_MIN = 0;\n \n@@ -267,7 +270,7 @@ class CMerkleTx\n //Get the marginal bytes of spending the specified output\n int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet);\n \n-/** \n+/**\n  * A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n@@ -630,6 +633,138 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+class WalletTransactionNotifier\n+{\n+public:\n+    WalletTransactionNotifier() : m_active(0), m_confirmations_required(0) {}\n+\n+    WalletTransactionNotifier(std::string notify_command_template, unsigned int n_confirmations, int start_height)\n+        : m_confirmations_required(n_confirmations), m_notify_command_template(notify_command_template)\n+    {\n+        if (m_confirmations_required > 1) {\n+            m_unconfirmed_wallet_transactions.resize(m_confirmations_required - 1);\n+\n+            m_buffer_height_min = std::max(0, start_height - static_cast<int>(m_confirmations_required) + 2);\n+            m_buffer_height_max = std::max(0, start_height);\n+        }\n+\n+        m_active = (notify_command_template != \"\");\n+        if (m_active) {\n+            LogPrintf(\"WalletTransactionnotifier: notifying on wallet transactions with %d confirmations (cmd: %s)\\n\",\n+                m_confirmations_required, m_notify_command_template);\n+        }\n+    }\n+\n+    /*\n+     * Called every time a transaction requiring notification\n+     * is identified by the wallet.\n+     *\n+     * If m_confirmations_required is 1, notifies immediately\n+     * Otherwise:\n+     * Updates a circular buffer which contains transactions\n+     * from the last (m_confirmations_required - 1)\n+     * blocks.\n+     *\n+     */\n+    void AddTransaction(const CTransaction& tx, unsigned int height)\n+    {\n+        if (!m_active) return;\n+\n+        // shortcut for default and most common behavior - notify as soon as transaction is mined\n+        if (m_confirmations_required <= 1) {\n+            Notify(tx);\n+            return;\n+        }\n+\n+        // store this transaction for later notification\n+        m_unconfirmed_wallet_transactions[buffer_pos(height)].push_back(tx);\n+    }\n+\n+    void AddTransaction(const CTransaction& tx)\n+    {\n+        assert(m_confirmations_required <= 1);\n+\n+        // height does not matter when confirmations required <= 1\n+        AddTransaction(tx, 0);\n+    }\n+\n+    /*\n+     * Should be called every time a block is connected\n+     *\n+     * When m_confirmations_required > 1, notifies\n+     * of transactions that have not reached the\n+     * required confirmation count\n+     *\n+     * Internally builds a buffer of transactions from\n+     * up to the last m_confirmations_required - 1 blocks\n+     * And thus in order to function correctly, this\n+     * must be called consistently on every newly connected block\n+     */\n+    void BlockConnected(unsigned int height)\n+    {\n+        if (!m_active || m_confirmations_required <= 1 || height < m_confirmations_required) return;\n+\n+        // get the block height that now has sufficient confirmations\n+        unsigned int mature_height = height - (m_confirmations_required - 1);\n+\n+        // on reorgs we might have already notified for this height\n+        if (mature_height >= m_buffer_height_min) {\n+            assert(mature_height == m_buffer_height_min && mature_height <= m_buffer_height_max);\n+\n+            // we have this height in our circular buffer - notify\n+            // std::move() takes care of simultaneously emptying this bucket\n+            std::vector<CTransaction> to_notify(std::move(m_unconfirmed_wallet_transactions[buffer_pos(mature_height)]));\n+            for (auto it = to_notify.begin(); it != to_notify.end(); it++) {\n+                Notify(*it);\n+            }\n+            m_buffer_height_min++;\n+        } else if (height < m_buffer_height_min) {\n+            // this was a deep reorg\n+            // i.e. the height we are now connecting at is below the minimum height we've been tracking\n+            // we reset the tracked range of the buffer as we no longer have a contiguous\n+            m_buffer_height_min = height;\n+        }\n+\n+        // reset the bucket for the block just connected\n+        m_unconfirmed_wallet_transactions[buffer_pos(height)].empty();\n+        m_buffer_height_max = height;\n+    }\n+\n+    unsigned int GetConfirmationsRequired() { return m_confirmations_required; }\n+\n+private:\n+    // calls the command specified in -walletnotify for one transaction\n+    void Notify(const CTransaction& tx)\n+    {\n+        assert(m_active);\n+\n+        std::string this_command = m_notify_command_template;\n+        boost::replace_all(this_command, \"%s\", tx.GetHash().GetHex());\n+        std::thread t(runCommand, this_command);\n+        t.detach(); // thread runs free\n+    }\n+\n+    // is this notifier making notifications\n+    bool m_active;\n+\n+    // number of confirmations required for a transaction before notification occurs\n+    unsigned int m_confirmations_required;\n+\n+    // templated command for notification (all instances of %s replaced with txid)\n+    std::string m_notify_command_template;\n+\n+    // circular buffer of size (m_confirmations_required - 1) which holds transactions\n+    // for which the notify command has not yet been invoked\n+    std::vector<std::vector<CTransaction>> m_unconfirmed_wallet_transactions;\n+\n+    // stores the min and max block heights that m_unconfirmed_wallet_transactions currently holds\n+    unsigned int m_buffer_height_min;\n+    unsigned int m_buffer_height_max;\n+\n+    // maps a given chain height to a position in the circular buffer\n+    inline unsigned int buffer_pos(unsigned int height) { return height % (m_confirmations_required - 1); };\n+};\n+\n struct CoinSelectionParams\n {\n     bool use_bnb = true;\n@@ -652,7 +787,7 @@ struct CoinEligibilityFilter\n };\n \n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime\n-/** \n+/**\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n@@ -742,6 +877,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     const CBlockIndex* m_last_block_processed;\n \n+    /**\n+     * Handles notification when transactions become sufficiently confirmed\n+     * Currently parameterized by bitcoind options:\n+     * -walletnotify=<cmd>\n+     * -walletnotifyconfirmations=<n confirmations>\n+     */\n+    WalletTransactionNotifier m_notifier;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -921,7 +1064,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n-    /** \n+    /**\n      * Increment the next transaction order id\n      * @return next transaction order id\n      */\n@@ -1049,7 +1192,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n-    \n+\n     unsigned int GetKeyPoolSize()\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n@@ -1074,7 +1217,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n-    /** \n+    /**\n      * Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n@@ -1083,7 +1226,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n             const std::string &purpose,\n             ChangeType status)> NotifyAddressBookChanged;\n \n-    /** \n+    /**\n      * Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n@@ -1130,7 +1273,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /* Generates a new HD master key (will not be activated) */\n     CPubKey GenerateNewHDMasterKey();\n-    \n+\n     /* Set the current HD master key (will reset the chain child index counters)\n        Sets the master key's version based on the current wallet version (so the\n        caller must ensure the current wallet version is correct before calling\n@@ -1201,7 +1344,7 @@ class CReserveKey final : public CReserveScript\n };\n \n \n-/** \n+/**\n  * Account information.\n  * Stored in wallet with key \"acc\"+string account name.\n  */"
      },
      {
        "sha": "c2c12dc4a471d24e1717321cc656b3665539116c",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
        "patch": "@@ -60,6 +60,7 @@ def run_test(self):\n         txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n         with open(self.tx_filename, 'r') as f:\n             assert_equal(sorted(txids_rpc), sorted(f.read().splitlines()))\n+        os.remove(self.tx_filename)\n \n         # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n         self.log.info(\"test -alertnotify\")\n@@ -82,5 +83,36 @@ def run_test(self):\n         self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n         assert_equal(alert_text, alert_text2)\n \n+        self.log.info(\"test -walletnotify with -walletnotifyconfirmations > 1\")\n+        n_confirmations = 6\n+\n+        # first have a different node generate blocks that we shouldn't see confirmations for\n+        self.nodes[0].generate(n_confirmations + 1)\n+        self.sync_all()\n+        os.remove(self.tx_filename)\n+\n+        # now generate some blocks but don't bury any enough to be confirmed (they'll be confirmed later)\n+        generated_before_restart = self.nodes[1].generate(n_confirmations - 2)\n+        confirmed_txids = [t['txid'] for t in self.nodes[1].listtransactions(\"*\", 100) if t['blockhash'] in generated_before_restart]\n+\n+        # restart node with notify on confirmations enabled\n+        self.restart_node(1, [\"-walletnotifyconfirmations=%s\" % n_confirmations,\n+                              \"-walletnotify=echo %%s >> %s\" % self.tx_filename])\n+\n+        # mine some more blocks (we should receive notifications on the ones above plus all but the last n_confirmations - 1 of these)\n+        generated_after_restart = self.nodes[1].generate(block_count + n_confirmations - 1)[:-n_confirmations + 1]\n+        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # get the list of block hashes that should now be confirmed\n+        buried_blocks = generated_before_restart + generated_after_restart\n+\n+        # file content should equal the generated transaction hashes that are confirmed\n+        confirmed_txids += [t['txid'] for t in self.nodes[1].listtransactions(\"*\", 1000) if t['blockhash'] in generated_after_restart]\n+\n+        with open(self.tx_filename, 'r') as f:\n+            notified = f.read().splitlines()\n+\n+            assert_equal(sorted(confirmed_txids), sorted(notified))\n+\n if __name__ == '__main__':\n     NotificationsTest().main()"
      }
    ]
  },
  {
    "sha": "8afcf1fa910a5047a15d10015c334249358cc9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWZjZjFmYTkxMGE1MDQ3YTE1ZDEwMDE1YzMzNDI0OTM1OGNjOWI0",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-02T00:25:48Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-02T00:26:05Z"
      },
      "message": "Remove redundant log and fix off-by-one",
      "tree": {
        "sha": "57cda028733b1e8f4410d6a30d87c4e46921d085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57cda028733b1e8f4410d6a30d87c4e46921d085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8afcf1fa910a5047a15d10015c334249358cc9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afcf1fa910a5047a15d10015c334249358cc9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8afcf1fa910a5047a15d10015c334249358cc9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afcf1fa910a5047a15d10015c334249358cc9b4/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4dd72d42f5653a1c38e0ed5fa1aa436574962c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2ac23174550dd4f7c1b8a47ab1b377a24bd4c08a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afcf1fa910a5047a15d10015c334249358cc9b4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afcf1fa910a5047a15d10015c334249358cc9b4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8afcf1fa910a5047a15d10015c334249358cc9b4",
        "patch": "@@ -1201,7 +1201,7 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     }\n \n     // if we are notifying in confirmed mode and this was due to a connected block\n-    if (pindex && m_notifier.GetConfirmationsRequired() > 1)\n+    if (pindex && m_notifier.GetConfirmationsRequired() >= 1)\n         m_notifier.AddTransaction(*ptx, pindex->nHeight);\n }\n "
      },
      {
        "sha": "ea053cfaf2da0b6eda0de73a0618d8d6a1131082",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afcf1fa910a5047a15d10015c334249358cc9b4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afcf1fa910a5047a15d10015c334249358cc9b4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8afcf1fa910a5047a15d10015c334249358cc9b4",
        "patch": "@@ -649,10 +649,6 @@ class WalletTransactionNotifier\n         }\n \n         m_active = (notify_command_template != \"\");\n-        if (m_active) {\n-            LogPrintf(\"WalletTransactionnotifier: notifying on wallet transactions with %d confirmations (cmd: %s)\\n\",\n-                m_confirmations_required, m_notify_command_template);\n-        }\n     }\n \n     /*\n@@ -662,9 +658,7 @@ class WalletTransactionNotifier\n      * If m_confirmations_required is 1, notifies immediately\n      * Otherwise:\n      * Updates a circular buffer which contains transactions\n-     * from the last (m_confirmations_required - 1)\n-     * blocks.\n-     *\n+     * from the last (m_confirmations_required - 1) blocks.\n      */\n     void AddTransaction(const CTransaction& tx, unsigned int height)\n     {\n@@ -696,7 +690,7 @@ class WalletTransactionNotifier\n      * required confirmation count\n      *\n      * Internally builds a buffer of transactions from\n-     * up to the last m_confirmations_required - 1 blocks\n+     * up to the last (m_confirmations_required - 1) blocks\n      * And thus in order to function correctly, this\n      * must be called consistently on every newly connected block\n      */"
      }
    ]
  },
  {
    "sha": "23366c342da278ed8c2e337987be98db80d3871a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzM2NmMzNDJkYTI3OGVkOGMyZTMzNzk4N2JlOThkYjgwZDM4NzFh",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-04T00:15:08Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-04T00:15:08Z"
      },
      "message": "fix flake8 F841 unused variable warning in functional test",
      "tree": {
        "sha": "56a00ecc27675f03b81d38d3734d1ba41388ff9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56a00ecc27675f03b81d38d3734d1ba41388ff9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23366c342da278ed8c2e337987be98db80d3871a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23366c342da278ed8c2e337987be98db80d3871a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23366c342da278ed8c2e337987be98db80d3871a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23366c342da278ed8c2e337987be98db80d3871a/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8afcf1fa910a5047a15d10015c334249358cc9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afcf1fa910a5047a15d10015c334249358cc9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8afcf1fa910a5047a15d10015c334249358cc9b4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "eb1dea59a70a973833faa422ed8f340eb19fbb05",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23366c342da278ed8c2e337987be98db80d3871a/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23366c342da278ed8c2e337987be98db80d3871a/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=23366c342da278ed8c2e337987be98db80d3871a",
        "patch": "@@ -103,9 +103,6 @@ def run_test(self):\n         generated_after_restart = self.nodes[1].generate(block_count + n_confirmations - 1)[:-n_confirmations + 1]\n         wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n \n-        # get the list of block hashes that should now be confirmed\n-        buried_blocks = generated_before_restart + generated_after_restart\n-\n         # file content should equal the generated transaction hashes that are confirmed\n         confirmed_txids += [t['txid'] for t in self.nodes[1].listtransactions(\"*\", 1000) if t['blockhash'] in generated_after_restart]\n "
      }
    ]
  },
  {
    "sha": "c7bee6f9c37732e75cc882d57dbde642939bba3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2JlZTZmOWMzNzczMmU3NWNjODgyZDU3ZGJkZTY0MjkzOWJiYTNk",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-07T23:28:50Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-07T23:28:50Z"
      },
      "message": "Address review comments",
      "tree": {
        "sha": "8aabab7c702a34b15542f69b486cb356e886a102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aabab7c702a34b15542f69b486cb356e886a102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7bee6f9c37732e75cc882d57dbde642939bba3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7bee6f9c37732e75cc882d57dbde642939bba3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7bee6f9c37732e75cc882d57dbde642939bba3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7bee6f9c37732e75cc882d57dbde642939bba3d/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23366c342da278ed8c2e337987be98db80d3871a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23366c342da278ed8c2e337987be98db80d3871a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23366c342da278ed8c2e337987be98db80d3871a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c06bd1720779ca44263d4891f9d995bf09d1ca42",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7bee6f9c37732e75cc882d57dbde642939bba3d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7bee6f9c37732e75cc882d57dbde642939bba3d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c7bee6f9c37732e75cc882d57dbde642939bba3d",
        "patch": "@@ -959,8 +959,9 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n     // if nconfirmations=0 then - notify on every transaction change\n     // notify an external script when a wallet transaction comes in or is updated\n-    if (m_notifier.GetConfirmationsRequired() == 0)\n+    if (m_notifier.GetConfirmationsRequired() == 0) {\n         m_notifier.AddTransaction(*wtxIn.tx);\n+    }\n \n     return true;\n }\n@@ -1201,8 +1202,9 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     }\n \n     // if we are notifying in confirmed mode and this was due to a connected block\n-    if (pindex && m_notifier.GetConfirmationsRequired() >= 1)\n+    if (pindex && m_notifier.GetConfirmationsRequired() >= 1) {\n         m_notifier.AddTransaction(*ptx, pindex->nHeight);\n+    }\n }\n \n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {"
      },
      {
        "sha": "faa12171d90c02f4e264ad615f6af085b8f3a2ad",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7bee6f9c37732e75cc882d57dbde642939bba3d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7bee6f9c37732e75cc882d57dbde642939bba3d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c7bee6f9c37732e75cc882d57dbde642939bba3d",
        "patch": "@@ -686,8 +686,8 @@ class WalletTransactionNotifier\n      * Should be called every time a block is connected\n      *\n      * When m_confirmations_required > 1, notifies\n-     * of transactions that have not reached the\n-     * required confirmation count\n+     * of transactions that have now reached the\n+     * required number of confirmations\n      *\n      * Internally builds a buffer of transactions from\n      * up to the last (m_confirmations_required - 1) blocks"
      }
    ]
  },
  {
    "sha": "6163f6d1885348d8daee604a47af8d573e97c352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTYzZjZkMTg4NTM0OGQ4ZGFlZTYwNGE0N2FmOGQ1NzNlOTdjMzUy",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-09T23:42:28Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-09T23:42:28Z"
      },
      "message": "Add reorg test case (from: @jamesob)",
      "tree": {
        "sha": "2b020d05cd4558ba1e0dc78761ec8b76fb22065e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b020d05cd4558ba1e0dc78761ec8b76fb22065e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6163f6d1885348d8daee604a47af8d573e97c352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6163f6d1885348d8daee604a47af8d573e97c352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6163f6d1885348d8daee604a47af8d573e97c352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6163f6d1885348d8daee604a47af8d573e97c352/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7bee6f9c37732e75cc882d57dbde642939bba3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7bee6f9c37732e75cc882d57dbde642939bba3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7bee6f9c37732e75cc882d57dbde642939bba3d"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 55,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2161d320aebcae40b75763e1fd73063405ed152d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6163f6d1885348d8daee604a47af8d573e97c352/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6163f6d1885348d8daee604a47af8d573e97c352/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6163f6d1885348d8daee604a47af8d573e97c352",
        "patch": "@@ -720,7 +720,7 @@ class WalletTransactionNotifier\n         }\n \n         // reset the bucket for the block just connected\n-        m_unconfirmed_wallet_transactions[buffer_pos(height)].empty();\n+        m_unconfirmed_wallet_transactions[buffer_pos(height)].clear();\n         m_buffer_height_max = height;\n     }\n "
      },
      {
        "sha": "0ad6cac24ee1cde49131e17c84a976ffe12d7d3b",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 54,
        "deletions": 2,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6163f6d1885348d8daee604a47af8d573e97c352/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6163f6d1885348d8daee604a47af8d573e97c352/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=6163f6d1885348d8daee604a47af8d573e97c352",
        "patch": "@@ -6,7 +6,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, wait_until, connect_nodes_bi\n+from test_framework.util import assert_equal, wait_until, connect_nodes_bi, sync_blocks\n \n class NotificationsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -108,8 +108,60 @@ def run_test(self):\n \n         with open(self.tx_filename, 'r') as f:\n             notified = f.read().splitlines()\n-\n             assert_equal(sorted(confirmed_txids), sorted(notified))\n \n+        # test reorgs of various heights\n+        os.remove(self.tx_filename)\n+        for i in range(1, n_confirmations):\n+            self.test_reorg(n_confirmations, i)\n+\n+    def test_reorg(self, n_confirmations, depth):\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        sync_blocks(self.nodes, timeout=5)\n+\n+        # Ensure -walletnotifyconfirmations behaves correctly when a transaction\n+        # is introduced which is later reorg'd out.\n+        #\n+        # 1. Mine a block on node1 whose coinbase is added to be notified on after two\n+        #    additional confirmations. (height = n + 0)\n+        #\n+        # 2. Reorg with a longer chain (height = n + 2) which makes the transaction\n+        #    we introduced in (1) stale.\n+        #\n+        # 3. Assert that we haven't notified on the stale transaction.\n+        #\n+        self.log.info(\"Test correctness of -walletnotifyconfirmations during a reorg nconfirmations=%s depth=%s\",\n+                      n_confirmations, depth)\n+        self.restart_node(0)\n+        self.restart_node(1, [\"-walletnotifyconfirmations=%s\" % n_confirmations,\n+                              \"-walletnotify=echo %%s >> %s\" % self.tx_filename])\n+        # Leave nodes unconnected to enable a reorg from node0 onto node1 later.\n+\n+        # 1. Generate a block only seen by node1.\n+        #\n+        # We should receive a notification about the coinbase txn in this block\n+        # after 2 more block discoveries.\n+        #\n+        block_1_hash = self.nodes[1].generate(depth)[-1]\n+        block_1 = self.nodes[1].getblock(block_1_hash)\n+\n+        assert_equal(self.nodes[1].getbestblockhash(), block_1_hash)\n+\n+        # 2. Now, trigger a reorg that will remove the blocks that were just mined\n+        fork_blockhashes = self.nodes[0].generate(n_confirmations)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        sync_blocks(self.nodes, timeout=5)\n+\n+        # Ensure the reorg has happened.\n+        for num in (0, 1):\n+            assert_equal(self.nodes[num].getbestblockhash(), fork_blockhashes[-1])\n+\n+        # Ensure that no confirmation notifications were generated\n+        assert not os.path.isfile(self.tx_filename)\n+\n+        # Ensure that block 1 has been reorg'd out of the main chain.\n+        assert self.nodes[1].getblock(block_1_hash)['confirmations'] == -1\n+\n+\n if __name__ == '__main__':\n     NotificationsTest().main()"
      }
    ]
  }
]