promag,2018-03-27T21:36:49Z,NACK at quick glance. Why add complexity when it can be done outside? What happens to the queue when it restarts? Are the notifications lost? I don't think we should track state on behalf of the client.,https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376684018,376684018,
skeees,2018-03-27T21:46:09Z,"re recovering state upon restart - if this option is enabled the wallet rescans the last n_confirmations_required blocks to repopulate this queue (see link below): the expectation is that the number of confirmations desired is a number closer to 6 than to 100k - so the rescan shouldn't add tremendous overhead. Of course, the number of confirmations desired is up to the user, and is off by default.",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376686454,376686454,
ryanofsky,2018-03-27T22:01:14Z,"@promag this seems like it could be significantly more efficient than the suggested workaround from https://github.com/bitcoin/bitcoin/issues/10021#issuecomment-287344757 of calling listtransactions. Or did you have a different workaround in mind?\n\nFrom the original issue, it sounds like lack of a configurable notifications gives wallet users an incentive to only wait for a single confirmation",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376690262,376690262,
skeees,2018-03-28T14:27:57Z,Rebased to latest master (should solve test failures),https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376906771,376906771,
promag,2018-03-30T08:46:01Z,I'll review and test. I understand this feature is very desirable as it can save a lot of code for clients that want the Nth confirmation.,https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-377480021,377480021,
skeees,2018-04-04T20:33:11Z,"(will address other comments, re: map/vec)\nThe tricky bits here involved being correct around chain re-orgs and I don't think a map makes that any less complex. It also doesn't let you discard the dependency on reliable invocation of the `BlockConnected` signal without introducing a lot more state, inefficient chain scanning, or discarding some of the guarantees about notification:\n\nHere's a",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-378735754,378735754,
jnewbery,2018-04-09T18:14:30Z,"Apologies for only coming to this after it's already received some review, but I'm a concept NACK on this, and think that the method suggested here: https://github.com/bitcoin/bitcoin/issues/10021#issuecomment-287306406 is a good solution to this problem.\n\nAdding this to the server seems to be adding a lot of complexity for very little gain. There are edge cases to consider (eg transactions ge",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379844467,379844467,
jamesob,2018-04-09T18:28:43Z,"Maybe a moot point now given some concept NACKs, but the implementation as written is faulty for a particular reorg case ([failing test here](https://github.com/jamesob/bitcoin/commit/92b620f26127b93f2b6fd389516f5e7b7d09ac7e)). Feel free to cherry-pick that commit should work on this continue.\n\nI appreciate the good explanation of your initial implementation @skeees, but I still think this app",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379848844,379848844,
skeees,2018-04-10T00:02:30Z,"Thanks for the test case! The cause is rather embarrassing - due to my lack of familiarity with c++ I was calling std::vector::empty() (a boolean test for emptiness) instead of std::vector::clear() (actually empties the vector). I've fixed that and incorporated your test @jamesob and (slightly tweaked so it tests re-orgs at multiple depths)\n\nRe the concept NACK in general - if reliance on zero",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379930111,379930111,
jamesob,2018-04-10T01:03:00Z,"Ironically the one provision that tends me towards a concept ACK doesn't jibe with reusing this sort of logic within parts of bitcoind, e.g. `GetDepthInMainChain()`.\n\nWith the merge of #10244 we're finally making concrete steps towards gui/wallet/node separation. I think it's fine for the wallet to encompass useful (if nonessential) features like this, especially once we have firmer separation",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379940642,379940642,
skeees,2018-04-10T01:14:42Z,"Sorry if I was unclear, but I think we're on the same page. What I was\ntrying to say was with this sort of state in wallet, you wouldn't need to\nrely quite as much on GetDepthInMainChain() which should further the goal\nof separation.\n\nYes, of course I'll amend the commit as you suggest - did not realize I\ncould do that -- along with c++, I learn new things about git every day.\n\nOn Mon, Apr",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379942447,379942447,
ryanofsky,2018-04-10T12:21:09Z,"I wonder if it the concerns about code complexity would be addressed by splitting up the general purpose confirmation tracking code from the application-specific wallet notification logic. If you pulled the `notify_command_template` stuff out of `WalletTransactionNotifier` class, you could be left with a more general purpose class like:\n\n```c++\nclass ConfirmationTracker\n{\npublic:\n   //",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-380078733,380078733,
skeees,2018-04-10T13:37:17Z,"That sounds like a great idea - and probably the right place for this to live to be more generally useful. If I see no objections to the principle of the entire thing, I'll refactor along those lines and update in the coming days",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-380100756,380100756,
ryanofsky,2018-04-10T14:03:46Z,"On the `GetDepthInMainChain` topic from https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379930111 and https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-379940642, I think a more direct approach to tracking transaction confirmations inside the wallet might just be to add a new field to CMerkleTx. I described an idea for this here: https://github.com/bitcoin/bitcoin/pull/10973#is",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-380110302,380110302,
luke-jr,2018-06-12T17:27:05Z,I concur with the concept NACKs.,https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-396669926,396669926,
skeees,2018-06-19T18:45:54Z,"Enough NACKs that I'm going to close this.\nFor those who have nacked (@luke-jr @jnewbery ) - was this a matter of the way it is implemented or more that this feature is completely undesired in the reference wallet implementation (fwiw, it seems like it is not infrequently requested) - if the latter, I'm happy to refactor implementation and open a new pr.",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-398504626,398504626,
jnewbery,2018-06-19T20:30:58Z,"> was this a matter of the way it is implemented or more that this feature is completely undesired in the reference wallet implementation\n\nI didn't review the implementation. I was just NACKish on the concept.",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-398535078,398535078,
promag,2018-06-19T20:40:04Z,"IMO we should avoid adding features to the current wallet if the plan is to separate from the node + multiprocess.\n\nRe https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-376690262\n\n> Or did you have a different workaround in mind?\n\n@ryanofsky a RPC client can track confirmations without calling `listtransactions`.",https://github.com/bitcoin/bitcoin/pull/12801#issuecomment-398537881,398537881,
jamesob,2018-04-03T19:37:34Z,Unused symbol (causing the Travis failure). You can catch stuff like this locally by running ` ../../contrib/devtools/lint-python.sh` from within `test/functional`.,https://github.com/bitcoin/bitcoin/pull/12801#discussion_r178938513,178938513,test/functional/feature_notifications.py
skeees,2018-04-04T00:16:17Z,Thanks! Updated,https://github.com/bitcoin/bitcoin/pull/12801#discussion_r178997304,178997304,test/functional/feature_notifications.py
jamesob,2018-04-04T18:13:16Z,Nit: braces (per [dev notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style)),https://github.com/bitcoin/bitcoin/pull/12801#discussion_r179235020,179235020,src/wallet/wallet.cpp
jamesob,2018-04-04T18:13:25Z,Nit: braces (per [dev notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style)),https://github.com/bitcoin/bitcoin/pull/12801#discussion_r179235064,179235064,src/wallet/wallet.cpp
jamesob,2018-04-04T18:41:06Z,"Should this be ""that have reached"" vs. ""that have not reached""?",https://github.com/bitcoin/bitcoin/pull/12801#discussion_r179243476,179243476,src/wallet/wallet.h
