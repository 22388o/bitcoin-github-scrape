[
  {
    "sha": "77c54b270dd3b469d662c8f69e06f7b00fc4136d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2M1NGIyNzBkZDNiNDY5ZDY2MmM4ZjY5ZTA2ZjdiMDBmYzQxMzZk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T16:49:11Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-28T15:24:33Z"
      },
      "message": "[net] listbanned RPC and QT should show correct banned subnets",
      "tree": {
        "sha": "bece88821c751bce967fa2c918bf6227974f93c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bece88821c751bce967fa2c918bf6227974f93c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c54b270dd3b469d662c8f69e06f7b00fc4136d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c54b270dd3b469d662c8f69e06f7b00fc4136d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77c54b270dd3b469d662c8f69e06f7b00fc4136d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c54b270dd3b469d662c8f69e06f7b00fc4136d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb007e4346cf49357d104e08c3ccc027570b734d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb007e4346cf49357d104e08c3ccc027570b734d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb007e4346cf49357d104e08c3ccc027570b734d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bd2b177ef365cc0b2e4e28a5c6659148bae651e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c54b270dd3b469d662c8f69e06f7b00fc4136d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c54b270dd3b469d662c8f69e06f7b00fc4136d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=77c54b270dd3b469d662c8f69e06f7b00fc4136d",
        "patch": "@@ -418,10 +418,10 @@ void CConnman::DumpBanlist()\n \n     CBanDB bandb;\n     banmap_t banmap;\n-    SetBannedSetDirty(false);\n     GetBanned(banmap);\n-    if (!bandb.Write(banmap))\n-        SetBannedSetDirty(true);\n+    if (bandb.Write(banmap)) {\n+        SetBannedSetDirty(false);\n+    }\n \n     LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n         banmap.size(), GetTimeMillis() - nStart);\n@@ -541,6 +541,8 @@ bool CConnman::Unban(const CSubNet &subNet) {\n void CConnman::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n+    // Sweep the banlist so expired bans are not returned\n+    SweepBanned();\n     banMap = setBanned; //create a thread safe copy\n }\n "
      }
    ]
  },
  {
    "sha": "d6732d832aa901e733e63799260d409821a2c37a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjczMmQ4MzJhYTkwMWU3MzNlNjM3OTkyNjBkNDA5ODIxYTJjMzdh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-25T14:11:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-28T15:24:33Z"
      },
      "message": "[tests] update disconnect_ban.py test case to work with listbanned",
      "tree": {
        "sha": "563f094a9d277316c5d59bc4d24b7d0630bb5cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/563f094a9d277316c5d59bc4d24b7d0630bb5cb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6732d832aa901e733e63799260d409821a2c37a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6732d832aa901e733e63799260d409821a2c37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6732d832aa901e733e63799260d409821a2c37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6732d832aa901e733e63799260d409821a2c37a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77c54b270dd3b469d662c8f69e06f7b00fc4136d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c54b270dd3b469d662c8f69e06f7b00fc4136d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77c54b270dd3b469d662c8f69e06f7b00fc4136d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6ec42c8abaeb71552afde5ae6798a6c772ef4342",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6732d832aa901e733e63799260d409821a2c37a/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6732d832aa901e733e63799260d409821a2c37a/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=d6732d832aa901e733e63799260d409821a2c37a",
        "patch": "@@ -30,7 +30,7 @@ def run_test(self):\n         self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0)\n+        assert wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n@@ -64,7 +64,7 @@ def run_test(self):\n         self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n         listBeforeShutdown = self.nodes[1].listbanned()\n         assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])\n-        wait_until(lambda: len(self.nodes[1].listbanned()) == 3)\n+        assert wait_until(lambda: len(self.nodes[1].listbanned()) == 3, timeout=10)\n \n         stop_node(self.nodes[1], 1)\n \n@@ -78,7 +78,7 @@ def run_test(self):\n         self.nodes[1].clearbanned()\n         connect_nodes_bi(self.nodes, 0, 1)\n \n-        self.log.info(\"Test disconnectrnode RPCs\")\n+        self.log.info(\"Test disconnectnode RPCs\")\n \n         self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n@@ -91,7 +91,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         self.nodes[0].disconnectnode(address=address1)\n-        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n+        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n@@ -102,7 +102,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by node id\")\n         id1 = self.nodes[0].getpeerinfo()[0]['id']\n         self.nodes[0].disconnectnode(nodeid=id1)\n-        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n+        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['id'] == id1]\n \n if __name__ == '__main__':"
      }
    ]
  }
]