[
  {
    "sha": "620361fce8b3d3c274a7b2beaed199b65ac4fb41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjAzNjFmY2U4YjNkM2MyNzRhN2IyYmVhZWQxOTliNjVhYzRmYjQx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-26T22:07:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-27T16:47:03Z"
      },
      "message": "Fix accidental use of the addition assignment operator (\"+=\"). Remove newlines from error message.",
      "tree": {
        "sha": "d6c4a1daffd680b3f8b3f55ae296209344f5080d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6c4a1daffd680b3f8b3f55ae296209344f5080d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/620361fce8b3d3c274a7b2beaed199b65ac4fb41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/620361fce8b3d3c274a7b2beaed199b65ac4fb41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/620361fce8b3d3c274a7b2beaed199b65ac4fb41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/620361fce8b3d3c274a7b2beaed199b65ac4fb41/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f58674a20a127f104409e11c5c11591533ddf360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f58674a20a127f104409e11c5c11591533ddf360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f58674a20a127f104409e11c5c11591533ddf360"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a648785ad40a39d6541c22151ab8bd80cfa7bb0d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/620361fce8b3d3c274a7b2beaed199b65ac4fb41/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/620361fce8b3d3c274a7b2beaed199b65ac4fb41/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=620361fce8b3d3c274a7b2beaed199b65ac4fb41",
        "patch": "@@ -927,7 +927,7 @@ bool AppInitParameterInteraction()\n     // also see: InitParameterInteraction()\n \n     if (!fs::is_directory(GetBlocksDir(false))) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\\n\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n     // if using block pruning, then disallow txindex"
      },
      {
        "sha": "9c76a8538408587e02a80a9aa7b4826ffb45618e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/620361fce8b3d3c274a7b2beaed199b65ac4fb41/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/620361fce8b3d3c274a7b2beaed199b65ac4fb41/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=620361fce8b3d3c274a7b2beaed199b65ac4fb41",
        "patch": "@@ -4109,7 +4109,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                InitError(_(\"Unable to generate keys\") += \"\\n\");\n+                InitError(_(\"Unable to generate keys\"));\n                 return nullptr;\n             }\n         }\n@@ -4137,7 +4137,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n \n         // Top up the keypool\n         if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n-            InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n+            InitError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }\n "
      }
    ]
  }
]