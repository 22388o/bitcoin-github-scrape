[
  {
    "sha": "738835d7b8ab80bd0812805f197471c54c72d7f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Mzg4MzVkN2I4YWI4MGJkMDgxMjgwNWYxOTc0NzFjNTRjNzJkN2Y5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-04T07:34:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-04T13:49:15Z"
      },
      "message": "Document RPC error codes\n\nReplace all \"magic values\" in RPCError(...) by constants.",
      "tree": {
        "sha": "f5ac75781dada5de5b30d53ba17b7e0674c57e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5ac75781dada5de5b30d53ba17b7e0674c57e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/738835d7b8ab80bd0812805f197471c54c72d7f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738835d7b8ab80bd0812805f197471c54c72d7f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/738835d7b8ab80bd0812805f197471c54c72d7f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738835d7b8ab80bd0812805f197471c54c72d7f9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0547b02af78dcf2d84e4905b56c7f95d9582b2f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0547b02af78dcf2d84e4905b56c7f95d9582b2f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0547b02af78dcf2d84e4905b56c7f95d9582b2f9"
      }
    ],
    "stats": {
      "total": 230,
      "additions": 133,
      "deletions": 97
    },
    "files": [
      {
        "sha": "02219757367d09c913ceab796da72d77259062b0",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -69,7 +69,7 @@ void RPCTypeCheck(const Array& params,\n         {\n             string err = strprintf(\"Expected type %s, got %s\",\n                                    Value_type_name[t], Value_type_name[v.type()]);\n-            throw JSONRPCError(-3, err);\n+            throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n         i++;\n     }\n@@ -83,13 +83,13 @@ void RPCTypeCheck(const Object& o,\n     {\n         const Value& v = find_value(o, t.first);\n         if (!fAllowNull && v.type() == null_type)\n-            throw JSONRPCError(-3, strprintf(\"Missing %s\", t.first.c_str()));\n+            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first.c_str()));\n \n         if (!((v.type() == t.second) || (fAllowNull && (v.type() == null_type))))\n         {\n             string err = strprintf(\"Expected type %s for %s, got %s\",\n                                    Value_type_name[t.second], t.first.c_str(), Value_type_name[v.type()]);\n-            throw JSONRPCError(-3, err);\n+            throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n     }\n }\n@@ -98,10 +98,10 @@ int64 AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n-        throw JSONRPCError(-3, \"Invalid amount\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     int64 nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n-        throw JSONRPCError(-3, \"Invalid amount\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }\n \n@@ -486,8 +486,8 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     // Send error reply from json-rpc error object\n     int nStatus = 500;\n     int code = find_value(objError, \"code\").get_int();\n-    if (code == -32600) nStatus = 400;\n-    else if (code == -32601) nStatus = 404;\n+    if (code == RPC_INVALID_REQUEST) nStatus = 400;\n+    else if (code == RPC_METHOD_NOT_FOUND) nStatus = 404;\n     string strReply = JSONRPCReply(Value::null, objError, id);\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n@@ -854,7 +854,7 @@ void JSONRequest::parse(const Value& valRequest)\n {\n     // Parse request\n     if (valRequest.type() != obj_type)\n-        throw JSONRPCError(-32600, \"Invalid Request object\");\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n     const Object& request = valRequest.get_obj();\n \n     // Parse id now so errors from here on will have the id\n@@ -863,9 +863,9 @@ void JSONRequest::parse(const Value& valRequest)\n     // Parse method\n     Value valMethod = find_value(request, \"method\");\n     if (valMethod.type() == null_type)\n-        throw JSONRPCError(-32600, \"Missing method\");\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n     if (valMethod.type() != str_type)\n-        throw JSONRPCError(-32600, \"Method must be a string\");\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n         printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n@@ -877,7 +877,7 @@ void JSONRequest::parse(const Value& valRequest)\n     else if (valParams.type() == null_type)\n         params = Array();\n     else\n-        throw JSONRPCError(-32600, \"Params must be an array\");\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n }\n \n static Object JSONRPCExecOne(const Value& req)\n@@ -898,7 +898,7 @@ static Object JSONRPCExecOne(const Value& req)\n     catch (std::exception& e)\n     {\n         rpc_result = JSONRPCReplyObj(Value::null,\n-                                     JSONRPCError(-32700, e.what()), jreq.id);\n+                                     JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n     }\n \n     return rpc_result;\n@@ -970,7 +970,7 @@ void ThreadRPCServer3(void* parg)\n             // Parse request\n             Value valRequest;\n             if (!read_string(strRequest, valRequest))\n-                throw JSONRPCError(-32700, \"Parse error\");\n+                throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n             string strReply;\n \n@@ -987,7 +987,7 @@ void ThreadRPCServer3(void* parg)\n             } else if (valRequest.type() == array_type)\n                 strReply = JSONRPCExecBatch(valRequest.get_array());\n             else\n-                throw JSONRPCError(-32700, \"Top-level object parse error\");\n+                throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n             conn->stream() << HTTPReply(200, strReply, fRun) << std::flush;\n         }\n@@ -998,7 +998,7 @@ void ThreadRPCServer3(void* parg)\n         }\n         catch (std::exception& e)\n         {\n-            ErrorReply(conn->stream(), JSONRPCError(-32700, e.what()), jreq.id);\n+            ErrorReply(conn->stream(), JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n             break;\n         }\n     }\n@@ -1015,13 +1015,13 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n-        throw JSONRPCError(-32601, \"Method not found\");\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n \n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n     if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n         !pcmd->okSafeMode)\n-        throw JSONRPCError(-2, string(\"Safe mode: \") + strWarning);\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n \n     try\n     {\n@@ -1039,7 +1039,7 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     }\n     catch (std::exception& e)\n     {\n-        throw JSONRPCError(-1, e.what());\n+        throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }\n }\n "
      },
      {
        "sha": "8154f3242c7e9c89b1f7ef5a69230547cb0572c2",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -18,6 +18,42 @@ class CBlockIndex;\n \n #include \"util.h\"\n \n+// Bitcoin RPC error codes\n+enum RPCErrorCode\n+{\n+    // Standard JSON-RPC 2.0 errors\n+    RPC_INVALID_REQUEST  = -32600,\n+    RPC_METHOD_NOT_FOUND = -32601,\n+    RPC_INVALID_PARAMS   = -32602,\n+    RPC_INTERNAL_ERROR   = -32603,\n+    RPC_PARSE_ERROR      = -32700,\n+\n+    // General application defined errors\n+    RPC_MISC_ERROR                  = -1,  // std::exception thrown in command handling\n+    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  // Server is in safe mode, and command is not allowed in safe mode\n+    RPC_TYPE_ERROR                  = -3,  // Unexpected type was passed as parameter\n+    RPC_INVALID_ADDRESS_OR_KEY      = -5,  // Invalid address or key\n+    RPC_OUT_OF_MEMORY               = -7,  // Ran out of memory during operation\n+    RPC_INVALID_PARAMETER           = -8,  // Invalid, missing or duplicate parameter\n+    RPC_DATABASE_ERROR              = -20, // Database error\n+    RPC_DESERIALIZATION_ERROR       = -22, // Error parsing or validating structure in raw format\n+\n+    // P2P client errors\n+    RPC_CLIENT_NOT_CONNECTED        = -9,  // Bitcoin is not connected\n+    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, // Still downloading initial blocks\n+\n+    // Wallet errors\n+    RPC_WALLET_ERROR                = -4,  // Unspecified problem with wallet (key not found etc.)\n+    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  // Not enough funds in wallet or account\n+    RPC_WALLET_INVALID_ACCOUNT_NAME = -11, // Invalid account name\n+    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, // Keypool ran out, call keypoolrefill first\n+    RPC_WALLET_UNLOCK_NEEDED        = -13, // Enter the wallet passphrase with walletpassphrase first\n+    RPC_WALLET_PASSPHRASE_INCORRECT = -14, // The wallet passphrase entered was incorrect\n+    RPC_WALLET_WRONG_ENC_STATE      = -15, // Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)\n+    RPC_WALLET_ENCRYPTION_FAILED    = -16, // Failed to encrypt the wallet\n+    RPC_WALLET_ALREADY_UNLOCKED     = -17, // Wallet is already unlocked\n+};\n+\n json_spirit::Object JSONRPCError(int code, const std::string& message);\n \n void ThreadRPCServer(void* parg);"
      },
      {
        "sha": "2dfdf584222d60c69cc31bfe27ac1b9111d8a4dc",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -150,7 +150,7 @@ Value getblock(const Array& params, bool fHelp)\n     uint256 hash(strHash);\n \n     if (mapBlockIndex.count(hash) == 0)\n-        throw JSONRPCError(-5, \"Block not found\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n     CBlock block;\n     CBlockIndex* pblockindex = mapBlockIndex[hash];"
      },
      {
        "sha": "55d5d79e23631ebce5b9882bd6c83748a79ec860",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -46,7 +46,7 @@ Value importprivkey(const Array& params, bool fHelp)\n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strSecret);\n \n-    if (!fGood) throw JSONRPCError(-5,\"Invalid private key\");\n+    if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n \n     CKey key;\n     bool fCompressed;\n@@ -60,7 +60,7 @@ Value importprivkey(const Array& params, bool fHelp)\n         pwalletMain->SetAddressBookName(vchAddress, strLabel);\n \n         if (!pwalletMain->AddKey(key))\n-            throw JSONRPCError(-4,\"Error adding key to wallet\");\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         pwalletMain->ScanForWalletTransactions(pindexGenesisBlock, true);\n         pwalletMain->ReacceptWalletTransactions();\n@@ -79,13 +79,13 @@ Value dumpprivkey(const Array& params, bool fHelp)\n     string strAddress = params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n-        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CKeyID keyID;\n     if (!address.GetKeyID(keyID))\n-        throw JSONRPCError(-3, \"Address does not refer to a key\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     CSecret vchSecret;\n     bool fCompressed;\n     if (!pwalletMain->GetSecret(keyID, vchSecret, fCompressed))\n-        throw JSONRPCError(-4,\"Private key for address \" + strAddress + \" is not known\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret, fCompressed).ToString();\n }"
      },
      {
        "sha": "96712482d5706dec12cad88ab43d7a3399ebf4e7",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -96,10 +96,10 @@ Value getwork(const Array& params, bool fHelp)\n             \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n \n     if (vNodes.empty())\n-        throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n+        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n     if (IsInitialBlockDownload())\n-        throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n+        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n     static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n@@ -136,7 +136,7 @@ Value getwork(const Array& params, bool fHelp)\n             // Create new block\n             pblock = CreateNewBlock(reservekey);\n             if (!pblock)\n-                throw JSONRPCError(-7, \"Out of memory\");\n+                throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n             vNewBlock.push_back(pblock);\n \n             // Need to update only after we know CreateNewBlock succeeded\n@@ -174,7 +174,7 @@ Value getwork(const Array& params, bool fHelp)\n         // Parse parameters\n         vector<unsigned char> vchData = ParseHex(params[0].get_str());\n         if (vchData.size() != 128)\n-            throw JSONRPCError(-8, \"Invalid parameter\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n         CBlock* pdata = (CBlock*)&vchData[0];\n \n         // Byte reverse\n@@ -230,17 +230,17 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             /* Do nothing */\n         }\n         else\n-            throw JSONRPCError(-8, \"Invalid mode\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n     }\n \n     if (strMode != \"template\")\n-        throw JSONRPCError(-8, \"Invalid mode\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n     if (vNodes.empty())\n-        throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n+        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n     if (IsInitialBlockDownload())\n-        throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n+        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     static CReserveKey reservekey(pwalletMain);\n \n@@ -268,7 +268,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n         pblock = CreateNewBlock(reservekey);\n         if (!pblock)\n-            throw JSONRPCError(-7, \"Out of memory\");\n+            throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n         // Need to update only after we know CreateNewBlock succeeded\n         pindexPrev = pindexPrevNew;\n@@ -369,7 +369,7 @@ Value submitblock(const Array& params, bool fHelp)\n         ssBlock >> block;\n     }\n     catch (std::exception &e) {\n-        throw JSONRPCError(-22, \"Block decode failed\");\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n     }\n \n     bool fAccepted = ProcessBlock(NULL, &block);"
      },
      {
        "sha": "e634ed7ddc2aea6342d3e3f9bb668328b63099fb",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -119,7 +119,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     CTransaction tx;\n     uint256 hashBlock = 0;\n     if (!GetTransaction(hash, tx, hashBlock))\n-        throw JSONRPCError(-5, \"No information available about transaction\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;\n@@ -163,9 +163,9 @@ Value listunspent(const Array& params, bool fHelp)\n         {\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n-                throw JSONRPCError(-5, string(\"Invalid Bitcoin address: \")+input.get_str());\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n             if (setAddress.count(address))\n-                throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n            setAddress.insert(address);\n         }\n     }\n@@ -227,17 +227,17 @@ Value createrawtransaction(const Array& params, bool fHelp)\n \n         const Value& txid_v = find_value(o, \"txid\");\n         if (txid_v.type() != str_type)\n-            throw JSONRPCError(-8, \"Invalid parameter, missing txid key\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing txid key\");\n         string txid = txid_v.get_str();\n         if (!IsHex(txid))\n-            throw JSONRPCError(-8, \"Invalid parameter, expected hex txid\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n \n         const Value& vout_v = find_value(o, \"vout\");\n         if (vout_v.type() != int_type)\n-            throw JSONRPCError(-8, \"Invalid parameter, missing vout key\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n         int nOutput = vout_v.get_int();\n         if (nOutput < 0)\n-            throw JSONRPCError(-8, \"Invalid parameter, vout must be positive\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n         CTxIn in(COutPoint(uint256(txid), nOutput));\n         rawTx.vin.push_back(in);\n@@ -248,10 +248,10 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     {\n         CBitcoinAddress address(s.name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(-5, string(\"Invalid Bitcoin address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+s.name_);\n \n         if (setAddress.count(address))\n-            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n         CScript scriptPubKey;\n@@ -283,7 +283,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n         ssData >> tx;\n     }\n     catch (std::exception &e) {\n-        throw JSONRPCError(-22, \"TX decode failed\");\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }\n \n     Object result;\n@@ -322,12 +322,12 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             txVariants.push_back(tx);\n         }\n         catch (std::exception &e) {\n-            throw JSONRPCError(-22, \"TX decode failed\");\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n         }\n     }\n \n     if (txVariants.empty())\n-        throw JSONRPCError(-22, \"Missing transaction\");\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Missing transaction\");\n \n     // mergedTx will end up with all the signatures; it\n     // starts as a clone of the rawtx:\n@@ -364,25 +364,25 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(Value& p, prevTxs)\n         {\n             if (p.type() != obj_type)\n-                throw JSONRPCError(-22, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n \n             Object prevOut = p.get_obj();\n \n             RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n \n             string txidHex = find_value(prevOut, \"txid\").get_str();\n             if (!IsHex(txidHex))\n-                throw JSONRPCError(-22, \"txid must be hexadecimal\");\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"txid must be hexadecimal\");\n             uint256 txid;\n             txid.SetHex(txidHex);\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n             if (nOut < 0)\n-                throw JSONRPCError(-22, \"vout must be positive\");\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n \n             string pkHex = find_value(prevOut, \"scriptPubKey\").get_str();\n             if (!IsHex(pkHex))\n-                throw JSONRPCError(-22, \"scriptPubKey must be hexadecimal\");\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"scriptPubKey must be hexadecimal\");\n             vector<unsigned char> pkData(ParseHex(pkHex));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n@@ -395,7 +395,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n                     err = err + mapPrevOut[outpoint].ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n-                    throw JSONRPCError(-22, err);\n+                    throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n                 }\n             }\n             else\n@@ -414,7 +414,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n             if (!fGood)\n-                throw JSONRPCError(-5,\"Invalid private key\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Invalid private key\");\n             CKey key;\n             bool fCompressed;\n             CSecret secret = vchSecret.GetSecret(fCompressed);\n@@ -443,7 +443,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];\n         else\n-            throw JSONRPCError(-8, \"Invalid sighash param\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -501,7 +501,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         ssData >> tx;\n     }\n     catch (std::exception &e) {\n-        throw JSONRPCError(-22, \"TX decode failed\");\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }\n     uint256 hashTx = tx.GetHash();\n \n@@ -512,7 +512,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     if (GetTransaction(hashTx, existingTx, hashBlock))\n     {\n         if (hashBlock != 0)\n-            throw JSONRPCError(-5, string(\"transaction already in block \")+hashBlock.GetHex());\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"transaction already in block \")+hashBlock.GetHex());\n         // Not in block, but already in the memory pool; will drop\n         // through to re-relay it.\n     }\n@@ -521,7 +521,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         // push to local node\n         CTxDB txdb(\"r\");\n         if (!tx.AcceptToMemoryPool(txdb))\n-            throw JSONRPCError(-22, \"TX rejected\");\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX rejected\");\n \n         SyncWithWallets(tx, NULL, true);\n     }"
      },
      {
        "sha": "51768c9b54a456d88a8d1eca836e21ba0b41640b",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 41,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738835d7b8ab80bd0812805f197471c54c72d7f9/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=738835d7b8ab80bd0812805f197471c54c72d7f9",
        "patch": "@@ -25,7 +25,7 @@ std::string HelpRequiringPassphrase()\n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n@@ -51,7 +51,7 @@ string AccountFromValue(const Value& value)\n {\n     string strAccount = value.get_str();\n     if (strAccount == \"*\")\n-        throw JSONRPCError(-11, \"Invalid account name\");\n+        throw JSONRPCError(RPC_WALLET_INVALID_ACCOUNT_NAME, \"Invalid account name\");\n     return strAccount;\n }\n \n@@ -106,7 +106,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n     if (!pwalletMain->GetKeyFromPool(newKey, false))\n-        throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n \n     pwalletMain->SetAddressBookName(keyID, strAccount);\n@@ -144,7 +144,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n         if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n-            throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n         pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n@@ -181,7 +181,7 @@ Value setaccount(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n \n     string strAccount;\n@@ -211,7 +211,7 @@ Value getaccount(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n     map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n@@ -252,7 +252,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n     int64 nAmount = AmountFromValue(params[1]);\n@@ -265,11 +265,11 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n     if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n     string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n-        throw JSONRPCError(-4, strError);\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -319,23 +319,23 @@ Value signmessage(const Array& params, bool fHelp)\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n-        throw JSONRPCError(-3, \"Invalid address\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n \n     CKeyID keyID;\n     if (!addr.GetKeyID(keyID))\n-        throw JSONRPCError(-3, \"Address does not refer to key\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n \n     CKey key;\n     if (!pwalletMain->GetKey(keyID, key))\n-        throw JSONRPCError(-4, \"Private key not available\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n \n     CDataStream ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << strMessage;\n \n     vector<unsigned char> vchSig;\n     if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n-        throw JSONRPCError(-5, \"Sign failed\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n \n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n@@ -353,17 +353,17 @@ Value verifymessage(const Array& params, bool fHelp)\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n-        throw JSONRPCError(-3, \"Invalid address\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n \n     CKeyID keyID;\n     if (!addr.GetKeyID(keyID))\n-        throw JSONRPCError(-3, \"Address does not refer to key\");\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n \n     bool fInvalid = false;\n     vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n \n     if (fInvalid)\n-        throw JSONRPCError(-5, \"Malformed base64 encoding\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n \n     CDataStream ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n@@ -388,7 +388,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     CScript scriptPubKey;\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     scriptPubKey.SetDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n@@ -567,7 +567,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     if (!walletdb.TxnBegin())\n-        throw JSONRPCError(-20, \"database error\");\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n     int64 nNow = GetAdjustedTime();\n \n@@ -592,7 +592,7 @@ Value movecmd(const Array& params, bool fHelp)\n     walletdb.WriteAccountingEntry(credit);\n \n     if (!walletdb.TxnCommit())\n-        throw JSONRPCError(-20, \"database error\");\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n     return true;\n }\n@@ -609,7 +609,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     int64 nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n@@ -627,12 +627,12 @@ Value sendfrom(const Array& params, bool fHelp)\n     // Check funds\n     int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (nAmount > nBalance)\n-        throw JSONRPCError(-6, \"Account has insufficient funds\");\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n-        throw JSONRPCError(-4, strError);\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -665,10 +665,10 @@ Value sendmany(const Array& params, bool fHelp)\n     {\n         CBitcoinAddress address(s.name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(-5, string(\"Invalid Bitcoin address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+s.name_);\n \n         if (setAddress.count(address))\n-            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n         CScript scriptPubKey;\n@@ -684,7 +684,7 @@ Value sendmany(const Array& params, bool fHelp)\n     // Check funds\n     int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n-        throw JSONRPCError(-6, \"Account has insufficient funds\");\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n@@ -693,11 +693,11 @@ Value sendmany(const Array& params, bool fHelp)\n     if (!fCreated)\n     {\n         if (totalAmount + nFeeRequired > pwalletMain->GetBalance())\n-            throw JSONRPCError(-6, \"Insufficient funds\");\n-        throw JSONRPCError(-4, \"Transaction creation failed\");\n+            throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction creation failed\");\n     }\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))\n-        throw JSONRPCError(-4, \"Transaction commit failed\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n \n     return wtx.GetHash().GetHex();\n }\n@@ -1000,9 +1000,9 @@ Value listtransactions(const Array& params, bool fHelp)\n         nFrom = params[2].get_int();\n \n     if (nCount < 0)\n-        throw JSONRPCError(-8, \"Negative count\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n     if (nFrom < 0)\n-        throw JSONRPCError(-8, \"Negative from\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n \n     Array ret;\n \n@@ -1113,7 +1113,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n         target_confirms = params[1].get_int();\n \n         if (target_confirms < 1)\n-            throw JSONRPCError(-8, \"Invalid parameter\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n     int depth = pindex ? (1 + nBestHeight - pindex->nHeight) : -1;\n@@ -1165,7 +1165,7 @@ Value gettransaction(const Array& params, bool fHelp)\n \n     Object entry;\n     if (!pwalletMain->mapWallet.count(hash))\n-        throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n     int64 nCredit = wtx.GetCredit();\n@@ -1214,7 +1214,7 @@ Value keypoolrefill(const Array& params, bool fHelp)\n     pwalletMain->TopUpKeyPool();\n \n     if (pwalletMain->GetKeyPoolSize() < GetArg(\"-keypool\", 100))\n-        throw JSONRPCError(-4, \"Error refreshing keypool.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n     return Value::null;\n }\n@@ -1281,10 +1281,10 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n-        throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n     if (!pwalletMain->IsLocked())\n-        throw JSONRPCError(-17, \"Error: Wallet is already unlocked.\");\n+        throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked.\");\n \n     // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n     SecureString strWalletPass;\n@@ -1296,7 +1296,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     if (strWalletPass.length() > 0)\n     {\n         if (!pwalletMain->Unlock(strWalletPass))\n-            throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n     }\n     else\n         throw runtime_error(\n@@ -1320,7 +1320,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n-        throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n     // Alternately, find a way to make params[0] mlock()'d to begin with.\n@@ -1338,7 +1338,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n     if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n-        throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n \n     return Value::null;\n }\n@@ -1355,7 +1355,7 @@ Value walletlock(const Array& params, bool fHelp)\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n-        throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n     {\n         LOCK(cs_nWalletUnlockTime);\n@@ -1376,7 +1376,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n-        throw JSONRPCError(-15, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n     // Alternately, find a way to make params[0] mlock()'d to begin with.\n@@ -1390,7 +1390,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n             \"Encrypts the wallet with <passphrase>.\");\n \n     if (!pwalletMain->EncryptWallet(strWalletPass))\n-        throw JSONRPCError(-16, \"Error: Failed to encrypt the wallet.\");\n+        throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n \n     // BDB seems to have a bad habit of writing old data into\n     // slack space in .dat files; that is bad if the old data is"
      }
    ]
  },
  {
    "sha": "285746d3dbed46d0e444d7a907c08453d36d99cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODU3NDZkM2RiZWQ0NmQwZTQ0NGQ3YTkwN2MwODQ1M2QzNmQ5OWNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-04T08:43:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-04T13:49:15Z"
      },
      "message": "Add constants for HTTP status codes",
      "tree": {
        "sha": "bb49c9ccf3d0d6b64f5d0fc62937b5a1472a1ac7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb49c9ccf3d0d6b64f5d0fc62937b5a1472a1ac7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/285746d3dbed46d0e444d7a907c08453d36d99cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285746d3dbed46d0e444d7a907c08453d36d99cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/285746d3dbed46d0e444d7a907c08453d36d99cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/285746d3dbed46d0e444d7a907c08453d36d99cd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "738835d7b8ab80bd0812805f197471c54c72d7f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738835d7b8ab80bd0812805f197471c54c72d7f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/738835d7b8ab80bd0812805f197471c54c72d7f9"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 28,
      "deletions": 17
    },
    "files": [
      {
        "sha": "0704173e54493cf67de716e7e0f3e8004fd241e7",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285746d3dbed46d0e444d7a907c08453d36d99cd/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285746d3dbed46d0e444d7a907c08453d36d99cd/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=285746d3dbed46d0e444d7a907c08453d36d99cd",
        "patch": "@@ -317,7 +317,7 @@ string rfc1123Time()\n \n static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n {\n-    if (nStatus == 401)\n+    if (nStatus == HTTP_UNAUTHORIZED)\n         return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n             \"Date: %s\\r\\n\"\n             \"Server: bitcoin-json-rpc/%s\\r\\n\"\n@@ -335,11 +335,11 @@ static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n             \"<BODY><H1>401 Unauthorized.</H1></BODY>\\r\\n\"\n             \"</HTML>\\r\\n\", rfc1123Time().c_str(), FormatFullVersion().c_str());\n     const char *cStatus;\n-         if (nStatus == 200) cStatus = \"OK\";\n-    else if (nStatus == 400) cStatus = \"Bad Request\";\n-    else if (nStatus == 403) cStatus = \"Forbidden\";\n-    else if (nStatus == 404) cStatus = \"Not Found\";\n-    else if (nStatus == 500) cStatus = \"Internal Server Error\";\n+         if (nStatus == HTTP_OK) cStatus = \"OK\";\n+    else if (nStatus == HTTP_BAD_REQUEST) cStatus = \"Bad Request\";\n+    else if (nStatus == HTTP_FORBIDDEN) cStatus = \"Forbidden\";\n+    else if (nStatus == HTTP_NOT_FOUND) cStatus = \"Not Found\";\n+    else if (nStatus == HTTP_INTERNAL_SERVER_ERROR) cStatus = \"Internal Server Error\";\n     else cStatus = \"\";\n     return strprintf(\n             \"HTTP/1.1 %d %s\\r\\n\"\n@@ -366,7 +366,7 @@ int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n     vector<string> vWords;\n     boost::split(vWords, str, boost::is_any_of(\" \"));\n     if (vWords.size() < 2)\n-        return 500;\n+        return HTTP_INTERNAL_SERVER_ERROR;\n     proto = 0;\n     const char *ver = strstr(str.c_str(), \"HTTP/1.\");\n     if (ver != NULL)\n@@ -411,7 +411,7 @@ int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRe\n     // Read header\n     int nLen = ReadHTTPHeader(stream, mapHeadersRet);\n     if (nLen < 0 || nLen > (int)MAX_SIZE)\n-        return 500;\n+        return HTTP_INTERNAL_SERVER_ERROR;\n \n     // Read message\n     if (nLen > 0)\n@@ -484,10 +484,10 @@ string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n {\n     // Send error reply from json-rpc error object\n-    int nStatus = 500;\n+    int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n     int code = find_value(objError, \"code\").get_int();\n-    if (code == RPC_INVALID_REQUEST) nStatus = 400;\n-    else if (code == RPC_METHOD_NOT_FOUND) nStatus = 404;\n+    if (code == RPC_INVALID_REQUEST) nStatus = HTTP_BAD_REQUEST;\n+    else if (code == RPC_METHOD_NOT_FOUND) nStatus = HTTP_NOT_FOUND;\n     string strReply = JSONRPCReply(Value::null, objError, id);\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n@@ -699,7 +699,7 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n     {\n         // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n         if (!fUseSSL)\n-            conn->stream() << HTTPReply(403, \"\", false) << std::flush;\n+            conn->stream() << HTTPReply(HTTP_FORBIDDEN, \"\", false) << std::flush;\n         delete conn;\n     }\n \n@@ -946,7 +946,7 @@ void ThreadRPCServer3(void* parg)\n         // Check authorization\n         if (mapHeaders.count(\"authorization\") == 0)\n         {\n-            conn->stream() << HTTPReply(401, \"\", false) << std::flush;\n+            conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;\n             break;\n         }\n         if (!HTTPAuthorized(mapHeaders))\n@@ -958,7 +958,7 @@ void ThreadRPCServer3(void* parg)\n             if (mapArgs[\"-rpcpassword\"].size() < 20)\n                 Sleep(250);\n \n-            conn->stream() << HTTPReply(401, \"\", false) << std::flush;\n+            conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;\n             break;\n         }\n         if (mapHeaders[\"connection\"] == \"close\")\n@@ -989,7 +989,7 @@ void ThreadRPCServer3(void* parg)\n             else\n                 throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n-            conn->stream() << HTTPReply(200, strReply, fRun) << std::flush;\n+            conn->stream() << HTTPReply(HTTP_OK, strReply, fRun) << std::flush;\n         }\n         catch (Object& objError)\n         {\n@@ -1077,9 +1077,9 @@ Object CallRPC(const string& strMethod, const Array& params)\n     map<string, string> mapHeaders;\n     string strReply;\n     int nStatus = ReadHTTP(stream, mapHeaders, strReply);\n-    if (nStatus == 401)\n+    if (nStatus == HTTP_UNAUTHORIZED)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n-    else if (nStatus >= 400 && nStatus != 400 && nStatus != 404 && nStatus != 500)\n+    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n         throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n     else if (strReply.empty())\n         throw runtime_error(\"no response from server\");"
      },
      {
        "sha": "89ab976f5622b7136a2870dde74a3ed766e28c1f",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/285746d3dbed46d0e444d7a907c08453d36d99cd/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/285746d3dbed46d0e444d7a907c08453d36d99cd/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=285746d3dbed46d0e444d7a907c08453d36d99cd",
        "patch": "@@ -18,6 +18,17 @@ class CBlockIndex;\n \n #include \"util.h\"\n \n+// HTTP status codes\n+enum HTTPStatusCode\n+{\n+    HTTP_OK                    = 200,\n+    HTTP_BAD_REQUEST           = 400,\n+    HTTP_UNAUTHORIZED          = 401,\n+    HTTP_FORBIDDEN             = 403,\n+    HTTP_NOT_FOUND             = 404,\n+    HTTP_INTERNAL_SERVER_ERROR = 500,\n+};\n+\n // Bitcoin RPC error codes\n enum RPCErrorCode\n {"
      }
    ]
  }
]