[
  {
    "sha": "fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThlMmE2OTI1YTA3Y2MwMGE4NzQ4ZmNkYTUyYzBjYTVjNmMzNzMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-06T19:24:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-01-20T15:58:43Z"
      },
      "message": "[qa] Change default block priority size to 0",
      "tree": {
        "sha": "be0bb97b777a7a8e6dbb68888af68239b81b6e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be0bb97b777a7a8e6dbb68888af68239b81b6e4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "545c5f920ebbbf0c95cc6b2fb508f5e7bc0fe67f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/545c5f920ebbbf0c95cc6b2fb508f5e7bc0fe67f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/545c5f920ebbbf0c95cc6b2fb508f5e7bc0fe67f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 18,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6ab112d75c3622b1a263a28020e9d984892ffc8a",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -63,7 +63,7 @@ def get_tests(self):\n \n         # chr(100) is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*100000000)\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*100000000 - 12000)\n         yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n \n         # TODO: test further transactions..."
      },
      {
        "sha": "40684e7fbb8ea1e8a0075d0faec7f6eb97236001",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -52,12 +52,12 @@ def run_test(self):\n         # and make sure the mempool code behaves correctly.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 50)\n-        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n-        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 50)\n+        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 49.99)\n+        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 49.99)\n+        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 49.99)\n \n         # Create a block-height-locked transaction which will be invalid after reorg\n-        timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 50})\n+        timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 49.99})\n         # Set the time lock\n         timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111111\", 1)\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n@@ -71,8 +71,8 @@ def run_test(self):\n         assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n-        spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n-        spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n+        spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 49.98)\n+        spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 49.98)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)"
      },
      {
        "sha": "9fcc88a2a3d23071ab2c629bfafc74d7ecfeab2a",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -43,13 +43,13 @@ def run_test(self):\n \n         b = [ self.nodes[0].getblockhash(n) for n in range(1, 4) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends1_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]\n+        spends1_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in coinbase_txids ]\n         spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]\n \n         blocks = []\n         blocks.extend(self.nodes[0].generate(1))\n \n-        spends2_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in spends1_id ]\n+        spends2_raw = [ self.create_tx(txid, node0_address, 49.98) for txid in spends1_id ]\n         spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]\n \n         blocks.extend(self.nodes[0].generate(1))"
      },
      {
        "sha": "16f512db38eb14549d2e847cca6db3736fee39cb",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -44,7 +44,7 @@ def run_test(self):\n         # is too immature to spend.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 103) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]\n+        spends_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in coinbase_txids ]\n \n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n "
      },
      {
        "sha": "eb718f39e41a61c7a6c4adc10c6d17d4c9e350f9",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -42,9 +42,9 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n         node0utxos = self.nodes[0].listunspent(1)\n-        tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 50})\n+        tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n-        tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 50})\n+        tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n         assert_raises(JSONRPCException, self.nodes[0].gettxoutproof, [txid1])\n \n@@ -62,7 +62,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2], blockhash)), txlist)\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n-        tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 50})\n+        tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n         self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "8c472a518da5987988f9fe8e6ca13b44ae0fe100",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -240,8 +240,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    # RPC tests still depend on free transactions\n-    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-blockprioritysize=50000\", \"-mocktime=\"+str(get_mocktime()) ]\n+    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-mocktime=\"+str(get_mocktime()) ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(os.devnull, \"w\")"
      },
      {
        "sha": "6cd879e4a0fd012d0efec6f32663133ca018f238",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa8e2a6925a07cc00a8748fcda52c0ca5c6c3732",
        "patch": "@@ -49,7 +49,6 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n-        # Second transaction will be child of first, and will require a fee\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n \n@@ -81,7 +80,7 @@ def run_test (self):\n             inputs = []\n             outputs = {}\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n-            outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"]\n+            outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"] - 3\n             raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n             txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n \n@@ -94,8 +93,8 @@ def run_test (self):\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n-        assert_equal(self.nodes[2].getbalance(), 100)\n-        assert_equal(self.nodes[2].getbalance(\"from1\"), 100-21)\n+        assert_equal(self.nodes[2].getbalance(), 94)\n+        assert_equal(self.nodes[2].getbalance(\"from1\"), 94-21)\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n@@ -104,7 +103,7 @@ def run_test (self):\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount"
      }
    ]
  }
]