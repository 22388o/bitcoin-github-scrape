gmaxwell,2017-04-12T18:03:42Z,This is awesome.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-293660229,293660229,
sipa,2017-04-16T17:43:02Z,Rebased on top of new #10148.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-294364323,294364323,
sipa,2017-04-19T15:35:33Z,Rebased without #10148 at popular request.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-295313204,295313204,
paveljanik,2017-04-19T16:01:30Z,"Few overrides needed probably:\n```\n+./coins.h:200:10: warning: 'BatchWrite' overrides a member function but is not marked 'override' [-Winconsistent-missing-override]\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+         ^\n+./coins.h:178:18: note: overridden virtual function is here\n+    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-295323193,295323193,
sipa,2017-04-22T11:43:33Z,"I'm splitting the commits up more. I've pushed one update already, but I'm working splitting the big commit further.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-296367685,296367685,
sipa,2017-04-24T21:25:25Z,"Done. There is still one commit that does many things at once (""Switch CCoinsView and chainstate db to per-txout""), but splitting it is nontrivial. If requested, I can try splitting the database format change into a second commit, but that would require adding a bunch of conversion logic in the first commit that just gets removed in the second one. Thoughts?",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-296826822,296826822,
sipa,2017-04-25T18:31:14Z,"Rebased and reset the author timestamps (so that GitHub shows them in logical order, $@#!*).",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-297123617,297123617,
sipa,2017-05-03T03:34:33Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-298816331,298816331,
sipa,2017-05-04T01:51:20Z,Updated and addressed many of @ryanofsky's review comments. I'll respond only individually to the ones I'm not addressing.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-299080792,299080792,
sipa,2017-05-05T17:26:56Z,"Here is a graph of the speed and memory usage of a `-reindex-chainstate` until the default assumevalid point, with infinity -dbcache, on a 2.2GHz dual-cpu 28-core 56-threads machine with 256GiB RAM. Note that the x axis is progress (so proportional to the number of transactions).\n\n![reindex](https://cloud.githubusercontent.com/assets/548488/25756823/0e61e73e-317d-11e7-9470-9f09db5ae131.png)\n",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-299525746,299525746,
sipa,2017-05-06T01:58:13Z,"Same machine, but flushing at 1300 MiB:\n![reindex-1300](https://cloud.githubusercontent.com/assets/548488/25769030/c84fe65e-31c4-11e7-8819-264c44e50ddf.png)\n",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-299608732,299608732,
sipa,2017-05-10T19:44:56Z,"I've pushed a few more changes (rewriting the commits, but not a rebase), renaming some of the classes and variables to be more consistent.\n\nFor any further changes I'll create fixup commits in order to not hurt review.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-300592062,300592062,
ryanofsky,2017-05-10T20:32:49Z,"utACK 37b273524984eb034f68277a635fa7265ece638e. Thanks for implementing so many review suggestions. Removing coins->Clear() from ApplyTxInUndo in an earlier commit, renaming `CCoin` to `Coin`, changing stats.nSerializedSize were the only significant changes since my last review that I don't remember seeing suggested, and these all look good.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-300603952,300603952,
sipa,2017-05-13T22:18:28Z,"Squashed history with fixups. Original history:\n* 83367a95f922f6a5aec8b755e55c748e2edcbbc6 Add SizeEstimate to CDBBatch\n* ac6910b5f6fd7fcfc2b002afe4a69f9ebca499fe error() in disconnect for disk corruption, not inconsistency\n* f7beab2b69b4e239e6c6d92062dd7a5533f7fd9c Introduce CHashVerifier to hash read data\n* e3d9ac37e1f7b74df263f9fbff2a482169284afe Add specialization of SipHash for 256 + ",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-301278276,301278276,
laanwj,2017-05-15T12:52:58Z,"I've been testing this on a slow system: on an ARM (i.MX6), USB2 external harddisk, the database upgrade took about 50 minutes:\n```\n2017-05-15 10:27:45 Upgrading database...\n2017-05-15 11:20:25 LoadBlockIndexDB: last block file = 869\n```\nNot necessarily in this pull, but some kind of progress feedback like for rescans / reindexes would be indispensable. Users might assume that the client",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-301465629,301465629,
sipa,2017-05-15T22:19:46Z,"> Not necessarily in this pull, but some kind of progress feedback like for rescans / reindexes would be indispensable. Users might assume that the client has crashed after no log messages for such a long time.\n\nYes, fully agree. There would need to be some UI interaction in the GUI, and at least some progress reported in debug.log during the process. I'd prefer to do that after merging, thoug",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-301621318,301621318,
sdaftuar,2017-05-18T22:26:10Z,"ACK a86f1c959c4beaf2b2667b000983f22de6acadf2, this is awesome.\n\nThough it looks like this needs rebase now.  (Also @sipa I'm confused about why you included the merge commit in this PR?)\n\nI did some benchmarking of validation speed in my simulation environment, comparing master to this PR.  This makes better use of pcoinsTip, which means we flush less often and thus expect a big performanc",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302558618,302558618,
sipa,2017-05-18T23:15:40Z,"@sdaftuar Thanks, rebased. The merge commit at the end was to avoid a CI error that was fixed in master, but existed at the time the code branched off.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302566571,302566571,
sdaftuar,2017-05-19T16:57:57Z,re-ACK 71837d800cdacd92ddb5bf8536c0e16338a6a889 ,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302756570,302756570,
gmaxwell,2017-05-20T00:38:23Z,"I tested the tests by manually injecting faults (e.g. stepping through the code line by line and inserting a bug at each opportunity then rerunning the tests to make sure they fail) in coins.cpp, here are my findings:\n\nCCoinsViewCache::FetchCoins\ncommenting out cachedCoinsUsage += ret->second.coin.DynamicMemoryUsage(); still passes coins_tests.\n\nCCoinsViewCache::AddCoin\ninverting condi",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302839091,302839091,
sipa,2017-05-20T19:35:50Z,"@gmaxwell I've added a commit that extends the coins_test to (hopefully) address all the cases you found, except for HaveInputs and GetValueIn (which I plan to remove in a follow-up PR).\n\n> CCoinsViewCache::BatchWrite\n> commenting out hashBlock = hashBlockIn passes coins_tests\n\nThat will be caught outside of coins_tests already.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302894077,302894077,
gmaxwell,2017-05-20T22:31:05Z,"AddCoins\nAdding 1 || to the !tx.[...].IsUnspendable() condition passes coins_tests.\n\n^ that isn't fixed yet.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302902788,302902788,
sipa,2017-05-20T23:39:02Z,@gmaxwell Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302905519,302905519,
gmaxwell,2017-05-22T09:37:30Z,"sync testnet. restart.\n\ninvalidate block 5. \n\n{\n  ""height"": 4,\n  ""bestblock"":\n""000000008b5d0af9ffb1741e38b17b193bd12d7683401cecd2fd94f548b6e5dd"",\n  ""transactions"": 4,\n  ""txouts"": 4,\n  ""hash_serialized_2"":\n  ""9ea56b9590b2ce5582a0013e2bfd08222334247ec2bdbe4c71dabd7210040b71"",\n  ""disk_size"": 808430596,\n  ""total_amount"": 200.00000000\n}\n\nrestart\n\n{\n  ""height"": 4,\",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303050325,303050325,
gmaxwell,2017-05-22T23:05:57Z,"@sipa  it isn't a new bug introduced by this PR, but my ACK is waiting on a fix for the gettxoutsetinfo crash on an empty chainstate. ",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303243712,303243712,
sdaftuar,2017-05-23T14:36:57Z,"> @sipa it isn't a new bug introduced by this PR, but my ACK is waiting on a fix for the gettxoutsetinfo crash on an empty chainstate.\n\nThis seems to fix the crash @gmaxwell discovered (which is easy to reproduce in regtest), though I'm not sure if this is exactly the right fix:\n\n```\ndiff --git a/src/txdb.cpp b/src/txdb.cpp\nindex 01108beae..d8d754617 100644\n--- a/src/txdb.cpp\n+++ b",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303418441,303418441,
sipa,2017-05-23T17:07:34Z,Modified the last few commits to include @sdaftuar and @ryanofsky's suggestions.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303468452,303468452,
dougstrong77,2017-05-24T00:32:44Z,Need helpwith all this,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303580548,303580548,
sdaftuar,2017-05-24T15:40:38Z,re-ACK 99eecb9,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303763971,303763971,
sipa,2017-05-26T21:49:54Z,"Rebased on top of #10445, and squashed fixes into appropriate commits. No other changes were made.\n\nI think this is ready.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-304395376,304395376,
gmaxwell,2017-05-30T07:44:13Z,re-ACK,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-304800586,304800586,
sdaftuar,2017-05-30T20:40:44Z,re-ACK,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305001591,305001591,
jnewbery,2017-05-31T17:17:59Z,utACK https://github.com/bitcoin/bitcoin/pull/10195/commits/dfdf1d5fef732d24602e693f917e41ed357d4937,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305256191,305256191,
laanwj,2017-06-01T11:38:29Z,"Tested ACK dfdf1d5\n\n>  I think this is ready.\n\nI agree. \nAre you going to do a final squash before merge (""Address some nits"" and ""Address more nits"" seem like squashme's)?",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305468433,305468433,
harding,2017-06-01T12:21:02Z,"How does this change affect UTXO set bloat attacks?\n\nIn the current model where UTXO entries are indexed by txid, I think the most efficient attack would be stuffing a block full of max-sized (10,000 byte?) scriptPubKeys.  That makes the worst-case UTXO byte-size increase per block slightly smaller than the maximum base block size.\n\nBut if UTXO entries are indexed by outpoint, it seems to ",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305477065,305477065,
morcos,2017-06-01T15:25:00Z,"This is a fantastic change.  I'm sorry it's taking me so long to work through it.  I can't promise I will finish today, but I have no objection to merge based on other's review and I'll keep working my way through either way.\n\n@harding raises an interesting question, but I feel its more of an academic one, there is nothing preventing us from changing the implementation again in the future if t",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305528429,305528429,
gmaxwell,2017-06-01T16:27:56Z,@harding As you note that  sipa notes: the database deduplicates the IDs; this largely eliminates the concern your present.  The old structure also has quadratic access costs for transactions with many outputs which this change eliminates.,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305547398,305547398,
sipa,2017-06-01T17:06:54Z,"@laanwj I'll squash soon.\n\n@harding It's an interesting question what the worst cast UTXO bloat attack becomes after this change. I believe you're right that many small outputs will have a larger impact on disk size, though not as dramatically as you predict - most of it will be eaten by prefix compression.",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305557835,305557835,
sipa,2017-06-01T18:36:45Z,"Pre-squash history:\n\n* e66dbde6d14cb5f253b3bf8850a98f4fda2d9f49: Add SizeEstimate to CDBBatch\n* f54580e7e4f225bb615204daef32f72ab8688418: error() in disconnect for disk corruption, not inconsistency\n* e484652fc36ef7135cf08ad380ea7142b6cbadc0: Introduce CHashVerifier to hash read data\n* 7e0032290669fae5f52c256856c53038511c7db4: Add specialization of SipHash for 256 + 32 bit data\n* d3424",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305581795,305581795,
harding,2017-06-01T18:51:18Z,"@morcos @gmaxwell @sipa Thanks for your responses (and, with the others, your work on this change!).  I agree the ability to adapt the underlying implementation to prevailing conditions makes the question academic, as hopefully does the increasing ratio of fees-to-subsidy which increases the lost-income cost to miners for maximizing bloat.\n\nPlease consider my comment non-blocking, and thank yo",https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305585669,305585669,
sipa,2017-06-01T20:20:11Z,Squashed all fixes without rebasing (so the resulting tree is identical to dfdf1d5).,https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305608860,305608860,
TheBlueMatt,2017-04-20T16:12:02Z,Why not just switch to hash_serialized_2?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r112495450,112495450,test/functional/blockchain.py
TheBlueMatt,2017-04-20T16:31:24Z,"Shouldnt the first two be an error and not a ""done upgrading"" result?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r112499717,112499717,src/txdb.cpp
paveljanik,2017-04-25T08:08:07Z,init to 0 here please.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r113130070,113130070,src/undo.h
TheBlueMatt,2017-04-28T19:53:31Z,"nit: would be nice to at least use MAX_BLOCK_BASE_SIZE/9, as you indicated in your TODO",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114007556,114007556,src/undo.h
TheBlueMatt,2017-04-28T19:55:55Z,"ugh, would be nice to not add more const_casts. Its an extra ~10 LOC to split CTxInUndoSerializer into CTxInUndoDeserializer and CTxInUndoSerializer. Not 100% sure I love that either, but maybe better than more const_casts...thoughts?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114007983,114007983,src/undo.h
TheBlueMatt,2017-04-28T20:05:13Z,"As russ pointed out: I think this just maybe happens to work. If I were to add a CTxOut(CTxOut&&) constructor which SetNull() afterwards the CCoins::Spend call on the next line wouldn't get to Cleanup(). While even that shouldnt be a bug, I could envision CCoinsModifyer being tweaked to track whether there was actually a modification, which it would think there was not.\n\nIn any case, looks lik",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114009440,114009440,src/validation.cpp
TheBlueMatt,2017-04-28T20:09:51Z,"super nit: would be nice to add a comment to the end of the loop or so that notes that blockUndo should, by that point, be considered to have been tirely std::move'd, since pretty much all of its internal state has been std::moved during the loop.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114010162,114010162,src/validation.cpp
TheBlueMatt,2017-04-28T20:45:57Z,"This is technically insufficient for FRESH (though is in context - that this is only called by AddCoins). I interpret the possible_overwrite to apply only to the given CCoin, not all CCoins for that tx, which thus means you also need to know that the full CCoins (not just this CCoin) is fully-pruned in the parent cache. Of course this bug doesn't stick around to the end of the PR, so maybe just al",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114016248,114016248,src/coins.cpp
TheBlueMatt,2017-04-28T21:36:23Z,"You should document that this function assumes the only coin possible_overwrites in are coinbase transactions, ie that it is equivalent to ModifyNewCoins (and maybe note in a TODO to pass in a boolean as to whether even that is possible - ie if we are or are not yet past BIP 34, because then we can avoid writes to coinbases spent in the same cache, though admittedly the 100-height limit makes that",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114024300,114024300,src/coins.h
TheBlueMatt,2017-04-28T21:41:12Z,"Same comment as before, the std::move here is only barely right, but because its gone by the end of the PR its mostly ok, probably worth just not having since it doesnt change anything at the end.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114024992,114024992,src/coins.cpp
TheBlueMatt,2017-04-28T23:22:39Z,"Would be nice to return a bool here to keep the previous assert semantics in UpdateCoins, though not a huge deal.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114035986,114035986,src/coins.cpp
ryanofsky,2017-05-03T14:16:44Z,"In commit ""error() in disconnect for disk corruption, not inconsistency""\n\nGiven that you're already changing places where fClean is set, might be good also to change return type of `ApplyTxInUndo` from `bool` to `DisconnectResult`, which I think would make the code more consistent and easier to understand.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114555652,114555652,src/validation.cpp
ryanofsky,2017-05-03T14:19:04Z,"In commit ""error() in disconnect for disk corruption, not inconsistency""\n\nMaybe the old error strings should become code comments, since they seem useful for understanding the different cases.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114556290,114556290,src/validation.cpp
ryanofsky,2017-05-03T14:37:07Z,"In commit ""Introduce CHashVerifier to hash read data""\n\nCould replace these two lines with just `read(data, now);`",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114561307,114561307,src/hash.h
ryanofsky,2017-05-03T15:00:58Z,"In commit ""Remove/ignore tx version in utxo and undo""\n\nMaybe mention this change in the commit message. It seems like a good change (I guess it makes the hash more robust), but not really related to the version stuff?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114568040,114568040,src/rpc/blockchain.cpp
ryanofsky,2017-05-03T15:04:27Z,"In commit ""Remove/ignore tx version in utxo and undo""\n\nMaybe update `doc/release-notes.md` noting the various changes in RPC output here.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114569087,114569087,src/rpc/blockchain.cpp
ryanofsky,2017-05-03T15:38:09Z,"In commit ""Store/allow tx metadata in all undo records""\n\nMaybe expand this comment, I think new code would be confusing to read without knowing the history. Suggest maybe:\n\n```\n// Undo data does not contain height/coinbase. This should never happen\n// currently. Previously, this data was only saved for pruned transactions,\n// so check coins->IsPruned().\n```",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114578273,114578273,src/validation.cpp
ryanofsky,2017-05-03T15:59:15Z,"In commit ""Introduce CCoin, a single unspent output""\n\nThis equality operator doesn't seem like something you would want to encourage use of. Maybe just move to coins_test where it's needed.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114583897,114583897,src/coins.h
ryanofsky,2017-05-03T16:01:59Z,"In commit ""Introduce CCoin, a single unspent output""\n\nMaybe Clear() / Pruned() should be named consistently? Prune/Pruned or Clear/IsCleared",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114584597,114584597,src/coins.h
ryanofsky,2017-05-03T17:28:16Z,"In commit ""Replace CTxInUndo with CCoin""\n\nGuess this comment should have been updated in the earlier commits, but good to see it updated.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114604501,114604501,src/undo.h
ryanofsky,2017-05-03T17:36:29Z,"In commit ""Store/allow tx metadata in all undo records""\n\nWhat does it mean in the commit message that ""undo dat written with this patch won't be readable by older versions anymore.""? If this change is just writing actual data where there used to be 0's before, why would older versions have a problem reading it?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114606471,114606471,src/validation.cpp
ryanofsky,2017-05-03T17:52:28Z,"In commit ""Replace CTxInUndo with CCoin""\n\nThis isn't done in the current PR. What's the future plan?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610132,114610132,src/undo.h
ryanofsky,2017-05-03T17:53:00Z,"In commit ""Replace CTxInUndo with CCoin""\n\nWhat's the alternative?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610276,114610276,src/undo.h
ryanofsky,2017-05-03T17:55:09Z,"In commit ""Replace CTxInUndo with CCoin""\n\nThis seems like it should be a for loop or range-for loop.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610794,114610794,src/undo.h
ryanofsky,2017-05-03T17:56:28Z,"In commit ""Replace CTxInUndo with CCoin""\n\n`for (auto& prevout : vprevout)`?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114611236,114611236,src/undo.h
ryanofsky,2017-05-03T17:57:29Z,"In commit ""Replace CTxInUndo with CCoin""\n\nMaybe `emplace_back`",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114611511,114611511,src/validation.cpp
ryanofsky,2017-05-03T18:03:54Z,"In commit ""Replace CTxInUndo with CCoin""\n\nI'm not sure this std::move is ok. If `vout[nPos]` is cleared out then the `Spend` call below will fail early and never call `CCoins::Cleanup`.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114613086,114613086,src/validation.cpp
ryanofsky,2017-05-03T18:04:35Z,"In commit ""Replace CTxInUndo with CCoin""\n\nMight be good to check the return value from Spend. Or have Spend raise errors instead of returning bool.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114613254,114613254,src/validation.cpp
ryanofsky,2017-05-03T18:53:10Z,"In commit ""Introduce new per-txout CCoinsViewCache functions""\n\nShould it be an error to spend a coin that can't be found? Can you add a comment here explaining when this case is expected to happen if it is not an error condition?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114625074,114625074,src/coins.cpp
ryanofsky,2017-05-03T18:54:08Z,"In commit ""Introduce new per-txout CCoinsViewCache functions""\n\nAgain should it be an error if IsAvailable is not true?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114625361,114625361,src/coins.cpp
ryanofsky,2017-05-03T18:59:27Z,"In commit ""Introduce new per-txout CCoinsViewCache functions""\n\nJust noting at this point the comment is aspirational. It becomes true in a later commit.\n",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114626538,114626538,src/coins.h
ryanofsky,2017-05-03T19:23:42Z,"In commit ""Switch from per-tx to per-txout CCoinsViewCache methods in some places""\n\nCould you add a comment saying what this is for? This would only seem to affect the internal state of the view. Realize your change probably doesn't affect whatever it's supposed to be doing, ",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114631654,114631654,src/rpc/rawtransaction.cpp
ryanofsky,2017-05-03T19:47:48Z,"In commit ""Switch from per-tx to per-txout CCoinsViewCache methods in some places""\n\nSeems like there should be a more direct way to do this using leveldb Iterator::Seek. Unfortunately the cache map is unordered so harder to search by txid.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114636226,114636226,src/validation.cpp
ryanofsky,2017-05-03T19:48:49Z,"In commit ""Switch from per-tx to per-txout CCoinsViewCache methods in some places""\n\nSeems like should be a for loop, not while.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114636458,114636458,src/validation.cpp
ryanofsky,2017-05-03T20:01:52Z,"In commit ""Switch from per-tx to per-txout CCoinsViewCache methods in some places""\n\nThis commit is a lot to take in at once. It consists of a lot of straightforward replacements, plus 2 more gnarly workarounds (the ""try first 1024 outputs"" code above, and this undo height/coinbase reconstruction). Would recommend splitting the two workarounds out into separate commits so they don't get in the ",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114639256,114639256,src/validation.cpp
ryanofsky,2017-05-03T20:03:13Z,"In commit ""Switch from per-tx to per-txout CCoinsViewCache methods in some places""\n\nMeant to be `const auto&`?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114639530,114639530,src/validation.cpp
ryanofsky,2017-05-03T20:21:45Z,"In commit ""Switch tests from ModifyCoins to AddCoin/SpendCoin""\n\nConsider replacing ""coinbase"" everywhere in this test with ""potential_overwrite"" to reflect the new name of the argument.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114643391,114643391,src/test/coins_tests.cpp
ryanofsky,2017-05-03T20:29:00Z,"In commit ""Refactor GetUTXOStats in preparation for per-COutPoint iteration""\n\nShould check or assert outputs.size() is not 0.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114644951,114644951,src/rpc/blockchain.cpp
ryanofsky,2017-05-03T20:34:26Z,"In commit ""Switch CCoinsView and chainstate db from per-txid to per-txout""\n\nShould this be called coin instead of coins? Also should `CCoinsCacheEntry` class be renamed? (maybe in a separate commit if it would make this diff bigger.)",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114646373,114646373,src/coins.h
ryanofsky,2017-05-03T20:36:22Z,"In commit ""Switch CCoinsView and chainstate db from per-txid to per-txout""\n\nThis seems identical to the default constructor. Maybe remove and call that instead, or remove the default constructor.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114646810,114646810,src/coins.h
ryanofsky,2017-05-03T20:42:36Z,"In commit ""Switch CCoinsView and chainstate db from per-txid to per-txout""\n\nComment above on line 913 needs to be updated.\n\nAlso maybe worth noting this change of behavior in the commit message.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114648278,114648278,src/net_processing.cpp
ryanofsky,2017-05-03T20:50:15Z,"In commit ""Refactor GetUTXOStats in preparation for per-COutPoint iteration"":\n\nThis stats.ntotalamount value seems to get overwritten in line 815. Probably that line should be removed.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114650081,114650081,src/rpc/blockchain.cpp
ryanofsky,2017-05-03T20:57:49Z,"In commit ""Switch CCoinsView and chainstate db from per-txid to per-txout""\n\nOh no... not another one of these 1024-output-while-loop-that-should-be-a-for-loop things!\n\nI'd suggest adding a  `GetTxHeight(CCoinsView&, const& uint256)` or similar helper function implementing the lookup 1024 times logic in a single place that could potentially be improved later.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114651793,114651793,src/rpc/rawtransaction.cpp
ryanofsky,2017-05-03T21:03:40Z,"In commit ""Switch CCoinsView and chainstate db from per-txid to per-txout""\n\nMaybe rename txid to outpoint in various places.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114653075,114653075,src/txmempool.cpp
sipa,2017-05-04T01:54:00Z,"Older code requires that there are 0s for everything but the last spend of an output, in the disconnect code. That's what the ""allow"" refers to in the commit title: it allows nonzero metadata in any undo record.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689234,114689234,src/validation.cpp
sipa,2017-05-04T01:54:20Z,"This is very hard, unfortunately.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689261,114689261,src/validation.cpp
sipa,2017-05-04T01:55:55Z,Not going to rename things all over the place now. Maybe I can add a commit at the end that fixes it up later.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689363,114689363,src/coins.h
sipa,2017-05-04T01:56:42Z,"It actually used to be called `coin` in an earlier version of the patch, but just s/coins/coin/ changes were such a substantial fraction of the commit that I backed out. Can be done later, I guess.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689431,114689431,src/coins.h
sipa,2017-05-04T01:57:26Z,"I have a plan for doing this cleanly, but it requires some refactoring in serialize.h which I'd like to avoid in this PR.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689486,114689486,src/undo.h
sipa,2017-05-04T01:58:21Z,"Depending on consensus.h and deriving the constant directly. Alternatively, we may not need this protection if we'd use the std::vector deserialization code (see TODO above).",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689543,114689543,src/undo.h
ryanofsky,2017-05-04T11:13:00Z,"In commit ""Store/allow tx metadata in all undo records""\n\n> Older code requires that there are 0s for everything but the last spend of an output, in the disconnect code. That's what the ""allow"" refers to in the commit title: it allows nonzero metadata in any undo record.\n\nCould you clarify in the commit message what ""won't be readable by older versions anymore"" means? Will older software ju",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114748619,114748619,src/validation.cpp
sipa,2017-05-04T20:20:21Z,"> Will older software just log errors and keep working, or require re-indexing, or will it not work at all?\n\nOlder code will fail during the start-up consistency check (the rollback test will notice entries with undo data present where it isn't expected), and fail to start.\n\n> But I also thought this was one of the cases that DisconnectBlock would ""graciously deal with""\n\nWell, it does ",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114877706,114877706,src/validation.cpp
jnewbery,2017-05-05T20:15:36Z,I think this comment is now wrong. Should just say `unspent transaction output`,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079306,115079306,src/coins.h
jnewbery,2017-05-05T20:16:01Z,`whether containing transaction was a coinbase`,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079365,115079365,src/coins.h
jnewbery,2017-05-05T20:16:22Z,`at which height the containing transaction was included in the active block chain`,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079425,115079425,src/coins.h
jnewbery,2017-05-05T20:16:49Z,"`construct a CCoin from a CTxOut, at a given height`",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079494,115079494,src/coins.h
jnewbery,2017-05-05T20:39:10Z,misleading name for this variable. Can you name it `coin` or `txout`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115083218,115083218,src/undo.h
jnewbery,2017-05-05T21:11:59Z,I found this quite confusing until I worked out you were packing bits into a single VARINT (partly because I didn't understand that coinbase was supposed to be 1 or 0). I don't know if this would be clearer as: `VARINT(height|coinbase)` ie height bits concatenated with coinbase bit.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115088498,115088498,src/coins.h
jnewbery,2017-05-05T21:39:30Z,"now that you've removed CCoinsModifier, I believe you can remove this forward declaration of CCoinsViewCache.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115092604,115092604,src/coins.h
theuni,2017-05-09T20:33:42Z,"std::tie would make this a little easier to read:\n```c++\nCCoinsMap::iterator it;\nbool inserted;\nstd::tie(it, inserted) = cacheCoins.emplace(...\n```\n",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115595178,115595178,src/coins.cpp
sipa,2017-05-09T23:41:05Z,Rewritten in a different way.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627248,115627248,src/coins.h
sipa,2017-05-09T23:41:14Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627269,115627269,src/coins.h
sipa,2017-05-09T23:41:22Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627285,115627285,src/coins.h
sipa,2017-05-09T23:41:32Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627305,115627305,src/coins.h
sipa,2017-05-09T23:41:40Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627322,115627322,src/coins.h
sipa,2017-05-09T23:41:50Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627341,115627341,src/coins.h
sipa,2017-05-09T23:41:59Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627365,115627365,src/undo.h
sipa,2017-05-09T23:42:10Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627396,115627396,src/coins.cpp
sipa,2017-05-09T23:42:31Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627431,115627431,src/net_processing.cpp
sipa,2017-05-09T23:42:57Z,Fixed by introducing a helper function `AccessByTxid`.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627487,115627487,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-05-10T15:53:20Z,"You need to update the second declaration in src/test/coins_tests.cpp as well, I believe.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115779856,115779856,src/validation.cpp
TheBlueMatt,2017-05-10T23:07:23Z,"Hmm, can the GetSerializeSize() be moved out of the loop?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115873512,115873512,src/coins.cpp
TheBlueMatt,2017-05-10T23:17:00Z,"Just a note for reviewers/benchmarkers - this is a behavior change as AddCoins is equivalent to ModifyNewCoins, not ModifyCoins.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115874844,115874844,src/bench/ccoins_caching.cpp
TheBlueMatt,2017-05-10T23:30:29Z,"Can we drop the nHeight check now? It looks like it used to be a shitty version of HaveCoins(), but we now do an availability check before returning and otherwise return null anyway, so it seems useless.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115876447,115876447,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-05-10T23:55:11Z,"Shameless ask: Can you swap ""Switch CScriptCheck to use CCoin instead of CCoins"" out for https://github.com/bitcoin/bitcoin/pull/10192/commits/a7ae7f9560720fe4245cdaa4eabc528d8b216f4d which should be nearly as good here but wont make things needlessly conflict?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115879407,115879407,src/validation.h
sdaftuar,2017-05-12T13:34:34Z,"FYI, I get this warning when I compile:\n\n```\nIn file included from test/test_bitcoin_fuzzy.cpp:19:\n./undo.h:72:13: warning: variable 'count' is uninitialized when used here [-Wuninitialized]\n        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx\n            ^~~~~\n./serialize.h:544:7: note: in instantiation of function template specialization 'CTxUndo::Unserialize<C",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116230644,116230644,src/undo.h
sdaftuar,2017-05-12T17:13:32Z,"nit: Add comment somewhere referencing BIP30 and the historical coinbase transactions which overwrote existing entries, as explanation for the last argument here.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116280006,116280006,src/coins.cpp
sdaftuar,2017-05-12T18:23:40Z,"nit: should be ""list of transaction outputs""",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116294899,116294899,src/txmempool.h
sdaftuar,2017-05-12T19:43:38Z,"Could you explain this formula a bit more?  I would have thought `nSerializedSize` would refer to the size of the data that we hashed, and hence it'd just be exactly the size of what we're passing to CHashWriter, but instead it seems we're trying to estimate the on-disk size?\n\nI'm also not familiar with the leveldb internals, any chance you have a reference for understanding this duplication? ",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116310044,116310044,src/rpc/blockchain.cpp
sdaftuar,2017-05-12T20:05:56Z,"It looks like the old code had sanity checking on the height, to prevent out-of-bounds access into chainActive.  I assume we should put that protection back in?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116313759,116313759,src/rpc/rawtransaction.cpp
sdaftuar,2017-05-12T20:22:23Z,"Shouldn't this be including all outpoints that are no longer spent, rather than just outpoints from transactions where none of the outpoints are spent?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116316837,116316837,src/txmempool.cpp
TheBlueMatt,2017-05-12T21:17:30Z,"I'm super not a big fan of removing the old hasModifyer sanity checks here. Returning a reference to an object in our map without enforcing some semantics on the caller seems like a footgun. I'm curious if you have any numbers on performance degredation of not doing the Modfiyer approach? Also, the comment is somewhat ambiguous - you're allowed to modify (and even delete) other elements, but you a",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116326062,116326062,src/coins.h
TheBlueMatt,2017-05-12T21:24:10Z,"That reminds me, should we add a similar wrapper here for HaveCoins?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116327084,116327084,src/init.cpp
TheBlueMatt,2017-05-12T21:27:36Z,"Also, nit: can you override here?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116327575,116327575,src/init.cpp
TheBlueMatt,2017-05-12T21:30:52Z,"Can we not just leave it and use HaveCoinsInCache(COutPoint(hash, 0))? Something in the latest block is most likely to still have all its outputs available. Do we have any stats on how often this check gets used (especially for nodes which get blocks early compared to random p2p nodes?)",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116328088,116328088,src/net_processing.cpp
TheBlueMatt,2017-05-12T21:48:39Z,"Can you elaborate a bit on the comment here?\nAlso, shouldnt this consider that the output indecies are VARINTs?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116330635,116330635,src/rpc/blockchain.cpp
TheBlueMatt,2017-05-12T22:06:11Z,"nit: while you're changing these lines, it'd be nice to add overrides where appropriate.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116332801,116332801,src/txdb.h
sipa,2017-05-12T23:14:11Z,fixed,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116339994,116339994,src/txmempool.h
sipa,2017-05-12T23:14:18Z,fixed,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340003,116340003,src/coins.cpp
sipa,2017-05-12T23:16:08Z,"I tried to fix this by writing a big comment about the data format and the rationale for the formula, only to discover it was wrong. Then I went on to fix it, and take even more cases into account, but the result still was pretty far off from the actual disk size. Instead, I removed the field entirely and replaced it with a disk_size element that is computed by LevelDB directly (but is not guarant",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340164,116340164,src/rpc/blockchain.cpp
sipa,2017-05-12T23:16:18Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340182,116340182,src/rpc/rawtransaction.cpp
sipa,2017-05-12T23:16:30Z,"Nice catch, fixed.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340193,116340193,src/txmempool.cpp
sipa,2017-05-12T23:19:15Z,"Ugh, that means exposing DisconnectResult :(",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340459,116340459,src/validation.cpp
sipa,2017-05-12T23:22:28Z,"As explained on IRC, references to std::unordered_map entries always remain valid, even under concurrent modification/insertion (including when a rehash is triggered), except when the entry itself is deleted. Iterators do get invalidated by rehashing, but CCoinsViewCache does not allow iterators to escape anymore (they used to be, inside CCoinsModifier).",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340742,116340742,src/coins.h
sipa,2017-05-12T23:24:09Z,Deleted this whole thing (see my response to @sdaftuar's comment on the same line).,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340849,116340849,src/rpc/blockchain.cpp
sipa,2017-05-12T23:49:07Z,"Agree, but I'm not going to rewrite history to fix that now. I can remember it when squashing.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116342644,116342644,src/validation.cpp
sipa,2017-05-13T00:01:39Z,"Agree, but again I'd rather not rewrite history. I can fix it when squashing, but just always setting it to false would not work (it would break the tests, which are very useful in determining that the correct behaviour remains during the whole changeset).",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116343427,116343427,src/coins.cpp
sipa,2017-05-13T00:03:26Z,Meh.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116343519,116343519,src/coins.cpp
sipa,2017-05-13T00:13:03Z,Sounds good. Will do when squashing.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116344023,116344023,src/validation.h
sipa,2017-05-13T00:40:58Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345486,116345486,src/undo.h
sipa,2017-05-13T00:41:12Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345499,116345499,src/undo.h
sipa,2017-05-13T00:41:34Z,Fixed by changing the type to int :(,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345518,116345518,src/validation.cpp
sipa,2017-05-13T00:41:54Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345553,116345553,src/validation.cpp
sipa,2017-05-13T00:42:24Z,Done.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345569,116345569,src/coins.cpp
sipa,2017-05-13T00:42:42Z,Done.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345584,116345584,src/coins.h
sipa,2017-05-13T00:43:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345596,116345596,src/rpc/rawtransaction.cpp
sipa,2017-05-13T00:43:22Z,"Right, there is no equivalent of ModifyCoins anymore.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345612,116345612,src/bench/ccoins_caching.cpp
sipa,2017-05-13T00:43:46Z,Added a bunch of overrides.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345637,116345637,src/init.cpp
sipa,2017-05-13T00:44:13Z,Done.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345655,116345655,src/txdb.h
sipa,2017-05-13T19:52:44Z,"Actually, that std::move doesn't exist anywhere in the current PR. I think you were commenting on an old commit.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116366162,116366162,src/validation.cpp
sipa,2017-05-13T19:53:23Z,Going to fix this in a squashed version.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116366171,116366171,src/coins.cpp
laanwj,2017-05-15T05:36:20Z,doc: `hash_serialized_2`,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116413229,116413229,src/rpc/blockchain.cpp
sdaftuar,2017-05-15T19:53:02Z,"The `if (!mapNextTx.count(txin.prevout))` guard isn't necessary here, right?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116585127,116585127,src/txmempool.cpp
ryanofsky,2017-05-17T14:11:58Z,"In commit ""Report on-disk size in gettxoutsetinfo""\n\nCould assert `6400 < size < 64000`",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117011975,117011975,test/functional/blockchain.py
sdaftuar,2017-05-17T19:40:52Z,"I was wondering what happens in this function if an input doesn't exist -- in the old code, it appears we'd `assert()` in `GetOutputFor()`, whereas in the new code we'll just silently return an incorrect value (because nValue is -1 in that case).  Do you think it's worth asserting here that AccessCoin is returning something valid?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117092057,117092057,src/coins.cpp
sipa,2017-05-17T20:12:56Z,"I can add an assert if you're concerned, but given that this code hasn't asserted probably ever, it should be fine. I really want to get rid of this method, and instead make the validation code build a vector of CCoin& references for all its inputs, and use that everywhere, as opposed to looking things up several times inline.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117098717,117098717,src/coins.cpp
sdaftuar,2017-05-18T21:39:06Z,Your plan sounds good!,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117360591,117360591,src/coins.cpp
gmaxwell,2017-05-19T22:07:44Z,"Having trouble with the logic around !inserted here. If an entry already existed, we remove its size. (potentially making cachedCoinsUsage underflow). Then if we were not willing to overwrite, we throw leaving the accounting in an odd state.\n\nWhy is the logic here not just having an if(inserted) on the last line and elimiating the !inserted block?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117584690,117584690,src/coins.cpp
gmaxwell,2017-05-19T22:16:34Z,preferably it should limit it to just the two overwrites that re actually needed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117585684,117585684,src/coins.h
sipa,2017-05-19T22:19:53Z,"> If an entry already existed, we remove its size. (potentially making cachedCoinsUsage underflow).\n\nUnderflow is not possible if the cachedCoinsUsage value was consistent with the database.\n\n> Then if we were not willing to overwrite, we throw leaving the accounting in an odd state.\n\nThat throw should be regarded as an assertion failure, except for the fact that tests can catch it.\n",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117586093,117586093,src/coins.cpp
gmaxwell,2017-05-19T22:21:32Z,"It may be advisable to also check 1.  The reason is that recently confirmed transactions will get requested again, and we're currently protected by this check. But if the transaction chained off output 0 it won't be in the cache anymore. Also testing 1 would be a lot less often that we would erroneously double request a transaction we just confirmed.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117586306,117586306,src/net_processing.cpp
gmaxwell,2017-05-19T22:28:11Z,changed txouts?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117587018,117587018,src/txdb.cpp
gmaxwell,2017-05-21T08:02:32Z,"Isn't this the maximum here the number of _INPUTS_ consumed by a block?  (e.g. base size divided by 40?)  I suppose the output number is higher so this at least won't cause failures, but I think it's wrong.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117626013,117626013,src/undo.h
sipa,2017-05-21T17:44:04Z,Indeed! Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117638202,117638202,src/undo.h
ryanofsky,2017-05-23T15:47:26Z,"In commit ""Extend coins_tests""\n\nI think it would be clearer to combine this if/else block with the previous one, so the different cases perform steps in a uniform order, and there are fewer conditions that need to be checked. The following seems to do the same work and drops around 10 lines of code:\n\n```\nif (insecure_rand() % 5 == 0 || coin.IsPruned()) {\n    newcoin.out.nValue = insecu",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r118030591,118030591,src/test/coins_tests.cpp
ryanofsky,2017-05-23T15:48:08Z,"""In commit ""Extend coins_tests""\n\nMaybe declare newcoin below closer to its first use.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r118030787,118030787,src/test/coins_tests.cpp
jnewbery,2017-05-30T13:24:15Z,the name should be updated to `hash_serialized_2`. The description should also be updated to say that `hash_serialized_2` will not be compatible with `hash_serialized` from clients <0.15.0.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119097194,119097194,src/rpc/blockchain.cpp
jnewbery,2017-05-30T13:45:24Z,"I think what you're trying to say with `""Earlier versions also stored the transaction version.""` would be better captured as `""Also stores a dummy value of zero. This is to be compatible with older versions which stored the transaction version""`.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119102355,119102355,src/undo.h
jnewbery,2017-05-30T13:57:04Z,perhaps add `Required to maintain compatibility with undo files written by pre-v0.15 clients`,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119105782,119105782,src/undo.h
jnewbery,2017-05-30T14:13:08Z,"nit: prefer using the util function `assert_greater_than_or_equal()` for this and the next line (`assert_greater_than_or_equal()` will print the value of `size` if the assert fails). Also consider implementing an `assert_in_range()` function to combine the two lines.\n\nYou could also add the size asserts to the tests on res2 and res3 below.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119110483,119110483,test/functional/blockchain.py
jnewbery,2017-05-30T14:22:34Z,Why is this test needed? Won't the prevout's height always be greater than zero?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119113261,119113261,src/undo.h
jnewbery,2017-05-30T14:31:45Z,"Is there a particular reason you're using a bitshift here, but multiplication/division elsewhere (in `Serialize()` and in `TxInUndoSerializer::Serialize()`/`Deserialize()`)?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119115976,119115976,src/coins.h
morcos,2017-05-30T20:12:55Z,"Should we add some sort of performance warning here, so people don't think they should be able to use this function without thinking about what it might end up doing?",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119202611,119202611,src/coins.cpp
jnewbery,2017-05-30T20:56:01Z,nit: should use new style of braces for an if clause on a new line (and remove the outdated comment),https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119212393,119212393,src/rpc/blockchain.cpp
jnewbery,2017-05-30T21:15:50Z,Rename to `GetCoin()`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217248,119217248,src/coins.h
jnewbery,2017-05-30T21:16:09Z,rename to `HaveCoin()` (or `HasCoin()`)?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217338,119217338,src/coins.h
jnewbery,2017-05-30T21:16:36Z,rename to `FetchCoin()`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217455,119217455,src/coins.h
jnewbery,2017-05-30T21:24:37Z,Rename to `CoinEntry`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119219254,119219254,src/txdb.cpp
jnewbery,2017-05-30T21:32:51Z,Rename to `HaveCoinInCache()` (or `HasCoinInCache()`)?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119221003,119221003,src/coins.h
jnewbery,2017-05-30T21:45:36Z,braces,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119223628,119223628,src/validation.cpp
jnewbery,2017-05-30T21:49:41Z,rename to `fHadCoinInCache`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224485,119224485,src/validation.cpp
jnewbery,2017-05-30T21:50:29Z,rename final argument to `vCoinsToUncache`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224666,119224666,src/validation.cpp
jnewbery,2017-05-30T21:51:01Z,rename to `vCoinToUncache`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224793,119224793,src/validation.cpp
jnewbery,2017-05-30T21:53:16Z,rename variable to `coin`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119225288,119225288,src/test/test_bitcoin_fuzzy.cpp
jnewbery,2017-05-30T22:00:22Z,"to me, `IsPruned()` makes less sense in the context of a single coin. For CCoins, `IsPruned()` meant that all the coins were spent and so the containing object could be pruned. For a single Coin class, I think `IsSpent()` makes more sense.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119226713,119226713,src/coins.h
jnewbery,2017-05-30T22:02:45Z,rename to `coinbasecoins`? Same for next two variables.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119227156,119227156,src/test/coins_tests.cpp
jnewbery,2017-05-30T22:03:00Z,rename to `oldcoin`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119227210,119227210,src/test/coins_tests.cpp
jnewbery,2017-05-30T22:07:39Z,"braces, same line, or ternary operator",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228013,119228013,src/test/coins_tests.cpp
jnewbery,2017-05-30T22:07:57Z,braces or same line,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228067,119228067,src/test/coins_tests.cpp
jnewbery,2017-05-30T22:08:34Z,rename to `origcoin`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228192,119228192,src/test/coins_tests.cpp
jnewbery,2017-05-30T22:18:24Z,braces or same line,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119229794,119229794,src/rpc/blockchain.cpp
jnewbery,2017-05-30T22:18:43Z,braces,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119229864,119229864,src/rpc/blockchain.cpp
jnewbery,2017-05-30T22:21:32Z,Why not make this a uint32_t to match `Coin.nHeight`?,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119230287,119230287,src/txmempool.h
sipa,2017-05-31T01:24:52Z,Fixed. The comment is not outdated.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253072,119253072,src/rpc/blockchain.cpp
sipa,2017-05-31T01:25:09Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253107,119253107,src/rpc/blockchain.cpp
sipa,2017-05-31T01:25:24Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253126,119253126,src/rpc/blockchain.cpp
sipa,2017-05-31T01:25:37Z,Done.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253150,119253150,src/undo.h
sipa,2017-05-31T01:25:52Z,Added a comment to explain.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253172,119253172,src/undo.h
sipa,2017-05-31T01:26:03Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253204,119253204,src/undo.h
sipa,2017-05-31T01:27:03Z,"Will do, but this should go in #10396.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253323,119253323,test/functional/blockchain.py
sipa,2017-05-31T01:27:51Z,Not really... just inconsistently applying the best practices of using the faster operation (and not relying on the compiler optimizer for doing so).,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253406,119253406,src/coins.h
sipa,2017-05-31T01:28:11Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253435,119253435,src/coins.h
sipa,2017-05-31T01:28:28Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253461,119253461,src/coins.h
sipa,2017-05-31T01:28:42Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253487,119253487,src/coins.h
sipa,2017-05-31T01:28:57Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253505,119253505,src/coins.h
sipa,2017-05-31T01:29:49Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253590,119253590,src/txdb.cpp
sipa,2017-05-31T01:30:03Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253613,119253613,src/validation.cpp
sipa,2017-05-31T01:30:18Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253638,119253638,src/validation.cpp
sipa,2017-05-31T01:30:29Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253652,119253652,src/validation.cpp
sipa,2017-05-31T01:30:43Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253671,119253671,src/validation.cpp
sipa,2017-05-31T01:31:21Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253742,119253742,src/test/test_bitcoin_fuzzy.cpp
sipa,2017-05-31T01:31:35Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253764,119253764,src/test/coins_tests.cpp
sipa,2017-05-31T01:31:52Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253790,119253790,src/test/coins_tests.cpp
sipa,2017-05-31T01:32:05Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253805,119253805,src/test/coins_tests.cpp
sipa,2017-05-31T01:33:14Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253903,119253903,src/test/coins_tests.cpp
sipa,2017-05-31T01:33:31Z,Fixed using scripted-diff.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253917,119253917,src/test/coins_tests.cpp
sipa,2017-05-31T01:33:47Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253945,119253945,src/txmempool.h
jnewbery,2017-05-31T14:36:08Z,I'd like to see some comments around this call (and the Upgrade() function definition). I imagine that at some point in a future version we might want to remove the Upgrade code and tear out the CCoins class entirely. That will break the ability to upgrade directly from pre 0.15 to that version without a reindex. A small comment at this call saying that this Upgrade is for a chainstate db build on,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119372511,119372511,src/init.cpp
jnewbery,2017-05-31T14:38:32Z,"Please add a comment saying this is a legacy class, only retained for the ability to upgrade chainstate DBs from pre 0.15 to post 0.15 without a reindex.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119373253,119373253,src/txdb.cpp
jnewbery,2017-05-31T14:54:35Z,"this was caught up in your scripted diff. For correctness should really be called `old_coins`, but I don't think it really matters.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119378767,119378767,src/txdb.cpp
jnewbery,2017-05-31T14:57:27Z,I think this can be removed? The only CCoins functions that are used in Upgrade() are the constructor and the deserializer.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119380059,119380059,src/txdb.cpp
jnewbery,2017-05-31T15:06:12Z,"In that case, I don't understand the comment. I thought it meant that the CCoinsViewMemPool class should be responsible for pruning the spent funds, instead of only when called through the rpc or rest.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119383283,119383283,src/rpc/blockchain.cpp
jnewbery,2017-05-31T15:09:06Z,cast not required. `coin.nHeight` and `MEMPOOL_HEIGHT` are both uint32_t,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119384151,119384151,src/rpc/blockchain.cpp
sipa,2017-05-31T16:13:14Z,"Added some comments. The details about upgrading are in the cpp file, because I expect that the Upgrade method will remain, regardless of what upgrades it supports.",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402571,119402571,src/init.cpp
sipa,2017-05-31T16:13:33Z,Done.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402655,119402655,src/txdb.cpp
sipa,2017-05-31T16:13:52Z,"Great catch, done!",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402728,119402728,src/txdb.cpp
sipa,2017-05-31T16:14:05Z,Reverted.,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402812,119402812,src/txdb.cpp
morcos,2017-06-01T17:48:09Z,"Do we want to check that `coin.nHeight == pindex->nHeight` ?\nNot sure if it matters, but that used to get checked...",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119683775,119683775,src/validation.cpp
morcos,2017-06-01T18:52:22Z,This comment is incorrect I believe?  It will never return true (nor should it) for a spent output,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119699551,119699551,src/coins.h
morcos,2017-06-07T16:58:42Z,"This is a DOS vector for too many disk lookups for a tx with lots of outputs, maybe the best bet is to check for all outputs only in cache iff there is a missing input",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120685214,120685214,src/validation.cpp
morcos,2017-06-07T19:53:32Z,"maybe this should be 30?\nsdaftuar said he saw 17 in only a week of testing",https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120728059,120728059,src/txdb.h
sdaftuar,2017-06-07T20:36:07Z,17 was incorrect; I mistakenly reported the cache delta between blocks (which includes the effect of transactions on the cache) as the per-block cache delta. ,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120737583,120737583,src/txdb.h
Earlz,2017-09-11T04:48:07Z,What is the point of this? Just to keep the database backwards compatible? ,https://github.com/bitcoin/bitcoin/pull/10195#discussion_r137979557,137979557,src/rest.cpp
