[
  {
    "sha": "bb3d105d76be96e1948864ecd2d50edfebc41c80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjNkMTA1ZDc2YmU5NmUxOTQ4ODY0ZWNkMmQ1MGVkZmViYzQxYzgw",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-08-01T19:17:40Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-08-01T19:17:40Z"
      },
      "message": "scripted-diff: stop using the gArgs wrappers\n\nThey were temporary additions to ease the transition.\n\n-BEGIN VERIFY SCRIPT-\nfind src/ -name \"*.cpp\" ! -wholename \"src/util.h\" ! -wholename \"src/util.cpp\" | xargs perl -i -pe 's/(?<!\\.)(ParseParameters|ReadConfigFile|IsArgSet|(Soft|Force)?(Get|Set)(|Bool|)Arg(s)?)\\(/gArgs.\\1(/g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b89bcd627d63cf85e1e3186208112781d711ebd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b89bcd627d63cf85e1e3186208112781d711ebd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb3d105d76be96e1948864ecd2d50edfebc41c80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d105d76be96e1948864ecd2d50edfebc41c80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb3d105d76be96e1948864ecd2d50edfebc41c80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d105d76be96e1948864ecd2d50edfebc41c80/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "f66c59650527022b4f7abd98ff0a1a4e4741bd34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66c59650527022b4f7abd98ff0a1a4e4741bd34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66c59650527022b4f7abd98ff0a1a4e4741bd34"
      }
    ],
    "stats": {
      "total": 690,
      "additions": 345,
      "deletions": 345
    },
    "files": [
      {
        "sha": "42b439724cbfca8ba6f92764c0fbc5dcb0caf625",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -79,10 +79,10 @@ static int AppInitRPC(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    ParseParameters(argc, argv);\n-    if (argc<2 || IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\") || IsArgSet(\"-version\")) {\n+    gArgs.ParseParameters(argc, argv);\n+    if (argc<2 || gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\") || gArgs.IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(_(\"%s RPC client version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\";\n-        if (!IsArgSet(\"-version\")) {\n+        if (!gArgs.IsArgSet(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n                   \"  bitcoin-cli [options] <command> [params]  \" + strprintf(_(\"Send command to %s\"), _(PACKAGE_NAME)) + \"\\n\" +\n                   \"  bitcoin-cli [options] -named <command> [name=value] ... \" + strprintf(_(\"Send command to %s (with named arguments)\"), _(PACKAGE_NAME)) + \"\\n\" +\n@@ -100,11 +100,11 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_SUCCESS;\n     }\n     if (!fs::is_directory(GetDataDir(false))) {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n+        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }\n     try {\n-        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;\n@@ -116,7 +116,7 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n-    if (GetBoolArg(\"-rpcssl\", false))\n+    if (gArgs.GetBoolArg(\"-rpcssl\", false))\n     {\n         fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n         return EXIT_FAILURE;\n@@ -198,15 +198,15 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     //     2. port in -rpcconnect (ie following : in ipv4 or ]: in ipv6)\n     //     3. default port for chain\n     int port = BaseParams().RPCPort();\n-    SplitHostPort(GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = GetArg(\"-rpcport\", port);\n+    SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n+    port = gArgs.GetArg(\"-rpcport\", port);\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n \n     // Synchronously look up hostname\n     raii_evhttp_connection evcon = obtain_evhttp_connection_base(base.get(), host, port);\n-    evhttp_connection_set_timeout(evcon.get(), GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT));\n+    evhttp_connection_set_timeout(evcon.get(), gArgs.GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT));\n \n     HTTPReply response;\n     raii_evhttp_request req = obtain_evhttp_request(http_request_done, (void*)&response);\n@@ -218,16 +218,16 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n \n     // Get credentials\n     std::string strRPCUserColonPass;\n-    if (GetArg(\"-rpcpassword\", \"\") == \"\") {\n+    if (gArgs.GetArg(\"-rpcpassword\", \"\") == \"\") {\n         // Try fall back to cookie-based authentication if no password is provided\n         if (!GetAuthCookie(&strRPCUserColonPass)) {\n             throw std::runtime_error(strprintf(\n                 _(\"Could not locate RPC credentials. No authentication cookie could be found, and no rpcpassword is set in the configuration file (%s)\"),\n-                    GetConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n+                    GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n \n         }\n     } else {\n-        strRPCUserColonPass = GetArg(\"-rpcuser\", \"\") + \":\" + GetArg(\"-rpcpassword\", \"\");\n+        strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");\n     }\n \n     struct evkeyvalq* output_headers = evhttp_request_get_output_headers(req.get());\n@@ -244,7 +244,7 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    std::string walletName = GetArg(\"-rpcwallet\", \"\");\n+    std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n     if (!walletName.empty()) {\n         char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n         if (encodedURI) {\n@@ -294,7 +294,7 @@ int CommandLineRPC(int argc, char *argv[])\n             argv++;\n         }\n         std::vector<std::string> args = std::vector<std::string>(&argv[1], &argv[argc]);\n-        if (GetBoolArg(\"-stdin\", false)) {\n+        if (gArgs.GetBoolArg(\"-stdin\", false)) {\n             // Read one arg per line from stdin and append\n             std::string line;\n             while (std::getline(std::cin,line))\n@@ -306,14 +306,14 @@ int CommandLineRPC(int argc, char *argv[])\n         args.erase(args.begin()); // Remove trailing method name from arguments vector\n \n         UniValue params;\n-        if(GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n             params = RPCConvertNamedValues(strMethod, args);\n         } else {\n             params = RPCConvertValues(strMethod, args);\n         }\n \n         // Execute and handle connection failures with -rpcwait\n-        const bool fWait = GetBoolArg(\"-rpcwait\", false);\n+        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n                 const UniValue reply = CallRPC(strMethod, params);"
      },
      {
        "sha": "c97a4e9e868b4e067c2ece00e97ca269931d2b11",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -39,7 +39,7 @@ static int AppInitRawTx(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    ParseParameters(argc, argv);\n+    gArgs.ParseParameters(argc, argv);\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n@@ -49,9 +49,9 @@ static int AppInitRawTx(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n \n-    fCreateBlank = GetBoolArg(\"-create\", false);\n+    fCreateBlank = gArgs.GetBoolArg(\"-create\", false);\n \n-    if (argc<2 || IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\"))\n+    if (argc<2 || gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\"))\n     {\n         // First part of help message is specific to this utility\n         std::string strUsage = strprintf(_(\"%s bitcoin-tx utility version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n@@ -737,9 +737,9 @@ static void OutputTxHex(const CTransaction& tx)\n \n static void OutputTx(const CTransaction& tx)\n {\n-    if (GetBoolArg(\"-json\", false))\n+    if (gArgs.GetBoolArg(\"-json\", false))\n         OutputTxJSON(tx);\n-    else if (GetBoolArg(\"-txid\", false))\n+    else if (gArgs.GetBoolArg(\"-txid\", false))\n         OutputTxHash(tx);\n     else\n         OutputTxHex(tx);"
      },
      {
        "sha": "82afbafdb0f4fb88437ad609d282cb65d0ea5fcc",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -71,14 +71,14 @@ bool AppInit(int argc, char* argv[])\n     // Parameters\n     //\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n-    ParseParameters(argc, argv);\n+    gArgs.ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n-    if (IsArgSet(\"-?\") || IsArgSet(\"-h\") ||  IsArgSet(\"-help\") || IsArgSet(\"-version\"))\n+    if (gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") ||  gArgs.IsArgSet(\"-help\") || gArgs.IsArgSet(\"-version\"))\n     {\n         std::string strUsage = strprintf(_(\"%s Daemon\"), _(PACKAGE_NAME)) + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n \n-        if (IsArgSet(\"-version\"))\n+        if (gArgs.IsArgSet(\"-version\"))\n         {\n             strUsage += FormatParagraph(LicenseInfo());\n         }\n@@ -98,12 +98,12 @@ bool AppInit(int argc, char* argv[])\n     {\n         if (!fs::is_directory(GetDataDir(false)))\n         {\n-            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n+            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n         try\n         {\n-            ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+            gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;\n@@ -125,7 +125,7 @@ bool AppInit(int argc, char* argv[])\n         }\n \n         // -server defaults to true for bitcoind but not for the GUI so do this here\n-        SoftSetBoolArg(\"-server\", true);\n+        gArgs.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n         InitLogging();\n         InitParameterInteraction();\n@@ -144,7 +144,7 @@ bool AppInit(int argc, char* argv[])\n             // InitError will have been called with detailed error, which ends up on console\n             exit(EXIT_FAILURE);\n         }\n-        if (GetBoolArg(\"-daemon\", false))\n+        if (gArgs.GetBoolArg(\"-daemon\", false))\n         {\n #if HAVE_DECL_DAEMON\n             fprintf(stdout, \"Bitcoin server starting\\n\");"
      },
      {
        "sha": "224c9eb0ea31d59954d5b060d0397284edcfab93",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -89,8 +89,8 @@ void SelectBaseParams(const std::string& chain)\n \n std::string ChainNameFromCommandLine()\n {\n-    bool fRegTest = GetBoolArg(\"-regtest\", false);\n-    bool fTestNet = GetBoolArg(\"-testnet\", false);\n+    bool fRegTest = gArgs.GetBoolArg(\"-regtest\", false);\n+    bool fTestNet = gArgs.GetBoolArg(\"-testnet\", false);\n \n     if (fTestNet && fRegTest)\n         throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");"
      },
      {
        "sha": "dd219c72915024bca6cd28f1e88e8c871ff52032",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -210,7 +210,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n static bool InitRPCAuthentication()\n {\n-    if (GetArg(\"-rpcpassword\", \"\") == \"\")\n+    if (gArgs.GetArg(\"-rpcpassword\", \"\") == \"\")\n     {\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n@@ -221,7 +221,7 @@ static bool InitRPCAuthentication()\n         }\n     } else {\n         LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\\n\");\n-        strRPCUserColonPass = GetArg(\"-rpcuser\", \"\") + \":\" + GetArg(\"-rpcpassword\", \"\");\n+        strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");\n     }\n     return true;\n }"
      },
      {
        "sha": "9d3ee916c92c41a1e6a5c7275f3c2db407822f4d",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -309,14 +309,14 @@ static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int defaultPort = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n-    if (!IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n+    if (!gArgs.IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n         endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n         endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n-        if (IsArgSet(\"-rpcbind\")) {\n+        if (gArgs.IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n@@ -369,7 +369,7 @@ bool InitHTTPServer()\n     if (!InitHTTPAllowList())\n         return false;\n \n-    if (GetBoolArg(\"-rpcssl\", false)) {\n+    if (gArgs.GetBoolArg(\"-rpcssl\", false)) {\n         uiInterface.ThreadSafeMessageBox(\n             \"SSL mode for RPC (-rpcssl) is no longer supported.\",\n             \"\", CClientUIInterface::MSG_ERROR);\n@@ -401,7 +401,7 @@ bool InitHTTPServer()\n         return false;\n     }\n \n-    evhttp_set_timeout(http, GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, NULL);\n@@ -412,7 +412,7 @@ bool InitHTTPServer()\n     }\n \n     LogPrint(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n@@ -442,7 +442,7 @@ std::future<bool> threadResult;\n bool StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n-    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     std::packaged_task<bool(event_base*, evhttp*)> task(ThreadHTTP);\n     threadResult = task.get_future();"
      },
      {
        "sha": "277f2b4ceaa249b3e754a45d645bd5739f3e6d28",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 101,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -199,7 +199,7 @@ void Shutdown()\n \n     StopTorControl();\n     UnregisterNodeSignals(GetNodeSignals());\n-    if (fDumpMempoolLater && GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (fDumpMempoolLater && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n     }\n \n@@ -321,7 +321,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     std::string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n+    if (strWarning != \"\" && !gArgs.GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, std::string(\"Safe mode: \") + strWarning);\n }\n@@ -332,7 +332,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const bool showDebug = GetBoolArg(\"-help-debug\", false);\n+    const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n@@ -546,7 +546,7 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     if (initialSync || !pBlockIndex)\n         return;\n \n-    std::string strCmd = GetArg(\"-blocknotify\", \"\");\n+    std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n \n     boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n     boost::thread t(runCommand, strCmd); // thread runs free\n@@ -683,12 +683,12 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n         StartShutdown();\n     }\n \n-    if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n+    if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n     } // End scope of CImportingNow\n-    if (GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         LoadMempool();\n         fDumpMempoolLater = !fRequestShutdown;\n     }\n@@ -727,7 +727,7 @@ bool AppInitServers(boost::thread_group& threadGroup)\n         return false;\n     if (!StartHTTPRPC())\n         return false;\n-    if (GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n+    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n         return false;\n     if (!StartHTTPServer())\n         return false;\n@@ -739,61 +739,61 @@ void InitParameterInteraction()\n {\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n-    if (IsArgSet(\"-bind\")) {\n-        if (SoftSetBoolArg(\"-listen\", true))\n+    if (gArgs.IsArgSet(\"-bind\")) {\n+        if (gArgs.SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n     }\n-    if (IsArgSet(\"-whitebind\")) {\n-        if (SoftSetBoolArg(\"-listen\", true))\n+    if (gArgs.IsArgSet(\"-whitebind\")) {\n+        if (gArgs.SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n     if (gArgs.IsArgSet(\"-connect\")) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n-        if (SoftSetBoolArg(\"-dnsseed\", false))\n+        if (gArgs.SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-listen\", false))\n+        if (gArgs.SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n     }\n \n-    if (IsArgSet(\"-proxy\")) {\n+    if (gArgs.IsArgSet(\"-proxy\")) {\n         // to protect privacy, do not listen by default if a default proxy server is specified\n-        if (SoftSetBoolArg(\"-listen\", false))\n+        if (gArgs.SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n         // to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1\n         // to listen locally, so don't rely on this happening through -listen below.\n-        if (SoftSetBoolArg(\"-upnp\", false))\n+        if (gArgs.SoftSetBoolArg(\"-upnp\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -upnp=0\\n\", __func__);\n         // to protect privacy, do not discover addresses by default\n-        if (SoftSetBoolArg(\"-discover\", false))\n+        if (gArgs.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n     }\n \n-    if (!GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+    if (!gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n         // do not map ports or try to retrieve public IP when not listening (pointless)\n-        if (SoftSetBoolArg(\"-upnp\", false))\n+        if (gArgs.SoftSetBoolArg(\"-upnp\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-discover\", false))\n+        if (gArgs.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n-        if (SoftSetBoolArg(\"-listenonion\", false))\n+        if (gArgs.SoftSetBoolArg(\"-listenonion\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n     }\n \n-    if (IsArgSet(\"-externalip\")) {\n+    if (gArgs.IsArgSet(\"-externalip\")) {\n         // if an explicit public IP is specified, do not try to find others\n-        if (SoftSetBoolArg(\"-discover\", false))\n+        if (gArgs.SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n     }\n \n     // disable whitelistrelay in blocksonly mode\n-    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n-        if (SoftSetBoolArg(\"-whitelistrelay\", false))\n+    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)) {\n+        if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", false))\n             LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -whitelistrelay=0\\n\", __func__);\n     }\n \n     // Forcing relay from whitelisted hosts implies we will accept relays from them in the first place.\n-    if (GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n-        if (SoftSetBoolArg(\"-whitelistrelay\", true))\n+    if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n+        if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n }\n@@ -805,10 +805,10 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n \n void InitLogging()\n {\n-    fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-    fLogIPs = GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n+    fPrintToConsole = gArgs.GetBoolArg(\"-printtoconsole\", false);\n+    fLogTimestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    fLogTimeMicros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s\\n\", FormatFullVersion());\n@@ -865,7 +865,7 @@ bool AppInitBasicSetup()\n         return InitError(\"Initializing networking failed\");\n \n #ifndef WIN32\n-    if (!GetBoolArg(\"-sysperms\", false)) {\n+    if (!gArgs.GetBoolArg(\"-sysperms\", false)) {\n         umask(077);\n     }\n \n@@ -893,8 +893,8 @@ bool AppInitParameterInteraction()\n     // also see: InitParameterInteraction()\n \n     // if using block pruning, then disallow txindex\n-    if (GetArg(\"-prune\", 0)) {\n-        if (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (gArgs.GetArg(\"-prune\", 0)) {\n+        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n     }\n \n@@ -906,7 +906,7 @@ bool AppInitParameterInteraction()\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = gArgs.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n@@ -947,55 +947,55 @@ bool AppInitParameterInteraction()\n     }\n \n     // Check for -debugnet\n-    if (GetBoolArg(\"-debugnet\", false))\n+    if (gArgs.GetBoolArg(\"-debugnet\", false))\n         InitWarning(_(\"Unsupported argument -debugnet ignored, use -debug=net.\"));\n     // Check for -socks - as this is a privacy risk to continue, exit here\n-    if (IsArgSet(\"-socks\"))\n+    if (gArgs.IsArgSet(\"-socks\"))\n         return InitError(_(\"Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n     // Check for -tor - as this is a privacy risk to continue, exit here\n-    if (GetBoolArg(\"-tor\", false))\n+    if (gArgs.GetBoolArg(\"-tor\", false))\n         return InitError(_(\"Unsupported argument -tor found, use -onion.\"));\n \n-    if (GetBoolArg(\"-benchmark\", false))\n+    if (gArgs.GetBoolArg(\"-benchmark\", false))\n         InitWarning(_(\"Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n-    if (GetBoolArg(\"-whitelistalwaysrelay\", false))\n+    if (gArgs.GetBoolArg(\"-whitelistalwaysrelay\", false))\n         InitWarning(_(\"Unsupported argument -whitelistalwaysrelay ignored, use -whitelistrelay and/or -whitelistforcerelay.\"));\n \n-    if (IsArgSet(\"-blockminsize\"))\n+    if (gArgs.IsArgSet(\"-blockminsize\"))\n         InitWarning(\"Unsupported argument -blockminsize ignored.\");\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n-    int ratio = std::min<int>(std::max<int>(GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int ratio = std::min<int>(std::max<int>(gArgs.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     if (ratio != 0) {\n         mempool.setSanityCheck(1.0 / ratio);\n     }\n-    fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n+    fCheckBlockIndex = gArgs.GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n+    fCheckpointsEnabled = gArgs.GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n-    hashAssumeValid = uint256S(GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n+    hashAssumeValid = uint256S(gArgs.GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n     if (!hashAssumeValid.IsNull())\n         LogPrintf(\"Assuming ancestors of block %s have valid signatures.\\n\", hashAssumeValid.GetHex());\n     else\n         LogPrintf(\"Validating signatures for all blocks.\\n\");\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n-    if (IsArgSet(\"-incrementalrelayfee\"))\n+    if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-incrementalrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"incrementalrelayfee\", GetArg(\"-incrementalrelayfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-incrementalrelayfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")));\n         incrementalRelayFee = CFeeRate(n);\n     }\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n-    nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    nScriptCheckThreads = gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)\n         nScriptCheckThreads += GetNumCores();\n     if (nScriptCheckThreads <= 1)\n@@ -1004,7 +1004,7 @@ bool AppInitParameterInteraction()\n         nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -1026,14 +1026,14 @@ bool AppInitParameterInteraction()\n     RegisterWalletRPCCommands(tableRPC);\n #endif\n \n-    nConnectTimeout = GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = gArgs.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n-    if (IsArgSet(\"-minrelaytxfee\")) {\n+    if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-minrelaytxfee\", \"\"), n)) {\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", GetArg(\"-minrelaytxfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")));\n         }\n         // High fee check is done afterward in CWallet::ParameterInteraction()\n         ::minRelayTxFee = CFeeRate(n);\n@@ -1045,55 +1045,55 @@ bool AppInitParameterInteraction()\n \n     // Sanity check argument for min fee for including tx in block\n     // TODO: Harmonize which arguments need sanity checking and where that happens\n-    if (IsArgSet(\"-blockmintxfee\"))\n+    if (gArgs.IsArgSet(\"-blockmintxfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-blockmintxfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"blockmintxfee\", GetArg(\"-blockmintxfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n))\n+            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")));\n     }\n \n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n     // implementations may inadvertently create non-standard transactions\n-    if (IsArgSet(\"-dustrelayfee\"))\n+    if (gArgs.IsArgSet(\"-dustrelayfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-dustrelayfee\", \"\"), n) || 0 == n)\n-            return InitError(AmountErrMsg(\"dustrelayfee\", GetArg(\"-dustrelayfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n         dustRelayFee = CFeeRate(n);\n     }\n \n-    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n+    fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n-    nBytesPerSigOp = GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n #ifdef ENABLE_WALLET\n     if (!CWallet::ParameterInteraction())\n         return false;\n #endif\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n-    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    fIsBareMultisigStd = gArgs.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n+    fAcceptDatacarrier = gArgs.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n+    nMaxDatacarrierBytes = gArgs.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(gArgs.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n-    if (GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n+    if (gArgs.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(\"rpcserialversion must be non-negative.\");\n \n-    if (GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(\"unknown rpcserialversion requested.\");\n \n-    nMaxTipAge = GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n-    fEnableReplacement = GetBoolArg(\"-mempoolreplacement\", DEFAULT_ENABLE_REPLACEMENT);\n-    if ((!fEnableReplacement) && IsArgSet(\"-mempoolreplacement\")) {\n+    fEnableReplacement = gArgs.GetBoolArg(\"-mempoolreplacement\", DEFAULT_ENABLE_REPLACEMENT);\n+    if ((!fEnableReplacement) && gArgs.IsArgSet(\"-mempoolreplacement\")) {\n         // Minimal effort at forwards compatibility\n-        std::string strReplacementModeList = GetArg(\"-mempoolreplacement\", \"\");  // default is impossible\n+        std::string strReplacementModeList = gArgs.GetArg(\"-mempoolreplacement\", \"\");  // default is impossible\n         std::vector<std::string> vstrReplacementModes;\n         boost::split(vstrReplacementModes, strReplacementModeList, boost::is_any_of(\",\"));\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n@@ -1198,7 +1198,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n+    if (gArgs.GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n         // Do this first since it both loads a bunch of debug.log into memory,\n         // and because this needs to happen before any other debug.log printing\n         ShrinkDebugFile();\n@@ -1211,7 +1211,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     InitSignatureCache();\n@@ -1234,7 +1234,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n      * that the server is there and will be ready later).  Warmup mode will\n      * be disabled when initialisation is finished.\n      */\n-    if (GetBoolArg(\"-server\", false))\n+    if (gArgs.GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n         if (!AppInitServers(threadGroup))\n@@ -1291,12 +1291,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     // Check for host lookup allowed before parsing any network related parameters\n-    fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n+    fNameLookup = gArgs.GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n+    bool proxyRandomize = gArgs.GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n-    std::string proxyArg = GetArg(\"-proxy\", \"\");\n+    std::string proxyArg = gArgs.GetArg(\"-proxy\", \"\");\n     SetLimited(NET_TOR);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n@@ -1318,7 +1318,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n     // -noonion (or -onion=0) disables connecting to .onion entirely\n     // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n-    std::string onionArg = GetArg(\"-onion\", \"\");\n+    std::string onionArg = gArgs.GetArg(\"-onion\", \"\");\n     if (onionArg != \"\") {\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n             SetLimited(NET_TOR); // set onions as unreachable\n@@ -1336,9 +1336,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     // see Step 2: parameter interactions for more information about these\n-    fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n-    fDiscover = GetBoolArg(\"-discover\", true);\n-    fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+    fListen = gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n+    fDiscover = gArgs.GetBoolArg(\"-discover\", true);\n+    fRelayTxes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n@@ -1358,27 +1358,27 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uint64_t nMaxOutboundLimit = 0; //unlimited unless -maxuploadtarget is set\n     uint64_t nMaxOutboundTimeframe = MAX_UPLOAD_TIMEFRAME;\n \n-    if (IsArgSet(\"-maxuploadtarget\")) {\n-        nMaxOutboundLimit = GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET)*1024*1024;\n+    if (gArgs.IsArgSet(\"-maxuploadtarget\")) {\n+        nMaxOutboundLimit = gArgs.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET)*1024*1024;\n     }\n \n     // ********************************************************* Step 7: load block chain\n \n-    fReindex = GetBoolArg(\"-reindex\", false);\n-    bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n+    fReindex = gArgs.GetBoolArg(\"-reindex\", false);\n+    bool fReindexChainState = gArgs.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (gArgs.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    nBlockTreeDBCache = std::min(nBlockTreeDBCache, (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n+    nBlockTreeDBCache = std::min(nBlockTreeDBCache, (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1fMiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n@@ -1425,7 +1425,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Check for changed -txindex state\n-                if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+                if (fTxIndex != gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -txindex\");\n                     break;\n                 }\n@@ -1489,7 +1489,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (!fReindex && !fReindexChainState) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                    if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                         LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n@@ -1506,8 +1506,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         }\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                         strLoadError = _(\"Corrupted block database detected\");\n                         break;\n                     }\n@@ -1606,7 +1606,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         fHaveGenesis = true;\n     }\n \n-    if (IsArgSet(\"-blocknotify\"))\n+    if (gArgs.IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n@@ -1630,13 +1630,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n-    if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n+    if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n     Discover(threadGroup);\n \n     // Map ports with UPnP\n-    MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;\n@@ -1647,8 +1647,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chainActive.Height();\n     connOptions.uiInterface = &uiInterface;\n-    connOptions.nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n \n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;"
      },
      {
        "sha": "403d3d4e4a9f74d3a76864ad9e3c3f1d63fcbcc2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -88,20 +88,20 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     options.nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     options.nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n     bool fWeightSet = false;\n-    if (IsArgSet(\"-blockmaxweight\")) {\n-        options.nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n+    if (gArgs.IsArgSet(\"-blockmaxweight\")) {\n+        options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n         options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n         fWeightSet = true;\n     }\n-    if (IsArgSet(\"-blockmaxsize\")) {\n-        options.nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n+        options.nBlockMaxSize = gArgs.GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n         if (!fWeightSet) {\n             options.nBlockMaxWeight = options.nBlockMaxSize * WITNESS_SCALE_FACTOR;\n         }\n     }\n-    if (IsArgSet(\"-blockmintxfee\")) {\n+    if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n         CAmount n = 0;\n-        ParseMoney(GetArg(\"-blockmintxfee\", \"\"), n);\n+        ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n);\n         options.blockMinFeeRate = CFeeRate(n);\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n@@ -151,7 +151,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n \n     pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n@@ -272,7 +272,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     nFees += iter->GetFee();\n     inBlock.insert(iter);\n \n-    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n+    bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n         LogPrintf(\"fee %s txid %s\\n\",\n                   CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),"
      },
      {
        "sha": "a99306c6f0d50864918eee485f5ada0225920c6f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -101,7 +101,7 @@ void CConnman::AddOneShot(const std::string& strDest)\n \n unsigned short GetListenPort()\n {\n-    return (unsigned short)(GetArg(\"-port\", Params().GetDefaultPort()));\n+    return (unsigned short)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -514,7 +514,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n     {\n-        bantimeoffset = GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n+        bantimeoffset = gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n         sinceUnixEpoch = false;\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n@@ -1575,7 +1575,7 @@ void CConnman::ThreadDNSAddressSeed()\n     //  creating fewer identifying DNS requests, reduces trust by giving seeds\n     //  less influence on the network topology, and reduces traffic to the seeds.\n     if ((addrman.size() > 0) &&\n-        (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n+        (!gArgs.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         if (!interruptNet.sleep_for(std::chrono::seconds(11)))\n             return;\n \n@@ -2355,7 +2355,7 @@ bool CConnman::Start(CScheduler& scheduler, Options connOptions)\n     // Send and receive from sockets, accept connections\n     threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n \n-    if (!GetBoolArg(\"-dnsseed\", true))\n+    if (!gArgs.GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n         threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));"
      },
      {
        "sha": "167405ef8846f3065a01d2dc5b5fa40235c52908",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -581,7 +581,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n \n void AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n     if (!vExtraTxnForCompact.size())\n@@ -704,7 +704,7 @@ void Misbehaving(NodeId pnode, int howmuch)\n         return;\n \n     state->nMisbehavior += howmuch;\n-    int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n+    int banscore = gArgs.GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrintf(\"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n@@ -1175,7 +1175,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n-    if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n+    if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n         return true;\n@@ -1530,7 +1530,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         bool fBlocksOnly = !fRelayTxes;\n \n         // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistrelay is true\n-        if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY))\n+        if (pfrom->fWhitelisted && gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY))\n             fBlocksOnly = false;\n \n         LOCK(cs_main);\n@@ -1771,7 +1771,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n-        if (!fRelayTxes && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n+        if (!fRelayTxes && (!pfrom->fWhitelisted || !gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom->GetId());\n             return true;\n@@ -1890,7 +1890,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n                 // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n-                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n                     LogPrint(BCLog::MEMPOOL, \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n@@ -1915,7 +1915,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 AddToCompactExtraTransactions(ptx);\n             }\n \n-            if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n+            if (pfrom->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were already in the mempool or rejected from it due\n                 // to policy, allowing the node to function as a gateway for\n@@ -3275,9 +3275,9 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         // Message: feefilter\n         //\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n-        if (pto->nVersion >= FEEFILTER_VERSION && GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n-            !(pto->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n-            CAmount currentFilter = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+        if (pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n+            !(pto->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n+            CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->nextSendTimeFeeFilter) {\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);"
      },
      {
        "sha": "eb24499102de1f92b87824159a6c0e5ea64f0f91",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -106,7 +106,7 @@ static QString GetLangTerritory()\n     if(!lang_territory_qsettings.isEmpty())\n         lang_territory = lang_territory_qsettings;\n     // 3) -lang command line argument\n-    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    lang_territory = QString::fromStdString(gArgs.GetArg(\"-lang\", lang_territory.toStdString()));\n     return lang_territory;\n }\n \n@@ -345,7 +345,7 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     // This must be done inside the BitcoinApplication constructor, or after it, because\n     // PlatformStyle::instantiate requires a QApplication\n     std::string platformName;\n-    platformName = GetArg(\"-uiplatform\", BitcoinGUI::DEFAULT_UIPLATFORM);\n+    platformName = gArgs.GetArg(\"-uiplatform\", BitcoinGUI::DEFAULT_UIPLATFORM);\n     platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n     if (!platformStyle) // Fall back to \"other\" if specified name not found\n         platformStyle = PlatformStyle::instantiate(\"other\");\n@@ -498,7 +498,7 @@ void BitcoinApplication::initializeResult(bool success)\n #endif\n \n         // If -min option passed, start window minimized.\n-        if(GetBoolArg(\"-min\", false))\n+        if(gArgs.GetBoolArg(\"-min\", false))\n         {\n             window->showMinimized();\n         }\n@@ -550,7 +550,7 @@ int main(int argc, char *argv[])\n \n     /// 1. Parse command-line options. These take precedence over anything else.\n     // Command-line options take precedence:\n-    ParseParameters(argc, argv);\n+    gArgs.ParseParameters(argc, argv);\n \n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n \n@@ -606,9 +606,9 @@ int main(int argc, char *argv[])\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n-    if (IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\") || IsArgSet(\"-version\"))\n+    if (gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\") || gArgs.IsArgSet(\"-version\"))\n     {\n-        HelpMessageDialog help(NULL, IsArgSet(\"-version\"));\n+        HelpMessageDialog help(NULL, gArgs.IsArgSet(\"-version\"));\n         help.showOrPrint();\n         return EXIT_SUCCESS;\n     }\n@@ -623,11 +623,11 @@ int main(int argc, char *argv[])\n     if (!fs::is_directory(GetDataDir(false)))\n     {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n-                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(GetArg(\"-datadir\", \"\"))));\n+                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n     try {\n-        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n@@ -691,12 +691,12 @@ int main(int argc, char *argv[])\n     // Allow parameter interaction before we create the options model\n     app.parameterSetup();\n     // Load GUI settings from QSettings\n-    app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n+    app.createOptionsModel(gArgs.IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);\n \n-    if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n+    if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n     int rv = EXIT_SUCCESS;"
      },
      {
        "sha": "8796a975d3490aa0be98e81a89a5f397489df598",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -651,7 +651,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             // Start client minimized\n             QString strArgs = \"-min\";\n             // Set -testnet /-regtest options\n-            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", gArgs.GetBoolArg(\"-testnet\", false), gArgs.GetBoolArg(\"-regtest\", false)));\n \n #ifdef UNICODE\n             boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n@@ -760,7 +760,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             optionFile << \"Name=Bitcoin\\n\";\n         else\n             optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n-        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", gArgs.GetBoolArg(\"-testnet\", false), gArgs.GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      },
      {
        "sha": "00f63183e5b5e77f652cb50ec9d9dd92d643d4e9",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -131,7 +131,7 @@ Intro::Intro(QWidget *parent) :\n     );\n     ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(tr(PACKAGE_NAME)));\n \n-    uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n+    uint64_t pruneTarget = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n     if (pruneTarget) {\n@@ -191,14 +191,14 @@ bool Intro::pickDataDirectory()\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */\n-    if(!GetArg(\"-datadir\", \"\").empty())\n+    if(!gArgs.GetArg(\"-datadir\", \"\").empty())\n         return true;\n     /* 1) Default data directory for operating system */\n     QString dataDir = getDefaultDataDirectory();\n     /* 2) Allow QSettings to override default dir */\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || settings.value(\"fReset\", false).toBool() || GetBoolArg(\"-resetguisettings\", false))\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || gArgs.GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || settings.value(\"fReset\", false).toBool() || gArgs.GetBoolArg(\"-resetguisettings\", false))\n     {\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;\n@@ -231,7 +231,7 @@ bool Intro::pickDataDirectory()\n      * (to be consistent with bitcoind behavior)\n      */\n     if(dataDir != getDefaultDataDirectory())\n-        SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+        gArgs.SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n     return true;\n }\n "
      },
      {
        "sha": "77efef3e3ca26f4f9d030492b9f9113f7f857b33",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -36,7 +36,7 @@ OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n \n void OptionsModel::addOverriddenOption(const std::string &option)\n {\n-    strOverriddenByCommandLine += QString::fromStdString(option) + \"=\" + QString::fromStdString(GetArg(option, \"\")) + \" \";\n+    strOverriddenByCommandLine += QString::fromStdString(option) + \"=\" + QString::fromStdString(gArgs.GetArg(option, \"\")) + \" \";\n }\n \n // Writes all missing QSettings with their default values\n@@ -86,18 +86,18 @@ void OptionsModel::Init(bool resetSettings)\n     //\n     // If setting doesn't exist create it with defaults.\n     //\n-    // If SoftSetArg() or SoftSetBoolArg() return false we were overridden\n+    // If gArgs.SoftSetArg() or gArgs.SoftSetBoolArg() return false we were overridden\n     // by command-line and show this in the UI.\n \n     // Main\n     if (!settings.contains(\"nDatabaseCache\"))\n         settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n-    if (!SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n+    if (!gArgs.SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n         addOverriddenOption(\"-dbcache\");\n \n     if (!settings.contains(\"nThreadsScriptVerif\"))\n         settings.setValue(\"nThreadsScriptVerif\", DEFAULT_SCRIPTCHECK_THREADS);\n-    if (!SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n+    if (!gArgs.SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n         addOverriddenOption(\"-par\");\n \n     if (!settings.contains(\"strDataDir\"))\n@@ -107,45 +107,45 @@ void OptionsModel::Init(bool resetSettings)\n #ifdef ENABLE_WALLET\n     if (!settings.contains(\"bSpendZeroConfChange\"))\n         settings.setValue(\"bSpendZeroConfChange\", true);\n-    if (!SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n+    if (!gArgs.SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n         addOverriddenOption(\"-spendzeroconfchange\");\n #endif\n \n     // Network\n     if (!settings.contains(\"fUseUPnP\"))\n         settings.setValue(\"fUseUPnP\", DEFAULT_UPNP);\n-    if (!SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n+    if (!gArgs.SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n         addOverriddenOption(\"-upnp\");\n \n     if (!settings.contains(\"fListen\"))\n         settings.setValue(\"fListen\", DEFAULT_LISTEN);\n-    if (!SoftSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n+    if (!gArgs.SoftSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n         addOverriddenOption(\"-listen\");\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n     if (!settings.contains(\"addrProxy\"))\n         settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n     // Only try to set -proxy, if user has enabled fUseProxy\n-    if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n+    if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n-    else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n+    else if(!settings.value(\"fUseProxy\").toBool() && !gArgs.GetArg(\"-proxy\", \"\").empty())\n         addOverriddenOption(\"-proxy\");\n \n     if (!settings.contains(\"fUseSeparateProxyTor\"))\n         settings.setValue(\"fUseSeparateProxyTor\", false);\n     if (!settings.contains(\"addrSeparateProxyTor\"))\n         settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n-    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n         addOverriddenOption(\"-onion\");\n-    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !GetArg(\"-onion\", \"\").empty())\n+    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.GetArg(\"-onion\", \"\").empty())\n         addOverriddenOption(\"-onion\");\n \n     // Display\n     if (!settings.contains(\"language\"))\n         settings.setValue(\"language\", \"\");\n-    if (!SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n+    if (!gArgs.SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n         addOverriddenOption(\"-lang\");\n \n     language = settings.value(\"language\").toString();"
      },
      {
        "sha": "4269d2f68e1350f961c17275e6790bc2998dd52c",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -145,7 +145,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             int error = X509_STORE_CTX_get_error(store_ctx);\n             // For testing payment requests, we allow self signed root certs!\n             // This option is just shown in the UI options, if -help-debug is enabled.\n-            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && gArgs.GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n                 throw SSLVerifyError(X509_verify_cert_error_string(error));\n             } else {\n                qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";"
      },
      {
        "sha": "6fe61f12b1bf962568c7f7207ae7b2558fc82b99",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -122,7 +122,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n \n     // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n     // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n-    QString certFile = QString::fromStdString(GetArg(\"-rootcertificates\", \"-system-\"));\n+    QString certFile = QString::fromStdString(gArgs.GetArg(\"-rootcertificates\", \"-system-\"));\n \n     // Empty store\n     if (certFile.isEmpty()) {"
      },
      {
        "sha": "e2abfb3742e2dbae1bab5b99583e52923afc4c12",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -41,7 +41,7 @@ void RPCNestedTests::rpcNestedTests()\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n     dir.mkpath(\".\");\n-    ForceSetArg(\"-datadir\", path);\n+    gArgs.ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n \n     TestingSetup test;"
      },
      {
        "sha": "5d8c23d13c11f64805f8681e940ca09e73427777",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -78,7 +78,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.insertBlock();\n \n         std::string strUsage = HelpMessage(HMM_BITCOIN_QT);\n-        const bool showDebug = GetBoolArg(\"-help-debug\", false);\n+        const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n         strUsage += HelpMessageGroup(tr(\"UI Options:\").toStdString());\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));"
      },
      {
        "sha": "3ca726d0f90661689220564384effd0e1ee5b372",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -739,7 +739,7 @@ bool WalletModel::bumpFee(uint256 hash)\n \n bool WalletModel::isWalletEnabled()\n {\n-   return !GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET);\n+   return !gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET);\n }\n \n bool WalletModel::hdEnabled() const"
      },
      {
        "sha": "2d57caba56ed82894058538c130cb197f84872d4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -1019,8 +1019,8 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n UniValue verifychain(const JSONRPCRequest& request)\n {\n-    int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n-    int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n+    int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n+    int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"verifychain ( checklevel nblocks )\\n\"\n@@ -1325,7 +1325,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-    size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n     ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n "
      },
      {
        "sha": "db0626b5e1ca62a95bfcd711440bb8b1d0b68727",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -68,7 +68,7 @@ static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n fs::path GetAuthCookieFile()\n {\n-    fs::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    fs::path path(gArgs.GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n     if (!path.is_complete()) path = GetDataDir() / path;\n     return path;\n }"
      },
      {
        "sha": "d9b793f27e644bc650342e106716c50f7c1b120d",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -562,7 +562,7 @@ void RPCRunLater(const std::string& name, std::function<void(void)> func, int64_\n int RPCSerializationFlags()\n {\n     int flag = 0;\n-    if (GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n         flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n     return flag;\n }"
      },
      {
        "sha": "4cc7afa2f5ec92196850f557a9636428fe97ba1d",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -74,7 +74,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "ffbeeb7d918614c265172b2d936c74e8b5c7e747",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -78,7 +78,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     std::atomic<bool> interruptDummy(false);\n \n     connman->ClearBanned();\n-    ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n+    gArgs.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n@@ -94,7 +94,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     Misbehaving(dummyNode1.GetId(), 1);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n-    ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+    gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      },
      {
        "sha": "18a7e599333ba510735eed42b065169caffe8be6",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 56,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -27,135 +27,135 @@ static void ResetArgs(const std::string& strArg)\n     for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n-    ParseParameters(vecChar.size(), &vecChar[0]);\n+    gArgs.ParseParameters(vecChar.size(), &vecChar[0]);\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n     ResetArgs(\"-foo\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-fooo\", true));\n \n     ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n     ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n     ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n \n }\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"eleven\"), \"\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"\");\n \n     ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"eleven\"), \"\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"\");\n \n     ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"eleven\"), \"11\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"11\");\n \n     ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n }\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n     ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"-foo\", false), true);\n+    BOOST_CHECK_EQUAL(gArgs.GetBoolArg(\"-foo\", false), true);\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n     ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "31b05d868b461319643143c3465cf34256fe7adc",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -80,7 +80,7 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n     BOOST_CHECK(port == Params().GetDefaultPort());\n     // test set port\n     unsigned short altPort = 12345;\n-    SoftSetArg(\"-port\", std::to_string(altPort));\n+    gArgs.SoftSetArg(\"-port\", std::to_string(altPort));\n     port = GetListenPort();\n     BOOST_CHECK(port == altPort);\n }"
      },
      {
        "sha": "b1e4700a45bb33a6f9729103a9b9365b2816dcd7",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -63,7 +63,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n-        ForceSetArg(\"-datadir\", pathTemp.string());\n+        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n \n         // Note that because we don't bother running a scheduler thread here,\n         // callbacks via CValidationInterface are unreliable, but that's OK,"
      },
      {
        "sha": "5113bb60db9cc9fd4db01a2d1b12962d8d4d8b21",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -81,7 +81,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         int64_t nMedian = vTimeOffsets.median();\n         std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n-        if (abs64(nMedian) <= std::max<int64_t>(0, GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT)))\n+        if (abs64(nMedian) <= std::max<int64_t>(0, gArgs.GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT)))\n         {\n             nTimeOffset = nMedian;\n         }"
      },
      {
        "sha": "33ad7dca48f2626a84ceb39ae12387e2b15b1ccd",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -525,7 +525,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n \n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n-        if (GetArg(\"-onion\", \"\") == \"\") {\n+        if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n             CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n             proxyType addrOnion = proxyType(resolved, true);\n             SetProxy(NET_TOR, addrOnion);\n@@ -642,7 +642,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n          *   cookie:   hex-encoded ~/.tor/control_auth_cookie\n          *   password: \"password\"\n          */\n-        std::string torpassword = GetArg(\"-torpassword\", \"\");\n+        std::string torpassword = gArgs.GetArg(\"-torpassword\", \"\");\n         if (!torpassword.empty()) {\n             if (methods.count(\"HASHEDPASSWORD\")) {\n                 LogPrint(BCLog::TOR, \"tor: Using HASHEDPASSWORD authentication\\n\");\n@@ -735,7 +735,7 @@ static boost::thread torControlThread;\n \n static void TorControlThread()\n {\n-    TorController ctrl(gBase, GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n+    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n \n     event_base_dispatch(gBase);\n }"
      },
      {
        "sha": "2b6d69468c57b792933162165d6c5abc1d09302f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -85,8 +85,8 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n-    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-    int crash_simulate = GetArg(\"-dbcrashratio\", 0);\n+    size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = gArgs.GetArg(\"-dbcrashratio\", 0);\n     assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();"
      },
      {
        "sha": "9d2c03b717ed053a7be049fe511eace507c67944",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -398,7 +398,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     // We also need to remove any now-immature transactions\n     mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n }\n \n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n@@ -456,7 +456,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n-    if (!GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n+    if (!gArgs.GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n@@ -611,7 +611,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n@@ -628,10 +628,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // Calculate in-mempool ancestors, up to a limit.\n         CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n+        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n+        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n@@ -783,7 +783,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n         if (!chainparams.RequireStandard()) {\n-            scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n+            scriptVerifyFlags = gArgs.GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n         }\n \n         // Check against previous transactions\n@@ -860,7 +860,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // trim mempool and check if tx was trimmed\n         if (!fOverrideMempoolLimit) {\n-            LimitMempoolSize(pool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n@@ -1061,7 +1061,7 @@ CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n static void AlertNotify(const std::string& strMessage)\n {\n     uiInterface.NotifyAlertChanged();\n-    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n+    std::string strCmd = gArgs.GetArg(\"-alertnotify\", \"\");\n     if (strCmd.empty()) return;\n \n     // Alert text should be plain ascii coming from a trusted source, but to\n@@ -1216,7 +1216,7 @@ static uint256 scriptExecutionCacheNonce(GetRandHash());\n void InitScriptExecutionCache() {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -1896,7 +1896,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n     if (nLastSetChain == 0) {\n         nLastSetChain = nNow;\n     }\n-    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n     int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n     // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n@@ -2416,7 +2416,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n-    int nStopAtHeight = GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n+    int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n         if (ShutdownRequested())\n@@ -3899,7 +3899,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n \n         LogPrintf(\"Initializing databases...\\n\");\n         // Use the provided setting for -txindex in the new database\n-        fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n+        fTxIndex = gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n         pblocktree->WriteFlag(\"txindex\", fTxIndex);\n     }\n     return true;\n@@ -4271,7 +4271,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(void)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {"
      },
      {
        "sha": "85bf66cfcda78706b7c50d78dab27793e4c6865d",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -78,7 +78,7 @@ bool CDBEnv::Open(const fs::path& pathIn)\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n-    if (GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n+    if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n     dbenv->set_lg_dir(pathLogDir.string().c_str());\n@@ -429,7 +429,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    env->dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+    env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n }\n \n void CWalletDBWrapper::IncrementUpdateCounter()"
      },
      {
        "sha": "c1ea2b6290b768e1e72b6c41a7e43d96daa2577d",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -193,7 +193,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n         vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n         currentResult = BumpFeeResult::WALLET_ERROR;"
      },
      {
        "sha": "98ad46606fa7b3e168b2eb6820e0bc0719a6f5b1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -1197,7 +1197,7 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n \n     {\n         LOCK(cs_main);\n-        if (!IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus()) && !GetBoolArg(\"-walletprematurewitness\", false)) {\n+        if (!IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus()) && !gArgs.GetBoolArg(\"-walletprematurewitness\", false)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Segregated witness not enabled on network\");\n         }\n     }\n@@ -3197,7 +3197,7 @@ static const CRPCCommand commands[] =\n \n void RegisterWalletRPCCommands(CRPCTable &t)\n {\n-    if (GetBoolArg(\"-disablewallet\", false))\n+    if (gArgs.GetBoolArg(\"-disablewallet\", false))\n         return;\n \n     for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)"
      },
      {
        "sha": "16d3eb8dba185dc9d35cfa9b907604ae53e4cb57",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 53,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -463,7 +463,7 @@ void CWallet::Flush(bool shutdown)\n \n bool CWallet::Verify()\n {\n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n         return true;\n \n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n@@ -495,7 +495,7 @@ bool CWallet::Verify()\n             return InitError(strError);\n         }\n \n-        if (GetBoolArg(\"-salvagewallet\", false)) {\n+        if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n             // Recover readable keypairs:\n             CWallet dummyWallet;\n             std::string backup_filename;\n@@ -953,7 +953,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n     // notify an external script when a wallet transaction comes in or is updated\n-    std::string strCmd = GetArg(\"-walletnotify\", \"\");\n+    std::string strCmd = gArgs.GetArg(\"-walletnotify\", \"\");\n \n     if ( !strCmd.empty())\n     {\n@@ -2443,8 +2443,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             ++it;\n     }\n \n-    size_t nMaxChainLength = std::min(GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT), GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n-    bool fRejectLongChains = GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n+    size_t nMaxChainLength = std::min(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT), gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n+    bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n         SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet) ||\n@@ -2875,15 +2875,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         }\n     }\n \n-    if (GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n+    if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         LockPoints lp;\n         CTxMemPoolEntry entry(wtxNew.tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n+        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n+        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n             strFailReason = _(\"Transaction has too long of a mempool chain\");\n@@ -3010,7 +3010,7 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n         // Obey mempool min fee when using smart fee estimation\n-        CAmount min_mempool_fee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n+        CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n         if (fee_needed < min_mempool_fee) {\n             fee_needed = min_mempool_fee;\n             if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n@@ -3221,7 +3221,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = std::max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n@@ -3877,7 +3877,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+    if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n         std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n@@ -3926,9 +3926,9 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n     }\n \n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n     {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+        int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n         if (nMaxVersion == 0) // the -upgradewallet without argument case\n         {\n             LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n@@ -3948,7 +3948,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     if (fFirstRun)\n     {\n         // Create new keyUser and set as default key\n-        if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n+        if (gArgs.GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n \n             // ensure this wallet.dat can only be opened by clients supporting HD with chain split\n             walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n@@ -3969,8 +3969,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n     }\n-    else if (IsArgSet(\"-usehd\")) {\n-        bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n+    else if (gArgs.IsArgSet(\"-usehd\")) {\n+        bool useHD = gArgs.GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n             InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n             return NULL;\n@@ -3986,7 +3986,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     RegisterValidationInterface(walletInstance);\n \n     CBlockIndex *pindexRescan = chainActive.Genesis();\n-    if (!GetBoolArg(\"-rescan\", false))\n+    if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n         CWalletDB walletdb(*walletInstance->dbw);\n         CBlockLocator locator;\n@@ -4026,7 +4026,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         walletInstance->dbw->IncrementUpdateCounter();\n \n         // Restore wallet transaction metadata after -zapwallettxes=1\n-        if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n+        if (gArgs.GetBoolArg(\"-zapwallettxes\", false) && gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n         {\n             CWalletDB walletdb(*walletInstance->dbw);\n \n@@ -4050,7 +4050,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             }\n         }\n     }\n-    walletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n+    walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {\n         LOCK(walletInstance->cs_wallet);\n@@ -4064,7 +4064,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n bool CWallet::InitLoadWallet()\n {\n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n+    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n         return true;\n     }\n@@ -4096,29 +4096,29 @@ void CWallet::postInitProcess(CScheduler& scheduler)\n \n bool CWallet::ParameterInteraction()\n {\n-    SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+    gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n     const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n \n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n         return true;\n \n-    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && SoftSetBoolArg(\"-walletbroadcast\", false)) {\n+    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    if (GetBoolArg(\"-salvagewallet\", false)) {\n+    if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n         }\n         // Rewrite just private keys: rescan to find transactions\n-        if (SoftSetBoolArg(\"-rescan\", true)) {\n+        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n             LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n         }\n     }\n \n-    int zapwallettxes = GetArg(\"-zapwallettxes\", 0);\n+    int zapwallettxes = gArgs.GetArg(\"-zapwallettxes\", 0);\n     // -zapwallettxes implies dropping the mempool on startup\n-    if (zapwallettxes != 0 && SoftSetBoolArg(\"-persistmempool\", false)) {\n+    if (zapwallettxes != 0 && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {\n         LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -persistmempool=0\\n\", __func__, zapwallettxes);\n     }\n \n@@ -4127,61 +4127,61 @@ bool CWallet::ParameterInteraction()\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n         }\n-        if (SoftSetBoolArg(\"-rescan\", true)) {\n+        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -rescan=1\\n\", __func__, zapwallettxes);\n         }\n     }\n \n     if (is_multiwallet) {\n-        if (GetBoolArg(\"-upgradewallet\", false)) {\n+        if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-upgradewallet\"));\n         }\n     }\n \n-    if (GetBoolArg(\"-sysperms\", false))\n+    if (gArgs.GetBoolArg(\"-sysperms\", false))\n         return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n-    if (GetArg(\"-prune\", 0) && GetBoolArg(\"-rescan\", false))\n+    if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n     if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-    if (IsArgSet(\"-mintxfee\"))\n+    if (gArgs.IsArgSet(\"-mintxfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n-            return InitError(AmountErrMsg(\"mintxfee\", GetArg(\"-mintxfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n         if (n > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n                         _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         CWallet::minTxFee = CFeeRate(n);\n     }\n-    if (IsArgSet(\"-fallbackfee\"))\n+    if (gArgs.IsArgSet(\"-fallbackfee\"))\n     {\n         CAmount nFeePerK = 0;\n-        if (!ParseMoney(GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), GetArg(\"-fallbackfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n         if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         CWallet::fallbackFee = CFeeRate(nFeePerK);\n     }\n-    if (IsArgSet(\"-discardfee\"))\n+    if (gArgs.IsArgSet(\"-discardfee\"))\n     {\n         CAmount nFeePerK = 0;\n-        if (!ParseMoney(GetArg(\"-discardfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), GetArg(\"-discardfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n         if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n                         _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         CWallet::m_discard_rate = CFeeRate(nFeePerK);\n     }\n-    if (IsArgSet(\"-paytxfee\"))\n+    if (gArgs.IsArgSet(\"-paytxfee\"))\n     {\n         CAmount nFeePerK = 0;\n-        if (!ParseMoney(GetArg(\"-paytxfee\", \"\"), nFeePerK))\n-            return InitError(AmountErrMsg(\"paytxfee\", GetArg(\"-paytxfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK))\n+            return InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n         if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n                         _(\"This is the transaction fee you will pay if you send a transaction.\"));\n@@ -4190,26 +4190,26 @@ bool CWallet::ParameterInteraction()\n         if (payTxFee < ::minRelayTxFee)\n         {\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n+                                       gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n         }\n     }\n-    if (IsArgSet(\"-maxtxfee\"))\n+    if (gArgs.IsArgSet(\"-maxtxfee\"))\n     {\n         CAmount nMaxFee = 0;\n-        if (!ParseMoney(GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", GetArg(\"-maxtxfee\", \"\")));\n+        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n         if (nMaxFee > HIGH_MAX_TX_FEE)\n             InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n         if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n         {\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n         }\n     }\n-    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fWalletRbf = GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n+    nTxConfirmTarget = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n     return true;\n }"
      },
      {
        "sha": "de709758bd225008c70839fbd248b7b5fd912bad",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -573,7 +573,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n                     if (strType == \"tx\")\n                         // Rescan if there is a bad transaction record:\n-                        SoftSetBoolArg(\"-rescan\", true);\n+                        gArgs.SoftSetBoolArg(\"-rescan\", true);\n                 }\n             }\n             if (!strErr.empty())\n@@ -751,7 +751,7 @@ void MaybeCompactWalletDB()\n     if (fOneThread.exchange(true)) {\n         return;\n     }\n-    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET)) {\n+    if (!gArgs.GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET)) {\n         return;\n     }\n "
      },
      {
        "sha": "d4e33b701a8a8d1b8d0761936bbff81f64a2ef00",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -51,7 +51,7 @@ std::string GetWarnings(const std::string& strFor)\n         strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n     }\n \n-    if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n+    if (gArgs.GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n         strStatusBar = strRPC = strGUI = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong"
      },
      {
        "sha": "e8be1020829395d147055d50c58d43815ffaf8a0",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d105d76be96e1948864ecd2d50edfebc41c80/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "patch": "@@ -43,10 +43,10 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n     for (std::map<std::string, CZMQNotifierFactory>::const_iterator i=factories.begin(); i!=factories.end(); ++i)\n     {\n         std::string arg(\"-zmq\" + i->first);\n-        if (IsArgSet(arg))\n+        if (gArgs.IsArgSet(arg))\n         {\n             CZMQNotifierFactory factory = i->second;\n-            std::string address = GetArg(arg, \"\");\n+            std::string address = gArgs.GetArg(arg, \"\");\n             CZMQAbstractNotifier *notifier = factory();\n             notifier->SetType(i->first);\n             notifier->SetAddress(address);"
      }
    ]
  },
  {
    "sha": "3b22edd106f51cc25b200e41ffaab10877c50144",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjIyZWRkMTA2ZjUxY2MyNWIyMDBlNDFmZmFhYjEwODc3YzUwMTQ0",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-06-15T20:45:55Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-08-01T19:18:05Z"
      },
      "message": "remove unused gArgs wrappers",
      "tree": {
        "sha": "36e5ad2f1292dd013c5dd73eed05d87e803d8c98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36e5ad2f1292dd013c5dd73eed05d87e803d8c98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b22edd106f51cc25b200e41ffaab10877c50144",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b22edd106f51cc25b200e41ffaab10877c50144",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b22edd106f51cc25b200e41ffaab10877c50144",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b22edd106f51cc25b200e41ffaab10877c50144/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d105d76be96e1948864ecd2d50edfebc41c80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb3d105d76be96e1948864ecd2d50edfebc41c80"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 3,
      "deletions": 49
    },
    "files": [
      {
        "sha": "4790dd0457bb6fdb163026a5a11e048b527ff9fd",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b22edd106f51cc25b200e41ffaab10877c50144/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b22edd106f51cc25b200e41ffaab10877c50144/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3b22edd106f51cc25b200e41ffaab10877c50144",
        "patch": "@@ -564,8 +564,8 @@ const fs::path &GetDataDir(bool fNetSpecific)\n     if (!path.empty())\n         return path;\n \n-    if (IsArgSet(\"-datadir\")) {\n-        path = fs::system_complete(GetArg(\"-datadir\", \"\"));\n+    if (gArgs.IsArgSet(\"-datadir\")) {\n+        path = fs::system_complete(gArgs.GetArg(\"-datadir\", \"\"));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -627,7 +627,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n #ifndef WIN32\n fs::path GetPidFile()\n {\n-    fs::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n+    fs::path pathPidFile(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }"
      },
      {
        "sha": "936f58d37cb8b0b35aa8f4fc7eacc1db7d0c0f51",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b22edd106f51cc25b200e41ffaab10877c50144/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b22edd106f51cc25b200e41ffaab10877c50144/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3b22edd106f51cc25b200e41ffaab10877c50144",
        "patch": "@@ -263,52 +263,6 @@ class ArgsManager\n \n extern ArgsManager gArgs;\n \n-// wrappers using the global ArgsManager:\n-static inline void ParseParameters(int argc, const char*const argv[])\n-{\n-    gArgs.ParseParameters(argc, argv);\n-}\n-\n-static inline void ReadConfigFile(const std::string& confPath)\n-{\n-    gArgs.ReadConfigFile(confPath);\n-}\n-\n-static inline bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n-{\n-    return gArgs.SoftSetArg(strArg, strValue);\n-}\n-\n-static inline void ForceSetArg(const std::string& strArg, const std::string& strValue)\n-{\n-    gArgs.ForceSetArg(strArg, strValue);\n-}\n-\n-static inline bool IsArgSet(const std::string& strArg)\n-{\n-    return gArgs.IsArgSet(strArg);\n-}\n-\n-static inline std::string GetArg(const std::string& strArg, const std::string& strDefault)\n-{\n-    return gArgs.GetArg(strArg, strDefault);\n-}\n-\n-static inline int64_t GetArg(const std::string& strArg, int64_t nDefault)\n-{\n-    return gArgs.GetArg(strArg, nDefault);\n-}\n-\n-static inline bool GetBoolArg(const std::string& strArg, bool fDefault)\n-{\n-    return gArgs.GetBoolArg(strArg, fDefault);\n-}\n-\n-static inline bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n-{\n-    return gArgs.SoftSetBoolArg(strArg, fValue);\n-}\n-\n /**\n  * Format a string to be used as group of options in help messages\n  *"
      }
    ]
  }
]