[
  {
    "sha": "fd1dae10b4a549ba9292d837235d59bd9eebbed3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDFkYWUxMGI0YTU0OWJhOTI5MmQ4MzcyMzVkNTliZDllZWJiZWQz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-22T20:23:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-11T06:57:55Z"
      },
      "message": "tests: Add fuzzing harness for ProcessMessage(...)",
      "tree": {
        "sha": "0fffb609637f4517228a2ada894d9fa9fa314598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fffb609637f4517228a2ada894d9fa9fa314598"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1dae10b4a549ba9292d837235d59bd9eebbed3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5518eeec2727d40e1105901a8751bf584ab69402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5518eeec2727d40e1105901a8751bf584ab69402",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5518eeec2727d40e1105901a8751bf584ab69402"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 109,
      "deletions": 2
    },
    "files": [
      {
        "sha": "02743a2e060aa8aef6c39929536b67c5e2f58d84",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fd1dae10b4a549ba9292d837235d59bd9eebbed3",
        "patch": "@@ -53,6 +53,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/prefilled_transaction_deserialize \\\n+  test/fuzz/process_message \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n@@ -542,6 +543,12 @@ test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_prefilled_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n+test_fuzz_process_message_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_process_message_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n test_fuzz_psbt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_psbt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_psbt_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "e4df9fb90e207ea3e166e98bc4ae10d661ccf174",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fd1dae10b4a549ba9292d837235d59bd9eebbed3",
        "patch": "@@ -1908,7 +1908,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)"
      },
      {
        "sha": "934f7410684980968e0a25cc595bfb07eeba43fc",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=fd1dae10b4a549ba9292d837235d59bd9eebbed3",
        "patch": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <iosfwd>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+const RegTestingSetup* g_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\n+    p2p_node.fSuccessfullyConnected = true;\n+    p2p_node.nVersion = PROTOCOL_VERSION;\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+    g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+    try {\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n+    } catch (const std::ios_base::failure& e) {\n+        const std::string exception_message{e.what()};\n+        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n+        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n+            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n+            assert(false);\n+        }\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}"
      },
      {
        "sha": "ad3ff48860494b91b0a43d16ab841e4e37bd232f",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd1dae10b4a549ba9292d837235d59bd9eebbed3/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fd1dae10b4a549ba9292d837235d59bd9eebbed3",
        "patch": "@@ -13,6 +13,7 @@\n #include <init.h>\n #include <miner.h>\n #include <net.h>\n+#include <net_processing.h>\n #include <noui.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n@@ -62,7 +63,7 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n }\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n-    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / std::to_string(g_insecure_rand_ctx_temp_path.rand32())}\n+    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()}\n {\n     fs::create_directories(m_path_root);\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\n@@ -136,6 +137,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     m_node.mempool->setSanityCheck(1.0);\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+    m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler);\n }\n \n TestingSetup::~TestingSetup()"
      }
    ]
  },
  {
    "sha": "9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjIwYTBmZGQwZjNkYzJjOGRkN2NiZWVmYWM3ZDExMTA2NDUxYjUx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-23T11:47:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-11T06:57:55Z"
      },
      "message": "tests: Add one specialized ProcessMessage(...) fuzzing binary per message type for optimal results when using coverage-guided fuzzing",
      "tree": {
        "sha": "ae345dfd9c1ecb1800e55210d3a7ad510c2ccf90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae345dfd9c1ecb1800e55210d3a7ad510c2ccf90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd1dae10b4a549ba9292d837235d59bd9eebbed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1dae10b4a549ba9292d837235d59bd9eebbed3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd1dae10b4a549ba9292d837235d59bd9eebbed3"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 168,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e1ca4d6cdcc5140885a5c1844747959236af2eba",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 168,
        "deletions": 1,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9220a0fdd0f3dc2c8dd7cbeefac7d11106451b51",
        "patch": "@@ -2,7 +2,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n FUZZ_TARGETS = \\\n   test/fuzz/addr_info_deserialize \\\n   test/fuzz/address_deserialize \\\n@@ -54,6 +53,30 @@ FUZZ_TARGETS = \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/process_message \\\n+  test/fuzz/process_message_addr \\\n+  test/fuzz/process_message_block \\\n+  test/fuzz/process_message_blocktxn \\\n+  test/fuzz/process_message_cmpctblock \\\n+  test/fuzz/process_message_feefilter \\\n+  test/fuzz/process_message_filteradd \\\n+  test/fuzz/process_message_filterclear \\\n+  test/fuzz/process_message_filterload \\\n+  test/fuzz/process_message_getaddr \\\n+  test/fuzz/process_message_getblocks \\\n+  test/fuzz/process_message_getblocktxn \\\n+  test/fuzz/process_message_getdata \\\n+  test/fuzz/process_message_getheaders \\\n+  test/fuzz/process_message_headers \\\n+  test/fuzz/process_message_inv \\\n+  test/fuzz/process_message_mempool \\\n+  test/fuzz/process_message_notfound \\\n+  test/fuzz/process_message_ping \\\n+  test/fuzz/process_message_pong \\\n+  test/fuzz/process_message_sendcmpct \\\n+  test/fuzz/process_message_sendheaders \\\n+  test/fuzz/process_message_tx \\\n+  test/fuzz/process_message_verack \\\n+  test/fuzz/process_message_version \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n@@ -549,6 +572,150 @@ test_fuzz_process_message_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_process_message_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n \n+test_fuzz_process_message_addr_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=addr\n+test_fuzz_process_message_addr_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_addr_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_addr_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_addr_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=block\n+test_fuzz_process_message_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_block_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_blocktxn_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=blocktxn\n+test_fuzz_process_message_blocktxn_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_blocktxn_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_blocktxn_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_blocktxn_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_cmpctblock_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=cmpctblock\n+test_fuzz_process_message_cmpctblock_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_cmpctblock_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_cmpctblock_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_cmpctblock_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_feefilter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=feefilter\n+test_fuzz_process_message_feefilter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_feefilter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_feefilter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_feefilter_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_filteradd_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=filteradd\n+test_fuzz_process_message_filteradd_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_filteradd_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_filteradd_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_filteradd_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_filterclear_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=filterclear\n+test_fuzz_process_message_filterclear_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_filterclear_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_filterclear_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_filterclear_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_filterload_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=filterload\n+test_fuzz_process_message_filterload_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_filterload_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_filterload_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_filterload_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_getaddr_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getaddr\n+test_fuzz_process_message_getaddr_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_getaddr_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_getaddr_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_getaddr_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_getblocks_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getblocks\n+test_fuzz_process_message_getblocks_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_getblocks_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_getblocks_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_getblocks_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_getblocktxn_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getblocktxn\n+test_fuzz_process_message_getblocktxn_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_getblocktxn_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_getblocktxn_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_getblocktxn_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_getdata_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getdata\n+test_fuzz_process_message_getdata_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_getdata_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_getdata_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_getdata_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_getheaders_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getheaders\n+test_fuzz_process_message_getheaders_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_getheaders_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_getheaders_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_getheaders_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_headers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=headers\n+test_fuzz_process_message_headers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_headers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_headers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_headers_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_inv_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=inv\n+test_fuzz_process_message_inv_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_inv_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_inv_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_inv_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_mempool_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=mempool\n+test_fuzz_process_message_mempool_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_mempool_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_mempool_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_mempool_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_notfound_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=notfound\n+test_fuzz_process_message_notfound_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_notfound_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_notfound_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_notfound_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_ping_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=ping\n+test_fuzz_process_message_ping_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_ping_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_ping_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_ping_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_pong_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=pong\n+test_fuzz_process_message_pong_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_pong_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_pong_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_pong_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_sendcmpct_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=sendcmpct\n+test_fuzz_process_message_sendcmpct_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_sendcmpct_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_sendcmpct_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_sendcmpct_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_sendheaders_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=sendheaders\n+test_fuzz_process_message_sendheaders_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_sendheaders_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_sendheaders_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_sendheaders_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=tx\n+test_fuzz_process_message_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_tx_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_tx_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_verack_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=verack\n+test_fuzz_process_message_verack_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_verack_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_verack_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_verack_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n+test_fuzz_process_message_version_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=version\n+test_fuzz_process_message_version_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_message_version_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_message_version_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_message_version_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+\n test_fuzz_psbt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_psbt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_psbt_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      }
    ]
  }
]