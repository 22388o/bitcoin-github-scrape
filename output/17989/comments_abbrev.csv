DrahtBot,2020-01-23 14:47:13,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18134 (Replace std::to_string with locale-independent alternative by Empact)\n* #17997 (refactor: Remove mempool global f",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-577712875,577712875,
laanwj,2020-02-10 16:42:09,code review ACK 1b67435bccb8e159130ee8dc558c039cbcc5767c,https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584215068,584215068,
practicalswift,2020-02-10 18:36:26,@laanwj Thanks for reviewing. Pushed a commit which removes the tinyformat dependency from `ToString(‚Ä¶)`. Please re-review :),https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584285257,584285257,
practicalswift,2020-03-09 15:19:26,Rebased! :),https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596594877,596594877,
practicalswift,2020-03-09 19:27:30,Rebased :),https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596735801,596735801,
MarcoFalke,2020-03-10 18:53:39,"Also, travis is failing ",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597254875,597254875,
practicalswift,2020-03-10 18:59:48,"> Concept ACK. Is there a reason to both allow all message types and then add some fuzzers that only allow one message type?\n\nYes there is :)\n\n1. The reason to allow all message types in one of the fuzzers: this allows auto-detection and thus fuzzing of newly introduced messages types without updating the fuzzer. See https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596803815 for ",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597257649,597257649,
naumenkogs,2020-03-10 20:55:16,Concept ACK. This seems super-useful.,https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597309905,597309905,
practicalswift,2020-03-10 22:06:14,"@MarcoFalke After applying the suggested patch and switching to `RegTestingSetup` I'm running in to this issue on fuzzer exit:\n\n```\n$ touch dummy_file\n$ src/test/fuzz/process_message dummy_file\nprocess_message: /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:116: boost::condition_variable::~condition_variable(): Assertion `!ret' failed.\n==12861== ERROR: libFuzzer: deadly s",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597340705,597340705,
MarcoFalke,2020-03-10 23:19:36,"@practicalswift C++ is a shitshow when it comes to static initialization (order). You might have to manually set up everything in the ""right"" order:\n\n```diff\ndiff --git a/src/test/fuzz/process_message.cpp b/src/test/fuzz/process_message.cpp\nindex dcf0809e52..92bbc2681e 100644\n--- a/src/test/fuzz/process_message.cpp\n+++ b/src/test/fuzz/process_message.cpp\n@@ -80,15 +80,16 @@ const std",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597366595,597366595,
practicalswift,2020-03-11 07:02:34,"@MarcoFalke Indeed :) Thanks for the patch - that fixed the issue!\n\nPlease re-review - I think we should be ready to go :)",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597475525,597475525,
MarcoFalke,2020-03-11 11:55:16,"@practicalswift pls push your local branch to GitHub, thx",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597590051,597590051,
practicalswift,2020-03-11 12:07:51,@MarcoFalke Sorry! Done! :),https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597595100,597595100,
MarcoFalke,2020-03-11 12:49:21,"ACK 9220a0fdd0 üèä\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 9220a0fdd0 üèä\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjT1QwAhjXDNbw5aYFTlg68glVfl5CPdMNZ4gKbD/RkTp3bWXzxo7f/RvRh1WCc\n+ifotMLe4Ihdj2r6H6guhYy46Damnk+qPhaDfLxGQAc2mwZrJ4g",https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597613039,597613039,
MarcoFalke,2020-03-10 15:50:40,Why is this needed and why does it reimplement stuff that could be inherited from `RegTestingSetup`?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390418127,390418127,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 15:54:32,"```suggestion\nstd::unique_ptr<FuzzingSetup> g_fuzzing_setup;\n```\n\nThis should be prefixed with `g_` to convey this is global state that is shared between fuzz calls and might lead to non-determinism.",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390421010,390421010,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 16:05:28,Good point! Fixed!,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390429237,390429237,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 16:22:04,The setup requirements for the fuzzers are a bit different from the requirements for the unit tests. To name one thing I wanted `FastRandomContext().rand64()` instead of `g_insecure_rand_ctx_temp_path.rand32()` to guarantee unique directory names. I ran in to a few such issues until I gave up on inheriting from `RegTestingSetup` which was my initial plan :),https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390441097,390441097,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 17:39:56,"Sorry, I don't understand.\n\n* The fuzzing setup here is a single global, so it is one datadir per process that does not change. Assuming 60 processes or so, 32 bits of randomness should be sufficient. Though, feel free to change it to 256 bits of randomness.\n\n* Why are the requirements different? There are different `*TestingSetup`s to accommodate for different needs, but they are mostly i",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390493966,390493966,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 17:41:08,100 lines of undocumented code without a given reason are even too much for unit or fuzz tests. This makes it harder to understand and change the tests in the future.,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390494749,390494749,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 18:11:37,"> The fuzzing setup here is a single global, so it is one datadir per process that does not change. Assuming 60 processes or so, 32 bits of randomness should be sufficient.\n\nOh, true. I experimented with having the fuzzing setup non-global to start with (one setup per `test_one_input`). That's probably when `FastRandomContext().rand64()` was thought to be needed IIRC.\n\nI'll try your patch:",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390514338,390514338,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:29:13,Unused?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390524897,390524897,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:29:51,Unused?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525259,390525259,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:30:52,Unused?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525911,390525911,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:31:17,Unused?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526189,390526189,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:31:29,Unused?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526318,390526318,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:31:55,Unused?,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526557,390526557,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:33:12,"Unused except for map, set, assert and string?",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390527256,390527256,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:35:07,"```suggestion\n    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE)};\n```",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390528317,390528317,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:36:56,why? Bitcoin Core should just drop the message on the floor itself,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390529390,390529390,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 18:38:45,Updated. Now using `RegTestingSetup`. Thanks for the patch!,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530482,390530482,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:39:08,"why? Seems a bit verbose to have everything interleaved with the libfuzzer log.\n\nFor debugging a specific failure, this can always be enabled.",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530731,390530731,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:43:38,pls sort,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390533597,390533597,src/test/util/setup_common.cpp
MarcoFalke,2020-03-10 18:44:29,"Why?\n\nThis will erase the whole bt",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390534051,390534051,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:46:16,"Is this needed, given that we synced with the queue?",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535156,390535156,src/test/fuzz/process_message.cpp
MarcoFalke,2020-03-10 18:46:23,"Is this needed, given that we synced with the queue?",https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535217,390535217,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 19:22:16,Thanks. Purged unused includes.,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390555860,390555860,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 19:23:00,Done!,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390556242,390556242,src/test/util/setup_common.cpp
practicalswift,2020-03-10 19:54:17,This was intentional to truncate at first `\0` :),https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390572745,390572745,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 19:54:51,This was intentional to maximize fuzzer throughput :),https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390573020,390573020,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 20:08:17,Perhaps it was a premature optimization. Skipping!,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580279,390580279,src/test/fuzz/process_message.cpp
practicalswift,2020-03-10 20:08:48,Makes sense. Now skipping.,https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580531,390580531,src/test/fuzz/process_message.cpp
