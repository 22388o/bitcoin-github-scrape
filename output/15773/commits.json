[
  {
    "sha": "fa4680ed0996a7c621265a34392c3eca827b2e48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ2ODBlZDA5OTZhN2M2MjEyNjVhMzQzOTJjM2VjYTgyN2IyZTQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-08T18:16:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-08T23:40:00Z"
      },
      "message": "scripted-diff: Rename sync_blocks to send_blocks to avoid name collisions and confusion\n\n-BEGIN VERIFY SCRIPT-\nFILE_LIST=$(git grep -l 'def sync_blocks' ./test/functional/*.py)\nsed -i -e 's/def sync_blocks/def send_blocks/g'   $FILE_LIST\nsed -i -e 's/self.sync_blocks/self.send_blocks/g' $FILE_LIST\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "5b4d706d7f900a40fe99e7488c204ce633106718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b4d706d7f900a40fe99e7488c204ce633106718"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4680ed0996a7c621265a34392c3eca827b2e48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVI9qwL/3FuSXhttMteGSBeWgtebWDM\nHiQBrdLZPxwTTLiYZ1XpwlcpGqkPBYZDrSO2v57PVMulQDhu4CFMvR5Zen7cIz4t\nG7kx2pJSBxX6GbsLZbeCfhECp6GgPS1mDFa2wgt7QPfTJZbqRgzPOqA0JM1HJW4B\nZoJBcdUD5K5hyPqjYwSR0zVpA39SJMjV5NLhG3jHGEZudJkmkB2Sk5SwFijg0iZ9\nVfl/+bL5puULJhhzTpd1CFajFbSnijpU8vHEGNNyxh79nw/TTJjv3JPF4GP+ND9q\nuqCZF6MSyieBSG2IaSRwh9A5TM0AigZe9CpJlpLWksIOqc4JWoaWPyIaSybCOAzR\ncgMIEGZlenWRtq3eQPPyqv7OvE8S/h8Bwmp/uIL5GsrJAHYBorVKjSWl/GV8pE7C\nqxgJuB89rY3H4J7/OpA9dM1K9hIkRYt+54x4QVQwwMlVLOFLzxDUEC4X7bSpbq9Z\n1/SPyW9uwpjp7v5bg4my8piMDNK71DBD3psA9RSVAw==\n=lQCR\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b4d706d7f900a40fe99e7488c204ce633106718\nparent 297ea51caf2f013ee687f00467d87002e7097563\nauthor MarcoFalke <falke.marco@gmail.com> 1554747403 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554766800 -0400\n\nscripted-diff: Rename sync_blocks to send_blocks to avoid name collisions and confusion\n\n-BEGIN VERIFY SCRIPT-\nFILE_LIST=$(git grep -l 'def sync_blocks' ./test/functional/*.py)\nsed -i -e 's/def sync_blocks/def send_blocks/g'   $FILE_LIST\nsed -i -e 's/self.sync_blocks/self.send_blocks/g' $FILE_LIST\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4680ed0996a7c621265a34392c3eca827b2e48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4680ed0996a7c621265a34392c3eca827b2e48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4680ed0996a7c621265a34392c3eca827b2e48/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "297ea51caf2f013ee687f00467d87002e7097563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/297ea51caf2f013ee687f00467d87002e7097563",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/297ea51caf2f013ee687f00467d87002e7097563"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 130,
      "deletions": 130
    },
    "files": [
      {
        "sha": "e7a888c32900f64f4f29cea0a8193277a9550d77",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 99,
        "deletions": 99,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4680ed0996a7c621265a34392c3eca827b2e48/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4680ed0996a7c621265a34392c3eca827b2e48/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fa4680ed0996a7c621265a34392c3eca827b2e48",
        "patch": "@@ -98,7 +98,7 @@ def run_test(self):\n         # Create a new block\n         b0 = self.next_block(0)\n         self.save_spendable_output()\n-        self.sync_blocks([b0])\n+        self.send_blocks([b0])\n \n         # These constants chosen specifically to trigger an immature coinbase spend\n         # at a certain time below.\n@@ -110,7 +110,7 @@ def run_test(self):\n         for i in range(NUM_BUFFER_BLOCKS_TO_GENERATE):\n             blocks.append(self.next_block(\"maturitybuffer.{}\".format(i)))\n             self.save_spendable_output()\n-        self.sync_blocks(blocks)\n+        self.send_blocks(blocks)\n \n         # collect spendable outputs now to avoid cluttering the code later on\n         out = []\n@@ -126,7 +126,7 @@ def run_test(self):\n         b2 = self.next_block(2, spend=out[1])\n         self.save_spendable_output()\n \n-        self.sync_blocks([b1, b2], timeout=4)\n+        self.send_blocks([b1, b2], timeout=4)\n \n         # Select a txn with an output eligible for spending. This won't actually be spent,\n         # since we're testing submission of a series of blocks with invalid txns.\n@@ -162,7 +162,7 @@ def run_test(self):\n                 badtx.vout = []\n             badtx.rehash()\n             badblock = self.update_block(blockname, [badtx])\n-            self.sync_blocks(\n+            self.send_blocks(\n                 [badblock], success=False,\n                 reject_reason=(template.block_reject_reason or template.reject_reason),\n                 reconnect=True, timeout=2)\n@@ -179,27 +179,27 @@ def run_test(self):\n         self.move_tip(1)\n         b3 = self.next_block(3, spend=out[1])\n         txout_b3 = b3.vtx[1]\n-        self.sync_blocks([b3], False)\n+        self.send_blocks([b3], False)\n \n         # Now we add another block to make the alternative chain longer.\n         #\n         #     genesis -> b1 (0) -> b2 (1)\n         #                      \\-> b3 (1) -> b4 (2)\n         self.log.info(\"Reorg to a longer chain\")\n         b4 = self.next_block(4, spend=out[2])\n-        self.sync_blocks([b4])\n+        self.send_blocks([b4])\n \n         # ... and back to the first chain.\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n         #                      \\-> b3 (1) -> b4 (2)\n         self.move_tip(2)\n         b5 = self.next_block(5, spend=out[2])\n         self.save_spendable_output()\n-        self.sync_blocks([b5], False)\n+        self.send_blocks([b5], False)\n \n         self.log.info(\"Reorg back to the original chain\")\n         b6 = self.next_block(6, spend=out[3])\n-        self.sync_blocks([b6], True)\n+        self.send_blocks([b6], True)\n \n         # Try to create a fork that double-spends\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n@@ -208,10 +208,10 @@ def run_test(self):\n         self.log.info(\"Reject a chain with a double spend, even if it is longer\")\n         self.move_tip(5)\n         b7 = self.next_block(7, spend=out[2])\n-        self.sync_blocks([b7], False)\n+        self.send_blocks([b7], False)\n \n         b8 = self.next_block(8, spend=out[4])\n-        self.sync_blocks([b8], False, reconnect=True)\n+        self.send_blocks([b8], False, reconnect=True)\n \n         # Try to create a block that has too much fee\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n@@ -220,7 +220,7 @@ def run_test(self):\n         self.log.info(\"Reject a block where the miner creates too much coinbase reward\")\n         self.move_tip(6)\n         b9 = self.next_block(9, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b9], success=False, reject_reason='bad-cb-amount', reconnect=True)\n+        self.send_blocks([b9], success=False, reject_reason='bad-cb-amount', reconnect=True)\n \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -229,10 +229,10 @@ def run_test(self):\n         self.log.info(\"Reject a chain where the miner creates too much coinbase reward, even if the chain is longer\")\n         self.move_tip(5)\n         b10 = self.next_block(10, spend=out[3])\n-        self.sync_blocks([b10], False)\n+        self.send_blocks([b10], False)\n \n         b11 = self.next_block(11, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b11], success=False, reject_reason='bad-cb-amount', reconnect=True)\n+        self.send_blocks([b11], success=False, reject_reason='bad-cb-amount', reconnect=True)\n \n         # Try again, but with a valid fork first\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -245,7 +245,7 @@ def run_test(self):\n         b13 = self.next_block(13, spend=out[4])\n         self.save_spendable_output()\n         b14 = self.next_block(14, spend=out[5], additional_coinbase_value=1)\n-        self.sync_blocks([b12, b13, b14], success=False, reject_reason='bad-cb-amount', reconnect=True)\n+        self.send_blocks([b12, b13, b14], success=False, reject_reason='bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n         assert_equal(node.getbestblockhash(), b13.hash)\n@@ -259,12 +259,12 @@ def run_test(self):\n         self.move_tip(13)\n         b15 = self.next_block(15, spend=out[5], script=lots_of_checksigs)\n         self.save_spendable_output()\n-        self.sync_blocks([b15], True)\n+        self.send_blocks([b15], True)\n \n         self.log.info(\"Reject a block with too many checksigs\")\n         too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         b16 = self.next_block(16, spend=out[6], script=too_many_checksigs)\n-        self.sync_blocks([b16], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b16], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -273,7 +273,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx\")\n         self.move_tip(15)\n         b17 = self.next_block(17, spend=txout_b3)\n-        self.sync_blocks([b17], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b17], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -283,10 +283,10 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx (on a forked chain)\")\n         self.move_tip(13)\n         b18 = self.next_block(18, spend=txout_b3)\n-        self.sync_blocks([b18], False)\n+        self.send_blocks([b18], False)\n \n         b19 = self.next_block(19, spend=out[6])\n-        self.sync_blocks([b19], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b19], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -295,7 +295,7 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase.\")\n         self.move_tip(15)\n         b20 = self.next_block(20, spend=out[7])\n-        self.sync_blocks([b20], success=False, reject_reason='bad-txns-premature-spend-of-coinbase')\n+        self.send_blocks([b20], success=False, reject_reason='bad-txns-premature-spend-of-coinbase')\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -305,10 +305,10 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase (on a forked chain)\")\n         self.move_tip(13)\n         b21 = self.next_block(21, spend=out[6])\n-        self.sync_blocks([b21], False)\n+        self.send_blocks([b21], False)\n \n         b22 = self.next_block(22, spend=out[5])\n-        self.sync_blocks([b22], success=False, reject_reason='bad-txns-premature-spend-of-coinbase')\n+        self.send_blocks([b22], success=False, reject_reason='bad-txns-premature-spend-of-coinbase')\n \n         # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -326,7 +326,7 @@ def run_test(self):\n         b23 = self.update_block(23, [tx])\n         # Make sure the math above worked out to produce a max-sized block\n         assert_equal(len(b23.serialize()), MAX_BLOCK_BASE_SIZE)\n-        self.sync_blocks([b23], True)\n+        self.send_blocks([b23], True)\n         self.save_spendable_output()\n \n         self.log.info(\"Reject a block of size MAX_BLOCK_BASE_SIZE + 1\")\n@@ -337,10 +337,10 @@ def run_test(self):\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n-        self.sync_blocks([b24], success=False, reject_reason='bad-blk-length', reconnect=True)\n+        self.send_blocks([b24], success=False, reject_reason='bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n-        self.sync_blocks([b25], False)\n+        self.send_blocks([b25], False)\n \n         # Create blocks with a coinbase input script size out of range\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -355,31 +355,31 @@ def run_test(self):\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = self.update_block(26, [])\n-        self.sync_blocks([b26], success=False, reject_reason='bad-cb-length', reconnect=True)\n+        self.send_blocks([b26], success=False, reject_reason='bad-cb-length', reconnect=True)\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = self.next_block(27, spend=out[7])\n-        self.sync_blocks([b27], False)\n+        self.send_blocks([b27], False)\n \n         # Now try a too-large-coinbase script\n         self.move_tip(15)\n         b28 = self.next_block(28, spend=out[6])\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = self.update_block(28, [])\n-        self.sync_blocks([b28], success=False, reject_reason='bad-cb-length', reconnect=True)\n+        self.send_blocks([b28], success=False, reject_reason='bad-cb-length', reconnect=True)\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = self.next_block(29, spend=out[7])\n-        self.sync_blocks([b29], False)\n+        self.send_blocks([b29], False)\n \n         # b30 has a max-sized coinbase scriptSig.\n         self.move_tip(23)\n         b30 = self.next_block(30)\n         b30.vtx[0].vin[0].scriptSig = b'\\x00' * 100\n         b30.vtx[0].rehash()\n         b30 = self.update_block(30, [])\n-        self.sync_blocks([b30], True)\n+        self.send_blocks([b30], True)\n         self.save_spendable_output()\n \n         # b31 - b35 - check sigops of OP_CHECKMULTISIG / OP_CHECKMULTISIGVERIFY / OP_CHECKSIGVERIFY\n@@ -395,41 +395,41 @@ def run_test(self):\n         lots_of_multisigs = CScript([OP_CHECKMULTISIG] * ((MAX_BLOCK_SIGOPS - 1) // 20) + [OP_CHECKSIG] * 19)\n         b31 = self.next_block(31, spend=out[8], script=lots_of_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b31), MAX_BLOCK_SIGOPS)\n-        self.sync_blocks([b31], True)\n+        self.send_blocks([b31], True)\n         self.save_spendable_output()\n \n         # this goes over the limit because the coinbase has one sigop\n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIG sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n         b32 = self.next_block(32, spend=out[9], script=too_many_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b32], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b32], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         # CHECKMULTISIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKMULTISIGVERIFY sigops\")\n         self.move_tip(31)\n         lots_of_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * ((MAX_BLOCK_SIGOPS - 1) // 20) + [OP_CHECKSIG] * 19)\n         b33 = self.next_block(33, spend=out[9], script=lots_of_multisigs)\n-        self.sync_blocks([b33], True)\n+        self.send_blocks([b33], True)\n         self.save_spendable_output()\n \n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIGVERIFY sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n         b34 = self.next_block(34, spend=out[10], script=too_many_multisigs)\n-        self.sync_blocks([b34], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b34], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         # CHECKSIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKSIGVERIFY sigops\")\n         self.move_tip(33)\n         lots_of_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS - 1))\n         b35 = self.next_block(35, spend=out[10], script=lots_of_checksigs)\n-        self.sync_blocks([b35], True)\n+        self.send_blocks([b35], True)\n         self.save_spendable_output()\n \n         self.log.info(\"Reject a block with too many OP_CHECKSIGVERIFY sigops\")\n         too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n         b36 = self.next_block(36, spend=out[11], script=too_many_checksigs)\n-        self.sync_blocks([b36], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b36], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         # Check spending of a transaction in a block which failed to connect\n         #\n@@ -446,12 +446,12 @@ def run_test(self):\n         txout_b37 = b37.vtx[1]\n         tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n-        self.sync_blocks([b37], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b37], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n         self.move_tip(35)\n         b38 = self.next_block(38, spend=txout_b37)\n-        self.sync_blocks([b38], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b38], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Check P2SH SigOp counting\n         #\n@@ -501,7 +501,7 @@ def run_test(self):\n             b39_outputs += 1\n \n         b39 = self.update_block(39, [])\n-        self.sync_blocks([b39], True)\n+        self.send_blocks([b39], True)\n         self.save_spendable_output()\n \n         # Test sigops in P2SH redeem scripts\n@@ -543,7 +543,7 @@ def run_test(self):\n         tx.rehash()\n         new_txs.append(tx)\n         self.update_block(40, new_txs)\n-        self.sync_blocks([b40], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b40], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         # same as b40, but one less sigop\n         self.log.info(\"Accept a block with the max number of P2SH sigops\")\n@@ -556,7 +556,7 @@ def run_test(self):\n         tx.vout.append(CTxOut(1, CScript([OP_CHECKSIG] * b41_sigops_to_fill)))\n         tx.rehash()\n         self.update_block(41, [tx])\n-        self.sync_blocks([b41], True)\n+        self.send_blocks([b41], True)\n \n         # Fork off of b39 to create a constant base again\n         #\n@@ -569,7 +569,7 @@ def run_test(self):\n \n         b43 = self.next_block(43, spend=out[13])\n         self.save_spendable_output()\n-        self.sync_blocks([b42, b43], True)\n+        self.send_blocks([b42, b43], True)\n \n         # Test a number of really invalid scenarios\n         #\n@@ -591,7 +591,7 @@ def run_test(self):\n         self.tip = b44\n         self.block_heights[b44.sha256] = height\n         self.blocks[44] = b44\n-        self.sync_blocks([b44], True)\n+        self.send_blocks([b44], True)\n \n         self.log.info(\"Reject a block with a non-coinbase as the first tx\")\n         non_coinbase = self.create_tx(out[15], 0, 1)\n@@ -606,7 +606,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], success=False, reject_reason='bad-cb-missing', reconnect=True)\n+        self.send_blocks([b45], success=False, reject_reason='bad-cb-missing', reconnect=True)\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -621,7 +621,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], success=False, reject_reason='bad-blk-length', reconnect=True)\n+        self.send_blocks([b46], success=False, reject_reason='bad-blk-length', reconnect=True)\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -630,65 +630,65 @@ def run_test(self):\n         while b47.sha256 < target:\n             b47.nNonce += 1\n             b47.rehash()\n-        self.sync_blocks([b47], False, force_send=True, reject_reason='high-hash')\n+        self.send_blocks([b47], False, force_send=True, reject_reason='high-hash')\n \n         self.log.info(\"Reject a block with a timestamp >2 hours in the future\")\n         self.move_tip(44)\n         b48 = self.next_block(48, solve=False)\n         b48.nTime = int(time.time()) + 60 * 60 * 3\n         b48.solve()\n-        self.sync_blocks([b48], False, force_send=True, reject_reason='time-too-new')\n+        self.send_blocks([b48], False, force_send=True, reject_reason='time-too-new')\n \n         self.log.info(\"Reject a block with invalid merkle hash\")\n         self.move_tip(44)\n         b49 = self.next_block(49)\n         b49.hashMerkleRoot += 1\n         b49.solve()\n-        self.sync_blocks([b49], success=False, reject_reason='bad-txnmrklroot', reconnect=True)\n+        self.send_blocks([b49], success=False, reject_reason='bad-txnmrklroot', reconnect=True)\n \n         self.log.info(\"Reject a block with incorrect POW limit\")\n         self.move_tip(44)\n         b50 = self.next_block(50)\n         b50.nBits = b50.nBits - 1\n         b50.solve()\n-        self.sync_blocks([b50], False, force_send=True, reject_reason='bad-diffbits', reconnect=True)\n+        self.send_blocks([b50], False, force_send=True, reject_reason='bad-diffbits', reconnect=True)\n \n         self.log.info(\"Reject a block with two coinbase transactions\")\n         self.move_tip(44)\n         b51 = self.next_block(51)\n         cb2 = create_coinbase(51, self.coinbase_pubkey)\n         b51 = self.update_block(51, [cb2])\n-        self.sync_blocks([b51], success=False, reject_reason='bad-cb-multiple', reconnect=True)\n+        self.send_blocks([b51], success=False, reject_reason='bad-cb-multiple', reconnect=True)\n \n         self.log.info(\"Reject a block with duplicate transactions\")\n         # Note: txns have to be in the right position in the merkle tree to trigger this error\n         self.move_tip(44)\n         b52 = self.next_block(52, spend=out[15])\n         tx = self.create_tx(b52.vtx[1], 0, 1)\n         b52 = self.update_block(52, [tx, tx])\n-        self.sync_blocks([b52], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n+        self.send_blocks([b52], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n \n         # Test block timestamps\n         #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n         #                                                                                   \\-> b54 (15)\n         #\n         self.move_tip(43)\n         b53 = self.next_block(53, spend=out[14])\n-        self.sync_blocks([b53], False)\n+        self.send_blocks([b53], False)\n         self.save_spendable_output()\n \n         self.log.info(\"Reject a block with timestamp before MedianTimePast\")\n         b54 = self.next_block(54, spend=out[15])\n         b54.nTime = b35.nTime - 1\n         b54.solve()\n-        self.sync_blocks([b54], False, force_send=True, reject_reason='time-too-old')\n+        self.send_blocks([b54], False, force_send=True, reject_reason='time-too-old')\n \n         # valid timestamp\n         self.move_tip(53)\n         b55 = self.next_block(55, spend=out[15])\n         b55.nTime = b35.nTime\n         self.update_block(55, [])\n-        self.sync_blocks([b55], True)\n+        self.send_blocks([b55], True)\n         self.save_spendable_output()\n \n         # Test Merkle tree malleability\n@@ -733,7 +733,7 @@ def run_test(self):\n         assert_equal(len(b56.vtx), 3)\n         b56 = self.update_block(56, [tx1])\n         assert_equal(b56.hash, b57.hash)\n-        self.sync_blocks([b56], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n+        self.send_blocks([b56], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n \n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n@@ -753,13 +753,13 @@ def run_test(self):\n         assert_equal(b56p2.hash, b57p2.hash)\n         assert_equal(len(b56p2.vtx), 6)\n         b56p2 = self.update_block(\"b56p2\", [tx3, tx4])\n-        self.sync_blocks([b56p2], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n+        self.send_blocks([b56p2], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n-        self.sync_blocks([b57p2], True)\n+        self.send_blocks([b57p2], True)\n \n         self.move_tip(57)\n-        self.sync_blocks([b57], False)  # The tip is not updated because 57p2 seen first\n+        self.send_blocks([b57], False)  # The tip is not updated because 57p2 seen first\n         self.save_spendable_output()\n \n         # Test a few invalid tx types\n@@ -778,20 +778,20 @@ def run_test(self):\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n-        self.sync_blocks([b58], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b58], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # tx with output value > input value\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n         tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n-        self.sync_blocks([b59], success=False, reject_reason='bad-txns-in-belowout', reconnect=True)\n+        self.send_blocks([b59], success=False, reject_reason='bad-txns-in-belowout', reconnect=True)\n \n         # reset to good chain\n         self.move_tip(57)\n         b60 = self.next_block(60, spend=out[17])\n-        self.sync_blocks([b60], True)\n+        self.send_blocks([b60], True)\n         self.save_spendable_output()\n \n         # Test BIP30\n@@ -810,7 +810,7 @@ def run_test(self):\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n         assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n-        self.sync_blocks([b61], success=False, reject_reason='bad-txns-BIP30', reconnect=True)\n+        self.send_blocks([b61], success=False, reject_reason='bad-txns-BIP30', reconnect=True)\n \n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n@@ -827,7 +827,7 @@ def run_test(self):\n         assert tx.vin[0].nSequence < 0xffffffff\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], success=False, reject_reason='bad-txns-nonfinal')\n+        self.send_blocks([b62], success=False, reject_reason='bad-txns-nonfinal')\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -841,7 +841,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], success=False, reject_reason='bad-txns-nonfinal')\n+        self.send_blocks([b63], success=False, reject_reason='bad-txns-nonfinal')\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -875,7 +875,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize()')\n+        self.send_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize()')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n@@ -891,7 +891,7 @@ def run_test(self):\n         assert_equal(len(b64.serialize()), MAX_BLOCK_BASE_SIZE)\n         self.blocks[64] = b64\n         b64 = self.update_block(64, [])\n-        self.sync_blocks([b64], True)\n+        self.send_blocks([b64], True)\n         self.save_spendable_output()\n \n         # Spend an output created in the block itself\n@@ -904,7 +904,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[19], out[19].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 0)\n         b65 = self.update_block(65, [tx1, tx2])\n-        self.sync_blocks([b65], True)\n+        self.send_blocks([b65], True)\n         self.save_spendable_output()\n \n         # Attempt to spend an output created later in the same block\n@@ -917,7 +917,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n-        self.sync_blocks([b66], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b66], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to double-spend a transaction created in a block\n         #\n@@ -932,7 +932,7 @@ def run_test(self):\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n-        self.sync_blocks([b67], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b67], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # More tests of block subsidy\n         #\n@@ -951,14 +951,14 @@ def run_test(self):\n         b68 = self.next_block(68, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n-        self.sync_blocks([b68], success=False, reject_reason='bad-cb-amount', reconnect=True)\n+        self.send_blocks([b68], success=False, reject_reason='bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n         b69 = self.next_block(69, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 10)\n         self.update_block(69, [tx])\n-        self.sync_blocks([b69], True)\n+        self.send_blocks([b69], True)\n         self.save_spendable_output()\n \n         # Test spending the outpoint of a non-existent transaction\n@@ -975,7 +975,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n         tx.vout.append(CTxOut(1, b\"\"))\n         b70 = self.update_block(70, [tx])\n-        self.sync_blocks([b70], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b70], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n@@ -1000,10 +1000,10 @@ def run_test(self):\n         assert_equal(b72.sha256, b71.sha256)\n \n         self.move_tip(71)\n-        self.sync_blocks([b71], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n+        self.send_blocks([b71], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(72)\n-        self.sync_blocks([b72], True)\n+        self.send_blocks([b72], True)\n         self.save_spendable_output()\n \n         # Test some invalid scripts and MAX_BLOCK_SIGOPS\n@@ -1038,7 +1038,7 @@ def run_test(self):\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b73], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b73], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         # b74/75 - if we push an invalid script element, all previous sigops are counted,\n         #          but sigops after the element are not counted.\n@@ -1062,7 +1062,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n-        self.sync_blocks([b74], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n+        self.send_blocks([b74], success=False, reject_reason='bad-blk-sigops', reconnect=True)\n \n         self.move_tip(72)\n         b75 = self.next_block(75)\n@@ -1075,7 +1075,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 3] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b75 = self.update_block(75, [tx])\n-        self.sync_blocks([b75], True)\n+        self.send_blocks([b75], True)\n         self.save_spendable_output()\n \n         # Check that if we push an element filled with CHECKSIGs, they are not counted\n@@ -1086,7 +1086,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS - 1] = 0x4e  # PUSHDATA4, but leave the following bytes as just checksigs\n         tx = self.create_and_sign_transaction(out[23], 1, CScript(a))\n         b76 = self.update_block(76, [tx])\n-        self.sync_blocks([b76], True)\n+        self.send_blocks([b76], True)\n         self.save_spendable_output()\n \n         # Test transaction resurrection\n@@ -1111,33 +1111,33 @@ def run_test(self):\n         b77 = self.next_block(77)\n         tx77 = self.create_and_sign_transaction(out[24], 10 * COIN)\n         b77 = self.update_block(77, [tx77])\n-        self.sync_blocks([b77], True)\n+        self.send_blocks([b77], True)\n         self.save_spendable_output()\n \n         b78 = self.next_block(78)\n         tx78 = self.create_tx(tx77, 0, 9 * COIN)\n         b78 = self.update_block(78, [tx78])\n-        self.sync_blocks([b78], True)\n+        self.send_blocks([b78], True)\n \n         b79 = self.next_block(79)\n         tx79 = self.create_tx(tx78, 0, 8 * COIN)\n         b79 = self.update_block(79, [tx79])\n-        self.sync_blocks([b79], True)\n+        self.send_blocks([b79], True)\n \n         # mempool should be empty\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.move_tip(77)\n         b80 = self.next_block(80, spend=out[25])\n-        self.sync_blocks([b80], False, force_send=True)\n+        self.send_blocks([b80], False, force_send=True)\n         self.save_spendable_output()\n \n         b81 = self.next_block(81, spend=out[26])\n-        self.sync_blocks([b81], False, force_send=True)  # other chain is same length\n+        self.send_blocks([b81], False, force_send=True)  # other chain is same length\n         self.save_spendable_output()\n \n         b82 = self.next_block(82, spend=out[27])\n-        self.sync_blocks([b82], True)  # now this chain is longer, triggers re-org\n+        self.send_blocks([b82], True)  # now this chain is longer, triggers re-org\n         self.save_spendable_output()\n \n         # now check that tx78 and tx79 have been put back into the peer's mempool\n@@ -1161,7 +1161,7 @@ def run_test(self):\n         tx2.rehash()\n \n         b83 = self.update_block(83, [tx1, tx2])\n-        self.sync_blocks([b83], True)\n+        self.send_blocks([b83], True)\n         self.save_spendable_output()\n \n         # Reorg on/off blocks that have OP_RETURN in them (and try to spend them)\n@@ -1188,30 +1188,30 @@ def run_test(self):\n         tx5 = self.create_tx(tx1, 4, 0, CScript([OP_RETURN]))\n \n         b84 = self.update_block(84, [tx1, tx2, tx3, tx4, tx5])\n-        self.sync_blocks([b84], True)\n+        self.send_blocks([b84], True)\n         self.save_spendable_output()\n \n         self.move_tip(83)\n         b85 = self.next_block(85, spend=out[29])\n-        self.sync_blocks([b85], False)  # other chain is same length\n+        self.send_blocks([b85], False)  # other chain is same length\n \n         b86 = self.next_block(86, spend=out[30])\n-        self.sync_blocks([b86], True)\n+        self.send_blocks([b86], True)\n \n         self.move_tip(84)\n         b87 = self.next_block(87, spend=out[30])\n-        self.sync_blocks([b87], False)  # other chain is same length\n+        self.send_blocks([b87], False)  # other chain is same length\n         self.save_spendable_output()\n \n         b88 = self.next_block(88, spend=out[31])\n-        self.sync_blocks([b88], True)\n+        self.send_blocks([b88], True)\n         self.save_spendable_output()\n \n         # trying to spend the OP_RETURN output is rejected\n         b89a = self.next_block(\"89a\", spend=out[32])\n         tx = self.create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n         b89a = self.update_block(\"89a\", [tx])\n-        self.sync_blocks([b89a], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n+        self.send_blocks([b89a], success=False, reject_reason='bad-txns-inputs-missingorspent', reconnect=True)\n \n         self.log.info(\"Test a re-org of one week's worth of blocks (1088 blocks)\")\n \n@@ -1232,38 +1232,38 @@ def run_test(self):\n             self.save_spendable_output()\n             spend = self.get_spendable_output()\n \n-        self.sync_blocks(blocks, True, timeout=480)\n+        self.send_blocks(blocks, True, timeout=480)\n         chain1_tip = i\n \n         # now create alt chain of same length\n         self.move_tip(88)\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             blocks2.append(self.next_block(\"alt\" + str(i), version=4))\n-        self.sync_blocks(blocks2, False, force_send=True)\n+        self.send_blocks(blocks2, False, force_send=True)\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1), version=4)\n-        self.sync_blocks([block], True, timeout=480)\n+        self.send_blocks([block], True, timeout=480)\n \n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1, version=4)\n-        self.sync_blocks([block], False, force_send=True)\n+        self.send_blocks([block], False, force_send=True)\n         block = self.next_block(chain1_tip + 2, version=4)\n-        self.sync_blocks([block], True, timeout=480)\n+        self.send_blocks([block], True, timeout=480)\n \n         self.log.info(\"Reject a block with an invalid block header version\")\n         b_v1 = self.next_block('b_v1', version=1)\n-        self.sync_blocks([b_v1], success=False, force_send=True, reject_reason='bad-version(0x00000001)')\n+        self.send_blocks([b_v1], success=False, force_send=True, reject_reason='bad-version(0x00000001)')\n \n         self.move_tip(chain1_tip + 2)\n         b_cb34 = self.next_block('b_cb34', version=4)\n         b_cb34.vtx[0].vin[0].scriptSig = b_cb34.vtx[0].vin[0].scriptSig[:-1]\n         b_cb34.vtx[0].rehash()\n         b_cb34.hashMerkleRoot = b_cb34.calc_merkle_root()\n         b_cb34.solve()\n-        self.sync_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n+        self.send_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n \n     # Helper methods\n     ################\n@@ -1372,7 +1372,7 @@ def reconnect_p2p(self, timeout=60):\n         self.nodes[0].disconnect_p2ps()\n         self.bootstrap_p2p(timeout=timeout)\n \n-    def sync_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, timeout=60):\n+    def send_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, timeout=60):\n         \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n \n         Call with success = False if the tip shouldn't advance to the most recent block.\"\"\""
      },
      {
        "sha": "887e9dafa395b2ad3f9eca20f85da35f20c01e3e",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4680ed0996a7c621265a34392c3eca827b2e48/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4680ed0996a7c621265a34392c3eca827b2e48/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=fa4680ed0996a7c621265a34392c3eca827b2e48",
        "patch": "@@ -168,7 +168,7 @@ def create_test_block(self, txs, version=536870912):\n         block.solve()\n         return block\n \n-    def sync_blocks(self, blocks, success=True):\n+    def send_blocks(self, blocks, success=True):\n         \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n \n         Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n@@ -190,7 +190,7 @@ def run_test(self):\n         self.log.info(\"Test that the csv softfork is DEFINED\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n         test_blocks = self.generate_blocks(61, 4)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         self.log.info(\"Advance from DEFINED to STARTED, height = 143\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n@@ -202,7 +202,7 @@ def run_test(self):\n         test_blocks = self.generate_blocks(20, 4, test_blocks)  # 0x00000004 (signalling not)\n         test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n         test_blocks = self.generate_blocks(24, 536936448, test_blocks)  # 0x20010000 (signalling not)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         self.log.info(\"Failed to advance past STARTED, height = 287\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n@@ -214,14 +214,14 @@ def run_test(self):\n         test_blocks = self.generate_blocks(26, 4, test_blocks)  # 0x00000004 (signalling not)\n         test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n         test_blocks = self.generate_blocks(10, 536936448, test_blocks)  # 0x20010000 (signalling not)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         self.log.info(\"Advanced from STARTED to LOCKED_IN, height = 431\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n         # Generate 140 more version 4 blocks\n         test_blocks = self.generate_blocks(140, 4)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         # Inputs at height = 572\n         #\n@@ -264,7 +264,7 @@ def run_test(self):\n \n         # 2 more version 4 blocks\n         test_blocks = self.generate_blocks(2, 4)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         self.log.info(\"Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n@@ -318,7 +318,7 @@ def run_test(self):\n         # try BIP 112 with seq=9 txs\n         success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n         success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n-        self.sync_blocks([self.create_test_block(success_txs)])\n+        self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         self.log.info(\"Test version 2 txs\")\n@@ -337,12 +337,12 @@ def run_test(self):\n         # try BIP 112 with seq=9 txs\n         success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n         success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n-        self.sync_blocks([self.create_test_block(success_txs)])\n+        self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n         test_blocks = self.generate_blocks(1, 4)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n \n         self.log.info(\"Post-Soft Fork Tests.\")\n@@ -354,74 +354,74 @@ def run_test(self):\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n         bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            self.sync_blocks([self.create_test_block([bip113tx])], success=False)\n+            self.send_blocks([self.create_test_block([bip113tx])], success=False)\n         # BIP 113 tests should now pass if the locktime is < MTP\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n         bip113signed1 = sign_transaction(self.nodes[0], bip113tx_v1)\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n         bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            self.sync_blocks([self.create_test_block([bip113tx])])\n+            self.send_blocks([self.create_test_block([bip113tx])])\n             self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Next block height = 580 after 4 blocks of random version\n         test_blocks = self.generate_blocks(4, 1234)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         self.log.info(\"BIP 68 tests\")\n         self.log.info(\"Test version 1 txs - all should still pass\")\n \n         success_txs = []\n         success_txs.extend(all_rlt_txs(bip68txs_v1))\n-        self.sync_blocks([self.create_test_block(success_txs)])\n+        self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         self.log.info(\"Test version 2 txs\")\n \n         # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n         bip68success_txs = [tx['tx'] for tx in bip68txs_v2 if tx['sdf']]\n-        self.sync_blocks([self.create_test_block(bip68success_txs)])\n+        self.send_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n         bip68timetxs = [tx['tx'] for tx in bip68txs_v2 if not tx['sdf'] and tx['stf']]\n         for tx in bip68timetxs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         bip68heighttxs = [tx['tx'] for tx in bip68txs_v2 if not tx['sdf'] and not tx['stf']]\n         for tx in bip68heighttxs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         # Advance one block to 581\n         test_blocks = self.generate_blocks(1, 1234)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n         bip68success_txs.extend(bip68timetxs)\n-        self.sync_blocks([self.create_test_block(bip68success_txs)])\n+        self.send_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         for tx in bip68heighttxs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         # Advance one block to 582\n         test_blocks = self.generate_blocks(1, 1234)\n-        self.sync_blocks(test_blocks)\n+        self.send_blocks(test_blocks)\n \n         # All BIP 68 txs should pass\n         bip68success_txs.extend(bip68heighttxs)\n-        self.sync_blocks([self.create_test_block(bip68success_txs)])\n+        self.send_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         self.log.info(\"BIP 112 tests\")\n         self.log.info(\"Test version 1 txs\")\n \n         # -1 OP_CSV tx should fail\n-        self.sync_blocks([self.create_test_block([bip112tx_special_v1])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_special_v1])], success=False)\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n \n         success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v1 if tx['sdf']]\n         success_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if tx['sdf']]\n-        self.sync_blocks([self.create_test_block(success_txs)])\n+        self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n@@ -430,18 +430,18 @@ def run_test(self):\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if not tx['sdf']]\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if not tx['sdf']]\n         for tx in fail_txs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         self.log.info(\"Test version 2 txs\")\n \n         # -1 OP_CSV tx should fail\n-        self.sync_blocks([self.create_test_block([bip112tx_special_v2])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_special_v2])], success=False)\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n         success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if tx['sdf']]\n         success_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v2 if tx['sdf']]\n \n-        self.sync_blocks([self.create_test_block(success_txs)])\n+        self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n@@ -450,23 +450,23 @@ def run_test(self):\n         fail_txs = all_rlt_txs(bip112txs_vary_nSequence_9_v2)\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v2 if not tx['sdf']]\n         for tx in fail_txs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n         fail_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if tx['sdf']]\n         for tx in fail_txs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         # If sequencelock types mismatch, tx should fail\n         fail_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if not tx['sdf'] and tx['stf']]\n         fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and tx['stf']]\n         for tx in fail_txs:\n-            self.sync_blocks([self.create_test_block([tx])], success=False)\n+            self.send_blocks([self.create_test_block([tx])], success=False)\n \n         # Remaining txs should pass, just test masking works properly\n         success_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if not tx['sdf'] and not tx['stf']]\n         success_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and not tx['stf']]\n-        self.sync_blocks([self.create_test_block(success_txs)])\n+        self.send_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Additional test, of checking that comparison of two time types works properly\n@@ -476,7 +476,7 @@ def run_test(self):\n             signtx = sign_transaction(self.nodes[0], tx)\n             time_txs.append(signtx)\n \n-        self.sync_blocks([self.create_test_block(time_txs)])\n+        self.send_blocks([self.create_test_block(time_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # TODO: Test empty stack fails"
      }
    ]
  },
  {
    "sha": "fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZlMDA4Y2I0MDdjZDM4MzBiMGFlMjVhNGU5ZjQ0MDBmZjY2YjZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T15:46:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T16:08:26Z"
      },
      "message": "test: Pass at most one node group to sync_all",
      "tree": {
        "sha": "e93eb5f9cc123b6aab096458fa2498cf9d4dc2f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e93eb5f9cc123b6aab096458fa2498cf9d4dc2f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVItpoL/isH37s37NmmQnAOFajgCIjW\nQqABDMkrTMdLk8ybeKczxraQk4dN1cQZrlM3GnGSuV/M2X4aXoalCOfzZsJswKFM\nJ8TMX5QJAMgDv7xCOXCJ5FuA2oJFqfZtX0pF5kiaWB2QV0/crsACxVi5i39Oju8s\nqOWYHSepxIfWhV60xyimIufqKWtKPXLjckV2i0Jl+q7LlCz4I6eJ+foYIcOoG+/h\nUx2xx/1dxXDd27YOmsqq7PKfS3fEHUN1gy4joVBF4grs/5Hasvgtx5M+b58gkYqf\ntwO0M7Yn8cDBiKHO/0hx8EztxeXv+QvYQGKwMCgb2buOysNqapGkbwvuZvOzabad\nbMms4hAD+0X3VZ5DFHxLZQGsM5PZzO02LVCnSp4o1DpRBrqx5gGapbi58CeNlBvh\n5LWyRAHOqI4b88S3BvGh5Y1soxQZPpWXHd0f0mqZibwceCFYgm4G78i+MaorzwzW\np4cqF21DqwnwWwUsCrQdAJLulBRlGtkjUUBwUoc2pQ==\n=c2Kq\n-----END PGP SIGNATURE-----",
        "payload": "tree e93eb5f9cc123b6aab096458fa2498cf9d4dc2f4\nparent fa4680ed0996a7c621265a34392c3eca827b2e48\nauthor MarcoFalke <falke.marco@gmail.com> 1554824765 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554826106 -0400\n\ntest: Pass at most one node group to sync_all\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4680ed0996a7c621265a34392c3eca827b2e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4680ed0996a7c621265a34392c3eca827b2e48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4680ed0996a7c621265a34392c3eca827b2e48"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 28,
      "deletions": 29
    },
    "files": [
      {
        "sha": "a2726763d0724f8048e2be3ac6756f2ab436641a",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "patch": "@@ -117,7 +117,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:2]])\n+        self.sync_all(self.nodes[0:2])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -141,7 +141,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:2]])\n+        self.sync_all(self.nodes[0:2])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      },
      {
        "sha": "44466085f035f8f972b313d657f761000e3aa996",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "patch": "@@ -28,7 +28,8 @@ def run_test(self):\n         self.split_network()\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n         self.nodes[2].generatetoaddress(20, self.nodes[2].get_deterministic_priv_key().address)\n-        self.sync_all([self.nodes[:2], self.nodes[2:]])\n+        self.sync_all(self.nodes[:2])\n+        self.sync_all(self.nodes[2:])\n \n         tips = self.nodes[1].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "81ab571a40776388340bc6d75d4edfcbc0d3f2f2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "patch": "@@ -396,7 +396,8 @@ def split_network(self):\n         \"\"\"\n         disconnect_nodes(self.nodes[1], 2)\n         disconnect_nodes(self.nodes[2], 1)\n-        self.sync_all([self.nodes[:2], self.nodes[2:]])\n+        self.sync_all(self.nodes[:2])\n+        self.sync_all(self.nodes[2:])\n \n     def join_network(self):\n         \"\"\"\n@@ -405,13 +406,9 @@ def join_network(self):\n         connect_nodes_bi(self.nodes, 1, 2)\n         self.sync_all()\n \n-    def sync_all(self, node_groups=None):\n-        if not node_groups:\n-            node_groups = [self.nodes]\n-\n-        for group in node_groups:\n-            sync_blocks(group)\n-            sync_mempools(group)\n+    def sync_all(self, nodes=None, **kwargs):\n+            sync_blocks(nodes or self.nodes, **kwargs)\n+            sync_mempools(nodes or self.nodes, **kwargs)\n \n     # Private helper methods. These should not be accessed by the subclass test scripts.\n "
      },
      {
        "sha": "0726eb0cde743fa2a2254c004bb41f00c7e2cfd8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "patch": "@@ -33,7 +33,7 @@ def setup_network(self):\n         connect_nodes_bi(self.nodes, 0, 1)\n         connect_nodes_bi(self.nodes, 1, 2)\n         connect_nodes_bi(self.nodes, 0, 2)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n         \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n@@ -58,9 +58,9 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         self.nodes[1].generate(101)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -107,7 +107,7 @@ def run_test(self):\n \n         # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -143,7 +143,7 @@ def run_test(self):\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -172,7 +172,7 @@ def run_test(self):\n \n         # Have node1 mine a block to confirm transactions:\n         self.nodes[1].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -187,30 +187,30 @@ def run_test(self):\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n@@ -254,18 +254,18 @@ def run_test(self):\n         connect_nodes_bi(self.nodes, 0, 1)\n         connect_nodes_bi(self.nodes, 1, 2)\n         connect_nodes_bi(self.nodes, 0, 2)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         tx_obj_not_broadcast = self.nodes[0].gettransaction(txid_not_broadcast)\n         self.nodes[1].generate(1)  # mine a block, tx should not be in there\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)  # should not be changed because tx was not broadcasted\n \n         # now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(tx_obj_not_broadcast['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         node_2_bal += 2\n         tx_obj_not_broadcast = self.nodes[0].gettransaction(txid_not_broadcast)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -341,7 +341,7 @@ def run_test(self):\n         address_to_import = self.nodes[2].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n         self.nodes[0].generate(1)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         # 2. Import address from node2 to node1\n         self.nodes[1].importaddress(address_to_import)\n@@ -367,15 +367,15 @@ def run_test(self):\n         coinbase_addr = self.nodes[1].getnewaddress()\n         block_hash = self.nodes[0].generatetoaddress(1, coinbase_addr)[0]\n         coinbase_txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(coinbase_txid)\n \n         # check if wallet or blockchain maintenance changes the balance\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         blocks = self.nodes[0].generate(2)\n-        self.sync_all([self.nodes[0:3]])\n+        self.sync_all(self.nodes[0:3])\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n "
      },
      {
        "sha": "b807c6ce2105ab669288cbeff1ebd0b18db0674d",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "patch": "@@ -98,7 +98,8 @@ def test_reorg(self):\n         self.nodes[2].generate(7)\n         self.log.info('lastblockhash=%s' % (lastblockhash))\n \n-        self.sync_all([self.nodes[:2], self.nodes[2:]])\n+        self.sync_all(self.nodes[:2])\n+        self.sync_all(self.nodes[2:])\n \n         self.join_network()\n "
      }
    ]
  },
  {
    "sha": "fa6dc7c5c3477bda04481f080d430f63539974e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZkYzdjNWMzNDc3YmRhMDQ0ODFmMDgwZDQzMGY2MzUzOTk3NGUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T15:57:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T16:08:27Z"
      },
      "message": "test: Add BitcoinTestFramework::sync_* methods",
      "tree": {
        "sha": "20e373b0fea6732230bff686790d70759360a2d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e373b0fea6732230bff686790d70759360a2d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6dc7c5c3477bda04481f080d430f63539974e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVIqZML/3ITElwXFLishCwYjvb7iCI/\nTRB5ma6xaVOXH7aEdL3EKi2ffWTW23vovOEQYQzYVMiqNyrbcmrIQmo1i08VJzM3\nbCjdTxmxhWu+JYJZyd9OJdSRKZPyniJk+/3ON5/KtwprSdFZOtNzb3+jsnHdvgBL\nmaB2cToClVl0mPCJDwvS7ZMuHEBCK3Po14sxgObMS2LvdF9xqD5ONR6dSeW0TZVq\nuOlV7l0yLiooA2fBWUyD+qrf8Qowh1AR5UBWcoSg8lvEgsZxlV1SS+2eeeysZLH6\nldWNInrVbsFAdcAyujVlCQ6m/JmkPsxGLxbwMEnNZRqC6+Hc9fROu7qMlW8csAVM\n1drjsd8dAWePLSPDdWhcT8Bc7/m2mRSKNDtedwW76anbr+x/A69IeqBwG2PXk0cW\nP/+b6tBRQxIlWcer5VMz2ZhH5xpLDXRSj4P1JVip5XZb8CZ9CuC7uMdobJdIFqQC\nH2ZOxY/67RM2QNly3AFbs8r7cV7CJ2iK2cNs48FcOQ==\n=mZXo\n-----END PGP SIGNATURE-----",
        "payload": "tree 20e373b0fea6732230bff686790d70759360a2d8\nparent fafe008cb407cd3830b0ae25a4e9f4400ff66b6e\nauthor MarcoFalke <falke.marco@gmail.com> 1554825430 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554826107 -0400\n\ntest: Add BitcoinTestFramework::sync_* methods\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6dc7c5c3477bda04481f080d430f63539974e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6dc7c5c3477bda04481f080d430f63539974e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6dc7c5c3477bda04481f080d430f63539974e2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafe008cb407cd3830b0ae25a4e9f4400ff66b6e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4aeff24d127b1b9e6bfca9a203ac44b4f717881f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6dc7c5c3477bda04481f080d430f63539974e2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6dc7c5c3477bda04481f080d430f63539974e2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa6dc7c5c3477bda04481f080d430f63539974e2",
        "patch": "@@ -406,9 +406,15 @@ def join_network(self):\n         connect_nodes_bi(self.nodes, 1, 2)\n         self.sync_all()\n \n+    def sync_blocks(self, nodes=None, **kwargs):\n+        sync_blocks(nodes or self.nodes, **kwargs)\n+\n+    def sync_mempools(self, nodes=None, **kwargs):\n+        sync_mempools(nodes or self.nodes, **kwargs)\n+\n     def sync_all(self, nodes=None, **kwargs):\n-            sync_blocks(nodes or self.nodes, **kwargs)\n-            sync_mempools(nodes or self.nodes, **kwargs)\n+        self.sync_blocks(nodes, **kwargs)\n+        self.sync_mempools(nodes, **kwargs)\n \n     # Private helper methods. These should not be accessed by the subclass test scripts.\n \n@@ -494,7 +500,7 @@ def _initialize_chain(self):\n             # see the tip age check in IsInitialBlockDownload().\n             for i in range(8):\n                 self.nodes[0].generatetoaddress(25 if i != 7 else 24, self.nodes[i % 4].get_deterministic_priv_key().address)\n-            sync_blocks(self.nodes)\n+            self.sync_blocks()\n \n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)"
      }
    ]
  },
  {
    "sha": "faf77f9b90ac6f29508cc83718989888b4eb5d78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY3N2Y5YjkwYWM2ZjI5NTA4Y2M4MzcxODk4OTg4OGI0ZWI1ZDc4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-07T03:10:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T16:09:36Z"
      },
      "message": "test: Pass self to test_simple_bumpfee_succeeds\n\nNeeded for a future scripted diff",
      "tree": {
        "sha": "44653cc11c81bdcee9fbc971b7649b508585b1a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44653cc11c81bdcee9fbc971b7649b508585b1a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf77f9b90ac6f29508cc83718989888b4eb5d78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVIWQcMAI2XZKds1rFBp5D8zrA2fCY+\n5pQuT2w2YRvh4OIrKRqaFrka1efh+060bqnI9VZ984F6Cchzb8951Iuk6h4Osnhq\nhQ6yQHO4wGtqJnpzqc0fSKRNz2bc/ifBlJqGdhLszMWJI+ez+LSs2xFqDtN1rRFY\nCQPJg4AfgjCayrPOdZKdR5A07Znl8jBajnNzNqz3hqfvK41BbxmJru12w7GHBXpG\nhnBLTsnoapW4l2Y/1/6waXsMvB/Qm6ortSLeONRY+jJ7etOdoh1nz3OOUtFVk0Ll\nOIjiVqbmF6bF+vOL+pvsoal5dIltotA0w92jCCttcFHWA0om3crC4nXz6vEbHJgb\n4b/wqDGDyn+7kfhtVSeul8XgSpFoKjVtSmYw9tGqBJvEioUVKumzXk60Lup/qxCg\nR/+aKAARGOufsiw9ODqOLEyKb8x648xg56imwaqTocsuF9rO/SIg2n+syVAHlbr/\nBJ/ZOx2NULo2YVi/nwPWVnzovtun1VcNiBz/7hZLkg==\n=SV4Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 44653cc11c81bdcee9fbc971b7649b508585b1a7\nparent fa6dc7c5c3477bda04481f080d430f63539974e2\nauthor MarcoFalke <falke.marco@gmail.com> 1554606653 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554826176 -0400\n\ntest: Pass self to test_simple_bumpfee_succeeds\n\nNeeded for a future scripted diff\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf77f9b90ac6f29508cc83718989888b4eb5d78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf77f9b90ac6f29508cc83718989888b4eb5d78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf77f9b90ac6f29508cc83718989888b4eb5d78/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6dc7c5c3477bda04481f080d430f63539974e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6dc7c5c3477bda04481f080d430f63539974e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6dc7c5c3477bda04481f080d430f63539974e2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "938481c6c0504c3d9926ab3e8ae6de34a25ddfcc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf77f9b90ac6f29508cc83718989888b4eb5d78/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf77f9b90ac6f29508cc83718989888b4eb5d78/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=faf77f9b90ac6f29508cc83718989888b4eb5d78",
        "patch": "@@ -60,7 +60,7 @@ def run_test(self):\n \n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n-        test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address)\n+        test_simple_bumpfee_succeeds(self, rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(peer_node, dest_address)\n         test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n@@ -76,7 +76,7 @@ def run_test(self):\n         self.log.info(\"Success\")\n \n \n-def test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address):\n+def test_simple_bumpfee_succeeds(self, rbf_node, peer_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbftx = rbf_node.gettransaction(rbfid)\n     sync_mempools((rbf_node, peer_node))"
      }
    ]
  },
  {
    "sha": "fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE2YTA5MjE1ZjZjY2UyM2RlMGY5MGQ1MWIzYzVkZjM3YzZiNmE0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-06T22:19:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T16:09:53Z"
      },
      "message": "scripted-diff: use self.sync_* methods\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/sync_blocks(self.nodes)/self.sync_blocks()/g'     $(git grep -l 'sync_blocks(self.nodes)'   ./test/functional/*.py)\nsed -i -e 's/sync_mempools(self.nodes)/self.sync_mempools()/g' $(git grep -l 'sync_mempools(self.nodes)' ./test/functional/*.py)\n\nsed -i -e 's/  sync_blocks(/  self.sync_blocks(/g'     $(git grep -l sync_blocks   ./test/functional/*.py)\nsed -i -e 's/  sync_mempools(/  self.sync_mempools(/g' $(git grep -l sync_mempools ./test/functional/*.py)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b2c5ece6a9de4cfafa0249f5f923d7b9d0bdd6fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2c5ece6a9de4cfafa0249f5f923d7b9d0bdd6fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVI+5ML/3RwwxlIqSPzmDFUDrppRLK1\nAt9KAi24ZroFhjVQZoCH/D4B78g1iQ8Icsxh2VN04uOOfp8I2cdKH+0gbvphGXI/\nvNvdE6LVriuFObYGQ/2sNNbPKx+jCaN8nfRmO/Ss6jxnl79aqSXNRPRBKcroyeY6\nvraxEJuaCJqc/dgdx7A54PUAse4iEc72nNqs1iQEh6riMA9ERpmzY2v1WODP2xra\nGA8siCOl1LpPNOUMh0iKtqrt21IKqFhl0NAd8G98Qc+Hf71PIk/OH1HyYF9LOT2s\nSE3U7Apq+qSi+TFBo/fN0Svbk+Mxy7jH4otb9TzhNUp6F0XkL57+DkFCBWYrh7Y1\nqBP7VwiABFYJ9fPTTHqKaVsrgfizaHQxq4dbVZJIc/XfWFOgSiqTZeEvVY9oeb2G\nShXIkD2wHw8GB7Gwu0zZ3Wy3hlVXpx0mVC6OWGHOOIVzzXMuJVAoiIH2N5YfJMBo\nUZEHKv5lB93kBsC4aiZyq7rszBFpDa5zmvmzbBKqOA==\n=IKeQ\n-----END PGP SIGNATURE-----",
        "payload": "tree b2c5ece6a9de4cfafa0249f5f923d7b9d0bdd6fb\nparent faf77f9b90ac6f29508cc83718989888b4eb5d78\nauthor MarcoFalke <falke.marco@gmail.com> 1554589185 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554826193 -0400\n\nscripted-diff: use self.sync_* methods\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/sync_blocks(self.nodes)/self.sync_blocks()/g'     $(git grep -l 'sync_blocks(self.nodes)'   ./test/functional/*.py)\nsed -i -e 's/sync_mempools(self.nodes)/self.sync_mempools()/g' $(git grep -l 'sync_mempools(self.nodes)' ./test/functional/*.py)\n\nsed -i -e 's/  sync_blocks(/  self.sync_blocks(/g'     $(git grep -l sync_blocks   ./test/functional/*.py)\nsed -i -e 's/  sync_mempools(/  self.sync_mempools(/g' $(git grep -l sync_mempools ./test/functional/*.py)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf77f9b90ac6f29508cc83718989888b4eb5d78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf77f9b90ac6f29508cc83718989888b4eb5d78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf77f9b90ac6f29508cc83718989888b4eb5d78"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 86,
      "deletions": 86
    },
    "files": [
      {
        "sha": "8f7d410de7e262ed309bbf05eae32e3d870a531a",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -385,7 +385,7 @@ def activateCSV(self):\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n         self.nodes[0].generate(1)\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n     # Use self.nodes[1] to test that version 2 transactions are standard.\n     def test_version2_relay(self):"
      },
      {
        "sha": "477b583785ff470910de25dd27476e2d2596571a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -162,9 +162,9 @@ def transact_and_mine(self, numblocks, mining_node):\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee) / tx_kbytes)\n-            sync_mempools(self.nodes[0:3], wait=.1)\n+            self.sync_mempools(self.nodes[0:3], wait=.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n-            sync_blocks(self.nodes[0:3], wait=.1)\n+            self.sync_blocks(self.nodes[0:3], wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n             for utx in self.memutxo:\n@@ -237,7 +237,7 @@ def run_test(self):\n         while len(self.nodes[1].getrawmempool()) > 0:\n             self.nodes[1].generate(1)\n \n-        sync_blocks(self.nodes[0:3], wait=.1)\n+        self.sync_blocks(self.nodes[0:3], wait=.1)\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n "
      },
      {
        "sha": "1c58b91e5e0bb7ccb5337cf43b5565f0a3aa0593",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -100,7 +100,7 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[0], 4)\n-        sync_blocks(self.nodes[0:5])\n+        self.sync_blocks(self.nodes[0:5])\n \n     def setup_nodes(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n@@ -111,13 +111,13 @@ def setup_nodes(self):\n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n         self.nodes[1].generate(200)\n-        sync_blocks(self.nodes[0:2])\n+        self.sync_blocks(self.nodes[0:2])\n         self.nodes[0].generate(150)\n \n         # Then mine enough full blocks to create more than 550MiB of data\n         mine_large_blocks(self.nodes[0], 645)\n \n-        sync_blocks(self.nodes[0:5])\n+        self.sync_blocks(self.nodes[0:5])\n \n     def test_height_min(self):\n         assert os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")), \"blk00000.dat is missing, pruning too early\"\n@@ -153,7 +153,7 @@ def create_chain_with_staleblocks(self):\n             # Create connections in the order so both nodes can see the reorg at the same time\n             connect_nodes(self.nodes[0], 1)\n             connect_nodes(self.nodes[0], 2)\n-            sync_blocks(self.nodes[0:3])\n+            self.sync_blocks(self.nodes[0:3])\n \n         self.log.info(\"Usage can be over target because of high stale rate: %d\" % calc_usage(self.prunedir))\n \n@@ -190,7 +190,7 @@ def reorg_test(self):\n         self.log.info(\"Reconnect nodes\")\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n-        sync_blocks(self.nodes[0:3], timeout=120)\n+        self.sync_blocks(self.nodes[0:3], timeout=120)\n \n         self.log.info(\"Verify height on node 2: %d\" % self.nodes[2].getblockcount())\n         self.log.info(\"Usage possibly still high because of stale blocks in block files: %d\" % calc_usage(self.prunedir))\n@@ -345,7 +345,7 @@ def wallet_test(self):\n         self.log.info(\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n-        sync_blocks(nds, wait=5, timeout=300)\n+        self.sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5)  # stop and start to trigger rescan\n         self.start_node(5, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")"
      },
      {
        "sha": "258e7c2675eefd1f0f47741d7714f3a9970a4ac8",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -76,13 +76,13 @@ def success_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n         block = node.generate(1)\n         assert_equal(len(node.getblock(block[0])[\"tx\"]), 2)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n     def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n         block = node.generate(1)\n         assert_equal(len(node.getblock(block[0])[\"tx\"]), 1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n         assert_raises_rpc_error(-26, error_msg, send_to_witness, use_p2wsh=1, node=node, utxo=getutxo(txid), pubkey=self.pubkey[0], encode_p2sh=False, amount=Decimal(\"49.998\"), sign=sign, insert_redeem_script=redeem_script)\n@@ -131,15 +131,15 @@ def run_test(self):\n                     p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n \n         self.nodes[0].generate(1)  # block 163\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Make sure all nodes recognize the transactions as theirs\n         assert_equal(self.nodes[0].getbalance(), balance_presetup - 60 * 50 + 20 * Decimal(\"49.999\") + 50)\n         assert_equal(self.nodes[1].getbalance(), 20 * Decimal(\"49.999\"))\n         assert_equal(self.nodes[2].getbalance(), 20 * Decimal(\"49.999\"))\n \n         self.nodes[0].generate(260)  # block 423\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         self.log.info(\"Verify witness txs are skipped for mining before the fork\")\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][0], True)  # block 424\n@@ -156,7 +156,7 @@ def run_test(self):\n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n         blockhash = self.nodes[2].generate(1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n         segwit_tx_list = self.nodes[2].getblock(blockhash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n@@ -538,7 +538,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, 0)\n         txs_mined[txid] = self.nodes[0].generate(1)[0]\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         watchcount = 0\n         spendcount = 0\n         for i in self.nodes[0].listunspent():\n@@ -590,7 +590,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         self.nodes[0].sendrawtransaction(signresults, 0)\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "c4c9f1173aa30bb35e224877b77ace35d35a780a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -163,7 +163,7 @@ def run_test(self):\n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         # Prioritise a transaction that has been mined, then add it back to the\n         # mempool by using invalidateblock.\n@@ -228,7 +228,7 @@ def run_test(self):\n         # Test reorg handling\n         # First, the basics:\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.nodes[1].invalidateblock(self.nodes[0].getbestblockhash())\n         self.nodes[1].reconsiderblock(self.nodes[0].getbestblockhash())\n \n@@ -283,12 +283,12 @@ def run_test(self):\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n \n         # Now try to disconnect the tip on each node...\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n if __name__ == '__main__':\n     MempoolPackagesTest().main()"
      },
      {
        "sha": "46f2c0dd81f4c9775d573a316f06462c26f017a8",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -50,7 +50,7 @@ def run_test(self):\n         node0 = self.nodes[0]\n         # Get out of IBD\n         node1.generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         self.nodes[0].add_p2p_connection(TestP2PConn())\n \n@@ -71,7 +71,7 @@ def run_test(self):\n         # Change tx fee rate to 10 sat/byte and test they are no longer received\n         node1.settxfee(Decimal(\"0.00010000\"))\n         [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n-        sync_mempools(self.nodes) # must be sure node 0 has received all txs\n+        self.sync_mempools() # must be sure node 0 has received all txs\n \n         # Send one transaction from node0 that should be received, so that we\n         # we can sync the test on receipt (if node1's txs were relayed, they'd"
      },
      {
        "sha": "6b0f4f3f812dee8c1444c8771b85eef334c5c106",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -60,7 +60,7 @@ def run_test(self):\n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         connect_nodes_bi(self.nodes, 0, 1)\n         blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n-        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n         node.send_getdata_for_block(blocks[1])  # last block in valid range\n@@ -86,7 +86,7 @@ def run_test(self):\n         # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n         connect_nodes_bi(self.nodes, 0, 2)\n         try:\n-            sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n+            self.sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n         except:\n             pass\n         # node2 must remain at height 0\n@@ -96,7 +96,7 @@ def run_test(self):\n         connect_nodes_bi(self.nodes, 1, 2)\n \n         # sync must be possible\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # disconnect all peers\n         self.disconnect_all()\n@@ -108,7 +108,7 @@ def run_test(self):\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n-        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      },
      {
        "sha": "0e9e6c8b25c2414074b7c0de9052f93dda56c057",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -283,7 +283,7 @@ def func_wrapper(self, *args, **kwargs):\n             func(self, *args, **kwargs)\n             # Each subtest should leave some utxos for the next subtest\n             assert self.utxo\n-            sync_blocks(self.nodes)\n+            self.sync_blocks()\n             # Assert segwit status is as expected at end of subtest\n             assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n \n@@ -644,7 +644,7 @@ def test_standardness_v0(self):\n         # Mine it on test_node to create the confirmed output.\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Now test standardness of v0 P2WSH outputs.\n         # Start by creating a transaction with two outputs.\n@@ -675,7 +675,7 @@ def test_standardness_v0(self):\n         tx3 = CTransaction()\n         # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n         # P2PKH output; just send tx's first output back to an anyone-can-spend.\n-        sync_mempools([self.nodes[0], self.nodes[1]])\n+        self.sync_mempools([self.nodes[0], self.nodes[1]])\n         tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n         tx3.vout = [CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))]\n         tx3.wit.vtxinwit.append(CTxInWitness())\n@@ -694,7 +694,7 @@ def test_standardness_v0(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n@@ -732,7 +732,7 @@ def test_p2sh_witness(self):\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=True)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Now test attempts to spend the output.\n         spend_tx = CTransaction()\n@@ -1377,7 +1377,7 @@ def test_segwit_versions(self):\n             for i in range(NUM_SEGWIT_VERSIONS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n \n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         temp_utxo = []\n         tx = CTransaction()\n         witness_program = CScript([OP_TRUE])\n@@ -1395,7 +1395,7 @@ def test_segwit_versions(self):\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n         self.nodes[0].generate(1)  # Mine all the transactions\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         assert len(self.nodes[0].getrawmempool()) == 0\n \n         # Finally, verify that version 0 -> version 1 transactions\n@@ -1432,7 +1432,7 @@ def test_segwit_versions(self):\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Add utxo to our list\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n@@ -1460,7 +1460,7 @@ def test_premature_coinbase_witness_spend(self):\n \n         # Now test a premature spend.\n         self.nodes[0].generate(98)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n@@ -1470,7 +1470,7 @@ def test_premature_coinbase_witness_spend(self):\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n     @subtest\n     def test_uncompressed_pubkey(self):\n@@ -1600,7 +1600,7 @@ def test_signature_version_1(self):\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.utxo.pop(0)\n \n         # Test each hashtype\n@@ -1779,7 +1779,7 @@ def test_non_standard_witness_blinding(self):\n         tx.rehash()\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # We'll add an unnecessary witness to this transaction that would cause\n         # it to be non-standard, to test that violating policy with a witness\n@@ -1808,7 +1808,7 @@ def test_non_standard_witness_blinding(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Update our utxo list; we spent the first entry.\n         self.utxo.pop(0)\n@@ -1844,7 +1844,7 @@ def test_non_standard_witness(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Creating transactions for tests\n         p2wsh_txs = []\n@@ -1908,7 +1908,7 @@ def test_non_standard_witness(self):\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n@@ -1923,7 +1923,7 @@ def test_upgrade_after_activation(self):\n         self.start_node(2, extra_args=[\"-vbparams=segwit:0:999999999999\"])\n         connect_nodes(self.nodes[0], 2)\n \n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Make sure that this peer thinks segwit has activated.\n         assert get_bip9_status(self.nodes[2], 'segwit')['status'] == \"active\"\n@@ -2020,7 +2020,7 @@ def test_witness_sigops(self):\n         test_witness_block(self.nodes[0], self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         for x in self.nodes:\n             x.invalidateblock(block_4.hash)\n "
      },
      {
        "sha": "f2a19f05bd9698a9f71250283d72ae97ed19a85f",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -225,7 +225,7 @@ def mine_reorg(self, length):\n \n         # make sure all invalidated blocks are node0's\n         self.nodes[0].generatetoaddress(length, self.nodes[0].get_deterministic_priv_key().address)\n-        sync_blocks(self.nodes, wait=0.1)\n+        self.sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n             x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n             x.clear_block_announcements()\n@@ -234,7 +234,7 @@ def mine_reorg(self, length):\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height - (length - 1))\n         self.nodes[1].invalidateblock(hash_to_invalidate)\n         all_hashes = self.nodes[1].generatetoaddress(length + 1, self.nodes[1].get_deterministic_priv_key().address)  # Must be longer than the orig chain\n-        sync_blocks(self.nodes, wait=0.1)\n+        self.sync_blocks(self.nodes, wait=0.1)\n         return [int(x, 16) for x in all_hashes]\n \n     def run_test(self):"
      },
      {
        "sha": "dab7bc0bf2cf4d0f09881deb8fdc5d5adfee88e7",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -302,7 +302,7 @@ def run_test(self):\n \n         # 9. Connect node1 to node0 and ensure it is able to sync\n         connect_nodes(self.nodes[0], 1)\n-        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")\n \n if __name__ == '__main__':"
      },
      {
        "sha": "d5bf60c4f1b97ad87f0a32450982242f3724314b",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -35,7 +35,7 @@ def run_test(self):\n \n         self.log.info(\"Connect nodes to force a reorg\")\n         connect_nodes_bi(self.nodes, 0, 1)\n-        sync_blocks(self.nodes[0:2])\n+        self.sync_blocks(self.nodes[0:2])\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n@@ -47,7 +47,7 @@ def run_test(self):\n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n         connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n-        sync_blocks(self.nodes[1:3])\n+        self.sync_blocks(self.nodes[1:3])\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))"
      },
      {
        "sha": "46f1922891cd70c75a6635a1e0cbad7848f0ab00",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         self.log.info(\"Make Node1 prefer block C\")\n         self.nodes[1].preciousblock(hashC)\n-        sync_blocks(self.nodes[0:2])  # wait because node 1 may not have downloaded hashC\n+        self.sync_blocks(self.nodes[0:2])  # wait because node 1 may not have downloaded hashC\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Make Node1 prefer block G again\")\n         self.nodes[1].preciousblock(hashG)\n@@ -86,7 +86,7 @@ def run_test(self):\n         self.log.info(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n         self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 6)\n-        sync_blocks(self.nodes[0:2])\n+        self.sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         self.log.info(\"Node1 should not be able to prefer block C anymore\")"
      },
      {
        "sha": "53f3a4c84d866d3723ee67ad9ab4e887f7c80a01",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -41,7 +41,7 @@ def test_utxo_conversion(self):\n         online_node.importaddress(offline_addr, \"\", False)\n         mining_node.sendtoaddress(address=offline_addr, amount=1.0)\n         mining_node.generate(nblocks=1)\n-        sync_blocks([mining_node, online_node])\n+        self.sync_blocks([mining_node, online_node])\n \n         # Construct an unsigned PSBT on the online node (who doesn't know the output is Segwit, so will include a non-witness UTXO)\n         utxos = online_node.listunspent(addresses=[offline_addr])\n@@ -56,7 +56,7 @@ def test_utxo_conversion(self):\n         # Make sure we can mine the resulting transaction\n         txid = mining_node.sendrawtransaction(mining_node.finalizepsbt(signed_psbt)[\"hex\"])\n         mining_node.generate(1)\n-        sync_blocks([mining_node, online_node])\n+        self.sync_blocks([mining_node, online_node])\n         assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n \n         # Reconnect"
      },
      {
        "sha": "2abfa814872e8dd713a3d8031741d5eaa418d95c",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -33,20 +33,20 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         self.nodes[1].generate(100)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         balance = self.nodes[0].getbalance()\n         txA = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         txB = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n         txC = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         self.nodes[1].generate(1)\n \n         # Can not abandon non-wallet transaction\n         assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', lambda: self.nodes[0].abandontransaction(txid='ff' * 32))\n         # Can not abandon confirmed transaction\n         assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: self.nodes[0].abandontransaction(txid=txA))\n \n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         newbalance = self.nodes[0].getbalance()\n         assert balance - newbalance < Decimal(\"0.001\")  #no more than fees lost\n         balance = newbalance\n@@ -163,7 +163,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n \n         connect_nodes(self.nodes[0], 1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted\n         newbalance = self.nodes[0].getbalance()"
      },
      {
        "sha": "82e06370cfe0e5369ed7cffe1ab453d48c66f1dc",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -220,7 +220,7 @@ def run_test(self):\n         # Mine 101 blocks on node5 to bring nodes out of IBD and make sure that\n         # no coinbases are maturing for the nodes-under-test during the test\n         self.nodes[5].generate(101)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         uncompressed_1 = \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\"\n         uncompressed_2 = \"047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77\"\n@@ -287,7 +287,7 @@ def run_test(self):\n \n             self.log.debug(\"Sending: {}\".format(sends))\n             self.nodes[from_node].sendmany(\"\", sends)\n-            sync_mempools(self.nodes)\n+            self.sync_mempools()\n \n             unconf_balances = self.get_balances(False)\n             self.log.debug(\"Check unconfirmed balances: {}\".format(unconf_balances))\n@@ -298,7 +298,7 @@ def run_test(self):\n \n             # node5 collects fee and block subsidy to keep accounting simple\n             self.nodes[5].generate(1)\n-            sync_blocks(self.nodes)\n+            self.sync_blocks()\n \n             # Verify that the receiving wallet contains a UTXO with the expected address, and expected descriptor\n             for n, to_node in enumerate(range(from_node, from_node + 4)):\n@@ -328,7 +328,7 @@ def run_test(self):\n         # Fund node 4:\n         self.nodes[5].sendtoaddress(self.nodes[4].getnewaddress(), Decimal(\"1\"))\n         self.nodes[5].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         assert_equal(self.nodes[4].getbalance(), 1)\n \n         self.log.info(\"Nodes with addresstype=legacy never use a P2WPKH change output\")"
      },
      {
        "sha": "432bd871065b74b01c7ee78ec3e350fc6166f59c",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -75,9 +75,9 @@ def do_one_round(self):\n \n         # Have the miner (node3) mine a block.\n         # Must sync mempools before mining.\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         self.nodes[3].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n@@ -102,13 +102,13 @@ def erase_three(self):\n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.nodes[1].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.nodes[2].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.nodes[3].generate(100)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -165,7 +165,7 @@ def run_test(self):\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         assert_equal(self.nodes[0].getbalance(), balance0)\n         assert_equal(self.nodes[1].getbalance(), balance1)\n@@ -189,7 +189,7 @@ def run_test(self):\n         self.nodes[1].importwallet(os.path.join(self.nodes[1].datadir, 'wallet.dump'))\n         self.nodes[2].importwallet(os.path.join(self.nodes[2].datadir, 'wallet.dump'))\n \n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         assert_equal(self.nodes[0].getbalance(), balance0)\n         assert_equal(self.nodes[1].getbalance(), balance1)"
      },
      {
        "sha": "b2bf0476f121c69587950d4f6c01670112703144",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -281,10 +281,10 @@ def run_test(self):\n         connect_nodes_bi(self.nodes, 0, 1)\n         connect_nodes_bi(self.nodes, 1, 2)\n         connect_nodes_bi(self.nodes, 0, 2)\n-        sync_blocks(self.nodes[0:3])\n+        self.sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes[0:3])\n+        self.sync_blocks(self.nodes[0:3])\n         node_2_bal += 2\n \n         # tx should be added to balance because after restarting the nodes tx should be broadcast"
      },
      {
        "sha": "41a66642f6ac394bd5e76bd82788d458b5d97aca",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -79,13 +79,13 @@ def run_test(self):\n def test_simple_bumpfee_succeeds(self, rbf_node, peer_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbftx = rbf_node.gettransaction(rbfid)\n-    sync_mempools((rbf_node, peer_node))\n+    self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n     bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n     assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n-    sync_mempools((rbf_node, peer_node))\n+    self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n     assert bumped_tx[\"txid\"] in peer_node.getrawmempool()\n     assert rbfid not in rbf_node.getrawmempool()"
      },
      {
        "sha": "ac77320e4932cb1d6a8407357a2f999aba4af67c",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -161,7 +161,7 @@ def run_test(self):\n         timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n         set_node_times(self.nodes, timestamp + TIMESTAMP_WINDOW + 1)\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # For each variation of wallet key import, invoke the import RPC and\n         # check the results from getbalance and listtransactions.\n@@ -187,7 +187,7 @@ def run_test(self):\n         # Generate a block containing the new transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Check the latest results from getbalance and listtransactions.\n         for variant in IMPORT_VARIANTS:"
      },
      {
        "sha": "27062f675dd964d56392bb7a029cacfe65910eb4",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.nodes[0].sendtoaddress(addr_extpool, 5)\n             self.nodes[0].generate(1)\n-            sync_blocks(self.nodes)\n+            self.sync_blocks()\n \n             self.log.info(\"Restart node with wallet backup\")\n             self.stop_node(idx)"
      },
      {
        "sha": "ee65bdd05d8bb4c2e21c4d55f3d5d67915d24b0f",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -24,7 +24,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # save the number of coinbase reward addresses so far\n         num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))"
      },
      {
        "sha": "10c60a1fd4bbfe6d6bcc76a5b6c10bcc8c7a343c",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -127,7 +127,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         assert not is_opt_in(self.nodes[0], txid_1)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n \n         # Tx2 will build off txid_1, still not opting in to RBF.\n@@ -147,7 +147,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # ...and check the result\n         assert not is_opt_in(self.nodes[1], txid_2)\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n \n         # Tx3 will opt-in to RBF\n@@ -163,7 +163,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         assert is_opt_in(self.nodes[0], txid_3)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n \n         # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n@@ -177,7 +177,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         assert not is_opt_in(self.nodes[1], txid_4)\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n \n         # Replace tx3, and check that tx4 becomes unknown\n@@ -189,7 +189,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         assert is_opt_in(self.nodes[0], txid_3b)\n \n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})\n \n         # Check gettransaction as well:"
      },
      {
        "sha": "d9d9eac418f94032ffe5d2cc610243cfdfc3b8a1",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -87,7 +87,7 @@ def run_test(self):\n         # Have node0 mine a block, if requested:\n         if (self.options.mine_block):\n             self.nodes[0].generate(1)\n-            sync_blocks(self.nodes[0:2])\n+            self.sync_blocks(self.nodes[0:2])\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n@@ -123,7 +123,7 @@ def run_test(self):\n         self.nodes[2].sendrawtransaction(node0_tx2[\"hex\"])\n         self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Re-fetch transaction info:\n         tx1 = self.nodes[0].gettransaction(txid1)"
      },
      {
        "sha": "31b5494fe60413fcae9f0cfe07dad29832d012fc",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "patch": "@@ -86,7 +86,7 @@ def run_test(self):\n         # Have node0 mine a block:\n         if (self.options.mine_block):\n             self.nodes[0].generate(1)\n-            sync_blocks(self.nodes[0:2])\n+            self.sync_blocks(self.nodes[0:2])\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx2 = self.nodes[0].gettransaction(txid2)\n@@ -119,7 +119,7 @@ def run_test(self):\n         # Reconnect the split network, and sync chain:\n         connect_nodes(self.nodes[1], 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)\n \n         # Re-fetch transaction info:"
      }
    ]
  },
  {
    "sha": "fafe5f0d09db6778173a1079d93c314e9317708c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZlNWYwZDA5ZGI2Nzc4MTczYTEwNzlkOTNjMzE0ZTkzMTc3MDhj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-06T22:38:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-09T16:10:35Z"
      },
      "message": "test: Remove unused imports",
      "tree": {
        "sha": "8e8b53c4d5837943f4e4aedd76698b7133ac51e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e8b53c4d5837943f4e4aedd76698b7133ac51e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafe5f0d09db6778173a1079d93c314e9317708c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcKq2AAAoJEM4rdWl+aaVI1zIMAMUy3hW1EnrF8QTH+toYA04z\n3tIgFVgWLzpMkEm+6u/MbRIAVIW6u/zDd3ypdASfwVziz7KgTK8bqOdxH6cDNepB\nRHc7fgGKj30LijlRfzggASrvatLSCH6MdEQxrHca9UkWPJlPJyVHqRL759T/nuT/\n8HO4T7LP+lrAyJQNswRxA4sNJjh7BP4n2LElgfDUpVR2RNyQMCkH9hYzWlEgTuj/\nF5HIneIEHCMIAgkrgbQ1uvvMuxHw+I5151gMM5IUzQ9SBjOCF9t3X0FTW3+9ZP2l\nFsFBbDT2GC80oQCsPsfhLa3O/M2mUb6JhHgI3n6CjGUT9iAsL6ZwoTquZpvKLzeL\nKx02mGsR0iau+roUMpt6eds4EpeOM3JXkmZfwsIi6FEF57BNpCszMxaHrNwFkU54\nKlcjVBDkFrp+6j0FXmjNYnKLmV0z3nVVuJQEMjrarPGs9w1vS1iV/zuyjBqTQYLG\nPFxuZoJbSXWoqw8dZ+7ru3XUjbkXnUf+fuc/+hTyQQ==\n=//AB\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e8b53c4d5837943f4e4aedd76698b7133ac51e4\nparent fa16a09215f6cce23de0f90d51b3c5df37c6b6a4\nauthor MarcoFalke <falke.marco@gmail.com> 1554590331 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1554826235 -0400\n\ntest: Remove unused imports\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafe5f0d09db6778173a1079d93c314e9317708c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafe5f0d09db6778173a1079d93c314e9317708c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafe5f0d09db6778173a1079d93c314e9317708c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa16a09215f6cce23de0f90d51b3c5df37c6b6a4"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 79,
      "deletions": 41
    },
    "files": [
      {
        "sha": "fdb60fb0e81e230678d9a57d9cc0025202664b94",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -10,7 +10,13 @@\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, get_bip9_status, satoshi_round, sync_blocks\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    get_bip9_status,\n+    satoshi_round,\n+)\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)"
      },
      {
        "sha": "a4b9f213a17ce1b02b84c97a284f287e289312a3",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n@@ -15,8 +15,6 @@\n     assert_greater_than_or_equal,\n     connect_nodes,\n     satoshi_round,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them"
      },
      {
        "sha": "8fb7c4964009c34e378fe9274f1fb8de603d560a",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -14,7 +14,14 @@\n from test_framework.messages import CBlock, ToHex\n from test_framework.script import CScript, OP_RETURN, OP_NOP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, connect_nodes, disconnect_nodes, sync_blocks, wait_until\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+    disconnect_nodes,\n+    wait_until,\n+)\n \n MIN_BLOCKS_TO_KEEP = 288\n "
      },
      {
        "sha": "2d4dd96a1df61a37d254613a5a7411edffdbdd30",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -18,7 +18,13 @@\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, hex_str_to_bytes, sync_blocks, try_rpc\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+    hex_str_to_bytes,\n+    try_rpc,\n+)\n \n NODE_0 = 0\n NODE_2 = 2"
      },
      {
        "sha": "c7d241503aa35584ea906d4c212015942676581c",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -8,7 +8,11 @@\n \n from test_framework.messages import COIN\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round, sync_blocks, sync_mempools\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    satoshi_round,\n+)\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25"
      },
      {
        "sha": "7f901b1886f8fe69c6cdb325e608db06c34de6d5",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.messages import msg_feefilter\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import sync_blocks, sync_mempools\n+\n \n def hashToHex(hash):\n     return format(hash, '064x')"
      },
      {
        "sha": "573d5f5a5f8ed7f2733b40722b6e21552937116e",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests NODE_NETWORK_LIMITED.\n@@ -11,7 +11,13 @@\n from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS\n from test_framework.mininode import P2PInterface, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, disconnect_nodes, connect_nodes_bi, sync_blocks, wait_until\n+from test_framework.util import (\n+    assert_equal,\n+    disconnect_nodes,\n+    connect_nodes_bi,\n+    wait_until,\n+)\n+\n \n class P2PIgnoreInv(P2PInterface):\n     firstAddrnServices = 0"
      },
      {
        "sha": "a901e115361bd572d4723bab91cdbe57837a52bf",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -77,8 +77,6 @@\n     disconnect_nodes,\n     get_bip9_status,\n     hex_str_to_bytes,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n # The versionbit bit used to signal activation of SegWit"
      },
      {
        "sha": "161b67e6d0e013f3585b13d158eeaf446ca20f3e",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test behavior of headers messages to announce blocks.\n@@ -103,7 +103,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    sync_blocks,\n     wait_until,\n )\n "
      },
      {
        "sha": "534d275c28da391c635b2bc548847e73d8dd57a6",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -57,7 +57,11 @@\n from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, sync_blocks\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+)\n \n \n class AcceptBlockTest(BitcoinTestFramework):"
      },
      {
        "sha": "8dc847437425b25688817c40e7459f62ea4580f3",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the getchaintips RPC."
      },
      {
        "sha": "3d3f694fd3b58fa4bac563f5d53a8ed165563da5",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the invalidateblock RPC.\"\"\"\n@@ -9,7 +9,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    sync_blocks,\n     wait_until,\n )\n "
      },
      {
        "sha": "2d5631bb277dd2b7be0f4c76d15ab6120cd56eda",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    sync_blocks,\n )\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):"
      },
      {
        "sha": "fb68f79bbdf6513991aa1995f18ee7e76df42d45",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -7,7 +7,13 @@\n \n from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, disconnect_nodes, find_output, sync_blocks\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes_bi,\n+    disconnect_nodes,\n+    find_output,\n+)\n \n import json\n import os\n@@ -192,8 +198,8 @@ def run_test(self):\n         psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n-           assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n-           assert \"bip32_derivs\" not in psbt_in\n+            assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+            assert \"bip32_derivs\" not in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n \n         # Same construction with only locktime set"
      },
      {
        "sha": "e86679bc31d99d1f2a2a98895350ba73553de1c8",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -18,8 +18,6 @@\n     assert_raises_rpc_error,\n     connect_nodes,\n     disconnect_nodes,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n "
      },
      {
        "sha": "a40613dfc71f98f0f1bdfd375393df4725b5655d",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -63,8 +63,6 @@\n     assert_greater_than,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n "
      },
      {
        "sha": "55c517e92f98ce7fd2f1c7f6e84aabd907f64f97",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet backup features.\n@@ -36,7 +36,12 @@\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, sync_blocks, sync_mempools\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+)\n+\n \n class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "e2a20beec51981f08e698157143e58154ed3cd72",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet balance RPC methods.\"\"\""
      },
      {
        "sha": "daa834b5b88054e9d6f0e8e64033b544a7d45b9d",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -13,7 +13,6 @@\n     assert_fee_amount,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n-    sync_blocks,\n     wait_until,\n )\n "
      },
      {
        "sha": "0c6ccbef0fd16f0a4d102680cde383da6c92aeda",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -19,7 +19,13 @@\n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes, sync_mempools\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    connect_nodes_bi,\n+    hex_str_to_bytes,\n+)\n \n WALLET_PASSPHRASE = \"test\"\n WALLET_PASSPHRASE_TIMEOUT = 3600"
      },
      {
        "sha": "72df714d8007bf0203054c62bacdb3aeee632a8d",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet import RPCs.\n@@ -20,7 +20,12 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_raises_rpc_error, connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+    assert_equal,\n+    set_node_times,\n+)\n \n import collections\n import enum"
      },
      {
        "sha": "0014555ade7affc8e7755a4e75b76abf2cdfec42",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -17,7 +17,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    sync_blocks,\n )\n \n "
      },
      {
        "sha": "5e94068930c606af13a6177ba5de086117af99cb",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n@@ -10,7 +10,6 @@\n     assert_array_result,\n     assert_equal,\n     assert_raises_rpc_error,\n-    sync_blocks,\n )\n \n "
      },
      {
        "sha": "021a29d4ac29150109193c85d57835c24afe4fe3",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listsincelast RPC.\"\"\""
      },
      {
        "sha": "997d6e702c60a9a5d8df8db03fa8558d450f2f6c",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -12,7 +12,6 @@\n     assert_array_result,\n     assert_equal,\n     hex_str_to_bytes,\n-    sync_mempools,\n )\n \n def tx_from_hex(hexstring):"
      },
      {
        "sha": "4c54a0283f14ba0b85d37d8fd3820e4dfeb5c69b",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the wallet resends transactions periodically.\"\"\""
      },
      {
        "sha": "60d7205887db002cc64b1d983a1d0964b161431c",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -10,7 +10,6 @@\n     assert_equal,\n     connect_nodes,\n     disconnect_nodes,\n-    sync_blocks,\n )\n from test_framework.messages import CTransaction, COIN\n "
      },
      {
        "sha": "40eeb4048c345345875c3ba119acb439e82b5259",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafe5f0d09db6778173a1079d93c314e9317708c/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fafe5f0d09db6778173a1079d93c314e9317708c",
        "patch": "@@ -11,7 +11,6 @@\n     connect_nodes,\n     disconnect_nodes,\n     find_output,\n-    sync_blocks,\n )\n \n class TxnMallTest(BitcoinTestFramework):"
      }
    ]
  }
]