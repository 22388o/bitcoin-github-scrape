[
  {
    "sha": "88b8f0b682271195d20c097660c8e7d4d19e4e44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGI4ZjBiNjgyMjcxMTk1ZDIwYzA5NzY2MGM4ZTdkNGQxOWU0ZTQ0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-25T14:13:28Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-25T14:13:28Z"
      },
      "message": "Simplify feebumper minimum fee code slightly\n\nNo change in behavior. Get rid of specifiedConfirmTarget if/else block and\nrename specifiedConfirmTarget and ignoreUserSetFee variables to\nignoreGlobalPayTxFee.",
      "tree": {
        "sha": "4c51efcdb10211f2999d9016b5c534260a14c56d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c51efcdb10211f2999d9016b5c534260a14c56d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88b8f0b682271195d20c097660c8e7d4d19e4e44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88b8f0b682271195d20c097660c8e7d4d19e4e44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88b8f0b682271195d20c097660c8e7d4d19e4e44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88b8f0b682271195d20c097660c8e7d4d19e4e44/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e96ecf075e8633f83ed1e05052402fb6b4d6186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e96ecf075e8633f83ed1e05052402fb6b4d6186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e96ecf075e8633f83ed1e05052402fb6b4d6186"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 12,
      "deletions": 17
    },
    "files": [
      {
        "sha": "661de0e41fbaa78ea31f386cabcbf1bd1cbee537",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=88b8f0b682271195d20c097660c8e7d4d19e4e44",
        "patch": "@@ -66,7 +66,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,15 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        // if user specified a confirm target then don't consider any global payTxFee\n-        if (specifiedConfirmTarget) {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, true);\n-        }\n-        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n-        else {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator);\n-        }\n-\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, ignoreGlobalPayTxFee);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "fc323167048cce07f4cb6397fbddf7fbb951d06e",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=88b8f0b682271195d20c097660c8e7d4d19e4e44",
        "patch": "@@ -24,7 +24,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "8dc8e327f4b8ff1329ab7492c21142b249d113e0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=88b8f0b682271195d20c097660c8e7d4d19e4e44",
        "patch": "@@ -2834,7 +2834,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     hash.SetHex(request.params[0].get_str());\n \n     // optional parameters\n-    bool specifiedConfirmTarget = false;\n+    bool ignoreGlobalPayTxFee = false;\n     int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n     bool replaceable = true;\n@@ -2851,7 +2851,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) {\n-            specifiedConfirmTarget = true;\n+            // If the user has explicitly set a confTarget in this rpc call,\n+            // then override the default logic that uses the global payTxFee\n+            // instead of the confirmation target.\n+            ignoreGlobalPayTxFee = true;\n             newConfirmTarget = options[\"confTarget\"].get_int();\n             if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n@@ -2871,7 +2874,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, specifiedConfirmTarget, totalFee, replaceable);\n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "564eec299ea0e3311afc2db06231e95926e76bfb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=88b8f0b682271195d20c097660c8e7d4d19e4e44",
        "patch": "@@ -2890,12 +2890,12 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreGlobalPayTxFee)\n {\n     // payTxFee is the user-set global for desired feerate\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0 || ignoreUserSetFee) {\n+    if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n         int estimateFoundTarget = nConfirmTarget;\n         nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, &estimateFoundTarget, pool).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee"
      },
      {
        "sha": "a3974bf00ba9da70db36aaf234eec301177322ad",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88b8f0b682271195d20c097660c8e7d4d19e4e44/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=88b8f0b682271195d20c097660c8e7d4d19e4e44",
        "patch": "@@ -959,7 +959,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee = false);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreGlobalPayTxFee = false);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  }
]