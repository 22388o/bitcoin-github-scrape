[
  {
    "sha": "5efc25f9638866941028454cfa9bae27f1519cb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWZjMjVmOTYzODg2Njk0MTAyODQ1NGNmYTliYWUyN2YxNTE5Y2I0",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-12T10:27:56Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-04T10:18:02Z"
      },
      "message": "[wallet] translate \"Keypool ran out\" message",
      "tree": {
        "sha": "d5f78d3301b31d40eca2e60a2c2877d5ddf33a37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5f78d3301b31d40eca2e60a2c2877d5ddf33a37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5efc25f9638866941028454cfa9bae27f1519cb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl45RNoACgkQV/+b28ww\nEAmeYhAAviN8l912NjYhWBbYyzk0FgUu1nWTynXY+lz3shCKiDphWChE1iJX8TPx\nxo39CN6ztnD7tVk9VSP0/gB1drX1mNW4jK9k5d6oSk4T9HB8CByiBoZX0NYJFcQ+\nzHZ0X9j3nqa/3FhObTjjzVXxePObV+Pq0k9TYAdQVu7f7qCkqDXINZ1j5t0gymA5\ncI1L42D6JHS/7N4Z1lKp5mnb/2WFeJfYAAqN7RMfnAagbzky0CUpoaAchwOGjuJO\nBoAyrE1DWgn9JU4+DX8MCcYfOvS+P27QPMubRF7tCDNq++iVsdHtO54QUTKImyUp\nLeP82mQTdgTxgSTPBUoZh4DUh4/CA21Hpt1mDGQ4GiOPT91t9Ao0B0QFwwlCSs3q\nTq4QI2dysMjpbIy9v6XPD0R4mHNOcn1RBcknZFftLKzCs6UpTSA99SE8MEQ+Bbko\njO5LNHegqF1rwxat4NmKmfll8fKRZbzIzcJHRQFkRbtA4yruxlRzmV0SiHeFi+Q+\nxCUkw1ue6pqFRQg6L7UXSQcLnTUc6foTWNuZAduEKlWJ4GC6trn9nIEDd4xhxxt0\nAghXbAfvdLLD2LzbrrVikp6ZnnVJwO0n/4FHgVhsrakG85m3tBdUW2D+MByztQF2\nPrgT3xn6Lbung3YhgoJRzIxB9ytVx+LfFLzH1Fcva6hFf4i4vT8=\n=HSiJ\n-----END PGP SIGNATURE-----",
        "payload": "tree d5f78d3301b31d40eca2e60a2c2877d5ddf33a37\nparent 02fafdd12ccad91d4fdebb010134d84a31c055f3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1570876076 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580811482 +0100\n\n[wallet] translate \"Keypool ran out\" message\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5efc25f9638866941028454cfa9bae27f1519cb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5efc25f9638866941028454cfa9bae27f1519cb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5efc25f9638866941028454cfa9bae27f1519cb4/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02fafdd12ccad91d4fdebb010134d84a31c055f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fafdd12ccad91d4fdebb010134d84a31c055f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02fafdd12ccad91d4fdebb010134d84a31c055f3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1a9f0fe0c871d2cc54b8563d75b41236433d2a9e",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5efc25f9638866941028454cfa9bae27f1519cb4/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5efc25f9638866941028454cfa9bae27f1519cb4/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5efc25f9638866941028454cfa9bae27f1519cb4",
        "patch": "@@ -18,7 +18,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n     // Generate a new key that is added to wallet\n     CPubKey new_key;\n     if (!GetKeyFromPool(new_key, type)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n     LearnRelatedScripts(new_key, type);"
      },
      {
        "sha": "b53c25113184f15b79eebb46c25974f1362a938e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5efc25f9638866941028454cfa9bae27f1519cb4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5efc25f9638866941028454cfa9bae27f1519cb4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5efc25f9638866941028454cfa9bae27f1519cb4",
        "patch": "@@ -2638,7 +2638,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 bool ret = reservedest.GetReservedDestination(dest, true);\n                 if (!ret)\n                 {\n-                    strFailReason = \"Keypool ran out, please call keypoolrefill first\";\n+                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\").translated;\n                     return false;\n                 }\n \n@@ -3161,7 +3161,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n \n     ReserveDestination reservedest(this, type);\n     if (!reservedest.GetReservedDestination(dest, true)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "709f8685ac37510aa145ac259753583c82280038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDlmODY4NWFjMzc1MTBhYTE0NWFjMjU5NzUzNTgzYzgyMjgwMDM4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-23T13:11:25Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-04T10:20:25Z"
      },
      "message": "[wallet] CreateTransaction: simplify change address check",
      "tree": {
        "sha": "cd2ca5aa826166b1fc059d21402c0e6e0e7ebc0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd2ca5aa826166b1fc059d21402c0e6e0e7ebc0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/709f8685ac37510aa145ac259753583c82280038",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl45RWkACgkQV/+b28ww\nEAmAAg/8Dh9eK+3zoOoFptPqaKOVbiW/3drrvzUwwY9gqtDbNTKJl6Na0VF4Qy1k\n3gkggi9yHiBlFi03Ac28uGGR9RtB2BbmZQhurl2U63hzoYhjt0UdJGbSoRCl2nWY\nUe0zqtGuBap629YHbf9Qb92dkxS6pmR1bVO3gNlLS38FMaDXhOAdC1X+J9nG5VI9\nv2rerYe8HOLD4Qu2UA18X2xMl1ptS4J7m+T845WIK7h0gOdm1IqJhAUfe9w2KrKU\nq3tgCKMwmP215tA1spQ5UlkB9AzYwNGxcKdeLwNIQlvZUavaao3nj/3qbHv/D0hi\nG0R+en5fFyhoewQtDBOMK5FekRft7snuv+dN0RfqUY31EYKg/F9u5aRqlfRVPQFk\nxxKnFXbR/SbGShBVurv6kzisbBTWdHsZYb906ZI28vJbnazYmC4In6rmQYO473k5\nWL8FhjHCioQGV4u6rFysRVUsFOBptShajKu5wX+2lgu5RtO0zO/lZhIWLpUj1qyc\nK+UPZg6Do+2ZuO+tuKcxPRy191JDLb32PpG4BvUF0FFD6M1MbHBdTKsr6MCj8QzM\ndytsdEuJB0JGCG6uH6QIaTCFnB1IslinHQi5W1vQiwreGzWtm8HUUNrMCjg+FmOu\nHK52Wp8MnCW6s8nAWzJ0fg4aF/l9/4KvNLrGk7jrku4Uw9ukfYA=\n=9fh1\n-----END PGP SIGNATURE-----",
        "payload": "tree cd2ca5aa826166b1fc059d21402c0e6e0e7ebc0b\nparent 5efc25f9638866941028454cfa9bae27f1519cb4\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571836285 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580811625 +0100\n\n[wallet] CreateTransaction: simplify change address check\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709f8685ac37510aa145ac259753583c82280038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/709f8685ac37510aa145ac259753583c82280038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709f8685ac37510aa145ac259753583c82280038/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5efc25f9638866941028454cfa9bae27f1519cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5efc25f9638866941028454cfa9bae27f1519cb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5efc25f9638866941028454cfa9bae27f1519cb4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 3,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8e20f48ae3d50a40cce1f22e0dfb3c2706d0aac7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709f8685ac37510aa145ac259753583c82280038/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709f8685ac37510aa145ac259753583c82280038/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=709f8685ac37510aa145ac259753583c82280038",
        "patch": "@@ -2630,18 +2630,11 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  post-backup change.\n \n                 // Reserve a new key pair from key pool\n-                if (!CanGetAddresses(true)) {\n-                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\").translated;\n-                    return false;\n-                }\n                 CTxDestination dest;\n-                bool ret = reservedest.GetReservedDestination(dest, true);\n-                if (!ret)\n-                {\n-                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\").translated;\n+                if (!reservedest.GetReservedDestination(dest, true)) {\n+                    strFailReason = _(\"Can't generate a change-address key. Please call keypoolrefill first.\").translated;\n                     return false;\n                 }\n-\n                 scriptChange = GetScriptForDestination(dest);\n             }\n             CTxOut change_prototype_txout(0, scriptChange);"
      },
      {
        "sha": "8a2dc7e9164399261f3cd99330a079d6197bdfcb",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709f8685ac37510aa145ac259753583c82280038/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709f8685ac37510aa145ac259753583c82280038/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=709f8685ac37510aa145ac259753583c82280038",
        "patch": "@@ -504,7 +504,7 @@ def test_locked_wallet(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Can't generate a change-address key. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         # Refill the keypool.\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      }
    ]
  },
  {
    "sha": "92bcd70808b9cac56b184903aa6d37baf9641b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmJjZDcwODA4YjljYWM1NmIxODQ5MDNhYTZkMzdiYWY5NjQxYjM3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-23T13:21:50Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-04T10:20:25Z"
      },
      "message": "[wallet] allow transaction without change if keypool is empty",
      "tree": {
        "sha": "0faa43d78dc9851c88308ef0c5a5943b9379fe32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0faa43d78dc9851c88308ef0c5a5943b9379fe32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92bcd70808b9cac56b184903aa6d37baf9641b37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl45RWkACgkQV/+b28ww\nEAnzrhAAv/aYl7jUXY6a4OAAlvlARKl8L33moR+6T4lASw8pdLnpVp2ec2VAvKaF\n6zp9hXJKMvzOmT3RddayzenMBzFsLqrH7EltHKhU8+csmaizhAD2mRYfxIGv6eDB\n3tSefBNP4iWXVjDhnFI7XhSkn+7Rm1g91YUIucdQ4iEKkXZUjoe3/FI9coA1GOsT\ntNLoMAwnyrp3Bgl9i7qUMxvivpN6HDMjzv8OLWhGQOoTj1YiOG1bZgvt0wEgJJjS\noU67fvpmYcz9KjUuJKtZYUATE2s3CQDS0b2O7+DUB/O4/7oLXq3QEutQ1LjCs6jl\nShXj8BphWtswMwDl035htOn5Xk8whZ0GNdIlA9Q85jUGT8JZfnZJhtX9aKtf9Sj+\nwSyn6bpzcJahddifFO+908HXooF+v3dTxw2NoIKUrENsFdK4ko0piNbK4OYXHtQn\n6SkmgYQwHLjFYGuQdI1kuxOh0QnGpR8hVYxmCOeavtY4MDQZ2Z4q751QUTJ+uOR0\nardz4JenaUXr3CPrB8o40bjEIE+mDjaGMk/QDU9eqPhmCcZM/PXDk7Vj6xrx04h6\nQDHqzH8r97ED9sN8sYkifXQelj3NlzGr87at2VIXc6Z98QNtm/3GHq/CCgLVuOn3\nVKyxFjkk+NMVRZ4+jUf3WdHoJvIo2uJ5tKK5lpWIgq/2MO9ri3I=\n=C72b\n-----END PGP SIGNATURE-----",
        "payload": "tree 0faa43d78dc9851c88308ef0c5a5943b9379fe32\nparent 709f8685ac37510aa145ac259753583c82280038\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571836910 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1580811625 +0100\n\n[wallet] allow transaction without change if keypool is empty\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92bcd70808b9cac56b184903aa6d37baf9641b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92bcd70808b9cac56b184903aa6d37baf9641b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92bcd70808b9cac56b184903aa6d37baf9641b37/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "709f8685ac37510aa145ac259753583c82280038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709f8685ac37510aa145ac259753583c82280038",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/709f8685ac37510aa145ac259753583c82280038"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 70,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5b4781beafcb1fcc0eab642f6ec2472522c373ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92bcd70808b9cac56b184903aa6d37baf9641b37/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92bcd70808b9cac56b184903aa6d37baf9641b37/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=92bcd70808b9cac56b184903aa6d37baf9641b37",
        "patch": "@@ -2629,13 +2629,14 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  rediscover unknown transactions that were written with keys of ours to recover\n                 //  post-backup change.\n \n-                // Reserve a new key pair from key pool\n+                // Reserve a new key pair from key pool. If it fails, provide a dummy\n+                // destination in case we don't need change.\n                 CTxDestination dest;\n                 if (!reservedest.GetReservedDestination(dest, true)) {\n-                    strFailReason = _(\"Can't generate a change-address key. Please call keypoolrefill first.\").translated;\n-                    return false;\n+                    strFailReason = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\").translated;\n                 }\n                 scriptChange = GetScriptForDestination(dest);\n+                assert(!dest.empty() || scriptChange.empty());\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n@@ -2851,6 +2852,11 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 coin_selection_params.use_bnb = false;\n                 continue;\n             }\n+\n+            // Give up if change keypool ran out and we failed to find a solution without change:\n+            if (scriptChange.empty() && nChangePosInOut != -1) {\n+                return false;\n+            }\n         }\n \n         // Shuffle selected coins and fill in final vin"
      },
      {
        "sha": "03c52710588f3fe17733417929c13b73b0b29a08",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92bcd70808b9cac56b184903aa6d37baf9641b37/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92bcd70808b9cac56b184903aa6d37baf9641b37/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=92bcd70808b9cac56b184903aa6d37baf9641b37",
        "patch": "@@ -500,11 +500,16 @@ def test_locked_wallet(self):\n         self.nodes[1].getnewaddress()\n         self.nodes[1].getrawchangeaddress()\n         inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n+        outputs = {self.nodes[0].getnewaddress():1.09999500}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        # fund a transaction that does not require a new key for the change output\n+        self.nodes[1].fundrawtransaction(rawtx)\n+\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_rpc_error(-4, \"Can't generate a change-address key. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n+        outputs = {self.nodes[0].getnewaddress():1.1}\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         # Refill the keypool.\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      },
      {
        "sha": "9e2f00e62fb13fabc1ea245e639645f0453b3768",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 54,
        "deletions": 6,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92bcd70808b9cac56b184903aa6d37baf9641b37/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92bcd70808b9cac56b184903aa6d37baf9641b37/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=92bcd70808b9cac56b184903aa6d37baf9641b37",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n import time\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -53,12 +54,12 @@ def run_test(self):\n         assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n         assert len(addr) == 6\n         # the next one should fail\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n@@ -82,5 +83,52 @@ def run_test(self):\n         assert_equal(wi['keypoolsize_hd_internal'], 100)\n         assert_equal(wi['keypoolsize'], 100)\n \n+        # create a blank wallet\n+        nodes[0].createwallet(wallet_name='w2', blank=True)\n+        w2 = nodes[0].get_wallet_rpc('w2')\n+\n+        # refer to initial wallet as w1\n+        w1 = nodes[0].get_wallet_rpc('')\n+\n+        # import private key and fund it\n+        address = addr.pop()\n+        privkey = w1.dumpprivkey(address)\n+        res = w2.importmulti([{'scriptPubKey': {'address': address}, 'keys': [privkey], 'timestamp': 'now'}])\n+        assert_equal(res[0]['success'], True)\n+        w1.walletpassphrase('test', 100)\n+\n+        res = w1.sendtoaddress(address=address, amount=0.00010000)\n+        nodes[0].generate(1)\n+        destination = addr.pop()\n+\n+        # Using a fee rate (10 sat / byte) well above the minimum relay rate\n+        # creating a 5,000 sat transaction with change should not be possible\n+        assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+\n+        # creating a 10,000 sat transaction without change, with a manual input, should still be possible\n+        res = w2.walletcreatefundedpsbt(inputs=w2.listunspent(), outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+\n+        # creating a 10,000 sat transaction without change should still be possible\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+        # should work without subtractFeeFromOutputs if the exact fee is subtracted from the amount\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00008900}], options={\"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+\n+        # dust change should be removed\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00008800}], options={\"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+\n+        # create a transaction without change at the maximum fee rate, such that the output is still spendable:\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.0008824})\n+        assert_equal(\"psbt\" in res, True)\n+        assert_equal(res[\"fee\"], Decimal(\"0.00009706\"))\n+\n+        # creating a 10,000 sat transaction with a manual change address should be possible\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010, \"changeAddress\": addr.pop()})\n+        assert_equal(\"psbt\" in res, True)\n+\n+\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      }
    ]
  }
]