instagibbs,2019-10-22 19:16:31,"appreciated, will review",https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-545112411,545112411,
DrahtBot,2019-10-22 22:14:47,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-545179108,545179108,
promag,2019-10-23 10:18:48,"Looks like you could avoid `failed_to_get_change_address` by applying\n```diff\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -2968,7 +2968,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             // TODO: pass in scriptChange instead of reservedest so\n             // change transaction isn't always pay-to-bitcoin-address\n         ",https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-545374547,545374547,
laanwj,2019-10-23 10:22:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-545375875,545375875,
Sjors,2019-10-23 13:21:20,Updated with @promag's suggestion to avoid `failed_to_get_change_address` and @instagibbs suggestion to simplify the change address check.,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-545440441,545440441,
Sjors,2019-10-24 15:04:03,"@achow101 suggested in https://github.com/bitcoin/bitcoin/pull/16944#discussion_r338308868 to avoid knapsack when there's no change. I added a commit that achieves that, but it's non-trivial.\n\nIt does this by enabling BnB when subtracting fees from outputs. Gotchas:\n1. when coins are pre-selected, it still uses knapsack\n2. it still excludes dust inputs based on their value minus the fees n",https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-545961422,545961422,
achow101,2019-10-24 20:23:10,"> @achow101 suggested in [#16944 (comment)](https://github.com/bitcoin/bitcoin/pull/16944#discussion_r338308868) to avoid knapsack when there's no change. I added a commit that achieves that, but it's non-trivial.\n\nIn the interest of reducing complexity, I think that change should be done as a separate PR. I do plan on working on the coin selection logic again soon and clean this up as well.",https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-546087219,546087219,
Sjors,2019-10-25 08:32:15,"@achow101 done, I moved that commit into #17246",https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-546258522,546258522,
Sjors,2020-01-30 14:23:00,@instagibbs @achow101 @fjahr @luke-jr this should be ready for another review. @gwillen you may also find it useful.,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-580276061,580276061,
fjahr,2020-02-05 10:49:57,Code review ACK 92bcd70808b9cac56b184903aa6d37baf9641b37,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-582350028,582350028,
jonasschnelli,2020-04-16 06:19:53,"Thanks @Sjors. Clever way.\nutACK 92bcd70808b9cac56b184903aa6d37baf9641b37",https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-614438822,614438822,
jonasschnelli,2020-04-16 06:21:01,This should have its release notes part (added label).,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-614439195,614439195,
achow101,2020-04-17 16:34:47,ACK 92bcd70808b9cac56b184903aa6d37baf9641b37,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-615345149,615345149,
fanquake,2020-05-23 07:30:12,@achow101 can you add any relevant release notes to https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.20.0-Release-Notes-Draft ?,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-633001089,633001089,
Sjors,2020-05-27 09:28:33,@fanquake note that this isn't in 0.20,https://github.com/bitcoin/bitcoin/pull/17219#issuecomment-634542910,634542910,
Sjors,2019-10-22 19:14:47,"@instagibbs wrote:\n> At the risk of making the error message less precise, I think this whole block is easier to read if it just relies on `GetReservedDestination` to check if `CanGetAddress` is true or not. You also can just not store `ret` and use it directly in the conditional.",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r337701626,337701626,src/wallet/wallet.cpp
promag,2019-10-23 14:11:47,"nit, remove üèÉ.",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r338072692,338072692,src/wallet/wallet.cpp
achow101,2019-10-23 22:48:48,"To avoid overestimating on fees, maybe move `change_prototype_txout` and `change_output_size` setting into here?. Then set `change_output_size` to 0 below in the else block.",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r338313880,338313880,src/wallet/wallet.cpp
Sjors,2019-10-24 14:56:27,"Done, but I wasn't able to write a test that shows a difference. ",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r338623327,338623327,src/wallet/wallet.cpp
fjahr,2019-10-30 13:35:48,"`GetScriptForDestination(dest)` is called twice here if we can reserve a dest. I would optimize this slightly: \n\n```suggestion\n                if (!reservedest.GetReservedDestination(change_type, dest, true)) {\n                    strFailReason = _(""Can't generate a transaction without change. Please call keypoolrefill first."").translated;\n                }\n                scriptChange",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r340615439,340615439,src/wallet/wallet.cpp
fjahr,2019-10-30 13:40:32,"I think this error message is ambiguous: It could mean we can't generate a transaction with change without a change address because we can't get the dest. But it could also mean we can not generate a transaction that does not need a change at all. I could see my self thinking here: ""What do you mean? I have change in this tx!"".",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r340618350,340618350,src/wallet/wallet.cpp
luke-jr,2019-11-04 16:26:40,This seems unnecessary? How could it ever NOT be empty here?,https://github.com/bitcoin/bitcoin/pull/17219#discussion_r342142258,342142258,src/wallet/wallet.cpp
Sjors,2019-11-04 16:55:26,Removed. I added a potentially more useful assert below `scriptChange = GetScriptForDestination(dest);`,https://github.com/bitcoin/bitcoin/pull/17219#discussion_r342157746,342157746,src/wallet/wallet.cpp
Sjors,2019-11-04 16:55:27,"Changed to: `Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.`",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r342157753,342157753,src/wallet/wallet.cpp
Sjors,2019-11-04 16:55:30,Done,https://github.com/bitcoin/bitcoin/pull/17219#discussion_r342157780,342157780,src/wallet/wallet.cpp
fjahr,2020-02-02 18:15:08,I think L2634-2635 can be removed again. They are already declared in L2578-2579.,https://github.com/bitcoin/bitcoin/pull/17219#discussion_r373864657,373864657,src/wallet/wallet.cpp
Sjors,2020-02-04 10:27:07,"Odd, removed again.",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r374588579,374588579,src/wallet/wallet.cpp
achow101,2020-04-16 16:18:17,"It's not clear to me what this assert is checking for.\n\nIf `dest` is not empty, we got a change destination and so `scriptChange` is not empty. If dest is empty, then `scriptChange` will be empty. So this just covers all cases and can't fail?",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r409683229,409683229,src/wallet/wallet.cpp
Sjors,2020-04-17 08:31:12,"I can't remember why I wrote this, but I think the idea was to ensure `GetScriptForDestination()` returns an empty script for an empty destination. Perhaps that's overkill; I can drop it if there's any other changes needed in this PR.",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r410073296,410073296,src/wallet/wallet.cpp
achow101,2020-04-17 16:34:41,"I guess it's fine, but it just seems like useless code that might be confusing to future readers. I would suggest that it be removed in a followup that touches this code.",https://github.com/bitcoin/bitcoin/pull/17219#discussion_r410338333,410338333,src/wallet/wallet.cpp
