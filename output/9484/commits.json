[
  {
    "sha": "e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDQwYWM3ZWYzYjZmM2FkMWNkOGZjNzAyN2NlY2U0MDQxMzIwMmQ5",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-06T11:49:59Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-13T15:42:24Z"
      },
      "message": "Introduce assumevalid setting to skip presumed valid scripts.\n\nThis disentangles the script validation skipping from checkpoints.\n\nA new option is introduced \"assumevalid\" which specifies a block whos\n ancestors we assume all have valid scriptsigs and so we do not check\n them when they are also burried under the best header by two weeks\n worth of work.\n\nUnlike checkpoints this has no influence on consensus unless you set\n it to a block with an invalid history.  Because of this it can be\n easily be updated without risk of influencing the network consensus.\n\nThis results in a massive IBD speedup.\n\nThis approach was independently recommended by Peter Todd and Luke-Jr\n since POW based signature skipping (see PR#9180) does not have the\n verifiable properties of a specific hash and may create bad incentives.\n\nThe downside is that, like checkpoints, the defaults bitrot and older\n releases will sync slower.  On the plus side users can provide their\n own value here, and if they set it to something crazy all that will\n happen is more time will be spend validating signatures.\n\nCheckblocks and checklevel are also moved to the hidden debug options:\n Especially now that checkblocks has a low default there is little need\n to change these settings, and users frequently misunderstand them as\n influencing security or IBD speed.  By hiding them we offset the\n space added by this new option.",
      "tree": {
        "sha": "db3b4ef8fbd6a849fb3dd3df7921d950c8e910b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db3b4ef8fbd6a849fb3dd3df7921d950c8e910b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 75,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cb3f7934cedccf6c50fddd0811eced4cf785bec4",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -49,7 +49,7 @@ Low-level RPC changes\n   than two arguments.\n \n Removal of Priority Estimation\n-------------------------------\n+-------------------------------\n \n - Estimation of \"priority\" needed for a transaction to be included within a target\n   number of blocks has been removed.  The rpc calls are deprecated and will either\n@@ -71,6 +71,27 @@ P2P connection management\n \n - New connections to manually added peers are much faster.\n \n+Introduction of assumed-valid blocks\n+-------------------------------------\n+\n+- A significant portion of the initial block download time is spent verifying\n+  scripts/signatures.  Although the verification must pass to ensure the security\n+  of the system, no other result from this verification is needed: If the node\n+  knew the history of a given block were valid it could skip checking scripts\n+  for its ancestors.\n+\n+- A new configuration option 'assumevalid' is provided to express this knowledge\n+  to the software.  Unlike the 'checkpoints' in the past this setting does not\n+  force the use of a particular chain: chains that are consistent with it are\n+  processed quicker, but other chains are still accepted if they'd otherwise\n+  be chosen as best. Also unlike 'checkpoints' the user can configure which\n+  block history is assumed true, this means that even outdated software can\n+  sync more quickly if the setting is updated by the user.\n+\n+- Because the validity of a chain history is a simple objective fact it is much\n+  easier to review this setting.  As a result the software ships with a default\n+  value adjusted to match the current chain shortly before release.  The use\n+  of this default value can be disabled by setting -assumevalid=0\n \n 0.14.0 Change log\n ================="
      },
      {
        "sha": "399ed25c91569998c78ba6ad1085167ba3adc844",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -13,6 +13,11 @@ Before every minor and major release:\n * Update version in sources (see below)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n+* Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n+  - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n+  - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n+  - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n+     that causes rejection of blocks in the past history.\n \n Before every major release:\n "
      },
      {
        "sha": "d99f800f0a9d48214f58aa796c214a8a05f423c2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -99,6 +99,9 @@ class CMainParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n \n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2\"); //447235\n+\n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -201,6 +204,9 @@ class CTestNetParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n \n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x000000000871ee6842d3648317ccc8a435eb8cc3c2429aee94faff9ba26b05a0\"); //1043841\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -283,6 +289,9 @@ class CRegTestParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n \n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x00\");\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "3f98938f7ee2041695deef637eda97dcc2bf6cf6",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -62,6 +62,7 @@ struct Params {\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n+    uint256 defaultAssumeValid;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "877371b5d196dee0ee3820e1480bf2d447685cc8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -329,8 +329,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n-    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n+    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), Params(CBaseChainParams::MAIN).GetConsensus().defaultAssumeValid.GetHex(), Params(CBaseChainParams::TESTNET).GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -420,6 +419,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n     if (showDebug)\n     {\n+        strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n+        strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n         strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n@@ -920,6 +921,12 @@ bool AppInitParameterInteraction()\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n+    hashAssumeValid = uint256S(GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n+    if (!hashAssumeValid.IsNull())\n+        LogPrintf(\"Assuming ancestors of block %s have valid signatures.\\n\", hashAssumeValid.GetHex());\n+    else\n+        LogPrintf(\"Validating signatures for all blocks.\\n\");\n+\n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;"
      },
      {
        "sha": "69aa018730ed5b3f49d7dd48766a20d396b7ba13",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 9,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -78,6 +78,7 @@ uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n+uint256 hashAssumeValid;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -1389,11 +1390,10 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n         // Helps prevent CPU exhaustion attacks.\n \n-        // Skip ECDSA signature verification when connecting blocks before the\n-        // last block chain checkpoint. Assuming the checkpoints are valid this\n+        // Skip script verification when connecting blocks under the\n+        // assumedvalid block. Assuming the assumedvalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n-        // and any change will be caught at the next checkpoint. Of course, if\n-        // the checkpoint is for a chain that's invalid due to false scriptSigs\n+        // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n         if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n@@ -1721,11 +1721,28 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n \n     bool fScriptChecks = true;\n-    if (fCheckpointsEnabled) {\n-        CBlockIndex *pindexLastCheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());\n-        if (pindexLastCheckpoint && pindexLastCheckpoint->GetAncestor(pindex->nHeight) == pindex) {\n-            // This block is an ancestor of a checkpoint: disable script checks\n-            fScriptChecks = false;\n+    if (!hashAssumeValid.IsNull()) {\n+        // We've been configured with the hash of a block which has been externally verified to have a valid history.\n+        // A suitable default value is included with the software and updated from time to time.  Because validity\n+        //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n+        // This setting doesn't force the selection of any particular chain but makes validating some faster by\n+        //  effectively caching the result of part of the verification.\n+        BlockMap::const_iterator  it = mapBlockIndex.find(hashAssumeValid);\n+        if (it != mapBlockIndex.end()) {\n+            if (it->second->GetAncestor(pindex->nHeight) == pindex &&\n+                pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n+                pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+                // This block is a member of the assumed verified chain and an ancestor of the best header.\n+                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                //  into accepting an invalid block through telling users they must manually set assumevalid.\n+                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n+                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n+                //  that are hardly doing any signature verification at all in testing without having to\n+                //  artificially set the default assumed verified block further back.\n+                // The test against nMinimumChainWork prevents the skipping when denied access to any chain at\n+                //  least as good as the expected chain.\n+                fScriptChecks = (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, chainparams.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n+            }\n         }\n     }\n "
      },
      {
        "sha": "f66f690775af5d83e09b7797690354562c47b1cd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "patch": "@@ -186,6 +186,9 @@ extern CAmount maxTxFee;\n extern int64_t nMaxTipAge;\n extern bool fEnableReplacement;\n \n+/** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n+extern uint256 hashAssumeValid;\n+\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n "
      }
    ]
  },
  {
    "sha": "7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjVlM2ZlMGNjYjQzNDgyMTkyN2M5Y2MyZTlmMmZiMGQ3ZjAxZGM0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-13T19:23:59Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-14T22:17:23Z"
      },
      "message": "Add assumevalid testcase\n\nAdds a qa testcase testing the new \"-assumevalid\" option. The testcase builds\na chain that includes and invalid signature for one of the transactions and\nsends that chain to three nodes:\n\n - node0 has no -assumevalid parameter and rejects the invalid chain.\n - node1 has -assumevalid set and accepts the invalid chain.\n - node2 has -assumevalid set but the invalid block is not buried deep\n   enough to assume invalid, and so rejects the invalid chain.",
      "tree": {
        "sha": "b63cf89037cf2b2b57cf40322545f648f80184ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b63cf89037cf2b2b57cf40322545f648f80184ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 191,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e4bc22951b3944a28b89ecee349a637e6bc6cf69",
        "filename": "qa/rpc-tests/assumevalid.py",
        "status": "added",
        "additions": 191,
        "deletions": 0,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4/qa/rpc-tests/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4/qa/rpc-tests/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/assumevalid.py?ref=7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
        "patch": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+assumevalid.py\n+\n+Test logic for skipping signature validation on blocks which we've assumed\n+valid (https://github.com/bitcoin/bitcoin/pull/9484)\n+\n+We build a chain that includes and invalid signature for one of the\n+transactions:\n+\n+    0:        genesis block\n+    1:        block 1 with coinbase transaction output.\n+    2-101:    bury that block with 100 blocks so the coinbase transaction\n+              output can be spent\n+    102:      a block containing a transaction spending the coinbase\n+              transaction output. The transaction has an invalid signature. \n+    103-2202: bury the bad block with just over two weeks' worth of blocks\n+              (2100 blocks)\n+\n+Start three nodes:\n+\n+    - node0 has no -assumevalid parameter. Try to sync to block 2202. It will\n+      reject block 102 and only sync as far as block 101\n+    - node1 has -assumevalid set to the hash of block 102. Try to sync to\n+      block 2202. node1 will sync all the way to block 2202.\n+    - node2 has -assumevalid set to the hash of block 102. Try to sync to\n+      block 200. node2 will reject block 102 since it's assumed valid, but it\n+      isn't buried by at least two weeks' work.\n+'''\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.key import CECKey\n+from test_framework.script import *\n+\n+class BaseNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.last_inv = None\n+        self.last_headers = None\n+        self.last_block = None\n+        self.last_getdata = None\n+        self.block_announced = False\n+        self.last_getheaders = None\n+        self.disconnected = False\n+        self.last_blockhash_announced = None\n+\n+    def on_close(self, conn):\n+        self.disconnected = True\n+\n+    def wait_for_disconnect(self, timeout=60):\n+        test_function = lambda: self.disconnected\n+        assert(wait_until(test_function, timeout=timeout))\n+        return\n+\n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n+        self.send_message(headers_message)\n+\n+class SendHeadersTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        # Start node0. We don't start the other nodes yet since\n+        # we need to pre-mine a block with an invalid transaction\n+        # signature so we can pass in the block hash as assumevalid.\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+\n+    def run_test(self):\n+\n+        # Connect to node0\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+        node0.wait_for_verack()\n+\n+        # Build the blockchain\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        self.blocks = []\n+\n+        # Get a pubkey for the coinbase TXO\n+        coinbase_key = CECKey()\n+        coinbase_key.set_secretbytes(b\"horsebattery\")\n+        coinbase_pubkey = coinbase_key.get_pubkey()\n+\n+        # Create the first block with a coinbase output to our key\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height, coinbase_pubkey), self.block_time)\n+        self.blocks.append(block)\n+        self.block_time += 1\n+        block.solve()\n+        # Save the coinbase for later\n+        self.block1 = block\n+        self.tip = block.sha256\n+        height += 1\n+\n+        # Bury the block 100 deep so the coinbase output is spendable\n+        for i in range(100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            self.blocks.append(block)\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            height += 1\n+\n+        # Create a transaction spending the coinbase output with an invalid (null) signature\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.block1.vtx[0].sha256, 0), scriptSig=b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        block102 = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block102.vtx.extend([tx])\n+        block102.hashMerkleRoot = block102.calc_merkle_root()\n+        block102.rehash()\n+        block102.solve()\n+        self.blocks.append(block102)\n+        self.tip = block102.sha256\n+        self.block_time += 1\n+        height += 1\n+\n+        # Bury the assumed valid block 2100 deep\n+        for i in range(2100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.nVersion = 4\n+            block.solve()\n+            self.blocks.append(block)\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            height += 1\n+\n+        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n+        self.nodes.append(start_node(1, self.options.tmpdir,\n+                                     [\"-debug\", \"-assumevalid=\" + hex(block102.sha256)]))\n+        node1 = BaseNode()  # connects to node1\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n+        node1.add_connection(connections[1])\n+        node1.wait_for_verack()\n+\n+        self.nodes.append(start_node(2, self.options.tmpdir,\n+                                     [\"-debug\", \"-assumevalid=\" + hex(block102.sha256)]))\n+        node2 = BaseNode()  # connects to node2\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[2])\n+        node2.wait_for_verack()\n+\n+        # send header lists to all three nodes\n+        node0.send_header_for_blocks(self.blocks[0:2000])\n+        node0.send_header_for_blocks(self.blocks[2000:])\n+        node1.send_header_for_blocks(self.blocks[0:2000])\n+        node1.send_header_for_blocks(self.blocks[2000:])\n+        node2.send_header_for_blocks(self.blocks[0:200])\n+\n+        # Send 102 blocks to node0. Block 102 will be rejected.\n+        for i in range(101):\n+            node0.send_message(msg_block(self.blocks[i]))\n+        node0.sync_with_ping() # make sure the most recent block is synced\n+        node0.send_message(msg_block(self.blocks[101]))\n+        assert_equal(self.nodes[0].getblock(self.nodes[0].getbestblockhash())['height'], 101)\n+\n+        # Send 3102 blocks to node1. All blocks will be accepted.\n+        for i in range(2202):\n+            node1.send_message(msg_block(self.blocks[i]))\n+        node1.sync_with_ping() # make sure the most recent block is synced\n+        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+\n+        # Send 102 blocks to node2. Block 102 will be rejected.\n+        for i in range(101):\n+            node2.send_message(msg_block(self.blocks[i]))\n+        node2.sync_with_ping() # make sure the most recent block is synced\n+        node2.send_message(msg_block(self.blocks[101]))\n+        assert_equal(self.nodes[2].getblock(self.nodes[2].getbestblockhash())['height'], 101)\n+\n+if __name__ == '__main__':\n+    SendHeadersTest().main()"
      }
    ]
  }
]