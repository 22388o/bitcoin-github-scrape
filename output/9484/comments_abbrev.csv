gmaxwell,2017-01-06T23:23:19Z,"par=4 chainstate reindex with dbcache 2000 goes from 6.15 hours to 2.96 hours. \n\n@petertodd  I know you had a reservation about keeping the default in chainparams but we also have a number of other similar heuristics there (such as bip34 height, total work in the best chain, various flags). I'd suggest in the future we should move those more policy like things into their own section of chain p",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-271037343,271037343,
luke-jr,2017-01-07T23:33:24Z,"> if they set it to something crazy all that will happen is more time will be spend validating signatures.\n\nThat's not the worst-case scenario. They *could* set it to a block with invalid scripts in the history, which would break from consensus. I do think this is an acceptable risk, but maybe should get at least some warning.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-271117811,271117811,
gmaxwell,2017-01-08T00:03:10Z,"@luke-jr yes but only if it is buried by a week (in current code), which is the reason for that additional test.  The logprint that it's assuming valid was my warning.. but if you'd like to suggest something more...\n",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-271119212,271119212,
sipa,2017-01-11T23:09:51Z,utACK 739983db5dd799424738bc752eee7721fc94f1fb,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272025362,272025362,
theuni,2017-01-12T01:20:24Z,utACK 739983db5dd799424738bc752eee7721fc94f1fb. I like the approach as well.,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272048299,272048299,
jnewbery,2017-01-12T16:24:27Z,"Looks good to me. I'm going to try to write a test case.\n\nOne comment: please remove or update the comment in `CheckInputs()` (validation.cpp, line 1392):\n\n```\n        // Skip ECDSA signature verification when connecting blocks before the\n        // last block chain checkpoint. Assuming the checkpoints are valid this\n        // is safe because block merkle hashes are still computed a",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272209087,272209087,
jtimon,2017-01-12T21:05:29Z,"utACK 739983d modulo small nits that I guess can be fixed later.\n",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272283219,272283219,
TheBlueMatt,2017-01-12T23:11:21Z,"utACK 739983db5dd799424738bc752eee7721fc94f1fb if we change the time for comparison to anything above 2 weeks, though open to further discussion on IRC.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272313588,272313588,
TheBlueMatt,2017-01-12T23:35:54Z,"Another thing that just occurred to me - do we want -checkpoints=0 to imply -assumevalid=0? They seem rather equivalent in usage.\n\nOn January 12, 2017 3:09:16 PM PST, ""Jorge Tim√≥n"" <notifications@github.com> wrote:\n>jtimon commented on this pull request.\n>\n>\n>\n>> +        // We've been configured with the hash of a block which has\n>been externally verified to have a valid history.\n>+     ",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272318342,272318342,
TheBlueMatt,2017-01-12T23:39:14Z,"Actually I vote no - we dont need more parameter interactions and if folks are using -checkpoints=0 to avoid trusting the software they're running without reading the changelog (or the realease notes), then they're really not getting what they want. But others might have a different view?",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272318952,272318952,
fanquake,2017-01-13T08:55:35Z,"Tested this with -reindex-chainstate -dbcache=4096 -par=8\nReindex time to 447885 was 2h12m.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272392438,272392438,
gmaxwell,2017-01-13T15:24:43Z,"Updated, added a test against nMinimumChainWork to address some concerns, and moved the depth check to two weeks to satisfy Matt. I think it's overkill (and it would be better to have some different sanity checks) but it could be reduced in the future; and it's still better than we are now.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272469033,272469033,
instagibbs,2017-01-13T16:42:07Z,"utACK e440ac7ef3b6f3ad1cd8fc7027cece40413202d9\n\nTravis may need a kick",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272484348,272484348,
TheBlueMatt,2017-01-13T17:07:41Z,utACK e440ac7ef3b6f3ad1cd8fc7027cece40413202d9,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272491011,272491011,
morcos,2017-01-13T17:12:53Z,"utACK e440ac7 , will also try to find time to test",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272492351,272492351,
jnewbery,2017-01-13T21:05:34Z,"tested ACK.\n\nI've written a new qa testcase that exercises the assumevalid parameter here: https://github.com/jnewbery/bitcoin/commit/fffb047ecf838ca4ccce1dc1347263aef8e90cda\n\nTests:\n- without assumevalid we reject a chain containing a transaction with an invalid signature\n- with assumevalid we reject a chain containing a transaction with an invalid signature where the invalid signatur",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272547796,272547796,
theuni,2017-01-14T02:55:34Z,Edit: ACK.,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272596456,272596456,
sipa,2017-01-14T03:44:03Z,Please include @jnewbery's tests.,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272599115,272599115,
gmaxwell,2017-01-14T22:19:40Z,"Neat tests, I was surprised at how small it is for what it does.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272657450,272657450,
sipa,2017-01-15T17:47:45Z,utACK 7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272711136,272711136,
morcos,2017-01-15T19:01:28Z,"did some additional light testing...  still ACK\n",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272715731,272715731,
sipa,2017-01-16T21:35:20Z,"Tested a full reindex together with #9512 with asan/lsan/ubsan, all good.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272967332,272967332,
btcdrak,2017-01-17T09:19:34Z,utACK 7b5e3fe,https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-273062122,273062122,
sipa,2017-01-21T15:26:25Z,"@rebroad The reasoning is that people are already relying on peer review to make sure the consensus logic isn't being changed (which could also lead to invalid blocks being accepted), and that is much harder than checking whether a single block hash is part of a valid chain. This is different from chrckpoints, which do have an effect beyond skipping validation, and need much more careful choosing.",https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-274268159,274268159,
TheBlueMatt,2017-01-07T19:06:00Z,"I assume when you saiy ""set the value two blocks back"" you mean ""set the value two blocks back from the tip at around the time rcs begin, so that it is a month back when release actually happens""?",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95063846,95063846,doc/release-process.md
TheBlueMatt,2017-01-07T19:11:15Z,Is there any meaningful difference here between a month and a week? (let the bikeshedding begin!).,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95063927,95063927,src/validation.cpp
gmaxwell,2017-01-07T22:20:56Z,"I don't think so. I picked a week here because (1) that is the minimum time in our process between an RC and a release and (2) I think two days is likely sufficient for the purpose in the comment-- enough time for a widespread public response.\n\nBut if people preferred a month, that would be okay too.  I was half expecting this test to get bikesheded out rather than cranked up. \n\nOne downsi",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95066939,95066939,src/validation.cpp
gmaxwell,2017-01-07T22:23:43Z,"I don't _intend_ for it to be a month back at the release. There is no reason to set it back at all _except_ that  if the block falls out of the chain the speedup will be lost.  Another possiblity would be to advise setting it at the tip with a note that it must be fixed if the block falls out of the chain.\n\nI also don't see a reason that this couldn't be updated at the last RC or even between",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95066977,95066977,doc/release-process.md
TheBlueMatt,2017-01-07T23:19:09Z,"Hum, at the risk of overdesign, I'd be ok with only a week or so if the user explicitly specified a trust anchor, but for default-release, I'm afraid a week isnt all that long in the context of relying on widespread public outcry to prevent failures.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95067847,95067847,src/validation.cpp
TheBlueMatt,2017-01-07T23:20:05Z,"OK. Fair enough, though I disagree that it should be allowed to change pre-release post-rc...for a parameter like this we really want lots of eyes and a few days of letting people reindex prior to release.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95067870,95067870,doc/release-process.md
luke-jr,2017-01-07T23:32:12Z,"> There is no reason to set it back at all except that if the block falls out of the chain the speedup will be lost.\n\nNote we *could* make it smart enough to see the common parent block, but I'm not sure it's worth the additional effort.\n\n> I also don't see a reason that this couldn't be updated at the last RC or even between an RC and a release. In general we should set it as far forward ",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95068010,95068010,doc/release-process.md
gmaxwell,2017-01-08T01:02:33Z,"You're concerned about it with respect to the default? I don't think that makes sense: It's correct or it isn't and stepping a few blocks back there doesn't make it more correct. If not for the extra complexity and the benefit that block validation gets better tested in the RC cycle I would have exempted the default from this test.\n\nIf the review process won't catch an invalid block in the cha",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95069256,95069256,src/validation.cpp
robmcl4,2017-01-09T05:34:56Z,"This seems to result in an out-of-bounds memory access when `-assumevalid=` (with no value) is supplied. `uint256S(..)` invokes `base_blob::SetHex(const char *)`, which assumes a supplied length of at least 1. An out-of-bounds access then occurs at [src/uint256.cpp:39](https://github.com/bitcoin/bitcoin/blob/c0ddd32bf629bb48426b0651def497ca1a78e6b1/src/uint256.cpp#L39).",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95103944,95103944,src/init.cpp
gmaxwell,2017-01-09T10:59:19Z,"GetArg returns a std:string, base_blob<BITS>::SetHex(const std::string& str) invokes c_str() on the pinput and calls the c_str argumented version (which is null terminated). On a zero length input the input array with be pointer to a null byte. This will fail the psz[0] == '0' (note the quotes). No out of bounds access will occur on line 39 (nor below).  What am I misreading?",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95135183,95135183,src/init.cpp
robmcl4,2017-01-09T13:11:33Z,"Oh of course, the short-circuit eval there slipped my mind. Never mind, all good!",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95152093,95152093,src/init.cpp
sipa,2017-01-09T22:23:41Z,knowledge,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95260531,95260531,doc/release-notes.md
sipa,2017-01-09T22:26:57Z,Do we use `_text_` anywhere else in the help output? It seems a bit strange.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95261194,95261194,src/init.cpp
sipa,2017-01-09T22:42:43Z,"This seems weird. You're checking\n* Whether the to-be-connected block is an ancestor of the assumed-valid block.\n* Whether a specific headers chain is at least a week ahead of the to-be-connected block.\n\nThere is no guarantee however that `pindexBestHeader` descends from the to-be-connected block, so what is the relevance of it here?",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95263755,95263755,src/validation.cpp
sipa,2017-01-09T22:43:00Z,whose,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95263801,95263801,src/validation.h
sipa,2017-01-09T22:43:19Z,significant,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95263855,95263855,doc/release-notes.md
sipa,2017-01-09T22:45:15Z,Maybe list the height/time of that block in a comment?,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95264178,95264178,src/chainparams.cpp
gmaxwell,2017-01-10T03:43:53Z,fixed.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95295976,95295976,doc/release-notes.md
gmaxwell,2017-01-10T03:43:58Z,fixed.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95295983,95295983,doc/release-notes.md
gmaxwell,2017-01-10T03:44:09Z,removed.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95295995,95295995,src/init.cpp
gmaxwell,2017-01-10T03:44:19Z,fixed.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95296005,95296005,src/validation.h
gmaxwell,2017-01-10T03:44:38Z,added height. I'm trying to not make the update procedure too much work.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95296031,95296031,src/chainparams.cpp
gmaxwell,2017-01-10T20:15:17Z,"Okay, fixed, I also require the block to be an ancestor of the BestHeader.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95447674,95447674,src/validation.cpp
jtimon,2017-01-12T20:08:52Z,"This can be in CChainParams instead of Consensus::Params, which is the consensus ""section of chainparams"".",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95874086,95874086,src/consensus/params.h
jtimon,2017-01-12T20:50:08Z,unlike with 'checkpoints'?,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95881703,95881703,doc/release-notes.md
jtimon,2017-01-12T20:54:19Z,"Perhaps add ""To avoid releasing software with a 'too recent' default 'assumevalid', checks will never be skipped for blocks that are only a week or less away from the most-work known tip."". Or something of the sort.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95882467,95882467,doc/release-notes.md
jtimon,2017-01-12T20:55:37Z,```pindexBestHeader->GetAncestor(pindex->nHeight) == pindex``` could be moved to first if. Maybe with no gain and perhaps this is clearer.,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95882695,95882695,src/validation.cpp
jtimon,2017-01-12T21:00:54Z,"~~I personally don't like this part. I think it's simpler to just ""artificially set the default assumed verified block further back"", don't see that as a big deal. But no strong opinion, if that's a concern, the solution seems good.~~",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95883683,95883683,src/validation.cpp
jtimon,2017-01-12T22:45:49Z,"Nah, I'm now convinced about using the mechanism, but not ""To avoid releasing software with a 'too recent' default 'assumevalid'"", rather ""To avoid using being fooled with too recent invalid 'assumevalid'"".",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95902771,95902771,doc/release-notes.md
jtimon,2017-01-12T23:09:12Z,"Micro-nit: regardless of the value chosen, ```60 * 60 * 24 * 7``` could use a const or #define.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r95906450,95906450,src/validation.cpp
gmaxwell,2017-01-13T15:09:36Z,"I don't think the fine details of the implementation are of general interest for the release nodes. If people think this is less secure than it is -- thats not the end of the world, and a separate FAQ would be fine if there is confusion/concern.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96012580,96012580,doc/release-notes.md
gmaxwell,2017-01-13T15:10:48Z,"That test should pretty much never fail, so it runs later to avoid wasting time trying it for blocks past the assumedvalid point.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96012837,96012837,src/validation.cpp
jnewbery,2017-01-13T15:32:55Z,nit: s/the that/that the,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96017188,96017188,src/validation.cpp
gmaxwell,2017-01-13T15:42:43Z,fixed,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96019162,96019162,src/validation.cpp
sdaftuar,2017-01-13T22:27:54Z,ACK 0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96086460,96086460,src/chainparams.cpp
sipa,2017-01-15T17:46:37Z,ACK 0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96143479,96143479,src/chainparams.cpp
instagibbs,2017-01-16T21:37:03Z,ACK 0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96308669,96308669,src/chainparams.cpp
theuni,2017-01-16T22:15:43Z,post-merge ACK 0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96313301,96313301,src/chainparams.cpp
rebroad,2017-01-18T01:47:54Z,?,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96553224,96553224,doc/release-notes.md
rebroad,2017-01-18T01:49:43Z,"ACK the block, but NACK making this on by default. I love the feature, but I think there needs to be express consent by the user to avoid setting a potentially dangerous precedent.  Also, it would be nice to allow the user to stipulate their own block by which to do this - perhaps they trust a particular node on the network and would based their block chosen on that.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96553427,96553427,src/chainparams.cpp
rebroad,2017-01-18T01:51:52Z,no longer ECDSA?,https://github.com/bitcoin/bitcoin/pull/9484#discussion_r96553672,96553672,src/validation.cpp
sipa,2017-01-21T00:28:28Z,"Script verification includes ECDSA verification, but does much more.",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r97181715,97181715,src/validation.cpp
MarcoFalke,2017-01-21T11:17:49Z,"@rebroad This is possible, please read the docs. Also, if you are unsure about the block hash, you can always set -noassumevalid",https://github.com/bitcoin/bitcoin/pull/9484#discussion_r97196402,97196402,src/chainparams.cpp
