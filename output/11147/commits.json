[
  {
    "sha": "f227e775dc5071da163959f39c205782e1056bd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjI3ZTc3NWRjNTA3MWRhMTYzOTU5ZjM5YzIwNTc4MmUxMDU2YmQy",
    "commit": {
      "author": {
        "name": "lastbattle",
        "email": "twilight-ofthepast@live.com",
        "date": "2017-06-17T17:18:45Z"
      },
      "committer": {
        "name": "lastbattle",
        "email": "twilight-ofthepast@live.com",
        "date": "2017-06-17T17:18:45Z"
      },
      "message": "Merge remote-tracking branch 'refs/remotes/bitcoin/master'",
      "tree": {
        "sha": "caf2211861bc7da04768cb11e79b8e6860176559",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf2211861bc7da04768cb11e79b8e6860176559"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f227e775dc5071da163959f39c205782e1056bd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f227e775dc5071da163959f39c205782e1056bd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f227e775dc5071da163959f39c205782e1056bd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f227e775dc5071da163959f39c205782e1056bd2/comments",
    "author": {
      "login": "lastbattle",
      "id": 4586194,
      "node_id": "MDQ6VXNlcjQ1ODYxOTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4586194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lastbattle",
      "html_url": "https://github.com/lastbattle",
      "followers_url": "https://api.github.com/users/lastbattle/followers",
      "following_url": "https://api.github.com/users/lastbattle/following{/other_user}",
      "gists_url": "https://api.github.com/users/lastbattle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lastbattle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lastbattle/subscriptions",
      "organizations_url": "https://api.github.com/users/lastbattle/orgs",
      "repos_url": "https://api.github.com/users/lastbattle/repos",
      "events_url": "https://api.github.com/users/lastbattle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lastbattle/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lastbattle",
      "id": 4586194,
      "node_id": "MDQ6VXNlcjQ1ODYxOTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4586194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lastbattle",
      "html_url": "https://github.com/lastbattle",
      "followers_url": "https://api.github.com/users/lastbattle/followers",
      "following_url": "https://api.github.com/users/lastbattle/following{/other_user}",
      "gists_url": "https://api.github.com/users/lastbattle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lastbattle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lastbattle/subscriptions",
      "organizations_url": "https://api.github.com/users/lastbattle/orgs",
      "repos_url": "https://api.github.com/users/lastbattle/repos",
      "events_url": "https://api.github.com/users/lastbattle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lastbattle/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228c319a944b0ba7c835b1909ee1c2056c652eb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228c319a944b0ba7c835b1909ee1c2056c652eb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228c319a944b0ba7c835b1909ee1c2056c652eb1"
      },
      {
        "sha": "cafe24f039e117d53288387c2720f44f27deecd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cafe24f039e117d53288387c2720f44f27deecd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cafe24f039e117d53288387c2720f44f27deecd0"
      }
    ],
    "stats": {
      "total": 204,
      "additions": 154,
      "deletions": 50
    },
    "files": [
      {
        "sha": "5918819d13519a7c7734d2e1ac28ca7b20078898",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -47,6 +47,6 @@ SpacesInAngles:  false\n SpacesInContainerLiterals: true\n SpacesInCStyleCastParentheses: false\n SpacesInParentheses: false\n-Standard:        Cpp03\n+Standard:        Cpp11\n TabWidth:        8\n UseTab:          Never"
      },
      {
        "sha": "771491770ed89c18e6ac31cd4b736486e41ae979",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 22,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -16,6 +16,26 @@\n \n static constexpr double INF_FEERATE = 1e99;\n \n+std::string StringForFeeReason(FeeReason reason) {\n+    static const std::map<FeeReason, std::string> fee_reason_strings = {\n+        {FeeReason::NONE, \"None\"},\n+        {FeeReason::HALF_ESTIMATE, \"Half Target 60% Threshold\"},\n+        {FeeReason::FULL_ESTIMATE, \"Target 85% Threshold\"},\n+        {FeeReason::DOUBLE_ESTIMATE, \"Double Target 95% Threshold\"},\n+        {FeeReason::CONSERVATIVE, \"Conservative Double Target longer horizon\"},\n+        {FeeReason::MEMPOOL_MIN, \"Mempool Min Fee\"},\n+        {FeeReason::PAYTXFEE, \"PayTxFee set\"},\n+        {FeeReason::FALLBACK, \"Fallback fee\"},\n+        {FeeReason::REQUIRED, \"Minimum Required Fee\"},\n+        {FeeReason::MAXTXFEE, \"MaxTxFee limit\"}\n+    };\n+    auto reason_string = fee_reason_strings.find(reason);\n+\n+    if (reason_string == fee_reason_strings.end()) return \"Unknown\";\n+\n+    return reason_string->second;\n+}\n+\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their\n@@ -698,31 +718,36 @@ unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n  * time horizon which tracks confirmations up to the desired target.  If\n  * checkShorterHorizon is requested, also allow short time horizon estimates\n  * for a lower target to reduce the given answer */\n-double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon) const\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const\n {\n     double estimate = -1;\n     if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n         // Find estimate from shortest time horizon possible\n         if (confTarget <= shortStats->GetMaxConfirms()) { // short horizon\n-            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight, result);\n         }\n         else if (confTarget <= feeStats->GetMaxConfirms()) { // medium horizon\n-            estimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+            estimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight, result);\n         }\n         else { // long horizon\n-            estimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+            estimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight, result);\n         }\n         if (checkShorterHorizon) {\n+            EstimationResult tempResult;\n             // If a lower confTarget from a more recent horizon returns a lower answer use it.\n             if (confTarget > feeStats->GetMaxConfirms()) {\n-                double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n-                if (medMax > 0 && (estimate == -1 || medMax < estimate))\n+                double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight, &tempResult);\n+                if (medMax > 0 && (estimate == -1 || medMax < estimate)) {\n                     estimate = medMax;\n+                    if (result) *result = tempResult;\n+                }\n             }\n             if (confTarget > shortStats->GetMaxConfirms()) {\n-                double shortMax = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n-                if (shortMax > 0 && (estimate == -1 || shortMax < estimate))\n+                double shortMax = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight, &tempResult);\n+                if (shortMax > 0 && (estimate == -1 || shortMax < estimate)) {\n                     estimate = shortMax;\n+                    if (result) *result = tempResult;\n+                }\n             }\n         }\n     }\n@@ -732,16 +757,18 @@ double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, doubl\n /** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n  * at 2 * target for any longer time horizons.\n  */\n-double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const\n {\n     double estimate = -1;\n+    EstimationResult tempResult;\n     if (doubleTarget <= shortStats->GetMaxConfirms()) {\n-        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight, result);\n     }\n     if (doubleTarget <= feeStats->GetMaxConfirms()) {\n-        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight, &tempResult);\n         if (longEstimate > estimate) {\n             estimate = longEstimate;\n+            if (result) *result = tempResult;\n         }\n     }\n     return estimate;\n@@ -754,12 +781,15 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget)\n  * estimates, however, required the 95% threshold at 2 * target be met for any\n  * longer time horizons also.\n  */\n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const\n {\n-    if (answerFoundAtTarget)\n-        *answerFoundAtTarget = confTarget;\n+    if (feeCalc) {\n+        feeCalc->desiredTarget = confTarget;\n+        feeCalc->returnedTarget = confTarget;\n+    }\n \n     double median = -1;\n+    EstimationResult tempResult;\n     {\n         LOCK(cs_feeEstimator);\n \n@@ -780,7 +810,6 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         }\n \n         assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n-\n         /** true is passed to estimateCombined fee for target/2 and target so\n          * that we check the max confirms for shorter time horizons as well.\n          * This is necessary to preserve monotonically increasing estimates.\n@@ -791,32 +820,49 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n          * the purpose of conservative estimates is not to let short term\n          * fluctuations lower our estimates by too much.\n          */\n-        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true);\n-        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true);\n-        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative);\n+        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+        if (feeCalc) {\n+            feeCalc->est = tempResult;\n+            feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+        }\n         median = halfEst;\n+        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n         if (actualEst > median) {\n             median = actualEst;\n+            if (feeCalc) {\n+                feeCalc->est = tempResult;\n+                feeCalc->reason = FeeReason::FULL_ESTIMATE;\n+            }\n         }\n+        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n         if (doubleEst > median) {\n             median = doubleEst;\n+            if (feeCalc) {\n+                feeCalc->est = tempResult;\n+                feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n+            }\n         }\n \n         if (conservative || median == -1) {\n-            double consEst =  estimateConservativeFee(2 * confTarget);\n+            double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n             if (consEst > median) {\n                 median = consEst;\n+                if (feeCalc) {\n+                    feeCalc->est = tempResult;\n+                    feeCalc->reason = FeeReason::CONSERVATIVE;\n+                }\n             }\n         }\n     } // Must unlock cs_feeEstimator before taking mempool locks\n \n-    if (answerFoundAtTarget)\n-        *answerFoundAtTarget = confTarget;\n+    if (feeCalc) feeCalc->returnedTarget = confTarget;\n \n     // If mempool is limiting txs , return at least the min feerate from the mempool\n     CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-    if (minPoolFee > 0 && minPoolFee > median)\n+    if (minPoolFee > 0 && minPoolFee > median) {\n+        if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n         return CFeeRate(minPoolFee);\n+    }\n \n     if (median < 0)\n         return CFeeRate(0);"
      },
      {
        "sha": "7125a74f0340631acb01ba427032615ea049e794",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -74,6 +74,22 @@ enum FeeEstimateHorizon {\n     LONG_HALFLIFE = 2\n };\n \n+/* Enumeration of reason for returned fee estimate */\n+enum class FeeReason {\n+    NONE,\n+    HALF_ESTIMATE,\n+    FULL_ESTIMATE,\n+    DOUBLE_ESTIMATE,\n+    CONSERVATIVE,\n+    MEMPOOL_MIN,\n+    PAYTXFEE,\n+    FALLBACK,\n+    REQUIRED,\n+    MAXTXFEE,\n+};\n+\n+std::string StringForFeeReason(FeeReason reason);\n+\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {\n@@ -90,8 +106,16 @@ struct EstimationResult\n {\n     EstimatorBucket pass;\n     EstimatorBucket fail;\n-    double decay;\n-    unsigned int scale;\n+    double decay = 0;\n+    unsigned int scale = 0;\n+};\n+\n+struct FeeCalculation\n+{\n+    EstimationResult est;\n+    FeeReason reason = FeeReason::NONE;\n+    int desiredTarget = 0;\n+    int returnedTarget = 0;\n };\n \n /**\n@@ -173,7 +197,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative = true) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative = true) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about\n@@ -223,9 +247,9 @@ class CBlockPolicyEstimator\n     bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n \n     /** Helper for estimateSmartFee */\n-    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon) const;\n+    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const;\n     /** Helper for estimateSmartFee */\n-    double estimateConservativeFee(unsigned int doubleTarget) const;\n+    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const;\n     /** Number of blocks of data recorded while fee estimates have been running */\n     unsigned int BlockSpan() const;\n     /** Number of blocks of recorded fee estimate data represented in saved data file */"
      },
      {
        "sha": "b9da48ee1d25c2b1cec731dcbda3104a313787ab",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -510,7 +510,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, ::mempool, ::feeEstimator);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator);\n \n         if (nPayAmount > 0)\n         {\n@@ -588,7 +588,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(nTxConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "12d2d0f31cd923f9a9843f2186c5856b4ed49cc4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -651,8 +651,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n-    int estimateFoundAtBlocks = nBlocksToConfirm;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks, ::mempool);\n+    FeeCalculation feeCalc;\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n@@ -670,7 +670,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n                                                                 std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n-        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n+        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", feeCalc.returnedTarget));\n         ui->fallbackFeeWarningLabel->setVisible(false);\n     }\n \n@@ -822,6 +822,12 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n+    if (ui->radioSmartFee->isChecked()) {\n+        CoinControlDialog::coinControl->nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n+    } else {\n+        CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n+    }\n+\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());"
      },
      {
        "sha": "67efc7d945a5a6a093c86c61b39dc8742684e9e0",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -72,10 +72,16 @@ static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n static void RDRandInit()\n {\n-    //! When calling cpuid function #1, ecx register will have this set if RDRAND is available.\n+    uint32_t eax, ecx, edx;\n+#if defined(__i386__) && ( defined(__PIC__) || defined(__PIE__))\n     // Avoid clobbering ebx, as that is used for PIC on x86.\n-    uint32_t eax, tmp, ecx, edx;\n+    uint32_t tmp;\n     __asm__ (\"mov %%ebx, %1; cpuid; mov %1, %%ebx\": \"=a\"(eax), \"=g\"(tmp), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n+#else\n+    uint32_t ebx;\n+    __asm__ (\"cpuid\": \"=a\"(eax), \"=b\"(ebx), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n+#endif\n+    //! When calling cpuid function #1, ecx register will have this set if RDRAND is available.\n     if (ecx & CPUID_F1_ECX_RDRAND) {\n         LogPrintf(\"Using RdRand as entropy source\\n\");\n         rdrand_supported = true;"
      },
      {
        "sha": "3b212dc0e440db33eefc3807a689a555acd14f3e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -867,10 +867,10 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n+    FeeCalculation feeCalc;\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"blocks\", answerFound));\n+    result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;\n }\n "
      },
      {
        "sha": "eb0722cd81c0cf65f24e34b7a553382e30e6893e",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -376,8 +376,10 @@ static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size\n     while ((n=fread(buffer, 1, sizeof(buffer), f)) > 0) {\n         // Check for reading errors so we don't return any data if we couldn't\n         // read the entire file (or up to maxsize)\n-        if (ferror(f))\n+        if (ferror(f)) {\n+            fclose(f);\n             return std::make_pair(false,\"\");\n+        }\n         retval.append(buffer, buffer+n);\n         if (retval.size() > maxsize)\n             break;"
      },
      {
        "sha": "6a9e6cf9ffbdfe01334f3d2691ff92e826eb5ac9",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -165,7 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, ignoreGlobalPayTxFee);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr, ignoreGlobalPayTxFee);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "2c5c38eb947cae2541921d97c80dafc0d8eb0a71",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -2534,7 +2534,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n     assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n-\n+    FeeCalculation feeCalc;\n+    unsigned int nBytes;\n     {\n         std::set<CInputCoin> setCoins;\n         LOCK2(cs_main, cs_wallet);\n@@ -2706,7 +2707,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     return false;\n                 }\n \n-                unsigned int nBytes = GetVirtualTransactionSize(txNew);\n+                nBytes = GetVirtualTransactionSize(txNew);\n \n                 CTransaction txNewConst(txNew);\n \n@@ -2721,7 +2722,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n \n@@ -2818,6 +2819,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             return false;\n         }\n     }\n+\n+    LogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n+              nFeeRet, nBytes, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n+              feeCalc.est.pass.start, feeCalc.est.pass.end,\n+              100 * feeCalc.est.pass.withinTarget / (feeCalc.est.pass.totalConfirmed + feeCalc.est.pass.inMempool + feeCalc.est.pass.leftMempool),\n+              feeCalc.est.pass.withinTarget, feeCalc.est.pass.totalConfirmed, feeCalc.est.pass.inMempool, feeCalc.est.pass.leftMempool,\n+              feeCalc.est.fail.start, feeCalc.est.fail.end,\n+              100 * feeCalc.est.fail.withinTarget / (feeCalc.est.fail.totalConfirmed + feeCalc.est.fail.inMempool + feeCalc.est.fail.leftMempool),\n+              feeCalc.est.fail.withinTarget, feeCalc.est.fail.totalConfirmed, feeCalc.est.fail.inMempool, feeCalc.est.fail.leftMempool);\n     return true;\n }\n \n@@ -2893,23 +2903,32 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreGlobalPayTxFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee)\n {\n     // payTxFee is the user-set global for desired feerate\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        int estimateFoundTarget = nConfirmTarget;\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, &estimateFoundTarget, pool).GetFee(nTxBytes);\n+        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, true).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n-        if (nFeeNeeded == 0)\n+        if (nFeeNeeded == 0) {\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n+            if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n+        }\n+    } else {\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n     }\n     // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n+    CAmount requiredFee = GetRequiredFee(nTxBytes);\n+    if (requiredFee > nFeeNeeded) {\n+        nFeeNeeded = requiredFee;\n+        if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n+    }\n     // But always obey the maximum\n-    if (nFeeNeeded > maxTxFee)\n+    if (nFeeNeeded > maxTxFee) {\n         nFeeNeeded = maxTxFee;\n+        if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n+    }\n     return nFeeNeeded;\n }\n "
      },
      {
        "sha": "ad606b8535c5a7ffbcffdc43043266c0d3580a76",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f227e775dc5071da163959f39c205782e1056bd2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f227e775dc5071da163959f39c205782e1056bd2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f227e775dc5071da163959f39c205782e1056bd2",
        "patch": "@@ -77,6 +77,7 @@ class CScheduler;\n class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n+struct FeeCalculation;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n@@ -959,7 +960,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreGlobalPayTxFee = false);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  }
]