[
  {
    "sha": "50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGJkMTJjZTBjNDllNTc0YTViYWYxYThkZjNhNjY3ODEwYzZhZDFl",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-12-11T04:39:26Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-05T19:02:09Z"
      },
      "message": "Break addnode out from the outbound connection limits.\n\nPreviously addnodes were in competition with outbound connections\n for access to the eight outbound slots.\n\nOne result of this is that frequently a node with several addnode\n configured peers would end up connected to none of them, because\n while the addnode loop was in its two minute sleep the automatic\n connection logic would fill any free slots with random peers.\n This is particularly unwelcome to users trying to maintain links\n to specific nodes for fast block relay or purposes.\n\nAnother result is that a group of nine or more nodes which are\n have addnode configured towards each other can become partitioned\n from the public network.\n\nThis commit introduces a new limit of eight connections just for\n addnode peers which is not subject to any of the other connection\n limitations (including maxconnections).\n\nThe choice of eight is sufficient so that under no condition would\n a user find themselves connected to fewer addnoded peers than\n previously.  It is also low enough that users who are confused\n about the significance of more connections and have gotten too\n copy-and-paste happy will not consume more than twice the slot\n usage of a typical user.\n\nAny additional load on the network resulting from this will likely\n be offset by a reduction in users applying even more wasteful\n workaround for the prior behavior.\n\nThe retry delays are reduced to avoid nodes sitting around without\n their added peers up, but are still sufficient to prevent overly\n aggressive repeated connections.  The reduced delays also make\n the system much more responsive to the addnode RPC.\n\nBan-disconnects are also exempted for peers added via addnode since\n the outbound addnode logic ignores bans.  Previously it would ban\n an addnode then immediately reconnect to it.\n\nA minor change was also made to CSemaphoreGrant so that it is\n possible to re-acquire via an object whos grant was moved.",
      "tree": {
        "sha": "f17cee354b55a4acf8e75f29cb916d07fc00c0d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f17cee354b55a4acf8e75f29cb916d07fc00c0d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce43630d1e97368f454ad6a7b65a24263ab5be71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce43630d1e97368f454ad6a7b65a24263ab5be71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce43630d1e97368f454ad6a7b65a24263ab5be71"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 48,
      "deletions": 13
    },
    "files": [
      {
        "sha": "aeca75c38fc2a7a542ec57f4d0363d7964977a1f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "patch": "@@ -871,11 +871,11 @@ bool AppInitParameterInteraction()\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n-    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n-    nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS)), 0);\n+    nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));\n-    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS, nMaxConnections);\n+    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n@@ -1109,7 +1109,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n-    LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n+    LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     InitSignatureCache();\n \n@@ -1565,6 +1565,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nRelevantServices = nRelevantServices;\n     connOptions.nMaxConnections = nMaxConnections;\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n+    connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chainActive.Height();\n     connOptions.uiInterface = &uiInterface;"
      },
      {
        "sha": "6640cc00164e6d56c438f00527ce9dd748860c81",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 6,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "patch": "@@ -621,6 +621,7 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nVersion);\n     X(cleanSubVer);\n     X(fInbound);\n+    X(fAddnode);\n     X(nStartingHeight);\n     X(nSendBytes);\n     X(mapSendBytesPerMsgCmd);\n@@ -1631,7 +1632,7 @@ void CConnman::ThreadOpenConnections()\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes) {\n-                if (!pnode->fInbound) {\n+                if (!pnode->fInbound && !pnode->fAddnode) {\n                     setConnected.insert(pnode->addr.GetGroup());\n                     nOutbound++;\n                 }\n@@ -1776,27 +1777,35 @@ void CConnman::ThreadOpenAddedConnections()\n             vAddedNodes = mapMultiArgs.at(\"-addnode\");\n     }\n \n-    for (unsigned int i = 0; true; i++)\n+    while (true)\n     {\n+        CSemaphoreGrant grant(*semAddnode);\n         std::vector<AddedNodeInfo> vInfo = GetAddedNodeInfo();\n+        bool tried = false;\n         for (const AddedNodeInfo& info : vInfo) {\n             if (!info.fConnected) {\n-                CSemaphoreGrant grant(*semOutbound);\n+                if (!grant.TryAcquire()) {\n+                    // If we've used up our semaphore and need a new one, lets not wait here since while we are waiting\n+                    // the addednodeinfo state might change.\n+                    break;\n+                }\n                 // If strAddedNode is an IP/port, decode it immediately, so\n                 // OpenNetworkConnection can detect existing connections to that IP/port.\n+                tried = true;\n                 CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n-                OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false);\n+                OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false, false, true);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }\n         }\n-        if (!interruptNet.sleep_for(std::chrono::minutes(2)))\n+        // Retry every 60 seconds if a connection was attempted, otherwise two seconds\n+        if (!interruptNet.sleep_for(std::chrono::seconds(tried ? 60 : 2)));\n             return;\n     }\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n {\n     //\n     // Initiate outbound network connection\n@@ -1825,6 +1834,8 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->fOneShot = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n+    if (fAddnode)\n+        pnode->fAddnode = true;\n \n     return true;\n }\n@@ -2076,8 +2087,10 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n     semOutbound = NULL;\n+    semAddnode = NULL;\n     nMaxConnections = 0;\n     nMaxOutbound = 0;\n+    nMaxAddnode = 0;\n     nBestHeight = 0;\n     clientInterface = NULL;\n     flagInterruptMsgProc = false;\n@@ -2099,6 +2112,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     nLocalServices = connOptions.nLocalServices;\n     nMaxConnections = connOptions.nMaxConnections;\n     nMaxOutbound = std::min((connOptions.nMaxOutbound), nMaxConnections);\n+    nMaxAddnode = connOptions.nMaxAddnode;\n     nMaxFeeler = connOptions.nMaxFeeler;\n \n     nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n@@ -2151,6 +2165,10 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n         // initialize semaphore\n         semOutbound = new CSemaphore(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n     }\n+    if (semAddnode == NULL) {\n+        // initialize semaphore\n+        semAddnode = new CSemaphore(nMaxAddnode);\n+    }\n \n     //\n     // Start threads\n@@ -2227,6 +2245,10 @@ void CConnman::Stop()\n     if (threadSocketHandler.joinable())\n         threadSocketHandler.join();\n \n+    if (semAddnode)\n+        for (int i=0; i<nMaxAddnode; i++)\n+            semOutbound->post();\n+\n     if (fAddressesInitialized)\n     {\n         DumpData();\n@@ -2254,6 +2276,8 @@ void CConnman::Stop()\n     vhListenSocket.clear();\n     delete semOutbound;\n     semOutbound = NULL;\n+    delete semAddnode;\n+    semAddnode = NULL;\n }\n \n void CConnman::DeleteNode(CNode* pnode)\n@@ -2554,6 +2578,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n+    fAddnode = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "97b27dcdf497de57b43be85dd538add0d382f398",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "patch": "@@ -58,8 +58,10 @@ static const unsigned int MAX_ADDR_TO_SEND = 1000;\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of strSubVer in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n-/** Maximum number of outgoing nodes */\n+/** Maximum number of automatic outgoing nodes */\n static const int MAX_OUTBOUND_CONNECTIONS = 8;\n+/** Maximum number of addnode outgoing nodes */\n+static const int MAX_ADDNODE_CONNECTIONS = 8;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -135,6 +137,7 @@ class CConnman\n         ServiceFlags nRelevantServices = NODE_NONE;\n         int nMaxConnections = 0;\n         int nMaxOutbound = 0;\n+        int nMaxAddnode = 0;\n         int nMaxFeeler = 0;\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n@@ -151,7 +154,7 @@ class CConnman\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -414,8 +417,10 @@ class CConnman\n     ServiceFlags nRelevantServices;\n \n     CSemaphore *semOutbound;\n+    CSemaphore *semAddnode;\n     int nMaxConnections;\n     int nMaxOutbound;\n+    int nMaxAddnode;\n     int nMaxFeeler;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n@@ -529,6 +534,7 @@ class CNodeStats\n     int nVersion;\n     std::string cleanSubVer;\n     bool fInbound;\n+    bool fAddnode;\n     int nStartingHeight;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n@@ -626,6 +632,7 @@ class CNode\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n+    bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n     bool fSuccessfullyConnected;"
      },
      {
        "sha": "3a956e89e7cd329799d6e779127a4244dfbe21cc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "patch": "@@ -2644,6 +2644,8 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             state.fShouldBan = false;\n             if (pto->fWhitelisted)\n                 LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n+            else if (pto->fAddnode)\n+                LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pto->addr.ToString());\n             else {\n                 pto->fDisconnect = true;\n                 if (pto->addr.IsLocal())"
      },
      {
        "sha": "fe59579593192d2cd0961fe31050b52fe6244892",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "patch": "@@ -152,6 +152,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n+        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));"
      },
      {
        "sha": "3b29050e0e126f829da5f37a780f862e63dbf832",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "patch": "@@ -264,7 +264,6 @@ class CSemaphoreGrant\n         grant.Release();\n         grant.sem = sem;\n         grant.fHaveGrant = fHaveGrant;\n-        sem = NULL;\n         fHaveGrant = false;\n     }\n "
      }
    ]
  },
  {
    "sha": "90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGYxM2UxODIyOGZkZTJlNjJkZTFjN2Q5YjRiN2UxMmE3MDNiZjAz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-12-11T04:59:55Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-05T19:02:15Z"
      },
      "message": "Add release notes for addnode changes.",
      "tree": {
        "sha": "ff66b31305ec0482afcba9aa6fa86bbaf6d23ebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff66b31305ec0482afcba9aa6fa86bbaf6d23ebf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90f13e18228fde2e62de1c7d9b4b7e12a703bf03/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50bd12ce0c49e574a5baf1a8df3a667810c6ad1e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d0d6896845750450962d7ed2843429bc2259f19",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90f13e18228fde2e62de1c7d9b4b7e12a703bf03/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90f13e18228fde2e62de1c7d9b4b7e12a703bf03/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
        "patch": "@@ -62,6 +62,16 @@ Removal of Priority Estimation\n   major version. To prepare for this, the default for the rate limit of priority\n   transactions (`-limitfreerelay`) has been set to `0` kB/minute.\n \n+P2P connection management\n+--------------------------\n+\n+- Peers manually added through the addnode option or addnode RPC now have their own\n+  limit of eight connections which does not compete with other inbound or outbound\n+  connection usage and is not subject to the maxconnections limitation.\n+\n+- New connections to manually added peers are much faster.\n+\n+\n 0.14.0 Change log\n =================\n "
      }
    ]
  },
  {
    "sha": "032ba3f0665432bd15ff76ee01cde245ad29e3e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzJiYTNmMDY2NTQzMmJkMTVmZjc2ZWUwMWNkZTI0NWFkMjllM2U2",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-12-11T20:26:06Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-05T19:02:15Z"
      },
      "message": "RPC help documentation for addnode peerinfo.\n\nAlso adds a comment about the netgroup exclusion behavior.",
      "tree": {
        "sha": "40de7c5b7d216b82f3d6a7dea9cf59528c164d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40de7c5b7d216b82f3d6a7dea9cf59528c164d72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/032ba3f0665432bd15ff76ee01cde245ad29e3e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032ba3f0665432bd15ff76ee01cde245ad29e3e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/032ba3f0665432bd15ff76ee01cde245ad29e3e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032ba3f0665432bd15ff76ee01cde245ad29e3e6/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90f13e18228fde2e62de1c7d9b4b7e12a703bf03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90f13e18228fde2e62de1c7d9b4b7e12a703bf03"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f0a7bf8dcd0ca0e8564f3fd2680bd298f51460f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/032ba3f0665432bd15ff76ee01cde245ad29e3e6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/032ba3f0665432bd15ff76ee01cde245ad29e3e6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=032ba3f0665432bd15ff76ee01cde245ad29e3e6",
        "patch": "@@ -1633,6 +1633,11 @@ void CConnman::ThreadOpenConnections()\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes) {\n                 if (!pnode->fInbound && !pnode->fAddnode) {\n+                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                    // is to not use multiple of our limited outbound slots on a single netgroup\n+                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n+                    // also have the added issue that they're attacker controlled and could be used\n+                    // to prevent us from connecting to particular hosts if we used them here.\n                     setConnected.insert(pnode->addr.GetGroup());\n                     nOutbound++;\n                 }"
      },
      {
        "sha": "2af00c1de925b5073396c5f00c3a9aa0b6ce1b9e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/032ba3f0665432bd15ff76ee01cde245ad29e3e6/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/032ba3f0665432bd15ff76ee01cde245ad29e3e6/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=032ba3f0665432bd15ff76ee01cde245ad29e3e6",
        "patch": "@@ -92,6 +92,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n+            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n             \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n             \"    \\\"synced_headers\\\": n,       (numeric) The last header we have in common with this peer\\n\""
      }
    ]
  }
]