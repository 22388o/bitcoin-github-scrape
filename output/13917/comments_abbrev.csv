practicalswift,2018-08-08T22:32:38Z,"Excellent! Thanks for tightening PSBT!\n\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-411574673,411574673,
DrahtBot,2018-08-08T23:06:57Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13932 (Additional utility RPCs for PSBT by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-411581996,411581996,
achow101,2018-08-08T23:18:18Z,"utACK\n\nHere is a commit with some more test cases: https://github.com/achow101/bitcoin/commit/9f110e1acbb1dc882ea871043fd03cf9064a1063. It tests for non-matching redeem scripts with both witness and non-witness utxos and non-matching witness scripts (for witness utxo only)",https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-411584236,411584236,
sipa,2018-08-08T23:41:50Z,"Addressed @promag's nit, and included more tests by @achow101.",https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-411588872,411588872,
achow101,2018-08-09T18:31:45Z,utACK 2bc1296db7ba4e99f52a4002e67b11c0351819d6,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-411853951,411853951,
kallewoof,2018-08-13T09:24:41Z,"Perhaps unrelated, but either `createpsbt` is too lenient, or `decodepsbt` is broken.\n\n```\n$ ./bitcoin-cli createpsbt ""[]"" ""[{\""$(./bitcoin-cli getnewaddress)\"":0.01}]""\ncHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\n$ ./bitcoin-cli decodepsbt cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\nerror code: -22\nerror message:\nTX decode f",https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-412459298,412459298,
fanquake,2018-08-13T10:33:56Z,@sipa Can you rebase this now that #13666 is merged.,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-412476264,412476264,
sipa,2018-08-13T15:42:04Z,Rebased after #13666.,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-412563273,412563273,
achow101,2018-08-13T18:37:10Z,re-utACK,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-412620363,412620363,
kallewoof,2018-08-14T05:24:54Z,re-utACK 5df6f089b53c5b5859e5a3454c026447e4752f82,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-412758225,412758225,
laanwj,2018-08-14T16:01:16Z,utACK 5df6f089b53c5b5859e5a3454c026447e4752f82,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-412924260,412924260,
fanquake,2018-08-15T02:04:43Z,Will be backported in #13976,https://github.com/bitcoin/bitcoin/pull/13917#issuecomment-413071839,413071839,
promag,2018-08-08T22:46:09Z,"Commit ""Only wipe wrong UTXO type data if overwritten by wallet""\n\nSuggestion, either reuse above condition `if (it != pwallet->mapWallet.end())`or above do:\n```cpp\nconst bool from_wallet = it != pwallet->mapWallet.end();\nif (from_wallet) {\n    ...\n}",https://github.com/bitcoin/bitcoin/pull/13917#discussion_r208759491,208759491,src/wallet/rpcwallet.cpp
promag,2018-08-08T22:48:30Z,"Commit ""Additional sanity checks in SignPSBTInput""\n\nnit, could reflow comments.",https://github.com/bitcoin/bitcoin/pull/13917#discussion_r208759910,208759910,src/script/sign.cpp
sipa,2018-08-08T23:41:23Z,Done.,https://github.com/bitcoin/bitcoin/pull/13917#discussion_r208768849,208768849,src/wallet/rpcwallet.cpp
sipa,2018-08-08T23:41:34Z,I think they're fine.,https://github.com/bitcoin/bitcoin/pull/13917#discussion_r208768884,208768884,src/script/sign.cpp
kallewoof,2018-08-09T06:37:05Z,"Is this comment based on the BIP/spec or implementation? What about other implementations that may not do what `FillPSBT` does in Bitcoin Core? I understand that the check is done anyway, but the comment sounds like it could be skipped due to an implementation detail, which sounds error-prone.",https://github.com/bitcoin/bitcoin/pull/13917#discussion_r208819598,208819598,src/script/sign.cpp
sipa,2018-08-09T07:29:05Z,"@achow101 just opened a PR that adds the actual requirements to test for to BIP 174, including a simple implementation in pseudocode that implements it.",https://github.com/bitcoin/bitcoin/pull/13917#discussion_r208830361,208830361,src/script/sign.cpp
