sipa,2018-12-13T19:36:44Z,"This seems overkill, as most tests are single-threaded. The multi-threaded test could just have one RNG per thread?\n\nBy that I mean having an explicit ""FastRandomContext rng(true);"" in each of the threads.",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447093412,447093412,
MarcoFalke,2018-12-13T19:54:28Z,The alternative you suggest (only give each thread their own randomness context when they are multithreaded) would involve (re)writing the `InsecureRandRange` helpers. I'd prefer to just add the thread_local keyword unless there are observable performance regressions.,https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447099142,447099142,
sipa,2018-12-13T19:55:19Z,"Oh, I forgot about the wrappers for the global test RNG. Objection withdrawn.",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447099394,447099394,
gmaxwell,2018-12-13T21:18:59Z,utACK,https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447124239,447124239,
DrahtBot,2018-12-13T21:39:23Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14464](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14464.html) (refactor: make checkqueue manage the thread",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447130212,447130212,
laanwj,2018-12-15T07:28:32Z,"No idea if this is significant, but mentioning just in case:\n\nThread-local support used to be optional before this (was only used in sync.h in debug mode optionally). This change ignores `HAVE_THREAD_LOCAL` and makes it mandatory.",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447545253,447545253,
Sjors,2018-12-15T10:37:51Z,"Should those tests perhaps fail explicitly, like in `sync.cpp`?\n```\n#if !defined(HAVE_THREAD_LOCAL)\nstatic_assert(false, ""thread_local is not supported"");\n#endif\n```\nOr should we make it mandatory in `./configure`?\n\nSome earlier related discussion:\n* https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-389957916\n* https://github.com/bitcoin/bitcoin/pull/11722\n\nWe bump",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447558439,447558439,
MarcoFalke,2018-12-16T17:52:23Z,"`thread_local` was added in C++11, which we require right now and we are about to switch to C++14 soon, so a compiler not supporting it shouldn't be a problem.",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447662551,447662551,
sipa,2018-12-16T18:42:10Z,"@MarcoFalke That reasoning seems backwards. We identify what C++ version (and features) we can use based on the platforms we want to support. I don't mean to say that this particular change is a problem, but just because we're considering C++14 does not mean we should drop support for every platform that doesn't support every feature from C++11 or C++14.\n\nDoes this mean we have now removed suppo",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447665955,447665955,
MarcoFalke,2018-12-17T00:50:27Z,It would be easier to decide which C++11 (or C++14) features are acceptable to use when there was a guideline/process that defines compatibility requirements we want to achieve.,https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447692615,447692615,
Sjors,2018-12-17T14:54:14Z,"> We identify what C++ version (and features) we can use based on the platforms we want to support.\n\nIt's probably a bit of both. It's easier to support older platforms if it only causes minor inconveniences.\n\nThis change indeed breaks macOS 10.10 support for the unit tests. Afaik it takes a patch with an `ifdef` to restore support for the majority of tests. @jonasschnelli might be able to",https://github.com/bitcoin/bitcoin/pull/14953#issuecomment-447872878,447872878,
