[
  {
    "sha": "8c96008ab18075abca03bff6b3675643825a21ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yzk2MDA4YWIxODA3NWFiY2EwM2JmZjZiMzY3NTY0MzgyNWEyMWNh",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-05T10:05:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-19T17:20:12Z"
      },
      "message": "[net] Don't return an optional from TransportDeserializer::GetMessage()\n\nAlso, access mapRecvBytesPerMsgCmd with `at()` not `find()`. This\nthrows an error if COMMAND_OTHER doesn't exist, which should never\nhappen. `find()` instead just accessed the last element, which could make\ndebugging more difficult.\n\nResolves review comments from PR19107:\n\n- https://github.com/bitcoin/bitcoin/pull/19107#discussion_r478718436\n- https://github.com/bitcoin/bitcoin/pull/19107#discussion_r478714497",
      "tree": {
        "sha": "846de8ab8fccf225350fcd8fe409a95089f0b21a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/846de8ab8fccf225350fcd8fe409a95089f0b21a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c96008ab18075abca03bff6b3675643825a21ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c96008ab18075abca03bff6b3675643825a21ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c96008ab18075abca03bff6b3675643825a21ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c96008ab18075abca03bff6b3675643825a21ca/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e35c4a3d80578e8feff1f1ae5db81d3c0992a865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35c4a3d80578e8feff1f1ae5db81d3c0992a865",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e35c4a3d80578e8feff1f1ae5db81d3c0992a865"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 34,
      "deletions": 35
    },
    "files": [
      {
        "sha": "6aa2322e14a17bf090ca8f66c9443dd9ac7f5703",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c96008ab18075abca03bff6b3675643825a21ca/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c96008ab18075abca03bff6b3675643825a21ca/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8c96008ab18075abca03bff6b3675643825a21ca",
        "patch": "@@ -641,25 +641,26 @@ bool CNode::ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete)\n \n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n-            uint32_t out_err_raw_size{0};\n-            std::optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n-            if (!result) {\n+            bool reject_message{false};\n+            CNetMessage msg = m_deserializer->GetMessage(time, reject_message);\n+            if (reject_message) {\n                 // Message deserialization failed.  Drop the message but don't disconnect the peer.\n                 // store the size of the corrupt message\n-                mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER)->second += out_err_raw_size;\n+                mapRecvBytesPerMsgCmd.at(NET_MESSAGE_COMMAND_OTHER) += msg.m_raw_message_size;\n                 continue;\n             }\n \n-            //store received bytes per message command\n-            //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(result->m_command);\n-            if (i == mapRecvBytesPerMsgCmd.end())\n+            // Store received bytes per message command\n+            // to prevent a memory DOS, only allow valid commands\n+            auto i = mapRecvBytesPerMsgCmd.find(msg.m_command);\n+            if (i == mapRecvBytesPerMsgCmd.end()) {\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n+            }\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += result->m_raw_message_size;\n+            i->second += msg.m_raw_message_size;\n \n             // push the message to the process queue,\n-            vRecvMsg.push_back(std::move(*result));\n+            vRecvMsg.push_back(std::move(msg));\n \n             complete = true;\n         }\n@@ -733,16 +734,18 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+CNetMessage V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, bool& reject_message)\n {\n+    // Initialize out parameter\n+    reject_message = false;\n     // decompose a single CNetMessage from the TransportDeserializer\n-    std::optional<CNetMessage> msg(std::move(vRecv));\n+    CNetMessage msg(std::move(vRecv));\n \n     // store command string, time, and sizes\n-    msg->m_command = hdr.GetCommand();\n-    msg->m_time = time;\n-    msg->m_message_size = hdr.nMessageSize;\n-    msg->m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    msg.m_command = hdr.GetCommand();\n+    msg.m_time = time;\n+    msg.m_message_size = hdr.nMessageSize;\n+    msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n     uint256 hash = GetMessageHash();\n \n@@ -752,17 +755,15 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n     // Check checksum and header command string\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n         LogPrint(BCLog::NET, \"Header error: Wrong checksum (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n-                 SanitizeString(msg->m_command), msg->m_message_size,\n+                 SanitizeString(msg.m_command), msg.m_message_size,\n                  HexStr(Span<uint8_t>(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE)),\n                  HexStr(hdr.pchChecksum),\n                  m_node_id);\n-        out_err_raw_size = msg->m_raw_message_size;\n-        msg = std::nullopt;\n+        reject_message = true;\n     } else if (!hdr.IsCommandValid()) {\n         LogPrint(BCLog::NET, \"Header error: Invalid message type (%s, %u bytes), peer=%d\\n\",\n-                 SanitizeString(hdr.GetCommand()), msg->m_message_size, m_node_id);\n-        out_err_raw_size = msg->m_raw_message_size;\n-        msg.reset();\n+                 SanitizeString(hdr.GetCommand()), msg.m_message_size, m_node_id);\n+        reject_message = true;\n     }\n \n     // Always reset the network deserializer (prepare for the next message)"
      },
      {
        "sha": "1f43433f9f6420d630fbaf7c9f0b4aba183fb39b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c96008ab18075abca03bff6b3675643825a21ca/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c96008ab18075abca03bff6b3675643825a21ca/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8c96008ab18075abca03bff6b3675643825a21ca",
        "patch": "@@ -309,7 +309,7 @@ class TransportDeserializer {\n     /** read and deserialize data, advances msg_bytes data pointer */\n     virtual int Read(Span<const uint8_t>& msg_bytes) = 0;\n     // decomposes a message from the context\n-    virtual std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n+    virtual CNetMessage GetMessage(std::chrono::microseconds time, bool& reject_message) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n@@ -373,7 +373,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         }\n         return ret;\n     }\n-    std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n+    CNetMessage GetMessage(std::chrono::microseconds time, bool& reject_message) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport"
      },
      {
        "sha": "29b7223c90075d02c77927e6455d0f2d6f9d1ae3",
        "filename": "src/test/fuzz/p2p_transport_serialization.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c96008ab18075abca03bff6b3675643825a21ca/src/test/fuzz/p2p_transport_serialization.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c96008ab18075abca03bff6b3675643825a21ca/src/test/fuzz/p2p_transport_serialization.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_serialization.cpp?ref=8c96008ab18075abca03bff6b3675643825a21ca",
        "patch": "@@ -68,18 +68,16 @@ FUZZ_TARGET_INIT(p2p_transport_serialization, initialize_p2p_transport_serializa\n         }\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n-            uint32_t out_err_raw_size{0};\n-            std::optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n-            if (result) {\n-                assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n-                assert(result->m_raw_message_size <= mutable_msg_bytes.size());\n-                assert(result->m_raw_message_size == CMessageHeader::HEADER_SIZE + result->m_message_size);\n-                assert(result->m_time == m_time);\n+            bool reject_message{false};\n+            CNetMessage msg = deserializer.GetMessage(m_time, reject_message);\n+            assert(msg.m_command.size() <= CMessageHeader::COMMAND_SIZE);\n+            assert(msg.m_raw_message_size <= mutable_msg_bytes.size());\n+            assert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\n+            assert(msg.m_time == m_time);\n \n-                std::vector<unsigned char> header;\n-                auto msg = CNetMsgMaker{result->m_recv.GetVersion()}.Make(result->m_command, MakeUCharSpan(result->m_recv));\n-                serializer.prepareForTransport(msg, header);\n-            }\n+            std::vector<unsigned char> header;\n+            auto msg2 = CNetMsgMaker{msg.m_recv.GetVersion()}.Make(msg.m_command, MakeUCharSpan(msg.m_recv));\n+            serializer.prepareForTransport(msg2, header);\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "f3e451bebfe2e2d8de901d8ac29c064a51d3b746",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2U0NTFiZWJmZTJlMmQ4ZGU5MDFkOGFjMjljMDY0YTUxZDNiNzQ2",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-05T10:05:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-19T17:20:14Z"
      },
      "message": "[net] Replace GetID() with id in TransportDeserializer constructor",
      "tree": {
        "sha": "0545359588dbecd5ada6429de9d6c4f4c629bbd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0545359588dbecd5ada6429de9d6c4f4c629bbd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3e451bebfe2e2d8de901d8ac29c064a51d3b746",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3e451bebfe2e2d8de901d8ac29c064a51d3b746",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3e451bebfe2e2d8de901d8ac29c064a51d3b746",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3e451bebfe2e2d8de901d8ac29c064a51d3b746/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c96008ab18075abca03bff6b3675643825a21ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c96008ab18075abca03bff6b3675643825a21ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c96008ab18075abca03bff6b3675643825a21ca"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "993e4e3ae8f6c23ca8fd9b8274e6006e7a27dc03",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3e451bebfe2e2d8de901d8ac29c064a51d3b746/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3e451bebfe2e2d8de901d8ac29c064a51d3b746/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f3e451bebfe2e2d8de901d8ac29c064a51d3b746",
        "patch": "@@ -3007,7 +3007,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), id, SER_NETWORK, INIT_PROTO_VERSION));\n     m_serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n }\n "
      }
    ]
  }
]