[
  {
    "sha": "082a61c69d7a539b5a48c4376a657f1c5aa92d81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODJhNjFjNjlkN2E1MzliNWE0OGM0Mzc2YTY1N2YxYzVhYTkyZDgx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-01-25T02:15:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-01-25T16:35:34Z"
      },
      "message": "Move scheduler/threadGroup into common-init instead of per-app\n\nThis resolves #12229 which pointed out a shutdown deadlock due to\nscheduler/checkqueue having been shut down while network message\nprocessing is still running.",
      "tree": {
        "sha": "ddfc5d6520551cf395629583ae9e6088aa179af0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddfc5d6520551cf395629583ae9e6088aa179af0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/082a61c69d7a539b5a48c4376a657f1c5aa92d81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/082a61c69d7a539b5a48c4376a657f1c5aa92d81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/082a61c69d7a539b5a48c4376a657f1c5aa92d81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/082a61c69d7a539b5a48c4376a657f1c5aa92d81/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6970b30c6f1d2be7947295fe18f2390649b17a4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6970b30c6f1d2be7947295fe18f2390649b17a4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6970b30c6f1d2be7947295fe18f2390649b17a4b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 22,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d3eb60725f4afe0e3a9f4def577cc938d6332f0d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=082a61c69d7a539b5a48c4376a657f1c5aa92d81",
        "patch": "@@ -14,7 +14,6 @@\n #include <rpc/server.h>\n #include <init.h>\n #include <noui.h>\n-#include <scheduler.h>\n #include <util.h>\n #include <httpserver.h>\n #include <httprpc.h>\n@@ -40,7 +39,7 @@\n  * Use the buttons <code>Namespaces</code>, <code>Classes</code> or <code>Files</code> at the top of the page to start navigating the code.\n  */\n \n-void WaitForShutdown(boost::thread_group* threadGroup)\n+void WaitForShutdown()\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -49,11 +48,7 @@ void WaitForShutdown(boost::thread_group* threadGroup)\n         MilliSleep(200);\n         fShutdown = ShutdownRequested();\n     }\n-    if (threadGroup)\n-    {\n-        Interrupt(*threadGroup);\n-        threadGroup->join_all();\n-    }\n+    Interrupt();\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -62,9 +57,6 @@ void WaitForShutdown(boost::thread_group* threadGroup)\n //\n bool AppInit(int argc, char* argv[])\n {\n-    boost::thread_group threadGroup;\n-    CScheduler scheduler;\n-\n     bool fRet = false;\n \n     //\n@@ -165,7 +157,7 @@ bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain(threadGroup, scheduler);\n+        fRet = AppInitMain();\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -175,10 +167,9 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        Interrupt(threadGroup);\n-        threadGroup.join_all();\n+        Interrupt();\n     } else {\n-        WaitForShutdown(&threadGroup);\n+        WaitForShutdown();\n     }\n     Shutdown();\n "
      },
      {
        "sha": "b9c78b821174dac17f371879e3c0dcd6d9e0a0da",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=082a61c69d7a539b5a48c4376a657f1c5aa92d81",
        "patch": "@@ -155,7 +155,10 @@ class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n-void Interrupt(boost::thread_group& threadGroup)\n+static boost::thread_group threadGroup;\n+static CScheduler scheduler;\n+\n+void Interrupt()\n {\n     InterruptHTTPServer();\n     InterruptHTTPRPC();\n@@ -164,7 +167,6 @@ void Interrupt(boost::thread_group& threadGroup)\n     InterruptTorControl();\n     if (g_connman)\n         g_connman->Interrupt();\n-    threadGroup.interrupt_all();\n }\n \n void Shutdown()\n@@ -199,6 +201,12 @@ void Shutdown()\n     g_connman.reset();\n \n     StopTorControl();\n+\n+    // After everything has been shut down, but before things get flushed, stop the\n+    // CScheduler/checkqueue threadGroup\n+    threadGroup.interrupt_all();\n+    threadGroup.join_all();\n+\n     if (fDumpMempoolLater && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n     }\n@@ -705,7 +713,7 @@ bool InitSanityCheck(void)\n     return true;\n }\n \n-bool AppInitServers(boost::thread_group& threadGroup)\n+bool AppInitServers()\n {\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n@@ -1184,7 +1192,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInitMain()\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1251,7 +1259,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n-        if (!AppInitServers(threadGroup))\n+        if (!AppInitServers())\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n "
      },
      {
        "sha": "33f97a55a570d6013a7917faa7beb6922e45968f",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=082a61c69d7a539b5a48c4376a657f1c5aa92d81",
        "patch": "@@ -19,7 +19,7 @@ class thread_group;\n void StartShutdown();\n bool ShutdownRequested();\n /** Interrupt threads */\n-void Interrupt(boost::thread_group& threadGroup);\n+void Interrupt();\n void Shutdown();\n //!Initialize the logging infrastructure\n void InitLogging();\n@@ -54,7 +54,7 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler);\n+bool AppInitMain();\n \n /** The help message mode determines what help message to show */\n enum HelpMessageMode {"
      },
      {
        "sha": "b26d99a20a1a3b65745fb5c5ddbd6f9972310aa8",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/082a61c69d7a539b5a48c4376a657f1c5aa92d81/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=082a61c69d7a539b5a48c4376a657f1c5aa92d81",
        "patch": "@@ -28,7 +28,6 @@\n \n #include <init.h>\n #include <rpc/server.h>\n-#include <scheduler.h>\n #include <ui_interface.h>\n #include <util.h>\n #include <warnings.h>\n@@ -193,8 +192,6 @@ public Q_SLOTS:\n     void runawayException(const QString &message);\n \n private:\n-    boost::thread_group threadGroup;\n-    CScheduler scheduler;\n \n     /// Pass fatal exception message to UI thread\n     void handleRunawayException(const std::exception *e);\n@@ -300,7 +297,7 @@ void BitcoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running initialization in thread\";\n-        bool rv = AppInitMain(threadGroup, scheduler);\n+        bool rv = AppInitMain();\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n@@ -314,8 +311,7 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        Interrupt(threadGroup);\n-        threadGroup.join_all();\n+        Interrupt();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n         Q_EMIT shutdownResult();"
      }
    ]
  }
]