DrahtBot,2018-08-13T02:55:02Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16066](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16066.html) (mempool: Skip estimator if block is older t",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-412396202,412396202,
practicalswift,2018-08-13T08:28:26Z,"Concept ACK\n\nThanks for working on these circular dependencies!",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-412445001,412445001,
Empact,2018-08-14T22:08:10Z,Marked methods `override` and made the comments more appropriate,https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-413032067,413032067,
Empact,2018-08-15T05:42:19Z,Made the `removeTx` return type `void` and added interface arg comments.,https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-413099588,413099588,
l2a5b1,2018-08-15T12:07:36Z,"utACK 56ec018 when squashed.\n\nOne nit: I was wondering about the location of `mempool_observer.h`. If the file belongs in `src/interfaces`, where it currently resides, you may want to add an entry for the `MempoolObserver` interface to https://github.com/bitcoin/bitcoin/blob/master/src/interfaces/README.md, which contains a list of headers.",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-413178407,413178407,
Empact,2018-08-15T17:14:18Z,"Thanks for calling out the readme. Fixed, rebased, and squashed.",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-413267905,413267905,
l2a5b1,2018-08-15T18:21:09Z,"yw, nice refactor! utACK f58e17e",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-413288780,413288780,
Empact,2018-09-11T03:58:19Z,Changed `removeTx` and `processBlock` to accept const hash references.,https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-420138701,420138701,
MarcoFalke,2019-03-25T18:26:51Z,"copy-paste from https://github.com/bitcoin/bitcoin/pull/15638#discussion_r268718912 by @ryanofsky:\n\nWhile I think in some cases fixing `lint-circular-dependencies` errors can make code organization better, it can just as easily make it worse.\n\nAn example would be the circular dependency between `txmempool` and `policy/fees`. The fee estimation code needs access to the mempool entry struct,",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-476322427,476322427,
ryanofsky,2019-03-25T19:08:45Z,"re: https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-476322427\n\nWow, I didn't know about (or maybe forgot about?) this PR. Looking over this change, it may not be a bad idea if there are justifications for it other than fixing circular dependencies. In the pasted comment, I was actually complaining circular dependency errors in the context of #10443, not this PR.",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-476337244,476337244,
MarcoFalke,2019-03-25T19:16:02Z,"This refactoring change is +80-17. Generally I'd prefer if refactoring simplified things, not made them harder",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-476339669,476339669,
Empact,2019-04-03T04:33:57Z,"Now +70 âˆ’16, with +43 coming from the interface header itself.\n\nI would argue this does make things simpler, by making `CTxMemPool`  independent of `CBlockPolicyEstimator`. Both objects are now simpler because they both relate only to an abstract interface, which means there are no demands placed on either class apart from the capabilities and limitations of the interface.\n\nA practical ben",https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-479336231,479336231,
l2a5b1,2019-04-03T11:31:16Z,utACK 8501bdc. The introduction of the `MempoolObserver` interface seems an elegant way to break the circular dependency.,https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-479450387,479450387,
DrahtBot,2019-07-03T14:26:36Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-508116705,508116705,
Empact,2020-02-20T19:41:37Z,Closing in favor of #17786,https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-589272343,589272343,
l2a5b1,2018-08-14T09:37:38Z,"You can mark the declarations of `interfaces::MempoolObserver` methods in `CBlockPolicyEstimator` with `override`:\n\n```c++\n    void processBlock(unsigned int nBlockHeight,\n                      std::vector<const CTxMemPoolEntry*>& entries) override;\n\n    void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate) override;\n\n    bool removeTx(uint256 hash) override;",https://github.com/bitcoin/bitcoin/pull/13949#discussion_r209888356,209888356,src/policy/fees.h
l2a5b1,2018-08-14T09:59:05Z,"To prevent redundant documentation, maybe you can declare the `interfaces::MempoolObserver` methods in `CBlockPolicyEstimator` without copying the documentation from the method declarations in `interfaces::MempoolObserver`.\n\n```c++\n    void processBlock(unsigned int nBlockHeight,\n                      std::vector<const CTxMemPoolEntry*>& entries);\n\n    void processTransaction(const CTx",https://github.com/bitcoin/bitcoin/pull/13949#discussion_r209894714,209894714,src/policy/fees.h
practicalswift,2018-09-05T07:12:19Z,`hash` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/13949#discussion_r215157493,215157493,src/policy/fees.cpp
