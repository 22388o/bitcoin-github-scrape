[
  {
    "sha": "e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2U5MTE0MGZjN2M3NGIwMTk4MTQ2YTJiZTBjZWVlOGI2Mzk5YzBl",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-13T00:41:21Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-06-07T13:28:17Z"
      },
      "message": "Extract MempoolObserver interface\n\nThis is an abstract interface which presents removes the dependency between\nCBlockPolicyEstimator and CTxMemPool",
      "tree": {
        "sha": "c098d07eb7a587de044b8e4b9f8243f954333e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c098d07eb7a587de044b8e4b9f8243f954333e66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJc+mZxAAoJEG7l83hfeLNFTGMH/RtK+LHnpTgRz2Nqpm6qYlkx\n3PWh21gJElGGgKPbux3bLL3dqv3hZvzsJeMVr8+AUqtEi5dImYa8LGGLEKyLWdih\nbewO8rs4muHAiFEByQONjCMQl32QtED8eVQRNR5QSDcbbT4R5FLvxkJ773l1zXWH\nRwmyX3axk8W37CdDQDotzD2EJq9NbpK8bqjuZqSxA34PPKkSFSioGk3UaMeuF4Cs\nNZZosmw8Y0o43m75Yw3RkE+1pa6sKTEzglA4H8Owo6Qok3N1M/I2e657rjWof8Vm\nPzU2jhBWroNNB1kJCCyPX7OiOshSz3awxAxeUbx9vgB3AuGwKqa+b/N4Bg8vEw8=\n=VRK9\n-----END PGP SIGNATURE-----",
        "payload": "tree c098d07eb7a587de044b8e4b9f8243f954333e66\nparent af05f36b60b25955f785b5d7dd492e94284830ca\nauthor Ben Woosley <ben.woosley@gmail.com> 1534120881 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1559914097 +0200\n\nExtract MempoolObserver interface\n\nThis is an abstract interface which presents removes the dependency between\nCBlockPolicyEstimator and CTxMemPool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af05f36b60b25955f785b5d7dd492e94284830ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af05f36b60b25955f785b5d7dd492e94284830ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af05f36b60b25955f785b5d7dd492e94284830ca"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 70,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b2eaae87006cffbe29cd49ccbd5883984209ad80",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -139,6 +139,7 @@ BITCOIN_CORE_H = \\\n   init.h \\\n   interfaces/chain.h \\\n   interfaces/handler.h \\\n+  interfaces/mempool_observer.h \\\n   interfaces/node.h \\\n   interfaces/wallet.h \\\n   key.h \\"
      },
      {
        "sha": "9efc21a2337cb4f221e913f533fecb6b6b099479",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -14,4 +14,6 @@ The following interfaces are defined here:\n \n * [`Init`](init.h) \u2014 used by multiprocess code to access interfaces above on startup. Added in [#10102](https://github.com/bitcoin/bitcoin/pull/10102).\n \n+* [`MempoolObserver`](mempool_observer.h) \u2014 used by fee estimation to be notified on mempool events. Added in [#13949](https://github.com/bitcoin/bitcoin/pull/13949).\n+\n The interfaces above define boundaries between major components of bitcoin code (node, wallet, and gui), making it possible for them to run in different processes, and be tested, developed, and understood independently. These interfaces are not currently designed to be stable or to be used externally."
      },
      {
        "sha": "d77f32e99bd551bbbccbdbe3a9ae26a108b53541",
        "filename": "src/interfaces/mempool_observer.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/interfaces/mempool_observer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/interfaces/mempool_observer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/mempool_observer.h?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_MEMPOOL_OBSERVER_H\n+#define BITCOIN_INTERFACES_MEMPOOL_OBSERVER_H\n+\n+#include <uint256.h>\n+\n+#include <vector>\n+\n+class CTxMemPoolEntry;\n+\n+namespace interfaces {\n+\n+//! Observer interface for mempool operation.\n+class MempoolObserver\n+{\n+public:\n+    virtual ~MempoolObserver() {}\n+\n+    /** Called when a block is attached to the chain\n+      * @param[in] nBlockHeight height of the new block\n+      * @param[in] entries mempool entries included in the block\n+      */\n+    virtual void processBlock(unsigned int nBlockHeight, std::vector<const CTxMemPoolEntry*>& entries) = 0;\n+\n+    /** Called when a transaction is added to the mempool\n+     * @param[in] entry entry added to the mempool\n+     * @param[in] validFeeEstimate whether this entry is a valid basis for estimating fees\n+     */\n+    virtual void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate) = 0;\n+\n+    /** Called when a transaction is removed from the mempool, for reasons other than the tx being in a block\n+     * @param[in] hash the txid of the removed transaction\n+     */\n+    virtual void removeTx(const uint256& hash) = 0;\n+};\n+\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_MEMPOOL_OBSERVER_H"
      },
      {
        "sha": "163ae5f9b2890fbeb31fde2801bb0985d045ec92",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -474,7 +474,13 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n // tracked. Txs that were part of a block have already been removed in\n // processBlockTx to ensure they are never double tracked, but it is\n // of no harm to try to remove them again.\n-bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)\n+void CBlockPolicyEstimator::removeTx(const uint256& hash)\n+{\n+    removeTx(hash, false);\n+}\n+\n+// Private interface to removeTx which allows inBlock removals\n+bool CBlockPolicyEstimator::removeTx(const uint256& hash, bool inBlock)\n {\n     LOCK(m_cs_fee_estimator);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);"
      },
      {
        "sha": "41b99d4948f924920233013874d97d0ad727a3e3",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_POLICY_FEES_H\n \n #include <amount.h>\n+#include <interfaces/mempool_observer.h>\n #include <policy/feerate.h>\n #include <uint256.h>\n #include <random.h>\n@@ -129,7 +130,7 @@ struct FeeCalculation\n  * a certain number of blocks.  Every time a block is added to the best chain, this class records\n  * stats on the transactions included in that block\n  */\n-class CBlockPolicyEstimator\n+class CBlockPolicyEstimator : public interfaces::MempoolObserver\n {\n private:\n     /** Track confirm delays up to 12 blocks for short horizon */\n@@ -187,13 +188,13 @@ class CBlockPolicyEstimator\n \n     /** Process all the transactions that have been included in a block */\n     void processBlock(unsigned int nBlockHeight,\n-                      std::vector<const CTxMemPoolEntry*>& entries);\n+                      std::vector<const CTxMemPoolEntry*>& entries) override;\n \n     /** Process a transaction accepted to the mempool*/\n-    void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n+    void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate) override;\n \n     /** Remove a transaction from the mempool tracking stats*/\n-    bool removeTx(uint256 hash, bool inBlock);\n+    void removeTx(const uint256& hash) override;\n \n     /** DEPRECATED. Return a feerate estimate */\n     CFeeRate estimateFee(int confTarget) const;\n@@ -255,6 +256,11 @@ class CBlockPolicyEstimator\n     /** Process a transaction confirmed in a block*/\n     bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n \n+    /** Remove a transaction from the mempool tracking stats\n+     * This allows for inBlock removals\n+     */\n+    bool removeTx(const uint256& hash, bool inBlock);\n+\n     /** Helper for estimateSmartFee */\n     double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n     /** Helper for estimateSmartFee */"
      },
      {
        "sha": "b1f6dd465fc3a2d17003c56c73ef379dc03588e7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -10,7 +10,6 @@\n #include <consensus/validation.h>\n #include <validation.h>\n #include <policy/policy.h>\n-#include <policy/fees.h>\n #include <policy/settings.h>\n #include <reverse_iterator.h>\n #include <util/system.h>\n@@ -322,8 +321,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n-    nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+CTxMemPool::CTxMemPool(interfaces::MempoolObserver* observer) :\n+    nTransactionsUpdated(0), m_observer(observer)\n {\n     _clear(); //lock free clear\n \n@@ -396,7 +395,7 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n \n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    if (minerPolicyEstimator) {minerPolicyEstimator->processTransaction(entry, validFeeEstimate);}\n+    if (m_observer != nullptr) m_observer->processTransaction(entry, validFeeEstimate);\n \n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n@@ -424,7 +423,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     mapLinks.erase(it);\n     mapTx.erase(it);\n     nTransactionsUpdated++;\n-    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash, false);}\n+    if (m_observer != nullptr) m_observer->removeTx(hash);\n }\n \n // Calculates descendants of entry that are not already in setDescendants, and adds to\n@@ -558,7 +557,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n             entries.push_back(&*i);\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n-    if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n+    if (m_observer != nullptr) m_observer->processBlock(nBlockHeight, entries);\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());"
      },
      {
        "sha": "634fd0fe5ad1055b4323c0d7f8f299b161546bfc",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -17,6 +17,7 @@\n #include <coins.h>\n #include <crypto/siphash.h>\n #include <indirectmap.h>\n+#include <interfaces/mempool_observer.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n@@ -320,8 +321,6 @@ struct descendant_score {};\n struct entry_time {};\n struct ancestor_score {};\n \n-class CBlockPolicyEstimator;\n-\n /**\n  * Information about a mempool transaction.\n  */\n@@ -444,7 +443,7 @@ class CTxMemPool\n private:\n     uint32_t nCheckFrequency GUARDED_BY(cs); //!< Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n-    CBlockPolicyEstimator* minerPolicyEstimator;\n+    interfaces::MempoolObserver* m_observer;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n@@ -561,7 +560,7 @@ class CTxMemPool\n \n     /** Create a new CTxMemPool.\n      */\n-    explicit CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n+    explicit CTxMemPool(interfaces::MempoolObserver* observer = nullptr);\n \n     /**\n      * If sanity-checking is turned on, check makes sure the pool is"
      },
      {
        "sha": "4952e559152a2d4d68b0ef19eb508582973ec04d",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e91140fc7c74b0198146a2be0ceee8b6399c0e/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=e3e91140fc7c74b0198146a2be0ceee8b6399c0e",
        "patch": "@@ -11,7 +11,6 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n-    \"policy/fees -> txmempool -> policy/fees\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/bantablemodel -> qt/clientmodel -> qt/bantablemodel\"\n     \"qt/bitcoingui -> qt/utilitydialog -> qt/bitcoingui\""
      }
    ]
  }
]