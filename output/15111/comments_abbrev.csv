MarcoFalke,2019-01-05T22:17:27Z,"I fail to see how `g_logger` could be a `nullptr`. It is well-defined for the whole duration of `main`.\n\nAbout the randomness failure: We should probably not consume bytes before we did a `RandomInit()`?\n\nCould you clarify how this is happening and maybe include steps to reproduce?",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451695966,451695966,
sipa,2019-01-05T22:38:00Z,"@MarcoFalke After #14955 the initialization of the RNG happens on first use, even before calling `RandomInit()`.",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451697725,451697725,
practicalswift,2019-01-05T22:44:09Z,"@MarcoFalke Consider the case when the PRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence. `RAND_bytes()` will then return `0`.\n\nGive me a few minutes I'll get back with the exact steps to reproduce.",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451698228,451698228,
practicalswift,2019-01-05T23:02:49Z,"@MarcoFalke \n\nSteps to reproduce:\n\n```\n$ git clone https://github.com/bitcoin/bitcoin\n$ cd bitcoin\n$ ./autogen.sh\n$ CC=clang CXX=clang++ ./configure --with-sanitizers=undefined\n$ git apply\ndiff --git a/src/random.cpp b/src/random.cpp\nindex f8ffda136..a3f84798d 100644\n--- a/src/random.cpp\n+++ b/src/random.cpp\n@@ -274,7 +274,7 @@ void GetOSRand(unsigned char *ent32)\n\n",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451699671,451699671,
practicalswift,2019-01-06T00:23:24Z,"@MarcoFalke @sipa These are places I've identified (so far) where randomness is requested before `main`:\n\n1. `CSignatureCache` ctor (`src/script/sigcache.cpp`):\n    Calls `GetRandBytes(nonce.begin(), 32)`\n\n2. `SaltedTxidHasher` ctor (`src/txmempool.cpp`):\n    Calls `GetRand(std::numeric_limits<uint64_t>::{min,max}())` which calls `GetRandBytes(…)`\n\n3. `static uint256 scriptExecutio",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451704287,451704287,
MarcoFalke,2019-01-06T12:28:27Z,It seems odd that we need those globals (e.g. the mempool) before `main` even starts. They should probably be initialized later.,https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451737865,451737865,
practicalswift,2019-01-06T15:36:48Z,"@MarcoFalke That would be nice. And `LogPrintf(…)` should be robust and handle also callers who happen to call it before `main`, right?",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451750811,451750811,
sipa,2019-01-06T15:41:05Z,"There are generally two ways of dealing with initialization order of globals. One is to make all globals unique_ptrs or otherwise non-instantiated at startup and explicitly create all. Another approach is using std::call_once or static locals like #14955 does.\n\nSince C++11 the second can be done with pretty low overhead and without too big hoops, so that's my preference over explicit initializat",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451751138,451751138,
practicalswift,2019-01-06T15:49:32Z,@sipa Do you agree that `LogPrintf(…)` should be robust and handle also callers who happen to call it before `main`?,https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451751800,451751800,
gmaxwell,2019-01-06T23:18:26Z,What is even the point of g_logger in the first place?  It seems to serve no purpose except creating UB when logging is called by global constructors.   I propose instead PR#12954 be reverted: It served no obvious purpose and instead introduced a potentially serious misbehaviour.,https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-451784850,451784850,
practicalswift,2019-01-17T21:36:38Z,@MarcoFalke Could this one get a release milestone? :-),https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-455340869,455340869,
DrahtBot,2019-01-29T20:29:22Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15266](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15266.html) (memory: Construct globals on first use by M",https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-458695044,458695044,
practicalswift,2019-02-01T20:13:45Z,Closing in favour of @MarcoFalke's better fix in #15266. Thanks!,https://github.com/bitcoin/bitcoin/pull/15111#issuecomment-459853207,459853207,
