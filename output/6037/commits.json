[
  {
    "sha": "3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGVlMDI1M2I5ZmMwYzBhNzJiNGMyNDFiYWU3NTVmZTljYWZjZTFi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T11:05:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:37:35Z"
      },
      "message": "Consensus: Consensus version of pow functions",
      "tree": {
        "sha": "d6ccfa41cf3d890390116345b0ab44b90784984e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6ccfa41cf3d890390116345b0ab44b90784984e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ea3bcede1cbbf89486b9d67329e0110c4624ae"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 77,
      "deletions": 61
    },
    "files": [
      {
        "sha": "72d79619b246da4df43a52c31849336f7c17bd04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/consensus.h \\\n   consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "ecbdcecfbfcebf94285b4edd19d2b7deebec4e15",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"arith_uint256.h\"\n #include \"primitives/block.h\"\n-#include \"pow.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "c2b172e0cb685202d90855609cd8e24dff3293d1",
        "filename": "src/consensus/consensus.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_H\n+\n+#include <stdint.h>\n+\n+class CBlockHeader;\n+class CBlockIndex;\n+class uint256;\n+\n+namespace Consensus {\n+\n+class Params;\n+\n+} // namespace Consensus\n+\n+/** Block header validation utility functions */\n+\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "8be349d3c9c180636a7a611c5a8b0665c381597a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -11,6 +11,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/consensus.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\""
      },
      {
        "sha": "4d09469193486e52c057bb883a755ccbc69f26b3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -7,10 +7,10 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -79,17 +79,32 @@ class TxPriorityCompare\n     }\n };\n \n+uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& consensusParams)\n+{\n+    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams);\n+    /// debug print\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+    LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n+    arith_uint256 bnNew, bnOld;\n+    bnNew.SetCompact(nextChallenge);\n+    bnOld.SetCompact(pindexLast->nBits);    \n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", nextChallenge, bnNew.ToString());\n+    return nextChallenge;\n+}\n+\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+        pblock->nBits = GetNextWorkRequiredLog(pindexPrev, pblock, consensusParams);\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n+    const CChainParams& chainparams = Params();\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -98,7 +113,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n+    if (chainparams.MineBlocksOnDemand())\n         pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n     // Create coinbase tx\n@@ -326,8 +341,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+        pblock->nBits          = GetNextWorkRequiredLog(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "de0d3d0219cc4cb75fc8b400af3d4d6439ac01b6",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -7,13 +7,14 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n-#include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-    unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n+    uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n@@ -27,7 +28,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n+            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n@@ -42,19 +43,18 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n-    assert(nHeightFirst >= 0);\n-    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n+    const CBlockIndex* pindexFirst = pindexLast;\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n+        pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n+    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n-    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n+    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n     if (nActualTimespan < params.nPowTargetTimespan/4)\n         nActualTimespan = params.nPowTargetTimespan/4;\n     if (nActualTimespan > params.nPowTargetTimespan*4)\n@@ -72,12 +72,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     if (bnNew > bnPowLimit)\n         bnNew = bnPowLimit;\n \n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n-\n     return bnNew.GetCompact();\n }\n \n@@ -91,11 +85,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return error(\"CheckProofOfWork(): nBits below minimum work\");\n+        return false; // nBits below minimum work\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n+        return false; // hash doesn't match nBits\n \n     return true;\n }"
      },
      {
        "sha": "a501a3dcebe09fa7e815a46f2a901a32a44142be",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -6,20 +6,9 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n-#include \"consensus/params.h\"\n-\n-#include <stdint.h>\n-\n-class CBlockHeader;\n class CBlockIndex;\n-class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n-\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "0f20c2466cbbe046ccb55d4908a8ba782e133ff2",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -5,12 +5,12 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n-#include \"pow.h\"\n+#include \"net.h\"\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "1c184ce3cdaae5abe2b023c4e4419f65b12160e8",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -6,12 +6,11 @@\n // Unit tests for denial-of-service detection/prevention code\n //\n \n-\n-\n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "271914c48d58ff0035effdc094d109f2f17cdf90",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n-#include \"pow.h\"\n-#include \"util.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -13,60 +13,50 @@ using namespace std;\n \n BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n \n+static const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "215ab5581ba22e908e75350a834ff293536eaaf9",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -6,9 +6,9 @@\n #include \"txdb.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n-#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>"
      }
    ]
  }
]