[
  {
    "sha": "c2146d437de048fa7a94e390a4699803e5297c81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjE0NmQ0MzdkZTA0OGZhN2E5NGUzOTBhNDY5OTgwM2U1Mjk3Yzgx",
    "commit": {
      "author": {
        "name": "Peter Bushnell",
        "email": "bushsolo@gmail.com",
        "date": "2019-04-10T13:22:46Z"
      },
      "committer": {
        "name": "Peter Bushnell",
        "email": "bushsolo@gmail.com",
        "date": "2019-04-10T13:22:46Z"
      },
      "message": "Remove curly braces previously used for locks",
      "tree": {
        "sha": "bf0600852ad0a5b41e19f2d2945425b58d884dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf0600852ad0a5b41e19f2d2945425b58d884dd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2146d437de048fa7a94e390a4699803e5297c81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2146d437de048fa7a94e390a4699803e5297c81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2146d437de048fa7a94e390a4699803e5297c81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2146d437de048fa7a94e390a4699803e5297c81/comments",
    "author": {
      "login": "Bushstar",
      "id": 5293433,
      "node_id": "MDQ6VXNlcjUyOTM0MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5293433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bushstar",
      "html_url": "https://github.com/Bushstar",
      "followers_url": "https://api.github.com/users/Bushstar/followers",
      "following_url": "https://api.github.com/users/Bushstar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bushstar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bushstar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bushstar/subscriptions",
      "organizations_url": "https://api.github.com/users/Bushstar/orgs",
      "repos_url": "https://api.github.com/users/Bushstar/repos",
      "events_url": "https://api.github.com/users/Bushstar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bushstar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Bushstar",
      "id": 5293433,
      "node_id": "MDQ6VXNlcjUyOTM0MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5293433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bushstar",
      "html_url": "https://github.com/Bushstar",
      "followers_url": "https://api.github.com/users/Bushstar/followers",
      "following_url": "https://api.github.com/users/Bushstar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bushstar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bushstar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bushstar/subscriptions",
      "organizations_url": "https://api.github.com/users/Bushstar/orgs",
      "repos_url": "https://api.github.com/users/Bushstar/repos",
      "events_url": "https://api.github.com/users/Bushstar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bushstar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c022e8ac401f98c73e6ca62b502b40fc83c3e1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c022e8ac401f98c73e6ca62b502b40fc83c3e1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c022e8ac401f98c73e6ca62b502b40fc83c3e1f"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 58,
      "deletions": 68
    },
    "files": [
      {
        "sha": "1e074ffbf7a6c49c6df952696da5a8321cd6902a",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2146d437de048fa7a94e390a4699803e5297c81/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2146d437de048fa7a94e390a4699803e5297c81/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=c2146d437de048fa7a94e390a4699803e5297c81",
        "patch": "@@ -77,15 +77,13 @@ class AddressTablePriv\n     void refreshAddressTable(interfaces::Wallet& wallet)\n     {\n         cachedAddressTable.clear();\n+        for (const auto& address : wallet.getAddresses())\n         {\n-            for (const auto& address : wallet.getAddresses())\n-            {\n-                AddressTableEntry::Type addressType = translateTransactionType(\n-                        QString::fromStdString(address.purpose), address.is_mine);\n-                cachedAddressTable.append(AddressTableEntry(addressType,\n-                                  QString::fromStdString(address.name),\n-                                  QString::fromStdString(EncodeDestination(address.dest))));\n-            }\n+            AddressTableEntry::Type addressType = translateTransactionType(\n+                    QString::fromStdString(address.purpose), address.is_mine);\n+            cachedAddressTable.append(AddressTableEntry(addressType,\n+                              QString::fromStdString(address.name),\n+                              QString::fromStdString(EncodeDestination(address.dest))));\n         }\n         // qLowerBound() and qUpperBound() require our cachedAddressTable list to be sorted in asc order\n         // Even though the map is already sorted this re-sorting step is needed because the originating map\n@@ -351,13 +349,11 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n             return QString();\n         }\n         // Check for duplicate addresses\n+        if (walletModel->wallet().getAddress(\n+                DecodeDestination(strAddress), /* name= */ nullptr, /* is_mine= */ nullptr, /* purpose= */ nullptr))\n         {\n-            if (walletModel->wallet().getAddress(\n-                    DecodeDestination(strAddress), /* name= */ nullptr, /* is_mine= */ nullptr, /* purpose= */ nullptr))\n-            {\n-                editStatus = DUPLICATE_ADDRESS;\n-                return QString();\n-            }\n+            editStatus = DUPLICATE_ADDRESS;\n+            return QString();\n         }\n     }\n     else if(type == Receive)"
      },
      {
        "sha": "f2f58eb98daf0608cbba3344030c295326dfb0ce",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2146d437de048fa7a94e390a4699803e5297c81/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2146d437de048fa7a94e390a4699803e5297c81/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=c2146d437de048fa7a94e390a4699803e5297c81",
        "patch": "@@ -78,11 +78,9 @@ class TransactionTablePriv\n     {\n         qDebug() << \"TransactionTablePriv::refreshWallet\";\n         cachedWallet.clear();\n-        {\n-            for (const auto& wtx : wallet.getWalletTxs()) {\n-                if (TransactionRecord::showTransaction()) {\n-                    cachedWallet.append(TransactionRecord::decomposeTransaction(wtx));\n-                }\n+        for (const auto& wtx : wallet.getWalletTxs()) {\n+            if (TransactionRecord::showTransaction()) {\n+                cachedWallet.append(TransactionRecord::decomposeTransaction(wtx));\n             }\n         }\n     }"
      },
      {
        "sha": "bea93e8e77b4c5dfaeec47f81042532db44131a9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 49,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2146d437de048fa7a94e390a4699803e5297c81/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2146d437de048fa7a94e390a4699803e5297c81/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c2146d437de048fa7a94e390a4699803e5297c81",
        "patch": "@@ -199,74 +199,70 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return AmountExceedsBalance;\n     }\n \n-    {\n-        CAmount nFeeRequired = 0;\n-        int nChangePosRet = -1;\n-        std::string strFailReason;\n+    CAmount nFeeRequired = 0;\n+    int nChangePosRet = -1;\n+    std::string strFailReason;\n \n-        auto& newTx = transaction.getWtx();\n-        newTx = m_wallet->createTransaction(vecSend, coinControl, true /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n-        transaction.setTransactionFee(nFeeRequired);\n-        if (fSubtractFeeFromAmount && newTx)\n-            transaction.reassignAmounts(nChangePosRet);\n+    auto& newTx = transaction.getWtx();\n+    newTx = m_wallet->createTransaction(vecSend, coinControl, true /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n+    transaction.setTransactionFee(nFeeRequired);\n+    if (fSubtractFeeFromAmount && newTx)\n+        transaction.reassignAmounts(nChangePosRet);\n \n-        if(!newTx)\n+    if(!newTx)\n+    {\n+        if(!fSubtractFeeFromAmount && (total + nFeeRequired) > nBalance)\n         {\n-            if(!fSubtractFeeFromAmount && (total + nFeeRequired) > nBalance)\n-            {\n-                return SendCoinsReturn(AmountWithFeeExceedsBalance);\n-            }\n-            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n-                         CClientUIInterface::MSG_ERROR);\n-            return TransactionCreationFailed;\n+            return SendCoinsReturn(AmountWithFeeExceedsBalance);\n         }\n-\n-        // reject absurdly high fee. (This can never happen because the\n-        // wallet caps the fee at maxTxFee. This merely serves as a\n-        // belt-and-suspenders check)\n-        if (nFeeRequired > m_node.getMaxTxFee())\n-            return AbsurdFee;\n+        Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n+                     CClientUIInterface::MSG_ERROR);\n+        return TransactionCreationFailed;\n     }\n \n+    // reject absurdly high fee. (This can never happen because the\n+    // wallet caps the fee at maxTxFee. This merely serves as a\n+    // belt-and-suspenders check)\n+    if (nFeeRequired > m_node.getMaxTxFee())\n+        return AbsurdFee;\n+\n     return SendCoinsReturn(OK);\n }\n \n WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &transaction)\n {\n     QByteArray transaction_array; /* store serialized transaction */\n \n+    std::vector<std::pair<std::string, std::string>> vOrderForm;\n+    for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n-        std::vector<std::pair<std::string, std::string>> vOrderForm;\n-        for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n-        {\n #ifdef ENABLE_BIP70\n-            if (rcp.paymentRequest.IsInitialized())\n-            {\n-                // Make sure any payment requests involved are still valid.\n-                if (PaymentServer::verifyExpired(rcp.paymentRequest.getDetails())) {\n-                    return PaymentRequestExpired;\n-                }\n-\n-                // Store PaymentRequests in wtx.vOrderForm in wallet.\n-                std::string value;\n-                rcp.paymentRequest.SerializeToString(&value);\n-                vOrderForm.emplace_back(\"PaymentRequest\", std::move(value));\n+        if (rcp.paymentRequest.IsInitialized())\n+        {\n+            // Make sure any payment requests involved are still valid.\n+            if (PaymentServer::verifyExpired(rcp.paymentRequest.getDetails())) {\n+                return PaymentRequestExpired;\n             }\n-            else\n-#endif\n-            if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-                vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n+\n+            // Store PaymentRequests in wtx.vOrderForm in wallet.\n+            std::string value;\n+            rcp.paymentRequest.SerializeToString(&value);\n+            vOrderForm.emplace_back(\"PaymentRequest\", std::move(value));\n         }\n+        else\n+#endif\n+        if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n+            vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n+    }\n \n-        auto& newTx = transaction.getWtx();\n-        std::string rejectReason;\n-        if (!newTx->commit({} /* mapValue */, std::move(vOrderForm), rejectReason))\n-            return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(rejectReason));\n+    auto& newTx = transaction.getWtx();\n+    std::string rejectReason;\n+    if (!newTx->commit({} /* mapValue */, std::move(vOrderForm), rejectReason))\n+        return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(rejectReason));\n \n-        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << newTx->get();\n-        transaction_array.append(&(ssTx[0]), ssTx.size());\n-    }\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << newTx->get();\n+    transaction_array.append(&(ssTx[0]), ssTx.size());\n \n     // Add addresses / update labels that we've sent to the address book,\n     // and emit coinsSent signal for each recipient"
      }
    ]
  }
]