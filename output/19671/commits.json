[
  {
    "sha": "3340dbadd38f5624642cf0e14dddbe6f83a3863b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzQwZGJhZGQzOGY1NjI0NjQyY2YwZTE0ZGRkYmU2ZjgzYTM4NjNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-05T20:37:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-31T16:39:19Z"
      },
      "message": "Remove -zapwallettxes\n\n-zapwallettxes is made a hidden option to inform users that it is\nremoved and they should be using abandontransaction to do the stuck\ntransaction thing.",
      "tree": {
        "sha": "5d7e8398c222c1ef002470fa05a3647d27e572fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d7e8398c222c1ef002470fa05a3647d27e572fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3340dbadd38f5624642cf0e14dddbe6f83a3863b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3340dbadd38f5624642cf0e14dddbe6f83a3863b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3340dbadd38f5624642cf0e14dddbe6f83a3863b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3340dbadd38f5624642cf0e14dddbe6f83a3863b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91af7ef831d32a9db7719c64442a7d76cef5a931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91af7ef831d32a9db7719c64442a7d76cef5a931",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91af7ef831d32a9db7719c64442a7d76cef5a931"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 12,
      "deletions": 184
    },
    "files": [
      {
        "sha": "fb2d56d9a552d937da1ebebbf7c2ed21e1f1f0bd",
        "filename": "doc/release-notes-19671.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/doc/release-notes-19671.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/doc/release-notes-19671.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-19671.md?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -0,0 +1,6 @@\n+Wallet\n+------\n+\n+* The `-zapwallettxes` startup option has been removed and its functionality removed from the wallet.\n+  This option was originally intended to allow for the fee bumping of transactions that did not\n+  signal RBF. This functionality has been superseded with the abandon transaction feature."
      },
      {
        "sha": "031b58373af6713433e7cf47b49e68716a03cf6e",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -49,7 +49,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-walletdir=<dir>\",\n         \"-walletnotify=<cmd>\",\n         \"-walletrbf\",\n-        \"-zapwallettxes=<mode>\",\n         \"-dblogsize=<n>\",\n         \"-flushwallet\",\n         \"-privdb\","
      },
      {
        "sha": "aaa3d957fc11649b3b0265c5acc06c8e82e7d178",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 18,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -66,13 +66,13 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID and %w is replaced by wallet name. %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n     argsman.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n-                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n     argsman.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+\n+    argsman.AddHiddenArgs({\"-zapwallettxes\"});\n }\n \n bool WalletInit::ParameterInteraction() const\n@@ -85,26 +85,12 @@ bool WalletInit::ParameterInteraction() const\n         return true;\n     }\n \n-    const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n-\n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    bool zapwallettxes = gArgs.GetBoolArg(\"-zapwallettxes\", false);\n-    // -zapwallettxes implies dropping the mempool on startup\n-    if (zapwallettxes && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -persistmempool=0\\n\", __func__);\n-    }\n-\n-    // -zapwallettxes implies a rescan\n-    if (zapwallettxes) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-zapwallettxes\"));\n-        }\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -rescan=1\\n\", __func__);\n-        }\n+    if (gArgs.IsArgSet(\"-zapwallettxes\")) {\n+        return InitError(Untranslated(\"-zapwallettxes has been removed. If you are attempting to remove a stuck transaction from your wallet, please use abandontransaction instead.\"));\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))"
      },
      {
        "sha": "d8b75f3fcf74ca2c01e30b270f74057b977496ea",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -2494,7 +2494,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-                \"\\napplied to the new wallet (eg -zapwallettxes, rescan, etc).\\n\",\n+                \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                     {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},"
      },
      {
        "sha": "100ee4a8a2eb746eef8bdf55664946fd1700c506",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 57,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -3178,25 +3178,6 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors CWallet::ZapWalletTx(std::list<CWalletTx>& vWtx)\n-{\n-    DBErrors nZapWalletTxRet = WalletBatch(*database,\"cr+\").ZapWalletTx(vWtx);\n-    if (nZapWalletTxRet == DBErrors::NEED_REWRITE)\n-    {\n-        if (database->Rewrite(\"\\x04pool\"))\n-        {\n-            for (const auto& spk_man_pair : m_spk_managers) {\n-                spk_man_pair.second->RewriteDB();\n-            }\n-        }\n-    }\n-\n-    if (nZapWalletTxRet != DBErrors::LOAD_OK)\n-        return nZapWalletTxRet;\n-\n-    return DBErrors::LOAD_OK;\n-}\n-\n bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& address, const std::string& strName, const std::string& strPurpose)\n {\n     bool fUpdated = false;\n@@ -3778,20 +3759,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n-    // needed to restore wallet transaction meta data after -zapwallettxes\n-    std::list<CWalletTx> vWtx;\n-\n-    if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n-\n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, CreateWalletDatabase(location.GetPath()));\n-        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n-        if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n-            return nullptr;\n-        }\n-    }\n-\n     chain.initMessage(_(\"Loading wallet...\").translated);\n \n     int64_t nStart = GetTimeMillis();\n@@ -4068,30 +4035,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n         walletInstance->chainStateFlushed(chain.getTipLocator());\n         walletInstance->database->IncrementUpdateCounter();\n-\n-        // Restore wallet transaction metadata after -zapwallettxes=1\n-        if (gArgs.GetBoolArg(\"-zapwallettxes\", false) && gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-        {\n-            WalletBatch batch(*walletInstance->database);\n-\n-            for (const CWalletTx& wtxOld : vWtx)\n-            {\n-                uint256 hash = wtxOld.GetHash();\n-                std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n-                if (mi != walletInstance->mapWallet.end())\n-                {\n-                    const CWalletTx* copyFrom = &wtxOld;\n-                    CWalletTx* copyTo = &mi->second;\n-                    copyTo->mapValue = copyFrom->mapValue;\n-                    copyTo->vOrderForm = copyFrom->vOrderForm;\n-                    copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                    copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                    copyTo->fFromMe = copyFrom->fFromMe;\n-                    copyTo->nOrderPos = copyFrom->nOrderPos;\n-                    batch.WriteTx(*copyTo);\n-                }\n-            }\n-        }\n     }\n \n     {"
      },
      {
        "sha": "e9c51065732b62355bea87b25f2a170b505b2728",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -1075,7 +1075,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void chainStateFlushed(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);"
      },
      {
        "sha": "f25acee1e98f376ff1f654ac665ec14a77b25822",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -926,23 +926,6 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors WalletBatch::ZapWalletTx(std::list<CWalletTx>& vWtx)\n-{\n-    // build list of wallet TXs\n-    std::vector<uint256> vTxHash;\n-    DBErrors err = FindWalletTx(vTxHash, vWtx);\n-    if (err != DBErrors::LOAD_OK)\n-        return err;\n-\n-    // erase each wallet TX\n-    for (const uint256& hash : vTxHash) {\n-        if (!EraseTx(hash))\n-            return DBErrors::CORRUPT;\n-    }\n-\n-    return DBErrors::LOAD_OK;\n-}\n-\n void MaybeCompactWalletDB()\n {\n     static std::atomic<bool> fOneThread(false);"
      },
      {
        "sha": "c13de013192deb6db060c09295b5a6a77393e970",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -257,7 +257,6 @@ class WalletBatch\n \n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n-    DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);"
      },
      {
        "sha": "28fdf354dd4619d5412724ef875308cf807da1ca",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -105,7 +105,6 @@\n     'wallet_listtransactions.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n-    'wallet_zapwallettxes.py',\n     'wallet_importmulti.py',\n     'mempool_limit.py',\n     'rpc_txoutproof.py',"
      },
      {
        "sha": "c52c974e0944c46e3357678c5a912437edc71290",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -526,8 +526,6 @@ def run_test(self):\n         maintenance = [\n             '-rescan',\n             '-reindex',\n-            '-zapwallettxes=1',\n-            '-zapwallettxes=2',\n         ]\n         chainlimit = 6\n         for m in maintenance:"
      },
      {
        "sha": "5c9d7ff62938f566419d1f76f7c6029813e7d76d",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -134,11 +134,6 @@ def wallet_file(name):\n         open(not_a_dir, 'a', encoding=\"utf8\").close()\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n-        self.log.info(\"Do not allow -zapwallettxes with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=1', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=2', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      },
      {
        "sha": "1287092cacd350f87237e5efecf7969f1b72d886",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "removed",
        "additions": 0,
        "deletions": 79,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91af7ef831d32a9db7719c64442a7d76cef5a931/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91af7ef831d32a9db7719c64442a7d76cef5a931/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=91af7ef831d32a9db7719c64442a7d76cef5a931",
        "patch": "@@ -1,79 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test the zapwallettxes functionality.\n-\n-- start two bitcoind nodes\n-- create two transactions on node 0 - one is confirmed and one is unconfirmed.\n-- restart node 0 and verify that both the confirmed and the unconfirmed\n-  transactions are still available.\n-- restart node 0 with zapwallettxes and persistmempool, and verify that both\n-  the confirmed and the unconfirmed transactions are still available.\n-- restart node 0 with just zapwallettxes and verify that the confirmed\n-  transactions are still available, but that the unconfirmed transaction has\n-  been zapped.\n-\"\"\"\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_raises_rpc_error,\n-)\n-\n-\n-class ZapWalletTXesTest (BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.setup_clean_chain = True\n-        self.num_nodes = 2\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def run_test(self):\n-        self.log.info(\"Mining blocks...\")\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        self.nodes[1].generate(100)\n-        self.sync_all()\n-\n-        # This transaction will be confirmed\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 10)\n-\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # This transaction will not be confirmed\n-        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 20)\n-\n-        # Confirmed and unconfirmed transactions are now in the wallet.\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n-\n-        # Restart node0. Both confirmed and unconfirmed transactions remain in the wallet.\n-        self.restart_node(0)\n-\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n-\n-        # Restart node0 with zapwallettxes and persistmempool. The unconfirmed\n-        # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n-        self.restart_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n-\n-        self.wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n-        self.nodes[0].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n-\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n-\n-        # Restart node0 with zapwallettxes, but not persistmempool.\n-        # The unconfirmed transaction is zapped and is no longer in the wallet.\n-        self.restart_node(0, [\"-zapwallettxes=2\"])\n-\n-        # tx1 is still be available because it was confirmed\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-\n-        # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n-\n-if __name__ == '__main__':\n-    ZapWalletTXesTest().main()"
      },
      {
        "sha": "f77242d3353aaabc2a71f017bfbcb47845db35f0",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3340dbadd38f5624642cf0e14dddbe6f83a3863b/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=3340dbadd38f5624642cf0e14dddbe6f83a3863b",
        "patch": "@@ -23,7 +23,7 @@\n CMD_GREP_WALLET_HIDDEN_ARGS = r\"git grep --function-context 'void DummyWalletInit::AddWalletOptions' -- {}\".format(CMD_ROOT_DIR)\n CMD_GREP_DOCS = r\"git grep --perl-regexp '{}' {}\".format(REGEX_DOC, CMD_ROOT_DIR)\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb'])\n+SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb', '-zapwallettxes'])\n \n \n def lint_missing_argument_documentation():"
      }
    ]
  }
]