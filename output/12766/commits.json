[
  {
    "sha": "abf190e4e7d79be6f4749dec24a3933e7a8a4507",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmYxOTBlNGU3ZDc5YmU2ZjQ3NDlkZWMyNGEzOTMzZTdhOGE0NTA3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T16:36:37Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:24Z"
      },
      "message": "[tests] fix flake8 warnings in interface_rest.py test",
      "tree": {
        "sha": "c86e72a0929f046b9a556a890c5769dc60f3913e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c86e72a0929f046b9a556a890c5769dc60f3913e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMvcPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7C9oA/2nO\neIw/hsuf5Jk6qw79dic6rrUXL1gtf7LNJG1d80mZAP9dMVHNOIEd/ROj2kcyIOJV\nLElf4iRgQ5b9isRiTNksMg==\n=v1cB\n-----END PGP SIGNATURE-----",
        "payload": "tree c86e72a0929f046b9a556a890c5769dc60f3913e\nparent 18815b4bfb20c9c1112e547217662529d81e4393\nauthor John Newbery <john@johnnewbery.com> 1521736597 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742004 +0300\n\n[tests] fix flake8 warnings in interface_rest.py test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf190e4e7d79be6f4749dec24a3933e7a8a4507/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18815b4bfb20c9c1112e547217662529d81e4393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18815b4bfb20c9c1112e547217662529d81e4393",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18815b4bfb20c9c1112e547217662529d81e4393"
      }
    ],
    "stats": {
      "total": 245,
      "additions": 116,
      "deletions": 129
    },
    "files": [
      {
        "sha": "4f39dcd02457051a7d9da4dc1e3bc3da88c7ea9d",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 116,
        "deletions": 129,
        "changes": 245,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abf190e4e7d79be6f4749dec24a3933e7a8a4507/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abf190e4e7d79be6f4749dec24a3933e7a8a4507/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=abf190e4e7d79be6f4749dec24a3933e7a8a4507",
        "patch": "@@ -3,25 +3,26 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from struct import *\n+from decimal import Decimal\n from io import BytesIO\n+import json\n from codecs import encode\n+from struct import pack, unpack\n \n import http.client\n import urllib.parse\n \n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = unpack(b\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-#allows simple http get calls\n-def http_get_call(host, port, path, response_object = 0):\n+from test_framework.messages import deser_uint256\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    connect_nodes_bi,\n+    hex_str_to_bytes,\n+)\n+\n+def http_get_call(host, port, path, response_object=0):\n+    \"\"\"Make a simple HTTP GET request.\"\"\"\n     conn = http.client.HTTPConnection(host, port)\n     conn.request('GET', path)\n \n@@ -30,8 +31,8 @@ def http_get_call(host, port, path, response_object = 0):\n \n     return conn.getresponse().read().decode('utf-8')\n \n-#allows simple http post calls with a request body\n-def http_post_call(host, port, path, requestdata = '', response_object = 0):\n+def http_post_call(host, port, path, requestdata='', response_object=0):\n+    \"\"\"Make a simple HTTP POST request with a request body.\"\"\"\n     conn = http.client.HTTPConnection(host, port)\n     conn.request('POST', path, requestdata)\n \n@@ -69,87 +70,83 @@ def run_test(self):\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\")) #balance now should be 0.1 on node 1\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))  # balance now should be 0.1 on node 1\n \n         # load the latest 0.1 tx over the REST API\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n+        json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + txid + self.FORMAT_SEPARATOR + \"json\")\n         json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n+        vintx = json_obj['vin'][0]['txid']  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n         n = 0\n         for vout in json_obj['vout']:\n             if vout['value'] == 0.1:\n                 n = vout['n']\n \n-\n         #######################################\n         # GETUTXOS: query an unspent outpoint #\n         #######################################\n-        json_request = '/'+txid+'-'+str(n)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/' + txid + '-' + str(n)\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is one utxo\n+        # Make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['utxos'][0]['value'], 0.1)\n \n-\n         #################################################\n         # GETUTXOS: now query an already spent outpoint #\n         #################################################\n-        json_request = '/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/' + vintx + '-0'\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is no utxo in the response because this oupoint has been spent\n+        # Make sure there is no utxo in the response because this oupoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        #check bitmap\n+        # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n-\n         ##################################################\n         # GETUTXOS: now check both with the same request #\n         ##################################################\n-        json_request = '/'+txid+'-'+str(n)+'/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/' + txid + '-' + str(n) + '/' + vintx + '-0'\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n-        #test binary response\n+        # Test binary response\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        binaryRequest = b'\\x01\\x02'\n-        binaryRequest += hex_str_to_bytes(txid)\n-        binaryRequest += pack(\"i\", n)\n-        binaryRequest += hex_str_to_bytes(vintx)\n-        binaryRequest += pack(\"i\", 0)\n+        bin_request = b'\\x01\\x02'\n+        bin_request += hex_str_to_bytes(txid)\n+        bin_request += pack(\"i\", n)\n+        bin_request += hex_str_to_bytes(vintx)\n+        bin_request += pack(\"i\", 0)\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n+        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos' + self.FORMAT_SEPARATOR + 'bin', bin_request)\n         output = BytesIO()\n         output.write(bin_response)\n         output.seek(0)\n-        chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n-\n-        assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n-        assert_equal(chainHeight, 102) #chain height must be 102\n+        chain_height = unpack(\"i\", output.read(4))[0]\n+        response_hash = hex(deser_uint256(output))[2:].zfill(64)\n \n+        assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n+        assert_equal(chain_height, 102)  # chain height must be 102\n \n         ############################\n         # GETUTXOS: mempool checks #\n         ############################\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n+        json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + txid + self.FORMAT_SEPARATOR + \"json\")\n         json_obj = json.loads(json_string)\n         # get the spent output to later check for utxo (should be spent by then)\n         spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n@@ -160,195 +157,185 @@ def run_test(self):\n                 n = vout['n']\n         spending = '{}-{}'.format(txid, n)\n \n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/' + spending\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 0)  # there should be no outpoint because it has just added to the mempool\n \n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/checkmempool/' + spending\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because it has just added to the mempool\n \n-        json_request = '/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/' + spent\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because its spending tx is not confirmed\n+        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because its spending tx is not confirmed\n \n-        json_request = '/checkmempool/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/checkmempool/' + spent\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just spent (by mempool tx)\n+        assert_equal(len(json_obj['utxos']), 0)  # there should be no outpoint because it has just spent (by mempool tx)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/' + spending\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n+        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because it was mined\n \n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n+        json_request = '/checkmempool/' + spending\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n+        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because it was mined\n \n-        #do some invalid requests\n+        # Do some invalid requests\n         json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + self.FORMAT_SEPARATOR + 'json', json_request, True)\n+        assert_equal(response.status, 400)  # must be a 400 because we send an invalid json request\n \n         json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + self.FORMAT_SEPARATOR + 'bin', json_request, True)\n+        assert_equal(response.status, 400)  # must be a 400 because we send an invalid bin request\n \n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool' + self.FORMAT_SEPARATOR + 'bin', '', True)\n+        assert_equal(response.status, 400)  # must be a 400 because we send an invalid bin request\n \n-        #test limits\n+        # Test limits\n         json_request = '/checkmempool/'\n         for x in range(0, 20):\n-            json_request += txid+'-'+str(n)+'/'\n+            json_request += txid + '-' + str(n) + '/'\n         json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json', '', True)\n+        assert_equal(response.status, 400)  # must be a 400 because we exceeding the limits\n \n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n-            json_request += txid+'-'+str(n)+'/'\n+            json_request += txid + '-' + str(n) + '/'\n         json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json', '', True)\n+        assert_equal(response.status, 200)  # must be a 200 because we are within the limits\n \n-        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n+        self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n         ################\n         # /rest/block/ #\n         ################\n \n-        # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n+        # Check binary format\n+        response = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + \"bin\", True)\n         assert_equal(response.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n         response_str = response.read()\n \n-        # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n+        # Compare with block header\n+        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/' + bb_hash + self.FORMAT_SEPARATOR + \"bin\", True)\n         assert_equal(response_header.status, 200)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n         response_header_str = response_header.read()\n         assert_equal(response_str[0:80], response_header_str)\n \n-        # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n+        # Check block hex format\n+        response_hex = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + \"hex\", True)\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n         assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n \n-        # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n+        # Compare with hex block header\n+        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/' + bb_hash + self.FORMAT_SEPARATOR + \"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n         assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n \n-        # check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n+        # Check json format\n+        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + 'json')\n         block_json_obj = json.loads(block_json_string)\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n-        # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n+        # Compare with json block header\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/' + bb_hash + self.FORMAT_SEPARATOR + \"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n-        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n-        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+        assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n-        #compare with normal RPC block response\n+        # Compare with normal RPC block response\n         rpc_block_json = self.nodes[0].getblock(bb_hash)\n-        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n-        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n-        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n-        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n-        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n-        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n-        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n-        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n-        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n-        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n-        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n-\n-        #see if we can get 5 headers in one response\n+        for key in ['hash', 'confirmations', 'height', 'version', 'merkleroot', 'time', 'nonce', 'bits', 'difficulty', 'chainwork', 'previousblockhash']:\n+            assert_equal(json_obj[0][key], rpc_block_json[key])\n+\n+        # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/' + bb_hash + self.FORMAT_SEPARATOR + \"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n+        assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n-        # do tx test\n+        # Do tx test\n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n+        json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + tx_hash + self.FORMAT_SEPARATOR + \"json\")\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)\n \n-        # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n+        # Check hex format response\n+        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/' + tx_hash + self.FORMAT_SEPARATOR + \"hex\", True)\n         assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n-\n-        # check block tx details\n-        # let's make 3 tx and mine them on node 1\n+        # Check block tx details\n+        # Let's make 3 tx and mine them on node 1\n         txs = []\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         self.sync_all()\n \n-        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n+        # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info' + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n-        # check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n+        # Check that there are our submitted transactions in the TX memory pool\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents' + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n         for i, tx in enumerate(txs):\n             assert_equal(tx in json_obj, True)\n-            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n-            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n+            assert_equal(json_obj[tx]['spentby'], txs[i + 1:i + 2])\n+            assert_equal(json_obj[tx]['depends'], txs[i - 1:i])\n \n-        # now mine the transactions\n+        # Now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()\n \n-        #check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n+        # Check if the 3 tx show up in the new block\n+        json_string = http_get_call(url.hostname, url.port, '/rest/block/' + newblockhash[0] + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n         for tx in json_obj['tx']:\n-            if not 'coinbase' in tx['vin'][0]: #exclude coinbase\n+            if 'coinbase' not in tx['vin'][0]:  # exclude coinbase\n                 assert_equal(tx['txid'] in txs, True)\n \n-        #check the same but without tx details\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/notxdetails/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n+        # Check the same but without tx details\n+        json_string = http_get_call(url.hostname, url.port, '/rest/block/notxdetails/' + newblockhash[0] + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n         for tx in txs:\n             assert_equal(tx in json_obj['tx'], True)\n \n-        #test rest bestblock\n+        # Test rest bestblock\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         json_string = http_get_call(url.hostname, url.port, '/rest/chaininfo.json')\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['bestblockhash'], bb_hash)\n \n if __name__ == '__main__':\n-    RESTTest ().main ()\n+    RESTTest().main()"
      }
    ]
  },
  {
    "sha": "3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmQ0NDkwZGIxMzgxYzBhNjgxMTJlZGZiMmIyZTVmNTkwNmRhYjhj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T17:24:37Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:29Z"
      },
      "message": "[tests] improve logging and documentation in interface_rest.py",
      "tree": {
        "sha": "4cc6e4309bcf1328564eca840da8efe1b3d12386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cc6e4309bcf1328564eca840da8efe1b3d12386"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMv8PHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7B14A/iES\nG2TiDg1m6Q8fasjc0nnJwCn0HxI4k+JZQ0f3NDemAP9wrSDGcw7gLy5lLgUcME5d\nR5XdQp2Hp+zJDLoWHJdF+A==\n=GZPS\n-----END PGP SIGNATURE-----",
        "payload": "tree 4cc6e4309bcf1328564eca840da8efe1b3d12386\nparent abf190e4e7d79be6f4749dec24a3933e7a8a4507\nauthor John Newbery <john@johnnewbery.com> 1521739477 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742009 +0300\n\n[tests] improve logging and documentation in interface_rest.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd4490db1381c0a68112edfb2b2e5f5906dab8c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abf190e4e7d79be6f4749dec24a3933e7a8a4507",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf190e4e7d79be6f4749dec24a3933e7a8a4507",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abf190e4e7d79be6f4749dec24a3933e7a8a4507"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 31,
      "deletions": 29
    },
    "files": [
      {
        "sha": "7e0fe6080a2216160aa7e79bb70fe1fc506caba3",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 31,
        "deletions": 29,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd4490db1381c0a68112edfb2b2e5f5906dab8c/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd4490db1381c0a68112edfb2b2e5f5906dab8c/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
        "patch": "@@ -55,7 +55,8 @@ def setup_network(self, split=False):\n \n     def run_test(self):\n         url = urllib.parse.urlparse(self.nodes[0].url)\n-        self.log.info(\"Mining blocks...\")\n+\n+        self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -70,9 +71,10 @@ def run_test(self):\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))  # balance now should be 0.1 on node 1\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n+\n+        self.log.info(\"Load the transaction using the /tx URI\")\n \n-        # load the latest 0.1 tx over the REST API\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + txid + self.FORMAT_SEPARATOR + \"json\")\n         json_obj = json.loads(json_string)\n         vintx = json_obj['vin'][0]['txid']  # get the vin to later check for utxo (should be spent by then)\n@@ -82,9 +84,8 @@ def run_test(self):\n             if vout['value'] == 0.1:\n                 n = vout['n']\n \n-        #######################################\n-        # GETUTXOS: query an unspent outpoint #\n-        #######################################\n+        self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n+\n         json_request = '/' + txid + '-' + str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n@@ -96,9 +97,8 @@ def run_test(self):\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['utxos'][0]['value'], 0.1)\n \n-        #################################################\n-        # GETUTXOS: now query an already spent outpoint #\n-        #################################################\n+        self.log.info(\"Query a spent TXO using the /getutxos URI\")\n+\n         json_request = '/' + vintx + '-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n@@ -112,16 +112,16 @@ def run_test(self):\n         # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n-        ##################################################\n-        # GETUTXOS: now check both with the same request #\n-        ##################################################\n+        self.log.info(\"Query two TXOs using the /getutxos URI\")\n+\n         json_request = '/' + txid + '-' + str(n) + '/' + vintx + '-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n-        # Test binary response\n+        self.log.info(\"Query the TXOs using the /getutxos URI with a binary response\")\n+\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         bin_request = b'\\x01\\x02'\n@@ -140,9 +140,10 @@ def run_test(self):\n         assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n         assert_equal(chain_height, 102)  # chain height must be 102\n \n-        ############################\n-        # GETUTXOS: mempool checks #\n-        ############################\n+        self.log.info(\"Test the /getutxos URI with and without /checkmempool\")\n+        # Create a transaction, check that it's found with /checkmempool, but\n+        # not found without. Then confirm the transaction and check that it's\n+        # found with or without /checkmempool.\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n@@ -160,35 +161,35 @@ def run_test(self):\n         json_request = '/' + spending\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0)  # there should be no outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 0)\n \n         json_request = '/checkmempool/' + spending\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 1)\n \n         json_request = '/' + spent\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because its spending tx is not confirmed\n+        assert_equal(len(json_obj['utxos']), 1)\n \n         json_request = '/checkmempool/' + spent\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0)  # there should be no outpoint because it has just spent (by mempool tx)\n+        assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         json_request = '/' + spending\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because it was mined\n+        assert_equal(len(json_obj['utxos']), 1)\n \n         json_request = '/checkmempool/' + spending\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1)  # there should be an outpoint because it was mined\n+        assert_equal(len(json_obj['utxos']), 1)\n \n         # Do some invalid requests\n         json_request = '{\"checkmempool'\n@@ -220,9 +221,7 @@ def run_test(self):\n         self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n-        ################\n-        # /rest/block/ #\n-        ################\n+        self.log.info(\"Test the /block and /headers URIs\")\n \n         # Check binary format\n         response = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + \"bin\", True)\n@@ -279,7 +278,8 @@ def run_test(self):\n         json_obj = json.loads(response_header_json_str)\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n-        # Do tx test\n+        self.log.info(\"Test the /tx URI\")\n+\n         tx_hash = block_json_obj['tx'][0]['txid']\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + tx_hash + self.FORMAT_SEPARATOR + \"json\")\n         json_obj = json.loads(json_string)\n@@ -290,8 +290,9 @@ def run_test(self):\n         assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n-        # Check block tx details\n-        # Let's make 3 tx and mine them on node 1\n+        self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n+\n+        # Make 3 tx and mine them on node 1\n         txs = []\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n@@ -330,7 +331,8 @@ def run_test(self):\n         for tx in txs:\n             assert_equal(tx in json_obj['tx'], True)\n \n-        # Test rest bestblock\n+        self.log.info(\"Test the /chaininfo URI\")\n+\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         json_string = http_get_call(url.hostname, url.port, '/rest/chaininfo.json')"
      }
    ]
  },
  {
    "sha": "7a3181a7676c822b2a369c745e0c45b0347c78e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTMxODFhNzY3NmM4MjJiMmEzNjljNzQ1ZTBjNDViMDM0N2M3OGUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T18:26:37Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:37Z"
      },
      "message": "[tests] Make json request building more consistent in interface_rest.py",
      "tree": {
        "sha": "064f5fa7546c48f93b1eb59645e328cb3c073ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/064f5fa7546c48f93b1eb59645e328cb3c073ca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a3181a7676c822b2a369c745e0c45b0347c78e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMwcPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7nskA/Rjl\nq/TPrfcUshd/wvNMx6+NjdxP7DNciKQgoKHGzgxzAP9sxvxRBmF/uGHVXMZdOeLy\nCj0OgAHMQdItNHkRLTOfPg==\n=pmAv\n-----END PGP SIGNATURE-----",
        "payload": "tree 064f5fa7546c48f93b1eb59645e328cb3c073ca2\nparent 3fd4490db1381c0a68112edfb2b2e5f5906dab8c\nauthor John Newbery <john@johnnewbery.com> 1521743197 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742017 +0300\n\n[tests] Make json request building more consistent in interface_rest.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a3181a7676c822b2a369c745e0c45b0347c78e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a3181a7676c822b2a369c745e0c45b0347c78e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a3181a7676c822b2a369c745e0c45b0347c78e1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd4490db1381c0a68112edfb2b2e5f5906dab8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd4490db1381c0a68112edfb2b2e5f5906dab8c"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 43,
      "deletions": 49
    },
    "files": [
      {
        "sha": "79c1fe1a89086c97a243a31edc14b88c069b9174",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 43,
        "deletions": 49,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a3181a7676c822b2a369c745e0c45b0347c78e1/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a3181a7676c822b2a369c745e0c45b0347c78e1/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=7a3181a7676c822b2a369c745e0c45b0347c78e1",
        "patch": "@@ -42,8 +42,6 @@ def http_post_call(host, port, path, requestdata='', response_object=0):\n     return conn.getresponse().read()\n \n class RESTTest (BitcoinTestFramework):\n-    FORMAT_SEPARATOR = \".\"\n-\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n@@ -75,7 +73,8 @@ def run_test(self):\n \n         self.log.info(\"Load the transaction using the /tx URI\")\n \n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + txid + self.FORMAT_SEPARATOR + \"json\")\n+        json_request = \"/rest/tx/{}.json\".format(txid)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         vintx = json_obj['vin'][0]['txid']  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n@@ -86,8 +85,8 @@ def run_test(self):\n \n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        json_request = '/' + txid + '-' + str(n)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = \"/rest/getutxos/{}-{}.json\".format(txid, str(n))\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n \n         # Check chainTip response\n@@ -99,8 +98,8 @@ def run_test(self):\n \n         self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        json_request = '/' + vintx + '-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = \"/rest/getutxos/{}-0.json\".format(vintx)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n \n         # Check chainTip response\n@@ -114,8 +113,8 @@ def run_test(self):\n \n         self.log.info(\"Query two TXOs using the /getutxos URI\")\n \n-        json_request = '/' + txid + '-' + str(n) + '/' + vintx + '-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = \"/rest/getutxos/{}-{}/{}-0.json\".format(txid, str(n), vintx)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n@@ -130,7 +129,7 @@ def run_test(self):\n         bin_request += hex_str_to_bytes(vintx)\n         bin_request += pack(\"i\", 0)\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos' + self.FORMAT_SEPARATOR + 'bin', bin_request)\n+        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos.bin', bin_request)\n         output = BytesIO()\n         output.write(bin_response)\n         output.seek(0)\n@@ -147,7 +146,8 @@ def run_test(self):\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + txid + self.FORMAT_SEPARATOR + \"json\")\n+        json_request = \"/rest/tx/{}.json\".format(txid)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         # get the spent output to later check for utxo (should be spent by then)\n         spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n@@ -158,64 +158,58 @@ def run_test(self):\n                 n = vout['n']\n         spending = '{}-{}'.format(txid, n)\n \n-        json_request = '/' + spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = '/rest/getutxos/{}.json'.format(spending)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        json_request = '/checkmempool/' + spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = '/rest/getutxos/checkmempool/{}.json'.format(spending)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_request = '/' + spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = '/rest/getutxos/{}.json'.format(spent)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_request = '/checkmempool/' + spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = '/rest/getutxos/checkmempool/{}.json'.format(spent)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/' + spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = '/rest/getutxos/{}.json'.format(spending)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_request = '/checkmempool/' + spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json')\n+        json_request = '/rest/getutxos/checkmempool/{}.json'.format(spending)\n+        json_string = http_get_call(url.hostname, url.port, json_request)\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n \n         # Do some invalid requests\n         json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + self.FORMAT_SEPARATOR + 'json', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos.json', json_request, True)\n         assert_equal(response.status, 400)  # must be a 400 because we send an invalid json request\n \n         json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + self.FORMAT_SEPARATOR + 'bin', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos.bin', json_request, True)\n         assert_equal(response.status, 400)  # must be a 400 because we send an invalid bin request\n \n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool' + self.FORMAT_SEPARATOR + 'bin', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool.json', '', True)\n         assert_equal(response.status, 400)  # must be a 400 because we send an invalid bin request\n \n         # Test limits\n-        json_request = '/checkmempool/'\n-        for x in range(0, 20):\n-            json_request += txid + '-' + str(n) + '/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json', '', True)\n+        json_request = '/rest/getutxos/checkmempool/' + '/'.join([\"{}-{}\".format(txid, n) for n in range(20)]) + '.json'\n+        response = http_post_call(url.hostname, url.port, json_request, '', True)\n         assert_equal(response.status, 400)  # must be a 400 because we exceeding the limits\n \n-        json_request = '/checkmempool/'\n-        for x in range(0, 15):\n-            json_request += txid + '-' + str(n) + '/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos' + json_request + self.FORMAT_SEPARATOR + 'json', '', True)\n+        json_request = '/rest/getutxos/checkmempool/' + '/'.join(['{}-{}'.format(txid, n) for n in range(15)]) + '.json'\n+        response = http_post_call(url.hostname, url.port, json_request, '', True)\n         assert_equal(response.status, 200)  # must be a 200 because we are within the limits\n \n         self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n@@ -224,40 +218,40 @@ def run_test(self):\n         self.log.info(\"Test the /block and /headers URIs\")\n \n         # Check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + \"bin\", True)\n+        response = http_get_call(url.hostname, url.port, '/rest/block/{}.bin'.format(bb_hash), True)\n         assert_equal(response.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n         response_str = response.read()\n \n         # Compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/' + bb_hash + self.FORMAT_SEPARATOR + \"bin\", True)\n+        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/{}.bin'.format(bb_hash), True)\n         assert_equal(response_header.status, 200)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n         response_header_str = response_header.read()\n         assert_equal(response_str[0:80], response_header_str)\n \n         # Check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + \"hex\", True)\n+        response_hex = http_get_call(url.hostname, url.port, '/rest/block/{}.hex'.format(bb_hash), True)\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n         assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n \n         # Compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/' + bb_hash + self.FORMAT_SEPARATOR + \"hex\", True)\n+        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/{}.hex'.format(bb_hash), True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n         assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n \n         # Check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/' + bb_hash + self.FORMAT_SEPARATOR + 'json')\n+        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/{}.json'.format(bb_hash))\n         block_json_obj = json.loads(block_json_string)\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n         # Compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/' + bb_hash + self.FORMAT_SEPARATOR + \"json\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/{}.json'.format(bb_hash), True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n@@ -272,7 +266,7 @@ def run_test(self):\n         # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/' + bb_hash + self.FORMAT_SEPARATOR + \"json\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/{}.json'.format(bb_hash), True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str)\n@@ -281,12 +275,12 @@ def run_test(self):\n         self.log.info(\"Test the /tx URI\")\n \n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/' + tx_hash + self.FORMAT_SEPARATOR + \"json\")\n+        json_string = http_get_call(url.hostname, url.port, '/rest/tx/{}.json'.format(tx_hash))\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)\n \n         # Check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/' + tx_hash + self.FORMAT_SEPARATOR + \"hex\", True)\n+        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/{}.hex'.format(tx_hash), True)\n         assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n@@ -300,14 +294,14 @@ def run_test(self):\n         self.sync_all()\n \n         # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info' + self.FORMAT_SEPARATOR + 'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info.json')\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n         # Check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents' + self.FORMAT_SEPARATOR + 'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents.json')\n         json_obj = json.loads(json_string)\n         for i, tx in enumerate(txs):\n             assert_equal(tx in json_obj, True)\n@@ -319,14 +313,14 @@ def run_test(self):\n         self.sync_all()\n \n         # Check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/' + newblockhash[0] + self.FORMAT_SEPARATOR + 'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/block/{}.json'.format(newblockhash[0]))\n         json_obj = json.loads(json_string)\n         for tx in json_obj['tx']:\n             if 'coinbase' not in tx['vin'][0]:  # exclude coinbase\n                 assert_equal(tx['txid'] in txs, True)\n \n         # Check the same but without tx details\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/notxdetails/' + newblockhash[0] + self.FORMAT_SEPARATOR + 'json')\n+        json_string = http_get_call(url.hostname, url.port, '/rest/block/notxdetails/{}.json'.format(newblockhash[0]))\n         json_obj = json.loads(json_string)\n         for tx in txs:\n             assert_equal(tx in json_obj['tx'], True)"
      }
    ]
  },
  {
    "sha": "ad00fbed3cfcfe7e921500179183589ac4aad419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDAwZmJlZDNjZmNmZTdlOTIxNTAwMTc5MTgzNTg5YWM0YWFkNDE5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T20:37:09Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:45Z"
      },
      "message": "[tests] refactor interface_rest.py to avoid code repetition\n\nAlso refactor txout index parsing and formatting.",
      "tree": {
        "sha": "fe842545d1a575fc687ef00c6b18a33df7fafdc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe842545d1a575fc687ef00c6b18a33df7fafdc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad00fbed3cfcfe7e921500179183589ac4aad419",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMw4PHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7ixIBAPxp\ngoxb0fvdLvRK4n1XJC/egU+b4u00qJ+5lVeZOMH6AP0eyZuMyT8yEFED8lBs10Y3\no06CL6uxaIEqf76MF1HP9Q==\n=d+of\n-----END PGP SIGNATURE-----",
        "payload": "tree fe842545d1a575fc687ef00c6b18a33df7fafdc1\nparent 7a3181a7676c822b2a369c745e0c45b0347c78e1\nauthor John Newbery <john@johnnewbery.com> 1521751029 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742025 +0300\n\n[tests] refactor interface_rest.py to avoid code repetition\n\nAlso refactor txout index parsing and formatting.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad00fbed3cfcfe7e921500179183589ac4aad419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad00fbed3cfcfe7e921500179183589ac4aad419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad00fbed3cfcfe7e921500179183589ac4aad419/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a3181a7676c822b2a369c745e0c45b0347c78e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a3181a7676c822b2a369c745e0c45b0347c78e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a3181a7676c822b2a369c745e0c45b0347c78e1"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 92,
      "deletions": 125
    },
    "files": [
      {
        "sha": "1af986a05e2ead7e2ba4a7acca2213efabba076b",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 92,
        "deletions": 125,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad00fbed3cfcfe7e921500179183589ac4aad419/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad00fbed3cfcfe7e921500179183589ac4aad419/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=ad00fbed3cfcfe7e921500179183589ac4aad419",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n from decimal import Decimal\n+from enum import Enum\n from io import BytesIO\n import json\n from codecs import encode\n@@ -21,25 +22,20 @@\n     hex_str_to_bytes,\n )\n \n-def http_get_call(host, port, path, response_object=0):\n-    \"\"\"Make a simple HTTP GET request.\"\"\"\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('GET', path)\n+class ReqType(Enum):\n+    JSON = 1\n+    BIN = 2\n+    HEX = 3\n \n-    if response_object:\n-        return conn.getresponse()\n+class RetType(Enum):\n+    OBJ = 1\n+    BYTES = 2\n+    JSON = 3\n \n-    return conn.getresponse().read().decode('utf-8')\n-\n-def http_post_call(host, port, path, requestdata='', response_object=0):\n-    \"\"\"Make a simple HTTP POST request with a request body.\"\"\"\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('POST', path, requestdata)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read()\n+def filter_output_indices_by_value(vouts, value):\n+    for vout in vouts:\n+        if vout['value'] == value:\n+            yield vout['n']\n \n class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -50,10 +46,35 @@ def set_test_params(self):\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)\n+        self.url = urllib.parse.urlparse(self.nodes[0].url)\n+\n+    def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n+        rest_uri = '/rest' + uri\n+        if req_type == ReqType.JSON:\n+            rest_uri += '.json'\n+        elif req_type == ReqType.BIN:\n+            rest_uri += '.bin'\n+        elif req_type == ReqType.HEX:\n+            rest_uri += '.hex'\n+\n+        conn = http.client.HTTPConnection(self.url.hostname, self.url.port)\n+        self.log.debug('%s %s %s', http_method, rest_uri, body)\n+        if http_method == 'GET':\n+            conn.request('GET', rest_uri)\n+        elif http_method == 'POST':\n+            conn.request('POST', rest_uri, body)\n+        resp = conn.getresponse()\n+\n+        assert_equal(resp.status, status)\n+\n+        if ret_type == RetType.OBJ:\n+            return resp\n+        elif ret_type == RetType.BYTES:\n+            return resp.read()\n+        elif ret_type == RetType.JSON:\n+            return json.loads(resp.read().decode('utf-8'), parse_float=Decimal)\n \n     def run_test(self):\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n         self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n \n         self.nodes[0].generate(1)\n@@ -73,49 +94,40 @@ def run_test(self):\n \n         self.log.info(\"Load the transaction using the /tx URI\")\n \n-        json_request = \"/rest/tx/{}.json\".format(txid)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid']  # get the vin to later check for utxo (should be spent by then)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n \n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        json_request = \"/rest/getutxos/{}-{}.json\".format(txid, str(n))\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n \n         # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n         # Make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n-        assert_equal(json_obj['utxos'][0]['value'], 0.1)\n+        assert_equal(json_obj['utxos'][0]['value'], Decimal('0.1'))\n \n         self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        json_request = \"/rest/getutxos/{}-0.json\".format(vintx)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n \n         # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        # Make sure there is no utxo in the response because this oupoint has been spent\n+        # Make sure there is no utxo in the response because this outpoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n         # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n         self.log.info(\"Query two TXOs using the /getutxos URI\")\n \n-        json_request = \"/rest/getutxos/{}-{}/{}-0.json\".format(txid, str(n), vintx)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}/{}-{}\".format(*(spending + spent)))\n+\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n@@ -124,12 +136,11 @@ def run_test(self):\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         bin_request = b'\\x01\\x02'\n-        bin_request += hex_str_to_bytes(txid)\n-        bin_request += pack(\"i\", n)\n-        bin_request += hex_str_to_bytes(vintx)\n-        bin_request += pack(\"i\", 0)\n+        for txid, n in [spending, spent]:\n+            bin_request += hex_str_to_bytes(txid)\n+            bin_request += pack(\"i\", n)\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos.bin', bin_request)\n+        bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n         output = BytesIO()\n         output.write(bin_response)\n         output.seek(0)\n@@ -146,115 +157,81 @@ def run_test(self):\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_request = \"/rest/tx/{}.json\".format(txid)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n         # get the spent output to later check for utxo (should be spent by then)\n-        spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n-        spending = '{}-{}'.format(txid, n)\n-\n-        json_request = '/rest/getutxos/{}.json'.format(spending)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        json_request = '/rest/getutxos/checkmempool/{}.json'.format(spending)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_request = '/rest/getutxos/{}.json'.format(spent)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_request = '/rest/getutxos/checkmempool/{}.json'.format(spent)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spent))\n         assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/rest/getutxos/{}.json'.format(spending)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n         assert_equal(len(json_obj['utxos']), 1)\n \n-        json_request = '/rest/getutxos/checkmempool/{}.json'.format(spending)\n-        json_string = http_get_call(url.hostname, url.port, json_request)\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n         assert_equal(len(json_obj['utxos']), 1)\n \n         # Do some invalid requests\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos.json', json_request, True)\n-        assert_equal(response.status, 400)  # must be a 400 because we send an invalid json request\n-\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos.bin', json_request, True)\n-        assert_equal(response.status, 400)  # must be a 400 because we send an invalid bin request\n-\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool.json', '', True)\n-        assert_equal(response.status, 400)  # must be a 400 because we send an invalid bin request\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.JSON, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n \n         # Test limits\n-        json_request = '/rest/getutxos/checkmempool/' + '/'.join([\"{}-{}\".format(txid, n) for n in range(20)]) + '.json'\n-        response = http_post_call(url.hostname, url.port, json_request, '', True)\n-        assert_equal(response.status, 400)  # must be a 400 because we exceeding the limits\n+        long_uri = '/'.join([\"{}-{}\".format(txid, n) for n in range(20)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n \n-        json_request = '/rest/getutxos/checkmempool/' + '/'.join(['{}-{}'.format(txid, n) for n in range(15)]) + '.json'\n-        response = http_post_call(url.hostname, url.port, json_request, '', True)\n-        assert_equal(response.status, 200)  # must be a 200 because we are within the limits\n+        long_uri = '/'.join(['{}-{}'.format(txid, n) for n in range(15)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n \n         self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n         self.log.info(\"Test the /block and /headers URIs\")\n \n         # Check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/{}.bin'.format(bb_hash), True)\n-        assert_equal(response.status, 200)\n+        response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n         response_str = response.read()\n \n         # Compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/{}.bin'.format(bb_hash), True)\n-        assert_equal(response_header.status, 200)\n+        response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n         response_header_str = response_header.read()\n         assert_equal(response_str[0:80], response_header_str)\n \n         # Check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/{}.hex'.format(bb_hash), True)\n-        assert_equal(response_hex.status, 200)\n+        response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n         assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n \n         # Compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/{}.hex'.format(bb_hash), True)\n-        assert_equal(response_header_hex.status, 200)\n+        response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n         assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n \n         # Check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/{}.json'.format(bb_hash))\n-        block_json_obj = json.loads(block_json_string)\n+        block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n         # Compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/{}.json'.format(bb_hash), True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n+        json_obj = self.test_rest_request(\"/headers/1/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n@@ -266,23 +243,18 @@ def run_test(self):\n         # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/{}.json'.format(bb_hash), True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str)\n+        json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n         self.log.info(\"Test the /tx URI\")\n \n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/{}.json'.format(tx_hash))\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n         assert_equal(json_obj['txid'], tx_hash)\n \n         # Check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/{}.hex'.format(tx_hash), True)\n-        assert_equal(hex_string.status, 200)\n-        assert_greater_than(int(response.getheader('content-length')), 10)\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than(int(hex_response.getheader('content-length')), 10)\n \n         self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n@@ -294,17 +266,15 @@ def run_test(self):\n         self.sync_all()\n \n         # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info.json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/mempool/info\")\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n         # Check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents.json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/mempool/contents\")\n         for i, tx in enumerate(txs):\n-            assert_equal(tx in json_obj, True)\n+            assert tx in json_obj\n             assert_equal(json_obj[tx]['spentby'], txs[i + 1:i + 2])\n             assert_equal(json_obj[tx]['depends'], txs[i - 1:i])\n \n@@ -313,24 +283,21 @@ def run_test(self):\n         self.sync_all()\n \n         # Check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/{}.json'.format(newblockhash[0]))\n-        json_obj = json.loads(json_string)\n-        for tx in json_obj['tx']:\n-            if 'coinbase' not in tx['vin'][0]:  # exclude coinbase\n-                assert_equal(tx['txid'] in txs, True)\n+        json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))\n+        non_coinbase_txs = {tx['txid'] for tx in json_obj['tx']\n+                            if 'coinbase' not in tx['vin'][0]}\n+        assert_equal(non_coinbase_txs, set(txs))\n \n         # Check the same but without tx details\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/notxdetails/{}.json'.format(newblockhash[0]))\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/block/notxdetails/{}\".format(newblockhash[0]))\n         for tx in txs:\n-            assert_equal(tx in json_obj['tx'], True)\n+            assert tx in json_obj['tx']\n \n         self.log.info(\"Test the /chaininfo URI\")\n \n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        json_string = http_get_call(url.hostname, url.port, '/rest/chaininfo.json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/chaininfo\")\n         assert_equal(json_obj['bestblockhash'], bb_hash)\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "ade5964e3f8c5039878e1296311bb0337c152d2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGU1OTY0ZTNmOGM1MDM5ODc4ZTEyOTYzMTFiYjAzMzdjMTUyZDJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T20:41:22Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:52Z"
      },
      "message": "[tests] only use 2 nodes in interface_rest.py",
      "tree": {
        "sha": "6c41d0d482d587eb92c491a9f0a6489b325ee662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c41d0d482d587eb92c491a9f0a6489b325ee662"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ade5964e3f8c5039878e1296311bb0337c152d2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMxUPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7uCMBALt5\nCDtbG4KJ3rAoU5rWK38naSau+4JYE06S5ULMDoleAP4lTu7IhXnEu3KfGx3kWjkv\n1/d6/LN+GRBoVa2dIWUbog==\n=Neg6\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c41d0d482d587eb92c491a9f0a6489b325ee662\nparent ad00fbed3cfcfe7e921500179183589ac4aad419\nauthor John Newbery <john@johnnewbery.com> 1521751282 -0400\ncommitter Roman Zeyde <me@romanzey.de> 1522742032 +0300\n\n[tests] only use 2 nodes in interface_rest.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade5964e3f8c5039878e1296311bb0337c152d2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ade5964e3f8c5039878e1296311bb0337c152d2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade5964e3f8c5039878e1296311bb0337c152d2f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad00fbed3cfcfe7e921500179183589ac4aad419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad00fbed3cfcfe7e921500179183589ac4aad419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad00fbed3cfcfe7e921500179183589ac4aad419"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 11,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0a924e3149bd6215723a9bd16b021f571dd3d8c5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade5964e3f8c5039878e1296311bb0337c152d2f/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade5964e3f8c5039878e1296311bb0337c152d2f/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=ade5964e3f8c5039878e1296311bb0337c152d2f",
        "patch": "@@ -18,7 +18,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n-    connect_nodes_bi,\n     hex_str_to_bytes,\n )\n \n@@ -40,13 +39,8 @@ def filter_output_indices_by_value(vouts, value):\n class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[\"-rest\"]] * self.num_nodes\n-\n-    def setup_network(self, split=False):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n-        self.url = urllib.parse.urlparse(self.nodes[0].url)\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-rest\"], []]\n \n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n@@ -75,18 +69,22 @@ def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body=\n             return json.loads(resp.read().decode('utf-8'), parse_float=Decimal)\n \n     def run_test(self):\n+        self.url = urllib.parse.urlparse(self.nodes[0].url)\n         self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n \n+        # Random address so node1's balance doesn't increase\n+        not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n+\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[2].generate(100)\n+        self.nodes[1].generatetoaddress(100, not_related_address)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[2].generate(1)\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n@@ -260,9 +258,9 @@ def run_test(self):\n \n         # Make 3 tx and mine them on node 1\n         txs = []\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n         self.sync_all()\n \n         # Check that there are exactly 3 transactions in the TX memory pool before generating the block"
      }
    ]
  },
  {
    "sha": "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWVmYzFmNjJjZWY3ZTE5ZWZjYjU4YmE2OGZiYzIwNTNiZmExOWEw",
    "commit": {
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-03-23T09:39:54Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2018-04-03T07:53:59Z"
      },
      "message": "[tests] simplify binary and hex response parsing in interface_rest.py\n\nWe use assert_greater_than_or_equal(), since the hex response contains\nan extra b'\\n' traling byte.",
      "tree": {
        "sha": "ba1c9689d8aa12c95c30534fa3b605bccba17fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba1c9689d8aa12c95c30534fa3b605bccba17fad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niG4EABMKABYFAlrDMxsPHG1lQHJvbWFuemV5LmRlAAoJEIfK5fpGkXy7IdkBAKLl\nYiFSQ2c31S8TbD+UiaIr4wiJCG+XC10SzZzkP3saAP9VNgqHYYotitPwFksvEW2f\n5DTeAQE6+TfGr5Kbb5FA7Q==\n=ojAZ\n-----END PGP SIGNATURE-----",
        "payload": "tree ba1c9689d8aa12c95c30534fa3b605bccba17fad\nparent ade5964e3f8c5039878e1296311bb0337c152d2f\nauthor Roman Zeyde <me@romanzey.de> 1521797994 +0300\ncommitter Roman Zeyde <me@romanzey.de> 1522742039 +0300\n\n[tests] simplify binary and hex response parsing in interface_rest.py\n\nWe use assert_greater_than_or_equal(), since the hex response contains\nan extra b'\\n' traling byte.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0/comments",
    "author": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ade5964e3f8c5039878e1296311bb0337c152d2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade5964e3f8c5039878e1296311bb0337c152d2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ade5964e3f8c5039878e1296311bb0337c152d2f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2ee33aa8690c593192cfbf65fd4479f4675c01d8",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55efc1f62cef7e19efcb58ba68fbc2053bfa19a0/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
        "patch": "@@ -3,21 +3,22 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n+\n+import binascii\n from decimal import Decimal\n from enum import Enum\n from io import BytesIO\n import json\n-from codecs import encode\n from struct import pack, unpack\n \n import http.client\n import urllib.parse\n \n-from test_framework.messages import deser_uint256\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n+    assert_greater_than_or_equal,\n     hex_str_to_bytes,\n )\n \n@@ -131,19 +132,15 @@ def run_test(self):\n \n         self.log.info(\"Query the TXOs using the /getutxos URI with a binary response\")\n \n-        bb_hash = self.nodes[0].getbestblockhash()\n-\n         bin_request = b'\\x01\\x02'\n         for txid, n in [spending, spent]:\n             bin_request += hex_str_to_bytes(txid)\n             bin_request += pack(\"i\", n)\n \n         bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n-        output = BytesIO()\n-        output.write(bin_response)\n-        output.seek(0)\n-        chain_height = unpack(\"i\", output.read(4))[0]\n-        response_hash = hex(deser_uint256(output))[2:].zfill(64)\n+        output = BytesIO(bin_response)\n+        chain_height, = unpack(\"i\", output.read(4))\n+        response_hash = binascii.hexlify(output.read(32)[::-1]).decode('ascii')\n \n         assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n         assert_equal(chain_height, 102)  # chain height must be 102\n@@ -199,30 +196,30 @@ def run_test(self):\n         self.sync_all()\n \n         self.log.info(\"Test the /block and /headers URIs\")\n+        bb_hash = self.nodes[0].getbestblockhash()\n \n         # Check binary format\n         response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n-        response_str = response.read()\n+        response_bytes = response.read()\n \n         # Compare with block header\n         response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n-        response_header_str = response_header.read()\n-        assert_equal(response_str[0:80], response_header_str)\n+        response_header_bytes = response_header.read()\n+        assert_equal(response_bytes[:80], response_header_bytes)\n \n         # Check block hex format\n         response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n-        response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n+        response_hex_bytes = response_hex.read().strip(b'\\n')\n+        assert_equal(binascii.hexlify(response_bytes), response_hex_bytes)\n \n         # Compare with hex block header\n         response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n-        response_header_hex_str = response_header_hex.read()\n-        assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n+        response_header_hex_bytes = response_header_hex.read(160)\n+        assert_equal(binascii.hexlify(response_bytes[:80]), response_header_hex_bytes)\n \n         # Check json format\n         block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n@@ -252,7 +249,8 @@ def run_test(self):\n \n         # Check hex format response\n         hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n-        assert_greater_than(int(hex_response.getheader('content-length')), 10)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n \n         self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n "
      }
    ]
  }
]