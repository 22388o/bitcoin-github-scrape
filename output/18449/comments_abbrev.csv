laanwj,2020-03-27 13:35:59,"Nice.\n\nI guess we can replace `i64tostr` with `ToString` in the same way?\n\n(it's only used in two real places)\n",https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605004471,605004471,
theStack,2020-03-27 14:03:58,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605018109,605018109,
MarcoFalke,2020-03-27 15:50:39,"> I guess we can replace i64tostr with ToString in the same way?\n\nDone",https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605074126,605074126,
practicalswift,2020-03-28 09:13:31,"Concept ACK: thanks for helping getting rid of accidental locale dependence!\n\nScary valgrind error in Travis (unrelated I presume):\n\n```\n==28552== Invalid read of size 1\n==28552==    at 0x193A13: CConnman::GetExtraOutboundCount() (net.cpp:1709)\n==28552==    by 0x1CBCFD: PeerLogicValidation::EvictExtraOutboundPeers(long) (net_processing.cpp:3436)\n==28552==    by 0x1CBF9A: PeerLogicV",https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605417419,605417419,
laanwj,2020-03-28 10:11:05,"ACK faaf1cb5b9a4c22b21757f7578833f908b79b867\nAgree the valgrind error is scary but I don't see any way it could be related (there are no changes to P2P code here).",https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605423982,605423982,
promag,2020-03-28 11:18:50,Code review ACK faaf1cb5b9a4c22b21757f7578833f908b79b867.,https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605432996,605432996,
MarcoFalke,2020-03-28 13:27:20,"appveyor run: https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/31768233\nTravis run: https://travis-ci.org/github/bitcoin/bitcoin/builds/667726248\n\nOpen-Close to re-run ci. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130",https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605447388,605447388,
MarcoFalke,2020-03-28 13:39:46,The issue valgrind found is a long-standing issue where the vector of nodes in Connman is not locked: See #18457 . Indeed unrelated to this pull.,https://github.com/bitcoin/bitcoin/pull/18449#issuecomment-605448730,605448730,
theStack,2020-03-27 13:17:06,"Now that the third parameter is of type `int` and not `std::string` anymore, the format string also has to be adapted?\n```suggestion\n            ""%s %s:%d%s (in thread %s)"",\n```",https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399256100,399256100,src/sync.cpp
MarcoFalke,2020-03-27 13:32:36,"tinyformat.h is a type safe printf replacement library in a single C++ header file. If you've ever wanted printf(""%s"", s) to just work regardless of the type of s, tinyformat might be for you.\n\nhttps://github.com/c42f/tinyformat#a-minimal-type-safe-printf-replacement",https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399266097,399266097,src/sync.cpp
theStack,2020-03-27 13:53:16,"Ah, that's nice and convenient. \nIs it smart though that the function has exactly the same name as the one from the standard library then (with not even a namespace in front)? As reader I'd hardly come to the idea that this would behave different than the standard implementation and be more forgiving.",https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399279795,399279795,src/sync.cpp
MarcoFalke,2020-03-27 13:55:24,"I don't like the name either (I prefer `tfm::format`), but I think the name differs from the std lib one:\n```\nstrprintf\nsprintf",https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399281216,399281216,src/sync.cpp
theStack,2020-03-27 14:03:21,Oops -- you are right! I missed the `tr` and read it indeed as `sprintf`. :walking_man: ,https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399286782,399286782,src/sync.cpp
sipa,2020-03-27 16:13:59,Isn't this comparing a string with itself now?,https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399379712,399379712,src/test/fuzz/locale.cpp
MarcoFalke,2020-03-27 16:17:23,"```cpp\nassert(tostring_without_locale\n    == tostring_with_locale);",https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399381871,399381871,src/test/fuzz/locale.cpp
MarcoFalke,2020-03-27 16:20:19,The fuzzer's goal is to assert the function does not respond to changing the locale. So generating the same string with two different locales is needed. The check should assert that they are the same.,https://github.com/bitcoin/bitcoin/pull/18449#discussion_r399383818,399383818,src/test/fuzz/locale.cpp
