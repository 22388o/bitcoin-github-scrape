[
  {
    "sha": "6f2c4fd0775a9c45eacc4bab8f138528852fdf44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjJjNGZkMDc3NWE5YzQ1ZWFjYzRiYWI4ZjEzODUyODg1MmZkZjQ0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-26T19:18:26Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-05T20:31:48Z"
      },
      "message": "netinfo: add user help documentation\n\nand drop no longer needed sort description header to save screen space",
      "tree": {
        "sha": "22460e9e884c77f0e7ea629d2be9b06101098bff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22460e9e884c77f0e7ea629d2be9b06101098bff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f2c4fd0775a9c45eacc4bab8f138528852fdf44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl/0zL0ACgkQT1chs9Dj\nkh2xBA//cwnaESC6PeyqZk+jWqN77c+a6olWu/35ya9BgC85Vr3DW5XdXTyehgi8\ntmW99Pen5mq/8gs7W8ZpcrMPldW5JktEwIQcCVdeblSZVWdCoxLkvLZS+DIL7GUr\nhMmjmcMwJ1eFepuz201vjvVFuL9zTuMOiZncFt+JU+SeqajhzaKn+wHc+FLDiYIU\n3Gu1QDeSO7a0anUTJLb5ckCLTTl3Zp3ckDNTjeJ19rmW9kkcyXD6GeDo5rEPoTe5\nhnidPOXHzG9+5YI9qG44Hpi0OcJFqt3mGrxFV7pEsoY9L/wDep14CxSxNTOXQKfp\nRnVvB8NQGA6Y43HCSlnIIc+B0XgObqEcaC860cOUsHSCR3br4xksW3kviw2TbUNo\nWmpDUPkbMOy+d4O6k0XoYAKRwy36evP47V+i0ULlvdERCaDTbJd0uegmaZ6hpG06\n5Qv7JaSNZEeUk1T91Q0fGmBs+OK/+fBZHAwux8GbkG6b4gOZAEH4ecvzzZGh96gm\nhzs1wry6f7cbZKRL1Nn3r/gBs9q8Nvi9EoambtdUMVi9odl5GOaMdd6L1yc4+fuc\n7rsVQHNuNp+LiIuBHhiUPsy8wGV+V6cvRbqMGvZ6Ubqmp+H8gIqWHAqRrNkr44F7\nSCY6VaJ7de/dg4hGV/Ccj1SFwkFM+/Lo28iPe1HPN0d8AGsozYA=\n=NeMk\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJg6KAyFfYHX1u+mPt64HO2iz1b+N/rYuAesH0x27liQCP/wEChx2D2m8Z1J\nqLBUqg4N4bcI8CBnIOINd+d9B4dgTsMfgAHiTV7QLBzq374QdfQosE10vQjwIFnL\nIQsjQvMk1A0beAP01qnmg+YZXGPo+Liplm6WPoNFCPAgkfEfQRp0HMPzdFG6IUDs\n4E/YANJ+raQ3ClpnqeTNRkEI8QRf9My/8AgwO1l2HRATeACD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEEGMZyi19KKy\nkbnOAaUOvmII8QRf9My+8AiZ+rjLStUBHwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEcEBTvVaTLfS62WkHZF\npbkI8QRf9My/8AjiHE/CqyUo9gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQTkpHOrXnw+qy7Ibt3mFisQjxINGMzHX+zDYqMhli\nVmFu+Mwf0vuam2vsJkb5JzIFaPXqCPAgQqYJWKjWZ3A1nWauHxpVUnS6U9p71POA\nyJjp2Kew3pgI8CDx4XFYcsLPFfIlI6Iwgv+Fpm4wvVpKa5GoYYPmA4Nb7AjxBF/0\nzL/wCMq5VH4sH4MwAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 22460e9e884c77f0e7ea629d2be9b06101098bff\nparent 6f97172b4296395f93648c86ea4c9fc519bcb488\nauthor Jon Atack <jon@atack.com> 1609010306 +0100\ncommitter Jon Atack <jon@atack.com> 1609878708 +0100\n\nnetinfo: add user help documentation\n\nand drop no longer needed sort description header to save screen space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2c4fd0775a9c45eacc4bab8f138528852fdf44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f2c4fd0775a9c45eacc4bab8f138528852fdf44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2c4fd0775a9c45eacc4bab8f138528852fdf44/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f97172b4296395f93648c86ea4c9fc519bcb488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f97172b4296395f93648c86ea4c9fc519bcb488",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f97172b4296395f93648c86ea4c9fc519bcb488"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 67,
      "deletions": 3
    },
    "files": [
      {
        "sha": "94043a6b45596372c19960cd4ebd2d537623161c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 3,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2c4fd0775a9c45eacc4bab8f138528852fdf44/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2c4fd0775a9c45eacc4bab8f138528852fdf44/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6f2c4fd0775a9c45eacc4bab8f138528852fdf44",
        "patch": "@@ -59,7 +59,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-generate\", strprintf(\"Generate blocks immediately, equivalent to RPC generatenewaddress followed by RPC generatetoaddress. Optional positional integer arguments are number of blocks to generate (default: %s) and maximum iterations to try (default: %s), equivalent to RPC generatetoaddress nblocks and maxtries arguments. Example: bitcoin-cli -generate 4 1000\", DEFAULT_NBLOCKS, DEFAULT_MAX_TRIES), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0).\", ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0). Pass \\\"help\\\" for detailed help documentation.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     SetupChainParamsBaseOptions(argsman);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -309,7 +309,8 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         }\n         return UNKNOWN_NETWORK;\n     }\n-    uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n+    uint8_t m_details_level{0};      //!< Optional user-supplied arg to set dashboard details level\n+    bool m_is_help_requested{false}; //!< Optional user-supplied arg to print help documentation\n     bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n     bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n     bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n@@ -349,6 +350,62 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         const double milliseconds{round(1000 * seconds)};\n         return milliseconds > 999999 ? \"-\" : ToString(milliseconds);\n     }\n+    const UniValue NetinfoHelp()\n+    {\n+        return std::string{\n+            \"-netinfo level|\\\"help\\\" \\n\\n\"\n+            \"Returns a network peer connections dashboard with information from the remote server.\\n\"\n+            \"Under the hood, -netinfo fetches the data by calling getpeerinfo and getnetworkinfo.\\n\"\n+            \"An optional integer argument from 0 to 4 can be passed for different peers listings.\\n\"\n+            \"Pass \\\"help\\\" to see this detailed help documentation.\\n\"\n+            \"If more than one argument is passed, only the first one is read and parsed.\\n\"\n+            \"Suggestion: use with the Linux watch(1) command for a live dashboard; see example below.\\n\\n\"\n+            \"Arguments:\\n\"\n+            \"1. level (integer 0-4, optional)  Specify the info level of the peers dashboard (default 0):\\n\"\n+            \"                                  0 - Connection counts and local addresses\\n\"\n+            \"                                  1 - Like 0 but with a peers listing (without address or version columns)\\n\"\n+            \"                                  2 - Like 1 but with an address column\\n\"\n+            \"                                  3 - Like 1 but with a version column\\n\"\n+            \"                                  4 - Like 1 but with both address and version columns\\n\"\n+            \"2. help (string \\\"help\\\", optional) Print this help documentation instead of the dashboard.\\n\\n\"\n+            \"Result:\\n\\n\"\n+            \"* The peers listing in levels 1-4 displays all of the peers sorted by direction and minimum ping time:\\n\\n\"\n+            \"  Column   Description\\n\"\n+            \"  ------   -----------\\n\"\n+            \"  <->      Direction\\n\"\n+            \"           \\\"in\\\"  - inbound connections are those initiated by the peer\\n\"\n+            \"           \\\"out\\\" - outbound connections are those initiated by us\\n\"\n+            \"  type     Type of peer connection\\n\"\n+            \"           \\\"full\\\"   - full relay, the default\\n\"\n+            \"           \\\"block\\\"  - block relay; like full relay but does not relay transactions or addresses\\n\"\n+            \"  net      Network the peer connected through (\\\"ipv4\\\", \\\"ipv6\\\", \\\"onion\\\", \\\"i2p\\\", or \\\"cjdns\\\")\\n\"\n+            \"  mping    Minimum observed ping time, in milliseconds (ms)\\n\"\n+            \"  ping     Last observed ping time, in milliseconds (ms)\\n\"\n+            \"  send     Time since last message sent to the peer, in seconds\\n\"\n+            \"  recv     Time since last message received from the peer, in seconds\\n\"\n+            \"  txn      Time since last novel transaction received from the peer and accepted into our mempool, in minutes\\n\"\n+            \"  blk      Time since last novel block passing initial validity checks received from the peer, in minutes\\n\"\n+            \"  age      Duration of connection to the peer, in minutes\\n\"\n+            \"  asmap    Mapped AS (Autonomous System) number in the BGP route to the peer, used for diversifying\\n\"\n+            \"           peer selection (only displayed if the -asmap config option is set)\\n\"\n+            \"  id       Peer index, in increasing order of peer connections since node startup\\n\"\n+            \"  address  IP address and port of the peer\\n\"\n+            \"  version  Peer version and subversion concatenated, e.g. \\\"70016/Satoshi:21.0.0/\\\"\\n\\n\"\n+            \"* The connection counts table displays the number of peers by direction, network, and the totals\\n\"\n+            \"  for each, as well as a column for block relay peers.\\n\\n\"\n+            \"* The local addresses table lists each local address broadcast by the node, the port, and the score.\\n\\n\"\n+            \"Examples:\\n\\n\"\n+            \"Connection counts and local addresses only\\n\"\n+            \"> bitcoin-cli -netinfo\\n\\n\"\n+            \"Compact peers listing\\n\"\n+            \"> bitcoin-cli -netinfo 1\\n\\n\"\n+            \"Full dashboard\\n\"\n+            \"> bitcoin-cli -netinfo 4\\n\\n\"\n+            \"Full live dashboard, adjust --interval or --no-title as needed (Linux)\\n\"\n+            \"> watch --interval 1 --no-title bitcoin-cli -netinfo 4\\n\\n\"\n+            \"See this help\\n\"\n+            \"> bitcoin-cli -netinfo help\\n\"};\n+    }\n     const int64_t m_time_now{GetSystemTimeInSeconds()};\n \n public:\n@@ -361,6 +418,10 @@ class NetinfoRequestHandler : public BaseRequestHandler\n             uint8_t n{0};\n             if (ParseUInt8(args.at(0), &n)) {\n                 m_details_level = n;\n+            } else if (args.at(0) == \"help\") {\n+                m_is_help_requested = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"invalid -netinfo argument: %s\", args.at(0)));\n             }\n         }\n         UniValue result(UniValue::VARR);\n@@ -371,6 +432,9 @@ class NetinfoRequestHandler : public BaseRequestHandler\n \n     UniValue ProcessReply(const UniValue& batch_in) override\n     {\n+        if (m_is_help_requested) {\n+            return JSONRPCReplyObj(NetinfoHelp(), NullUniValue, 1);\n+        }\n         const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n         if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n         if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n@@ -424,7 +488,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         // Report detailed peer connections list sorted by direction and minimum ping time.\n         if (DetailsRequested() && !m_peers.empty()) {\n             std::sort(m_peers.begin(), m_peers.end());\n-            result += strprintf(\"Peer connections sorted by direction and min ping\\n<-> relay   net  mping   ping send recv  txn  blk %*s \", m_max_age_length, \"age\");\n+            result += strprintf(\"<-> relay   net  mping   ping send recv  txn  blk %*s \", m_max_age_length, \"age\");\n             if (m_is_asmap_on) result += \" asmap \";\n             result += strprintf(\"%*s %-*s%s\\n\", m_max_id_length, \"id\", IsAddressSelected() ? m_max_addr_length : 0, IsAddressSelected() ? \"address\" : \"\", IsVersionSelected() ? \"version\" : \"\");\n             for (const Peer& peer : m_peers) {"
      }
    ]
  }
]