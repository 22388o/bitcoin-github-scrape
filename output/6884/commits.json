[
  {
    "sha": "a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQzYzZmYjlkZThhM2ZjM2UzNmJjMzc1M2E2ODMxY2IxZGZkYmNi",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-06-03T19:55:45Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-10-23T20:33:31Z"
      },
      "message": "Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\n\nThe lock-time code currently uses CBlock::nTime as the cutoff point for time based locked transactions. This has the unfortunate outcome of creating a perverse incentive for miners to lie about the time of a block in order to collect more fees by including transactions that by wall clock determination have not yet matured. By using CBlockIndex::GetMedianTimePast from the prior block instead, the self-interested miner no longer gains from generating blocks with fraudulent timestamps. Users can compensate for this change by simply adding an hour (3600 seconds) to their time-based lock times.\n\nIf enforced, this would be a soft-fork change. This commit only adds the functionality on an unexecuted code path, without changing the behaviour of Bitcoin Core.",
      "tree": {
        "sha": "c1e715d570a58016ced625d97cf7cb9e95b06485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1e715d570a58016ced625d97cf7cb9e95b06485"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKpmbAAoJEPxkNPw6MelWlVsIAJa8o5OxdtsTUx7bV14gCVrJ\nWCR3le6eiuXi54ZoMHT+ay/cmD8YoPPIKBNgdIRe+0zcVai0GsFapUcKsTPPARUd\nL8mlhYyeGmHGkcM+gBqYuihUU3bmK3L6+hRRqRSrCZHzg+Vs/gqrA4sSjrMStjqq\nT8gsQsLAHwalI+r+9+kosC8Mj/SS9hry62hNM49DEL4j/L/EwCWlNgA44kD2sSu+\n/Vnn4bFMoNP579H1c47n8EuCtrIbUikB9dgz5q0HSa1yg6QcBTO8lZbnMocI7zR3\nQ/E8dyq4VdzxsypkjQDr+9WIRC5oJ+F57hRjZRKsId8dnvpyf7l+HUmSP7ry8GU=\n=Y4ID\n-----END PGP SIGNATURE-----",
        "payload": "tree c1e715d570a58016ced625d97cf7cb9e95b06485\nparent dfe55bdc32b5333dcce1a7f2c74628f64028d1fe\nauthor Mark Friedenbach <mark@friedenbach.org> 1433361345 -0700\ncommitter BtcDrak <btcdrak@gmail.com> 1445632411 +0100\n\nAdd rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\n\nThe lock-time code currently uses CBlock::nTime as the cutoff point for time based locked transactions. This has the unfortunate outcome of creating a perverse incentive for miners to lie about the time of a block in order to collect more fees by including transactions that by wall clock determination have not yet matured. By using CBlockIndex::GetMedianTimePast from the prior block instead, the self-interested miner no longer gains from generating blocks with fraudulent timestamps. Users can compensate for this change by simply adding an hour (3600 seconds) to their time-based lock times.\n\nIf enforced, this would be a soft-fork change. This commit only adds the functionality on an unexecuted code path, without changing the behaviour of Bitcoin Core.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfe55bdc32b5333dcce1a7f2c74628f64028d1fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe55bdc32b5333dcce1a7f2c74628f64028d1fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfe55bdc32b5333dcce1a7f2c74628f64028d1fe"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 55,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6195d6a79fabf57fdeb9a903cc3e9ecae6f48f8d",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
        "patch": "@@ -13,4 +13,13 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/** Flags for LockTime() */\n+enum {\n+    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n+    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n+};\n+\n+/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "af907d06bcc87e1b9423ad3e05473f75ef474811",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
        "patch": "@@ -709,10 +709,35 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx)\n+bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n-    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n+\n+    // By convention a negative value for flags indicates that the\n+    // current network-enforced consensus rules should be used. In\n+    // a future soft-fork scenario that would mean checking which\n+    // rules would be enforced for the next block and setting the\n+    // appropriate flags. At the present time no soft-forks are\n+    // scheduled, so no flags are set.\n+    flags = std::max(flags, 0);\n+\n+    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n+    // nLockTime because when IsFinalTx() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // IsFinalTx() with one more than chainActive.Height().\n+    const int nBlockHeight = chainActive.Height() + 1;\n+\n+    // Timestamps on the other hand don't get any special treatment,\n+    // because we can't know what timestamp the next block will have,\n+    // and there aren't timestamp applications where it matters.\n+    // However this changes once median past time-locks are enforced:\n+    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n+                             ? chainActive.Tip()->GetMedianTimePast()\n+                             : GetAdjustedTime();\n+\n+    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n /**\n@@ -931,9 +956,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx))\n-        return state.DoS(0, error(\"AcceptToMemoryPool: non-final\"),\n-                         REJECT_NONSTANDARD, \"non-final\");\n+    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n@@ -2809,10 +2833,15 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        int nLockTimeFlags = 0;\n+        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? pindexPrev->GetMedianTimePast()\n+                                : block.GetBlockTime();\n+        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n+    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "74911f6e6596e855288dd90fa2cf8125079df021",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
        "patch": "@@ -338,8 +338,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "5972f7421288ba76be8914e3a673345478928625",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
        "patch": "@@ -139,6 +139,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n+        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -153,7 +154,12 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->second.GetTx();\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n+\n+            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                    ? nMedianTimePast\n+                                    : pblock->GetBlockTime();\n+\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n             COrphan* porphan = NULL;"
      }
    ]
  },
  {
    "sha": "f720c5fc9f34899ec82e23d12f369c9bf37003e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzIwYzVmYzlmMzQ4OTllYzgyZTIzZDEyZjM2OWM5YmYzNzAwM2U3",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-06-03T22:01:47Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-10-23T20:33:51Z"
      },
      "message": "Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\n\nTransactions are not allowed in the memory pool or selected for inclusion in a block until their lock times exceed chainActive.Tip()->GetMedianTimePast(). However blocks including transactions which are only mature under the old rules are still accepted; this is *not* the soft-fork required to actually rely on the new constraint in production.",
      "tree": {
        "sha": "eca6e8dad156b3bd08c03807017bec0d21a375d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eca6e8dad156b3bd08c03807017bec0d21a375d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f720c5fc9f34899ec82e23d12f369c9bf37003e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKpmvAAoJEPxkNPw6MelWAcEH+gPhjUBgGnaoxVKUD/kKs8vR\n0dUo1p3bWOWfovUF1lzeQ8w1tcIR9wZn4evs/PqSWCqYVmD5+gnp3UU/pxbhOfQU\ncv3My76U26sYAryJXxBBIIlppFHSap2IeOh2VE1evhfm0lR8k8klKVZj/zV9+N8b\nn4vNLLFrkSBKgP2rn+mRvCHJnYxr4qXc5EhcxRhqzSGKeOHDhs9HFIAvPYoac/GG\nU373/0VucJNkCVX4tufkcVYUSlwjrkT8uIJUhqIiUDPb8S6j5kvcR4D+b0u1wjZm\nDXzTP+1m+J43jyHSHJGZx+nNq0C0+SCsViPkRNW2QtSv8StCRbK6mcIaEoHmkrU=\n=/ToR\n-----END PGP SIGNATURE-----",
        "payload": "tree eca6e8dad156b3bd08c03807017bec0d21a375d4\nparent a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb\nauthor Mark Friedenbach <mark@friedenbach.org> 1433368907 -0700\ncommitter BtcDrak <btcdrak@gmail.com> 1445632431 +0100\n\nEnable policy enforcing GetMedianTimePast as the end point of lock-time constraints\n\nTransactions are not allowed in the memory pool or selected for inclusion in a block until their lock times exceed chainActive.Tip()->GetMedianTimePast(). However blocks including transactions which are only mature under the old rules are still accepted; this is *not* the soft-fork required to actually rely on the new constraint in production.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f720c5fc9f34899ec82e23d12f369c9bf37003e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f720c5fc9f34899ec82e23d12f369c9bf37003e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f720c5fc9f34899ec82e23d12f369c9bf37003e7/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d3c6fb9de8a3fc3e36bc3753a6831cb1dfdbcb"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fc2d01f917537382a21201ec684b71203dbdcf34",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f720c5fc9f34899ec82e23d12f369c9bf37003e7/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f720c5fc9f34899ec82e23d12f369c9bf37003e7/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f720c5fc9f34899ec82e23d12f369c9bf37003e7",
        "patch": "@@ -20,6 +20,6 @@ enum {\n };\n \n /** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "e419d61e766bd32c8292ad1223589c914f7f84a4",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f720c5fc9f34899ec82e23d12f369c9bf37003e7/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f720c5fc9f34899ec82e23d12f369c9bf37003e7/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f720c5fc9f34899ec82e23d12f369c9bf37003e7",
        "patch": "@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -237,7 +237,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2));\n+    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  }
]