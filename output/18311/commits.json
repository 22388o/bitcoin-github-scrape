[
  {
    "sha": "2e4edc68f903cf7873027440ff551f3f6121dbe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTRlZGM2OGY5MDNjZjc4NzMwMjc0NDBmZjU1MWYzZjYxMjFkYmU2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-03-10T16:30:57Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-03-10T17:56:52Z"
      },
      "message": "Add some test logging to wallet_bumpfee.py",
      "tree": {
        "sha": "9001582ee0e6f6ec3e8074efc0a906c6713f0f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9001582ee0e6f6ec3e8074efc0a906c6713f0f9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e4edc68f903cf7873027440ff551f3f6121dbe6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e4edc68f903cf7873027440ff551f3f6121dbe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e4edc68f903cf7873027440ff551f3f6121dbe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e4edc68f903cf7873027440ff551f3f6121dbe6/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccb2c9e7891a53bdfcf4bbefd364fff1fb0cc30e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb2c9e7891a53bdfcf4bbefd364fff1fb0cc30e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb2c9e7891a53bdfcf4bbefd364fff1fb0cc30e"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 56,
      "deletions": 44
    },
    "files": [
      {
        "sha": "41bb15b91ec90dd9abf57ce2413c68c9998e9603",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 56,
        "deletions": 44,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e4edc68f903cf7873027440ff551f3f6121dbe6/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e4edc68f903cf7873027440ff551f3f6121dbe6/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=2e4edc68f903cf7873027440ff551f3f6121dbe6",
        "patch": "@@ -71,28 +71,29 @@ def run_test(self):\n         test_simple_bumpfee_succeeds(self, \"default\", rbf_node, peer_node, dest_address)\n         test_simple_bumpfee_succeeds(self, \"fee_rate\", rbf_node, peer_node, dest_address)\n         test_feerate_args(self, rbf_node, peer_node, dest_address)\n-        test_segwit_bumpfee_succeeds(rbf_node, dest_address)\n-        test_nonrbf_bumpfee_fails(peer_node, dest_address)\n-        test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n-        test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n-        test_small_output_fails(rbf_node, dest_address)\n-        test_dust_to_fee(rbf_node, dest_address)\n-        test_settxfee(rbf_node, dest_address)\n+        test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n+        test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n+        test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address)\n+        test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_address)\n+        test_small_output_fails(self, rbf_node, dest_address)\n+        test_dust_to_fee(self, rbf_node, dest_address)\n+        test_settxfee(self, rbf_node, dest_address)\n         test_watchonly_psbt(self, peer_node, rbf_node, dest_address)\n-        test_rebumping(rbf_node, dest_address)\n-        test_rebumping_not_replaceable(rbf_node, dest_address)\n-        test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n-        test_bumpfee_metadata(rbf_node, dest_address)\n-        test_locked_wallet_fails(rbf_node, dest_address)\n-        test_change_script_match(rbf_node, dest_address)\n+        test_rebumping(self, rbf_node, dest_address)\n+        test_rebumping_not_replaceable(self, rbf_node, dest_address)\n+        test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address)\n+        test_bumpfee_metadata(self, rbf_node, dest_address)\n+        test_locked_wallet_fails(self, rbf_node, dest_address)\n+        test_change_script_match(self, rbf_node, dest_address)\n         test_maxtxfee_fails(self, rbf_node, dest_address)\n         # These tests wipe out a number of utxos that are expected in other tests\n-        test_small_output_with_feerate_succeeds(rbf_node, dest_address)\n-        test_no_more_inputs_fails(rbf_node, dest_address)\n+        test_small_output_with_feerate_succeeds(self, rbf_node, dest_address)\n+        test_no_more_inputs_fails(self, rbf_node, dest_address)\n         self.log.info(\"Success\")\n \n \n def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n+    self.log.info('Test simple bumpfee')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbftx = rbf_node.gettransaction(rbfid)\n     self.sync_mempools((rbf_node, peer_node))\n@@ -119,6 +120,7 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n \n def test_feerate_args(self, rbf_node, peer_node, dest_address):\n+    self.log.info('Test feerate args')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n@@ -135,7 +137,8 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\":1})\n \n \n-def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n+def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n+    self.log.info('Test that segwit-sourcing bumpfee works')\n     # Create a transaction with segwit output, then create an RBF transaction\n     # which spends it, and make sure bumpfee can be called on it.\n \n@@ -165,14 +168,14 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n     assert rbfid not in rbf_node.getrawmempool()\n \n \n-def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n-    # cannot replace a non RBF transaction (from node which did not enable RBF)\n+def test_nonrbf_bumpfee_fails(self, peer_node, dest_address):\n+    self.log.info('Test that we cannot replace a non RBF transaction')\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n     assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n-def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n-    # cannot bump fee unless the tx has only inputs that we own.\n+def test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address):\n+    self.log.info('Test that it cannot bump fee if non-owned inputs are included')\n     # here, the rbftx has a peer_node coin and then adds a rbf_node input\n     # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n     # (since it can't use fundrawtransaction, it lacks a proper change output)\n@@ -192,32 +195,34 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n                             rbf_node.bumpfee, rbfid)\n \n \n-def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address):\n-    # cannot bump fee if the transaction has a descendant\n+def test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_address):\n+    self.log.info('Test that fee cannot be bumped when it has descendant')\n     # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n-def test_small_output_fails(rbf_node, dest_address):\n+def test_small_output_fails(self, rbf_node, dest_address):\n+    self.log.info('Test totalFee bump with small output fails')\n     # cannot bump fee with a too-small output\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n     assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n-def test_small_output_with_feerate_succeeds(rbf_node, dest_address):\n+def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n+    self.log.info('Testing small output with feerate bump succeeds')\n \n     # Make sure additional inputs exist\n     rbf_node.generatetoaddress(101, rbf_node.getnewaddress())\n     rbfid = spend_one_input(rbf_node, dest_address)\n     input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n     assert_equal(len(input_list), 1)\n     original_txin = input_list[0]\n-    # Keep bumping until we out-spend change output\n+    self.log.info('Keep bumping until transaction fee out-spends change output amount')\n     tx_fee = 0\n     while tx_fee < Decimal(\"0.0005\"):\n         input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n@@ -244,8 +249,8 @@ def test_small_output_with_feerate_succeeds(rbf_node, dest_address):\n     rbf_node.generatetoaddress(1, rbf_node.getnewaddress())\n     assert_equal(rbf_node.gettransaction(rbfid)[\"confirmations\"], 1)\n \n-def test_dust_to_fee(rbf_node, dest_address):\n-    # check that if output is reduced to dust, it will be converted to fee\n+def test_dust_to_fee(self, rbf_node, dest_address):\n+    self.log.info('Test that bumped output that is dust is dropped to fee')\n     # the bumped tx sets fee=49,900, but it converts to 50,000\n     rbfid = spend_one_input(rbf_node, dest_address)\n     fulltx = rbf_node.getrawtransaction(rbfid, 1)\n@@ -257,7 +262,8 @@ def test_dust_to_fee(rbf_node, dest_address):\n     assert_equal(len(full_bumped_tx[\"vout\"]), 1)  # change output is eliminated\n \n \n-def test_settxfee(rbf_node, dest_address):\n+def test_settxfee(self, rbf_node, dest_address):\n+    self.log.info('Test settxfee')\n     assert_raises_rpc_error(-8, \"txfee cannot be less than min relay tx fee\", rbf_node.settxfee, Decimal('0.000005'))\n     assert_raises_rpc_error(-8, \"txfee cannot be less than wallet min fee\", rbf_node.settxfee, Decimal('0.000015'))\n     # check that bumpfee reacts correctly to the use of settxfee (paytxfee)\n@@ -272,17 +278,19 @@ def test_settxfee(rbf_node, dest_address):\n     rbf_node.settxfee(Decimal(\"0.00000000\"))  # unset paytxfee\n \n \n-def test_maxtxfee_fails(test, rbf_node, dest_address):\n+def test_maxtxfee_fails(self, rbf_node, dest_address):\n+    self.log.info('Test that bumpfee fails when it hits -matxfee')\n     # size of bumped transaction (p2wpkh, 1 input, 2 outputs): 141 vbytes\n     # expected bumping feerate of 20 sats/vbyte => 141*20 sats = 0.00002820 btc\n-    test.restart_node(1, ['-maxtxfee=0.000025'] + test.extra_args[1])\n+    self.restart_node(1, ['-maxtxfee=0.000025'] + self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n     rbfid = spend_one_input(rbf_node, dest_address)\n     assert_raises_rpc_error(-4, \"Unable to create transaction: Fee exceeds maximum configured by -maxtxfee\", rbf_node.bumpfee, rbfid)\n-    test.restart_node(1, test.extra_args[1])\n+    self.restart_node(1, self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n-def test_watchonly_psbt(test, peer_node, rbf_node, dest_address):\n+def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n+    self.log.info('Test that PSBT is returned for bumpfee in watchonly wallets')\n     priv_rec_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\"\n     pub_rec_desc = rbf_node.getdescriptorinfo(priv_rec_desc)[\"descriptor\"]\n     priv_change_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/*)#j6uzqvuh\"\n@@ -334,7 +342,7 @@ def test_watchonly_psbt(test, peer_node, rbf_node, dest_address):\n     funding_address2 = watcher.getnewaddress(address_type='bech32')\n     peer_node.sendmany(\"\", {funding_address1: 0.001, funding_address2: 0.001})\n     peer_node.generate(1)\n-    test.sync_all()\n+    self.sync_all()\n \n     # Create single-input PSBT for transaction to be bumped\n     psbt = watcher.walletcreatefundedpsbt([], {dest_address:0.0005}, 0, {\"feeRate\": 0.00001}, True)['psbt']\n@@ -363,24 +371,24 @@ def test_watchonly_psbt(test, peer_node, rbf_node, dest_address):\n     rbf_node.unloadwallet(\"watcher\")\n     rbf_node.unloadwallet(\"signer\")\n \n-def test_rebumping(rbf_node, dest_address):\n-    # check that re-bumping the original tx fails, but bumping the bumper succeeds\n+def test_rebumping(self, rbf_node, dest_address):\n+    self.log.info('Test that re-bumping the original tx fails, but bumping successor works')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n     assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n-def test_rebumping_not_replaceable(rbf_node, dest_address):\n-    # check that re-bumping a non-replaceable bump tx fails\n+def test_rebumping_not_replaceable(self, rbf_node, dest_address):\n+    self.log.info('Test that re-bumping non-replaceable fails')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n     assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                             {\"totalFee\": 20000})\n \n \n-def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n-    # check that unconfirmed outputs from bumped transactions are not spendable\n+def test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address):\n+    self.log.info('Test that unconfirmed outputs from bumped txns are not spendable')\n     rbfid = spend_one_input(rbf_node, rbf_node_address)\n     rbftx = rbf_node.gettransaction(rbfid)[\"hex\"]\n     assert rbfid in rbf_node.getrawmempool()\n@@ -418,7 +426,8 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n \n \n-def test_bumpfee_metadata(rbf_node, dest_address):\n+def test_bumpfee_metadata(self, rbf_node, dest_address):\n+    self.log.info('Test that bumped txn metadata persists to new txn record')\n     assert(rbf_node.getbalance() < 49)\n     rbf_node.generatetoaddress(101, rbf_node.getnewaddress())\n     rbfid = rbf_node.sendtoaddress(dest_address, 49, \"comment value\", \"to value\")\n@@ -428,15 +437,17 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n     assert_equal(bumped_wtx[\"to\"], \"to value\")\n \n \n-def test_locked_wallet_fails(rbf_node, dest_address):\n+def test_locked_wallet_fails(self, rbf_node, dest_address):\n+    self.log.info('Test that locked wallet cannot bump txn')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.walletlock()\n     assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                             rbf_node.bumpfee, rbfid)\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n-def test_change_script_match(rbf_node, dest_address):\n-    \"\"\"Test that the same change addresses is used for the replacement transaction when possible.\"\"\"\n+def test_change_script_match(self, rbf_node, dest_address):\n+    self.log.info('Test that the same change addresses is used for the replacement transaction when possible.')\n+\n     def get_change_address(tx):\n         tx_details = rbf_node.getrawtransaction(tx, 1)\n         txout_addresses = [txout['scriptPubKey']['addresses'][0] for txout in tx_details[\"vout\"]]\n@@ -480,7 +491,8 @@ def submit_block_with_tx(node, tx):\n     node.submitblock(block.serialize().hex())\n     return block\n \n-def test_no_more_inputs_fails(rbf_node, dest_address):\n+def test_no_more_inputs_fails(self, rbf_node, dest_address):\n+    self.log.info('Test that bumpfee fails when there are no available confirmed outputs')\n     # feerate rbf requires confirmed outputs when change output doesn't exist or is insufficient\n     rbf_node.generatetoaddress(1, dest_address)\n     # spend all funds, no change output"
      }
    ]
  },
  {
    "sha": "f1b45031148105754c23af08c891387e71c3c2c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWI0NTAzMTE0ODEwNTc1NGMyM2FmMDhjODkxMzg3ZTcxYzNjMmMz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-03-10T16:33:50Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-03-10T17:56:52Z"
      },
      "message": "bumpfee test: exit loop at proper time with new fee value being compared",
      "tree": {
        "sha": "6c83313e7a7d52f48bd44af5ba21a133315c416e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c83313e7a7d52f48bd44af5ba21a133315c416e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1b45031148105754c23af08c891387e71c3c2c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b45031148105754c23af08c891387e71c3c2c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b45031148105754c23af08c891387e71c3c2c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b45031148105754c23af08c891387e71c3c2c3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e4edc68f903cf7873027440ff551f3f6121dbe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e4edc68f903cf7873027440ff551f3f6121dbe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e4edc68f903cf7873027440ff551f3f6121dbe6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "336e246e3307a78580cf480f632084dc503f18e8",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1b45031148105754c23af08c891387e71c3c2c3/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1b45031148105754c23af08c891387e71c3c2c3/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=f1b45031148105754c23af08c891387e71c3c2c3",
        "patch": "@@ -222,9 +222,9 @@ def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n     input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n     assert_equal(len(input_list), 1)\n     original_txin = input_list[0]\n-    self.log.info('Keep bumping until transaction fee out-spends change output amount')\n+    self.log.info('Keep bumping until transaction fee out-spends non-destination value')\n     tx_fee = 0\n-    while tx_fee < Decimal(\"0.0005\"):\n+    while True:\n         input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n         new_item = list(input_list)[0]\n         assert_equal(len(input_list), 1)\n@@ -236,7 +236,11 @@ def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n         assert rbfid not in raw_pool\n         assert rbfid_new in raw_pool\n         rbfid = rbfid_new\n-        tx_fee = rbfid_new_details[\"origfee\"]\n+        tx_fee = rbfid_new_details[\"fee\"]\n+\n+        # Total value from input not going to destination\n+        if tx_fee > Decimal('0.00050000'):\n+            break\n \n     # input(s) have been added\n     final_input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]"
      }
    ]
  }
]