[
  {
    "sha": "fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDIwZTBiYzg5YjcwZTcyMDQ3Y2U5N2E2NTFkNGQ0Zjc3ZTI3NGFi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-02T20:52:37Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-06-22T21:40:36Z"
      },
      "message": "CreateTransction fee fixes: always create change, adjust value, and prune later",
      "tree": {
        "sha": "8f52c09ec23b18c1b6b21e1f0be1f825be962107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f52c09ec23b18c1b6b21e1f0be1f825be962107"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd20e0bc89b70e72047ce97a651d4d4f77e274ab/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c2098ad120913776421bf670aadf69b01c534bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2098ad120913776421bf670aadf69b01c534bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2098ad120913776421bf670aadf69b01c534bf"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 78,
      "deletions": 85
    },
    "files": [
      {
        "sha": "c731c7abb4944a3cd888a2226ada2680e71c9bca",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 85,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd20e0bc89b70e72047ce97a651d4d4f77e274ab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd20e0bc89b70e72047ce97a651d4d4f77e274ab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
        "patch": "@@ -2597,68 +2597,59 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n-                {\n-                    // Fill a vout to ourself\n-                    // TODO: pass in scriptChange instead of reservekey so\n-                    // change transaction isn't always pay-to-bitcoin-address\n-                    CScript scriptChange;\n+                assert(nChange >= 0);\n \n-                    // coin control: send change to custom address\n-                    if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange = GetScriptForDestination(coinControl->destChange);\n+                // Fill a vout to ourself, may be removed later on final fee adjustment\n+                // TODO: pass in scriptChange instead of reservekey so\n+                // change transaction isn't always pay-to-bitcoin-address\n+                CScript scriptChange;\n \n-                    // no coin control: send change to newly generated address\n-                    else\n+                // coin control: send change to custom address\n+                if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange)) {\n+                    scriptChange = GetScriptForDestination(coinControl->destChange);\n+                }\n+                // no coin control: send change to newly generated address\n+                else\n+                {\n+                    // Note: We use a new key here to keep it from being obvious which side is the change.\n+                    //  The drawback is that by not reusing a previous key, the change may be lost if a\n+                    //  backup is restored, if the backup doesn't have the new private key for the change.\n+                    //  If we reused the old key, it would be possible to add code to look for and\n+                    //  rediscover unknown transactions that were written with keys of ours to recover\n+                    //  post-backup change.\n+\n+                    // Reserve a new key pair from key pool\n+                    CPubKey vchPubKey;\n+                    bool ret;\n+                    ret = reservekey.GetReservedKey(vchPubKey, true);\n+                    if (!ret)\n                     {\n-                        // Note: We use a new key here to keep it from being obvious which side is the change.\n-                        //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                        //  backup is restored, if the backup doesn't have the new private key for the change.\n-                        //  If we reused the old key, it would be possible to add code to look for and\n-                        //  rediscover unknown transactions that were written with keys of ours to recover\n-                        //  post-backup change.\n-\n-                        // Reserve a new key pair from key pool\n-                        CPubKey vchPubKey;\n-                        bool ret;\n-                        ret = reservekey.GetReservedKey(vchPubKey, true);\n-                        if (!ret)\n-                        {\n-                            strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n-                            return false;\n-                        }\n-\n-                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+                        strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                        return false;\n                     }\n \n-                    CTxOut newTxOut(nChange, scriptChange);\n+                    scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+                }\n \n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    if (IsDust(newTxOut, ::dustRelayFee))\n-                    {\n-                        nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n-                        reservekey.ReturnKey();\n-                    }\n-                    else\n-                    {\n-                        if (nChangePosInOut == -1)\n-                        {\n-                            // Insert change txn at random position:\n-                            nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-                        }\n-                        else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-                        {\n-                            strFailReason = _(\"Change index out of range\");\n-                            return false;\n-                        }\n+                CTxOut newTxOut(nChange, scriptChange);\n \n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n-                    }\n+                // TODO move this section near fee-adjustment area.\n+                if (nChangePosInOut == -1)\n+                {\n+                    // Insert change txn at random position:\n+                    nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+                }\n+                else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+                {\n+                    strFailReason = _(\"Change index out of range\");\n+                    return false;\n+                }\n+\n+                std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                // We don't want to add a change output for 0-value with subtractFeeFromAmount\n+                if (nSubtractFeeFromAmount == 0 || nChange > 0) {\n+                    txNew.vout.insert(position, newTxOut);\n                 } else {\n-                    reservekey.ReturnKey();\n                     nChangePosInOut = -1;\n                 }\n \n@@ -2709,41 +2700,43 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     return false;\n                 }\n \n-                if (nFeeRet >= nFeeNeeded) {\n-                    // Reduce fee to only the needed amount if we have change\n-                    // output to increase.  This prevents potential overpayment\n-                    // in fees if the coins selected to meet nFeeNeeded result\n-                    // in a transaction that requires less fee than the prior\n-                    // iteration.\n-                    // TODO: The case where nSubtractFeeFromAmount > 0 remains\n-                    // to be addressed because it requires returning the fee to\n-                    // the payees and not the change output.\n-                    // TODO: The case where there is no change output remains\n-                    // to be addressed so we avoid creating too small an output.\n-                    if (nFeeRet > nFeeNeeded && nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                        CAmount extraFeePaid = nFeeRet - nFeeNeeded;\n-                        std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                        change_position->nValue += extraFeePaid;\n-                        nFeeRet -= extraFeePaid;\n+                // Modify fee to the needed amount from the change\n+                // output, or recipients in the case of subtractFeeFromAmount.\n+                // This prevents potential overpayment in fees if\n+                // the coins selected to meet nFeeNeeded result\n+                // in a transaction that requires less fee than the prior\n+                // iteration.\n+                CAmount excessFee = nFeeRet - nFeeNeeded;\n+\n+                if (nSubtractFeeFromAmount == 0) {\n+                    // Take fee excess\n+                    txNew.vout[nChangePosInOut].nValue += excessFee;;\n+                    nFeeRet -= excessFee;\n+\n+                    // Negative change value means include more fee and try again.\n+                    if (txNew.vout[nChangePosInOut].nValue < 0) {\n+                        reservekey.ReturnKey();\n+                        nFeeRet = nFeeNeeded;\n+                        continue;\n                     }\n-                    break; // Done, enough fee included.\n+                    // Drop change if dust\n+                    else if (IsDust(txNew.vout[nChangePosInOut], ::dustRelayFee)) {\n+                        nFeeRet += txNew.vout[nChangePosInOut].nValue;\n+                        txNew.vout.erase(txNew.vout.begin() + nChangePosInOut);\n+                        nChangePosInOut = -1;\n+                        reservekey.ReturnKey();\n+                    }\n+                    break;\n                 }\n-\n-                // Try to reduce change to include necessary fee\n-                if (nChangePosInOut != -1 && nSubtractFeeFromAmount == 0) {\n-                    CAmount additionalFeeNeeded = nFeeNeeded - nFeeRet;\n-                    std::vector<CTxOut>::iterator change_position = txNew.vout.begin()+nChangePosInOut;\n-                    // Only reduce change if remaining amount is still a large enough output.\n-                    if (change_position->nValue >= MIN_FINAL_CHANGE + additionalFeeNeeded) {\n-                        change_position->nValue -= additionalFeeNeeded;\n-                        nFeeRet += additionalFeeNeeded;\n-                        break; // Done, able to increase fee from change\n+                // TODO: The case where nSubtractFeeFromAmount > 0 remains\n+                // to be addressed because it requires returning the fee to\n+                // the payees and not the change output.\n+                else {\n+                    if (excessFee >= 0) {\n+                        break;\n                     }\n+                    nFeeRet = nFeeNeeded;\n                 }\n-\n-                // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n-                continue;\n             }\n         }\n "
      }
    ]
  },
  {
    "sha": "f8415fcc03c5b79669a011651236bdf174f0ba3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODQxNWZjYzAzYzViNzk2NjlhMDExNjUxMjM2YmRmMTc0ZjBiYTNj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-12T14:16:17Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-06-24T13:12:22Z"
      },
      "message": "cache the first transaction that has change smaller than MIN_FINAL_CHANGE\n\nRaise the target fee, then try again. If the wallet has insufficient funds\nto reach MIN_FINAL_CHANGE then use the cached transaction.",
      "tree": {
        "sha": "f2101d01decb44fd791d27d9403f758fe2824b79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2101d01decb44fd791d27d9403f758fe2824b79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8415fcc03c5b79669a011651236bdf174f0ba3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8415fcc03c5b79669a011651236bdf174f0ba3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8415fcc03c5b79669a011651236bdf174f0ba3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8415fcc03c5b79669a011651236bdf174f0ba3c/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd20e0bc89b70e72047ce97a651d4d4f77e274ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd20e0bc89b70e72047ce97a651d4d4f77e274ab"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "201cf971e10edf68cab73156fb821d8d14cfe816",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8415fcc03c5b79669a011651236bdf174f0ba3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8415fcc03c5b79669a011651236bdf174f0ba3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f8415fcc03c5b79669a011651236bdf174f0ba3c",
        "patch": "@@ -2501,6 +2501,13 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     wtxNew.fTimeReceivedIsTxTime = true;\n     wtxNew.BindWallet(this);\n     CMutableTransaction txNew;\n+    // This transaction is used to track the best transaction that has change\n+    // falling between uneconomical dust and MIN_FINAL_CHANGE. If the wallet\n+    // runs out of funds trying to find a transaction that has pruneable\n+    // change dust or change larger than MIN_FINAL_CHANGE, it will\n+    // return this transaction.\n+    CMutableTransaction tx_cached;\n+    bool have_cached_txn = false;\n \n     // Discourage fee sniping.\n     //\n@@ -2592,6 +2599,11 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 setCoins.clear();\n                 if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n                 {\n+                    // We previously succeeded with smaller change we can keep\n+                    if (have_cached_txn) {\n+                        txNew = tx_cached;\n+                        break;\n+                    }\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n@@ -2720,11 +2732,23 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                         continue;\n                     }\n                     // Drop change if dust\n+                    // TODO replace with economical change calc\n                     else if (IsDust(txNew.vout[nChangePosInOut], ::dustRelayFee)) {\n                         nFeeRet += txNew.vout[nChangePosInOut].nValue;\n                         txNew.vout.erase(txNew.vout.begin() + nChangePosInOut);\n                         nChangePosInOut = -1;\n                         reservekey.ReturnKey();\n+                    // If larger than dust, but still small, increase fee target and try again\n+                    } else if (txNew.vout[nChangePosInOut].nValue < MIN_FINAL_CHANGE) {\n+                        // Save this transaction, use if we cannot get large-enough change\n+                        if (!have_cached_txn) {\n+                            tx_cached = txNew;\n+                            have_cached_txn = true;\n+                        }\n+                        reservekey.ReturnKey();\n+                        // Excess fee will be given to change\n+                        nFeeRet = nFeeNeeded + (MIN_FINAL_CHANGE/2);\n+                        continue;\n                     }\n                     break;\n                 }"
      }
    ]
  }
]