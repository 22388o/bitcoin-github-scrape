[
  {
    "sha": "29ed2d64f6d03e242068589ba35805b3fd2ad05a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWVkMmQ2NGY2ZDAzZTI0MjA2ODU4OWJhMzU4MDViM2ZkMmFkMDVh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2018-10-10T20:27:51Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2018-10-10T20:27:51Z"
      },
      "message": "Improve CAmount tests\n\nThis provides:\n  - more `MoneyRange` tests;\n  - new `CFeeRate` constructor tests with zero byte size;\n  - explicit using of the `CAmount` type.",
      "tree": {
        "sha": "dd33781f3b95260c0c2e6792fe157151b787057b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd33781f3b95260c0c2e6792fe157151b787057b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29ed2d64f6d03e242068589ba35805b3fd2ad05a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlu+Yb8ACgkQQQEIES5+\nqB/JmA/+PXwF6HuDEry/Qu8M2gtJah2SigPFdOvqmiDWt3m8AFkKDCh1JvkhW15c\nTNWqxpX7QF5eVWTxISrkL4+TEdlyE/KBoI1Z/EVcSgNUo3dAK3bMp34dUKehGpIe\nvBpEjK25e0PBijHi0x+qRrPoDwkyaJcMD8L3c6yIvdjvx+GppbvR+6uKApj0FaKk\nzyIzBnw3OK78q6HuJJQNWAy2V6opUfK3dAFKnVHE1Sp56C9V0tk7AGHmceR9Dnyk\nyLRUZ078xaoos7RALJvVyd8NXygHpi+J8cyAPUVxxZ0uIIUmNNtDfxleus0Uby+X\nFfoBQpxIkFolED+vaoiB8We4Q1y74dDib4HA+DMfJFqGM3HIgioqO2Zh01H7iHuV\nT62q/xgXkS39XLGsyfF4vDTelMKyTPjdliNlNfjtSr9zpwgUSViC5Qt5kapUo751\n7A3HYtTRPXMe2QHhaedh4H3CAwbfpe49iyOvAomHzBagYGBRvKWsyiB6qY+MgOXw\n8usnQQD3fbtFVWAkevEidOhk7KBAQBM9woHb1SFedM+cii4LBXsm1hgrM0zZCSMQ\nq41Y/4RdA8cQOL0fU0gVkLZe55kAAuGrYtIL6NA2fgSL9ilYRwVgY7DRTINJovnv\nuuF6Jjg2XQaa01EFyFCN7zbNJ2Fo1inhzcWGkZh8+exU/PITMTY=\n=wiVk\n-----END PGP SIGNATURE-----",
        "payload": "tree dd33781f3b95260c0c2e6792fe157151b787057b\nparent be992701b018f256db6d64786624be4cb60d8975\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1539203271 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1539203271 +0300\n\nImprove CAmount tests\n\nThis provides:\n  - more `MoneyRange` tests;\n  - new `CFeeRate` constructor tests with zero byte size;\n  - explicit using of the `CAmount` type.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ed2d64f6d03e242068589ba35805b3fd2ad05a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29ed2d64f6d03e242068589ba35805b3fd2ad05a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ed2d64f6d03e242068589ba35805b3fd2ad05a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be992701b018f256db6d64786624be4cb60d8975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be992701b018f256db6d64786624be4cb60d8975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be992701b018f256db6d64786624be4cb60d8975"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 31,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1ff040b0775912b2cf1d580a3515ecece4d694ce",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 26,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29ed2d64f6d03e242068589ba35805b3fd2ad05a/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29ed2d64f6d03e242068589ba35805b3fd2ad05a/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=29ed2d64f6d03e242068589ba35805b3fd2ad05a",
        "patch": "@@ -13,8 +13,10 @@ BOOST_FIXTURE_TEST_SUITE(amount_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(MoneyRangeTest)\n {\n     BOOST_CHECK_EQUAL(MoneyRange(CAmount(-1)), false);\n-    BOOST_CHECK_EQUAL(MoneyRange(MAX_MONEY + CAmount(1)), false);\n+    BOOST_CHECK_EQUAL(MoneyRange(CAmount(0)), true);\n     BOOST_CHECK_EQUAL(MoneyRange(CAmount(1)), true);\n+    BOOST_CHECK_EQUAL(MoneyRange(MAX_MONEY), true);\n+    BOOST_CHECK_EQUAL(MoneyRange(MAX_MONEY + CAmount(1)), false);\n }\n \n BOOST_AUTO_TEST_CASE(GetFeeTest)\n@@ -23,50 +25,53 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n \n     feeRate = CFeeRate(0);\n     // Must always return 0\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(1e5), 0);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e5), CAmount(0));\n \n     feeRate = CFeeRate(1000);\n     // Must always just return the arg\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(1), 1);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(121), 121);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(999), 999);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), 1e3);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), 9e3);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1), CAmount(1));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(121));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(999));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), CAmount(1e3));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(9e3));\n \n     feeRate = CFeeRate(-1000);\n     // Must always just return -1 * arg\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(1), -1);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(121), -121);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(999), -999);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), -1e3);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), -9e3);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1), CAmount(-1));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(-121));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(-999));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), CAmount(-1e3));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(-9e3));\n \n     feeRate = CFeeRate(123);\n     // Truncates the result, if not integer\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(8), 1); // Special case: returns 1 instead of 0\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9), 1);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(121), 14);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(122), 15);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(999), 122);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), 123);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), 1107);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(1)); // Special case: returns 1 instead of 0\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(1));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(14));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(122), CAmount(15));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(122));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), CAmount(123));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(1107));\n \n     feeRate = CFeeRate(-123);\n     // Truncates the result, if not integer\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(8), -1); // Special case: returns -1 instead of 0\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9), -1);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(-1)); // Special case: returns -1 instead of 0\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(-1));\n \n     // check alternate constructor\n     feeRate = CFeeRate(1000);\n     altFeeRate = CFeeRate(feeRate);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(100), altFeeRate.GetFee(100));\n \n     // Check full constructor\n+    BOOST_CHECK(CFeeRate(CAmount(-1), 0) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate(CAmount(0), 0) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate(CAmount(1), 0) == CFeeRate(0));\n     // default value\n     BOOST_CHECK(CFeeRate(CAmount(-1), 1000) == CFeeRate(-1));\n     BOOST_CHECK(CFeeRate(CAmount(0), 1000) == CFeeRate(0));"
      }
    ]
  }
]