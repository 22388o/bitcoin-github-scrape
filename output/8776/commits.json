[
  {
    "sha": "fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjBjOTM0ZDFiMmQ1OGIxNjVlMTNkMmIzMDFlNTQ4NzBjNWRjNjBm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-09-09T08:15:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-11T11:35:49Z"
      },
      "message": "Wallet: Let the interval-flushing thread figure out the filename",
      "tree": {
        "sha": "50e25726ca442c99754413e283ac7adca78a8413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50e25726ca442c99754413e283ac7adca78a8413"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc7aad0088432b3693a055b0916a869632bdbe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc7aad0088432b3693a055b0916a869632bdbe2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc7aad0088432b3693a055b0916a869632bdbe2"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "36b7ddbbc584cf1f729659153288b5fb372a656e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
        "patch": "@@ -3549,14 +3549,18 @@ bool CWallet::InitLoadWallet()\n     return true;\n }\n \n+std::atomic<bool> CWallet::fFlushThreadRunning(false);\n+\n void CWallet::postInitProcess(boost::thread_group& threadGroup)\n {\n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n     ReacceptWalletTransactions();\n \n     // Run a thread to flush wallet periodically\n-    threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(this->strWalletFile)));\n+    if (!CWallet::fFlushThreadRunning.exchange(true)) {\n+        threadGroup.create_thread(ThreadFlushWalletDB);\n+    }\n }\n \n bool CWallet::ParameterInteraction()"
      },
      {
        "sha": "1814870c5e9fb9061aec6412ab3b3990f0cb0355",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
        "patch": "@@ -18,6 +18,7 @@\n #include \"wallet/rpcwallet.h\"\n \n #include <algorithm>\n+#include <atomic>\n #include <map>\n #include <set>\n #include <stdexcept>\n@@ -550,6 +551,8 @@ class CAccountingEntry\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n+    static std::atomic<bool> fFlushThreadRunning;\n+\n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n      * all coins from coinControl are selected; Never select unconfirmed coins"
      },
      {
        "sha": "9496c4404d51b03bbe69f610ef9504dfdcb7424e",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
        "patch": "@@ -768,7 +768,7 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n     return DB_LOAD_OK;\n }\n \n-void ThreadFlushWalletDB(const string& strFile)\n+void ThreadFlushWalletDB()\n {\n     // Make this thread recognisable as the wallet flushing thread\n     RenameThread(\"bitcoin-wallet\");\n@@ -810,6 +810,7 @@ void ThreadFlushWalletDB(const string& strFile)\n                 if (nRefCount == 0)\n                 {\n                     boost::this_thread::interruption_point();\n+                    const std::string& strFile = pwalletMain->strWalletFile;\n                     map<string, int>::iterator _mi = bitdb.mapFileUseCount.find(strFile);\n                     if (_mi != bitdb.mapFileUseCount.end())\n                     {"
      },
      {
        "sha": "efb5e54786f613aa5eaf2d50aefc27335e588bc6",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb0c934d1b2d58b165e13d2b301e54870c5dc60f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
        "patch": "@@ -182,6 +182,6 @@ class CWalletDB : public CDB\n \n };\n \n-void ThreadFlushWalletDB(const std::string& strFile);\n+void ThreadFlushWalletDB();\n \n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "5394b3940dec1fd35952d344e6373fb7115c5490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mzk0YjM5NDBkZWMxZmQzNTk1MmQzNDRlNjM3M2ZiNzExNWM1NDkw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-09-09T08:44:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-11T11:35:49Z"
      },
      "message": "Wallet: Split main logic from InitLoadWallet into CreateWalletFromFile",
      "tree": {
        "sha": "5e7bd1f7559b263642345468ccd75eedcde39966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e7bd1f7559b263642345468ccd75eedcde39966"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5394b3940dec1fd35952d344e6373fb7115c5490",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5394b3940dec1fd35952d344e6373fb7115c5490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5394b3940dec1fd35952d344e6373fb7115c5490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5394b3940dec1fd35952d344e6373fb7115c5490/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb0c934d1b2d58b165e13d2b301e54870c5dc60f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb0c934d1b2d58b165e13d2b301e54870c5dc60f"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 54,
      "deletions": 28
    },
    "files": [
      {
        "sha": "f88da978d4c0417428cdc0a7cd9d693ce6bc7a76",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 28,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5394b3940dec1fd35952d344e6373fb7115c5490/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5394b3940dec1fd35952d344e6373fb7115c5490/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5394b3940dec1fd35952d344e6373fb7115c5490",
        "patch": "@@ -3374,16 +3374,8 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-bool CWallet::InitLoadWallet()\n+CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n {\n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        pwalletMain = NULL;\n-        LogPrintf(\"Wallet disabled!\\n\");\n-        return true;\n-    }\n-\n-    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n-\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n@@ -3393,7 +3385,8 @@ bool CWallet::InitLoadWallet()\n         CWallet *tempWallet = new CWallet(walletFile);\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n-            return InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            return NULL;\n         }\n \n         delete tempWallet;\n@@ -3408,23 +3401,29 @@ bool CWallet::InitLoadWallet()\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            return InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+        if (nLoadWalletRet == DB_CORRUPT) {\n+            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            return NULL;\n+        }\n         else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n         {\n             InitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n                                          \" or address book entries might be missing or incorrect.\"),\n                 walletFile));\n         }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            return InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n-                               walletFile, _(PACKAGE_NAME)));\n+        else if (nLoadWalletRet == DB_TOO_NEW) {\n+            InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n+            return NULL;\n+        }\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n-            return InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            return NULL;\n+        }\n+        else {\n+            InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+            return NULL;\n         }\n-        else\n-            return InitError(strprintf(_(\"Error loading %s\"), walletFile));\n     }\n \n     if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n@@ -3440,7 +3439,8 @@ bool CWallet::InitLoadWallet()\n             LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            return InitError(_(\"Cannot downgrade wallet\"));\n+            InitError(_(\"Cannot downgrade wallet\"));\n+            return NULL;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n     }\n@@ -3457,18 +3457,24 @@ bool CWallet::InitLoadWallet()\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {\n             walletInstance->SetDefaultKey(newDefaultKey);\n-            if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                return InitError(_(\"Cannot write default address\") += \"\\n\");\n+            if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\")) {\n+                InitError(_(\"Cannot write default address\") += \"\\n\");\n+                return NULL;\n+            }\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n     }\n     else if (mapArgs.count(\"-usehd\")) {\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n-        if (walletInstance->IsHDEnabled() && !useHD)\n-            return InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n-        if (!walletInstance->IsHDEnabled() && useHD)\n-            return InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+        if (walletInstance->IsHDEnabled() && !useHD) {\n+            InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+            return NULL;\n+        }\n+        if (!walletInstance->IsHDEnabled() && useHD) {\n+            InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+            return NULL;\n+        }\n     }\n \n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n@@ -3498,8 +3504,10 @@ bool CWallet::InitLoadWallet()\n             while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n                 block = block->pprev;\n \n-            if (pindexRescan != block)\n-                return InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+            if (pindexRescan != block) {\n+                InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                return NULL;\n+            }\n         }\n \n         uiInterface.InitMessage(_(\"Rescanning...\"));\n@@ -3544,7 +3552,24 @@ bool CWallet::InitLoadWallet()\n         LogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n     }\n \n-    pwalletMain = walletInstance;\n+    return walletInstance;\n+}\n+\n+bool CWallet::InitLoadWallet()\n+{\n+    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+        return true;\n+    }\n+\n+    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+\n+    CWallet * const pwallet = CreateWalletFromFile(walletFile);\n+    if (!pwallet) {\n+        return false;\n+    }\n+    pwalletMain = pwallet;\n \n     return true;\n }"
      },
      {
        "sha": "f536dbe5c8e872aa0d4c825535831bc929a7b076",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5394b3940dec1fd35952d344e6373fb7115c5490/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5394b3940dec1fd35952d344e6373fb7115c5490/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5394b3940dec1fd35952d344e6373fb7115c5490",
        "patch": "@@ -917,6 +917,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static std::string GetWalletHelpString(bool showDebug);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n+    static CWallet* CreateWalletFromFile(const std::string walletFile);\n     static bool InitLoadWallet();\n \n     /**"
      }
    ]
  }
]