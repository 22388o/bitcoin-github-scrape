[
  {
    "sha": "fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
    "node_id": "C_kwDOABII59oAKGZhMmFjNTg4MWVkZjhkMGQzZjE1YzQzZjA4OWYxODMxMzQ4ZGZhZTI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-06T13:19:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-06T13:16:59Z"
      },
      "message": "test: Replace satoshi_round with int() or Decimal()\n\nsatoshi_round will round down. To make the code easier to parse use\nDecimal() where possible, which does not round. Or use int(), which\nexplicitly rounds down.",
      "tree": {
        "sha": "394995de99764ede38e30b9c1c7161bd19f98354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/394995de99764ede38e30b9c1c7161bd19f98354"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg9lwwAz6mUTNr8A/8uSgHnOzf4ywAHtzboDCfUY8BKMk7QYW2/0dR08CscFl+z\nRO5564ztUlplO+eDS0MwGdNM+uyrFgbJ+9eC2ReCPE7m52M76cT4m5f+uKiqhXKO\nMw6hS/rZ5Y8V+uXDqx8GtupmqmZxVeRQXKLHKsil5We1Ud7FRMtDDCiJhGdyPdAk\nSpf+7P92ARmTQlvvRgcxN2h+qcV2Lu/h8CqXubiO2GrH8TlbaqPGGbC/Vd9ie4vZ\nrB0ki56OYwvin0LCLZmH/bwNMAcAibAOSI8BqPhDlU0U0/CZqa6r8d9OYJA5oQzI\nFAa1YriLwUZDl8ndoMZXzZjcpO06tA9WPx+cU2uY73zZJ0TrKw2PCpca1mf0+HvF\nQ+2J1YKXPk7IxXqnynR9DGBIypM8pHoqPl8ISnT2ZQTHJcrYhYtJfNHbWa8v1ZXa\nHoZLzvAYsDscLwKhgfappXTxeRml39Ngn8d1cjIMAJeJnb4kM9ugs9CPyjrbqR0P\nY4dc96WZ\n=Mybt\n-----END PGP SIGNATURE-----",
        "payload": "tree 394995de99764ede38e30b9c1c7161bd19f98354\nparent 66d11b14357c474416181227e197406ca8fb5dee\nauthor MarcoFalke <falke.marco@gmail.com> 1633526374 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1633526219 +0200\n\ntest: Replace satoshi_round with int() or Decimal()\n\nsatoshi_round will round down. To make the code easier to parse use\nDecimal() where possible, which does not round. Or use int(), which\nexplicitly rounds down.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66d11b14357c474416181227e197406ca8fb5dee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66d11b14357c474416181227e197406ca8fb5dee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66d11b14357c474416181227e197406ca8fb5dee"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "99ac1b5884709fc74ee785909d2a8610cbbf77fe",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
        "patch": "@@ -24,7 +24,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    satoshi_round,\n     softfork_active,\n )\n from test_framework.script_util import DUMMY_P2WPKH_SCRIPT\n@@ -94,7 +93,7 @@ def test_disable_flag(self):\n         utxo = utxos[0]\n \n         tx1 = CTransaction()\n-        value = int(satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN)\n+        value = int((utxo[\"amount\"] - self.relayfee) * COIN)\n \n         # Check that the disable flag disables relative locktime.\n         # If sequence locks were used, this would require 1 block for the"
      },
      {
        "sha": "3943bba4899451db468512e102487119e5ef8183",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
        "patch": "@@ -14,7 +14,6 @@\n     assert_equal,\n     assert_raises_rpc_error,\n     chain_transaction,\n-    satoshi_round,\n )\n \n # default limits\n@@ -209,10 +208,10 @@ def run_test(self):\n             entry = self.nodes[0].getmempoolentry(x)\n             descendant_fees += entry['fee']\n             if (x == chain[-1]):\n-                assert_equal(entry['modifiedfee'], entry['fee']+satoshi_round(0.00002))\n-                assert_equal(entry['fees']['modified'], entry['fee']+satoshi_round(0.00002))\n+                assert_equal(entry['modifiedfee'], entry['fee'] + Decimal(\"0.00002\"))\n+                assert_equal(entry['fees']['modified'], entry['fee'] + Decimal(\"0.00002\"))\n             assert_equal(entry['descendantfees'], descendant_fees * COIN + 2000)\n-            assert_equal(entry['fees']['descendant'], descendant_fees+satoshi_round(0.00002))\n+            assert_equal(entry['fees']['descendant'], descendant_fees + Decimal(\"0.00002\"))\n \n         # Check that node1's mempool is as expected (-> custom ancestor limit)\n         mempool0 = self.nodes[0].getrawmempool(False)\n@@ -308,7 +307,7 @@ def run_test(self):\n         value = utxo[0]['amount']\n         vout = utxo[0]['vout']\n \n-        send_value = satoshi_round((value - fee)/2)\n+        send_value = (value - fee) / 2\n         inputs = [ {'txid' : txid, 'vout' : vout} ]\n         outputs = {}\n         for _ in range(2):"
      },
      {
        "sha": "f99dc8da0dc7e7a9dcb11e347b0f7adc7e02bdce",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2ac5881edf8d0d3f15c43f089f1831348dfae2/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fa2ac5881edf8d0d3f15c43f089f1831348dfae2",
        "patch": "@@ -32,7 +32,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n-    satoshi_round,\n )\n \n DEFAULT_FEE = Decimal(\"0.0001\")\n@@ -174,13 +173,12 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n             vsize = Decimal(96)  # anyone-can-spend\n         else:\n             vsize = Decimal(168)  # P2PK (73 bytes scriptSig + 35 bytes scriptPubKey + 60 bytes other)\n-        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate * (vsize / 1000))\n-        fee = utxo_to_spend['value'] - send_value\n+        send_value = int(COIN * (utxo_to_spend['value'] - fee_rate * (vsize / 1000)))\n         assert send_value > 0\n \n         tx = CTransaction()\n         tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']), nSequence=sequence)]\n-        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.vout = [CTxOut(send_value, self._scriptPubKey)]\n         tx.nLockTime = locktime\n         if not self._address:\n             # raw script\n@@ -199,7 +197,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:\n             assert_equal(tx_info['vsize'], vsize)\n-            assert_equal(tx_info['fees']['base'], fee)\n+            assert_equal(tx_info['fees']['base'], utxo_to_spend['value'] - Decimal(send_value) / COIN)\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n \n     def sendrawtransaction(self, *, from_node, tx_hex):"
      }
    ]
  }
]