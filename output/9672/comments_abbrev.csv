ryanofsky,2017-03-24T18:18:47Z,"#9592 is merged now, so this would be good to rebase",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-289104977,289104977,
jonasschnelli,2017-04-06T18:20:02Z,This needs rebase. The QT part is now in master.,https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-292262895,292262895,
laanwj,2017-04-24T12:01:12Z,"> This needs rebase. The QT part is now in master.\n\nYes, can we please try to move this forward?",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-296639161,296639161,
luke-jr,2017-06-05T23:28:18Z,Rebased,https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306338798,306338798,
laanwj,2017-06-07T13:31:36Z,utACK 9a5a1d7,https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306795373,306795373,
laanwj,2017-06-07T13:49:36Z,"@luke-jr Looks like you didn't pay attention to @jnewbery's comments at all. I assumed so because two months have passed and you did a rebase since.\nCan you please fix them up after the fact?\n",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306800544,306800544,
jnewbery,2017-06-07T13:55:55Z,"huh? This only got a single untested ACK from the maintainer since a large rebase, yet it's already been merged. Most of my comments were nits, but I'm surprised this got merged in without tests covering the new functionality. This is essentially untested code at this point (either by reviewers or test cases).",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306802376,306802376,
laanwj,2017-06-07T14:01:41Z,"Code changes look good to me though. @ryanofsky also utACKed it.\nIt's unfortunate that this moved so slowly, while the GUI functionality was already in there for ages.\nBut yes I had missed that your changes weren't made yet.\nMay be better to revert.\n",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306803962,306803962,
laanwj,2017-06-07T14:13:13Z,"If so, I'm not sure whether to revert entirely or partially.\nE.g. https://github.com/bitcoin/bitcoin/pull/9672/commits/b005bf21a7cabe827ef62f266c22adf2ee745b61 that introduces MAX_BIP125_RBF_SEQUENCE is obviously correct and an improvement.",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306807573,306807573,
jonasschnelli,2017-06-07T15:11:21Z,post merge utACK 9a5a1d7d452eff242be1bfe155a30c1f05b2d5a4.,https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306825623,306825623,
ryanofsky,2017-06-07T15:12:19Z,"Just my 2 cents, but I don't see why this would be reverted. Personally, when I post suggestions on a PR, my only expectation is that the PR author will take a look at them and implement any that seem to be worthwhile. If the author didn't implement an idea I really liked, I would follow up with my own PR. If I had actual pressing feedback that I thought should hold up a merge, I'd accompany it wi",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306825897,306825897,
laanwj,2017-06-07T15:16:08Z,"OK - agreement on IRC and here is to not revert this, thanks everyone",https://github.com/bitcoin/bitcoin/pull/9672#issuecomment-306827158,306827158,
MarcoFalke,2017-02-03T02:03:43Z,"```cpp\nrpc/rawtransaction.cpp:380:91: error: ‘fWalletRbf’ was not declared in this scope",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99264801,99264801,src/rpc/rawtransaction.cpp
luke-jr,2017-02-03T04:00:18Z,I guess we don't really want `-walletrbf` to work on rawtx anyway. Fixed,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99273316,99273316,src/rpc/rawtransaction.cpp
ryanofsky,2017-02-03T17:51:24Z,This deleted line should be restored.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99387304,99387304,src/rpc/rawtransaction.cpp
ryanofsky,2017-02-03T18:05:45Z,"I think this if condition would be more readable if it were defined in terms of an ""rbfOptOut"" variable complementing the existing ""rbfOptIn"" variable above:\n\n```\nbool rbfOptIn = request.params.size() > 3 && request.params[3].isTrue();\nbool rbfOptOut = request.params.size() > 3 && request.params[3].isFalse();\n```",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99389886,99389886,src/rpc/rawtransaction.cpp
ryanofsky,2017-02-03T18:14:46Z,Would be nice to exercise in an rpc test.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99391528,99391528,src/rpc/rawtransaction.cpp
ryanofsky,2017-02-03T18:26:18Z,"Saying default=false is kind of misleading, because if you actually pass false instead of omitting this, it can cause the ""Invalid parameter combination"" error to trigger. Maybe:\n\n(boolean, optional, default=null) Whether to signal that this transaction may be replaced by another with higher fees. If false, it is an error if any input specifies an incompatible sequence number.\n\n\n",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99393669,99393669,src/rpc/rawtransaction.cpp
ryanofsky,2017-02-03T18:39:48Z,"You moved almost all the lines that mutate coinControl from FundTransaction to fundrawtransaction except for this one and the ""coinControl.fAllowOtherInputs = true"" line above. Any reason not to move these as well? This way the coin control object is fully initialized in one place and the argument can be const.",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99396296,99396296,src/wallet/wallet.cpp
ryanofsky,2017-02-03T18:42:10Z,"""higher"" spelling",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99396767,99396767,src/wallet/rpcwallet.cpp
ryanofsky,2017-02-03T18:50:52Z,"Unsigned int should be uint32_t.\n\nAlso, maybe this shouldn't overwrite sequence numbers if they already signal replacability, e.g.:\n\ntxin.nSequence = std::min(txin.nSequence, std::numeric_limits<uint32_t>::max() - 2)\n",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99398485,99398485,src/bitcoin-tx.cpp
luke-jr,2017-02-03T19:27:27Z,This condition is being removed to check both options equally.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99405611,99405611,src/rpc/rawtransaction.cpp
luke-jr,2017-02-03T19:29:37Z,That'd be doing too much at the caller side IMO.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99405992,99405992,src/wallet/wallet.cpp
luke-jr,2017-02-03T19:31:12Z,"When sequences aren't provided, this value does decide them, and defaults to false. I'll combine the two...",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r99406285,99406285,src/rpc/rawtransaction.cpp
ryanofsky,2017-02-23T22:26:23Z,Maybe change <unsigned int> to <uint32_t> while you are here.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r102835267,102835267,src/wallet/wallet.cpp
jnewbery,2017-04-06T13:58:51Z,"suggest you combine this with the line above (and remove trailing semicolon):\n\n`ins = [self.nodes[0].listunspent()[0]]`\n",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110168563,110168563,qa/rpc-tests/replace-by-fee.py
jnewbery,2017-04-06T13:59:56Z,"nit: perhaps you could use named arguments to make the it clear what `0, True` and `0, False` arguments do.",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110168906,110168906,qa/rpc-tests/replace-by-fee.py
jnewbery,2017-04-06T14:01:50Z,"suggest you assert directly on the values rather than assign them to a throwaway local variable and assert immediately. eg:\n\n` assert_equal(self.nodes[0].decoderawtransaction(rawtx0)[""vin""][0][""sequence""], 4294967293)`\n\nalso, please add a comment explaining the magic 4294967293 and 4294967295 numbers (or better yet, define a MAX_BIP125_RBF_SEQUENCE constant)",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110169361,110169361,qa/rpc-tests/replace-by-fee.py
jnewbery,2017-04-06T16:19:35Z,"This won't throw an error if the parameter isn't a bool (and silently set rbfOptIn to false).\n\nPrefer to use get_bool() instead of isTrue() to throw an error when the caller accidentally uses a string ""true"" instead of a bool true.",https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110205968,110205968,src/rpc/rawtransaction.cpp
jnewbery,2017-04-06T16:46:17Z,nit: I think this would be clearer if it was an else if after the `if (sequenceObj.isNum())` block,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110211827,110211827,src/rpc/rawtransaction.cpp
jnewbery,2017-04-06T16:54:19Z,I'm confused by this as well. Can you expand a bit on why these particular members shouldn't be set by the caller?,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110213562,110213562,src/wallet/wallet.cpp
jnewbery,2017-04-06T16:59:39Z,I don't think this comment adds any value.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110214632,110214632,src/wallet/rpcwallet.cpp
jnewbery,2017-04-06T17:03:07Z,The coinControl constructor is already setting all of these members (in CCoinControl::SetNull()). Why are you setting them again here?,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110215372,110215372,src/wallet/rpcwallet.cpp
jnewbery,2017-04-06T17:09:47Z,+1 for using `MAX_BIP125_RBF_SEQUENCE` instead of the magic subtraction you're replacing.,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110216624,110216624,src/wallet/wallet.cpp
jnewbery,2017-04-06T17:11:29Z,nit: suggest you remove the unused default value for keepReserveKey,https://github.com/bitcoin/bitcoin/pull/9672#discussion_r110216973,110216973,src/wallet/wallet.h
