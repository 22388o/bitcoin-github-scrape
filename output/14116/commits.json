[
  {
    "sha": "922bbc80c72bf3b59d7ecb0beae2b726597b045f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjJiYmM4MGM3MmJmM2I1OWQ3ZWNiMGJlYWUyYjcyNjU5N2IwNDVm",
    "commit": {
      "author": {
        "name": "fingera",
        "email": "liuyujun@fingera.cn",
        "date": "2018-08-31T04:02:36Z"
      },
      "committer": {
        "name": "fingera",
        "email": "liuyujun@fingera.cn",
        "date": "2018-08-31T04:02:36Z"
      },
      "message": "improve security",
      "tree": {
        "sha": "351e67a94708180e9b4d5bdc19e3bed0aaf3bfc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/351e67a94708180e9b4d5bdc19e3bed0aaf3bfc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/922bbc80c72bf3b59d7ecb0beae2b726597b045f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bbc80c72bf3b59d7ecb0beae2b726597b045f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/922bbc80c72bf3b59d7ecb0beae2b726597b045f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bbc80c72bf3b59d7ecb0beae2b726597b045f/comments",
    "author": {
      "login": "fingera",
      "id": 7310938,
      "node_id": "MDQ6VXNlcjczMTA5Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7310938?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fingera",
      "html_url": "https://github.com/fingera",
      "followers_url": "https://api.github.com/users/fingera/followers",
      "following_url": "https://api.github.com/users/fingera/following{/other_user}",
      "gists_url": "https://api.github.com/users/fingera/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fingera/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fingera/subscriptions",
      "organizations_url": "https://api.github.com/users/fingera/orgs",
      "repos_url": "https://api.github.com/users/fingera/repos",
      "events_url": "https://api.github.com/users/fingera/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fingera/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fingera",
      "id": 7310938,
      "node_id": "MDQ6VXNlcjczMTA5Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7310938?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fingera",
      "html_url": "https://github.com/fingera",
      "followers_url": "https://api.github.com/users/fingera/followers",
      "following_url": "https://api.github.com/users/fingera/following{/other_user}",
      "gists_url": "https://api.github.com/users/fingera/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fingera/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fingera/subscriptions",
      "organizations_url": "https://api.github.com/users/fingera/orgs",
      "repos_url": "https://api.github.com/users/fingera/repos",
      "events_url": "https://api.github.com/users/fingera/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fingera/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07033a8f91975028e366920b0da3f7e2a6ef9cbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07033a8f91975028e366920b0da3f7e2a6ef9cbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07033a8f91975028e366920b0da3f7e2a6ef9cbd"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 26,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ff8eb56b33f2e94b5a1fd210fa545ceb776ddfb7",
        "filename": "src/crypto/hmac_sha512.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/hmac_sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/hmac_sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.cpp?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <support/cleanse.h>\n+\n #include <crypto/hmac_sha512.h>\n \n #include <string.h>\n@@ -32,3 +34,13 @@ void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n     inner.Finalize(temp);\n     outer.Write(temp, 64).Finalize(hash);\n }\n+\n+void CHMAC_SHA512::Finalizese(unsigned char hash[OUTPUT_SIZE])\n+{\n+    unsigned char temp[64];\n+    inner.Finalize(temp);\n+    outer.Write(temp, 64).Finalize(hash);\n+    inner.MemoryCleanse();\n+    outer.MemoryCleanse();\n+    memory_cleanse(temp, sizeof(temp));\n+}"
      },
      {
        "sha": "beddcaac3a29586b432eb9462b5ea64e86914119",
        "filename": "src/crypto/hmac_sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/hmac_sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/hmac_sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.h?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -27,6 +27,7 @@ class CHMAC_SHA512\n         return *this;\n     }\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n+    void Finalizese(unsigned char hash[OUTPUT_SIZE]);\n };\n \n #endif // BITCOIN_CRYPTO_HMAC_SHA512_H"
      },
      {
        "sha": "1d83a1307cfeb8a95afb5bea498e44239d4a4d75",
        "filename": "src/crypto/sha512.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.cpp?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <support/cleanse.h>\n+\n #include <crypto/sha512.h>\n \n #include <crypto/common.h>\n@@ -205,3 +207,9 @@ CSHA512& CSHA512::Reset()\n     sha512::Initialize(s);\n     return *this;\n }\n+\n+void CSHA512::MemoryCleanse() {\n+    bytes = 0;\n+    sha512::Initialize(s);\n+    memory_cleanse(buf, sizeof(buf));\n+}"
      },
      {
        "sha": "5d3dc1e45b8bb898de29084c09fc219c5638823e",
        "filename": "src/crypto/sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -23,6 +23,7 @@ class CSHA512\n     CSHA512& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA512& Reset();\n+    void MemoryCleanse();\n };\n \n #endif // BITCOIN_CRYPTO_SHA512_H"
      },
      {
        "sha": "e375d16b76842f5421ab504e17e67b1803e85a8d",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -75,7 +75,7 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[1] = (nChild >> 16) & 0xFF;\n     num[2] = (nChild >>  8) & 0xFF;\n     num[3] = (nChild >>  0) & 0xFF;\n-    CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n+    CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalizese(output);\n }\n \n #define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))"
      },
      {
        "sha": "ea709121bd7730ae3760b554c3d44c59a1e8c4f0",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -296,7 +296,7 @@ bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n void CExtKey::SetSeed(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n-    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n+    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalizese(vout.data());\n     key.Set(vout.data(), vout.data() + 32, true);\n     memcpy(chaincode.begin(), vout.data() + 32, 32);\n     nDepth = 0;"
      },
      {
        "sha": "a872ff7645dec212d538540d81da4c8e2d75a0b9",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bbc80c72bf3b59d7ecb0beae2b726597b045f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "patch": "@@ -64,7 +64,7 @@ bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n     }\n \n     // hash pubkey/privkey to accelerate wallet load\n-    std::vector<unsigned char> vchKey;\n+    std::vector<unsigned char, secure_allocator<unsigned char> > vchKey;\n     vchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n     vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n     vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n@@ -277,7 +277,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (!hash.IsNull())\n             {\n                 // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n+                std::vector<unsigned char, secure_allocator<unsigned char> > vchKey;\n                 vchKey.reserve(vchPubKey.size() + pkey.size());\n                 vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n                 vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());"
      }
    ]
  },
  {
    "sha": "d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGY5NTFjYjcwOWI0NjIxZWMwY2IxYTJlOWUwZGM1M2NiOWRlZmFm",
    "commit": {
      "author": {
        "name": "fingera",
        "email": "liuyujun@fingera.cn",
        "date": "2018-08-31T08:50:56Z"
      },
      "committer": {
        "name": "fingera",
        "email": "liuyujun@fingera.cn",
        "date": "2018-08-31T08:50:56Z"
      },
      "message": "add base58 security",
      "tree": {
        "sha": "af332c34a19bc2c16ddcb8cdd4db3b8b856fc5c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af332c34a19bc2c16ddcb8cdd4db3b8b856fc5c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf/comments",
    "author": {
      "login": "fingera",
      "id": 7310938,
      "node_id": "MDQ6VXNlcjczMTA5Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7310938?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fingera",
      "html_url": "https://github.com/fingera",
      "followers_url": "https://api.github.com/users/fingera/followers",
      "following_url": "https://api.github.com/users/fingera/following{/other_user}",
      "gists_url": "https://api.github.com/users/fingera/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fingera/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fingera/subscriptions",
      "organizations_url": "https://api.github.com/users/fingera/orgs",
      "repos_url": "https://api.github.com/users/fingera/repos",
      "events_url": "https://api.github.com/users/fingera/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fingera/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fingera",
      "id": 7310938,
      "node_id": "MDQ6VXNlcjczMTA5Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7310938?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fingera",
      "html_url": "https://github.com/fingera",
      "followers_url": "https://api.github.com/users/fingera/followers",
      "following_url": "https://api.github.com/users/fingera/following{/other_user}",
      "gists_url": "https://api.github.com/users/fingera/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fingera/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fingera/subscriptions",
      "organizations_url": "https://api.github.com/users/fingera/orgs",
      "repos_url": "https://api.github.com/users/fingera/repos",
      "events_url": "https://api.github.com/users/fingera/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fingera/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bbc80c72bf3b59d7ecb0beae2b726597b045f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/922bbc80c72bf3b59d7ecb0beae2b726597b045f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a59d834584b2984079f8bf6411172990208e3d80",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=d0f951cb709b4621ec0cb1a2e9e0dc53cb9defaf",
        "patch": "@@ -10,6 +10,8 @@\n #include <assert.h>\n #include <string.h>\n \n+#include <support/allocators/secure.h>\n+\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n static const int8_t mapBase58[256] = {\n@@ -45,7 +47,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     }\n     // Allocate enough space in big-endian base256 representation.\n     int size = strlen(psz) * 733 /1000 + 1; // log(58) / log(256), rounded up.\n-    std::vector<unsigned char> b256(size);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> b256(size);\n     // Process the characters.\n     static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n     while (*psz && !isspace(*psz)) {\n@@ -54,7 +56,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         if (carry == -1)  // Invalid b58 character\n             return false;\n         int i = 0;\n-        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); (carry != 0 || i < length) && (it != b256.rend()); ++it, ++i) {\n+        for (auto it = b256.rbegin(); (carry != 0 || i < length) && (it != b256.rend()); ++it, ++i) {\n             carry += 58 * (*it);\n             *it = carry % 256;\n             carry /= 256;\n@@ -69,7 +71,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     if (*psz != 0)\n         return false;\n     // Skip leading zeroes in b256.\n-    std::vector<unsigned char>::iterator it = b256.begin() + (size - length);\n+    auto it = b256.begin() + (size - length);\n     while (it != b256.end() && *it == 0)\n         it++;\n     // Copy result into output vector.\n@@ -91,13 +93,13 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n     }\n     // Allocate enough space in big-endian base58 representation.\n     int size = (pend - pbegin) * 138 / 100 + 1; // log(256) / log(58), rounded up.\n-    std::vector<unsigned char> b58(size);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> b58(size);\n     // Process the bytes.\n     while (pbegin != pend) {\n         int carry = *pbegin;\n         int i = 0;\n         // Apply \"b58 = b58 * 256 + ch\".\n-        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); (carry != 0 || i < length) && (it != b58.rend()); it++, i++) {\n+        for (auto it = b58.rbegin(); (carry != 0 || i < length) && (it != b58.rend()); it++, i++) {\n             carry += 256 * (*it);\n             *it = carry % 58;\n             carry /= 58;\n@@ -108,7 +110,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n         pbegin++;\n     }\n     // Skip leading zeroes in base58 result.\n-    std::vector<unsigned char>::iterator it = b58.begin() + (size - length);\n+    auto it = b58.begin() + (size - length);\n     while (it != b58.end() && *it == 0)\n         it++;\n     // Translate the result into a string.\n@@ -136,7 +138,9 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n     std::vector<unsigned char> vch(vchIn);\n     uint256 hash = Hash(vch.begin(), vch.end());\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n-    return EncodeBase58(vch);\n+    auto result = EncodeBase58(vch);\n+    memory_cleanse(vch.data(), vch.size());\n+    return result;\n }\n \n bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)"
      }
    ]
  }
]