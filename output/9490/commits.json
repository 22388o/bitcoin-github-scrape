[
  {
    "sha": "997a98a674df70a2192e8d8b91c631e5c241509d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTdhOThhNjc0ZGY3MGEyMTkyZThkOGI5MWM2MzFlNWMyNDE1MDlk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-08T04:05:14Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-12T14:21:43Z"
      },
      "message": "Replace FindLatestBefore used by importmuti with FindEarliestAtLeast.\n\nIn spite of the name FindLatestBefore used std::lower_bound to try\n to find the earliest block with a nTime greater or equal to the\n the requested value.  But lower_bound uses bisection and requires\n the input to be ordered with respect to the comparison operation.\n Block times are not well ordered.\n\nI don't know what lower_bound is permitted to do when the data\n is not sufficiently ordered, but it's probably not good.\n (I could construct an implementation which would infinite loop...)\n\nTo resolve the issue this commit introduces a maximum-so-far to the\n block indexes and searches that.\n\nFor clarity the function is renamed to reflect what it actually does.\n\nAn issue that remains is that there is no grace period in importmulti:\n If a address is created at time T and a send is immediately broadcast\n and included by a miner with a slow clock there may not yet have been\n any block with at least time T.\n\nThe normal rescan has a grace period of 7200 seconds, but importmulti\n does not.",
      "tree": {
        "sha": "9e6b6376764ea1565b7105577ed6dabd72f78802",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e6b6376764ea1565b7105577ed6dabd72f78802"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/997a98a674df70a2192e8d8b91c631e5c241509d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997a98a674df70a2192e8d8b91c631e5c241509d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/997a98a674df70a2192e8d8b91c631e5c241509d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997a98a674df70a2192e8d8b91c631e5c241509d/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "0f4d422b9fc664dc19a104371946ed9da24a5647",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997a98a674df70a2192e8d8b91c631e5c241509d/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997a98a674df70a2192e8d8b91c631e5c241509d/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=997a98a674df70a2192e8d8b91c631e5c241509d",
        "patch": "@@ -61,10 +61,10 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n-CBlockIndex* CChain::FindLatestBefore(int64_t nTime) const\n+CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n {\n     std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n-        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTime() < time; });\n+        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTimeMax() < time; });\n     return (lower == vChain.end() ? NULL : *lower);\n }\n "
      },
      {
        "sha": "acb29b667b7605e7dc49278ddffe518b31085140",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997a98a674df70a2192e8d8b91c631e5c241509d/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997a98a674df70a2192e8d8b91c631e5c241509d/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=997a98a674df70a2192e8d8b91c631e5c241509d",
        "patch": "@@ -202,6 +202,9 @@ class CBlockIndex\n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     int32_t nSequenceId;\n \n+    //! (memory only) Maximum nTime in the chain upto and including this block.\n+    unsigned int nTimeMax;\n+\n     void SetNull()\n     {\n         phashBlock = NULL;\n@@ -216,6 +219,7 @@ class CBlockIndex\n         nChainTx = 0;\n         nStatus = 0;\n         nSequenceId = 0;\n+        nTimeMax = 0;\n \n         nVersion       = 0;\n         hashMerkleRoot = uint256();\n@@ -281,6 +285,11 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n+    int64_t GetBlockTimeMax() const\n+    {\n+        return (int64_t)nTimeMax;\n+    }\n+\n     enum { nMedianTimeSpan=11 };\n \n     int64_t GetMedianTimePast() const\n@@ -461,8 +470,8 @@ class CChain {\n     /** Find the last common block between this chain and a block index entry. */\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n \n-    /** Find the most recent block with timestamp lower than the given. */\n-    CBlockIndex* FindLatestBefore(int64_t nTime) const;\n+    /** Find the earliest block with timestamp equal or greater than the given. */\n+    CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n };\n \n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "368654bfa6b8a09a6d984427bf6e1359bbe72f19",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997a98a674df70a2192e8d8b91c631e5c241509d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997a98a674df70a2192e8d8b91c631e5c241509d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=997a98a674df70a2192e8d8b91c631e5c241509d",
        "patch": "@@ -839,9 +839,9 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // Height value more than a billion is too high to be a block height, and\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n-        CBlockIndex* pindex = chainActive.FindLatestBefore(heightParam);\n+        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam);\n         if (!pindex) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block before specified timestamp.\");\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }"
      },
      {
        "sha": "625307b6a759150bb5e609d38381a0a920465eac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997a98a674df70a2192e8d8b91c631e5c241509d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997a98a674df70a2192e8d8b91c631e5c241509d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=997a98a674df70a2192e8d8b91c631e5c241509d",
        "patch": "@@ -2606,6 +2606,7 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n         pindexNew->BuildSkip();\n     }\n+    pindexNew->nTimeMax = (pindexNew->pprev ? std::max(pindexNew->pprev->nTimeMax, pindexNew->nTime) : pindexNew->nTime);\n     pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + GetBlockProof(*pindexNew);\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n     if (pindexBestHeader == NULL || pindexBestHeader->nChainWork < pindexNew->nChainWork)\n@@ -3416,6 +3417,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n+        pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n         // We can link the chain of blocks for which we've received transactions at some point.\n         // Pruned nodes may have deleted the block.\n         if (pindex->nTx > 0) {"
      },
      {
        "sha": "7d4ed70ed91ec310eec4a90b16576657fd7777a2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997a98a674df70a2192e8d8b91c631e5c241509d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997a98a674df70a2192e8d8b91c631e5c241509d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=997a98a674df70a2192e8d8b91c631e5c241509d",
        "patch": "@@ -1048,8 +1048,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n-    if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTime()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindLatestBefore(nLowestTimestamp) : chainActive.Genesis();\n+    if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(nLowestTimestamp) : chainActive.Genesis();\n \n         if (pindex) {\n             pwalletMain->ScanForWalletTransactions(pindex, true);"
      }
    ]
  },
  {
    "sha": "4b06e41c309123c4eefce0d3578c01efe1ae10df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjA2ZTQxYzMwOTEyM2M0ZWVmY2UwZDM1NzhjMDFlZmUxYWUxMGRm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-12T02:31:00Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-12T14:22:15Z"
      },
      "message": "Add unit test for FindEarliestAtLeast",
      "tree": {
        "sha": "75fe9223c19302032c8eb5c3a20322dcfeb88557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75fe9223c19302032c8eb5c3a20322dcfeb88557"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b06e41c309123c4eefce0d3578c01efe1ae10df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b06e41c309123c4eefce0d3578c01efe1ae10df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b06e41c309123c4eefce0d3578c01efe1ae10df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b06e41c309123c4eefce0d3578c01efe1ae10df/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "997a98a674df70a2192e8d8b91c631e5c241509d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997a98a674df70a2192e8d8b91c631e5c241509d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/997a98a674df70a2192e8d8b91c631e5c241509d"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0b2fe0ef9db1e1e6c08dd1cc166418ea0db5767e",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b06e41c309123c4eefce0d3578c01efe1ae10df/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b06e41c309123c4eefce0d3578c01efe1ae10df/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=4b06e41c309123c4eefce0d3578c01efe1ae10df",
        "patch": "@@ -100,4 +100,47 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n+{\n+    std::vector<uint256> vHashMain(100000);\n+    std::vector<CBlockIndex> vBlocksMain(100000);\n+    for (unsigned int i=0; i<vBlocksMain.size(); i++) {\n+        vHashMain[i] = ArithToUint256(i); // Set the hash equal to the height\n+        vBlocksMain[i].nHeight = i;\n+        vBlocksMain[i].pprev = i ? &vBlocksMain[i - 1] : NULL;\n+        vBlocksMain[i].phashBlock = &vHashMain[i];\n+        vBlocksMain[i].BuildSkip();\n+        if (i < 10) {\n+            vBlocksMain[i].nTime = i;\n+            vBlocksMain[i].nTimeMax = i;\n+        } else {\n+            // randomly choose something in the range [MTP, MTP*2]\n+            int64_t medianTimePast = vBlocksMain[i].GetMedianTimePast();\n+            int r = insecure_rand() % medianTimePast;\n+            vBlocksMain[i].nTime = r + medianTimePast;\n+            vBlocksMain[i].nTimeMax = std::max(vBlocksMain[i].nTime, vBlocksMain[i-1].nTimeMax);\n+        }\n+    }\n+    // Check that we set nTimeMax up correctly.\n+    unsigned int curTimeMax = 0;\n+    for (unsigned int i=0; i<vBlocksMain.size(); ++i) {\n+        curTimeMax = std::max(curTimeMax, vBlocksMain[i].nTime);\n+        BOOST_CHECK(curTimeMax == vBlocksMain[i].nTimeMax);\n+    }\n+\n+    // Build a CChain for the main branch.\n+    CChain chain;\n+    chain.SetTip(&vBlocksMain.back());\n+\n+    // Verify that FindEarliestAtLeast is correct.\n+    for (unsigned int i=0; i<10000; ++i) {\n+        // Pick a random element in vBlocksMain.\n+        int r = insecure_rand() % vBlocksMain.size();\n+        int64_t test_time = vBlocksMain[r].nTime;\n+        CBlockIndex *ret = chain.FindEarliestAtLeast(test_time);\n+        BOOST_CHECK(ret->nTimeMax >= test_time);\n+        BOOST_CHECK((ret->pprev==NULL) || ret->pprev->nTimeMax < test_time);\n+        BOOST_CHECK(vBlocksMain[r].GetAncestor(ret->nHeight) == ret);\n+    }\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]