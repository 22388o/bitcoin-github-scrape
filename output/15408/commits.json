[
  {
    "sha": "fa9b60c842741dc92a33925fca5796ebaa4510bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTliNjBjODQyNzQxZGM5MmEzMzkyNWZjYTU3OTZlYmFhNDUxMGJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T15:01:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T15:32:02Z"
      },
      "message": "Remove unused TransactionError constants",
      "tree": {
        "sha": "a918c59fb07a53c5af68f72430f751b2cb642da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a918c59fb07a53c5af68f72430f751b2cb642da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZYnyAAoJEM4rdWl+aaVIzLAL/jI/guXWZg+1a5QXg0yYUimp\nSnY6sMFG1SaVpJY2Ke+VchhwsIl8WFJoLBDO2wK/V/b/VwAIJz9rsurR2/vKWfR/\noXRJEZUXKOpPEIqEZEm/o6V2nAjZ8VDn4IwNj7zFVt8JCTy7hq4rBnLZnju9Q+PK\nr0grJXgye9/2kryIKucauMgKuqJgGgYkdCvX7vObMElgyBpM6OCQ9kD1ZdIH38kF\nXzF8aYF6DezOeAcEt1NG4z/6M9FlLEkKV+5IrKbIIpv7Jtj6j3cqDNyTNE7eJAyO\n5p2985+QnodzXF4rQwdXAvHLcS4wP0nHLdtjH+c2wc/QYdbjLqbNQOmvN0Gndcra\nPC8PnQ1ArsgdX3IdKkpAxjy+ahv0FLz8po1fJgkYxWhPRhuPyssCpcc1c/8vOYPM\nOFer2q6kB3TgKDw9/uJu+1gsY66L2tQZdIMPlvclCHKSR8rdK0OwusLq2z9MH7SN\nudmH9NZrHBqfpG5SFvwA/Gn8b++OOdrvzzfm6krLgg==\n=YlIa\n-----END PGP SIGNATURE-----",
        "payload": "tree a918c59fb07a53c5af68f72430f751b2cb642da9\nparent 38989ab03fb74ad56c1018c37cb24d17cbb3a16f\nauthor MarcoFalke <falke.marco@gmail.com> 1550156466 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550158322 -0500\n\nRemove unused TransactionError constants\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9b60c842741dc92a33925fca5796ebaa4510bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38989ab03fb74ad56c1018c37cb24d17cbb3a16f"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 45,
      "deletions": 70
    },
    "files": [
      {
        "sha": "7b9b4310e7a6c38587c3cb7d9ca70b2deabeba77",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 26,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -12,7 +12,7 @@\n \n #include <future>\n \n-const char* TransactionErrorString(const TransactionError err)\n+std::string TransactionErrorString(const TransactionError err)\n {\n     switch (err) {\n         case TransactionError::OK:\n@@ -33,22 +33,16 @@ const char* TransactionErrorString(const TransactionError err)\n             return \"PSBTs not compatible (different transactions)\";\n         case TransactionError::SIGHASH_MISMATCH:\n             return \"Specified sighash value does not match existing value\";\n-\n-        case TransactionError::UNKNOWN_ERROR:\n-        default: break;\n+        // no default case, so the compiler can warn about missing cases\n     }\n-    return \"Unknown error\";\n+    assert(false);\n }\n \n-bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, TransactionError& error, std::string& err_string, const bool allowhighfees)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)\n {\n     std::promise<void> promise;\n     hashTx = tx->GetHash();\n \n-    CAmount nMaxRawTxFee = maxTxFee;\n-    if (allowhighfees)\n-        nMaxRawTxFee = 0;\n-\n     { // cs_main scope\n     LOCK(cs_main);\n     CCoinsViewCache &view = *pcoinsTip;\n@@ -63,19 +57,16 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n-                error = TransactionError::MEMPOOL_REJECTED;\n-                return false;\n+                return TransactionError::MEMPOOL_REJECTED;\n             } else {\n                 if (fMissingInputs) {\n-                    error = TransactionError::MISSING_INPUTS;\n-                    return false;\n+                    return TransactionError::MISSING_INPUTS;\n                 }\n                 err_string = FormatStateMessage(state);\n-                error = TransactionError::MEMPOOL_ERROR;\n-                return false;\n+                return TransactionError::MEMPOOL_ERROR;\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware\n@@ -88,8 +79,7 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n             });\n         }\n     } else if (fHaveChain) {\n-        error = TransactionError::ALREADY_IN_CHAIN;\n-        return false;\n+        return TransactionError::ALREADY_IN_CHAIN;\n     } else {\n         // Make sure we don't block forever if re-sending\n         // a transaction already in mempool.\n@@ -100,16 +90,14 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n \n     promise.get_future().wait();\n \n-    if(!g_connman) {\n-        error = TransactionError::P2P_DISABLED;\n-        return false;\n+    if (!g_connman) {\n+        return TransactionError::P2P_DISABLED;\n     }\n \n     CInv inv(MSG_TX, hashTx);\n-    g_connman->ForEachNode([&inv](CNode* pnode)\n-    {\n+    g_connman->ForEachNode([&inv](CNode* pnode) {\n         pnode->PushInventory(inv);\n     });\n \n-    return true;\n-    }\n+    return TransactionError::OK;\n+}"
      },
      {
        "sha": "3457ececa4cebe37f27c0b5551866c894e1dcd93",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1,17 +1,16 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_NODE_TRANSACTION_H\n #define BITCOIN_NODE_TRANSACTION_H\n \n+#include <attributes.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n \n enum class TransactionError {\n-    OK = 0,\n-    UNKNOWN_ERROR,\n-\n+    OK, //!< No error\n     MISSING_INPUTS,\n     ALREADY_IN_CHAIN,\n     P2P_DISABLED,\n@@ -20,24 +19,19 @@ enum class TransactionError {\n     INVALID_PSBT,\n     PSBT_MISMATCH,\n     SIGHASH_MISMATCH,\n-\n-    ERROR_COUNT\n };\n \n-#define TRANSACTION_ERR_LAST TransactionError::ERROR_COUNT\n-\n-const char* TransactionErrorString(const TransactionError error);\n+std::string TransactionErrorString(const TransactionError error);\n \n /**\n  * Broadcast a transaction\n  *\n  * @param[in]  tx the transaction to broadcast\n  * @param[out] &txid the txid of the transaction, if successfully broadcast\n- * @param[out] &error reference to UniValue to fill with error info on failure\n  * @param[out] &err_string reference to std::string to fill with error string if available\n- * @param[in]  allowhighfees whether to allow fees exceeding maxTxFee\n- * return true on success, false on error (and fills in `error`)\n+ * @param[in]  highfee Reject txs with fees higher than this (if 0, accept any fee)\n+ * return error\n  */\n-bool BroadcastTransaction(CTransactionRef tx, uint256& txid, TransactionError& error, std::string& err_string, bool allowhighfees = false);\n+NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, uint256& txid, std::string& err_string, const CAmount& highfee);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "f0e177a6407d6432bd1ba2ca373528f58d439500",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -263,21 +263,19 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n     return true;\n }\n \n-bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs)\n+TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs)\n {\n     out = psbtxs[0]; // Copy the first one\n \n     // Merge\n     for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n         if (!out.Merge(*it)) {\n-            error = TransactionError::PSBT_MISMATCH;\n-            return false;\n+            return TransactionError::PSBT_MISMATCH;\n         }\n     }\n     if (!out.IsSane()) {\n-        error = TransactionError::INVALID_PSBT;\n-        return false;\n+        return TransactionError::INVALID_PSBT;\n     }\n \n-    return true;\n+    return TransactionError::OK;\n }"
      },
      {
        "sha": "efa3d58498bc19b1b579024184a0645222dd5c0b",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -565,10 +565,9 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n  *\n  * @param[out] &out   the combined PSBT, if successful\n- * @param[out] &error reference to TransactionError to fill with error info on failure\n  * @param[in]  psbtxs the PSBTs to combine\n- * @return True if we successfully combined the transactions, false if they were not compatible\n+ * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */\n-bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs);\n+NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n #endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "44cac142285f65058c7194d1899b63664c3649a4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1050,10 +1050,11 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     bool allowhighfees = false;\n     if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n+    const CAmount highfee{allowhighfees ? 0 : ::maxTxFee};\n     uint256 txid;\n-    TransactionError err;\n     std::string err_string;\n-    if (!BroadcastTransaction(tx, txid, err, err_string, allowhighfees)) {\n+    const TransactionError err = BroadcastTransaction(tx, txid, err_string, highfee);\n+    if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n \n@@ -1478,8 +1479,8 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     }\n \n     PartiallySignedTransaction merged_psbt;\n-    TransactionError error;\n-    if (!CombinePSBTs(merged_psbt, error, psbtxs)) {\n+    const TransactionError error = CombinePSBTs(merged_psbt, psbtxs);\n+    if (error != TransactionError::OK) {\n         throw JSONRPCTransactionError(error);\n     }\n "
      },
      {
        "sha": "1b17b09763460ff2b86100f3bc0bcadcf369221a",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <wallet/psbtwallet.h>\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, TransactionError& error, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n+TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);\n     // Get all of the previous transactions\n@@ -19,8 +19,7 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n \n         // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n         if (!input.IsSane()) {\n-            error = TransactionError::INVALID_PSBT;\n-            return false;\n+            return TransactionError::INVALID_PSBT;\n         }\n \n         // If we have no utxo, grab it from the wallet.\n@@ -37,8 +36,7 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n \n         // Get the Sighash type\n         if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            error = TransactionError::SIGHASH_MISMATCH;\n-            return false;\n+            return TransactionError::SIGHASH_MISMATCH;\n         }\n \n         complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n@@ -58,5 +56,5 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n         psbt_out.FromSignatureData(sigdata);\n     }\n \n-    return true;\n+    return TransactionError::OK;\n }"
      },
      {
        "sha": "a24a0967d2d6bcbc5c34d3dd98d0003e9afd9fde",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,16 +18,14 @@\n  *\n  * @param[in]  pwallet pointer to a wallet\n  * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n- * @param[out] &error reference to UniValue to fill with error info on failure\n  * @param[out] &complete indicates whether the PSBT is now complete\n  * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n  * @param[in]  sign whether to sign or not\n  * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n- * return true on success, false on error (and fills in `error`)\n+ * return error\n  */\n-bool FillPSBT(const CWallet* pwallet,\n+NODISCARD TransactionError FillPSBT(const CWallet* pwallet,\n               PartiallySignedTransaction& psbtx,\n-              TransactionError& error,\n               bool& complete,\n               int sighash_type = 1 /* SIGHASH_ALL */,\n               bool sign = true,"
      },
      {
        "sha": "4211eeac88d98e6b03ac6d39274ce50836f19480",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -3995,8 +3995,8 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = true;\n-    TransactionError err;\n-    if (!FillPSBT(pwallet, psbtx, err, complete, nHashType, sign, bip32derivs)) {\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, nHashType, sign, bip32derivs);\n+    if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n \n@@ -4113,8 +4113,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n     bool complete = true;\n-    TransactionError err;\n-    if (!FillPSBT(pwallet, psbtx, err, complete, 1, false, bip32derivs)) {\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, 1, false, bip32derivs);\n+    if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n "
      },
      {
        "sha": "d1a9741ca1b53e25539ee3efe495294cbcff8d11",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -61,9 +61,8 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     ssData >> psbtx;\n \n     // Fill transaction with our data\n-    TransactionError err;\n     bool complete = true;\n-    FillPSBT(&m_wallet, psbtx, err, complete, SIGHASH_ALL, false, true);\n+    BOOST_REQUIRE_EQUAL(TransactionError::OK, FillPSBT(&m_wallet, psbtx, complete, SIGHASH_ALL, false, true));\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  }
]