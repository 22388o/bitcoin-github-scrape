[
  {
    "sha": "474734bb694f24dd1cd64bb7957f7493a95429c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzQ3MzRiYjY5NGYyNGRkMWNkNjRiYjc5NTdmNzQ5M2E5NTQyOWMw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-16T18:32:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-16T18:28:29Z"
      },
      "message": "doc: Document that ser_float_to_uint32 is not the inverse of ser_uint32_to_float",
      "tree": {
        "sha": "f64d4c41d9c8449887a4e3a06f3e49a9fd0d174b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f64d4c41d9c8449887a4e3a06f3e49a9fd0d174b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/474734bb694f24dd1cd64bb7957f7493a95429c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474734bb694f24dd1cd64bb7957f7493a95429c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/474734bb694f24dd1cd64bb7957f7493a95429c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474734bb694f24dd1cd64bb7957f7493a95429c0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ef34ee25ed34b2b092f15bf3dca5c0508092829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef34ee25ed34b2b092f15bf3dca5c0508092829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef34ee25ed34b2b092f15bf3dca5c0508092829"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b87eb6ed6935cb19e46df226ffc65ee039363502",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/474734bb694f24dd1cd64bb7957f7493a95429c0/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/474734bb694f24dd1cd64bb7957f7493a95429c0/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=474734bb694f24dd1cd64bb7957f7493a95429c0",
        "patch": "@@ -122,27 +122,39 @@ template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n     s.read((char*)&obj, 8);\n     return le64toh(obj);\n }\n+\n+// Note that ser_double_to_uint64 is NOT guaranteed to be the inverse of ser_uint64_to_double. In\n+// other words, do not assume that ser_double_to_uint64(ser_uint64_to_double(u64)) == u64.\n+//\n+// The only supported round-trip is: floating-point -> integral -> floating-point.\n inline uint64_t ser_double_to_uint64(double x)\n {\n     uint64_t tmp;\n     std::memcpy(&tmp, &x, sizeof(x));\n     static_assert(sizeof(tmp) == sizeof(x), \"double and uint64_t assumed to have the same size\");\n     return tmp;\n }\n+\n+// Note that ser_float_to_uint32 is NOT guaranteed to be the inverse of ser_uint32_to_float. In\n+// other words, do not assume that ser_float_to_uint32(ser_uint32_to_float(u32)) == u32.\n+//\n+// The only supported round-trip is: floating-point -> integral -> floating-point.\n inline uint32_t ser_float_to_uint32(float x)\n {\n     uint32_t tmp;\n     std::memcpy(&tmp, &x, sizeof(x));\n     static_assert(sizeof(tmp) == sizeof(x), \"float and uint32_t assumed to have the same size\");\n     return tmp;\n }\n+\n inline double ser_uint64_to_double(uint64_t y)\n {\n     double tmp;\n     std::memcpy(&tmp, &y, sizeof(y));\n     static_assert(sizeof(tmp) == sizeof(y), \"double and uint64_t assumed to have the same size\");\n     return tmp;\n }\n+\n inline float ser_uint32_to_float(uint32_t y)\n {\n     float tmp;"
      }
    ]
  }
]