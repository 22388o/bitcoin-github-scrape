[
  {
    "sha": "9f5edb970a9a4a07d9550413884babce3ef9cb20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjVlZGI5NzBhOWE0YTA3ZDk1NTA0MTM4ODRiYWJjZTNlZjljYjIw",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T16:36:01Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T17:02:49Z"
      },
      "message": "Removed contrib/bitrpc\n\nIt's unclear if people are using this and if it's worth maintaining.",
      "tree": {
        "sha": "a7ccc9247f8a7f6a45cb965a8ffaa8d72ddc87e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7ccc9247f8a7f6a45cb965a8ffaa8d72ddc87e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5edb970a9a4a07d9550413884babce3ef9cb20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bf40dde7465292a29234c6d32d9df7e386617e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bf40dde7465292a29234c6d32d9df7e386617e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bf40dde7465292a29234c6d32d9df7e386617e"
      }
    ],
    "stats": {
      "total": 348,
      "additions": 2,
      "deletions": 346
    },
    "files": [
      {
        "sha": "125594312bd8cf9d4fde61f3c4aa291ef2c88a9a",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5edb970a9a4a07d9550413884babce3ef9cb20/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5edb970a9a4a07d9550413884babce3ef9cb20/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=9f5edb970a9a4a07d9550413884babce3ef9cb20",
        "patch": "@@ -1,9 +1,6 @@\n Wallet Tools\n ---------------------\n \n-### [BitRPC](/contrib/bitrpc) ###\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n ### [SpendFrom](/contrib/spendfrom) ###\n \n Use the raw transactions API to send coins received on a particular"
      },
      {
        "sha": "f5ef2f0405a941e2c9ca8c4c1178a5a97a9d590e",
        "filename": "contrib/bitrpc/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/README.md?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -1,8 +0,0 @@\n-### BitRPC\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n-### Looking for Wallet Tools?\n-BitRPC.py is able to do the exact same thing as `walletchangepass.py` and `walletunlock.py`. Their respective commands in BitRPC.py are:\n-\n-\tbitrpc.py walletpassphrasechange\n-\tbitrpc.py walletpassphrase\n\\ No newline at end of file"
      },
      {
        "sha": "c3ce9d793625fc0b1318a9baf77b7f428cbe2062",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "removed",
        "additions": 0,
        "deletions": 335,
        "changes": 335,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -1,335 +0,0 @@\n-from jsonrpc import ServiceProxy\n-import sys\n-import string\n-import getpass\n-\n-# ===== BEGIN USER SETTINGS =====\n-# if you do not set these you will be prompted for a password for every command\n-rpcuser = \"\"\n-rpcpass = \"\"\n-# ====== END USER SETTINGS ======\n-\n-\n-if rpcpass == \"\":\n-    access = ServiceProxy(\"http://127.0.0.1:8332\")\n-else:\n-    access = ServiceProxy(\"http://\"+rpcuser+\":\"+rpcpass+\"@127.0.0.1:8332\")\n-cmd = sys.argv[1].lower()\n-\n-if cmd == \"backupwallet\":\n-    try:\n-        path = raw_input(\"Enter destination path/filename: \")\n-        print access.backupwallet(path)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"encryptwallet\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Repeat passphrase: \")\n-        if pwd == pwd2:\n-            access.encryptwallet(pwd)\n-            print \"\\n---Wallet encrypted. Server stopping, restart to run with encrypted wallet---\\n\"\n-        else:\n-            print \"\\n---Passphrases do not match---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccount\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address: \")\n-        print access.getaccount(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccountaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaccountaddress(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaddressesbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaddressesbyaccount(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getbalance\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getbalance(acct, mc)\n-        except:\n-            print access.getbalance()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockbycount\":\n-    try:\n-        height = raw_input(\"Height: \")\n-        print access.getblockbycount(height)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockcount\":\n-    try:\n-        print access.getblockcount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblocknumber\":\n-    try:\n-        print access.getblocknumber()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getconnectioncount\":\n-    try:\n-        print access.getconnectioncount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getdifficulty\":\n-    try:\n-        print access.getdifficulty()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getgenerate\":\n-    try:\n-        print access.getgenerate()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gethashespersec\":\n-    try:\n-        print access.gethashespersec()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getinfo\":\n-    try:\n-        print access.getinfo()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getnewaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        try:\n-            print access.getnewaddress(acct)\n-        except:\n-            print access.getnewaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaccount(acct, mc)\n-        except:\n-            print access.getreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaddress\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaddress(addr, mc)\n-        except:\n-            print access.getreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gettransaction\":\n-    try:\n-        txid = raw_input(\"Enter a transaction ID: \")\n-        print access.gettransaction(txid)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getwork\":\n-    try:\n-        data = raw_input(\"Data (optional): \")\n-        try:\n-            print access.gettransaction(data)\n-        except:\n-            print access.gettransaction()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"help\":\n-    try:\n-        cmd = raw_input(\"Command (optional): \")\n-        try:\n-            print access.help(cmd)\n-        except:\n-            print access.help()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listaccounts\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.listaccounts(mc)\n-        except:\n-            print access.listaccounts()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaccount\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaccount(mc, incemp)\n-        except:\n-            print access.listreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaddress\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaddress(mc, incemp)\n-        except:\n-            print access.listreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listtransactions\":\n-    try:\n-        acct = raw_input(\"Account (optional): \")\n-        count = raw_input(\"Number of transactions (optional): \")\n-        frm = raw_input(\"Skip (optional):\")\n-        try:\n-            print access.listtransactions(acct, count, frm)\n-        except:\n-            print access.listtransactions()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"move\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.move(frm, to, amt, mc, comment)\n-        except:\n-            print access.move(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendfrom\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendfrom(frm, to, amt, mc, comment, commentto)\n-        except:\n-            print access.sendfrom(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendmany\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.sendmany(frm,to,mc,comment)\n-        except:\n-            print access.sendmany(frm,to)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendtoaddress\":\n-    try:\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        amt = raw_input(\"Amount:\")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendtoaddress(to,amt,comment,commentto)\n-        except:\n-            print access.sendtoaddress(to,amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setaccount\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        acct = raw_input(\"Account:\")\n-        print access.setaccount(addr,acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setgenerate\":\n-    try:\n-        gen= raw_input(\"Generate? (true/false): \")\n-        cpus = raw_input(\"Max processors/cores (-1 for unlimited, optional):\")\n-        try:\n-            print access.setgenerate(gen, cpus)\n-        except:\n-            print access.setgenerate(gen)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"settxfee\":\n-    try:\n-        amt = raw_input(\"Amount:\")\n-        print access.settxfee(amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"stop\":\n-    try:\n-        print access.stop()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"validateaddress\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        print access.validateaddress(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrase\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter wallet passphrase: \")\n-        access.walletpassphrase(pwd, 60)\n-        print \"\\n---Wallet unlocked---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrasechange\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter old wallet passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Enter new wallet passphrase: \")\n-        access.walletpassphrasechange(pwd, pwd2)\n-        print\n-        print \"\\n---Passphrase changed---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-else:\n-    print \"Command not found or not supported\""
      },
      {
        "sha": "ed92c654600bda48d9a63a51597aff58e9936c6d",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5edb970a9a4a07d9550413884babce3ef9cb20/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5edb970a9a4a07d9550413884babce3ef9cb20/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9f5edb970a9a4a07d9550413884babce3ef9cb20",
        "patch": "@@ -55,3 +55,5 @@ git merge commit are mentioned.\n \n ### Miscellaneous\n \n+- Removed bitrpc.py from contrib\n+"
      }
    ]
  }
]