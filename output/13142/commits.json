[
  {
    "sha": "6d714c3419b368671bd071a8992950c3dc00e613",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDcxNGMzNDE5YjM2ODY3MWJkMDcxYTg5OTI5NTBjM2RjMDBlNjEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-01T19:05:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-03T18:01:57Z"
      },
      "message": "Make coincontrol use IsSolvable to determine solvability",
      "tree": {
        "sha": "a61afc591ce7b0eecfbb633f025e2ab84487b29b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a61afc591ce7b0eecfbb633f025e2ab84487b29b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d714c3419b368671bd071a8992950c3dc00e613",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d714c3419b368671bd071a8992950c3dc00e613",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d714c3419b368671bd071a8992950c3dc00e613",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d714c3419b368671bd071a8992950c3dc00e613/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "baf6b4e3f956e5a612aa2385660e7c020f2c5c39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf6b4e3f956e5a612aa2385660e7c020f2c5c39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/baf6b4e3f956e5a612aa2385660e7c020f2c5c39"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "98b4298507f1f49cfc9e964e619e0c2054da0920",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d714c3419b368671bd071a8992950c3dc00e613/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d714c3419b368671bd071a8992950c3dc00e613/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=6d714c3419b368671bd071a8992950c3dc00e613",
        "patch": "@@ -22,7 +22,7 @@ class CCoinControl\n     boost::optional<OutputType> m_change_type;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n-    //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n+    //! Includes watch only addresses which are solvable\n     bool fAllowWatchOnly;\n     //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;"
      },
      {
        "sha": "ab351871de36822891c213c7bfddb7e3b73db246",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d714c3419b368671bd071a8992950c3dc00e613/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d714c3419b368671bd071a8992950c3dc00e613/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6d714c3419b368671bd071a8992950c3dc00e613",
        "patch": "@@ -2363,10 +2363,10 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n                 continue;\n             }\n \n-            bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n-            bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n+            bool solvable = IsSolvable(*this, pcoin->tx->vout[i].scriptPubKey);\n+            bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n \n-            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            vCoins.push_back(COutput(pcoin, i, nDepth, spendable, solvable, safeTx));\n \n             // Checks the sum amount of all UTXO's.\n             if (nMinimumSumAmount != MAX_MONEY) {"
      }
    ]
  },
  {
    "sha": "4e91820531889e309dc4335fe0de8229c6426040",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTkxODIwNTMxODg5ZTMwOWRjNDMzNWZlMGRlODIyOWM2NDI2MDQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-01T19:19:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-03T18:02:01Z"
      },
      "message": "Make IsMine stop distinguishing solvable/unsolvable",
      "tree": {
        "sha": "08b1907d000ec6c5a904936c6abdbd4c9f654ff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b1907d000ec6c5a904936c6abdbd4c9f654ff6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e91820531889e309dc4335fe0de8229c6426040",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e91820531889e309dc4335fe0de8229c6426040",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e91820531889e309dc4335fe0de8229c6426040",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e91820531889e309dc4335fe0de8229c6426040/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d714c3419b368671bd071a8992950c3dc00e613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d714c3419b368671bd071a8992950c3dc00e613",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d714c3419b368671bd071a8992950c3dc00e613"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "043756829bc417e390f8c8471b71300123b13c86",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e91820531889e309dc4335fe0de8229c6426040/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e91820531889e309dc4335fe0de8229c6426040/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=4e91820531889e309dc4335fe0de8229c6426040",
        "patch": "@@ -49,9 +49,9 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n-        if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_UNSOLVABLE;\n-        return ISMINE_NO;\n+        if (keystore.HaveWatchOnly(scriptPubKey)) {\n+            return ISMINE_WATCH_ONLY;\n+        }\n     }\n \n     CKeyID keyID;\n@@ -79,8 +79,9 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n             break;\n         }\n         isminetype ret = IsMineInner(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, IsMineSigVersion::WITNESS_V0);\n-        if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n+        if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_ONLY || (ret == ISMINE_NO && isInvalid)) {\n             return ret;\n+        }\n         break;\n     }\n     case TX_PUBKEYHASH:\n@@ -101,8 +102,9 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             isminetype ret = IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::P2SH);\n-            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_ONLY || (ret == ISMINE_NO && isInvalid)) {\n                 return ret;\n+            }\n         }\n         break;\n     }\n@@ -117,8 +119,9 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             isminetype ret = IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::WITNESS_V0);\n-            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_ONLY || (ret == ISMINE_NO && isInvalid)) {\n                 return ret;\n+            }\n         }\n         break;\n     }\n@@ -142,16 +145,15 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n                 }\n             }\n         }\n-        if (HaveKeys(keys, keystore))\n+        if (HaveKeys(keys, keystore)) {\n             return ISMINE_SPENDABLE;\n+        }\n         break;\n     }\n     }\n \n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n-        // TODO: This could be optimized some by doing some work after the above solver\n-        SignatureData sigs;\n-        return ProduceSignature(keystore, DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+        return ISMINE_WATCH_ONLY;\n     }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "a15768aecb839d59aad434e767d5c4b2be6a6545",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e91820531889e309dc4335fe0de8229c6426040/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e91820531889e309dc4335fe0de8229c6426040/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=4e91820531889e309dc4335fe0de8229c6426040",
        "patch": "@@ -17,12 +17,8 @@ class CScript;\n enum isminetype\n {\n     ISMINE_NO = 0,\n-    //! Indicates that we don't know how to create a scriptSig that would solve this if we were given the appropriate private keys\n-    ISMINE_WATCH_UNSOLVABLE = 1,\n-    //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n-    ISMINE_WATCH_SOLVABLE = 2,\n-    ISMINE_WATCH_ONLY = ISMINE_WATCH_SOLVABLE | ISMINE_WATCH_UNSOLVABLE,\n-    ISMINE_SPENDABLE = 4,\n+    ISMINE_WATCH_ONLY = 1,\n+    ISMINE_SPENDABLE = 2,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };\n /** used for bitflags of isminetype */"
      }
    ]
  },
  {
    "sha": "b5802a9f5f69815d3290361fd8c96d76a037832f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTgwMmE5ZjVmNjk4MTVkMzI5MDM2MWZkOGM5NmQ3NmEwMzc4MzJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-01T19:51:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-03T18:02:01Z"
      },
      "message": "Simplify IsMine logic",
      "tree": {
        "sha": "487d5f4f63b97d6c54747d2302d7375b4624d4cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/487d5f4f63b97d6c54747d2302d7375b4624d4cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5802a9f5f69815d3290361fd8c96d76a037832f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5802a9f5f69815d3290361fd8c96d76a037832f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5802a9f5f69815d3290361fd8c96d76a037832f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5802a9f5f69815d3290361fd8c96d76a037832f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e91820531889e309dc4335fe0de8229c6426040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e91820531889e309dc4335fe0de8229c6426040",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e91820531889e309dc4335fe0de8229c6426040"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 28,
      "deletions": 26
    },
    "files": [
      {
        "sha": "bebaf9ea827aa840f84c31958b91028f27a178d7",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 26,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5802a9f5f69815d3290361fd8c96d76a037832f/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5802a9f5f69815d3290361fd8c96d76a037832f/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=b5802a9f5f69815d3290361fd8c96d76a037832f",
        "patch": "@@ -42,17 +42,20 @@ bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n     return true;\n }\n \n+void Update(isminetype& val, isminetype update)\n+{\n+    if (val == ISMINE_NO) val = update;\n+    if (val == ISMINE_WATCH_ONLY && update == ISMINE_SPENDABLE) val = update;\n+}\n+\n isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid, IsMineSigVersion sigversion)\n {\n+    isminetype ret = ISMINE_NO;\n     isInvalid = false;\n \n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n-    if (!Solver(scriptPubKey, whichType, vSolutions)) {\n-        if (keystore.HaveWatchOnly(scriptPubKey)) {\n-            return ISMINE_WATCH_ONLY;\n-        }\n-    }\n+    Solver(scriptPubKey, whichType, vSolutions);\n \n     CKeyID keyID;\n     switch (whichType)\n@@ -67,8 +70,9 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n             isInvalid = true;\n             return ISMINE_NO;\n         }\n-        if (keystore.HaveKey(keyID))\n-            return ISMINE_SPENDABLE;\n+        if (keystore.HaveKey(keyID)) {\n+            Update(ret, ISMINE_SPENDABLE);\n+        }\n         break;\n     case TX_WITNESS_V0_KEYHASH:\n     {\n@@ -78,10 +82,7 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n             // This also applies to the P2WSH case.\n             break;\n         }\n-        isminetype ret = IsMineInner(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, IsMineSigVersion::WITNESS_V0);\n-        if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_ONLY || (ret == ISMINE_NO && isInvalid)) {\n-            return ret;\n-        }\n+        Update(ret, IsMineInner(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, IsMineSigVersion::WITNESS_V0));\n         break;\n     }\n     case TX_PUBKEYHASH:\n@@ -93,18 +94,16 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n                 return ISMINE_NO;\n             }\n         }\n-        if (keystore.HaveKey(keyID))\n-            return ISMINE_SPENDABLE;\n+        if (keystore.HaveKey(keyID)) {\n+            Update(ret, ISMINE_SPENDABLE);\n+        }\n         break;\n     case TX_SCRIPTHASH:\n     {\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::P2SH);\n-            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_ONLY || (ret == ISMINE_NO && isInvalid)) {\n-                return ret;\n-            }\n+            Update(ret, IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::P2SH));\n         }\n         break;\n     }\n@@ -118,18 +117,17 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::WITNESS_V0);\n-            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_ONLY || (ret == ISMINE_NO && isInvalid)) {\n-                return ret;\n-            }\n+            Update(ret, IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::WITNESS_V0));\n         }\n         break;\n     }\n \n     case TX_MULTISIG:\n     {\n         // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n-        if (sigversion == IsMineSigVersion::TOP) break;\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n \n         // Only consider transactions \"mine\" if we own ALL the\n         // keys involved. Multi-signature transactions that are\n@@ -146,23 +144,27 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n             }\n         }\n         if (HaveKeys(keys, keystore)) {\n-            return ISMINE_SPENDABLE;\n+            Update(ret, ISMINE_SPENDABLE);\n         }\n         break;\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey)) {\n+    if (ret == ISMINE_NO && keystore.HaveWatchOnly(scriptPubKey)) {\n         return ISMINE_WATCH_ONLY;\n     }\n-    return ISMINE_NO;\n+    return ret;\n }\n \n } // namespace\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid)\n {\n-    return IsMineInner(keystore, scriptPubKey, isInvalid, IsMineSigVersion::TOP);\n+    isminetype ret = IsMineInner(keystore, scriptPubKey, isInvalid, IsMineSigVersion::TOP);\n+    if (isInvalid) {\n+        ret = ISMINE_NO;\n+    }\n+    return ret;\n }\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)"
      }
    ]
  },
  {
    "sha": "a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTNmMGZlZmY4ZDQyYjdhNDBkNDE3Zjc3ZGM4ZGU2ODJkZDg4ZmQ5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-01T20:18:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-03T18:02:01Z"
      },
      "message": "Add some checks for invalid recursion in IsMine",
      "tree": {
        "sha": "70fce341383d70b5d056dcba4b8b45a7315f53c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70fce341383d70b5d056dcba4b8b45a7315f53c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a53f0feff8d42b7a40d417f77dc8de682dd88fd9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5802a9f5f69815d3290361fd8c96d76a037832f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5802a9f5f69815d3290361fd8c96d76a037832f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5802a9f5f69815d3290361fd8c96d76a037832f"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f710782fb4b4a755cf53a698aca388894f63bf2",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a53f0feff8d42b7a40d417f77dc8de682dd88fd9/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a53f0feff8d42b7a40d417f77dc8de682dd88fd9/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
        "patch": "@@ -76,6 +76,11 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         break;\n     case TX_WITNESS_V0_KEYHASH:\n     {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            isInvalid = true;\n+            return ISMINE_NO;\n+        }\n         if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n             // We do not support bare witness outputs unless the P2SH version of it would be\n             // acceptable as well. This protects against matching before segwit activates.\n@@ -100,6 +105,11 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         break;\n     case TX_SCRIPTHASH:\n     {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            isInvalid = true;\n+            return ISMINE_NO;\n+        }\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n@@ -109,6 +119,11 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n     }\n     case TX_WITNESS_V0_SCRIPTHASH:\n     {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            isInvalid = true;\n+            return ISMINE_NO;\n+        }\n         if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n             break;\n         }"
      }
    ]
  },
  {
    "sha": "c004ffc9b42a738043e19e4c812fc7e0566119c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDA0ZmZjOWI0MmE3MzgwNDNlMTllNGM4MTJmYzdlMDU2NjExOWM1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-03T17:55:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-24T17:29:02Z"
      },
      "message": "Make handling of invalid in IsMine more uniform",
      "tree": {
        "sha": "6baf10e400902fa6beb0f3a5ce60e85da950096e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6baf10e400902fa6beb0f3a5ce60e85da950096e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c004ffc9b42a738043e19e4c812fc7e0566119c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c004ffc9b42a738043e19e4c812fc7e0566119c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c004ffc9b42a738043e19e4c812fc7e0566119c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c004ffc9b42a738043e19e4c812fc7e0566119c5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a53f0feff8d42b7a40d417f77dc8de682dd88fd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a53f0feff8d42b7a40d417f77dc8de682dd88fd9"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 40,
      "deletions": 33
    },
    "files": [
      {
        "sha": "43dd9e582e8cd6fe523199a3ed9041ae6d99dadb",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 33,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c004ffc9b42a738043e19e4c812fc7e0566119c5/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c004ffc9b42a738043e19e4c812fc7e0566119c5/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=c004ffc9b42a738043e19e4c812fc7e0566119c5",
        "patch": "@@ -28,6 +28,19 @@ enum class IsMineSigVersion\n     WITNESS_V0 = 2  //! P2WSH witness script execution\n };\n \n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,          //! Not ours\n+    WATCH_ONLY = 1,  //! Included in watch-only balance\n+    SPENDABLE = 2,   //! Included in all balances\n+    INVALID = 3,     //! Not spendable by anyone\n+};\n+\n bool PermitsUncompressed(IsMineSigVersion sigversion)\n {\n     return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n@@ -42,16 +55,9 @@ bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n     return true;\n }\n \n-void Update(isminetype& val, isminetype update)\n+IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n {\n-    if (val == ISMINE_NO) val = update;\n-    if (val == ISMINE_WATCH_ONLY && update == ISMINE_SPENDABLE) val = update;\n-}\n-\n-isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid, IsMineSigVersion sigversion)\n-{\n-    isminetype ret = ISMINE_NO;\n-    isInvalid = false;\n+    IsMineResult ret = IsMineResult::NO;\n \n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n@@ -67,62 +73,57 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n         if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n-            isInvalid = true;\n-            return ISMINE_NO;\n+            return IsMineResult::INVALID;\n         }\n         if (keystore.HaveKey(keyID)) {\n-            Update(ret, ISMINE_SPENDABLE);\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n         }\n         break;\n     case TX_WITNESS_V0_KEYHASH:\n     {\n         if (sigversion == IsMineSigVersion::WITNESS_V0) {\n             // P2WPKH inside P2WSH is invalid.\n-            isInvalid = true;\n-            return ISMINE_NO;\n+            return IsMineResult::INVALID;\n         }\n         if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n             // We do not support bare witness outputs unless the P2SH version of it would be\n             // acceptable as well. This protects against matching before segwit activates.\n             // This also applies to the P2WSH case.\n             break;\n         }\n-        Update(ret, IsMineInner(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, IsMineSigVersion::WITNESS_V0));\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n         break;\n     }\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (!PermitsUncompressed(sigversion)) {\n             CPubKey pubkey;\n             if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n-                isInvalid = true;\n-                return ISMINE_NO;\n+                return IsMineResult::INVALID;\n             }\n         }\n         if (keystore.HaveKey(keyID)) {\n-            Update(ret, ISMINE_SPENDABLE);\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n         }\n         break;\n     case TX_SCRIPTHASH:\n     {\n         if (sigversion != IsMineSigVersion::TOP) {\n             // P2SH inside P2WSH or P2SH is invalid.\n-            isInvalid = true;\n-            return ISMINE_NO;\n+            return IsMineResult::INVALID;\n         }\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            Update(ret, IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::P2SH));\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n         }\n         break;\n     }\n     case TX_WITNESS_V0_SCRIPTHASH:\n     {\n         if (sigversion == IsMineSigVersion::WITNESS_V0) {\n             // P2WSH inside P2WSH is invalid.\n-            isInvalid = true;\n-            return ISMINE_NO;\n+            return IsMineResult::INVALID;\n         }\n         if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n             break;\n@@ -132,7 +133,7 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            Update(ret, IsMineInner(keystore, subscript, isInvalid, IsMineSigVersion::WITNESS_V0));\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n         }\n         break;\n     }\n@@ -153,20 +154,19 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n         if (!PermitsUncompressed(sigversion)) {\n             for (size_t i = 0; i < keys.size(); i++) {\n                 if (keys[i].size() != 33) {\n-                    isInvalid = true;\n-                    return ISMINE_NO;\n+                    return IsMineResult::INVALID;\n                 }\n             }\n         }\n         if (HaveKeys(keys, keystore)) {\n-            Update(ret, ISMINE_SPENDABLE);\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n         }\n         break;\n     }\n     }\n \n-    if (ret == ISMINE_NO && keystore.HaveWatchOnly(scriptPubKey)) {\n-        return ISMINE_WATCH_ONLY;\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n     }\n     return ret;\n }\n@@ -175,11 +175,18 @@ isminetype IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, b\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid)\n {\n-    isminetype ret = IsMineInner(keystore, scriptPubKey, isInvalid, IsMineSigVersion::TOP);\n-    if (isInvalid) {\n-        ret = ISMINE_NO;\n+    isInvalid = false;\n+    switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+        isInvalid = true;\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n     }\n-    return ret;\n+    assert(false);\n }\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)"
      }
    ]
  }
]