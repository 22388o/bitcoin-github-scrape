gmaxwell,2018-05-01T21:56:52Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-385802937,385802937,
theuni,2018-05-01T22:35:48Z,"Concept ACK and light review ACK, but I'm not comfortable enough with this code and its use to ACK confidently.",https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-385810793,385810793,
sipa,2018-05-01T22:48:07Z,"@theuni If it helps, all but the last commit should have no effect at all. To see why:\n* The first commit rewrites the only code that cares about the distinction between `IsMine` returning `ISMINE_WATCH_UNSOLVABLE` or `ISMINE_WATCH_SOLVABLE` (by calling `IsSolvable` instead, which has essentially the same code as what is inside `IsMine` for distinguishing between the two).\n* The second commit ",https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-385812949,385812949,
theuni,2018-05-02T00:13:49Z,"@sipa Thanks, that's helpful. I was mostly nervous about bitfield assumptions from the updated isminetype values, but I see now that that's not really a concern.",https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-385827470,385827470,
laanwj,2018-05-02T05:02:33Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-385865615,385865615,
meshcollider,2018-05-02T08:50:52Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-385908448,385908448,
sipa,2018-05-03T18:04:37Z,"Addressed a few comments.\n\n@jimpo: I've added a commit that perhaps makes the data flow clearer, by introducing a separate internal type that does track INVALID as a separate state. For performance reasons, there are still explicit returns in some places. Let me know if you think this helps - I can revert if not.",https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-386384960,386384960,
sipa,2018-05-03T18:43:24Z,"@jimpo Yes, I think we should do that, but in a later PR. I'm planning to first add tester functions (IsMineWatchOnly, IsMineAny, IsMineSpendable, ...) on the bitfield approach now, and then turn it into a real enum.",https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-386396975,386396975,
jimpo,2018-05-03T20:43:34Z,utACK 6472198,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-386430459,386430459,
promag,2018-05-25T14:24:57Z,utACK c004ffc.,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-392074481,392074481,
Empact,2018-05-25T18:39:16Z,utACK c004ffc,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-392145671,392145671,
laanwj,2018-05-29T13:11:46Z,utACK c004ffc9b42a738043e19e4c812fc7e0566119c5,https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-392770290,392770290,
theuni,2018-05-01T22:16:49Z,Do these need to flip isInvalid ?,https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185349057,185349057,src/script/ismine.cpp
sipa,2018-05-01T22:19:10Z,Good idea.,https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185349478,185349478,src/script/ismine.cpp
theuni,2018-05-02T00:12:15Z,"Imo it'd improve readability here to add a check to the second predicate here:\n```c++\n((mine & ISMINE_WATCH_ONLY) != ISMINE_NONE) && ...\n```\nWhile redundant, it's not immediately obvious that invalid watch-only's were filtered out a few lines up. It would also guard against future oopses if a new type is ever added.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185366924,185366924,src/wallet/wallet.cpp
promag,2018-05-02T23:39:31Z,`else if`?,https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185668920,185668920,src/script/ismine.cpp
jimpo,2018-05-03T16:39:49Z,"commit: Make IsMine stop distinguishing solvable/unsolvable\n\nDoes this even need to be here? Wouldn't it just do the watchonly check at the end of the function anyway?\n\nEDIT: I see it is dropped in the next commit anyway.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185864670,185864670,src/script/ismine.cpp
jimpo,2018-05-03T16:42:27Z,"commit: Simplify IsMine logic\n\nEven better (arguably): `||`.\n\n```c++\nif (val == ISMINE_NO ||\n    (val == ISMINE_WATCH_ONLY && update == ISMINE_SPENDABLE)) {\n  val = update;\n}\n```",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185865472,185865472,src/script/ismine.cpp
jimpo,2018-05-03T16:58:19Z,"commit: Simplify IsMine logic\n\nIt feels like `ISMINE_INVALID` should be an IsMine type. Would require some refactoring of the callers though...",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185870102,185870102,src/script/ismine.cpp
jimpo,2018-05-03T17:00:24Z,"commit: Simplify IsMine logic\n\nI get that it's an optimization, but it still strikes me as odd that everywhere else in the function uses `Update` to modify the `ret` value, while this does a check and return.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185870704,185870704,src/script/ismine.cpp
promag,2018-05-03T17:21:21Z,"I had the same feeling but after a while I kind of disagree. I see invalid as an exception, not as a possible ""is mine"" state.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185876582,185876582,src/script/ismine.cpp
sipa,2018-05-03T17:58:31Z,That would be incorrect. When `(coinControl && coinControl->fAllowWatchOnly)` we're expected to set `spendable = true` in `COutPut` for `ISMINE_WATCH_ONLY` outputs.,https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185887668,185887668,src/wallet/wallet.cpp
sipa,2018-05-03T17:59:02Z,"Oh, nevermind. I misread the `!=`. Will do.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185887823,185887823,src/wallet/wallet.cpp
jimpo,2018-05-03T18:28:19Z,"commit: Make handling of invalid in IsMine more uniform\n\nIf values were assigned to each (NO = 0, WATCH_ONLY = 1, SPENDABLE = 2, INVALID = 3), `Update` could be implemented as `if (update > val) val = update;`.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185896165,185896165,src/script/ismine.cpp
sipa,2018-05-03T18:41:02Z,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r185899773,185899773,src/script/ismine.cpp
laanwj,2018-05-10T15:47:56Z,"I think the name `Update` is unclear, though I have a hard time thinking of a different term. Effectively it combines two `IsMineResults` and chooses the value with the highest ""ownership"" (apart from INVALID). Don't know if this would work, or be a good fit:\n```c++\nUpdate(ret, IsMineResult::WATCH_ONLY);\n```\nto\n```c++\nret = std::max(ret, IsMineResult::WATCH_ONLY);\n```",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r187372317,187372317,src/script/ismine.cpp
sipa,2018-05-11T19:33:57Z,Done. The `Update` function was introduced before @jimpo noticed it was really a simple maximum if INVALID is made the highest value.,https://github.com/bitcoin/bitcoin/pull/13142#discussion_r187712626,187712626,src/script/ismine.cpp
Empact,2018-05-21T07:14:01Z,"nit: `ret` is always `NO` at this point (and in all such assignments) so the `max` is unnecessary.\nCould be left as a safety measure though if that's what you intend.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r189510486,189510486,src/script/ismine.cpp
sipa,2018-05-22T00:16:52Z,"I expect the compiler to optimize this out; with the max it's more clear what the intention is (going through various combinations and picking the ""most"" isminish one, unless it's invalid), and less likely to break with future change.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r189747660,189747660,src/script/ismine.cpp
promag,2018-05-24T13:10:15Z,"nit, add comment to note that the value matters and `INVALID` must be the higher?",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r190578972,190578972,src/script/ismine.cpp
sipa,2018-05-24T17:29:23Z,"Done, added some comments.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r190668618,190668618,src/script/ismine.cpp
Empact,2018-05-25T18:35:41Z,"nit: this use of ISMINE_NO seems misplaced. Checking for the existence of the flag in mine, the result should not equal 0, which only incidentally is the value of NO.",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r190977517,190977517,src/wallet/wallet.cpp
sipa,2018-05-25T20:43:20Z,"Agree, though that's an existing problem in several places. I prefer to fix it as a follow-up (see https://github.com/bitcoin/bitcoin/pull/13142#issuecomment-386396975).",https://github.com/bitcoin/bitcoin/pull/13142#discussion_r191005316,191005316,src/wallet/wallet.cpp
