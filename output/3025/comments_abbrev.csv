sipa,2013-09-23T22:15:44Z,"This would constitute a soft-fork, as IsPushOnly is called by P2SH VerifyScript. Closing until I find a workaround.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-24959971,24959971,
petertodd,2013-09-23T23:02:20Z,"Why not make a generic ""IsCanonicalPushDatas"" that just checks arbitrary scripts for pushdata canonicality and apply it to both scriptPubKey and scriptSig?\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-24962556,24962556,
sipa,2013-09-23T23:04:56Z,"@petertodd You basically mean applying the canonicality test to output scripts as well, without enforcing it being push-only. Sounds reasonable.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-24962718,24962718,
petertodd,2013-09-23T23:10:06Z,"Yup, and the same function can be used for scriptSigs because other mechanisms force them to be only pushdata's anyway.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-24962988,24962988,
sipa,2013-09-24T21:32:30Z,@petertodd Done.\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-25044403,25044403,
sipa,2013-09-24T21:45:45Z,"@petertodd Nice catch. I removed it while investigating a tester error, that lead to discovering IsPushOnly() was used in P2SH VerifyScript. I shouldn't have left that change in, though. Removed.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-25045309,25045309,
petertodd,2013-09-24T22:11:30Z,@sipa Cool. Fix the OP_n case and add more tests and I think this is done.\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-25046914,25046914,
sipa,2013-09-29T13:45:05Z,"@petertodd If we both allow OP_n and single-byte pushes, malleability will remain (at least for non-P2SH multisigs with less than 17 keys). Is it really a problem?\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-25320576,25320576,
petertodd,2013-09-29T14:28:23Z,"@sipa As I said in my comment before IsStandard() tests that OP_n is used where appropriate, so there isn't any way to use a non-standard pushdata anyway. Just leave that decision until later - mark it with a ""TODO"" for now, and do note in that comment that OP_1NEGATE and OP_RESERVED would have to be handled correctly in addition to the more obvious OP_{0,1-16}\n\nBesides, what do you mean by ""mal",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-25321242,25321242,
sipa,2013-10-20T13:48:04Z,"@petertodd Right now, this is just an IsStandard() test as a first step, but my intention is certainly to try to get this (or something similar) as a network rule (requiring a soft fork). Together with a few other changes, I believe it's possible to kill malleability entirely (only for transactions that don't choose to give it up through different hashtypes, of course).\n\nFrom that perspective, I",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-26673298,26673298,
petertodd,2013-10-20T23:29:23Z,"I know that, I'm just saying that in this case the rule is meaningless for now because it's a case that can't happen in a standard transaction scriptSig, and we should at least update the rest of the reference client source code to follow this new standard first.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-26685857,26685857,
sipa,2013-10-21T22:16:59Z,"Trying to implement a ""pushing a byte between 0x00 and 0x10 uses OP_n, rather than 1-byte data pushes"" rule, I hit an odd problem: the coinbase genesis is non-canonical...\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-26761908,26761908,
petertodd,2013-10-22T19:27:32Z,"Heh, I was waiting for you to notice that. :)\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-26834021,26834021,
gmaxwell,2014-02-11T19:27:32Z,ACK ACK ACK ACK.  Rebase and merge.  (Or should I just open a new pull with the rebase)\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34795177,34795177,
jgarzik,2014-02-11T19:38:57Z,ACK presuming aforementioned coinbase issue addressed...  I don't see a check in the current commit.\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34796545,34796545,
luke-jr,2014-02-11T19:45:56Z,"@sipa What is ""the coinbase genesis""?\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34797340,34797340,
petertodd,2014-02-11T19:48:29Z,"@luke-jr The coinbase of the genesis block uses a pushdata form that sipa's code would consider non-standard.\n\nAnway, there's no reason to apply these rules to scriptPubKey's, which are signed and aren't mutable. Apply them only to scriptSigs.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34797629,34797629,
sipa,2014-02-11T19:54:07Z,"Rebased.\n\n@petertodd But the genesis coinbase is a scriptSig, not a scriptPubKey. I can't remember why this was a problem - IsStandardTx is never applied to coinbases.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34798292,34798292,
petertodd,2014-02-11T20:10:00Z,@sipa I mean in general; the code right now applies the test to both when to fix malleability you only need to apply to scriptSig. Potentially by doing both we'll cause extra problems that don't need to be.\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34800097,34800097,
BitcoinPullTester,2014-02-11T20:14:31Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c6adcd734d0c1f38f370cc7e0cf403ae90aa9de2 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34800566,34800566,
sipa,2014-02-11T20:16:08Z,"@petertodd Yes, agree. Removed it from scriptPubKey now.\n\nI'd still like to have all 1-byte pushes (the CScript << operator) cause something we consider canonical ourselves. Doing that breaks the genesis block, however.\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34800738,34800738,
sipa,2014-02-11T20:51:50Z,Did anyone actually test this? For example that spending a multisig doesn't cause code that gets rejected?\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34804825,34804825,
gmaxwell,2014-02-11T20:53:49Z,I've been running it (well an earlier copy extracted from it) on my node since yesterday afternoon. I haven't done any multisig spends. But I'll go ahead and try that on testnet.\n,https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34805325,34805325,
luke-jr,2014-02-11T21:01:12Z,"The genesis block really doesn't _really_ have a coinbase. It's more accurate to say merkleroot 4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b represents zero transactions. We could update bitcoind to act on that logic, if it helps..\n",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34806308,34806308,
sipa,2014-02-11T21:10:46Z,"@luke-jr The problem is this:\n- Currently, the CScript::operator<< willl not use OP_1 through OP_16 for 1-byte pushes of bytes 0x01 though 0x10.\n- To be consistent with the rules we're setting ourselves for IsStandard here, that would need to change (even though that operator isn't actually used anywhere for creating actual transactions currently).\n- Changing that would mean the construction of",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-34807293,34807293,
codefinderin,2014-03-13T21:48:44Z,"@sipa \nyes, i got an error: {""code"":-25,""message"":""64: non-canonical""} when i trying to spend a multisig (multi-input to multi-output), how to fix?\n\n./bitcoind sendrawtransaction 0100000004aa8e347c91a714d7b94c150eb5029ef6b2275b09e543e26e80d7d97be8d0096801000000fd000100493046022100ffeb7f23cd0561e9f72ba1d69d6de9bf2dd19b34852283e82fd591c3d51985b2022100ebbd06fa9c293c12b659ae6a9b98fcd08ec194d7f0c4de",https://github.com/bitcoin/bitcoin/pull/3025#issuecomment-37591129,37591129,
