jonasschnelli,2017-09-28T14:19:16Z,"Not opposed to add that. Though IMO the more experience users (which are those who may use explicit fee-rates) should use create/fund/sendrawtx.\n\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-332851094,332851094,
esotericnonsense,2017-09-28T16:29:50Z,"Concept ACK. I don't like that this results in sendtoaddress having 8 parameters but I don't see an immediately obvious way to avoid that.\n\nSendmany could get it too?",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-332891318,332891318,
kallewoof,2017-09-29T02:22:44Z,"Can't fix people putting too high fees in, but if they put too low, they should be able to bump the fee unless they specifically disable it. As such, RBF is default-on when fees are explicit (3d14d35).\n\n@promag Added tests (1768936).\n\n@esotericnonsense I don't know how frequently this will be used. I suggest it for sendtoaddress because I see a lot of people asking how to fire off a tx wit",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-333013746,333013746,
meshcollider,2017-09-29T12:45:34Z,"Re: the 8 parameter issue @esotericnonsense mentioned, it would be cleaner to convert most parameters to a JSON object input like `bumpfee`, `listunspent`, etc. use since most are independent of each other and optional",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-333116435,333116435,
kallewoof,2017-11-13T01:58:29Z,Addressed @luke-jr requests (double-use `conf_target` and add feature to `sendmany`).,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-343789705,343789705,
DrahtBot,2018-09-21T13:31:55Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19349 (doc: Include wallet path to relevant RPC calls by D4nte)\n* #18654 (rpc: separate bumpfee's psbt creation function",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-423531959,423531959,
sipa,2018-11-11T03:45:40Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-437641418,437641418,
meshcollider,2018-11-11T07:38:16Z,"utACK https://github.com/bitcoin/bitcoin/pull/11413/commits/d9b1c428486b8f0acb92825a01d7dc5c0994ca24, my earlier concern about adding another parameter is no longer relevant :)",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-437649913,437649913,
kallewoof,2018-11-12T12:11:01Z,"@promag Added release notes & squashed. Also fixed sendmany, which I had forgotten.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-437856887,437856887,
kallewoof,2018-11-26T03:20:34Z,"@luke-jr Thanks for review! I switched to `"" + CURRENCY_UNIT + ""/kB` as suggested.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-441507839,441507839,
Sjors,2019-08-06T12:48:27Z,"Concept ACK. Alernatively you could replace `EXPLICIT` with `btc/kb`. That's more readable, prevents accidents when people forget the unit account isn't satoshi per byte (see #16257) and makes it easy to add `sat/b` as a unit a later.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-518654466,518654466,
kallewoof,2019-08-06T13:04:10Z,"@Sjors I love it. Will definitely do, thanks!",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-518660055,518660055,
kallewoof,2019-08-06T13:22:47Z,"Done. Also squashed things.\n\nFor shitcoiners, this is a drawback as a new hard-coded coin name (""btc"" in ""btc/kb"") is introduced, but don't think anyone cares about that.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-518667110,518667110,
Sjors,2019-08-06T13:43:58Z,"Ah, I missed this update, here was my stab at the same, plus satoshi per byte: https://github.com/Sjors/bitcoin/commit/a0996c125d59e9809306818533eba5cc6e512eb8",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-518675419,518675419,
kallewoof,2019-08-07T04:46:20Z,"I ended up refactoring the uppercase/lowercase code quite heavily, which may deserve its own PR. Feedback on this welcome.\n\nEdit: @Sjors Your commit inspired the resulting code, FWIW :)",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-518937920,518937920,
kallewoof,2019-08-08T02:39:58Z,Addressed @Sjors nits. Note there is #16566 which contains the case function refactor commit only.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-519340175,519340175,
Sjors,2019-08-08T08:30:35Z,utACK 601da0f981078a99b3eb5d689f42c7937199a375,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-519422938,519422938,
kallewoof,2019-08-15T07:15:09Z,"Split into 6 commits:\n- CURRENCY_ATOM addition\n- conf_target alias in bumpfee\n- FeeMode doc helper function\n- make fee estimate modes case insensitive\n- add BTC/KB and SAT/B modes (all caps, like other modes)\n- release notes\n",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-521541708,521541708,
Sjors,2019-08-16T08:36:09Z,ACK c9971be689aab3242f35447ad20e187915f59418,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-521933375,521933375,
kallewoof,2019-08-16T09:02:12Z,"@Sjors Apologies, I missed your preserve-ordering suggestion. How does fa09386 look?",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-521941096,521941096,
Sjors,2019-08-16T09:20:45Z,"Looks better:\n<img width=""866"" alt=""Schermafbeelding 2019-08-16 om 11 18 43"" src=""https://user-images.githubusercontent.com/10217/63157662-b5e56000-c017-11e9-9a37-3ccabecf3b09.png"">",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-521946433,521946433,
kallewoof,2019-08-16T11:44:23Z,"Cool! I realized looking at your output that ""unset"" should be ""UNSET"". Fixup'd.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-521981578,521981578,
kallewoof,2019-08-20T06:05:38Z,"@luke-jr Thanks for feedback, addressed!",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-522867505,522867505,
Sjors,2019-08-21T09:03:01Z,reACK eda3439,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-523367475,523367475,
MarcoFalke,2019-08-21T12:11:20Z,"Concept ACK. Some questions, which you are free to ignore.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-523428777,523428777,
Sjors,2019-08-26T10:52:47Z,Code review re-ACK c109001c9bb486eff3112d095a4639626273becc (and help text still looks correct),https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-524814904,524814904,
instagibbs,2019-08-27T13:46:07Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-525308741,525308741,
Sjors,2019-08-27T15:31:26Z,"@promag it's case insensitive to avoid bike-shedding ""sat/B"" vs. ""SAT/B"" and ""BTC/kB"" vs ""BTC/KB"", and lower case is easier to type.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-525355877,525355877,
Sjors,2019-08-28T08:02:54Z,"Mysterious Windows failure:\n<img width=""825"" alt=""Schermafbeelding 2019-08-28 om 10 02 31"" src=""https://user-images.githubusercontent.com/10217/63837028-faa7ba00-c97a-11e9-8f79-369da0ebd10f.png"">\n",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-525631022,525631022,
kallewoof,2019-08-28T08:57:58Z,"@Sjors Ah.. yeah, I think I got that before as well. For some reason it fails to up-case..",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-525650843,525650843,
kallewoof,2019-08-28T14:50:09Z,"Yikes... turning back into a function. @promag \n\n<img width=""1003"" alt=""Screen Shot 2019-08-28 at 23 49 33"" src=""https://user-images.githubusercontent.com/250224/63866672-89095380-c9ee-11e9-9b0d-a5850ba48d6b.png"">\n\nActually gonna see if adding const strings for the two fee rates fixes it.\n\nEdit: const strings did not help.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-525780646,525780646,
promag,2019-08-28T18:44:26Z,@kallewoof well..,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-525872781,525872781,
kallewoof,2019-08-29T04:19:55Z,"@promag Sorry, screwed up rebase; reverted now.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526015149,526015149,
kallewoof,2019-08-29T06:40:54Z,I found a different workaround; apparently MSVC does not bug out if you put the `const std::string`s in the `.h` file. We do that elsewhere so I assume nobody will complain about moving `CURRENCY_UNIT` into `feerate.h` from `feerate.cpp`.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526047386,526047386,
kallewoof,2019-08-29T11:51:50Z,@promag It should indeed. I added tests and fixed this.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526151090,526151090,
instagibbs,2019-08-30T18:42:24Z,"concept ACK, but I am *really* wary of the implementation of the arguments.\n\nThe meaning of `conf_target` basically inverts with this new argument. Consider:\n`sendtoaddress 2N7GTLzhS9n3FzwAQohAgnk2kGvt8eE9nng 1 """" """" false true 1008`\n\nand\n\n`sendtoaddress 2N7GTLzhS9n3FzwAQohAgnk2kGvt8eE9nng 1 """" """" false true 1008 sat/B`\n\nand the opposite way:\n`1` vs `1 sat/B` is likely consider",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526707245,526707245,
Sjors,2019-08-30T18:47:24Z,"> I'd rather we ""overload"" the conf_target and parse 30sat/B directly, disallowing estimate mode to be specified maybe other than unset.\n\nIf that's easy to implement I also think it's significantly more clear.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526708790,526708790,
instagibbs,2019-08-30T18:57:04Z,The issue still remains for someone who types `1` and forgets to write `sat/B`. I'm not sure if there's a backwards compatible way to solve this.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526711641,526711641,
luke-jr,2019-08-30T20:26:29Z,"Specifying an amount as a string like that is completely foreign to all existing RPC interfaces.\n\nThe number is already interpreted differently based on the mode string.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526738188,526738188,
luke-jr,2019-08-30T20:28:47Z,"Maybe `conf_target` as a named param should reject explicit modes, and it should be specified as another named param for explicit?\n\nThat might require #11660",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-526738900,526738900,
kallewoof,2019-09-02T04:48:33Z,"@instagibbs Yeah, typing '1' would mean 'confirm within 1 block' which is directly opposite of '1 sat/b'.\n\nAdding number suffixes only partially solves the problem. Someone who accidentally hits enter forgetting the 'sat/b' suffix will have exactly the same issue.\n\nPerhaps the explicit modes should not overload `conf_target` but instead use a new argument entirely. Alternatively we make th",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-527000151,527000151,
kallewoof,2019-09-02T05:32:12Z,"Another alternative is to actually require suffixes for all conf_targets, but that is a compatibility breach (1 block, 1 sat/b, 1 btc/kb).",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-527007270,527007270,
Sjors,2019-09-02T11:26:37Z,"I don't like including the string in the same param (without a space). Nor do I like the verboseness of named params.\n\nMaking a breaking change might be worth it for the extra safety. It would fail quite gracefully, i.e. it just stops sending. The impact can be reduced by not requiring `estimate_mode` when using named parameters.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-527112442,527112442,
Sjors,2019-11-01T16:41:01Z,"Tested ACK 398be1c modulo squash.\n\nPositional arguments are nigh-impossible to use, but let's worry about that later...\n```\nbitcoin-cli sendtoaddress bc... 1 """" """" false true 1 sat/b\nbitcoin-cli sendmany """" '{""bc..."": 1}' 0 """" '[]' true 1 sat/b\n```\n\nA mix of positional and named kind of works:\n```\nsendtoaddress bcrt1qgr3zfmvqzl4uv3utz6h849x0fu5a8mvg695jde 1 -conf_target=1 estim",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-548858293,548858293,
Sjors,2020-01-16T12:43:17Z,Code review re-ACK 9721534f1c929ce275ac0516d5777bc1063f7495,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-575134753,575134753,
Sjors,2020-02-20T15:44:39Z,Still works when rebased. @achow101 @instagibbs maybe you can (re-)review?,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-589145733,589145733,
kallewoof,2020-03-02T08:37:16Z,@instagibbs Thanks for the review! Addressed everything except the coverage part which I am hoping you'll clarify.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-593283861,593283861,
Sjors,2020-03-02T08:39:35Z,"~Code review re-ACK 74f9d2797bd199fcd4cfc30e490bbac6224424f9~\n\nActually there's a problem the user tries to set the fee rate to `0.1 sat/b`. It silently rounds up to `1`. This should throw an error or work (setting the fee slightly below the min relay fee, e.g. 1.2 sat/b can be useful).\n\nTo reproduce, add this to `wallet_basic_py`\n\n```python\n        txid = self.nodes[2].sendtoaddress",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-593284781,593284781,
kallewoof,2020-03-02T15:15:18Z,"@Sjors Nice, good catch! Where in wallet_basic did you add that test, btw?",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-593452273,593452273,
kallewoof,2020-03-03T05:10:04Z,"Updated code to now return an error when creating a transaction if the requested explicit fee rate differs from the required fee rate. This prevents silently ignoring the user when they want a fee rate < ~1 sat/b~ the current minimum fee rate (which may change due to mempool state, and/or future changes to the current 1 sat/b minimum policy default) -- it now gives an error, as you would expect.\",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-593770736,593770736,
instagibbs,2020-03-05T16:40:37Z,"something to think about out loud for the future: If we want to support implicit CPFP, this new mode would probably turn that off, at least by default.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-595326642,595326642,
Sjors,2020-03-12T12:15:49Z,re-ACK 8326a544b7839e362c7e530bebfffb02ba1ddb34 modulo rebase for #18274 (which contains 7864c1f),https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-598154199,598154199,
kallewoof,2020-03-12T12:45:48Z,Good catch; dropped 7864c1f.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-598165763,598165763,
Sjors,2020-03-12T13:41:23Z,utACK 04e94beb1d9f22809b64bda2c7e92c1e911d2227 ,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-598191843,598191843,
instagibbs,2020-03-12T13:52:30Z,utACK https://github.com/bitcoin/bitcoin/pull/11413/commits/04e94beb1d9f22809b64bda2c7e92c1e911d2227,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-598197232,598197232,
kallewoof,2020-03-13T05:03:04Z,Addressed @sipa comments. Please re-review! :),https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-598550340,598550340,
instagibbs,2020-03-13T17:01:18Z,re-utACK https://github.com/bitcoin/bitcoin/pull/11413/commits/6fef8dcd771f1a628d2c4bee2682a98312bcd80b,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-598821657,598821657,
kallewoof,2020-03-30T07:55:28Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-605842216,605842216,
Sjors,2020-03-30T09:23:20Z,re-utACK a29b9939b6537e60a9dd47e0ae49968851cac251,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-605885345,605885345,
Sjors,2020-04-28T18:36:50Z,"re-utACK 9afd897, just a rebase and some tests have moved.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-620783993,620783993,
kallewoof,2020-05-09T05:03:34Z,"Dropped 'fee rate changed' commit, as it is its own PR now (#18275).",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-626106868,626106868,
jonatack,2020-06-15T16:07:11Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-644226810,644226810,
Sjors,2020-06-16T10:05:34Z,re-tACK a9ad35d3016d9d912472861895b8f5160e24cc12,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-644667876,644667876,
kallewoof,2020-06-20T06:36:14Z,Rebased to see if weird FreeBSD error would go away. No changes since a9ad35d,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-646951699,646951699,
jonatack,2020-06-25T07:09:09Z,"If helpful, some notes I took while reviewing this PR: https://gist.github.com/jonatack/f16e51274d4254c01f682063b0f89e04",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649289375,649289375,
kallewoof,2020-06-25T11:08:14Z,"Thanks for the detailed review @jonatack! It looks like `bumpfee` is suffering from the same issue as `walletcreatefundedpsbt`. I'm totally for merging this and doing a follow-up PR to address those, if this gets enough momentum to finally be merged after all this time. Otherwise I'll look into fixing those two.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649472369,649472369,
Sjors,2020-06-25T16:40:53Z,"re-utACK 25dac9fa65: rebased, more fancy C++, \n<img width=""842"" alt=""Schermafbeelding 2020-06-25 om 18 37 03"" src=""https://user-images.githubusercontent.com/10217/85761269-e0fa0f00-b712-11ea-90c6-0f1eab891baa.png"">\n\nStrong preference for merging this and improving the rest in followups. This has been blocking #16378 for a while and rebasing/tweaking a big change can be a lot of work, also on",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649682206,649682206,
jonatack,2020-06-25T16:47:55Z,"Ouch, that image with the flashy white background hitting the eyes in dark mode :smile: \n\n> Strong preference for merging this and improving the rest in followups. This has been blocking #16378 for a while and rebasing/tweaking a big change can be a lot of work, also on reviewers.\n\n:100:... @kallewoof has the patience of a sphinx. We're still early enough in the release cycle to do the fol",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649690537,649690537,
MarcoFalke,2020-06-25T17:55:30Z,"Sorry to be so late with this review, but it seems that this overloads the `conf_target` which used to be an integer (number of blocks) to also accept floats or strings. Then, if a float or string is passed, its unit is taken from the estimate mode (which used to be an enum string).\n\nI believe, in the past all amounts (with a few exceptions) were passed as BTC and all feerates were passed as B",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649730975,649730975,
MarcoFalke,2020-06-25T18:00:09Z,"Oh, looks like this got merged before I left my comment.\n\nAnyway, I'd like to hear what the reviewers think of adding a new `feerate` argument that simply passed the feerate (with unit) in one string. Then, parsing code could be shared among all places in the RPC code that use the new feerate type.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649733071,649733071,
instagibbs,2020-06-25T18:13:17Z,"I suggested that a long time ago but iirc people didn't like that idea...\n\nOn Thu, Jun 25, 2020, 2:00 PM MarcoFalke <notifications@github.com> wrote:\n\n> Oh, looks like this got merged before I left my comment.\n>\n> Anyway, I'd like to hear what the reviewers think of adding a new feerate\n> argument that simply passed the feerate (with unit) in one string. Then,\n> parsing code could be share",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649739168,649739168,
laanwj,2020-06-25T18:18:52Z,"> Anyway, I'd like to hear what the reviewers think of adding a new feerate argument that simply passed the feerate (with unit) in one string. Then, parsing code could be shared among all places in the RPC code that use the new feerate type.\n\nI do agree that this would be better defined. Overloading an argument on type seems somewhat brittle, and could lead to serious accidents. Sorry for merg",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649741774,649741774,
MarcoFalke,2020-06-25T18:20:20Z,"Yeah, no worries. I was about to merge this myself just now when I realized that this might not play out well long-term.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649742447,649742447,
jonatack,2020-06-25T20:16:21Z,"I also prefer not overloading the argument. From reading the years of discussion I thought the discussion had been settled and that ship had sailed. In any case, there's work to do before it is release-ready and I'm happy to help.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649794907,649794907,
MarcoFalke,2020-06-25T23:58:08Z,"I am happy to review any follow-ups, so please ping me if I don't show up on my own",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649874547,649874547,
kallewoof,2020-06-26T05:18:55Z,@jonatack Are you up for doing a follow-up PR? I'll gladly review it if so.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-649973935,649973935,
jonatack,2020-06-26T07:20:59Z,"@kallewoof SGTM. Fixups + tests now, then propose a universal feerate arg unless you want to jump on that.",https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-650022016,650022016,
kallewoof,2020-06-26T07:55:53Z,Go for it! :) Let me know if it becomes overwhelming and I'll see if I can pick up a part of it.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-650039097,650039097,
jonatack,2020-10-22T18:28:43Z,First follow-up is #20220.,https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-714678409,714678409,
promag,2017-09-28T14:43:36Z,"The intent sounds more like no estimation so `{""NONE"", FeeEstimateMode::NONE}`?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r141638786,141638786,src/policy/fees.cpp
promag,2017-09-28T14:44:49Z,Mention that `estimate_mode` must be set to (currenlty) `EXPLICIT` to use this value?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r141639109,141639109,src/wallet/rpcwallet.cpp
promag,2017-09-28T14:45:05Z,Add test for error.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r141639175,141639175,src/wallet/rpcwallet.cpp
kallewoof,2017-09-29T00:39:47Z,"I don't know. People could mistake that to mean ""no fee"".",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r141768042,141768042,src/policy/fees.cpp
kallewoof,2017-09-29T00:40:04Z,`to use for EXPLICIT mode` is not enough?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r141768072,141768072,src/wallet/rpcwallet.cpp
kallewoof,2017-10-01T06:17:58Z,"Self-nit: space after `""feerate""`",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r142021679,142021679,src/rpc/client.cpp
luke-jr,2017-11-10T13:57:29Z,This isn't in the argument list above.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r150240641,150240641,src/wallet/rpcwallet.cpp
luke-jr,2017-11-10T13:58:20Z,"It doesn't make sense to add a new param for this. Instead, make `params[6]` be conf target *or* feerate...",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r150240838,150240838,src/wallet/rpcwallet.cpp
practicalswift,2018-09-21T07:52:44Z,"```\n2018-09-19 13:23:27 clang-tidy(pr=11413): src/wallet/rpcwallet.cpp:420:48: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]\n2018-09-19 13:23:27 clang-tidy(pr=11413): src/wallet/rpcwallet.cpp:420:129: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r219411170,219411170,src/wallet/rpcwallet.cpp
practicalswift,2018-09-21T07:53:01Z,"```\n2018-09-19 13:23:27 clang-tidy(pr=11413): src/wallet/rpcwallet.cpp:857:48: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]\n2018-09-19 13:23:27 clang-tidy(pr=11413): src/wallet/rpcwallet.cpp:857:129: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r219411233,219411233,src/wallet/rpcwallet.cpp
kallewoof,2018-10-06T00:28:34Z,Thanks. I assume this is referring to the `|`?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r223164917,223164917,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-11T18:19:08Z,Fee rates are passed in as BTC/kB (see settxfee for example) and amounts can be passed in as either num or string.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r232498608,232498608,src/wallet/rpcwallet.cpp
kallewoof,2018-11-12T07:45:18Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r232557388,232557388,src/wallet/rpcwallet.cpp
promag,2018-11-12T12:06:01Z,"nit, I may be wrong but I think you could increment `doc/release-notes-14454.md`?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r232632783,232632783,doc/release-notes-11413.md
kallewoof,2018-11-12T12:13:36Z,Hm. Does it matter? I assume the files are merged together at the end anyway.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r232634643,232634643,doc/release-notes-11413.md
luke-jr,2018-11-24T20:00:58Z,"Per kB, not per kb[it].",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r236052288,236052288,src/wallet/rpcwallet.cpp
luke-jr,2018-11-24T20:02:12Z,Also should use `CURRENCY_UNIT` here.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r236052325,236052325,src/wallet/rpcwallet.cpp
meshcollider,2018-12-12T04:39:19Z,"This example feerate needs updating now to be BTC/kB, 2000 BTC/kB is probably a bit high 😄 ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r240880339,240880339,src/wallet/rpcwallet.cpp
luke-jr,2019-04-04T08:38:41Z,"This is part of the wrong commit. The `sendtoaddress` test only calls `getrawtransaction` on a transaction in the mempool, which doesn't need a tx index.\n\nAlso, the `sendmany` test that relies on this *could* just pass the block hash explicitly to avoid building the tx index.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r272072883,272072883,test/functional/wallet_basic.py
luke-jr,2019-04-04T08:41:44Z,"Actually, you already removed the `getrawtransaction` from sendmany, so this seems completely unnecessary?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r272074065,272074065,test/functional/wallet_basic.py
kallewoof,2019-04-05T02:46:25Z,"Didn't realize that, thanks. Removed these 2 lines!",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r272429923,272429923,test/functional/wallet_basic.py
luke-jr,2019-04-27T06:27:04Z,"Since the block is mined by node 0, and the balance is on node 2, you need another `sync_all` here or else there's a race condition.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r279145169,279145169,test/functional/wallet_basic.py
kallewoof,2019-05-07T04:36:44Z,"@luke-jr Thanks, fixed!",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r281457925,281457925,test/functional/wallet_basic.py
MarcoFalke,2019-08-06T13:45:21Z,"I think we use upper case. See also\n\n```\nsrc/policy/feerate.cpp:const std::string CURRENCY_UNIT = ""BTC"";\n```\n\nwhich you can use to express your love of shitcoins.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311070545,311070545,src/util/fees.cpp
kallewoof,2019-08-06T13:55:20Z,"I am very tempted to make the parser case insensitive and use CURRENCY_UNIT as you say. Otherwise it's a bit of a pain to require users to type ""BTC/kb"" every time (as opposed to just ""btc/kb"")",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311075817,311075817,src/util/fees.cpp
MarcoFalke,2019-08-06T14:20:44Z,"Also, there is a difference between kilobit (kb) and kilobyte (kB)",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311089754,311089754,src/util/fees.cpp
Sjors,2019-08-06T15:06:15Z,"+1 for case insensitive\n\nAlso fine with CURRENCY_UNIT\n\nI don't care about the `kB` vs `kb` distinction as far as the parser goes, because nobody uses bits in the context of fees, but documentation wise we should do it correctly. Users will out by themselves it's case insensitive :-)",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311116353,311116353,src/util/fees.cpp
luke-jr,2019-08-06T23:25:18Z,"RPC is for software, not users...",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311315257,311315257,src/util/fees.cpp
kallewoof,2019-08-07T05:00:05Z,"It's for any entity that doesn't use the GUI, which includes non-software me.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311368978,311368978,src/util/fees.cpp
Sjors,2019-08-07T14:32:45Z,Should be upper case B.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311587384,311587384,src/policy/fees.h
Sjors,2019-08-07T14:34:12Z,"The second one should be CURRENCY_ATOM + ""/B""",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311588148,311588148,src/wallet/rpcwallet.cpp
Sjors,2019-08-07T14:36:46Z,Same issue as above,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311589586,311589586,src/wallet/rpcwallet.cpp
kallewoof,2019-08-08T02:30:40Z,"Hm? No it is literally saying ""fee rate (BTC/kB) if BTC/kB estimate mode is used"". Though since we now have two, maybe it should be ""fee rate (for BTC/KB or SAT/B estimate modes)"" instead.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r311834241,311834241,src/wallet/rpcwallet.cpp
luke-jr,2019-08-08T15:24:15Z,This seems to clearly perform worse. Is there a reason not to keep the current way? (A std::string ToLower overload could be *in addition* to this.),https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312097809,312097809,src/util/system.cpp
Sjors,2019-08-08T15:32:27Z,@luke-jr this bit is moved to #16566 (including discussion about whether performance matters),https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312102323,312102323,src/util/system.cpp
luke-jr,2019-08-08T16:11:45Z,It seems pretty ugly to pass the various units into fee estimate mode here. Can't we convert to EXPLICIT for internal stuff?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312121567,312121567,src/policy/fees.h
luke-jr,2019-08-08T16:13:13Z,Let's move this into `SetFeeEstimateParam`...?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312122170,312122170,src/wallet/rpcwallet.cpp
luke-jr,2019-08-08T16:15:43Z,"""KB"" is 1024 bytes; we should at least document it as ""kB""",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312123237,312123237,src/wallet/rpcwallet.cpp
luke-jr,2019-08-08T16:19:10Z,"Isn't ""sat"" usually lowercase?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312124719,312124719,src/policy/feerate.cpp
luke-jr,2019-08-08T16:19:46Z,Should be an uppercase B here.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312125013,312125013,src/wallet/rpcwallet.cpp
kallewoof,2019-08-09T01:01:47Z,"I could keep the in-place transform, but seriously, this is called a couple of dozen times once at startup and not again. I think we want to aim for readability on this one.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312298047,312298047,src/util/system.cpp
kallewoof,2019-08-09T01:02:32Z,I don't understand what you are suggesting.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312298137,312298137,src/policy/fees.h
kallewoof,2019-08-09T01:07:37Z,Done!,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312298841,312298841,src/wallet/rpcwallet.cpp
kallewoof,2019-08-09T01:08:13Z,"Estimate modes are all uppercase, so I don't think the convention applies here.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312298939,312298939,src/wallet/rpcwallet.cpp
kallewoof,2019-08-09T01:09:57Z,"Yeah, hrm. The one place it's used right now is uppercase, though, so it may make sense to just do `ToLower(CURRENCY_ATOM)` in future uses. Or alternatively I use `ToUpper(CURRENCY_ATOM)` here...",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312299181,312299181,src/policy/feerate.cpp
luke-jr,2019-08-09T02:08:54Z,"BTC/kB and sat/B should be limited to the RPC interface. Once it gets to CCoinControl, it should just be EXPLICIT.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312307322,312307322,src/policy/fees.h
luke-jr,2019-08-09T02:10:45Z,"IMO `ToUpper(CURRENCY_ATOM)` makes more sense, since it could just as well be ""cXBT"" or such in some hypothetical sidechain or future hardfork.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312307565,312307565,src/policy/feerate.cpp
kallewoof,2019-08-09T02:19:08Z,"Ahh, but that complicates the parser part though. Right now, it can take a string and output a `FeeEstimateMode`. With your suggestion that wouldn't be sufficient.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312308706,312308706,src/policy/fees.h
luke-jr,2019-08-09T02:19:55Z,"Since we're making them case-insensitive, it seems like a good opportunity to introduce mixed case here.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312308805,312308805,src/wallet/rpcwallet.cpp
kallewoof,2019-08-09T02:23:35Z,"I am inclined to agree, but a lot of `ToUpper` was necessary: 4b304fefc517404bb109041cfcfa2a2c576c9a42",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312309325,312309325,src/policy/feerate.cpp
kallewoof,2019-08-09T02:27:24Z,"I'm not opposed to that, though it would make the PR unnecessarily bigger.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312309802,312309802,src/wallet/rpcwallet.cpp
luke-jr,2019-08-09T03:34:23Z,It may actually simplify it. There's only a single call that can be inlined here.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312318761,312318761,src/policy/fees.h
luke-jr,2019-08-09T03:35:56Z,IMO only the one case in `FeeModeFromString` is actually necessary.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312318995,312318995,src/policy/feerate.cpp
kallewoof,2019-08-09T04:12:13Z,You mean if we mix-case the estimate modes? Yeah.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312323365,312323365,src/policy/feerate.cpp
luke-jr,2019-08-10T14:13:46Z,Is there any benefit to the function? (As opposed to a global map),https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312704294,312704294,src/util/fees.cpp
kallewoof,2019-08-10T14:58:07Z,The windows build (AppVeyor) fails to generate the map if I don't use a function. :/,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r312705454,312705454,src/util/fees.cpp
luke-jr,2019-08-14T15:10:25Z,"This ends up with the uppercased strings in docs rather than the correct ""BTC/kB"" and ""sat/B""",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313929142,313929142,src/util/fees.cpp
luke-jr,2019-08-14T15:10:50Z,This error seems to be lost?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313929346,313929346,src/wallet/rpcwallet.cpp
kallewoof,2019-08-14T15:20:58Z,Everything is uppercase right now. I'm honestly not sure if changing that is the right approach.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313934800,313934800,src/util/fees.cpp
kallewoof,2019-08-14T15:26:14Z,Good catch; re-added into the feeRate block above.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313937733,313937733,src/wallet/rpcwallet.cpp
luke-jr,2019-08-14T15:32:27Z,It might be better to replace this with `!conf_target.IsNull()`,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313940996,313940996,src/wallet/rpcwallet.cpp
luke-jr,2019-08-14T15:33:15Z,There's a type check above that needs to be updated for the alias. (Prefer the alias being a separate commit.),https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313941403,313941403,src/wallet/rpcwallet.cpp
kallewoof,2019-08-14T15:49:10Z,Split alias part into separate commit and added type check.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r313949676,313949676,src/wallet/rpcwallet.cpp
Sjors,2019-08-15T15:45:07Z,"Maybe use `<std::vector<std::pair<std::string, FeeEstimateMode>>` so you can control the display order?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314373162,314373162,src/util/fees.cpp
Sjors,2019-08-15T16:04:27Z,This seems unnecessary (or you need another test case). You can drop `may_set_rbf` and use `if(cc.m_signal_bip125_rbf) {*cc.m_signal_bip125_rbf = true}`. See 4594923046585453beef83e833e6a422a78b66b2 ,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314382624,314382624,src/wallet/rpcwallet.cpp
kallewoof,2019-08-16T02:34:29Z,"Shouldn't that be `if (!cc.m_signal_bip125_rbf)`? I thought optionals returned `0` when unset, and we only wanna set it if it's not been set already, right?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314565380,314565380,src/wallet/rpcwallet.cpp
kallewoof,2019-08-16T02:39:59Z,"Wading through the slugfest that is boost, it seems that the most correct way to determine if an optional is uninitialized is to do `== boost::none`. I.e.\n```C++\nif (cc.m_signal_bip125_rbf == boost::none) { ... }\n```\n",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314566152,314566152,src/wallet/rpcwallet.cpp
Sjors,2019-08-16T08:30:05Z,+1 for using `boost::none`,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314628536,314628536,src/wallet/rpcwallet.cpp
luke-jr,2019-08-16T12:00:54Z,"... but std::map is ordered, isn't it? That's why C++ added std::unordered_map?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314691043,314691043,src/util/fees.cpp
kallewoof,2019-08-16T12:05:35Z,"@luke-jr I believe it std::set orders, which for std::string I think means they become ordered alphabetically.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314692246,314692246,src/util/fees.cpp
luke-jr,2019-08-16T12:27:27Z,"If we really care about the order, std::map lets you specify that.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314698885,314698885,src/util/fees.cpp
kallewoof,2019-08-16T12:50:41Z,@luke-jr We want them in the order they are added. It looks like `std::map` is not trivial to do this?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r314706254,314706254,src/util/fees.cpp
luke-jr,2019-08-19T13:46:33Z,"The `"" (case insensitive)""` addition is part of the wrong commit.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r315219045,315219045,src/wallet/rpcwallet.cpp
luke-jr,2019-08-19T13:48:54Z,"Commit message calls this `FeeMode` - probably should be `FeeModes`, so fix commit message",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r315220305,315220305,src/util/fees.cpp
kallewoof,2019-08-20T06:04:36Z,Moved to 'make case insensitive' commit.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r315517988,315517988,src/wallet/rpcwallet.cpp
MarcoFalke,2019-08-21T12:01:01Z,Why is this adding a new key without documentation and whose value is silently ignored if `confTarget` is given? Doesn't make any sense to me and seems completely unrelated to this pull request anyway.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316145323,316145323,src/wallet/rpcwallet.cpp
MarcoFalke,2019-08-21T12:02:23Z,"Should be ""updated or changed RPC"", as low level changes are meant for things that are irrelevant to users",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316145816,316145816,doc/release-notes-11413.md
MarcoFalke,2019-08-21T12:05:00Z,You don't need to pass in any whitespace here. Whitespace is done by RPCHelpMan,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316146762,316146762,src/wallet/rpcwallet.cpp
MarcoFalke,2019-08-21T12:06:00Z,could squash this commit (eda34393d51c59ace68e08df2d6e00870fe5d797)?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316147157,316147157,src/util/fees.cpp
MarcoFalke,2019-08-21T12:10:23Z,"style-nit: pwallet can be a reference, since it is non-nullable?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316148841,316148841,src/wallet/rpcwallet.cpp
Sjors,2019-08-21T12:32:21Z,"Looks like this could be avoided entirely, though it's nice to get rid of the last remaining intsance of `confTarget`. But at least there should be a throw if both are set. You could also rename the documented options to `conf_target`, but keep `confTarget` as an undocumented alias for backwards compatibility. That should be in the release note though.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316157703,316157703,src/wallet/rpcwallet.cpp
kallewoof,2019-08-21T14:00:53Z,Documentation updated/release notes added. Also throws if both are given.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316201638,316201638,src/wallet/rpcwallet.cpp
kallewoof,2019-08-21T14:02:01Z,"Switched to ""Updated or changed RPC"".",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316202266,316202266,doc/release-notes-11413.md
kallewoof,2019-08-21T14:19:56Z,Point. Fixed.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316212185,316212185,src/wallet/rpcwallet.cpp
kallewoof,2019-08-21T14:23:52Z,Squashed.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316214496,316214496,src/util/fees.cpp
kallewoof,2019-08-21T14:26:03Z,"You mean `const CWallet& wallet` instead? I don't see that used very often anywhere, and it seems this thing is usually a `std::shared_ptr`.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316215749,316215749,src/wallet/rpcwallet.cpp
MarcoFalke,2019-08-21T14:37:07Z,"Sorry to keep nit-picking this, but you set a delimiter every time this function is called. But then you set a default value in the header, as well as in the cpp file. At the very least the default should be removed from the cpp file. I'd argue to remove it in all places.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316222032,316222032,src/util/fees.cpp
MarcoFalke,2019-08-21T14:39:17Z,"Heh, I'll just link to #15922 ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316223188,316223188,src/wallet/rpcwallet.cpp
kallewoof,2019-08-22T03:14:58Z,"A default `"", ""` seemed like a sensible thing, but you're right that I don't use the default anywhere.\n\nAlso, huh. I thought re-declaring the defaults in the .cpp file would result in a compiler error. Regardless, removed both.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r316481731,316481731,src/util/fees.cpp
promag,2019-08-27T14:46:56Z,"1c0d97daa09f2fc792b8675ea535ba03c8a7b86f\n\nThere was no test for this 😞 And the new errors don't have tests either. Care to add?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318124453,318124453,src/wallet/rpcwallet.cpp
promag,2019-08-27T14:53:27Z,"874b40cea1644812a416a517c3a4a3ab1db89144\n\nWhat's the motivation to support case insensitive?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318128255,318128255,src/wallet/rpcwallet.cpp
promag,2019-08-27T15:02:24Z,"457396a4091bb3c27b1e982fb7e08442120b15df\n\nWhy?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318133484,318133484,src/util/fees.cpp
promag,2019-08-27T15:05:17Z,"457396a4091bb3c27b1e982fb7e08442120b15df\n\nWhy have this as a function? Could be a static variable in this translation unit, like\n```cpp\nstatic const std::vector<std::pair<std::string, FeeEstimateMode>> FEE_MODES{\n    {""UNSET"", FeeEstimateMode::UNSET},\n    {""ECONOMICAL"", FeeEstimateMode::ECONOMICAL},\n    {""CONSERVATIVE"", FeeEstimateMode::CONSERVATIVE},\n    {(CURRENCY_UNIT + ""/KB""), ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318134990,318134990,src/util/fees.cpp
promag,2019-08-27T15:07:37Z,"457396a4091bb3c27b1e982fb7e08442120b15df\n\nIs it really necessary to `#include <sstream>` just to concat a couple of strings? Could just do\n```cpp\nfor (i : ...) {\n    if (!res.empty()) res += delimiter;\n    res += i.first\n}\n```",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318136219,318136219,src/util/fees.cpp
promag,2019-08-27T15:09:24Z,"457396a4091bb3c27b1e982fb7e08442120b15df\n\nThis is a utility function for the RPC help, I'd move to `rpcwallet.cpp` and make it static there.\n\nBTW, according to dev notes\n\n> Braces on new lines for classes, functions, methods.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318137165,318137165,src/util/fees.cpp
promag,2019-08-27T15:35:59Z,"Regarding https://github.com/bitcoin/bitcoin/pull/11413/files#r313929142\n\nThen I'd do `ToUpper(pair.first) == searchkey)` and display the right casing.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318151902,318151902,src/util/fees.cpp
kallewoof,2019-08-28T03:42:23Z,Added tests for invalid parameters.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318380768,318380768,src/wallet/rpcwallet.cpp
kallewoof,2019-08-28T03:44:50Z,"Windows build breaks if I do this, unfortunately.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318381135,318381135,src/util/fees.cpp
kallewoof,2019-08-28T03:47:32Z,"I don't really see the harm in including it (it won't make the binary bigger or anything) but it's such a trivial set of operations that I doubt it'll matter in the long run.\n\nI.e. removing the include and just stacking onto an `std::string`.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318381593,318381593,src/util/fees.cpp
kallewoof,2019-08-28T04:04:22Z,Fixed style.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318384107,318384107,src/util/fees.cpp
kallewoof,2019-08-28T06:26:41Z,Done.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318410118,318410118,src/util/fees.cpp
kallewoof,2019-08-28T06:30:33Z,Code has been updated to show correct capitalization.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318411139,318411139,src/util/fees.cpp
kallewoof,2019-08-28T06:30:59Z,You mean why not just do `: FeeModeMap()` directly? Good point.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318411255,318411255,src/util/fees.cpp
kallewoof,2019-08-28T06:40:43Z,"Now that `ToUpper` is no longer used, this may actually work in Windows; tentatively removing the function wrapper.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318413952,318413952,src/util/fees.cpp
kallewoof,2019-08-28T06:43:39Z,"Forgot to respond to the first point; I could move `FeeModes`, but it would mean having to make `fee_modes` available to the public, which doesn't seem worth it.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318414757,318414757,src/util/fees.cpp
promag,2019-08-28T09:54:11Z,Should be `FEE_MODES`.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318492742,318492742,src/util/fees.cpp
promag,2019-08-28T11:55:28Z,"nit, space after `:` here and below.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318537997,318537997,test/functional/wallet_bumpfee.py
promag,2019-08-28T11:55:35Z,fix case.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318538041,318538041,doc/release-notes-11413.md
promag,2019-08-28T11:56:57Z,Should mention that `confTarget` is still supported but clients should transition to `conf_target`.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318538561,318538561,doc/release-notes-11413.md
promag,2019-08-28T11:58:53Z,s/i/pair like below?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318539280,318539280,src/util/fees.cpp
kallewoof,2019-08-28T13:06:13Z,"I don't really see the point. Literally nobody will be affected by this (i.e. they will either see the release notes and switch, or not see them and not notice the change).",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r318568294,318568294,doc/release-notes-11413.md
promag,2019-08-29T11:55:56Z,`else if (! estimate_param.isNull()) {`?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r319028007,319028007,src/wallet/rpcwallet.cpp
kallewoof,2019-08-29T14:21:04Z,Done,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r319097987,319097987,src/wallet/rpcwallet.cpp
instagibbs,2019-08-30T18:45:31Z,Add a test for negative/too low feerates?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r319635187,319635187,test/functional/wallet_basic.py
kallewoof,2019-09-02T04:35:04Z,Done,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r319803996,319803996,test/functional/wallet_basic.py
luke-jr,2019-10-17T16:45:14Z,This shouldn't be hard-coded,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r336113339,336113339,src/wallet/rpcwallet.cpp
kallewoof,2019-10-18T07:07:20Z,Turned into constant. Also did same for the conversion a few lines above.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r336346071,336346071,src/wallet/rpcwallet.cpp
luke-jr,2019-10-21T16:45:51Z,Please use the `COIN` const for this...,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r337124051,337124051,src/wallet/rpcwallet.cpp
luke-jr,2019-10-21T16:46:43Z,"This is wrong. Relay min feerate is already defined elsewhere, and user-configurable.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r337124468,337124468,src/wallet/rpcwallet.cpp
kallewoof,2019-10-24T03:25:40Z,Changed to `COIN / 1000`.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338367067,338367067,src/wallet/rpcwallet.cpp
kallewoof,2019-10-24T03:30:14Z,Using `DEFAULT_MIN_RELAY_TX_FEE` instead.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338367910,338367910,src/wallet/rpcwallet.cpp
kallewoof,2019-10-24T03:32:54Z,"Actually, I would have to include `validation.h` to access that, and I can't access it via `extern` because it's `static`. I'm just doing `1000 /* DEFAULT_MIN_RELAY_TX_FEE */` for now.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338368394,338368394,src/wallet/rpcwallet.cpp
luke-jr,2019-10-24T03:43:18Z,Using the default would be wrong too. It should use the configured policy or current mempool limit...,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338370088,338370088,src/wallet/rpcwallet.cpp
kallewoof,2019-10-24T03:57:01Z,"I don't see a problem with someone making a tx that is not relayable at this point in time (but relayable when tx traffic drops). In fact, I'm not even sure this check is necessary in the first place.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338372302,338372302,src/wallet/rpcwallet.cpp
luke-jr,2019-10-24T12:09:49Z,"In that case, it should be the *configured* relay minimum policy (or no check at all).",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338535706,338535706,src/wallet/rpcwallet.cpp
kallewoof,2019-10-25T02:30:27Z,I'm honestly leaning towards removing this check. Thanks for the nudge.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r338863443,338863443,src/wallet/rpcwallet.cpp
luke-jr,2020-01-16T04:33:19Z,"The `sync_all` needs to be moved after `generate`, or `prebalance` could end up with a stale balance and cause the check below (line 426) to fail.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r367226589,367226589,test/functional/wallet_basic.py
kallewoof,2020-01-16T04:44:19Z,Moved.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r367228533,367228533,test/functional/wallet_basic.py
instagibbs,2020-02-26T15:20:47Z,convert tests for coverage?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r384561658,384561658,src/wallet/rpcwallet.cpp
instagibbs,2020-02-26T15:30:02Z,`s/confirmation target/fee rate/` ?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r384568589,384568589,src/wallet/rpcwallet.cpp
instagibbs,2020-02-26T15:30:34Z,A bit of documentation would go a long way for function declaration.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r384568945,384568945,src/wallet/rpcwallet.cpp
instagibbs,2020-02-26T15:39:02Z,Note that this will also trigger bip125 opt-in.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r384574778,384574778,doc/release-notes-11413.md
kallewoof,2020-03-02T04:43:11Z,I thought I did -- which one did I miss?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r386195235,386195235,src/wallet/rpcwallet.cpp
kallewoof,2020-03-02T04:45:15Z,Right! Thanks.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r386195560,386195560,src/wallet/rpcwallet.cpp
kallewoof,2020-03-02T08:35:59Z,Added note.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r386253800,386253800,doc/release-notes-11413.md
kallewoof,2020-03-02T08:36:30Z,Added documentation!,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r386254034,386254034,src/wallet/rpcwallet.cpp
instagibbs,2020-03-02T14:52:32Z,For that commit I didn't see any changes... I'll look again,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r386438570,386438570,src/wallet/rpcwallet.cpp
Sjors,2020-03-03T17:24:54Z,"""needed"" is rather vague. I assume this is based on the mempool relay fee? So maybe: `Fee rate is too low for the current mempool. Increase it to %f sat/b or modify -maxmempool`",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387176227,387176227,src/wallet/wallet.cpp
kallewoof,2020-03-04T02:11:23Z,"That's a bit weird, though, for the case when the relay fee is at the minimum. We can't really ask people to change `minrelaytxfee` either, as that would mean their node ends up with non-relayable (to most other nodes) transactions. I don't really see a better alternative though, so I'm going with your version with some tweaks:\n\nI built on this a tiny bit, adding a new optional `FeeEstimateMod",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387411408,387411408,src/wallet/wallet.cpp
Sjors,2020-03-04T09:19:31Z,"There have been occasional rumblings of allowing a lower relay fee than 1 sat/byte, so it's nice to future proof. It's not an ideal message, but definitely better than silently changing the input.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387537262,387537262,src/wallet/wallet.cpp
kallewoof,2020-03-04T09:23:40Z,This should cover for the <1sat/b case as well. All the way down to 0.001 sat/b.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387539594,387539594,src/wallet/wallet.cpp
kallewoof,2020-03-04T09:52:20Z,I updated https://github.com/bitcoin/bitcoin/pull/11413#issuecomment-593770736 a bit to clarify that 1 sat/b is not a hardcoded thing.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387555984,387555984,src/wallet/wallet.cpp
Sjors,2020-03-04T10:10:49Z,"IIUC coin selection uses `nFeeRateNeeded` here:\n```cpp\ncoin_selection_params.effective_fee = nFeeRateNeeded;\n```\n\nThis doesn't make sense for transaction with a future nLockTime, and with PSBTs it's debatable, since we don't know when the user intends to broadcast. For `sendmany` and `sendtoaddress` the current behavior is fine, because those RPCs don't support nLockTime and PSBT.\n\nF",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387566399,387566399,src/wallet/wallet.cpp
kallewoof,2020-03-04T10:19:18Z,"So basically, you'd prefer if I could force a transaction using a fee rate that is currently not actually accepted by the mempool? I initially did that, but the result is that the tx goes into the mempool but is rejected by the node's peers, so it is never mined (unless the node itself generates a block). That seems awfully confusing.\n\nPerhaps there should be an exception for the locktime>now ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387571118,387571118,src/wallet/wallet.cpp
Sjors,2020-03-04T10:22:06Z,"I think the current error is fine when the user intends to broadcast immediately. Only when that's not clearly the case, e.g. for the PSBT methods, we should still allow transaction creation. ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387572738,387572738,src/wallet/wallet.cpp
Sjors,2020-03-04T10:24:43Z,"`fOverrideFeeRate` could do the trick, but it's pretty ugly: it basically ""sabotages"" `GetMinimumFeeRate`. It seems more readable to skip `GetMinimumFeeRate` altogether when you want to ignore it. ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387574359,387574359,src/wallet/wallet.cpp
luke-jr,2020-03-04T23:22:13Z,Satoshis per bit?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r387993663,387993663,src/policy/feerate.cpp
kallewoof,2020-03-05T01:35:43Z,"Good catch, fixed!",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388033365,388033365,src/policy/feerate.cpp
instagibbs,2020-03-05T14:19:07Z,is this valuable by itself?,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388321260,388321260,src/wallet/wallet.cpp
instagibbs,2020-03-05T14:19:54Z,same question: this seems good irrespective of this PR,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388321759,388321759,src/wallet/wallet.cpp
instagibbs,2020-03-05T16:44:17Z,"Actually I find this `-maxmempool` advice pretty dangerous for users. It's going to simply result in stuck transactions, no?",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388419853,388419853,src/wallet/wallet.cpp
kallewoof,2020-03-06T03:17:52Z,"Probably. I had a garbage value being returned and it ended up telling me ""you need at least 4587368374.13587638 bitcoin in fees!"" here:\n\nhttps://github.com/bitcoin/bitcoin/blob/3f826598a42dcc707b58224e94c394e30a42ceee/src/wallet/rpcwallet.cpp#L353-L357",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388694438,388694438,src/wallet/wallet.cpp
kallewoof,2020-03-06T03:18:35Z,"Yeah, it could be its own PR. Maybe I should split these out..",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388694589,388694589,src/wallet/wallet.cpp
kallewoof,2020-03-06T03:22:06Z,"I think it might get stuck for the user themselves, but unless their peers also increase their mempool sizes, it won't propagate very far. But I'm now a bit hesitant to suggest using it as it'll probably not do what people expect. (As you say, it will get stuck in the sense that it won't get mined or propagate properly..)",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388695270,388695270,src/wallet/wallet.cpp
kallewoof,2020-03-06T05:06:09Z,PR-ified as #18274.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388714991,388714991,src/wallet/wallet.cpp
kallewoof,2020-03-06T05:13:09Z,PR-ified in #18275.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r388716402,388716402,src/wallet/wallet.cpp
Sjors,2020-03-06T17:26:24Z,That's something we can point out in `-maxmempool` documentation. Once #18038 lands the mempool will at least hold on to the transaction if you unload a wallet.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r389039036,389039036,src/wallet/wallet.cpp
sipa,2020-03-13T02:58:33Z,Nit: BIP is usually capitalized.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r392005970,392005970,doc/release-notes-11413.md
sipa,2020-03-13T03:01:17Z,Agree that we shouldn't mention -maxmempool here; it indeed likely will not do what users expect it to do.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r392007501,392007501,src/wallet/wallet.cpp
kallewoof,2020-03-13T04:19:44Z,"Changed to ""Fee rate is too low for the current mempool. Increase it to %s or wait.""",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r392023532,392023532,src/wallet/wallet.cpp
luke-jr,2020-05-09T02:19:52Z,"I believe this was a mis-rebase. This test goes back to 2016, and is above the added tests (prior to the rebase, it was here, below the added tests)",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r422442337,422442337,test/functional/wallet_basic.py
kallewoof,2020-05-09T04:47:32Z,"Yes, that is correct! Good catch. Fixed.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r422452703,422452703,test/functional/wallet_basic.py
luke-jr,2020-06-14T07:15:38Z,"We can't use `CURRENCY_*` here in global scope, since the initialisation order is  undefined. A simple static function wrapper should work.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r439799655,439799655,src/util/fees.cpp
kallewoof,2020-06-16T06:01:18Z,Odd that no compiler warning or anything was emitted about it. I've updated the code to wrap the map.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r440603958,440603958,src/util/fees.cpp
Sjors,2020-06-16T09:58:56Z,"For future reference, the original: 3bad9a438769c6749063ab5ab405a62f6efea8cc",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r440732543,440732543,src/util/fees.cpp
jonatack,2020-06-20T10:00:56Z,0ebb85b perhaps use `Join()` in util/string.h,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443118616,443118616,src/util/fees.cpp
jonatack,2020-06-21T08:34:06Z,"0ebb85b8c39668f314d7cc8a2108ec6012bdd3d1 perhaps add `""\""\n\""""` as a default value for `delimiter`",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443196045,443196045,src/util/fees.cpp
jonatack,2020-06-21T08:59:30Z,"69823cc nit (feel free to ignore) if you retouch, can avoid a `getbalance` call here and also lines 270-271 below\n```diff\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        balance = self.no",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443198273,443198273,test/functional/wallet_basic.py
jonatack,2020-06-21T09:26:38Z,69823cc can omit lines 118-127 as the `totalFee` argument is now removed,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443200439,443200439,test/functional/wallet_bumpfee.py
jonatack,2020-06-21T09:34:13Z,5ee0e46 nit: s/estimate_mode/`estimate_mode`/,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443201011,443201011,doc/release-notes-11413.md
jonatack,2020-06-21T09:35:19Z,"5ee0e46 nit: missing comma after ""methods""",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443201112,443201112,doc/release-notes-11413.md
jonatack,2020-06-21T09:43:51Z,"0fb63f0 these two lines should be placed before the `HelpExampleRpc` in line 423, as currently the help prints:\n\n```\nExamples:\n> bitcoin-cli sendtoaddress ""bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl"" 0.1\n> bitcoin-cli sendtoaddress ""bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl"" 0.1 ""donation"" ""seans outpost""\n> bitcoin-cli sendtoaddress ""bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl"" 0.1 """" ",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r443201777,443201777,src/wallet/rpcwallet.cpp
kallewoof,2020-06-24T06:55:03Z,"Seems like an odd default, tbh, even though it would reduce code elsewhere.",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r444682587,444682587,src/util/fees.cpp
kallewoof,2020-06-24T06:57:31Z,Done.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r444683639,444683639,test/functional/wallet_basic.py
kallewoof,2020-06-24T06:58:30Z,"Thanks, done!",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r444684063,444684063,test/functional/wallet_bumpfee.py
kallewoof,2020-06-24T06:59:37Z,I think it's okay as it is. The methods `a` and `b` were added.,https://github.com/bitcoin/bitcoin/pull/11413#discussion_r444684517,444684517,doc/release-notes-11413.md
kallewoof,2020-06-24T07:01:48Z,"Good catch, fixed",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r444685431,444685431,src/wallet/rpcwallet.cpp
fjahr,2020-06-25T14:06:34Z,"nit: Adding a comment here or below somewhere that this is acting as an alias to `confTarget` would be helpful as well. I have not seen this pattern before and I am pretty sure it would confuse me. maybe in the line above:\n```\n{""confTarget"", UniValueType(UniValue::VNUM)}, // deprecated alias for conf_target\n```",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r445585159,445585159,src/wallet/rpcwallet.cpp
fjahr,2020-06-25T15:13:38Z,"same below.\n```suggestion\n    assert_raises_rpc_error(-8, ""conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate."", rbf_node.bumpfee, rbfid, {""fee_rate"": NORMAL, ""conf_target"": 1})\n```",https://github.com/bitcoin/bitcoin/pull/11413#discussion_r445634935,445634935,test/functional/wallet_bumpfee.py
