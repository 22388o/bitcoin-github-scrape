[
  {
    "sha": "69158b41fc488e4f220559da17a475eff5923a95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTE1OGI0MWZjNDg4ZTRmMjIwNTU5ZGExN2E0NzVlZmY1OTIzYTk1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-07T02:32:51Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-20T06:35:13Z"
      },
      "message": "added CURRENCY_ATOM to express minimum indivisible unit\n\nalso moved CURRENCY_* into feerate.h file to work around MSVC bug",
      "tree": {
        "sha": "105f4c6ba6755fb5095e66da7c06410eaa6be9b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/105f4c6ba6755fb5095e66da7c06410eaa6be9b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69158b41fc488e4f220559da17a475eff5923a95",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7triEACgkQV692LbM1\nMyJS4g/8ClQcTX2+ZnheIPDwPTUuyB/wGJ2/KyY2zucVkdXnDXY79YSjnLgXs81N\n3IiibWvWeBHLCfdZVNu1SW3cEcvqatBVaWdEYGLsUiKxRch4o7iFCLhVg3cEtvuk\n8If5zKMnk0CJfH8JVByc4TNi/S/jXwynqG/PVHL4l6/oDcclRQko41Br0/0weW5T\nv5Lqp6ml2q47CYad8324wu3wxRFkF8ojP8R6jwkKLcElPjUJtYLqEcZmEqY2GKcL\nCIVVpMevnx5+jn2hp2iQk7l88y2YZhgofXC23ieVB1s1VnEF3ymMaNC0roFNZbzY\nxp5vD04GR1eBlisQKr5jptrRahPd6e9sU0y+six5OnUEJ+YmUiWo6r1Fk8x2OfR1\naYeYHJEmlGuqzKt2h51INovEku/0GGYEgAvXU0gGEcdmYugKFiF508hAboSgmhWf\n9mkmQ+p1XdD4Dc9tDHSNQsVPop1Pdg85C+WLgSQ40hTy0h31o82xnChpLsTdQuzG\nU92CrVONG6mpUM4O7VKg1w9o2dZfz37fHkdx3nniNrpMn2O/1Jdzl2gPAMf/fvxP\nGekQn+EVJsIqo7B5XFZeks4Z4v1IjhKpm5Tsg9WzoBnoUCJ4bqP1U8GGdKXQkz5J\nx64Zh2US0I+SJJFRzgCbLjT33gLVF75en8PdKIRdw2P6Erbolg0=\n=XZW0\n-----END PGP SIGNATURE-----",
        "payload": "tree 105f4c6ba6755fb5095e66da7c06410eaa6be9b5\nparent d4f9ae00252ba44909a61db0f606be6fddf904c1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1565145171 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592634913 +0900\n\nadded CURRENCY_ATOM to express minimum indivisible unit\n\nalso moved CURRENCY_* into feerate.h file to work around MSVC bug\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69158b41fc488e4f220559da17a475eff5923a95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69158b41fc488e4f220559da17a475eff5923a95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69158b41fc488e4f220559da17a475eff5923a95/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4f9ae00252ba44909a61db0f606be6fddf904c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4f9ae00252ba44909a61db0f606be6fddf904c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4f9ae00252ba44909a61db0f606be6fddf904c1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00c5c32eb3ee8156c762cd497d094d2285940fe1",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69158b41fc488e4f220559da17a475eff5923a95/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69158b41fc488e4f220559da17a475eff5923a95/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=69158b41fc488e4f220559da17a475eff5923a95",
        "patch": "@@ -7,8 +7,6 @@\n \n #include <tinyformat.h>\n \n-const std::string CURRENCY_UNIT = \"BTC\";\n-\n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n {\n     assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));"
      },
      {
        "sha": "4e0673cae62258e250bb83d7959e4f89575637b6",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69158b41fc488e4f220559da17a475eff5923a95/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69158b41fc488e4f220559da17a475eff5923a95/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=69158b41fc488e4f220559da17a475eff5923a95",
        "patch": "@@ -11,7 +11,8 @@\n \n #include <string>\n \n-extern const std::string CURRENCY_UNIT;\n+const std::string CURRENCY_UNIT = \"BTC\"; // One formatted unit\n+const std::string CURRENCY_ATOM = \"sat\"; // One indivisible minimum value unit\n \n /**\n  * Fee rate in satoshis per kilobyte: CAmount / kB"
      }
    ]
  },
  {
    "sha": "91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWY2ZDJiYzhmZjRkNGNkMWI4NmRhYTM3MGVjOWQyZDk2NjIzOTRk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-14T15:46:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-20T06:35:21Z"
      },
      "message": "rpc/wallet: add conf_target as alias to confTarget in bumpfee",
      "tree": {
        "sha": "20b1d78886c0b8b39c7577e11f2460f62331cd64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20b1d78886c0b8b39c7577e11f2460f62331cd64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7trikACgkQV692LbM1\nMyLvDw/6A0UyfxPKex/to4jPHaeYwfFnJb/rZYhJQk148C5wjhDdQu7gC52V9FQ3\nx3qJWGbWD2Mw+qG2Ool8q0lMrSpTzK09XmkyuPW1v5FmqLpwP9MEMq9Tg4PcoC98\n5+CNZvgZtGU8Y6KLGF7nKr5ZGV+I3cWyE315DEQ0uZhWx5JKBhBo/illL9xQ4pDQ\nHpRaC8r7oHysxt3gzIRrnD7JNNi6qBL/U/z5/XICwm7LdB39lhQLgUhKVJB7oC+k\nNeLHz5pd7xD6/wrO87oIDD/keuIJcnBHABOZBmEVwHOwte7ZY7/d49S/Z39u2laF\nP6sJTnUrumfl2kcx0wrkWMUjGs9/6k66ruelXvkT1CM7A83dwFK3Qe5zWpix9uv0\ndc8ufagtcpyWPO6qYhkdrdWow2MKGc/d/8EOMxy2NmX5AjGK1LJJDJC8Vcr5WLw+\n1Zqf56PGlx4pEORHWIL+tz1pZ38XD93+1U27dpo8pZJbZV+EGSmuGCu2i/dtgonG\nyRTC6dA+Gs+3ne39apfsfilnq4GG1bTvr4G59GK+Gm9+5oCCKGte9LDP6LznRyxv\ntNK/a2cl/vk+ccEaHLbo/L6U2m58SxeSMLbGNWKLmqYqCytVD/9CRbJtsvr9+CWF\nSj7aIWx7dxrZLA8rzbaJDYrnRgJEasD3YaDqhP4ygZ6m1rMtwQs=\n=IrJk\n-----END PGP SIGNATURE-----",
        "payload": "tree 20b1d78886c0b8b39c7577e11f2460f62331cd64\nparent 69158b41fc488e4f220559da17a475eff5923a95\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1565797573 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592634921 +0900\n\nrpc/wallet: add conf_target as alias to confTarget in bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69158b41fc488e4f220559da17a475eff5923a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69158b41fc488e4f220559da17a475eff5923a95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69158b41fc488e4f220559da17a475eff5923a95"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 15,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b2f8a2c4afbf105b3e55b79dd78d8d4c483cba14",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
        "patch": "@@ -3241,8 +3241,8 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'confTarget'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n             \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n                                      \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n@@ -3294,15 +3294,24 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"fee_rate\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n-        if (options.exists(\"confTarget\") && options.exists(\"fee_rate\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n-        } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n-            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"conf_target\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and conf_target options should not both be set. Use conf_target (confTarget is deprecated).\");\n+        }\n+\n+        auto conf_target = options.exists(\"confTarget\") ? options[\"confTarget\"] : options[\"conf_target\"];\n+\n+        if (!conf_target.isNull()) {\n+            if (options.exists(\"fee_rate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n+            }\n+            coin_control.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n             if (fee_rate <= CFeeRate(0)) {"
      }
    ]
  },
  {
    "sha": "5d1a411eb12fc700804ffe5d6e205234d30edd5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDFhNDExZWIxMmZjNzAwODA0ZmZlNWQ2ZTIwNTIzNGQzMGVkZDVm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-21T14:17:32Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-24T06:52:05Z"
      },
      "message": "fees: add FeeModes doc helper function",
      "tree": {
        "sha": "7c16b7f523a070b5eeea6be2e653ab20746e802e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c16b7f523a070b5eeea6be2e653ab20746e802e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d1a411eb12fc700804ffe5d6e205234d30edd5f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7y+BUACgkQV692LbM1\nMyIlOhAAisFL463N16swtXEkvxqmlQit9+wX+brr+JyPNqvjgr8OLoqKNPNPCnQ/\n2uBlHBgwgm+wttWx6yA+kZrrstirzU5J+BZ1LBnBCMWZSHeN1kBetgugciAefmU0\nzDr6BbsbA1j9zJlHMWAigmJxq4PEuBrHaHJNLpBVCBhdv0SvXy3cX8Tezw6Wgwm+\nBprxhrfCAPPD27F6F/bVobibNYIcD8wSwBCCtu7akirZsiL6QTS+CllA69bpjAzL\n8HKW1MvStHtkcL+FDC1lcTHBIW/lc+4XkiSMVwADuNQ93QZcOMq7bhlJ/bWi5WZQ\nPgvMiEIrsQN3Em9NXLxhPg0713fW/bO7gH9QfbO2Ge8hCaVt/2UPdhv0dx6qzZre\nmP7yZN4fY9iyqkkhLx3D/3S28EBK3xDFNMZlfbH3wQ2rODOU8DYYcBXVULW0irpL\nsnxjNFUydbEyRgtegznbqsJlCiE0kEHRxUk0jujcDj4QR3zDnFWD17DwPYdiezsw\nDC+WGjPhIn+1Le6IxL6E9cUMCbyt2vrZDhxS8e3N4KZmnb2EJPLuQmuwZ7UJ6lbM\n15y1Qh5HnuY5eRNCxTEAa+Ds1BuzRmhMk/i269TMig99NThB4X86Wp45LJyW3gOA\nh1gFIz/jk1NsPiQFtQfnubeCeJuSeUH4pJF5QjBHdoo0zTp2cas=\n=qVCl\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c16b7f523a070b5eeea6be2e653ab20746e802e\nparent 91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1566397052 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592981525 +0900\n\nfees: add FeeModes doc helper function\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d1a411eb12fc700804ffe5d6e205234d30edd5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d1a411eb12fc700804ffe5d6e205234d30edd5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d1a411eb12fc700804ffe5d6e205234d30edd5f/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f6d2bc8ff4d4cd1b86daa370ec9d2d9662394d"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 39,
      "deletions": 30
    },
    "files": [
      {
        "sha": "9a1cea1d4e42b468fca2792e3d2829bccb166c4c",
        "filename": "src/util/fees.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 10,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d1a411eb12fc700804ffe5d6e205234d30edd5f/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d1a411eb12fc700804ffe5d6e205234d30edd5f/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=5d1a411eb12fc700804ffe5d6e205234d30edd5f",
        "patch": "@@ -6,11 +6,16 @@\n #include <util/fees.h>\n \n #include <policy/fees.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n \n #include <map>\n #include <string>\n+#include <vector>\n+#include <utility>\n \n-std::string StringForFeeReason(FeeReason reason) {\n+std::string StringForFeeReason(FeeReason reason)\n+{\n     static const std::map<FeeReason, std::string> fee_reason_strings = {\n         {FeeReason::NONE, \"None\"},\n         {FeeReason::HALF_ESTIMATE, \"Half Target 60% Threshold\"},\n@@ -29,16 +34,29 @@ std::string StringForFeeReason(FeeReason reason) {\n     return reason_string->second;\n }\n \n-bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {\n-    static const std::map<std::string, FeeEstimateMode> fee_modes = {\n-        {\"UNSET\", FeeEstimateMode::UNSET},\n-        {\"ECONOMICAL\", FeeEstimateMode::ECONOMICAL},\n-        {\"CONSERVATIVE\", FeeEstimateMode::CONSERVATIVE},\n+const std::vector<std::pair<std::string, FeeEstimateMode>>& FeeModeMap()\n+{\n+    static const std::vector<std::pair<std::string, FeeEstimateMode>> FEE_MODES = {\n+        {\"unset\", FeeEstimateMode::UNSET},\n+        {\"economical\", FeeEstimateMode::ECONOMICAL},\n+        {\"conservative\", FeeEstimateMode::CONSERVATIVE},\n     };\n-    auto mode = fee_modes.find(mode_string);\n+    return FEE_MODES;\n+}\n \n-    if (mode == fee_modes.end()) return false;\n+std::string FeeModes(const std::string& delimiter)\n+{\n+    return Join(FeeModeMap(), delimiter, [&](const std::pair<std::string, FeeEstimateMode>& i) { return i.first; });\n+}\n \n-    fee_estimate_mode = mode->second;\n-    return true;\n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode)\n+{\n+    auto searchkey = ToUpper(mode_string);\n+    for (const auto& pair : FeeModeMap()) {\n+        if (ToUpper(pair.first) == searchkey) {\n+            fee_estimate_mode = pair.second;\n+            return true;\n+        }\n+    }\n+    return false;\n }"
      },
      {
        "sha": "d52046a44c2fb071446adac98c0114cca2ba57c5",
        "filename": "src/util/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d1a411eb12fc700804ffe5d6e205234d30edd5f/src/util/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d1a411eb12fc700804ffe5d6e205234d30edd5f/src/util/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.h?ref=5d1a411eb12fc700804ffe5d6e205234d30edd5f",
        "patch": "@@ -12,5 +12,6 @@ enum class FeeReason;\n \n bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n std::string StringForFeeReason(FeeReason reason);\n+std::string FeeModes(const std::string& delimiter);\n \n #endif // BITCOIN_UTIL_FEES_H"
      },
      {
        "sha": "3fba82fdd360e242b574ecb85bcaff84944a3def",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 20,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d1a411eb12fc700804ffe5d6e205234d30edd5f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d1a411eb12fc700804ffe5d6e205234d30edd5f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5d1a411eb12fc700804ffe5d6e205234d30edd5f",
        "patch": "@@ -370,10 +370,8 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n-            \"       \\\"UNSET\\\"\\n\"\n-            \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n             \"                             dirty if they have previously been used in a transaction.\"},\n                 },\n@@ -781,10 +779,8 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n-            \"       \\\"UNSET\\\"\\n\"\n-            \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                 },\n                  RPCResult{\n                      RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n@@ -3073,10 +3069,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n                             {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n-                            \"         \\\"UNSET\\\"\\n\"\n-                            \"         \\\"ECONOMICAL\\\"\\n\"\n-                            \"         \\\"CONSERVATIVE\\\"\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n                         \"options\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n@@ -3252,10 +3246,8 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n-            \"         \\\"UNSET\\\"\\n\"\n-            \"         \\\"ECONOMICAL\\\"\\n\"\n-            \"         \\\"CONSERVATIVE\\\"\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n                         \"options\"},\n                 },\n@@ -4036,10 +4028,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n                             {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fall back to wallet's confirmation target (txconfirmtarget)\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n-                            \"         \\\"UNSET\\\"\\n\"\n-                            \"         \\\"ECONOMICAL\\\"\\n\"\n-                            \"         \\\"CONSERVATIVE\\\"\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n                         \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include BIP 32 derivation paths for public keys if we know them\"},"
      }
    ]
  },
  {
    "sha": "b188d80c2de9ebb114da5ceea78baa46bde7dff6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTg4ZDgwYzJkZTllYmIxMTRkYTVjZWVhNzhiYWE0NmJkZTdkZmY2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-04T02:26:06Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-24T06:52:06Z"
      },
      "message": "MOVEONLY: Make FeeEstimateMode available to CFeeRate\n\nCan verify move-only with:\n\n    git log -p -n1 --color-moved\n\nThis commit is move-only and doesn't change code or affect behavior.",
      "tree": {
        "sha": "a6b1d96f47bb1f72d0485fbd52ea0dc9de13f3a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6b1d96f47bb1f72d0485fbd52ea0dc9de13f3a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b188d80c2de9ebb114da5ceea78baa46bde7dff6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7y+BYACgkQV692LbM1\nMyLboA//aWNF754zZ1JF+7yeW1sfFnAGEG0Lvj2bfIlzTAkI6UF0Rgm+IKGyJMJN\nTzYoLBmJjA1nqVP2Oj6a+XhNA0G5mMhk4GcJo3t7Y9T9m70I3bOu/YdCoy9baE0k\nY754Uu5yYyQD1aVIEF4R/Teylht9s1puEAXFdLF4tVNLf+uPf3WjH9mNam21PYif\nXv2R5UEoWqEVw85/YlIQ/AEKeh8LXm+Rb0jo0QOErK/1p9IdcxVzaaf+DhqrjxNB\nznbIXh05AYwhEUVTdiW6uUUsOygiIx4Mt6wUrjJ2q9+DkStGHpnbV8xc10B/inNX\nI2z4CL2vkRwqN1JqSkuopZjU1tr0Dcii6UzGITqcNC9JD0tJVnfHTz94V1h7nnF5\nsMTPCyMsaRbBS5b+f8Bvxqw6DrvTaUmPN61jRVUAdkmyIdr4I5qCbq5dYgySCtgb\n0nd1rTjBZCyee3RUYhAwIipgp2fZmwaSZdVpP7K5ZiVdj2GmKJmMW2z5AfsZwjb9\n8qK6Ji0WNVLKTMBjU56Jm12d8UIPszcI3PUlCYt4GJWKYBLWrIHZok+rOptMJqWL\nnmD34AOoc5E1HvCvoEwfCNHD5st2ARsnykUaYpP91cAJ42gsL6WHEZ8G1Kc57NAc\nopkFHMDiJabPz/KzZsZfy9fTeWBKXhLE8DGGRmFxin3dMc1tm/E=\n=VG70\n-----END PGP SIGNATURE-----",
        "payload": "tree a6b1d96f47bb1f72d0485fbd52ea0dc9de13f3a0\nparent 5d1a411eb12fc700804ffe5d6e205234d30edd5f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583288766 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592981526 +0900\n\nMOVEONLY: Make FeeEstimateMode available to CFeeRate\n\nCan verify move-only with:\n\n    git log -p -n1 --color-moved\n\nThis commit is move-only and doesn't change code or affect behavior.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b188d80c2de9ebb114da5ceea78baa46bde7dff6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b188d80c2de9ebb114da5ceea78baa46bde7dff6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b188d80c2de9ebb114da5ceea78baa46bde7dff6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d1a411eb12fc700804ffe5d6e205234d30edd5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d1a411eb12fc700804ffe5d6e205234d30edd5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d1a411eb12fc700804ffe5d6e205234d30edd5f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5eb2d84d4be9e8f885a6e63599db8dd55a3b3749",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b188d80c2de9ebb114da5ceea78baa46bde7dff6/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b188d80c2de9ebb114da5ceea78baa46bde7dff6/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=b188d80c2de9ebb114da5ceea78baa46bde7dff6",
        "patch": "@@ -14,6 +14,13 @@\n const std::string CURRENCY_UNIT = \"BTC\"; // One formatted unit\n const std::string CURRENCY_ATOM = \"sat\"; // One indivisible minimum value unit\n \n+/* Used to determine type of fee estimation requested */\n+enum class FeeEstimateMode {\n+    UNSET,        //!< Use default settings based on other criteria\n+    ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n+    CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n+};\n+\n /**\n  * Fee rate in satoshis per kilobyte: CAmount / kB\n  */"
      },
      {
        "sha": "e445c1590dbb7302e6eae576bb866dbe82263c11",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b188d80c2de9ebb114da5ceea78baa46bde7dff6/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b188d80c2de9ebb114da5ceea78baa46bde7dff6/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=b188d80c2de9ebb114da5ceea78baa46bde7dff6",
        "patch": "@@ -45,13 +45,6 @@ enum class FeeReason {\n     REQUIRED,\n };\n \n-/* Used to determine type of fee estimation requested */\n-enum class FeeEstimateMode {\n-    UNSET,        //!< Use default settings based on other criteria\n-    ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n-    CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n-};\n-\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {"
      }
    ]
  },
  {
    "sha": "6fcf4484302d13bd7739b617470d8c8e31974908",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmNmNDQ4NDMwMmQxM2JkNzczOWI2MTc0NzBkOGM4ZTMxOTc0OTA4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-04T02:26:42Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-24T07:01:37Z"
      },
      "message": "rpc/wallet: add two explicit modes to estimate_mode",
      "tree": {
        "sha": "81f4a32e4f76fe439133476ed31498aa05708cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81f4a32e4f76fe439133476ed31498aa05708cfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fcf4484302d13bd7739b617470d8c8e31974908",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7y+lEACgkQV692LbM1\nMyKMhw/+Ka2A1FjTWhfmL3bw+L/OhKiYM4ZqiiK6FjeFsWYLaoNvbSGEJyTulVLF\nW+8UF7hQrIqnmiErXcyWdmVq1y9YNzzKUrbKlgiU8hHxD3buekNS4LkQAvqwic/I\nuc/4ODt4T3r+HXofGXB1naxspHgEs+49ato4Phmd8qIPJMVL9ct+a2W9asXvn3l1\ndnGWVqDfEDA1gppYSzUH7vRxSBhkylQ1km0//+6MjKfETKpheF+hgPtRAkcgyHqp\nZBB007wDwmQP/2ROZRKTs3SxiBQfPJfetQCmAwWQ9OO7MD3LZmm6LLrdHFLpAQC2\nL4T/6xqGKNl1Gpa5EAa/NRlvFxy2xjbqsemFoxVm4t5wYIxLcu9p10FtZ4hq4zoU\nuATt60/UXYdb5Por2iaMGXIV8mWqgUHbiaeq4xlAoQn0HCQYqKP6m7hKJtnsrh1y\nb7/7X/6RNGxSFV2EOMu92u+SU6Wuc0YUVdQkhXWgVYfYKu+uB8y8U2eJWNx2dj9n\nJnVLMsLoOrlrKASNJ4HbmrqVfhwXQruQ/2tjycltf6kx/HZTcHin5xC4bGL5s0au\ntC/nctT1CffrjAjW/yjtuk+JFRgGkBZsbJu/6l+CAqFZTMoFL1xwIjDitYK1VcmO\nylfK1rx4Kfz8ErAdXuxBZmHpyZdv9ikeG9Ouwy2wbtfE7+2ByZM=\n=l95h\n-----END PGP SIGNATURE-----",
        "payload": "tree 81f4a32e4f76fe439133476ed31498aa05708cfa\nparent b188d80c2de9ebb114da5ceea78baa46bde7dff6\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583288802 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592982097 +0900\n\nrpc/wallet: add two explicit modes to estimate_mode\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fcf4484302d13bd7739b617470d8c8e31974908",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fcf4484302d13bd7739b617470d8c8e31974908",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fcf4484302d13bd7739b617470d8c8e31974908/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b188d80c2de9ebb114da5ceea78baa46bde7dff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b188d80c2de9ebb114da5ceea78baa46bde7dff6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b188d80c2de9ebb114da5ceea78baa46bde7dff6"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 58,
      "deletions": 41
    },
    "files": [
      {
        "sha": "f532ba7f88353ef4f1c0edc1e41acb2b06e4ad85",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fcf4484302d13bd7739b617470d8c8e31974908/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fcf4484302d13bd7739b617470d8c8e31974908/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=6fcf4484302d13bd7739b617470d8c8e31974908",
        "patch": "@@ -19,6 +19,8 @@ enum class FeeEstimateMode {\n     UNSET,        //!< Use default settings based on other criteria\n     ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n     CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n+    BTC_KB,       //!< Use explicit BTC/kB fee given in coin control\n+    SAT_B,        //!< Use explicit sat/B fee given in coin control\n };\n \n /**"
      },
      {
        "sha": "6208a20a97333ebdd7213646b8fbe6e4e6d60c21",
        "filename": "src/util/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fcf4484302d13bd7739b617470d8c8e31974908/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fcf4484302d13bd7739b617470d8c8e31974908/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=6fcf4484302d13bd7739b617470d8c8e31974908",
        "patch": "@@ -40,6 +40,8 @@ const std::vector<std::pair<std::string, FeeEstimateMode>>& FeeModeMap()\n         {\"unset\", FeeEstimateMode::UNSET},\n         {\"economical\", FeeEstimateMode::ECONOMICAL},\n         {\"conservative\", FeeEstimateMode::CONSERVATIVE},\n+        {(CURRENCY_UNIT + \"/kB\"), FeeEstimateMode::BTC_KB},\n+        {(CURRENCY_ATOM + \"/B\"), FeeEstimateMode::SAT_B},\n     };\n     return FEE_MODES;\n }"
      },
      {
        "sha": "479ad1b2a22cf7752883a4f2bb08288d3fc71ff0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 41,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fcf4484302d13bd7739b617470d8c8e31974908/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fcf4484302d13bd7739b617470d8c8e31974908/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6fcf4484302d13bd7739b617470d8c8e31974908",
        "patch": "@@ -45,6 +45,8 @@ using interfaces::FoundBlock;\n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n static const std::string HELP_REQUIRING_PASSPHRASE{\"\\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\\n\"};\n \n+static const uint32_t WALLET_BTC_KB_TO_SAT_B = COIN / 1000; // 1 sat / B = 0.00001 BTC / kB\n+\n static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValue& param) {\n     bool can_avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n@@ -191,6 +193,42 @@ static std::string LabelFromValue(const UniValue& value)\n     return label;\n }\n \n+/**\n+ * Update coin control with fee estimation based on the given parameters\n+ *\n+ * @param[in]     pwallet        Wallet pointer\n+ * @param[in,out] cc             Coin control which is to be updated\n+ * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n+ * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n+ * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ */\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+{\n+    if (!estimate_mode.isNull()) {\n+        if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n+    if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n+        if (estimate_param.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Selected estimate_mode requires a fee rate\");\n+        }\n+\n+        CAmount fee_rate = AmountFromValue(estimate_param);\n+        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n+            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n+        }\n+\n+        cc.m_feerate = CFeeRate(fee_rate);\n+\n+        // default RBF to true for explicit fee rate modes\n+        if (cc.m_signal_bip125_rbf == boost::none) cc.m_signal_bip125_rbf = true;\n+    } else if (!estimate_param.isNull()) {\n+        cc.m_confirm_target = ParseConfirmTarget(estimate_param, pwallet->chain().estimateMaxBlocks());\n+    }\n+}\n+\n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"getnewaddress\",\n@@ -369,7 +407,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n@@ -382,6 +420,8 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 0.00002 \" + (CURRENCY_UNIT + \"/kB\"))\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 2 \" + (CURRENCY_ATOM + \"/B\"))\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n                 },\n             }.Check(request);\n@@ -423,20 +463,12 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n-    }\n-\n-    if (!request.params[7].isNull()) {\n-        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n-        }\n-    }\n-\n     coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(pwallet, request.params[8]);\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n+    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+\n     EnsureWalletIsUnlocked(pwallet);\n \n     CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n@@ -778,7 +810,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                 },\n@@ -826,15 +858,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n-    }\n-\n-    if (!request.params[7].isNull()) {\n-        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n-        }\n-    }\n+    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n \n     std::set<CTxDestination> destinations;\n     std::vector<CRecipient> vecSend;\n@@ -2978,6 +3002,12 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n         if (options.exists(\"feeRate\"))\n         {\n+            if (options.exists(\"conf_target\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n+            }\n+            if (options.exists(\"estimate_mode\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n+            }\n             coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n@@ -2988,20 +3018,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        if (options.exists(\"conf_target\")) {\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n-            }\n-            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], pwallet->chain().estimateMaxBlocks());\n-        }\n-        if (options.exists(\"estimate_mode\")) {\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n-            }\n-            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n-            }\n-        }\n+        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"]);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3068,7 +3085,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n@@ -3315,11 +3332,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        if (options.exists(\"estimate_mode\")) {\n-            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n-            }\n-        }\n+        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target);\n     }\n \n     // Make sure the results are valid at least up to the most recent block"
      }
    ]
  },
  {
    "sha": "3404c1b753432c4859a4ca245f01c240610a00cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDA0YzFiNzUzNDMyYzQ4NTlhNGNhMjQ1ZjAxYzI0MDYxMGEwMGNi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-04T02:28:08Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-24T07:01:38Z"
      },
      "message": "policy: optional FeeEstimateMode param to CFeeRate::ToString",
      "tree": {
        "sha": "73e03650bd8590c2bba4e2c8c97680f6807192e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73e03650bd8590c2bba4e2c8c97680f6807192e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3404c1b753432c4859a4ca245f01c240610a00cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7y+lIACgkQV692LbM1\nMyKrTxAAmfoBuRs/vlXcMbiWV9SnT2B/GryhkdEyQ8kZkcyKIJ5JDZA6kQZ13a6a\nIny48WZSqyH1iLkDW4PGrIeu0obsoMqJfxHfsl2r1wFuO/XP29bCGczlx2wxo2dW\nWUeucx7V3XrOF/lz3MaN4TWmSsHSz39Jb/7ujp+CUXm4MgP67na7LYM0Y3BDmmXE\nZpeJrLfXBVNkepsqaWhsNe8QYvBLg1MYxOuD1zw+ilrA9RBESw1wVgR6secJodKt\nPW0/7OKt26L6Z/lU/zVppeFr1f2HlXWXzVzjFBwnWqthPdyPODRpmtv300c19bWw\nahOdVjmQZ8qF7bcGrabYcG/MSTcEtbZi3YH1ZOMzri0FDiGqgHXMf9DSEVCucYdQ\nqDKLjaogoLp801QnNF3uoL072rPLWB8nCFIBj+1HfUQUAVhizwxQl4Za/BXcsMtF\nycwBkkBX2hGyctjtt7YIo8yPBi8nkaEW//zuo9txdAQWXI0SdTk+NYxx/BkB+fH/\nWcqs/vblOzrMKibO+oAfqJHxMu/m3OajsC2zMKOgSsu8WIpuK6D+/hmXYyd0Xeul\nAZ9hehZsBLThrADvFxksGgw4jkSAtUBtvAASGWwrVNJCFDJFLrUNfFE5fwnoqA1F\nsrmk9++lhEYZwyAMc00NuTgZ29Vkm3c6VNXjLfjLClPDdjwFdk8=\n=sxxT\n-----END PGP SIGNATURE-----",
        "payload": "tree 73e03650bd8590c2bba4e2c8c97680f6807192e8\nparent 6fcf4484302d13bd7739b617470d8c8e31974908\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583288888 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592982098 +0900\n\npolicy: optional FeeEstimateMode param to CFeeRate::ToString\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3404c1b753432c4859a4ca245f01c240610a00cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3404c1b753432c4859a4ca245f01c240610a00cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3404c1b753432c4859a4ca245f01c240610a00cb/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fcf4484302d13bd7739b617470d8c8e31974908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fcf4484302d13bd7739b617470d8c8e31974908",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fcf4484302d13bd7739b617470d8c8e31974908"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a01e259731e52deddf67ae2877d922bd09396411",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3404c1b753432c4859a4ca245f01c240610a00cb/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3404c1b753432c4859a4ca245f01c240610a00cb/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=3404c1b753432c4859a4ca245f01c240610a00cb",
        "patch": "@@ -35,7 +35,10 @@ CAmount CFeeRate::GetFee(size_t nBytes_) const\n     return nFee;\n }\n \n-std::string CFeeRate::ToString() const\n+std::string CFeeRate::ToString(const FeeEstimateMode& fee_estimate_mode) const\n {\n-    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    switch (fee_estimate_mode) {\n+    case FeeEstimateMode::SAT_B:  return strprintf(\"%d.%03d %s/B\", nSatoshisPerK / 1000, nSatoshisPerK % 1000, CURRENCY_ATOM);\n+    default:                      return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    }\n }"
      },
      {
        "sha": "883940f73c40df411a4235547993541b791d9ca3",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3404c1b753432c4859a4ca245f01c240610a00cb/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3404c1b753432c4859a4ca245f01c240610a00cb/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=3404c1b753432c4859a4ca245f01c240610a00cb",
        "patch": "@@ -56,7 +56,7 @@ class CFeeRate\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n     friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n-    std::string ToString() const;\n+    std::string ToString(const FeeEstimateMode& fee_estimate_mode = FeeEstimateMode::BTC_KB) const;\n \n     SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\n };"
      }
    ]
  },
  {
    "sha": "05227a35545d7656450874b3668bf418c73813fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTIyN2EzNTU0NWQ3NjU2NDUwODc0YjM2NjhiZjQxOGM3MzgxM2Zi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-29T03:31:00Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-24T07:01:38Z"
      },
      "message": "tests for bumpfee / estimate_modes\n\n* invalid parameter tests for bumpfee\n* add tests for no conf_target explicit estimate_modes",
      "tree": {
        "sha": "db4a216f71eddf7117936533fe73ce973fedd34e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db4a216f71eddf7117936533fe73ce973fedd34e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05227a35545d7656450874b3668bf418c73813fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7y+lIACgkQV692LbM1\nMyKs2g/+Ks+6gYnD9XdyJ/UYEudors5pnHu/TPMZu8WxdQoOPvbIWhGF/a7/bYZ3\nRd6yZ6KD5sire9WfQQQ32KzSkLUiZWrnczqGzJkwfs0YMQeT00P9MQq7dFI5qEq4\nPnQC8NcIQMvtBFQdRMz3vENazCIL5YfdfNm46/pI+i4VV4wElgICvRUztwyhDFWl\ne0EuwqIxJ/y/hJ+ZCtl0d9KyVAJlX/mj9X5FZ7rp9RN0WKAMZ42BgiOPqEDqnxue\nZhczISbGf/pYTOQz0Lyc90YEE/GwgQnc6kjbGPRPvmJzL6I4rvIFluEgE3soyG95\nJgSPvirZvODUOWCw3Xu79f1czdfN0zzG2qBDVAF88d1tsi4AzUy9fqM/68iyIrgU\njM8HcJfT3h5ZSygQJy3HEU3PGOOR4HrLflJs9F9+NCLd5bskK7NkB3GQp/p+KnUX\nhNRiXzqpc5lWAlM08h4j7+EmAa0UvcnPAou8XXB3jaRP1+64cbS1hFVjtXt+yn98\nGnjmrSM1WfwyuoiAjbOg/tht+dSxZYkI+4Udz1tn/HbvCLFUgA/fshASNo/FAVG7\nHDU5wMS/mt/FEdR2hjJclnNw4GemPfD672jqOYs3c+mkSJnvjeZ8GcPYSiY93XN8\nzpIG87YqPys16RXIMnrscoQHRGYGwHZmXWkYpTon4cg42mvWgKc=\n=ZF1+\n-----END PGP SIGNATURE-----",
        "payload": "tree db4a216f71eddf7117936533fe73ce973fedd34e\nparent 3404c1b753432c4859a4ca245f01c240610a00cb\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1567049460 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592982098 +0900\n\ntests for bumpfee / estimate_modes\n\n* invalid parameter tests for bumpfee\n* add tests for no conf_target explicit estimate_modes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05227a35545d7656450874b3668bf418c73813fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05227a35545d7656450874b3668bf418c73813fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05227a35545d7656450874b3668bf418c73813fb/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3404c1b753432c4859a4ca245f01c240610a00cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3404c1b753432c4859a4ca245f01c240610a00cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3404c1b753432c4859a4ca245f01c240610a00cb"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 147,
      "deletions": 1
    },
    "files": [
      {
        "sha": "896236227688f3a3b1dba5ea64aa7d5f5549961d",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05227a35545d7656450874b3668bf418c73813fb/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05227a35545d7656450874b3668bf418c73813fb/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=05227a35545d7656450874b3668bf418c73813fb",
        "patch": "@@ -219,6 +219,60 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n+        # Sendmany with explicit fee (BTC/kB)\n+        # Throw if no conf_target provided\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+            self.nodes[2].sendmany,\n+            amounts={ address: 10 },\n+            estimate_mode='bTc/kB')\n+        # Throw if negative feerate\n+        assert_raises_rpc_error(-3, \"Amount out of range\",\n+            self.nodes[2].sendmany,\n+            amounts={ address: 10 },\n+            conf_target=-1,\n+            estimate_mode='bTc/kB')\n+        fee_per_kb = 0.0002500\n+        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n+        txid = self.nodes[2].sendmany(\n+            amounts={ address: 10 },\n+            conf_target=fee_per_kb,\n+            estimate_mode='bTc/kB',\n+        )\n+        self.nodes[2].generate(1)\n+        self.sync_all(self.nodes[0:3])\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal += Decimal('10')\n+        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n+\n+        # Sendmany with explicit fee (SAT/B)\n+        # Throw if no conf_target provided\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+            self.nodes[2].sendmany,\n+            amounts={ address: 10 },\n+            estimate_mode='sat/b')\n+        # Throw if negative feerate\n+        assert_raises_rpc_error(-3, \"Amount out of range\",\n+            self.nodes[2].sendmany,\n+            amounts={ address: 10 },\n+            conf_target=-1,\n+            estimate_mode='sat/b')\n+        fee_sat_per_b = 2\n+        fee_per_kb = fee_sat_per_b / 100000.0\n+        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n+        txid = self.nodes[2].sendmany(\n+            amounts={ address: 10 },\n+            conf_target=fee_sat_per_b,\n+            estimate_mode='sAT/b',\n+        )\n+        self.nodes[2].generate(1)\n+        self.sync_all(self.nodes[0:3])\n+        balance = self.nodes[2].getbalance()\n+        node_2_bal = self.check_fee_amount(balance, node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        assert_equal(balance, node_2_bal)\n+        node_0_bal += Decimal('10')\n+        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n+\n         self.start_node(3, self.nodes[3].extra_args)\n         connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n@@ -349,6 +403,74 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n+            # send with explicit btc/kb fee\n+            self.log.info(\"test explicit fee (sendtoaddress as btc/kb)\")\n+            self.nodes[0].generate(1)\n+            self.sync_all(self.nodes[0:3])\n+            prebalance = self.nodes[2].getbalance()\n+            assert prebalance > 2\n+            address = self.nodes[1].getnewaddress()\n+            # Throw if no conf_target provided\n+            assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+                self.nodes[2].sendtoaddress,\n+                address=address,\n+                amount=1.0,\n+                estimate_mode='BTc/Kb')\n+            # Throw if negative feerate\n+            assert_raises_rpc_error(-3, \"Amount out of range\",\n+                self.nodes[2].sendtoaddress,\n+                address=address,\n+                amount=1.0,\n+                conf_target=-1,\n+                estimate_mode='btc/kb')\n+            txid = self.nodes[2].sendtoaddress(\n+                address=address,\n+                amount=1.0,\n+                conf_target=0.00002500,\n+                estimate_mode='btc/kb',\n+            )\n+            tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n+            self.sync_all(self.nodes[0:3])\n+            self.nodes[0].generate(1)\n+            self.sync_all(self.nodes[0:3])\n+            postbalance = self.nodes[2].getbalance()\n+            fee = prebalance - postbalance - Decimal('1')\n+            assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n+\n+            # send with explicit sat/b fee\n+            self.sync_all(self.nodes[0:3])\n+            self.log.info(\"test explicit fee (sendtoaddress as sat/b)\")\n+            self.nodes[0].generate(1)\n+            prebalance = self.nodes[2].getbalance()\n+            assert prebalance > 2\n+            address = self.nodes[1].getnewaddress()\n+            # Throw if no conf_target provided\n+            assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+                self.nodes[2].sendtoaddress,\n+                address=address,\n+                amount=1.0,\n+                estimate_mode='SAT/b')\n+            # Throw if negative feerate\n+            assert_raises_rpc_error(-3, \"Amount out of range\",\n+                self.nodes[2].sendtoaddress,\n+                address=address,\n+                amount=1.0,\n+                conf_target=-1,\n+                estimate_mode='SAT/b')\n+            txid = self.nodes[2].sendtoaddress(\n+                address=address,\n+                amount=1.0,\n+                conf_target=2,\n+                estimate_mode='SAT/B',\n+            )\n+            tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n+            self.sync_all(self.nodes[0:3])\n+            self.nodes[0].generate(1)\n+            self.sync_all(self.nodes[0:3])\n+            postbalance = self.nodes[2].getbalance()\n+            fee = prebalance - postbalance - Decimal('1')\n+            assert_fee_amount(fee, tx_size, Decimal('0.00002000'))\n+\n             # 2. Import address from node2 to node1\n             self.nodes[1].importaddress(address_to_import)\n "
      },
      {
        "sha": "72c85b8832e6b87b4fdc38c3e342d6c382a2a91d",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05227a35545d7656450874b3668bf418c73813fb/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05227a35545d7656450874b3668bf418c73813fb/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=05227a35545d7656450874b3668bf418c73813fb",
        "patch": "@@ -71,6 +71,7 @@ def run_test(self):\n \n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n+        test_invalid_parameters(rbf_node, dest_address)\n         test_simple_bumpfee_succeeds(self, \"default\", rbf_node, peer_node, dest_address)\n         test_simple_bumpfee_succeeds(self, \"fee_rate\", rbf_node, peer_node, dest_address)\n         test_feerate_args(self, rbf_node, peer_node, dest_address)\n@@ -92,6 +93,28 @@ def run_test(self):\n         test_small_output_with_feerate_succeeds(self, rbf_node, dest_address)\n         test_no_more_inputs_fails(self, rbf_node, dest_address)\n \n+def test_invalid_parameters(node, dest_address):\n+    txid = spend_one_input(node, dest_address)\n+    # invalid estimate mode\n+    assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n+        \"estimate_mode\": \"moo\",\n+    })\n+    assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n+        \"estimate_mode\": 38,\n+    })\n+    assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n+        \"estimate_mode\": {\n+            \"foo\": \"bar\",\n+        },\n+    })\n+    assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n+        \"estimate_mode\": Decimal(\"3.141592\"),\n+    })\n+    # confTarget and conf_target\n+    assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\", node.bumpfee, txid, {\n+        \"confTarget\": 123,\n+        \"conf_target\": 456,\n+    })\n \n def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     self.log.info('Test simple bumpfee: {}'.format(mode))\n@@ -127,9 +150,10 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-    assert_raises_rpc_error(-8, \"confTarget can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n+    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n \n     assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n+    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\": 1})\n \n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n     assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})"
      }
    ]
  },
  {
    "sha": "25dac9fa65243ca8db02df22f484039c08114401",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWRhYzlmYTY1MjQzY2E4ZGIwMmRmMjJmNDg0MDM5YzA4MTE0NDAx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-11-12T12:01:12Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-06-24T07:01:38Z"
      },
      "message": "doc: add release notes for explicit fee estimators and bumpfee change",
      "tree": {
        "sha": "b73c6c163fa5551bc97e874f929241f4a66025cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b73c6c163fa5551bc97e874f929241f4a66025cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25dac9fa65243ca8db02df22f484039c08114401",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl7y+lIACgkQV692LbM1\nMyL3AQ//YyZ2SgikTb5Re/mF2bcOfSIAXSUITkgDr97d00J+N9JJvkcoyTcCZ5RM\nwgCk9/0BrkszedNaHy/ooyRZYEgQc/cQpzKE2DEgeaf5bmLNDJuAHRClsOPnjODM\nny+1XQbEh4x9WJ1RlMixrb8/BzgQWHKh/AxfNvU0CQg5kqcyM+yOaeSwH7qE1itq\nvWFHDFoAvdbJ26LLTBpA6kN0XX+f3qRBIMDeGtT1QT3n7ZYmfb4QURDbDHJ4hUmf\nv3BNhPJy2JqGpb/9Ra6raiAgD0MwaT3UQKcLJKk/mvyXku+TVC4yUAtkjpMpip16\nJjnpC9EE0z7ubQm9iAonTZwQqm8CN2G6zKSVVQjOXkId2ORYS+vVJJhjWCCI/mdS\n42ziIIs9hznZapb/0i5jiPJK/Gx9wESVNGXnj6ufViLvuMAOSastOpHVsnMfHsb7\nmkvn0Dalv620GIJklhClnMJclXJoz1T9qpChij0R0EqANJuihcjGZI7jHWC+rqDw\nlUx8NDK747aH8oqytsyBXOFdaGqg44remP5lK+Kv4OqnKFLzK1/IHcnYSG1Or7e9\nlV9CDyB5/Nk+Ia5+r/FvbhwOo5EexeKiqYAS02bSXCrVe20CGO29CnSzILTK5+YN\nJ8EbADHv068g47XQ2mcpA62Xqo097sw39EXlkAbeBqndjvqLnjM=\n=UfYb\n-----END PGP SIGNATURE-----",
        "payload": "tree b73c6c163fa5551bc97e874f929241f4a66025cc\nparent 05227a35545d7656450874b3668bf418c73813fb\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1542024072 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1592982098 +0900\n\ndoc: add release notes for explicit fee estimators and bumpfee change\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25dac9fa65243ca8db02df22f484039c08114401",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25dac9fa65243ca8db02df22f484039c08114401",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25dac9fa65243ca8db02df22f484039c08114401/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05227a35545d7656450874b3668bf418c73813fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05227a35545d7656450874b3668bf418c73813fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05227a35545d7656450874b3668bf418c73813fb"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "32735e37f6ba2c03a18801199f1a6e76a7da6737",
        "filename": "doc/release-notes-11413.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25dac9fa65243ca8db02df22f484039c08114401/doc/release-notes-11413.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25dac9fa65243ca8db02df22f484039c08114401/doc/release-notes-11413.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-11413.md?ref=25dac9fa65243ca8db02df22f484039c08114401",
        "patch": "@@ -0,0 +1,11 @@\n+Updated or changed RPC\n+----------------------\n+\n+The `bumpfee`, `fundrawtransaction`, `sendmany`, `sendtoaddress`, and `walletcreatefundedpsbt`\n+RPC commands have been updated to include two new fee estimation methods \"BTC/kB\" and \"sat/B\".\n+The target is the fee expressed explicitly in the given form. Note that use of this feature\n+will trigger BIP 125 (replace-by-fee) opt-in.\n+\n+In addition, the `estimate_mode` parameter is now case insensitive for all of the above RPC commands.\n+\n+The `bumpfee` command now uses `conf_target` rather than `confTarget` in the options."
      }
    ]
  }
]