[
  {
    "sha": "47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2JlMjhjOGJjNDc1ZWFmZWViZDRmYzU4ZWE5MmYwZDNkZjBkOGM2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-28T07:00:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-28T13:39:41Z"
      },
      "message": "validation: use std::chrono in CChainState::FlushStateToDisk()",
      "tree": {
        "sha": "88324ceb474fbaf3964c7cf1e16900d582ed79c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88324ceb474fbaf3964c7cf1e16900d582ed79c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7Pvx8ACgkQLuufXMCV\nJsHgAA//Zfvu5xWotUPsqKD4hwx/w1PihpZelLVbWbX2vNAXOYKjg7yywnUyKCyl\n6ArMkZClLEYpfSt2uYWoAaz8RsPSQ3HrhVIc3K58W1/9O7pykoSPGrxznunqJGbb\nbp1S8Cns+yh82tr1JChxzg5E5z6MpIsrziFJGJpCveNBSxpDJ3FHjMwgqkLCr4d3\ndVd2CxRpfsf4YsIrn+mFyFc3xal1FU5Gi2IdQtJrimD5c1rgFTRO4/Ew1qFScIWc\nqMDlEo6O9Z28qTLgmnwnG/QrFzMr9jUjjmrtuHk4YqyxpQYZMFxSbmEUozBR23gN\nTwGfsRqtAza0gi5t1NTG4zKj4W2ZQaa+cfumfgwK8HhgO0nMeIuopbvuJ8oTj5t+\nTh/6ZdEat0xwyJNQCHbMQ+k88fIRgNh5A9A2yr04tG0JR27SQCK/0DFxRMUH8DGQ\nGmZ0Ko5U32E7qiQnz2P2sjKJym+8pOAffwJCJWFwv1MS7OoPMZZmLfRnVU5DmHj/\nS6X2JqdDYvDezTVPqJNCZyT4YJtwh+kXNshxlowbTjtkVOnvxL48Nifg9JBUZSow\nakwFB+AKgOLBzibWa6jeIuIL8LoZiRRnGbnBI1xZk0bIfU/AlrUQquK4wax+UZso\nqco9vKYbsGeekzE+JjJNaNgOPTW/mRWsZ9v4u5OZjZcP7IeonuI=\n=x4Qb\n-----END PGP SIGNATURE-----",
        "payload": "tree 88324ceb474fbaf3964c7cf1e16900d582ed79c2\nparent 55b4c65bd1d829e799db7fe75fab88691830de43\nauthor fanquake <fanquake@gmail.com> 1590649219 +0800\ncommitter fanquake <fanquake@gmail.com> 1590673181 +0800\n\nvalidation: use std::chrono in CChainState::FlushStateToDisk()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b4c65bd1d829e799db7fe75fab88691830de43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b4c65bd1d829e799db7fe75fab88691830de43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b4c65bd1d829e799db7fe75fab88691830de43"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6678e415c805cf032331a3cb8458cf9dd3c2e633",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
        "patch": "@@ -71,10 +71,10 @@ static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n-/** Time to wait (in seconds) between writing blocks/block index to disk. */\n-static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n-/** Time to wait (in seconds) between flushing chainstate to disk. */\n-static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n+/** Time to wait between writing blocks/block index to disk. */\n+static constexpr std::chrono::hours DATABASE_WRITE_INTERVAL{1};\n+/** Time to wait between flushing chainstate to disk. */\n+static constexpr std::chrono::hours DATABASE_FLUSH_INTERVAL{24};\n /** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n \n@@ -2264,8 +2264,8 @@ bool CChainState::FlushStateToDisk(\n {\n     LOCK(cs_main);\n     assert(this->CanFlushToDisk());\n-    static int64_t nLastWrite = 0;\n-    static int64_t nLastFlush = 0;\n+    static std::chrono::microseconds nLastWrite{0};\n+    static std::chrono::microseconds nLastFlush{0};\n     std::set<int> setFilesToPrune;\n     bool full_flush_completed = false;\n \n@@ -2297,22 +2297,22 @@ bool CChainState::FlushStateToDisk(\n                 }\n             }\n         }\n-        int64_t nNow = GetTimeMicros();\n+        const auto nNow = GetTime<std::chrono::microseconds>();\n         // Avoid writing/flushing immediately after startup.\n-        if (nLastWrite == 0) {\n+        if (nLastWrite.count() == 0) {\n             nLastWrite = nNow;\n         }\n-        if (nLastFlush == 0) {\n+        if (nLastFlush.count() == 0) {\n             nLastFlush = nNow;\n         }\n         // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n         bool fCacheLarge = mode == FlushStateMode::PERIODIC && cache_state >= CoinsCacheSizeState::LARGE;\n         // The cache is over the limit, we have to write now.\n         bool fCacheCritical = mode == FlushStateMode::IF_NEEDED && cache_state >= CoinsCacheSizeState::CRITICAL;\n         // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.\n-        bool fPeriodicWrite = mode == FlushStateMode::PERIODIC && nNow > nLastWrite + (int64_t)DATABASE_WRITE_INTERVAL * 1000000;\n+        bool fPeriodicWrite = mode == FlushStateMode::PERIODIC && nNow > nLastWrite + DATABASE_WRITE_INTERVAL;\n         // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage.\n-        bool fPeriodicFlush = mode == FlushStateMode::PERIODIC && nNow > nLastFlush + (int64_t)DATABASE_FLUSH_INTERVAL * 1000000;\n+        bool fPeriodicFlush = mode == FlushStateMode::PERIODIC && nNow > nLastFlush + DATABASE_FLUSH_INTERVAL;\n         // Combine all conditions that result in a full cache flush.\n         fDoFullFlush = (mode == FlushStateMode::ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;\n         // Write blocks and block index to disk."
      }
    ]
  },
  {
    "sha": "789e9dd3aa727176797529c35b2848f994630a82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODllOWRkM2FhNzI3MTc2Nzk3NTI5YzM1YjI4NDhmOTk0NjMwYTgy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-28T07:42:06Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-28T13:43:36Z"
      },
      "message": "validation: use std::chrono in IsCurrentForFeeEstimation()",
      "tree": {
        "sha": "b8b9c24c53ad34995b1129eaf18c4e1630cc07e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8b9c24c53ad34995b1129eaf18c4e1630cc07e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/789e9dd3aa727176797529c35b2848f994630a82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7PwAoACgkQLuufXMCV\nJsHZJhAAmcwnCfpDni8hH47cefAm6wMJkF5GwvfbxAxfwm+U8ZrdHneAgWBOSNbI\nX09b43qPzSIiPO8ozuvFzQF7IHES1108ApKbiuT7j9mi7XBLBYmsgTouWC0MsQBr\nav8g/rlKly7DNuVDMtItcoszxqTATU/WF3xLDMsV/IZigx4qds6ODg4znO57eKEP\nnqXUuMkFtLjWebDv4saOkQrCXEWxKgakilifqvl941qr/2dILKVzI44+n6r7AUS1\nQGdGRCcIHs4pr0w6ohQQuDPT/T0vAl72VmlmdkUDiNo5npRMPQYr1MinHUejuYNN\nrFNefyXviSv8CkkxrSfb+mbUTB8NOdPam8TRe1nYvYB5ze3hgPkdjMq5FeM/6X8g\nIO3Y7QS1Nr4u4aN0jNgmpXroFAVVHPS2I8KvEmb6uXd9Lhv2+SLz5OJwO3gqUd4N\nBOt2KEnu0+A74qSfBitcsPJYnrrlUusFHR4RSv5ygrLLh7OgFGYdwU0cRnmWMdi8\nSfSDSOB/332E5JTuDCSDhowM4d4QnCFwWWMTTBr/ZBCNZFoQQTv98zsixFDYbbdo\nWXmcID5K6seSijSWPa8gxjM4c2afxv+NuKf+/QKh6dyf8UigpaEiI1a76rWXBzPt\n4+LYqGiRpaOHncAMzl9ruD6V6T2Wfn5f8PDFSovGsYrQJCVdEl0=\n=6jmg\n-----END PGP SIGNATURE-----",
        "payload": "tree b8b9c24c53ad34995b1129eaf18c4e1630cc07e5\nparent 47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6\nauthor fanquake <fanquake@gmail.com> 1590651726 +0800\ncommitter fanquake <fanquake@gmail.com> 1590673416 +0800\n\nvalidation: use std::chrono in IsCurrentForFeeEstimation()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789e9dd3aa727176797529c35b2848f994630a82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/789e9dd3aa727176797529c35b2848f994630a82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789e9dd3aa727176797529c35b2848f994630a82/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47be28c8bc475eafeebd4fc58ea92f0d3df0d8c6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "035000134ca6fd2f3ffa51e19e7b68529600804e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789e9dd3aa727176797529c35b2848f994630a82/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789e9dd3aa727176797529c35b2848f994630a82/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=789e9dd3aa727176797529c35b2848f994630a82",
        "patch": "@@ -75,8 +75,8 @@ static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n static constexpr std::chrono::hours DATABASE_WRITE_INTERVAL{1};\n /** Time to wait between flushing chainstate to disk. */\n static constexpr std::chrono::hours DATABASE_FLUSH_INTERVAL{24};\n-/** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n-static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n+/** Maximum age of our tip for us to be considered current for fee estimation */\n+static constexpr std::chrono::hours MAX_FEE_ESTIMATION_TIP_AGE{3};\n \n bool CBlockIndexWorkComparator::operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n     // First sort by most total work, ...\n@@ -347,7 +347,7 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     AssertLockHeld(cs_main);\n     if (::ChainstateActive().IsInitialBlockDownload())\n         return false;\n-    if (::ChainActive().Tip()->GetBlockTime() < (GetTime() - MAX_FEE_ESTIMATION_TIP_AGE))\n+    if (::ChainActive().Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n         return false;\n     if (::ChainActive().Height() < pindexBestHeader->nHeight - 1)\n         return false;"
      }
    ]
  }
]