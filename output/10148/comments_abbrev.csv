sipa,2017-04-04T09:55:57Z,"This badly needs testing, but I'm not sure how to simulate crashes in the middle of flushing (I've manually verified this patch can recover from failure by introducing an `exit(0)` in the middle of the flush code).",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291452125,291452125,
laanwj,2017-04-04T10:43:40Z,"Cool!\n\n> but I'm not sure how to simulate crashes in the middle of flushing \n\nI'll get to that :)",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291463322,291463322,
sipa,2017-04-05T09:38:05Z,"Rebased, fixed a bug, and added a commit to allows simulating crashes after partial flushes.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291808418,291808418,
gmaxwell,2017-04-05T16:28:54Z, contrib/devtools/check-doc.py is unhappy that you added new arguments without asking for permission from the argument gods.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291918026,291918026,
sipa,2017-04-12T10:42:56Z,Addressed some of @TheBlueMatt's comments.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-293540226,293540226,
sipa,2017-04-16T14:18:16Z,"Updated to deal with reorganizations. The disk format and recovery code can now also deal with multiple partially written branches. That functionality is not needed yet, but means we can switch to different partial flushing strategies later without breaking compatibility with older versions.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-294354066,294354066,
laanwj,2017-04-18T06:46:32Z,"> contrib/devtools/check-doc.py is unhappy that you added new arguments without asking for permission from the argument gods.\n\nNot sure if you were being sarcastic here, but to be clear: that script checks whether options are documented (either as debug option or as normal option), not whether you have a signed permission on a stone tablet from $PANTHEON.\n\nGoing to test this on a node.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-294704380,294704380,
sipa,2017-04-19T17:02:56Z,"Rebased, and removed the unused multi-reorg support in the recovery code.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-295346362,295346362,
sdaftuar,2017-04-19T20:02:35Z,"@sipa Thanks for the simplification.  I've read through the logic and I believe it is correct; will think about ways to carefully test.\n\nThere was some discussion on IRC but I wanted to summarize my current thoughts: this is still some complication we're adding to consensus, and I expect that the per-txout caching from #10195 will change the behavior and performance of the cache substantially,",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-295416531,295416531,
sipa,2017-04-19T20:45:40Z,"@sdaftuar My plan is adding a unit test that uses wrapper around CCoinsViewDB that drops 50% of the dirty entries before writing, and then issues ReplayBlock to recover from it. Then run a test that creates random regtest blocks with a few transactions, and frequently reorganizes.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-295433971,295433971,
NicolasDorier,2017-04-20T05:14:53Z,"CodeReview ACK. Would be more at ease with some functional tests.\n\nAn easy test is trying to sync a node for 1000 blocks, with dbbatchsize to 1 bytes (it is in MB right now though) and dbcrashratio to like 10, and see if it eventually manage to do it.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-295583794,295583794,
morcos,2017-04-20T16:04:22Z,"Concept ACK.  I've done a preliminary review and it looks pretty good, but I'd like to spend some more time thinking about it.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-295793101,295793101,
sipa,2017-05-26T23:57:11Z,Rebased on #10195.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-304411020,304411020,
gmaxwell,2017-06-01T23:37:23Z,@sipa Needs rebase!,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-305649415,305649415,
sipa,2017-06-02T00:05:56Z,Rebased after the merge of #10195.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-305653371,305653371,
gmaxwell,2017-06-02T00:17:16Z,@TheBlueMatt you didn't want to finish a review of this before until after the per-txo changes happened. They've happened.   Time to turn over your soul^wreview!,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-305655016,305655016,
sdaftuar,2017-06-07T18:59:20Z,Needs rebase.  Also is it time now to remove WIP tag?,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-306892568,306892568,
sipa,2017-06-07T19:48:00Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-306904813,306904813,
sdaftuar,2017-06-22T17:51:50Z,"Also, I was able to write a functional test that exercises this logic (and which caught the `undo.fCoinbase` vs `!fClean` issue in `ApplyTxInUndo()`):\nhttps://github.com/sdaftuar/bitcoin/commits/test-10148\n",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-310454099,310454099,
sipa,2017-06-22T19:04:56Z,"* Made the added argument to `AddCoins` `check` instead of `overwrite`. Its semantics are now to issue a `HaveCoin` to determine whether an overwrite happens, rather than just assume there is one. This has the advantage that (some) of the coins added in `RollForwardBlock` correctly get a `FRESH` marker, possibly reducing memory usage if the rollforward is large.\n* Added @sdaftuar 's dbcrash test",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-310473040,310473040,
sdaftuar,2017-06-22T21:02:00Z,"Looks good, ACK.  However, if we include the dbcrash test, then I think we also need something like https://github.com/sdaftuar/bitcoin/commit/96a7ef4e990cb33f4e5cc248b630d17b2384d33b in order for `test/functional/test_runner.py --extended` to not fail?",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-310501601,310501601,
sdaftuar,2017-06-23T02:14:37Z,ACK 03604ea5f3de4dd3301533ab353b2490105ebdb0,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-310551914,310551914,
laanwj,2017-06-24T13:21:37Z,Small merge conflict in `check-doc.py`,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-310838170,310838170,
gmaxwell,2017-06-26T17:38:24Z,"@sdaftuar Thats a great test.\n\n@sipa needs conflicts fixed ",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-311129397,311129397,
sipa,2017-06-26T18:46:29Z,"Rebased, and squashed the last two commits.",https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-311147646,311147646,
sipa,2017-06-26T20:16:00Z,Travis where art thou,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-311169384,311169384,
sdaftuar,2017-06-27T21:06:51Z,re-ACK 176c021d085f5a45bc9e038e760942aa648dd797,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-311485637,311485637,
laanwj,2017-06-28T16:25:17Z,Tested ACK 176c021,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-311713378,311713378,
TheBlueMatt,2017-07-07T19:56:21Z,utACK-sans-tests once the fixes for init-order bugs here goes through in #10758.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-313778034,313778034,
morcos,2017-07-20T16:09:56Z,posthumous utACK-sans-tests and modulo some of the same bugs @TheBlueMatt found and fixed in #10758.  I'll review that now.,https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-316752396,316752396,
laanwj,2017-04-05T09:41:08Z,This sync should be optional at least (not a realistic crash otherwise),https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109871704,109871704,src/txdb.cpp
sipa,2017-04-05T12:29:09Z,I've just removed the sync. It seems not needed for testing (I've done reindexes with hundreds of crashes in between).,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109901577,109901577,src/txdb.cpp
gmaxwell,2017-04-05T16:31:53Z,"If we have memory usage that is some multiple of this, perhaps the argument should be in the form of the actual usage rather than the batch size?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109964790,109964790,src/txdb.cpp
sipa,2017-04-06T07:47:23Z,"Well the relevant constraint is the memory usage peak from allocating the batch, which depends on the batch memory usage, not dbcache memory usage. Also, I don't think anyone will need to change this property (except for tests, where it's very useful to get much more frequent partial flushes).",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110097256,110097256,src/txdb.cpp
TheBlueMatt,2017-04-11T14:01:18Z,"Can you add comments as to why 3 (and, below, 2) bytes are overhead here?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110909763,110909763,src/dbwrapper.h
TheBlueMatt,2017-04-11T18:10:16Z,"Hmm, yes. Were you intending to do this after this PR? Can you just delete it and re-create it here? I feel like it may make sense to move the chainActive.Tip-setting from LoadBlockIndexDB to after this point.\n\nSpeaking of which, did you mean to add a PruneBlockIndexCandidates() to ReplayBlocks ala LoadBlockIndexDB?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110974712,110974712,src/init.cpp
TheBlueMatt,2017-04-11T18:37:57Z,Should we also fail here if hashBest has been written (ie is non-IsNull) but isnt in mapBlockIndex?,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110981608,110981608,src/validation.cpp
TheBlueMatt,2017-04-11T18:53:29Z,"Based on the comment above ModifyNewCoins I do not believe this works, we may need something new to capture the ""maybe not fresh, but definitely fully overwrite in any case"" case.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110985291,110985291,src/validation.cpp
TheBlueMatt,2017-04-11T18:55:23Z,"It seems super weird to be acting entirely on non-globals, and then suddenly set a global here.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110985717,110985717,src/validation.cpp
sipa,2017-04-11T21:27:04Z,Done,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111017596,111017596,src/dbwrapper.h
sipa,2017-04-11T21:28:43Z,"> Were you intending to do this after this PR?\n\nYes, I tried doing it inside the PR, but doing it properly requires a bit more shuffling around and refactoring, which I'd prefer to keep for later.\n\n> Speaking of which, did you mean to add a PruneBlockIndexCandidates() to ReplayBlocks ala LoadBlockIndexDB?\n\nReplayBlocks doesn't touch the block index, so I don't think that would have any",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111017968,111017968,src/init.cpp
sipa,2017-04-11T21:31:36Z,"Nice catch, fixed.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111018536,111018536,src/validation.cpp
sipa,2017-04-11T21:34:07Z,"I think that would be caught by other code we already have, but I've added it here.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111019092,111019092,src/validation.cpp
sipa,2017-04-11T21:37:20Z,"Good point, fixed.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111019745,111019745,src/validation.cpp
TheBlueMatt,2017-04-11T22:12:10Z,"The PruneBlockIndexCandidates in LoadBlockIndexDB uses chainActive.Tip(), so I assumed it may need to be re-run with the new tip (though likely not a bug without it, just a should-do). I'm ok with cleaning this stuff up in a followup PR, but it seems less than ideal as-is right now.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111026186,111026186,src/init.cpp
TheBlueMatt,2017-04-12T14:04:48Z,s/which changes/which some changes/?,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111158923,111158923,src/coins.h
TheBlueMatt,2017-04-12T14:14:22Z,I believe we'll hit this if we ever crash during a disconnect? Seems kinda annoying to not support disconnect.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111161611,111161611,src/validation.cpp
TheBlueMatt,2017-04-12T14:21:03Z,"It seems to me this API ties us to only doing batches per-block, and never across long chains of actions (or at least not across multiple reorgs). Consider the case where you disconnect A to get to B, then disconnect B to get to C then connect D. There is no way to encode that you need to ensure everything from disconnecting B must be replayed to ensure there are no leftover entries from that, I b",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111163455,111163455,src/txdb.cpp
sipa,2017-04-12T16:05:42Z,"\n\nThat's a great point. I hadn't considered that in the case of a reorg the set of partially written changes may include things from multiple branches. It seems solvable by allowing the 'upto' blocks to be a list of tip hashes, and then at start time choose which ones to undo and which ones to replay. I think that's a problem for later, but it makes sense to have a comment about it.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111192437,111192437,src/txdb.cpp
sipa,2017-04-12T16:06:10Z,Good catch. ReplayBlocks should learn to deal with a reorg.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111192566,111192566,src/validation.cpp
TheBlueMatt,2017-04-17T16:01:59Z,"I think you can do this for (almost) free now. See https://github.com/TheBlueMatt/bitcoin/commit/747b766a02c32a47a5f0018ed352991b55aaab19, though if you dont want to take it here I'll just PR it afterwards.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111764166,111764166,src/init.cpp
TheBlueMatt,2017-04-17T16:44:53Z,"Doesn't this need to be in reverse order (like in DisconnectBlock, maybe you should just go ahead and add an option to DisconnectBlock to ignore errors in a pervious commit to make it easier to review?)?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111771238,111771238,src/validation.cpp
TheBlueMatt,2017-04-17T16:56:43Z,"Would be nice to not lose the error messages by adding a flag for printing errors. I think you need the flag either way for the next line, as I dont think you can run the Clear() if we're re-undoing a tx.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111773328,111773328,src/validation.cpp
TheBlueMatt,2017-04-17T18:44:54Z,"I'm not convinced this is right. What if you connect both A and B, in the simple case? Now you'll disconnect B before you re-connect A and then re-connect B? Is that neccessary?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111794633,111794633,src/validation.cpp
sipa,2017-04-17T18:57:46Z,"There is no change in behavior here; the error case doesn't cause a return from the function. I believe the new (and existing) code is fine: if a failure is detected, the caller (`VerifyDB` or `DisconnectBlock`) won't flush the changes view to the level below, ignoring the resulting inconsistent state.\n\nIf you insist, I'll add a flag to ignore the error messages, but (perhaps in a separate PR)",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111797390,111797390,src/validation.cpp
sipa,2017-04-17T19:07:02Z,"Good catch, fixed.\n\nI'll try to do the merging in a extra commit.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111799121,111799121,src/validation.cpp
sipa,2017-04-17T19:07:43Z,"Note that i starts at 1 in the loop, skipping the branch that leads to the new tip. I've added a comment to clarify.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111799239,111799239,src/validation.cpp
TheBlueMatt,2017-04-17T19:17:40Z,"Indeed, but that only means you wont do the disconnect-then-reconnect thing for one block (which I suppose may be fine for this PR), but you will do it if you have two back-to-back blocks in the list (or am I confused?).",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111801012,111801012,src/validation.cpp
TheBlueMatt,2017-04-17T19:19:38Z,"I just find the errors useful to keep around, my real concern is the Clear() one line down, which I believe is an actual bug for the new usage in RollbackBlock.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111801337,111801337,src/validation.cpp
sipa,2017-04-17T19:59:46Z,"No. Let's say you have a chain A<-B<-C that was being flushed (meaning the old tip was A, you crashed in the middle of writing the changes for B and C, with C the intended new tip). In this case, at recovery time, GetBlockHeads() will return `[C,A]`. `pindexFork` will be A. The loop above will only process A, but because A is already the fork point, nothing is added to the disconnect set.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111808637,111808637,src/validation.cpp
sipa,2017-04-17T20:03:24Z,"I'm not convinced the Clear() is wrong - it does mean we're passing over a state where the outputs for that TX were all full spent. However, this is hard to reason about, and you may well be right. Furthermore, it seems that Clear() has no purpose. In the 'clean' case, the output is already pruned, to the Clear() is a no-op. In the other case it doesn't matter. I'm removing it.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111809355,111809355,src/validation.cpp
TheBlueMatt,2017-04-17T20:18:37Z,"Yes, OK, it wasnt clear to me what GetBlockHeads() should be returning there, Flush seemed to indicate something different.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111812222,111812222,src/validation.cpp
TheBlueMatt,2017-04-17T20:23:10Z,"Hmm, you may be right. Indeed, however, hard to reason about.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111813266,111813266,src/validation.cpp
NicolasDorier,2017-04-18T05:52:01Z,can `tip` be null ? I would have expected it is at least genesis.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111875593,111875593,src/txdb.cpp
NicolasDorier,2017-04-18T06:05:15Z,"I am confused about all this `fGenesis` variable. I guess this is related to my other comment on https://github.com/bitcoin/bitcoin/pull/10148/commits/02dfa4a54da44e40b1d29687cc68885f3a306ef3#r111875593\n\nI would not expect, pindexFork to be null, as the work fork point should be the genesis block.\n",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111876751,111876751,src/validation.cpp
sipa,2017-04-18T11:53:09Z,Tip can be null when it's the first write ever to the database.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111934057,111934057,src/txdb.cpp
sipa,2017-04-18T11:53:25Z,I've added a lengthy comment to clarify.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111934090,111934090,src/validation.cpp
NicolasDorier,2017-04-20T04:31:41Z,"I am surprised, I always thought the coinbase of the genesis block was not added in the database. This would mean that having it to `null` to mean ""before processing the genesis"", is the same than enforcing the best block to be at least the genesis block.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112363767,112363767,src/txdb.cpp
NicolasDorier,2017-04-20T05:00:15Z,maybe return an `error()` here ?,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112365799,112365799,src/validation.cpp
NicolasDorier,2017-04-20T05:03:55Z,I would add a `assert(pindexFork);`,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112366121,112366121,src/validation.cpp
sipa,2017-04-20T11:37:43Z,"Done. All cases in which DisconnectBlock returns false already report an error(), but it may help.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112431268,112431268,src/validation.cpp
sipa,2017-04-20T11:37:52Z,Done.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112431301,112431301,src/validation.cpp
morcos,2017-04-20T15:31:26Z,Should we be looking for failure here and returning false if any of the `WriteBatch` calls fail?,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112484848,112484848,src/txdb.cpp
TheBlueMatt,2017-04-20T15:55:00Z,Can we move GetArg lookup out of the hot loop?,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r112491085,112491085,src/txdb.cpp
sipa,2017-04-24T22:57:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r113075946,113075946,src/txdb.cpp
sipa,2017-04-24T22:58:59Z,WriteBatch throws a dbwrapper_error when writing fails.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r113076132,113076132,src/txdb.cpp
ryanofsky,2017-06-09T16:48:51Z,"This vector-of-two format seems a little strange. Would it work to not erase `DB_BEST_BLOCK` above, and just write a plain `DB_BEST_NEW_BLOCK` entry containing hash of the new tip. Then if there is a crash, the rescan can run between `DB_BEST_BLOCK` and `DB_BEST_NEW_BLOCK`.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r121172675,121172675,src/txdb.cpp
ryanofsky,2017-06-09T16:54:31Z,Could you add a few words about why it's safe to ignore unclean? (It's unclear to me.),https://github.com/bitcoin/bitcoin/pull/10148#discussion_r121173764,121173764,src/validation.cpp
ryanofsky,2017-06-09T17:06:49Z,"%s could be %i.\n\nAlso, is there a case where `pindex->nHeight` would not be the same as `nHeight`?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r121176293,121176293,src/validation.cpp
sipa,2017-06-09T18:42:32Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r121196363,121196363,src/validation.cpp
sipa,2017-06-09T18:42:43Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r121196402,121196402,src/validation.cpp
sipa,2017-06-09T18:45:29Z,"It's for future compatibility with a design where entries are continuously written to disk in the background, which may lead to multiple partially-applied reorgs to co-exist on disk.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r121196979,121196979,src/txdb.cpp
sdaftuar,2017-06-14T17:42:35Z,style nit: one line if should have braces,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122016146,122016146,src/txdb.cpp
sdaftuar,2017-06-14T17:50:22Z,"Would we ever call this on a view that isn't a `CCoinsViewDB`?  If not, perhaps the code would be slightly clearer if we passed in a `CCoinsViewDB *` instead, to clue future code readers in to what's going on here?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122018035,122018035,src/validation.cpp
sdaftuar,2017-06-14T18:23:04Z,"To make sure we've considered all the cases, I'm trying to understand the circumstances in which we'd call BatchWrite with a null hashBlock -- any ideas?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122026907,122026907,src/txdb.cpp
sdaftuar,2017-06-14T18:41:10Z,"Can we assert here that in this case, old_heads[0] == hashBlock?",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122031750,122031750,src/txdb.cpp
sdaftuar,2017-06-14T18:46:20Z,Am I correct in thinking that this call to SetBestBlock() is now unnecessary? ,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122033136,122033136,src/init.cpp
sdaftuar,2017-06-14T18:55:50Z,"I know this is just a code move, but this comment is confusing -- if I understand correctly, there's no utxo information to flush at this point, just potentially the block index?\n\nOn further analysis, I think this line is not needed at all.  I don't think it hurts for belt and suspenders, but would be nice to fix the documentation if that is the case.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122035506,122035506,src/init.cpp
sipa,2017-06-14T20:51:00Z,"I prefer making types as generic as possible, and I think this code should work fine even on a cache on top of a db view.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122061018,122061018,src/validation.cpp
sipa,2017-06-15T07:36:11Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122137324,122137324,src/txdb.cpp
sipa,2017-06-15T07:36:19Z,Done.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122137346,122137346,src/txdb.cpp
sipa,2017-06-15T07:36:39Z,I've removed the need for flushing with hash=0.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122137402,122137402,src/txdb.cpp
sipa,2017-06-15T07:37:18Z,"Indeed, removed.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122137516,122137516,src/init.cpp
sipa,2017-06-15T07:37:43Z,"Indeed, removed (and this also allows removing the hash=0 flushing logic).",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r122137617,122137617,src/init.cpp
sdaftuar,2017-06-22T16:15:35Z,"nit: add `override` here to eliminate this warning:\n```\nIn file included from txdb.cpp:6:\n./txdb.h:77:26: warning: 'GetHeadBlocks' overrides a member function but is not marked 'override' [-Winconsistent-missing-override]\n    std::vector<uint256> GetHeadBlocks() const;\n                         ^\n./coins.h:163:34: note: overridden virtual function is here\n    virtual std::vector<uint2",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r123556105,123556105,src/txdb.h
sdaftuar,2017-06-22T16:21:58Z,"I think it's worth adding some explanatory comments around the use of `!fClean` here.  In particular, I think it's non-obvious that the call to `HaveCoin()` at line 1317 is necessary for correctness, and not just a sanity check.",https://github.com/bitcoin/bitcoin/pull/10148#discussion_r123557646,123557646,src/validation.cpp
sipa,2017-06-22T18:59:55Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r123595653,123595653,src/txdb.h
sipa,2017-06-22T19:00:06Z,Added some comments.,https://github.com/bitcoin/bitcoin/pull/10148#discussion_r123595710,123595710,src/validation.cpp
