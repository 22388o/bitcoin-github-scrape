amitiuttarwar,2021-09-29 21:38:13,concept ACK ,https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-930564175,930564175,
naumenkogs,2021-09-30 11:10:27,"Okay so here's what I think is happening:\n\nBefore this PR, we pick bucket+position randomly. If that's empty, we pick bucket+position randomly again.\nAfter this PR, we pick bucket+position randomly. If that's empty, we stay in the same bucket and go from randomly_picked_position to the end of the bucket. If haven't found anything, pick bucket+position randomly again.\n\n\n>That does mean ",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-931224193,931224193,
naumenkogs,2021-10-01 07:23:18,"ACK 0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303\n\nI think the code is correct, I haven't made any experiments to verify probabilities.",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-931976171,931976171,
jnewbery,2021-10-01 17:31:14,"When we learn of a new address from a source peer, I believe we essentially:\n\n- select 64 of the 1024 new buckets based on the source peer's netgroup\n- then select the specific bucket out of those 64 based on the destination's netgroup\n- then select the bucket position (out of 64) based on the destination's network address (and the bucket index)\n\nThat means that if we have one or more ",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-932424386,932424386,
DrahtBot,2021-10-01 18:23:25,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-932456883,932456883,
naumenkogs,2021-10-04 08:34:11,"ACK 318a8b2792f8183397067e8b3633b16e300db122\n\n--------\n\nI was mainly thinking about `new` nodes, where the benefit is clear because bucket is selected based on the source.\n\nW.r.t `tried`, I'm not even sure this makes any practical sense. We won't connect to the same netgroup anyway, right?\nSo, ""destination netgroup is (closer to) equally like to be be picked"" won't make any real diff",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-933265949,933265949,
sipa,2021-10-05 15:49:23,Rebased.,https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-934532608,934532608,
jnewbery,2021-10-05 16:51:50,"> W.r.t tried, I'm not even sure this makes any practical sense. We won't connect to the same netgroup anyway, right?\nSo, ""destination netgroup is (closer to) equally like to be be picked"" won't make any real difference (there will be some difference, but i think it doesn't matter).\n\n@naumenkogs - I agree. The logic in `ThreadOpenConnections` prevents us from making multiple outbound connect",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-934585724,934585724,
sipa,2021-10-05 17:08:09,"@jnewbery I prefer being consistent, unless there is actually a reason why this is worse for the tried table?",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-934598744,934598744,
jnewbery,2021-10-06 09:53:25,"utACK 632aad9e6d8369750f4327a886ca5b3d3fed89bd\n\n> @jnewbery I prefer being consistent, unless there is actually a reason why this is worse for the tried table?\n\nNo, I don't think it would be any worse for the tried table. I can see the benefit of being consistent for the two tables.",https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-935873589,935873589,
naumenkogs,2021-10-06 10:13:36,ACK 632aad9e6d8369750f4327a886ca5b3d3fed89bd,https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-935905499,935905499,
mzumsande,2021-10-20 20:30:23,ACK 632aad9e6d8369750f4327a886ca5b3d3fed89bd,https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-948013251,948013251,
naumenkogs,2021-09-30 11:13:10,nit: I think it's not particularly intuitive that this loop with `nUBucketPos ^ i` exhausts all values [0; ADDRMAN_BUCKET_SIZE). Perhaps we could use something more explicit/readable?,https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719302637,719302637,src/addrman.cpp
rajarshimaitra,2021-09-30 15:20:05,"It seems to me this operation will iterate over all the elements of a bucket, but not serially. So if a bucket is non empty it will always find an address in that bucket.\n\nIs the purpose of the above Xor is to add randomness into the search?\n\n> That does mean that if a bucket has fewer entries, its entries are supposed to be picked more frequently.\n\nI am also not understanding how the ",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719514947,719514947,src/addrman.cpp
sipa,2021-09-30 16:48:01,"The xor is just a simple way of iterating over the positions in the bucket. It's not more or less predictable than starting in a random position and incrementing until it wraps around and reaches the starting position again - just less code for doing something similar.\n\n> I am also not understanding how the search will ensure the above? It seems irrespective of the bucket size, it will always ",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719587967,719587967,src/addrman.cpp
rajarshimaitra,2021-09-30 18:12:55,"Thanks @sipa for clarifying. Its natural that if probability of a bucket being chosen is `P(bucket)` and it has `n` addresses, then probability of a particular address being picked from a particular bucket is `P(bucket) / n`. That satisfies your example above.\n\nBut to me, that doesn't seem like satisfying your above statement, "" if a bucket has fewer entries, its entries are supposed to be pic",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719647713,719647713,src/addrman.cpp
sipa,2021-09-30 18:31:35,Made some changes; perhaps it's clearer now.,https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719660616,719660616,src/addrman.cpp
sipa,2021-09-30 18:32:58,"> So mapping back to your example, it would say, probability of choosing an address from Bucket A == Probability of choosing an address from Bucket B == 50%. The address count doesn't play a role anymore, because we will always choose an address from a bucket if it has any.\n\nRight, that's the case. But that is exactly the same as saying that addresses in buckets with more addresses are relativ",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719661573,719661573,src/addrman.cpp
rajarshimaitra,2021-09-30 18:44:23,"But I do understand your point, that probability of a particular address being chosen from a particular bucket, decreases with number of addresses in that bucket. \nBut that's just natural consequence, and the code doesn't favor smaller buckets in any way. Which I thought was the case by your statement.       ",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719669504,719669504,src/addrman.cpp
sipa,2021-09-30 19:49:47,"Ah, no my statement, reformulated, is: ""if you look at the resulting change of per-address probabilities caused by this PR, you'll see it now favors those in smaller buckets more. However, that is desirable.""",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719711053,719711053,src/addrman.cpp
naumenkogs,2021-10-01 07:17:11,"nit: while you touching this, we could also make this more readable by avoiding bit operations :)",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719999146,719999146,src/addrman.cpp
naumenkogs,2021-10-01 07:22:47,"nit: If you move this comment right before the `// Iterate over the positions of that bucket.` comment, next readers won't be like me trying to figure out what exactly this bias tries to achieve.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720002613,720002613,src/addrman.cpp
jnewbery,2021-10-01 09:33:59,"Hmmm, maybe just personal taste, but I think the old version is better. Having a separate counter (`i`) from the thing being incremented (`nUBucketPos`) seems unusual and a bit jarring. Both work, but I have a mild preference for the original.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720097153,720097153,src/addrman.cpp
sipa,2021-10-01 15:21:11,Any suggestions?,https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720338257,720338257,src/addrman.cpp
sipa,2021-10-01 15:21:39,"I've changed it back to the original approach, but with iteration instead of xor.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720338601,720338601,src/addrman.cpp
naumenkogs,2021-10-04 08:33:35,I meant `insecure_rand.randrange(XYZ) < fChanceFactor * info.GetChance() * XYZ` and defining XYZ should just work?,https://github.com/bitcoin/bitcoin/pull/23140#discussion_r721149788,721149788,src/addrman.cpp
theuni,2021-10-05 18:29:45,Is this an infinite loop if all buckets are empty? It's unclear to me if that can be the case here.,https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722505948,722505948,src/addrman.cpp
sipa,2021-10-05 19:32:10,"It would be, if the function didn't start with testing if the relevant table was empty.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722586964,722586964,src/addrman.cpp
theuni,2021-10-05 19:43:35,"Ah, ok, that relationship was unclear from the local code alone, but makes sense after a quick refresher of how `vRandom` works.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722598152,722598152,src/addrman.cpp
sipa,2021-10-05 20:02:52,"Right, it's a bit obscure.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722620518,722620518,src/addrman.cpp
mzumsande,2021-10-20 19:30:33,"I think that this way of iterating does not select all items in a bucket with the same probability when the bucket is partially filled. In the most extreme case of just two items in adjacent positions, one item would get picked with probability 63/64, the other one with probability 1/64 because we start at a random position and then move from left to right until we find something. Do you think tha",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733084509,733084509,src/addrman.cpp
sipa,2021-10-20 19:46:33,"They're both equally non-uniform in this regard. I can try adding something to make it actually uniform if there is a concern, but given that the contents of the buckets is secret and assumed not to be under attacker control, I don't think it matters very much.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733095074,733095074,src/addrman.cpp
mzumsande,2021-10-20 20:29:59,"Yes, I agree that this cannot be abused. Just a small quirk that in a given addrman configuration, the selection is not always perfectly uniform.",https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733122817,733122817,src/addrman.cpp
