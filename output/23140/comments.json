[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930564175",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-930564175",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 930564175,
    "node_id": "IC_kwDOABII5843d0hP",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T21:38:13Z",
    "updated_at": "2021-09-29T21:38:13Z",
    "author_association": "MEMBER",
    "body": "concept ACK ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930564175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931224193",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-931224193",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 931224193,
    "node_id": "IC_kwDOABII5843gVqB",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-30T11:10:27Z",
    "updated_at": "2021-09-30T11:10:27Z",
    "author_association": "MEMBER",
    "body": "Okay so here's what I think is happening:\r\n\r\nBefore this PR, we pick bucket+position randomly. If that's empty, we pick bucket+position randomly again.\r\nAfter this PR, we pick bucket+position randomly. If that's empty, we stay in the same bucket and go from randomly_picked_position to the end of the bucket. If haven't found anything, pick bucket+position randomly again.\r\n\r\n\r\n>That does mean that if a bucket has fewer entries, its entries are supposed to be picked more frequently.\r\n\r\nI think this is a good intuitive high-level justification of the proposed change.\r\n\r\nSo, I don't think this can be directly exploited at least easily (because we randomly hash), but it just makes the connectivity better overall, for a given node (and perhaps for the network overall)?\r\nSince a bucket is a means of diversification, making them all equal makes sense.\r\n\r\nBut also, after this change, ending up in a less-populated bucket is \"luckier\" for that node. That probably evens out across all nodes in the network, so that should be fine.\r\n\r\nConcept ACK.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931224193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931976171",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-931976171",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 931976171,
    "node_id": "IC_kwDOABII5843jNPr",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-01T07:23:18Z",
    "updated_at": "2021-10-01T07:23:18Z",
    "author_association": "MEMBER",
    "body": "ACK 0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303\r\n\r\nI think the code is correct, I haven't made any experiments to verify probabilities.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931976171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932424386",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-932424386",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 932424386,
    "node_id": "IC_kwDOABII5843k6rC",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-01T17:31:14Z",
    "updated_at": "2021-10-01T17:31:14Z",
    "author_association": "MEMBER",
    "body": "When we learn of a new address from a source peer, I believe we essentially:\r\n\r\n- select 64 of the 1024 new buckets based on the source peer's netgroup\r\n- then select the specific bucket out of those 64 based on the destination's netgroup\r\n- then select the bucket position (out of 64) based on the destination's network address (and the bucket index)\r\n\r\nThat means that if we have one or more source peers that are filling up our new table with addresses, each one will be able to fill up to 64 new buckets with 64 addresses each (4096 addresses).\r\n\r\nThis proposed change means that if a minority of source peers are sending a disproportionately high number of address records, the addresses that they're providing won't get disproportionately chosen by Select(). I think it also means that we're more likely to try to connect to addresses that we learn about via self-broadcast gossiping from inbound nodes than currently. I expect that (initially at least) our new tables are dominated by addresses that we learn from DNS seeds or from getaddr responses, but that those records are concentrated into specific buckets. by selecting bucket first, then position, we're more likely to select from an under-filled bucket, which would have been populated by address gossip.\r\n\r\nThose seems like good changes to me.\r\n\r\nWhen we promote an address to the tried table, we:\r\n\r\n- select 8 of the 256 buckets based on the destination's netgroup\r\n- then select the specific bucket based on the destination's network address\r\n- then select the bucket position based on the destination's network address (and the bucket index)\r\n\r\nThat means that if we successfully connect to a peer in an under-represented netgroup, it'll be placed in a more sparsely-populated tried bucket than if we successfully connect to a peer in a more common netgroup. With this change, we're more likely to choose that address again when Select() is called. If this change is applied to nodes across the network, then nodes on less well represented netgroups will receive slightly more inbound requests on average than those on common netgroups.\r\n\r\nSo, changing the way that Select() picks entries from the new and tried tables does two slightly different things:\r\n\r\n1. for the new tables, it means that each address source netgroup is (closer to) equally likely to be picked. That's an improvement because we'll no longer favour addresses from spammy address sources.\r\n2. for the tried tables, it means that each destination netgroup is (closer to) equally like to be be picked, but this is only for addresses that we've connected to at some point in the past.\r\n\r\nAs far as I can understand, the justification for the PR describes (2), but I think (1) is far more significant, since there are always more entries in the new tables, and because for feeler connections we only select from the new tables.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932424386/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932456883",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-932456883",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 932456883,
    "node_id": "IC_kwDOABII5843lCmz",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-01T18:23:25Z",
    "updated_at": "2021-10-07T19:27:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932456883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933265949",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-933265949",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 933265949,
    "node_id": "IC_kwDOABII5843oIId",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-04T08:34:11Z",
    "updated_at": "2021-10-04T08:34:11Z",
    "author_association": "MEMBER",
    "body": "ACK 318a8b2792f8183397067e8b3633b16e300db122\r\n\r\n--------\r\n\r\nI was mainly thinking about `new` nodes, where the benefit is clear because bucket is selected based on the source.\r\n\r\nW.r.t `tried`, I'm not even sure this makes any practical sense. We won't connect to the same netgroup anyway, right?\r\nSo, \"destination netgroup is (closer to) equally like to be be picked\" won't make any real difference (there will be *some difference, but i think it doesn't matter*).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933265949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934532608",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-934532608",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 934532608,
    "node_id": "IC_kwDOABII5843s9YA",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-05T15:49:23Z",
    "updated_at": "2021-10-05T15:49:23Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934532608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934585724",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-934585724",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 934585724,
    "node_id": "IC_kwDOABII5843tKV8",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-05T16:51:50Z",
    "updated_at": "2021-10-05T16:51:50Z",
    "author_association": "MEMBER",
    "body": "> W.r.t tried, I'm not even sure this makes any practical sense. We won't connect to the same netgroup anyway, right?\r\nSo, \"destination netgroup is (closer to) equally like to be be picked\" won't make any real difference (there will be some difference, but i think it doesn't matter).\r\n\r\n@naumenkogs - I agree. The logic in `ThreadOpenConnections` prevents us from making multiple outbound connections to peers in the same network group.\r\n\r\n@sipa - what do you think about removing the change to picking a tried entry, and only having this logic for picking a new entry?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934585724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934598744",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-934598744",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 934598744,
    "node_id": "IC_kwDOABII5843tNhY",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-05T17:08:09Z",
    "updated_at": "2021-10-05T17:08:09Z",
    "author_association": "MEMBER",
    "body": "@jnewbery I prefer being consistent, unless there is actually a reason why this is worse for the tried table?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934598744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935873589",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-935873589",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 935873589,
    "node_id": "IC_kwDOABII5843yEw1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T09:53:25Z",
    "updated_at": "2021-10-06T09:53:25Z",
    "author_association": "MEMBER",
    "body": "utACK 632aad9e6d8369750f4327a886ca5b3d3fed89bd\r\n\r\n> @jnewbery I prefer being consistent, unless there is actually a reason why this is worse for the tried table?\r\n\r\nNo, I don't think it would be any worse for the tried table. I can see the benefit of being consistent for the two tables.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935873589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935905499",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-935905499",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 935905499,
    "node_id": "IC_kwDOABII5843yMjb",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T10:13:36Z",
    "updated_at": "2021-10-06T10:13:36Z",
    "author_association": "MEMBER",
    "body": "ACK 632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935905499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/948013251",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#issuecomment-948013251",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23140",
    "id": 948013251,
    "node_id": "IC_kwDOABII5844gYjD",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T20:30:23Z",
    "updated_at": "2021-10-20T20:30:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/948013251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719302637",
    "pull_request_review_id": 767719331,
    "id": 719302637,
    "node_id": "PRRC_kwDOABII584q36_t",
    "diff_hunk": "@@ -731,13 +736,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a new node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a new bucket, and an initial position in that bucket.\n             int nUBucket = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand.randbits(ADDRMAN_NEW_BUCKET_COUNT_LOG2)) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvNew[nUBucket][nUBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I think it's not particularly intuitive that this loop with `nUBucketPos ^ i` exhausts all values [0; ADDRMAN_BUCKET_SIZE). Perhaps we could use something more explicit/readable?",
    "created_at": "2021-09-30T11:13:10Z",
    "updated_at": "2021-09-30T11:13:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719302637",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719302637"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719302637"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719302637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719514947",
    "pull_request_review_id": 768011287,
    "id": 719514947,
    "node_id": "PRRC_kwDOABII584q4u1D",
    "diff_hunk": "@@ -713,13 +713,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems to me this operation will iterate over all the elements of a bucket, but not serially. So if a bucket is non empty it will always find an address in that bucket.\r\n\r\nIs the purpose of the above Xor is to add randomness into the search?\r\n\r\n> That does mean that if a bucket has fewer entries, its entries are supposed to be picked more frequently.\r\n\r\nI am also not understanding how the search will ensure the above? It seems irrespective of the bucket size, it will always find an entry if the bucket is non-empty.    ",
    "created_at": "2021-09-30T15:20:05Z",
    "updated_at": "2021-09-30T15:22:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719514947",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719514947"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719514947"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719514947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 722,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719587967",
    "pull_request_review_id": 768109488,
    "id": 719587967,
    "node_id": "PRRC_kwDOABII584q5Ap_",
    "diff_hunk": "@@ -713,13 +713,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The xor is just a simple way of iterating over the positions in the bucket. It's not more or less predictable than starting in a random position and incrementing until it wraps around and reaches the starting position again - just less code for doing something similar.\r\n\r\n> I am also not understanding how the search will ensure the above? It seems irrespective of the bucket size, it will always find an entry if the bucket is non-empty.\r\n\r\nThat's exactly what it does. The old code will pick a uniformly random bucket/position combination, among all of those that are non-empty. The new code will pick a uniformly random non-empty *bucket*, and then a random position in that bucket. That means that relatively speaking, if bucket A has 1 entry, and bucket B as 4 entries, and all other buckets are empty, A's entry will have 50% chance of being picked, and B's 4 entries will have 12.5% each. In the old code, each of the 5 entries would have 20%.",
    "created_at": "2021-09-30T16:48:01Z",
    "updated_at": "2021-09-30T16:50:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719587967",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719587967"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719587967"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719587967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 719514947
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719647713",
    "pull_request_review_id": 768189186,
    "id": 719647713,
    "node_id": "PRRC_kwDOABII584q5PPh",
    "diff_hunk": "@@ -713,13 +713,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks @sipa for clarifying. Its natural that if probability of a bucket being chosen is `P(bucket)` and it has `n` addresses, then probability of a particular address being picked from a particular bucket is `P(bucket) / n`. That satisfies your example above.\r\n\r\nBut to me, that doesn't seem like satisfying your above statement, \" if a bucket has fewer entries, its entries are supposed to be picked more frequently.\"\r\n\r\nBecause bucket choices are uniformly random, for `m` non-empty buckets, probability of a particular bucket being chosen is `1/m`. And, then because the search ensures that a non-empty bucket will always yield an address, so probability of getting **any** address from that bucket is `1`. \r\n\r\nFollowing this logic, we have, for `m` buckets, probability that **any** address from a particular bucket to be chosen is always `1/m`, uniformly distributed over all the buckets, and independent of size of buckets.\r\n\r\nSo mapping back to your example, it would say, probability of choosing an address from Bucket A == Probability of choosing an address from Bucket B == 50%. The address count doesn't play a role anymore, because we will always choose an address from a bucket if it has any.\r\n\r\nTo compare against the old code:  \r\nIn the old code, the probability is uniformly distributed across all addresses, irrespective of their buckets. \r\nIn the new code the probability is now uniformly distributed over all buckets, irrespective of their contents.\r\n\r\nOnce the bucket is chosen, then there is no probability anymore, as we will always get an address from it if its not empty.\r\n\r\nThus to me it seems like the probability is independent of bucket size.              ",
    "created_at": "2021-09-30T18:12:55Z",
    "updated_at": "2021-09-30T18:38:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719647713",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719647713"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719647713"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719647713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 719514947
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719660616",
    "pull_request_review_id": 768206026,
    "id": 719660616,
    "node_id": "PRRC_kwDOABII584q5SZI",
    "diff_hunk": "@@ -731,13 +736,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a new node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a new bucket, and an initial position in that bucket.\n             int nUBucket = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand.randbits(ADDRMAN_NEW_BUCKET_COUNT_LOG2)) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvNew[nUBucket][nUBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Made some changes; perhaps it's clearer now.",
    "created_at": "2021-09-30T18:31:35Z",
    "updated_at": "2021-09-30T18:31:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719660616",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719660616"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719660616"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719660616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT",
    "in_reply_to_id": 719302637
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719661573",
    "pull_request_review_id": 768207344,
    "id": 719661573,
    "node_id": "PRRC_kwDOABII584q5SoF",
    "diff_hunk": "@@ -713,13 +713,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> So mapping back to your example, it would say, probability of choosing an address from Bucket A == Probability of choosing an address from Bucket B == 50%. The address count doesn't play a role anymore, because we will always choose an address from a bucket if it has any.\r\n\r\nRight, that's the case. But that is exactly the same as saying that addresses in buckets with more addresses are relatively less frequently going to be picked.\r\n\r\n",
    "created_at": "2021-09-30T18:32:58Z",
    "updated_at": "2021-09-30T18:32:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719661573",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719661573"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719661573"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719661573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 719514947
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719669504",
    "pull_request_review_id": 768217557,
    "id": 719669504,
    "node_id": "PRRC_kwDOABII584q5UkA",
    "diff_hunk": "@@ -713,13 +713,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "But I do understand your point, that probability of a particular address being chosen from a particular bucket, decreases with number of addresses in that bucket. \r\nBut that's just natural consequence, and the code doesn't favor smaller buckets in any way. Which I thought was the case by your statement.       ",
    "created_at": "2021-09-30T18:44:23Z",
    "updated_at": "2021-09-30T18:44:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719669504",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719669504"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719669504"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719669504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 719514947
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719711053",
    "pull_request_review_id": 768272921,
    "id": 719711053,
    "node_id": "PRRC_kwDOABII584q5etN",
    "diff_hunk": "@@ -713,13 +713,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, no my statement, reformulated, is: \"if you look at the resulting change of per-address probabilities caused by this PR, you'll see it now favors those in smaller buckets more. However, that is desirable.\"",
    "created_at": "2021-09-30T19:49:47Z",
    "updated_at": "2021-09-30T19:49:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719711053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719711053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719711053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719711053/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 719514947
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719999146",
    "pull_request_review_id": 768633582,
    "id": 719999146,
    "node_id": "PRRC_kwDOABII584q6lCq",
    "diff_hunk": "@@ -713,37 +713,49 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos] != -1) {\n+                    int nId = vvTried[nKBucket][nKBucketPos];\n+                    const auto it_found{mapInfo.find(nId)};\n+                    assert(it_found != mapInfo.end());\n+                    const CAddrInfo& info{it_found->second};\n+                    if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) return info;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: while you touching this, we could also make this more readable by avoiding bit operations :)",
    "created_at": "2021-10-01T07:17:11Z",
    "updated_at": "2021-10-01T07:17:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719999146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719999146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r719999146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/719999146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 726,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720002613",
    "pull_request_review_id": 768637909,
    "id": 720002613,
    "node_id": "PRRC_kwDOABII584q6l41",
    "diff_hunk": "@@ -713,37 +713,49 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos] != -1) {\n+                    int nId = vvTried[nKBucket][nKBucketPos];\n+                    const auto it_found{mapInfo.find(nId)};\n+                    assert(it_found != mapInfo.end());\n+                    const CAddrInfo& info{it_found->second};\n+                    if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) return info;\n+                    fChanceFactor *= 1.2;\n+                    break;\n+                }\n+                // If the position was empty, transition to the next one (looping around).\n+                nKBucketPos = (nKBucketPos + 1) % ADDRMAN_BUCKET_SIZE;\n             }\n-            int nId = vvTried[nKBucket][nKBucketPos];\n-            const auto it_found{mapInfo.find(nId)};\n-            assert(it_found != mapInfo.end());\n-            const CAddrInfo& info{it_found->second};\n-            if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30))\n-                return info;\n-            fChanceFactor *= 1.2;\n+            // Either the chosen bucket was empty, or the GetChance()-based bias rejected",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: If you move this comment right before the `// Iterate over the positions of that bucket.` comment, next readers won't be like me trying to figure out what exactly this bias tries to achieve.",
    "created_at": "2021-10-01T07:22:47Z",
    "updated_at": "2021-10-01T07:22:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720002613",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720002613"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720002613"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720002613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 733,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720097153",
    "pull_request_review_id": 768758004,
    "id": 720097153,
    "node_id": "PRRC_kwDOABII584q68-B",
    "diff_hunk": "@@ -731,13 +736,18 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a new node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a new bucket, and an initial position in that bucket.\n             int nUBucket = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand.randbits(ADDRMAN_NEW_BUCKET_COUNT_LOG2)) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvNew[nUBucket][nUBucketPos ^ i] != -1) break;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "8fd67d88d181f59f73489ba95da95ce9d08ee08b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmmm, maybe just personal taste, but I think the old version is better. Having a separate counter (`i`) from the thing being incremented (`nUBucketPos`) seems unusual and a bit jarring. Both work, but I have a mild preference for the original.",
    "created_at": "2021-10-01T09:33:59Z",
    "updated_at": "2021-10-01T09:34:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720097153",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720097153"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720097153"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720097153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 745,
    "side": "RIGHT",
    "in_reply_to_id": 719302637
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720338257",
    "pull_request_review_id": 769099653,
    "id": 720338257,
    "node_id": "PRRC_kwDOABII584q731R",
    "diff_hunk": "@@ -713,37 +713,49 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos] != -1) {\n+                    int nId = vvTried[nKBucket][nKBucketPos];\n+                    const auto it_found{mapInfo.find(nId)};\n+                    assert(it_found != mapInfo.end());\n+                    const CAddrInfo& info{it_found->second};\n+                    if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) return info;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any suggestions?",
    "created_at": "2021-10-01T15:21:11Z",
    "updated_at": "2021-10-01T15:21:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720338257",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720338257"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720338257"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720338257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 726,
    "side": "RIGHT",
    "in_reply_to_id": 719999146
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720338601",
    "pull_request_review_id": 769100097,
    "id": 720338601,
    "node_id": "PRRC_kwDOABII584q736p",
    "diff_hunk": "@@ -713,37 +713,49 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos] != -1) {\n+                    int nId = vvTried[nKBucket][nKBucketPos];\n+                    const auto it_found{mapInfo.find(nId)};\n+                    assert(it_found != mapInfo.end());\n+                    const CAddrInfo& info{it_found->second};\n+                    if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) return info;\n+                    fChanceFactor *= 1.2;\n+                    break;\n+                }\n+                // If the position was empty, transition to the next one (looping around).\n+                nKBucketPos = (nKBucketPos + 1) % ADDRMAN_BUCKET_SIZE;\n             }\n-            int nId = vvTried[nKBucket][nKBucketPos];\n-            const auto it_found{mapInfo.find(nId)};\n-            assert(it_found != mapInfo.end());\n-            const CAddrInfo& info{it_found->second};\n-            if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30))\n-                return info;\n-            fChanceFactor *= 1.2;\n+            // Either the chosen bucket was empty, or the GetChance()-based bias rejected",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've changed it back to the original approach, but with iteration instead of xor.",
    "created_at": "2021-10-01T15:21:39Z",
    "updated_at": "2021-10-01T15:21:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720338601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720338601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r720338601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720338601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 733,
    "side": "RIGHT",
    "in_reply_to_id": 720002613
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721149788",
    "pull_request_review_id": 770006800,
    "id": 721149788,
    "node_id": "PRRC_kwDOABII584q-99c",
    "diff_hunk": "@@ -713,37 +713,49 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket.\n+            for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][nKBucketPos] != -1) {\n+                    int nId = vvTried[nKBucket][nKBucketPos];\n+                    const auto it_found{mapInfo.find(nId)};\n+                    assert(it_found != mapInfo.end());\n+                    const CAddrInfo& info{it_found->second};\n+                    if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) return info;",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "0f47d86f13ba90d9a9f7a6a67d65cefaa70c4303",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I meant `insecure_rand.randrange(XYZ) < fChanceFactor * info.GetChance() * XYZ` and defining XYZ should just work?",
    "created_at": "2021-10-04T08:33:35Z",
    "updated_at": "2021-10-04T08:33:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r721149788",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721149788"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r721149788"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721149788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 726,
    "side": "RIGHT",
    "in_reply_to_id": 719999146
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722505948",
    "pull_request_review_id": 771845806,
    "id": 722505948,
    "node_id": "PRRC_kwDOABII584rEJDc",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][(nKBucketPos + i) % ADDRMAN_BUCKET_SIZE] != -1) break;\n             }\n-            int nId = vvTried[nKBucket][nKBucketPos];\n+            // If the bucket is entirely empty, start over with a (likely) different one.\n+            if (i == ADDRMAN_BUCKET_SIZE) continue;",
    "path": "src/addrman.cpp",
    "position": 18,
    "original_position": 18,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this an infinite loop if all buckets are empty? It's unclear to me if that can be the case here.",
    "created_at": "2021-10-05T18:29:45Z",
    "updated_at": "2021-10-05T18:29:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722505948",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722505948"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722505948"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722505948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 722,
    "original_line": 722,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722586964",
    "pull_request_review_id": 771903329,
    "id": 722586964,
    "node_id": "PRRC_kwDOABII584rEc1U",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][(nKBucketPos + i) % ADDRMAN_BUCKET_SIZE] != -1) break;\n             }\n-            int nId = vvTried[nKBucket][nKBucketPos];\n+            // If the bucket is entirely empty, start over with a (likely) different one.\n+            if (i == ADDRMAN_BUCKET_SIZE) continue;",
    "path": "src/addrman.cpp",
    "position": 18,
    "original_position": 18,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would be, if the function didn't start with testing if the relevant table was empty.",
    "created_at": "2021-10-05T19:32:10Z",
    "updated_at": "2021-10-05T19:32:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722586964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722586964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722586964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722586964/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 722,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 722505948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722598152",
    "pull_request_review_id": 771913472,
    "id": 722598152,
    "node_id": "PRRC_kwDOABII584rEfkI",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][(nKBucketPos + i) % ADDRMAN_BUCKET_SIZE] != -1) break;\n             }\n-            int nId = vvTried[nKBucket][nKBucketPos];\n+            // If the bucket is entirely empty, start over with a (likely) different one.\n+            if (i == ADDRMAN_BUCKET_SIZE) continue;",
    "path": "src/addrman.cpp",
    "position": 18,
    "original_position": 18,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, ok, that relationship was unclear from the local code alone, but makes sense after a quick refresher of how `vRandom` works.",
    "created_at": "2021-10-05T19:43:35Z",
    "updated_at": "2021-10-05T19:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722598152",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722598152"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722598152"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722598152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 722,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 722505948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722620518",
    "pull_request_review_id": 771930469,
    "id": 722620518,
    "node_id": "PRRC_kwDOABII584rElBm",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+                if (vvTried[nKBucket][(nKBucketPos + i) % ADDRMAN_BUCKET_SIZE] != -1) break;\n             }\n-            int nId = vvTried[nKBucket][nKBucketPos];\n+            // If the bucket is entirely empty, start over with a (likely) different one.\n+            if (i == ADDRMAN_BUCKET_SIZE) continue;",
    "path": "src/addrman.cpp",
    "position": 18,
    "original_position": 18,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right, it's a bit obscure.",
    "created_at": "2021-10-05T20:02:52Z",
    "updated_at": "2021-10-05T20:02:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722620518",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722620518"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r722620518"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722620518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 722,
    "original_line": 722,
    "side": "RIGHT",
    "in_reply_to_id": 722505948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733084509",
    "pull_request_review_id": 784912361,
    "id": 733084509,
    "node_id": "PRRC_kwDOABII584rsftd",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {",
    "path": "src/addrman.cpp",
    "position": 13,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that this way of iterating does not select all items in a bucket with the same probability when the bucket is partially filled. In the most extreme case of just two items in adjacent positions, one item would get picked with probability 63/64, the other one with probability 1/64 because we start at a random position and then move from left to right until we find something. Do you think that this is a problem? Was the older version of this PR with `nUBucketPos ^ i` maybe better because of this?",
    "created_at": "2021-10-20T19:30:33Z",
    "updated_at": "2021-10-20T19:43:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733084509",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733084509"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733084509"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733084509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 718,
    "original_line": 718,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733095074",
    "pull_request_review_id": 784926247,
    "id": 733095074,
    "node_id": "PRRC_kwDOABII584rsiSi",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {",
    "path": "src/addrman.cpp",
    "position": 13,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They're both equally non-uniform in this regard. I can try adding something to make it actually uniform if there is a concern, but given that the contents of the buckets is secret and assumed not to be under attacker control, I don't think it matters very much.",
    "created_at": "2021-10-20T19:46:33Z",
    "updated_at": "2021-10-20T19:46:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733095074",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733095074"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733095074"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733095074/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 718,
    "original_line": 718,
    "side": "RIGHT",
    "in_reply_to_id": 733084509
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733122817",
    "pull_request_review_id": 784964233,
    "id": 733122817,
    "node_id": "PRRC_kwDOABII584rspEB",
    "diff_hunk": "@@ -709,38 +709,54 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n+            // Pick a tried bucket, and an initial position in that bucket.\n             int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n-            while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n+            // Iterate over the positions of that bucket, starting at the initial one,\n+            // and looping around.\n+            int i;\n+            for (i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {",
    "path": "src/addrman.cpp",
    "position": 13,
    "original_position": 13,
    "commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "original_commit_id": "632aad9e6d8369750f4327a886ca5b3d3fed89bd",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, I agree that this cannot be abused. Just a small quirk that in a given addrman configuration, the selection is not always perfectly uniform.",
    "created_at": "2021-10-20T20:29:59Z",
    "updated_at": "2021-10-20T20:30:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733122817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733122817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23140#discussion_r733122817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23140"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733122817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 718,
    "original_line": 718,
    "side": "RIGHT",
    "in_reply_to_id": 733084509
  }
]