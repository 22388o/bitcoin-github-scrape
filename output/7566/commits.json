[
  {
    "sha": "108da6e7c33b3540f51f3d64586964032b914a04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDhkYTZlN2MzM2IzNTQwZjUxZjNkNjQ1ODY5NjQwMzJiOTE0YTA0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-16T21:21:45Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-28T19:33:46Z"
      },
      "message": "BIP9: Prepare consensus/params.h to support version bits",
      "tree": {
        "sha": "75edc0d5123da553dd0bcb8769b84e049148d37f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75edc0d5123da553dd0bcb8769b84e049148d37f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/108da6e7c33b3540f51f3d64586964032b914a04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108da6e7c33b3540f51f3d64586964032b914a04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/108da6e7c33b3540f51f3d64586964032b914a04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108da6e7c33b3540f51f3d64586964032b914a04/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "317462123f8e41fd7dd967ab907e59ddffb19898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317462123f8e41fd7dd967ab907e59ddffb19898",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/317462123f8e41fd7dd967ab907e59ddffb19898"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7a14c4346b5937532d860a547f86fdeae735da08",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108da6e7c33b3540f51f3d64586964032b914a04/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108da6e7c33b3540f51f3d64586964032b914a04/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=108da6e7c33b3540f51f3d64586964032b914a04",
        "patch": "@@ -9,6 +9,26 @@\n #include \"uint256.h\"\n \n namespace Consensus {\n+\n+/** Order matters, see case LOCKED_IN in CalculateNextState() */\n+enum DeploymentPos\n+{\n+    BIP113,\n+    MAX_VERSION_BITS_DEPLOYMENTS\n+};\n+\n+/**\n+ * Struct for each individual consensus rule change using BIP9.\n+ */\n+struct BIP9Deployment {\n+    /** Bitmask to select the particular bit, only a single bit should be active. */\n+    uint32_t bitmask;\n+    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n+    int64_t nStartTime;\n+    /** Timeout/expiry MedianTime for the deployment attempt. */\n+    int64_t nTimeout;\n+};\n+\n /**\n  * Parameters that influence chain consensus.\n  */\n@@ -22,6 +42,14 @@ struct Params {\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /**\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * (nPowTargetTimespan / nPowTargetSpacing) wich is also used for BIP9 deployments.\n+     * Examples: 1916 for 95%, 1512 for testchains.\n+     */\n+    uint32_t nRuleChangeActivationThreshold;\n+    uint32_t nMinerConfirmationWindow;\n+    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;\n@@ -30,6 +58,25 @@ struct Params {\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n };\n+\n+/**\n+ * BIP9 deployment states, see versionbits.h\n+ */\n+enum DeploymentState\n+{\n+    DEFINED,\n+    STARTED,\n+    LOCKED_IN,\n+    ACTIVATED,\n+    FAILED,\n+    MAX_DEPLOYMENT_STATES\n+};\n+\n+struct CVersionBitsState\n+{\n+    DeploymentState vStates[MAX_VERSION_BITS_DEPLOYMENTS];\n+};\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_PARAMS_H"
      }
    ]
  },
  {
    "sha": "4c3cd3fa7c91498b08a9722bc146b5079d847e70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzNjZDNmYTdjOTE0OThiMDhhOTcyMmJjMTQ2YjUwNzlkODQ3ZTcw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-28T19:30:00Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-29T14:35:26Z"
      },
      "message": "BIP9: Introduce consensus/interfaces.h with CVersionBitsCacheInterface\n\nThis file is intended to be compatible with a C API, thus uses simple\nstructs and function pointers instead of C++ classes and methods.",
      "tree": {
        "sha": "3fe7e7cdfb580d9c6b99c1bb0eb55dd0152d2fbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fe7e7cdfb580d9c6b99c1bb0eb55dd0152d2fbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c3cd3fa7c91498b08a9722bc146b5079d847e70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3cd3fa7c91498b08a9722bc146b5079d847e70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3cd3fa7c91498b08a9722bc146b5079d847e70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3cd3fa7c91498b08a9722bc146b5079d847e70/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "108da6e7c33b3540f51f3d64586964032b914a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108da6e7c33b3540f51f3d64586964032b914a04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/108da6e7c33b3540f51f3d64586964032b914a04"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7fcc88f5c1e134ced9679f1e27037e0b50bab3f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3cd3fa7c91498b08a9722bc146b5079d847e70/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3cd3fa7c91498b08a9722bc146b5079d847e70/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4c3cd3fa7c91498b08a9722bc146b5079d847e70",
        "patch": "@@ -258,6 +258,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   amount.h \\\n   arith_uint256.cpp \\\n   arith_uint256.h \\\n+  consensus/interfaces.h \\\n   consensus/merkle.cpp \\\n   consensus/merkle.h \\\n   consensus/params.h \\"
      },
      {
        "sha": "5ee1bf8dc46a0afd366173b89c4abb1fe5d8b5e3",
        "filename": "src/consensus/interfaces.h",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3cd3fa7c91498b08a9722bc146b5079d847e70/src/consensus/interfaces.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3cd3fa7c91498b08a9722bc146b5079d847e70/src/consensus/interfaces.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/interfaces.h?ref=4c3cd3fa7c91498b08a9722bc146b5079d847e70",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_INTERFACES_H\n+#define BITCOIN_CONSENSUS_INTERFACES_H\n+\n+#include \"params.h\"\n+\n+namespace Consensus {\n+\n+typedef void (*VersionBitsCacheSetter)(const void* blockIndex, CVersionBitsState* versionBitsState);\n+typedef const CVersionBitsState* (*VersionBitsCacheGetter)(const void* blockIndex);\n+\n+/**\n+ * Collection of function pointers to interface with the versionbits cache.\n+ */\n+struct CVersionBitsCacheInterface\n+{\n+    VersionBitsCacheSetter Set;\n+    VersionBitsCacheGetter Get;\n+};\n+\n+} // namespace Consensus\n+\n+#endif // BITCOIN_CONSENSUS_INTERFACES_H"
      }
    ]
  },
  {
    "sha": "258cc2b91d70e652b0ecc12058c2b35c86235fcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNThjYzJiOTFkNzBlNjUyYjBlY2MxMjA1OGMyYjM1Yzg2MjM1ZmNm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-25T02:43:34Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-29T14:35:26Z"
      },
      "message": "BIP9: Prepare miner_tests to support BIP9 calculations (sipa)\n\nhttps://github.com/sipa/bitcoin/compare/bip9",
      "tree": {
        "sha": "991ba24e1d5f49691579fda241753652e2beb110",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/991ba24e1d5f49691579fda241753652e2beb110"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/258cc2b91d70e652b0ecc12058c2b35c86235fcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258cc2b91d70e652b0ecc12058c2b35c86235fcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/258cc2b91d70e652b0ecc12058c2b35c86235fcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258cc2b91d70e652b0ecc12058c2b35c86235fcf/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c3cd3fa7c91498b08a9722bc146b5079d847e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3cd3fa7c91498b08a9722bc146b5079d847e70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3cd3fa7c91498b08a9722bc146b5079d847e70"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 30,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ab6485081ceed885a2909e3889fe90dba11a5c3d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/258cc2b91d70e652b0ecc12058c2b35c86235fcf/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/258cc2b91d70e652b0ecc12058c2b35c86235fcf/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=258cc2b91d70e652b0ecc12058c2b35c86235fcf",
        "patch": "@@ -247,13 +247,40 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n-    chainActive.Tip()->nHeight = 209999;\n+    // Create an actual 209999-long block chain (without valid blocks).\n+    while (chainActive.Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = 210000;\n+    // Extend to a 210000-long block chain.\n+    while (chainActive.Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = nHeight;\n+    // Delete the dummy blocks again.\n+    while (chainActive.Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = chainActive.Tip();\n+        chainActive.SetTip(del->pprev);\n+        pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n+        delete del->phashBlock;\n+        delete del;\n+    }\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);"
      }
    ]
  },
  {
    "sha": "95776402f7e6e4bb102c248e4831fff128522a46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTc3NjQwMmY3ZTZlNGJiMTAyYzI0OGU0ODMxZmZmMTI4NTIyYTQ2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-18T04:39:43Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-01T16:55:01Z"
      },
      "message": "BIP9: Introduce versionbits.o\n\nTODO give proper credits",
      "tree": {
        "sha": "4e7d172911057f8a35f39103ec940146b576dba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e7d172911057f8a35f39103ec940146b576dba0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95776402f7e6e4bb102c248e4831fff128522a46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95776402f7e6e4bb102c248e4831fff128522a46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95776402f7e6e4bb102c248e4831fff128522a46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95776402f7e6e4bb102c248e4831fff128522a46/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "258cc2b91d70e652b0ecc12058c2b35c86235fcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258cc2b91d70e652b0ecc12058c2b35c86235fcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/258cc2b91d70e652b0ecc12058c2b35c86235fcf"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 260,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43ded95eb1e8a46a908faa638077cdc9055ece79",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95776402f7e6e4bb102c248e4831fff128522a46/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95776402f7e6e4bb102c248e4831fff128522a46/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=95776402f7e6e4bb102c248e4831fff128522a46",
        "patch": "@@ -179,6 +179,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/versionbits.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\\n@@ -263,6 +264,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n   consensus/validation.h \\\n+  consensus/versionbits.h \\\n   hash.cpp \\\n   hash.h \\\n   prevector.h \\"
      },
      {
        "sha": "40938cc33913aeb0e0fddc2da793348f0ea2e482",
        "filename": "src/consensus/versionbits.cpp",
        "status": "added",
        "additions": 206,
        "deletions": 0,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95776402f7e6e4bb102c248e4831fff128522a46/src/consensus/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95776402f7e6e4bb102c248e4831fff128522a46/src/consensus/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/versionbits.cpp?ref=95776402f7e6e4bb102c248e4831fff128522a46",
        "patch": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2016-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"versionbits.h\"\n+\n+#include \"chain.h\" // TODO Decouple libconsensus from CBlockIndex\n+#include \"interfaces.h\"\n+#include \"script/interpreter.h\"\n+\n+using namespace Consensus;\n+\n+/**\n+ * This can be cheaply recalculated instead cached as shown in #7575.\n+ */\n+int32_t GetUsedBits(const CVersionBitsState& versionBitsState)\n+{\n+    int32_t usedBitsMaskCache = RESERVED_BITS_MASK;\n+\n+    for (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+        usedBitsMaskCache |= versionBitsState.vStates[i];\n+\n+    return usedBitsMaskCache;\n+}\n+\n+/**\n+ * Initialize state of the deployments as DEFINED, perform some basic checks\n+ * and initialize the BIP9 states cache.\n+ * Can result in a consensus validation error if consensusParams contains deployments using incompatible bits.\n+ */\n+static void InitVersionBitsState(CVersionBitsState& versionBitsState, const Params& consensusParams)\n+{\n+    for (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i) {\n+        const BIP9Deployment& deployment = consensusParams.vDeployments[i];\n+        assert(!(deployment.bitmask & RESERVED_BITS_MASK));\n+        versionBitsState.vStates[i] = DEFINED;\n+    }\n+}\n+\n+static bool MinersConfirmBitUpgrade(const BIP9Deployment& deployment, const Params& consensusParams, const CBlockIndex* pindexPrev)\n+{\n+    unsigned nFound = 0;\n+    unsigned i = 0;\n+    while (i < consensusParams.nMinerConfirmationWindow && \n+           nFound < consensusParams.nRuleChangeActivationThreshold && \n+           pindexPrev != NULL) {\n+\n+        // If the versionbit bit (bit 29) is not set, the miner wasn't using BIP9 (as it mandates the high bits to be 001...)\n+        if (pindexPrev->nVersion & deployment.bitmask && pindexPrev->nVersion & VERSIONBIT_BIT)\n+            ++nFound;\n+        pindexPrev = pindexPrev->pprev;\n+        ++i;\n+    }\n+    return nFound >= consensusParams.nRuleChangeActivationThreshold;\n+}\n+\n+/**\n+ * Calculate the next state from the previous one and the header chain.\n+ * Preconditions: \n+ * - nextVersionBitsState = versionBitsState\n+ * - (indexPrev->GetHeight() + 1) % consensusParams.nMinerConfirmationWindow == 0\n+ */\n+static DeploymentState CalculateNextState(DeploymentState previousState, const BIP9Deployment& deployment, const Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nMedianTime, int32_t& usedBitsMaskCache)\n+{\n+    DeploymentState nextState = previousState;\n+    if (previousState == DEFINED && \n+        deployment.nStartTime < nMedianTime && \n+        !(usedBitsMaskCache & deployment.bitmask)) {\n+\n+        usedBitsMaskCache |= deployment.bitmask;\n+        // If moved to STARTED it could potentially become LOCKED_IN or FAILED in the same round, \n+        // so no need to return immediately\n+        nextState = STARTED;\n+    }\n+\n+    // Check for Timeouts\n+    if (previousState == STARTED && deployment.nTimeout > nMedianTime)\n+        return  FAILED;\n+\n+    if (previousState == STARTED && MinersConfirmBitUpgrade(deployment, consensusParams, pindexPrev))\n+        return LOCKED_IN;\n+\n+    // If locked LOCKED_IN, advance to ACTIVATED and free the bit after\n+    // The order in which the BIPS are written in DeploymentPos (consensus/params.h) is potentially consensus critical\n+    // for this state: always leave older deployments at the beginning to reuse available bits immediately.\n+    if (previousState == LOCKED_IN) {\n+        // Don't use XOR to avoid thinking about an impossible case\n+        usedBitsMaskCache &= ~deployment.bitmask;\n+        return ACTIVATED;\n+    }\n+\n+    // ACTIVATED and FAILED states are final\n+    return nextState;\n+}\n+\n+/**\n+ * Get the last updated state for a given CBlockIndex.\n+ *\n+ * @param pindexPrev cannot be NULL.\n+ *   The output will be replaced with the oldest found unkown softfork deployment if any.\n+ */\n+static const CVersionBitsState* GetVersionBitsState(const CBlockIndex* pindexPrev, const Params& consensusParams, CVersionBitsCacheInterface& versionBitsCache)\n+{\n+    // Make sure the interface's function pointers aren't NULL\n+    assert(versionBitsCache.Get && versionBitsCache.Set); \n+\n+    // The height of the last ascendant with an updated CVersionBitsState is always \n+    // a multiple of consensusParams.nMinerConfirmationWindow (see BIP9)\n+    const uint32_t nPeriod = consensusParams.nMinerConfirmationWindow;\n+    const uint32_t nTargetStateHeight = pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod);\n+    // We don't have to check anything during the first 2015 blocks\n+    if (nTargetStateHeight < nPeriod)\n+        return NULL;\n+\n+    if (nTargetStateHeight != (uint32_t)pindexPrev->nHeight)\n+        pindexPrev = pindexPrev->GetAncestor(nTargetStateHeight);\n+    if (!pindexPrev)\n+        return NULL;\n+\n+    // Search backards for a cached state\n+    const CBlockIndex* itBlockIndex = pindexPrev;\n+    const CVersionBitsState* pVersionBitsState = versionBitsCache.Get(itBlockIndex);\n+    while(!pVersionBitsState && (uint32_t)itBlockIndex->nHeight > nPeriod) {\n+        // Only look in index with height % nPeriod == 0\n+        itBlockIndex = itBlockIndex->GetAncestor(itBlockIndex->nHeight - nPeriod);\n+        pVersionBitsState = versionBitsCache.Get(itBlockIndex);\n+    }\n+    assert(pindexPrev);\n+\n+    // Create initial state if there's not one cached\n+    CVersionBitsState newVersionBitsState;\n+    if (!pVersionBitsState) {\n+        InitVersionBitsState(newVersionBitsState, consensusParams);\n+        versionBitsCache.Set(itBlockIndex, &newVersionBitsState);\n+        pVersionBitsState = versionBitsCache.Get(itBlockIndex);\n+    }\n+\n+    uint32_t nCurrentStateHeight = itBlockIndex->nHeight;\n+    // Calculate new states forward\n+    while (nCurrentStateHeight < nTargetStateHeight) {\n+\n+        nCurrentStateHeight += nPeriod; // Move to the next Height that calculates a state\n+        itBlockIndex = pindexPrev->GetAncestor(nCurrentStateHeight);\n+        const int64_t nMedianTime = itBlockIndex->GetMedianTimePast();\n+\n+        // Create the new state in the cache from the old one\n+        int32_t usedBitsMaskCache = GetUsedBits(*pVersionBitsState);\n+        for (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i) {\n+            const BIP9Deployment& deployment = consensusParams.vDeployments[i];\n+            newVersionBitsState.vStates[i] = CalculateNextState(pVersionBitsState->vStates[i], deployment, consensusParams, itBlockIndex, nMedianTime, usedBitsMaskCache);\n+        }\n+\n+        versionBitsCache.Set(itBlockIndex, &newVersionBitsState);\n+        pVersionBitsState = versionBitsCache.Get(itBlockIndex);\n+    }\n+    assert(nCurrentStateHeight == nTargetStateHeight);\n+    return pVersionBitsState;\n+}\n+\n+unsigned int Consensus::GetFlags(const CBlockIndex* pindexPrev, const Params& consensusParams, CVersionBitsCacheInterface& versionBitsCache)\n+{\n+    unsigned int flags = SCRIPT_VERIFY_NONE;\n+    if (!pindexPrev)\n+        return flags;\n+\n+    // BIP16 didn't become active until Apr 1 2012\n+    int64_t nBIP16SwitchTime = 1333238400;\n+    if (pindexPrev->nTime >= nBIP16SwitchTime)\n+        flags |= SCRIPT_VERIFY_P2SH;\n+\n+    const Consensus::CVersionBitsState* pVersionBitsState = GetVersionBitsState(pindexPrev, consensusParams, versionBitsCache);\n+    if (!pVersionBitsState)\n+        return flags;\n+\n+    return flags;\n+}\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, Consensus::CVersionBitsCacheInterface& versionBitsCache)\n+{\n+    int32_t nVersion = 0;\n+    const Consensus::CVersionBitsState* pVersionBitsState = GetVersionBitsState(pindexPrev, consensusParams, versionBitsCache);\n+    if (!pVersionBitsState)\n+        return nVersion;\n+\n+    for (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+        if (pVersionBitsState->vStates[i] == STARTED || pVersionBitsState->vStates[i] == LOCKED_IN)\n+            nVersion |= consensusParams.vDeployments[i].bitmask;\n+\n+    return nVersion == 0 ? VERSIONBITS_LAST_OLD_BLOCK_VERSION : nVersion | VERSIONBIT_BIT;\n+}\n+\n+std::string GetLastUnknownDeploymentWarning(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, Consensus::CVersionBitsCacheInterface& versionBitsCache)\n+{\n+    const uint32_t unusedBits = ~(ComputeBlockVersion(pindexPrev, consensusParams, versionBitsCache) & RESERVED_BITS_MASK);\n+    if (unusedBits) {\n+        BIP9Deployment deployment;\n+        deployment.nStartTime = 0;\n+        deployment.nTimeout = std::numeric_limits<int64_t>::max();\n+        deployment.bitmask = unusedBits;\n+        int32_t usedBitsMaskCache = ~unusedBits;\n+        const int64_t nMedianTime = pindexPrev->GetMedianTimePast();\n+        if (LOCKED_IN == CalculateNextState(STARTED, deployment, consensusParams, pindexPrev, nMedianTime, usedBitsMaskCache))\n+            return \"Warning: unknown softfork has been locked in.\";\n+    }\n+    return \"\";\n+}"
      },
      {
        "sha": "67a93fb2484a2a132f60c1fcf08b26e3ea5b039b",
        "filename": "src/consensus/versionbits.h",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95776402f7e6e4bb102c248e4831fff128522a46/src/consensus/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95776402f7e6e4bb102c248e4831fff128522a46/src/consensus/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/versionbits.h?ref=95776402f7e6e4bb102c248e4831fff128522a46",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VERSIONBITS_H\n+#define BITCOIN_CONSENSUS_VERSIONBITS_H\n+\n+#include <stdint.h>\n+#include <string>\n+\n+class CBlockIndex; // TODO decouple from chain.o\n+\n+/**\n+ * Implementation of BIP9, see https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n+ */\n+namespace Consensus {\n+\n+class CVersionBitsCacheInterface;\n+class Params;\n+\n+/** What block version to use for new blocks (pre versionbits) */\n+static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n+/**\n+ * The version bit reserved for signaling hardfork activation to all types of nodes (previously \"sign bit\").\n+ * See https://github.com/bitcoin/bips/pull/317 (TODO wait for BIP number)\n+ */\n+static const uint32_t HARDFORK_BIT = 1 << 31; // 1000...0\n+static const uint32_t UNUSED_RESERVED_BIT = 1 << 30; // 0100...0\n+static const uint32_t VERSIONBIT_BIT = 1 << 29; // 0010...0\n+static const uint32_t RESERVED_BITS_MASK = HARDFORK_BIT | UNUSED_RESERVED_BIT | VERSIONBIT_BIT; // 1110...0\n+\n+/**\n+ * Get the consensus flags to be enforced according to the block.nVersion history. \n+ */\n+unsigned int GetFlags(const CBlockIndex* pindexPrev, const Params& consensusParams, CVersionBitsCacheInterface& versionBitsCache);\n+\n+} // namespace Consensus\n+\n+// Non-consensus versionbits utility functions:\n+\n+/**\n+ * Determine what nVersion a new block should use. This is useful for mining.\n+ */\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, Consensus::CVersionBitsCacheInterface& versionBitsCache);\n+\n+/**\n+ * If there was a deployment confirmation counting round and any unkown deployment is locked in.\n+ */\n+std::string GetLastUnknownDeploymentWarning(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, Consensus::CVersionBitsCacheInterface& versionBitsCache);\n+\n+#endif // BITCOIN_CONSENSUS_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "98437032026f4f5fe4d3b79e996b44e806743772",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODQzNzAzMjAyNmY0ZjVmZTRkM2I3OWU5OTZiNDRlODA2NzQzNzcy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-28T19:25:36Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-01T16:55:01Z"
      },
      "message": "BIP9: Introduce global/server with a global variable with a concurrent\nimplementation of Consensus::CVersionBitsCacheInterface",
      "tree": {
        "sha": "080490400c1be192378e9bb1ca4773fadcccc937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/080490400c1be192378e9bb1ca4773fadcccc937"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98437032026f4f5fe4d3b79e996b44e806743772",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98437032026f4f5fe4d3b79e996b44e806743772",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98437032026f4f5fe4d3b79e996b44e806743772",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98437032026f4f5fe4d3b79e996b44e806743772/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95776402f7e6e4bb102c248e4831fff128522a46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95776402f7e6e4bb102c248e4831fff128522a46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95776402f7e6e4bb102c248e4831fff128522a46"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 78,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c2d3cf88f53831db76c3af32d8a6c3a5003de53",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98437032026f4f5fe4d3b79e996b44e806743772/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98437032026f4f5fe4d3b79e996b44e806743772/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=98437032026f4f5fe4d3b79e996b44e806743772",
        "patch": "@@ -107,6 +107,7 @@ BITCOIN_CORE_H = \\\n   consensus/consensus.h \\\n   core_io.h \\\n   core_memusage.h \\\n+  global/server.h \\\n   httprpc.h \\\n   httpserver.h \\\n   init.h \\\n@@ -180,6 +181,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/versionbits.cpp \\\n+  global/server.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "12a241d9fe52ee3c536b0b02964dca69c468b8a5",
        "filename": "src/global/server.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98437032026f4f5fe4d3b79e996b44e806743772/src/global/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98437032026f4f5fe4d3b79e996b44e806743772/src/global/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/global/server.cpp?ref=98437032026f4f5fe4d3b79e996b44e806743772",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2016-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"server.h\"\n+\n+#include \"sync.h\"\n+\n+#include <map>\n+\n+static std::map<const void*, Consensus::CVersionBitsState*> mVersionBitsCache;\n+static CCriticalSection cs_versionbits;\n+\n+/**\n+ * The key is the pointer of the CBlockIndex and the value, the corresponding Consensus::CVersionBitsState.\n+ */\n+void ConcurrentVersionBitsCacheSetter(const void* blockIndex, Consensus::CVersionBitsState* versionBitsState)\n+{\n+    LOCK(cs_versionbits);\n+    mVersionBitsCache[blockIndex] = versionBitsState;\n+}\n+\n+const Consensus::CVersionBitsState* ConcurrentVersionBitsCacheGetter(const void* blockIndex)\n+{\n+    LOCK(cs_versionbits);\n+    const Consensus::CVersionBitsState* cachedState = NULL;\n+    if (mVersionBitsCache.count(blockIndex))\n+        cachedState = mVersionBitsCache.at(blockIndex);\n+    return cachedState;\n+}\n+\n+CVersionBitsCacheImplementation::CVersionBitsCacheImplementation()\n+{\n+    Set = ConcurrentVersionBitsCacheSetter;\n+    Get = ConcurrentVersionBitsCacheGetter;\n+}\n+    \n+CVersionBitsCacheImplementation::~CVersionBitsCacheImplementation()\n+{\n+    // TODO mVersionBitsCache singleton?\n+}\n+\n+namespace Global {\n+\n+CVersionBitsCacheImplementation versionBitsStateCache;\n+\n+} // namespace Global"
      },
      {
        "sha": "0e47f2bca281aef0d6844eb49a5e4a84861bcf76",
        "filename": "src/global/server.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98437032026f4f5fe4d3b79e996b44e806743772/src/global/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98437032026f4f5fe4d3b79e996b44e806743772/src/global/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/global/server.h?ref=98437032026f4f5fe4d3b79e996b44e806743772",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_GLOBALS_SERVER_H\n+#define BITCOIN_GLOBALS_SERVER_H\n+\n+#include \"consensus/interfaces.h\"\n+\n+// This files contains globals used in the server package (but not on\n+// lower layer packages like common).\n+\n+/** A concurrent implementation of Consensus::CVersionBitsCacheInterface. */\n+class CVersionBitsCacheImplementation : public Consensus::CVersionBitsCacheInterface\n+{\n+public:\n+    CVersionBitsCacheImplementation();\n+    ~CVersionBitsCacheImplementation();\n+};\n+\n+namespace Global {\n+\n+/** A global cache for versionbits calculation */\n+extern CVersionBitsCacheImplementation versionBitsStateCache;\n+\n+} // namespace Global\n+\n+#endif // BITCOIN_GLOBALS_SERVER_H"
      }
    ]
  },
  {
    "sha": "65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTkwOTQzNmQ0N2VhNmY2YzY4N2MwYTRjN2QyZDNmZmFkZDNkYmFi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-22T20:03:03Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-01T16:55:02Z"
      },
      "message": "BIP9: Use version bits in main::ConnectBlock(), main::UpdateTip() and miner::CreateNewBlock()",
      "tree": {
        "sha": "133d33af67bfff3dbd3c4803df5ade66a794e23c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/133d33af67bfff3dbd3c4803df5ade66a794e23c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98437032026f4f5fe4d3b79e996b44e806743772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98437032026f4f5fe4d3b79e996b44e806743772",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98437032026f4f5fe4d3b79e996b44e806743772"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 17,
      "deletions": 27
    },
    "files": [
      {
        "sha": "883c84682aa7b6b28e74bb4f653e0e2e64e336c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 22,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
        "patch": "@@ -14,6 +14,8 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n+#include \"consensus/versionbits.h\"\n+#include \"global/server.h\"\n #include \"hash.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n@@ -2123,6 +2125,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);\n \n+    unsigned int flags = Consensus::GetFlags(pindex, chainparams.GetConsensus(), Global::versionBitsStateCache);\n+\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n@@ -2158,12 +2162,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         }\n     }\n \n-    // BIP16 didn't become active until Apr 1 2012\n-    int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n-\n-    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n-\n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n     // when 75% of the network has upgraded:\n     if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n@@ -2221,7 +2219,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n \n-            if (fStrictPayToScriptHash)\n+            if (flags & SCRIPT_VERIFY_P2SH)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;\n                 // this is to prevent a \"rogue miner\" from creating\n@@ -2447,24 +2445,13 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n \n     cvBlockChange.notify_all();\n \n-    // Check the version of the last 100 blocks to see if we need to upgrade:\n     static bool fWarned = false;\n-    if (!IsInitialBlockDownload() && !fWarned)\n-    {\n-        int nUpgraded = 0;\n+    if (!IsInitialBlockDownload() && !fWarned) {\n         const CBlockIndex* pindex = chainActive.Tip();\n-        for (int i = 0; i < 100 && pindex != NULL; i++)\n-        {\n-            if (pindex->nVersion > CBlock::CURRENT_VERSION)\n-                ++nUpgraded;\n-            pindex = pindex->pprev;\n-        }\n-        if (nUpgraded > 0)\n-            LogPrintf(\"%s: %d of last 100 blocks above version %d\\n\", __func__, nUpgraded, (int)CBlock::CURRENT_VERSION);\n-        if (nUpgraded > 100/2)\n-        {\n+        std::string deploymentWarning = GetLastUnknownDeploymentWarning(pindex, chainParams.GetConsensus(), Global::versionBitsStateCache);\n+        if (deploymentWarning != \"\") {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n+            strMiscWarning = deploymentWarning;\n             CAlert::Notify(strMiscWarning, true);\n             fWarned = true;\n         }"
      },
      {
        "sha": "013a491a3139e302b8ea66adae180c7acac1a43a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
        "patch": "@@ -12,6 +12,8 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n+#include \"consensus/versionbits.h\"\n+#include \"global/server.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n@@ -79,11 +81,6 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n-    // -regtest only: allow overriding block.nVersion with\n-    // -blockversion=N to test forking scenarios\n-    if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n-\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);\n@@ -137,6 +134,12 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n+        pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus(), Global::versionBitsStateCache);\n+        // -regtest only: allow overriding block.nVersion with\n+        // -blockversion=N to test forking scenarios\n+        if (chainparams.MineBlocksOnDemand())\n+            pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();"
      }
    ]
  },
  {
    "sha": "b77f1f21eda2329d99d7f2c3242be228db58b131",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzdmMWYyMWVkYTIzMjlkOTlkN2YyYzMyNDJiZTIyOGRiNThiMTMx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-16T22:40:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-01T16:55:22Z"
      },
      "message": "BIP9/BIP68_BIP112: Use BIP68 and BIP112 as examples of BIP9 deployment\n\nTo do so, unify nLockTime and script validation flags",
      "tree": {
        "sha": "9efacd6e9b52f507e72ede24123b6022a7184605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9efacd6e9b52f507e72ede24123b6022a7184605"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b77f1f21eda2329d99d7f2c3242be228db58b131",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77f1f21eda2329d99d7f2c3242be228db58b131",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b77f1f21eda2329d99d7f2c3242be228db58b131",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77f1f21eda2329d99d7f2c3242be228db58b131/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65909436d47ea6f6c687c0a4c7d2d3ffadd3dbab"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 27,
      "deletions": 10
    },
    "files": [
      {
        "sha": "726fe89c59d56ebc037ae4be5c9b2a39896c290d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77f1f21eda2329d99d7f2c3242be228db58b131/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77f1f21eda2329d99d7f2c3242be228db58b131/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b77f1f21eda2329d99d7f2c3242be228db58b131",
        "patch": "@@ -81,6 +81,12 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::BIP68_BIP112].bitmask = 1;\n+        consensus.vDeployments[Consensus::BIP68_BIP112].nTimeout = 1;\n+        consensus.vDeployments[Consensus::BIP68_BIP112].nStartTime = 1; \n+\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -162,6 +168,12 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::BIP68_BIP112].bitmask = 1;\n+        consensus.vDeployments[Consensus::BIP68_BIP112].nTimeout = 1;\n+        consensus.vDeployments[Consensus::BIP68_BIP112].nStartTime = 1; \n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -225,6 +237,11 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::BIP68_BIP112].bitmask = 1;\n+        consensus.vDeployments[Consensus::BIP68_BIP112].nTimeout = 1;\n+        consensus.vDeployments[Consensus::BIP68_BIP112].nStartTime = 1; \n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "0ade4d66de6d79d660b2386e8286a7e98683d4f6",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77f1f21eda2329d99d7f2c3242be228db58b131/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77f1f21eda2329d99d7f2c3242be228db58b131/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=b77f1f21eda2329d99d7f2c3242be228db58b131",
        "patch": "@@ -13,13 +13,4 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for nSequence and nLockTime locks */\n-enum {\n-    /* Interpret sequence numbers as relative lock-time constraints. */\n-    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n-\n-    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n-    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n-};\n-\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "e3cc88d9953c45d50ae9b2a947551483338f5baf",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77f1f21eda2329d99d7f2c3242be228db58b131/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77f1f21eda2329d99d7f2c3242be228db58b131/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=b77f1f21eda2329d99d7f2c3242be228db58b131",
        "patch": "@@ -13,7 +13,7 @@ namespace Consensus {\n /** Order matters, see case LOCKED_IN in CalculateNextState() */\n enum DeploymentPos\n {\n-    BIP113,\n+    BIP68_BIP112,\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "1c7600a4746f22fbc1f67fea8cb04e543dd65f4b",
        "filename": "src/consensus/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77f1f21eda2329d99d7f2c3242be228db58b131/src/consensus/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77f1f21eda2329d99d7f2c3242be228db58b131/src/consensus/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/versionbits.cpp?ref=b77f1f21eda2329d99d7f2c3242be228db58b131",
        "patch": "@@ -172,6 +172,9 @@ unsigned int Consensus::GetFlags(const CBlockIndex* pindexPrev, const Params& co\n     if (!pVersionBitsState)\n         return flags;\n \n+    if (pVersionBitsState->vStates[BIP68_BIP112] == ACTIVATED)\n+        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY | LOCKTIME_VERIFY_SEQUENCE;\n+\n     return flags;\n }\n "
      },
      {
        "sha": "da483125061645c7ea445c619ba28a319920beb2",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77f1f21eda2329d99d7f2c3242be228db58b131/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77f1f21eda2329d99d7f2c3242be228db58b131/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=b77f1f21eda2329d99d7f2c3242be228db58b131",
        "patch": "@@ -86,6 +86,12 @@ enum\n     //\n     // See BIP112 for details\n     SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n+\n+    /* BIP68: Interpret sequence numbers as relative lock-time constraints. */\n+    LOCKTIME_VERIFY_SEQUENCE = (1U << 11),\n+\n+    /* BIP113: Use GetMedianTimePast() instead of nTime for end point timestamp. */\n+    LOCKTIME_MEDIAN_TIME_PAST = (1U << 12),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      }
    ]
  },
  {
    "sha": "990dda87b258c1e8d4d35b1fcbae4106303664f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTBkZGE4N2IyNThjMWU4ZDRkMzViMWZjYmFlNDEwNjMwMzY2NGYw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-26T01:13:36Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-01T18:07:58Z"
      },
      "message": "Bonus: Deploy hardforks using BIP9 and the hardfork bit\n\nsquash use hardfork bit",
      "tree": {
        "sha": "d29fd4f9c7e78d9959a4b0586341b7b55e0ee7fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d29fd4f9c7e78d9959a4b0586341b7b55e0ee7fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/990dda87b258c1e8d4d35b1fcbae4106303664f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990dda87b258c1e8d4d35b1fcbae4106303664f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/990dda87b258c1e8d4d35b1fcbae4106303664f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990dda87b258c1e8d4d35b1fcbae4106303664f0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b77f1f21eda2329d99d7f2c3242be228db58b131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77f1f21eda2329d99d7f2c3242be228db58b131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b77f1f21eda2329d99d7f2c3242be228db58b131"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "976a5d089bf7c840d61cb25aabdb3e921d490f51",
        "filename": "src/consensus/versionbits.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/990dda87b258c1e8d4d35b1fcbae4106303664f0/src/consensus/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/990dda87b258c1e8d4d35b1fcbae4106303664f0/src/consensus/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/versionbits.cpp?ref=990dda87b258c1e8d4d35b1fcbae4106303664f0",
        "patch": "@@ -178,17 +178,30 @@ unsigned int Consensus::GetFlags(const CBlockIndex* pindexPrev, const Params& co\n     return flags;\n }\n \n+static bool IsHardfork(DeploymentPos deploymentPos)\n+{\n+    return false;\n+}\n+\n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, Consensus::CVersionBitsCacheInterface& versionBitsCache)\n {\n     int32_t nVersion = 0;\n     const Consensus::CVersionBitsState* pVersionBitsState = GetVersionBitsState(pindexPrev, consensusParams, versionBitsCache);\n     if (!pVersionBitsState)\n         return nVersion;\n \n-    for (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+    for (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i) {\n+\n         if (pVersionBitsState->vStates[i] == STARTED || pVersionBitsState->vStates[i] == LOCKED_IN)\n             nVersion |= consensusParams.vDeployments[i].bitmask;\n \n+        // If a hardfork was just activated, set the hardfork bit.\n+        if (IsHardfork(i) && pVersionBitsState->vStates[i] == ACTIVATED &&\n+            (pindexPrev->nHeight + 1) % consensusParams.nMinerConfirmationWindow == 0 && \n+            GetVersionBitsState(pindexPrev->pprev, consensusParams, versionBitsCache)->vStates[i] != ACTIVATED)\n+            nVersion |= HARDFORK_BIT;\n+    }\n+\n     return nVersion == 0 ? VERSIONBITS_LAST_OLD_BLOCK_VERSION : nVersion | VERSIONBIT_BIT;\n }\n "
      },
      {
        "sha": "3189131f00fef31976515f0b6fe9bd0a657f3d0a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/990dda87b258c1e8d4d35b1fcbae4106303664f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/990dda87b258c1e8d4d35b1fcbae4106303664f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=990dda87b258c1e8d4d35b1fcbae4106303664f0",
        "patch": "@@ -3140,6 +3140,10 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n+    if (block.nVersion & Consensus::HARDFORK_BIT)\n+        state.Invalid(false, REJECT_OBSOLETE, \"bad-version-hardfork\",\n+                             strprintf(\"rejected nVersion=%d: the deployment of an unkown hardfork has been signaled in this block\", block.nVersion));\n+\n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n     for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n         if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))"
      }
    ]
  }
]