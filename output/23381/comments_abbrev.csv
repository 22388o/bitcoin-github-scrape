glozow,2021-10-28 15:17:33,"Thanks for the review @jnewbery, took your suggestions",https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-953947619,953947619,
DrahtBot,2021-10-28 18:37:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23465](https://github.com/bitcoin/bitcoin/pull/23465) (Remove CChainParams and CTxMemPool params from ATMP by lsilva01)\",https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-954101804,954101804,
glozow,2021-11-05 19:50:15,"Thanks for the reviews @ariard and @jnewbery, took suggestions",https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-962174813,962174813,
ariard,2021-11-09 01:55:19,"Code Review ACK 14cd7bf\n\nChanges since last review have been removing of `Workspace`-level descendant limits, introducing of fd92b0c39,  stripping off the `setAncestors` alias, improving `PackageMempoolChecks`'s comment, drying up `PackageMempoolChecks` from its `Workspace` parameter.",https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-963741194,963741194,
jnewbery,2021-11-09 11:44:43,Code review ACK 14cd7bf793547fa5143acece564482271f5c30bc,https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-964073867,964073867,
jnewbery,2021-11-09 11:47:45,"I think this might be RFM now since it's a simple refactor.\n\nPerhaps @t-bast also wants to review this? It's basically the same commits from #22674 that you've already reviewed.",https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-964076982,964076982,
laanwj,2021-11-09 15:46:14,"Code review ACK 14cd7bf793547fa5143acece564482271f5c30bc, thanks for adding documentation and clarifying the code\n",https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-964275979,964275979,
jnewbery,2021-10-28 13:17:49,"No need to reorder `coins_to_uncache, test_accept` to `test_accept, coins_to_uncache` here. It makes your static ctors inconsistent in their argument ordering.",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738380554,738380554,src/validation.cpp
jnewbery,2021-10-28 13:23:41,This comment is a little bit stranded now that the `txdata` variable has been removed. Perhaps just remove the first sentence?,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738385962,738385962,src/validation.cpp
jnewbery,2021-10-28 13:38:04,"```suggestion\n        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n```\n```suggestion\n        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n```",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738399598,738399598,src/validation.cpp
jnewbery,2021-10-28 13:48:08,nit: the `tx_` is a bit redundant here. This is a member of the `Workspace` object which is a collection of data relating to a single candidate transaction.,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738409406,738409406,src/validation.cpp
jnewbery,2021-10-28 14:35:00,"Is there any performance penalty in doing this lookup twice? I suspect it's not too bad since each of the lookups are into a boost::multi_index::hashed_unique map, which has an amortized complexity of O(1) (https://www.boost.org/doc/libs/1_56_0/libs/multi_index/doc/reference/hash_indices.html#lookup).\n\nEven so, it seems a shame to have to query the mempool twice for the same data. Could this s",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738458528,738458528,src/validation.cpp
glozow,2021-10-28 15:15:58,Done,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498714,738498714,src/validation.cpp
glozow,2021-10-28 15:16:08,Removed first sentence,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498871,738498871,src/validation.cpp
glozow,2021-10-28 15:16:24,Done,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499125,738499125,src/validation.cpp
glozow,2021-10-28 15:16:49,"Hok, took out the `tx_`",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499521,738499521,src/validation.cpp
glozow,2021-10-28 15:17:11,added a `m_iters_conflicting` to the `workspace` struct,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499868,738499868,src/validation.cpp
jnewbery,2021-10-28 15:59:11,"nit: you could also comment the `m_all_conflicting` member below to emphasize that it contains the conflicts with all descendants. And perhaps rename the members to `m_direct_conflicts` and `m_all_conflicts` to highlight that difference.\n\nAlso, the `m_conflicts` member above is only used in `PreChecks()`, so could be a local variable in that function rather than a member of `Workspace`.\n\nP",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738537426,738537426,src/validation.cpp
jnewbery,2021-10-29 11:01:52,"This parameter isn't used in this PR or #22674. I suggest leaving it out until it's used in #22290 (and I think there, you can just pass the vector of `Workspace`s and not the vector of `CTransactionRef`s, since the `Workspace`s contain the `CTransactionRef`s)",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r739138737,739138737,src/validation.cpp
ariard,2021-11-02 00:35:21,"If you can backport the renaming to `m_tx_limit_descendants` from #22674, I think that's good for review clarity. \n\nThat said, I still don't get why introducing a new pair of descendant limits at the `Workspace`-level, _in addition_ of the one already present in `MemPoolAccept`. AFAICT, the intermediate state, as modified in consequence to account for carve-out relaxation in `PreChecks` isn't ",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740643940,740643940,src/validation.cpp
ariard,2021-11-02 00:43:42,Maybe good timing to rename `m_hash` to `m_txid_hash` or anything else to break ambiguity in prevision of wtxid acceptance.,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740646512,740646512,src/validation.cpp
ariard,2021-11-02 00:51:49,"nit: This comment could be replicated, at least in substance in `m_modified_fees` member declaration in `Workspace`. Naming could be also clearer to indicate the source of the modification itself, like `m_priority_fees`",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740648931,740648931,src/validation.cpp
ariard,2021-11-02 01:00:03,"Note the comment above `PreChecks` also mention evaluation package limits. I think both of statements are true, though they don't refer to the same set of package limits. IIRC the first ones in `PreChecks` are the in-mempool package limits while the second ones concern atomically accepted package, which is stricter under the union rule. \n\nI think we can improve documentation to establish clear",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740651256,740651256,src/validation.cpp
glozow,2021-11-02 14:16:09,"You're right that it's not necessary yet in #22674 - I apologize, as the cut off for splitting it out of #22290 was a little bit arbitrary, so there are a few not-yet-relevant-until-later refactors in this PR.\n\nTo explain the problem: when we add package RBF, we don't want to increase the `MemPoolAccept::m_limit_descendants` here: https://github.com/bitcoin/bitcoin/blob/04670ef81ea2300fcba4e1a",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r741099846,741099846,src/validation.cpp
glozow,2021-11-02 14:17:20,"Good point, though I would prefer to just remove `m_hash` from `Workspace` entirely. The hashes are already cached in the `CTransaction` object, so we can just call `ptx->GetHash()` and `ptx->GetWitnessHash()` directly.",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r741101014,741101014,src/validation.cpp
glozow,2021-11-04 16:33:44,Removed the commit from this PR - will add later when needed in package RBF,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012051,743012051,src/validation.cpp
glozow,2021-11-04 16:33:59,Added a commit to document the `Workspace` members,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012329,743012329,src/validation.cpp
glozow,2021-11-04 16:34:24,Removed from this PR,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012683,743012683,src/validation.cpp
glozow,2021-11-04 16:35:13,Added comment to `m_modified_fees` 👍 ,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743013476,743013476,src/validation.cpp
glozow,2021-11-04 18:56:58,Edited the comment to clarify that there's individual and package ancestor/desc limits,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743121401,743121401,src/validation.cpp
ariard,2021-11-09 00:44:28,Yes that direction is even better!,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745202366,745202366,src/validation.cpp
ariard,2021-11-09 01:06:43,"> To explain the problem: when we add package RBF, we don't want to increase the > MemPoolAccept::m_limit_descendants here:\n>\n> bitcoin/src/validation.cpp\n> \n> Line 765 in 04670ef\n> m_limit_descendants += 1; \n>\n> For example, if we had a package of 5 parents and 1 child, and each of the parents had exactly 1 > conflict, this would cause us to increase the descendant limit 5 times. Th",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745210795,745210795,src/validation.cpp
MarcoFalke,2021-11-09 17:47:56,Would it make sense to add `Assume/Assert(ws.m_rbf);`?,https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745864415,745864415,src/validation.cpp
glozow,2021-11-09 18:40:10,"Sure, there's no harm in adding one. If safety is a concern, note that this is a no-op if `m_iters_conflicting` is empty:`PaysMoreThanConflicts`, `GetEntriesForConflicts`, `HasNoNewUnconfirmed`, and `PaysForRBF` should all simply return `std::nullopt` if they're called with empty or 0 inputs. So if we accidentally called this function with `m_rbf` false or no conflicts, it would be some small wast",https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745903647,745903647,src/validation.cpp
