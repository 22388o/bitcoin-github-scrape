[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640300639",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#issuecomment-640300639",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19143",
    "id": 640300639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDMwMDYzOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T00:08:21Z",
    "updated_at": "2020-07-11T20:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19259 (tests: Add fuzzing harness for LoadMempool(...) and DumpMempool(...) by practicalswift)\n* #19203 (net: Add regression fuzz harness for CVE-2017-18350. Add FuzzedSocket. Add thin SOCKET wrapper. by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640300639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658485369",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#issuecomment-658485369",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19143",
    "id": 658485369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODQ4NTM2OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T00:58:53Z",
    "updated_at": "2020-07-15T00:58:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Combined fuzzing coverage for only the fuzzers in _this_ branch: https://crypt-iq.github.io/pr19143_cov/src/\r\n> \r\n> Each fuzzer was run for about 24 hours. I used a variation of libFuzzer and AFL.\r\n\r\nWow, that's some thorough testing! Thanks a lot!\r\n\r\n> There seems to be some missing coverage in `CBlockPolicyEstimator::Write` & `CBlockPolicyEstimator::Read`. That could probably be fixed by better seeds.\r\n\r\nI think the perceived lack of coverage is simply due to `src/test/fuzz/policy_estimator` being very slow (`CBlockPolicyEstimator` creation is costly): I believe that given enough time the fuzzer will span the full CFG :)\r\n\r\nTo speed things up I've now added also a dedicated fuzzer for `CBlockPolicyEstimator::{Write,Read}` which re-uses the `CBlockPolicyEstimator` object across runs (without sacrificing substantial coverage stability AFAICT): see `src/test/fuzz/policy_estimator_io.cpp`.\r\n\r\nThis dedicated fuzzer is running at >1000 exec/s compared to <50 exec/s for the non-dedicated one.\r\n\r\n> There's also missing coverage in `LoadExternalBlockFile`, and this can also be fixed by better seeds. I don't know the format of the external block files (I copy pasted the magic bytes from `MessageStart()` as seeds but no luck). This was the only slow fuzzing harness with ~5 execs/s.\r\n\r\nlibFuzzer from LLVM 10 is able to reach past the magic bytes check within a few seconds. Perhaps you were using an old version of libFuzzer when running the `load_external_block_file` fuzzer?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658485369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659460159",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#issuecomment-659460159",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19143",
    "id": 659460159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTQ2MDE1OQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-16T14:45:28Z",
    "updated_at": "2020-07-16T14:45:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can confirm that the new `policy_estimator_io` fuzzer is significantly faster with libfuzzer (600-700 exec/s on one core) and hits checks in `Read` & `Write` that it otherwise doesn't hit in the `policy_estimator` fuzzer due to being slower. Also tried with AFL but was very slow since I forgot to compile with persistent mode :/. Will review the latest set of changes now. Coverage for just the `policy_estimator_io` fuzzer is here https://crypt-iq.github.io/policy_cov_llvm_outs/src/policy/fees.cpp.gcov.html",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659460159/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660410612",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#issuecomment-660410612",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19143",
    "id": 660410612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQxMDYxMg==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-18T02:33:57Z",
    "updated_at": "2020-07-18T02:33:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK ad6c348",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660410612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453112343",
    "pull_request_review_id": 446741006,
    "id": 453112343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMjM0Mw==",
    "diff_hunk": "@@ -228,4 +229,121 @@ NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataPro\n     return result;\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        std::memset(buf, 0, size);\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? size : random_bytes.size();",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 80,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "97ee502b664eabbdd338f034a16b31c775057638",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand the need for the call to `ConsumeBool()`. Isn't `size` necessarily equal to `random_bytes.size()`?",
    "created_at": "2020-07-10T22:58:07Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453112343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453112343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453112343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453112343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453180452",
    "pull_request_review_id": 446793695,
    "id": 453180452,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MDQ1Mg==",
    "diff_hunk": "@@ -228,4 +229,121 @@ NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataPro\n     return result;\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        std::memset(buf, 0, size);\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? size : random_bytes.size();",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 80,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "97ee502b664eabbdd338f034a16b31c775057638",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If the m_fuzzed_data_provider is empty it should give out less bytes, so `size` would be larger. `ConsumeBool` would return false in that case and this condition would evaluate to `size`.\r\n\r\nSo it seems `n` can simply be replaced by `size`",
    "created_at": "2020-07-11T10:18:29Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453180452",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453180452"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453180452"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453180452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 453112343
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453183002",
    "pull_request_review_id": 446795248,
    "id": 453183002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MzAwMg==",
    "diff_hunk": "@@ -228,4 +229,121 @@ NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataPro\n     return result;\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        std::memset(buf, 0, size);\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? size : random_bytes.size();",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 80,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "97ee502b664eabbdd338f034a16b31c775057638",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh I didn't think about that edge case. Don't you mean the condition should evaluate to `random_bytes.size()` if `ConsumeBool()` is false. So `n` replaced by `random_bytes.size()` instead?",
    "created_at": "2020-07-11T10:50:18Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453183002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453183002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453183002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453183002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 453112343
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453183062",
    "pull_request_review_id": 446795282,
    "id": 453183062,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MzA2Mg==",
    "diff_hunk": "@@ -228,4 +229,121 @@ NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataPro\n     return result;\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        std::memset(buf, 0, size);\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? size : random_bytes.size();",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 80,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "97ee502b664eabbdd338f034a16b31c775057638",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah right off-by-one :man_facepalming: ",
    "created_at": "2020-07-11T10:51:11Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453183062",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453183062"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r453183062"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/453183062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 453112343
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454616440",
    "pull_request_review_id": 448430879,
    "id": 454616440,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNjQ0MA==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <array>\n+#include <cstdint>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    FuzzedFileProvider fuzzed_file_provider = ConsumeFile(fuzzed_data_provider);\n+    std::optional<CBufferedFile> opt_buffered_file;\n+    FILE* fuzzed_file = fuzzed_file_provider.open();\n+    try {\n+        opt_buffered_file.emplace(fuzzed_file, fuzzed_data_provider.ConsumeIntegralInRange<uint64_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<uint64_t>(0, 4096), fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeIntegral<int>());\n+    } catch (const std::ios_base::failure&) {\n+        if (fuzzed_file != nullptr) {\n+            fclose(fuzzed_file);\n+        }\n+    }\n+    if (opt_buffered_file && fuzzed_file != nullptr) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 4)) {\n+            case 0: {\n+                std::array<uint8_t, 4096> arr{};\n+                try {\n+                    opt_buffered_file->read((char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+                } catch (const std::ios_base::failure&) {\n+                }\n+                break;\n+            }\n+            case 1: {",
    "path": "src/test/fuzz/buffered_file.cpp",
    "position": 43,
    "original_position": 42,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "30d545c15a1fcbae1d4875d2af4fbac40fc43cf2",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why did you leave out `SetPos` when calling `CBufferedFile` functions?",
    "created_at": "2020-07-14T20:13:41Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454616440",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454616440"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454616440"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454616440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 43,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454715644",
    "pull_request_review_id": 448546909,
    "id": 454715644,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNTY0NA==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <array>\n+#include <cstdint>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    FuzzedFileProvider fuzzed_file_provider = ConsumeFile(fuzzed_data_provider);\n+    std::optional<CBufferedFile> opt_buffered_file;\n+    FILE* fuzzed_file = fuzzed_file_provider.open();\n+    try {\n+        opt_buffered_file.emplace(fuzzed_file, fuzzed_data_provider.ConsumeIntegralInRange<uint64_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<uint64_t>(0, 4096), fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeIntegral<int>());\n+    } catch (const std::ios_base::failure&) {\n+        if (fuzzed_file != nullptr) {\n+            fclose(fuzzed_file);\n+        }\n+    }\n+    if (opt_buffered_file && fuzzed_file != nullptr) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 4)) {\n+            case 0: {\n+                std::array<uint8_t, 4096> arr{};\n+                try {\n+                    opt_buffered_file->read((char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+                } catch (const std::ios_base::failure&) {\n+                }\n+                break;\n+            }\n+            case 1: {",
    "path": "src/test/fuzz/buffered_file.cpp",
    "position": 43,
    "original_position": 42,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "30d545c15a1fcbae1d4875d2af4fbac40fc43cf2",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch! Now fuzzing also `SetPos` :)",
    "created_at": "2020-07-15T00:11:44Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454715644",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454715644"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454715644"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454715644/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 43,
    "original_line": 43,
    "side": "RIGHT",
    "in_reply_to_id": 454616440
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454735593",
    "pull_request_review_id": 448568500,
    "id": 454735593,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNTU5Mw==",
    "diff_hunk": "@@ -228,4 +229,121 @@ NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataPro\n     return result;\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        std::memset(buf, 0, size);\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? size : random_bytes.size();",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 80,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "97ee502b664eabbdd338f034a16b31c775057638",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now simply using `random_bytes.size()`. I think I was trying to be too clever :)  Please re-review :)",
    "created_at": "2020-07-15T01:25:16Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454735593",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454735593"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454735593"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454735593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 453112343
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454751328",
    "pull_request_review_id": 448585447,
    "id": 454751328,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1MTMyOA==",
    "diff_hunk": "@@ -264,4 +265,209 @@ void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::\n     static const BasicTestingSetup basic_testing_setup{chain_name, {\"-nodebuglogfile\"}};\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        if (AdditionOverflow((uint64_t)fuzzed_file->m_offset, random_bytes.size())) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        fuzzed_file->m_offset += random_bytes.size();\n+        return random_bytes.size();\n+    }\n+\n+    static ssize_t write(void* cookie, const char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n+        if (AdditionOverflow(fuzzed_file->m_offset, n)) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        fuzzed_file->m_offset += n;\n+        return n;\n+    }\n+\n+    static int seek(void* cookie, int64_t* offset, int whence)\n+    {\n+        assert(whence == SEEK_SET || whence == SEEK_CUR); // SEEK_END not implemented yet.\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        int64_t new_offset = 0;\n+        if (whence == SEEK_SET) {\n+            new_offset = *offset;\n+        } else if (whence == SEEK_CUR) {\n+            if (AdditionOverflow(new_offset, *offset)) {",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 105,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "46ce3bf4c663fce393c1cf8e74833549847e6bfb",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`new_offset` should be `fuzzed_file->m_offset`",
    "created_at": "2020-07-15T02:23:14Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454751328",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454751328"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454751328"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454751328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 361,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454875264",
    "pull_request_review_id": 448585447,
    "id": 454875264,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NTI2NA==",
    "diff_hunk": "@@ -264,4 +265,122 @@ void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::\n     static const BasicTestingSetup basic_testing_setup{chain_name, {\"-nodebuglogfile\"}};\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else",
    "path": "src/test/fuzz/util.h",
    "position": 62,
    "original_position": 62,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "3f12c9334f6bc269c3560623498ca44913197605",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could return early at the top of the function `#ifndef _GNU_SOURCE`, then you wouldn't need these macros here?",
    "created_at": "2020-07-15T08:17:58Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454875264",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454875264"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454875264"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454875264/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 318,
    "original_line": 318,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454884408",
    "pull_request_review_id": 448585447,
    "id": 454884408,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NDQwOA==",
    "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <array>\n+#include <cstdint>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    FuzzedAutoFileProvider fuzzed_auto_file_provider = ConsumeAutoFile(fuzzed_data_provider);\n+    CAutoFile auto_file = fuzzed_auto_file_provider.open();\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            std::array<uint8_t, 4096> arr{};\n+            try {\n+                auto_file.read((char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            } catch (const std::ios_base::failure&) {\n+            }\n+            break;\n+        }\n+        case 1: {\n+            const std::array<uint8_t, 4096> arr{};\n+            try {\n+                auto_file.write((const char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            } catch (const std::ios_base::failure&) {\n+            }\n+            break;\n+        }\n+        case 2: {\n+            try {\n+                auto_file.ignore(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            } catch (const std::ios_base::failure&) {\n+            }\n+            break;\n+        }\n+        case 3: {\n+            auto_file.fclose();\n+            break;\n+        }\n+        case 4: {\n+            ReadFromStream(fuzzed_data_provider, auto_file);\n+            break;\n+        }\n+        case 5: {\n+            WriteToStream(fuzzed_data_provider, auto_file);\n+            break;\n+        }\n+        }\n+    }\n+    (void)auto_file.Get();\n+    (void)auto_file.GetType();\n+    (void)auto_file.GetVersion();\n+    (void)auto_file.IsNull();\n+    if (fuzzed_data_provider.ConsumeBool()) {",
    "path": "src/test/fuzz/autofile.cpp",
    "position": 66,
    "original_position": 66,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "d03f2588a42123de5b13179c2435ce12f2eddf58",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this gated by `ConsumeBool()` to test the behavior that, if this isn't hit, `fclose()` is called automatically in the destructor?",
    "created_at": "2020-07-15T08:33:22Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454884408",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454884408"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454884408"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454884408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454888506",
    "pull_request_review_id": 448585447,
    "id": 454888506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4ODUwNg==",
    "diff_hunk": "@@ -48,17 +49,30 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                 break;\n             }\n             case 3: {\n+                if (!opt_buffered_file->SetPos(fuzzed_data_provider.ConsumeIntegralInRange<uint64_t>(0, 4096))) {\n+                    setpos_fail = true;",
    "path": "src/test/fuzz/buffered_file.cpp",
    "position": 53,
    "original_position": 16,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "8cf3f3492d0e0fad9f19c6a70381ee3ecfe9b13a",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this be set back to `false` upon successful call to `SetPos`?",
    "created_at": "2020-07-15T08:40:11Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454888506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454888506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454888506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454888506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 53,
    "original_line": 53,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454893815",
    "pull_request_review_id": 448585447,
    "id": 454893815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5MzgxNQ==",
    "diff_hunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    FuzzedAutoFileProvider fuzzed_auto_file_provider = ConsumeAutoFile(fuzzed_data_provider);\n+    CAutoFile fuzzed_auto_file = fuzzed_auto_file_provider.open();\n+    // Re-using block_policy_estimator across runs to avoid costly creation of CBlockPolicyEstimator object.\n+    static CBlockPolicyEstimator block_policy_estimator;\n+    if (block_policy_estimator.Read(fuzzed_auto_file)) {",
    "path": "src/test/fuzz/policy_estimator_io.cpp",
    "position": 25,
    "original_position": 25,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "bb8711426e0b7fe7d072d65e52a2755bab1d9134",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since `block_policy_estimator` is declared static, it shouldn't matter if the `Read` call fails because the `Write` call could still succeed so I don't think it needs to be gated.",
    "created_at": "2020-07-15T08:48:37Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454893815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454893815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454893815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454893815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454980370",
    "pull_request_review_id": 448862389,
    "id": 454980370,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDM3MA==",
    "diff_hunk": "@@ -264,4 +265,122 @@ void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::\n     static const BasicTestingSetup basic_testing_setup{chain_name, {\"-nodebuglogfile\"}};\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else",
    "path": "src/test/fuzz/util.h",
    "position": 62,
    "original_position": 62,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "3f12c9334f6bc269c3560623498ca44913197605",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is intentional actually: I want exactly the same input bytes to be consumed by an `open()` call regardless of `fopencookie` being available or not.",
    "created_at": "2020-07-15T11:25:47Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454980370",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454980370"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454980370"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454980370/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 318,
    "original_line": 318,
    "side": "RIGHT",
    "in_reply_to_id": 454875264
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454980944",
    "pull_request_review_id": 448863112,
    "id": 454980944,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDk0NA==",
    "diff_hunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <array>\n+#include <cstdint>\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    FuzzedAutoFileProvider fuzzed_auto_file_provider = ConsumeAutoFile(fuzzed_data_provider);\n+    CAutoFile auto_file = fuzzed_auto_file_provider.open();\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            std::array<uint8_t, 4096> arr{};\n+            try {\n+                auto_file.read((char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            } catch (const std::ios_base::failure&) {\n+            }\n+            break;\n+        }\n+        case 1: {\n+            const std::array<uint8_t, 4096> arr{};\n+            try {\n+                auto_file.write((const char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            } catch (const std::ios_base::failure&) {\n+            }\n+            break;\n+        }\n+        case 2: {\n+            try {\n+                auto_file.ignore(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            } catch (const std::ios_base::failure&) {\n+            }\n+            break;\n+        }\n+        case 3: {\n+            auto_file.fclose();\n+            break;\n+        }\n+        case 4: {\n+            ReadFromStream(fuzzed_data_provider, auto_file);\n+            break;\n+        }\n+        case 5: {\n+            WriteToStream(fuzzed_data_provider, auto_file);\n+            break;\n+        }\n+        }\n+    }\n+    (void)auto_file.Get();\n+    (void)auto_file.GetType();\n+    (void)auto_file.GetVersion();\n+    (void)auto_file.IsNull();\n+    if (fuzzed_data_provider.ConsumeBool()) {",
    "path": "src/test/fuzz/autofile.cpp",
    "position": 66,
    "original_position": 66,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "d03f2588a42123de5b13179c2435ce12f2eddf58",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes it is, but I want the fuzzer to also exercise the `release()` code path here, and it isn't called in the destructor :)",
    "created_at": "2020-07-15T11:27:03Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454980944",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454980944"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454980944"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454980944/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 454884408
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454982020",
    "pull_request_review_id": 448864458,
    "id": 454982020,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MjAyMA==",
    "diff_hunk": "@@ -48,17 +49,30 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                 break;\n             }\n             case 3: {\n+                if (!opt_buffered_file->SetPos(fuzzed_data_provider.ConsumeIntegralInRange<uint64_t>(0, 4096))) {\n+                    setpos_fail = true;",
    "path": "src/test/fuzz/buffered_file.cpp",
    "position": 53,
    "original_position": 16,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "8cf3f3492d0e0fad9f19c6a70381ee3ecfe9b13a",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unfortunately I think a single failed `SetPos` call is sufficient to set a subsequent `FindByte` call into an infinite loop. A successful `SetPos` won't necessarily undo the harm of a prior failed `SetPos` call :)",
    "created_at": "2020-07-15T11:29:21Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454982020",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454982020"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454982020"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454982020/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 53,
    "original_line": 53,
    "side": "RIGHT",
    "in_reply_to_id": 454888506
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454984243",
    "pull_request_review_id": 448867179,
    "id": 454984243,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDI0Mw==",
    "diff_hunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    FuzzedAutoFileProvider fuzzed_auto_file_provider = ConsumeAutoFile(fuzzed_data_provider);\n+    CAutoFile fuzzed_auto_file = fuzzed_auto_file_provider.open();\n+    // Re-using block_policy_estimator across runs to avoid costly creation of CBlockPolicyEstimator object.\n+    static CBlockPolicyEstimator block_policy_estimator;\n+    if (block_policy_estimator.Read(fuzzed_auto_file)) {",
    "path": "src/test/fuzz/policy_estimator_io.cpp",
    "position": 25,
    "original_position": 25,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "bb8711426e0b7fe7d072d65e52a2755bab1d9134",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The thinking here is that a successful `Read` will \"reset\" (to some extent) the state of `block_policy_estimator`. Without the check we might be calling `Write(\u2026)` on `block_policy_estimator` that is populated from a successful `Read` in a previous run: that would introduce unnecessary coverage instability.\r\n\r\nMore specifically this is the case I'm guarding against:\r\n\r\n```\r\nrun n:\r\n  block_policy_estimator.Read(\u2026) returns true\r\n  block_policy_estimator.Write(\u2026)\r\nrun n+1:\r\n  block_policy_estimator.Read(\u2026) returns false\r\n  block_policy_estimator.Write(\u2026) # now with state from run n (instead of n+1)\r\n```\r\n\r\nI want to minimize the unnecessary coverage instability that unavoidably may arise from re-using `block_policy_estimator` between runs (which in turn is done to get decent performance for this otherwise super slow fuzzing harness).",
    "created_at": "2020-07-15T11:33:42Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454984243",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454984243"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454984243"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454984243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 454893815
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454988740",
    "pull_request_review_id": 448872848,
    "id": 454988740,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4ODc0MA==",
    "diff_hunk": "@@ -264,4 +265,209 @@ void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::\n     static const BasicTestingSetup basic_testing_setup{chain_name, {\"-nodebuglogfile\"}};\n }\n \n+class FuzzedFileProvider\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+    int64_t m_offset = 0;\n+\n+public:\n+    FuzzedFileProvider(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    FILE* open()\n+    {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return nullptr;\n+        }\n+        std::string mode;\n+        switch (m_fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+        case 0: {\n+            mode = \"r\";\n+            break;\n+        }\n+        case 1: {\n+            mode = \"r+\";\n+            break;\n+        }\n+        case 2: {\n+            mode = \"w\";\n+            break;\n+        }\n+        case 3: {\n+            mode = \"w+\";\n+            break;\n+        }\n+        case 4: {\n+            mode = \"a\";\n+            break;\n+        }\n+        case 5: {\n+            mode = \"a+\";\n+            break;\n+        }\n+        }\n+#ifdef _GNU_SOURCE\n+        const cookie_io_functions_t io_hooks = {\n+            FuzzedFileProvider::read,\n+            FuzzedFileProvider::write,\n+            FuzzedFileProvider::seek,\n+            FuzzedFileProvider::close,\n+        };\n+        return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+        (void)mode;\n+        return nullptr;\n+#endif\n+    }\n+\n+    static ssize_t read(void* cookie, char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+        if (random_bytes.empty()) {\n+            return 0;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        if (AdditionOverflow((uint64_t)fuzzed_file->m_offset, random_bytes.size())) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        fuzzed_file->m_offset += random_bytes.size();\n+        return random_bytes.size();\n+    }\n+\n+    static ssize_t write(void* cookie, const char* buf, size_t size)\n+    {\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n+        if (AdditionOverflow(fuzzed_file->m_offset, n)) {\n+            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        }\n+        fuzzed_file->m_offset += n;\n+        return n;\n+    }\n+\n+    static int seek(void* cookie, int64_t* offset, int whence)\n+    {\n+        assert(whence == SEEK_SET || whence == SEEK_CUR); // SEEK_END not implemented yet.\n+        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+        int64_t new_offset = 0;\n+        if (whence == SEEK_SET) {\n+            new_offset = *offset;\n+        } else if (whence == SEEK_CUR) {\n+            if (AdditionOverflow(new_offset, *offset)) {",
    "path": "src/test/fuzz/util.h",
    "position": null,
    "original_position": 105,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "46ce3bf4c663fce393c1cf8e74833549847e6bfb",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, nice catch! Thanks for noticing: now fixed!",
    "created_at": "2020-07-15T11:42:51Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454988740",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454988740"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454988740"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454988740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 361,
    "side": "RIGHT",
    "in_reply_to_id": 454751328
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454988782",
    "pull_request_review_id": 448872908,
    "id": 454988782,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4ODc4Mg==",
    "diff_hunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    FuzzedAutoFileProvider fuzzed_auto_file_provider = ConsumeAutoFile(fuzzed_data_provider);\n+    CAutoFile fuzzed_auto_file = fuzzed_auto_file_provider.open();\n+    // Re-using block_policy_estimator across runs to avoid costly creation of CBlockPolicyEstimator object.\n+    static CBlockPolicyEstimator block_policy_estimator;\n+    if (block_policy_estimator.Read(fuzzed_auto_file)) {",
    "path": "src/test/fuzz/policy_estimator_io.cpp",
    "position": 25,
    "original_position": 25,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "bb8711426e0b7fe7d072d65e52a2755bab1d9134",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok this makes much more sense. Otherwise it's not always possible to get the same coverage I think? Different machines on different runs may not hit the same `Read`->`Write`->`Read(false)` calls.",
    "created_at": "2020-07-15T11:42:56Z",
    "updated_at": "2020-07-15T11:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454988782",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454988782"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454988782"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454988782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 454893815
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454992886",
    "pull_request_review_id": 448878087,
    "id": 454992886,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5Mjg4Ng==",
    "diff_hunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    FuzzedAutoFileProvider fuzzed_auto_file_provider = ConsumeAutoFile(fuzzed_data_provider);\n+    CAutoFile fuzzed_auto_file = fuzzed_auto_file_provider.open();\n+    // Re-using block_policy_estimator across runs to avoid costly creation of CBlockPolicyEstimator object.\n+    static CBlockPolicyEstimator block_policy_estimator;\n+    if (block_policy_estimator.Read(fuzzed_auto_file)) {",
    "path": "src/test/fuzz/policy_estimator_io.cpp",
    "position": 25,
    "original_position": 25,
    "commit_id": "ad6c34881dc125c973b6b9ba1daa999d3141b1ae",
    "original_commit_id": "bb8711426e0b7fe7d072d65e52a2755bab1d9134",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Crypt-iQ Exactly! We want to have \"coverage stability\": a given input should result in the same coverage for a single run regardless of what has happened in previous runs. Achieving 100% coverage stability is not always possible. It might be due to architectural reasons (globals is a typical example), or it might be due to performance reasons (re-using an object might be required to get decent performance in terms of execs/s). We want to do what we can to at least minimise _unnecessary_ coverage instability.",
    "created_at": "2020-07-15T11:50:44Z",
    "updated_at": "2020-07-15T11:50:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454992886",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454992886"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19143#discussion_r454992886"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19143"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454992886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 454893815
  }
]