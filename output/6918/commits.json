[
  {
    "sha": "830e3f3d027ba5c8121eed0f6a9ce99961352572",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzBlM2YzZDAyN2JhNWM4MTIxZWVkMGY2YTljZTk5OTYxMzUyNTcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-30T22:14:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-31T00:15:11Z"
      },
      "message": "Make sigcache faster and more efficient",
      "tree": {
        "sha": "1a098256efaeeeec8e7483f61161f0c9f88b127e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a098256efaeeeec8e7483f61161f0c9f88b127e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/830e3f3d027ba5c8121eed0f6a9ce99961352572",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/830e3f3d027ba5c8121eed0f6a9ce99961352572",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/830e3f3d027ba5c8121eed0f6a9ce99961352572",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/830e3f3d027ba5c8121eed0f6a9ce99961352572/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 52,
      "deletions": 35
    },
    "files": [
      {
        "sha": "5843b7d79ac6f16d4e0a5e2bfbe60ea75e8ca034",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/830e3f3d027ba5c8121eed0f6a9ce99961352572/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/830e3f3d027ba5c8121eed0f6a9ce99961352572/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=830e3f3d027ba5c8121eed0f6a9ce99961352572",
        "patch": "@@ -25,6 +25,7 @@\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n+#include \"script/sigcache.h\"\n #include \"scheduler.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -434,7 +435,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n         strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));"
      },
      {
        "sha": "9dc7f0fcd54a9fcc271272e0ed0cfcdd6dbba525",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 34,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/830e3f3d027ba5c8121eed0f6a9ce99961352572/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/830e3f3d027ba5c8121eed0f6a9ce99961352572/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=830e3f3d027ba5c8121eed0f6a9ce99961352572",
        "patch": "@@ -5,16 +5,29 @@\n \n #include \"sigcache.h\"\n \n+#include \"memusage.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n #include <boost/thread.hpp>\n-#include <boost/tuple/tuple_comparison.hpp>\n+#include <boost/unordered_set.hpp>\n \n namespace {\n \n+/**\n+ * We're hashing a nonce into the entries themselves, so we don't need extra\n+ * blinding in the set hash computation.\n+ */\n+class CSignatureCacheHasher\n+{\n+public:\n+    size_t operator()(const uint256& key) const {\n+        return key.GetCheapHash();\n+    }\n+};\n+\n /**\n  * Valid signature cache, to avoid doing expensive ECDSA signature checking\n  * twice for every transaction (once when accepted into memory pool, and\n@@ -23,52 +36,48 @@ namespace {\n class CSignatureCache\n {\n private:\n-     //! sigdata_type is (signature hash, signature, public key):\n-    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n-    std::set< sigdata_type> setValid;\n+     //! Entries are SHA256(nonce || signature hash || public key || signature):\n+    uint256 nonce;\n+    typedef boost::unordered_set<uint256, CSignatureCacheHasher> map_type;\n+    map_type setValid;\n     boost::shared_mutex cs_sigcache;\n \n+\n public:\n+    CSignatureCache()\n+    {\n+        GetRandBytes(nonce.begin(), 32);\n+    }\n+\n+    void\n+    ComputeEntry(uint256& entry, const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubkey)\n+    {\n+        CSHA256().Write(nonce.begin(), 32).Write(hash.begin(), 32).Write(&pubkey[0], pubkey.size()).Write(&vchSig[0], vchSig.size()).Finalize(entry.begin());\n+    }\n+\n     bool\n-    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    Get(const uint256& entry)\n     {\n         boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        std::set<sigdata_type>::iterator mi = setValid.find(k);\n-        if (mi != setValid.end())\n-            return true;\n-        return false;\n+        return setValid.count(entry);\n     }\n \n-    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    void Set(const uint256& entry)\n     {\n-        // DoS prevention: limit cache size to less than 10MB\n-        // (~200 bytes per cache entry times 50,000 entries)\n-        // Since there are a maximum of 20,000 signature operations per block\n-        // 50,000 is a reasonable default.\n-        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n         if (nMaxCacheSize <= 0) return;\n \n         boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n+        while (memusage::DynamicUsage(setValid) > nMaxCacheSize)\n         {\n-            // Evict a random entry. Random because that helps\n-            // foil would-be DoS attackers who might try to pre-generate\n-            // and re-use a set of valid signatures just-slightly-greater\n-            // than our cache size.\n-            uint256 randomHash = GetRandHash();\n-            std::vector<unsigned char> unused;\n-            std::set<sigdata_type>::iterator it =\n-                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n-            if (it == setValid.end())\n-                it = setValid.begin();\n-            setValid.erase(*it);\n+            map_type::size_type s = GetRand(setValid.bucket_count());\n+            map_type::local_iterator it = setValid.begin(s);\n+            if (it != setValid.end(s)) {\n+                setValid.erase(*it);\n+            }\n         }\n \n-        sigdata_type k(hash, vchSig, pubKey);\n-        setValid.insert(k);\n+        setValid.insert(entry);\n     }\n };\n \n@@ -78,13 +87,16 @@ bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsig\n {\n     static CSignatureCache signatureCache;\n \n-    if (signatureCache.Get(sighash, vchSig, pubkey))\n+    uint256 entry;\n+    signatureCache.ComputeEntry(entry, sighash, vchSig, pubkey);\n+\n+    if (signatureCache.Get(entry))\n         return true;\n \n     if (!TransactionSignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     if (store)\n-        signatureCache.Set(sighash, vchSig, pubkey);\n+        signatureCache.Set(entry);\n     return true;\n }"
      },
      {
        "sha": "22699725607c999ef573c663732edc3d4bd2974c",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/830e3f3d027ba5c8121eed0f6a9ce99961352572/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/830e3f3d027ba5c8121eed0f6a9ce99961352572/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=830e3f3d027ba5c8121eed0f6a9ce99961352572",
        "patch": "@@ -10,6 +10,10 @@\n \n #include <vector>\n \n+// DoS prevention: limit cache size to less than 40MB (over 500000\n+// entries on 64-bit systems).\n+static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 40;\n+\n class CPubKey;\n \n class CachingTransactionSignatureChecker : public TransactionSignatureChecker"
      }
    ]
  },
  {
    "sha": "0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjllOWRjYTRlODhlNDFmN2RhZTRmZDljZDhlMGY5M2ZhYmFmZTAx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-30T22:38:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-31T00:15:11Z"
      },
      "message": "Evict sigcache entries that are seen in a block",
      "tree": {
        "sha": "1b779dca561d32e9888d77679b8f1c65f61af088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b779dca561d32e9888d77679b8f1c65f61af088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "830e3f3d027ba5c8121eed0f6a9ce99961352572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/830e3f3d027ba5c8121eed0f6a9ce99961352572",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/830e3f3d027ba5c8121eed0f6a9ce99961352572"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eee96e7c2d1d2976341f44080e25e976f610340f",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
        "patch": "@@ -62,6 +62,12 @@ class CSignatureCache\n         return setValid.count(entry);\n     }\n \n+    void Erase(const uint256& entry)\n+    {\n+        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n+        setValid.erase(entry);\n+    }\n+\n     void Set(const uint256& entry)\n     {\n         size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n@@ -90,13 +96,18 @@ bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsig\n     uint256 entry;\n     signatureCache.ComputeEntry(entry, sighash, vchSig, pubkey);\n \n-    if (signatureCache.Get(entry))\n+    if (signatureCache.Get(entry)) {\n+        if (!store) {\n+            signatureCache.Erase(entry);\n+        }\n         return true;\n+    }\n \n     if (!TransactionSignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n-    if (store)\n+    if (store) {\n         signatureCache.Set(entry);\n+    }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "69d373ff6693de204bdf58cbc90f8a26d8f711c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWQzNzNmZjY2OTNkZTIwNGJkZjU4Y2JjOTBmOGEyNmQ4ZjcxMWM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-02T01:01:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-02T01:01:45Z"
      },
      "message": "Don't wipe the sigcache in TestBlockValidity",
      "tree": {
        "sha": "c71f3c98d9f7ea950516e4fa80aa1dfe355be0b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c71f3c98d9f7ea950516e4fa80aa1dfe355be0b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69d373ff6693de204bdf58cbc90f8a26d8f711c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d373ff6693de204bdf58cbc90f8a26d8f711c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69d373ff6693de204bdf58cbc90f8a26d8f711c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d373ff6693de204bdf58cbc90f8a26d8f711c8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9e9dca4e88e41f7dae4fd9cd8e0f93fabafe01"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ad19b50ce46c51b90053ab1b0fda208056c91c24",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d373ff6693de204bdf58cbc90f8a26d8f711c8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d373ff6693de204bdf58cbc90f8a26d8f711c8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=69d373ff6693de204bdf58cbc90f8a26d8f711c8",
        "patch": "@@ -1830,7 +1830,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n+            bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, nScriptCheckThreads ? &vChecks : NULL))\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);"
      }
    ]
  }
]