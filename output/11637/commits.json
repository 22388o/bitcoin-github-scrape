[
  {
    "sha": "fa4bf92be9420919c74cdde9a973f7327d01ac88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRiZjkyYmU5NDIwOTE5Yzc0Y2RkZTlhOTczZjczMjdkMDFhYzg4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-08T18:43:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-11T14:32:25Z"
      },
      "message": "Remove dead service bits code",
      "tree": {
        "sha": "c6e0a7c1502f19e9807fde78b7e479e9e1b48def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6e0a7c1502f19e9807fde78b7e479e9e1b48def"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4bf92be9420919c74cdde9a973f7327d01ac88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbRhT5AAoJEM4rdWl+aaVInL0L/A2qQRlyOMnIBpDayND5ECfs\n211Q2EO/KzyhdGhLLhLBGyztizxgreBz0D8G4gKyycNN9dQuMPrZRM8Brskl5Tl3\nEJlc09XoVrjLYO6Za0F4Rq7gIF2VFZO2JPzyh0dp2z6RmV8y3RNmMqvEoLSGHuMU\nKu37oqhh/jsixP6fd8ZCjgOxX5YFyuEmgRWAXkYps9HueD53C6/SmkkQ5VtVcjaS\nC4/jfL/jajdF6mZjiMAR2ZCyE9miZJwpAu7mR6Ds/23fYOQl+duh7wmgvlZbQV1Q\nroBWjW/Bfb0dKzCYv2BZH/Q8rXkIgotDIixvt6nhd1+XMWs5XcIPSA7dw5M0vUPf\ntMbCGrD1CLu5RfUNHthyf7BS1pX8+AwVAsuWxZ/QHhVtU7c9/YnX3Qk9LGsL1Y9i\noUtyplPqj2KdtUg9FOy+m4Mz6+FGmo6QLs23cejN2TE0j70dku5IFZrydgmfh1dE\neOuRGH2GBFTkOfhDngjaBv+wGmF8ejUS8GJz4Tv75Q==\n=RYwV\n-----END PGP SIGNATURE-----",
        "payload": "tree c6e0a7c1502f19e9807fde78b7e479e9e1b48def\nparent b05ded176466dde1cf06b21834afcc46824eabb3\nauthor MarcoFalke <falke.marco@gmail.com> 1510166608 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1531319545 -0400\n\nRemove dead service bits code\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4bf92be9420919c74cdde9a973f7327d01ac88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4bf92be9420919c74cdde9a973f7327d01ac88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4bf92be9420919c74cdde9a973f7327d01ac88/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b05ded176466dde1cf06b21834afcc46824eabb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b05ded176466dde1cf06b21834afcc46824eabb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b05ded176466dde1cf06b21834afcc46824eabb3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 1,
      "deletions": 39
    },
    "files": [
      {
        "sha": "b719668867c0efa889aefd3bb59d35b608a52d90",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4bf92be9420919c74cdde9a973f7327d01ac88/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4bf92be9420919c74cdde9a973f7327d01ac88/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa4bf92be9420919c74cdde9a973f7327d01ac88",
        "patch": "@@ -1630,17 +1630,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return false;\n         }\n \n-        if (nServices & ((1 << 7) | (1 << 5))) {\n-            if (GetTime() < 1533096000) {\n-                // Immediately disconnect peers that use service bits 6 or 8 until August 1st, 2018\n-                // These bits have been used as a flag to indicate that a node is running incompatible\n-                // consensus rules instead of changing the network magic, so we're stuck disconnecting\n-                // based on these service bits, at least for a while.\n-                pfrom->fDisconnect = true;\n-                return false;\n-            }\n-        }\n-\n         if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version"
      },
      {
        "sha": "186c35e0e17e0a033f3375879880f797a62e7ac1",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4bf92be9420919c74cdde9a973f7327d01ac88/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4bf92be9420919c74cdde9a973f7327d01ac88/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=fa4bf92be9420919c74cdde9a973f7327d01ac88",
        "patch": "@@ -8,11 +8,7 @@\n received a VERACK.\n \n This test connects to a node and sends it a few messages, trying to entice it\n-into sending us something it shouldn't.\n-\n-Also test that nodes that send unsupported service bits to bitcoind are disconnected\n-and don't receive a VERACK. Unsupported service bits are currently 1 << 5 and\n-1 << 7 (until August 1st 2018).\"\"\"\n+into sending us something it shouldn't.\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -95,19 +91,13 @@ def set_test_params(self):\n         self.extra_args = [['-banscore='+str(banscore)]]\n \n     def run_test(self):\n-        self.nodes[0].setmocktime(1501545600)  # August 1st 2017\n-\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False)\n         no_verack_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVerackIdle())\n-        unsupported_service_bit5_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n-        unsupported_service_bit7_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n         wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n         wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n         wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n-        wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10, lock=mininode_lock)\n-        wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n         self.nodes[0].generate(1)\n@@ -118,10 +108,6 @@ def run_test(self):\n         #This node should have been banned\n         assert not no_version_bannode.is_connected\n \n-        # These nodes should have been disconnected\n-        assert not unsupported_service_bit5_node.is_connected\n-        assert not unsupported_service_bit7_node.is_connected\n-\n         self.nodes[0].disconnect_p2ps()\n \n         # Wait until all connections are closed\n@@ -131,17 +117,6 @@ def run_test(self):\n         assert(no_version_bannode.unexpected_msg == False)\n         assert(no_version_idlenode.unexpected_msg == False)\n         assert(no_verack_idlenode.unexpected_msg == False)\n-        assert not unsupported_service_bit5_node.unexpected_msg\n-        assert not unsupported_service_bit7_node.unexpected_msg\n-\n-        self.log.info(\"Service bits 5 and 7 are allowed after August 1st 2018\")\n-        self.nodes[0].setmocktime(1533168000)  # August 2nd 2018\n-\n-        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n-        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n-\n-        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n-        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "af57e61f2f796f3a9f971b6cb7947cc6a894b261",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4bf92be9420919c74cdde9a973f7327d01ac88/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4bf92be9420919c74cdde9a973f7327d01ac88/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa4bf92be9420919c74cdde9a973f7327d01ac88",
        "patch": "@@ -42,8 +42,6 @@\n # NODE_GETUTXO = (1 << 1)\n NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n-NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n-NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n MSG_TX = 1"
      }
    ]
  }
]