[
  {
    "sha": "d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGVhOWJhYjI4MDQ5MjhjOWY0MGRlZjYxZmQ5OTA2NGQyZDhmOWI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-07T18:30:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-13T15:00:54Z"
      },
      "message": "walletdb: Don't remove database transaction logs and instead error\n\nInstead of removing the database transaction logs and retrying the\nwallet loading, just return an error message to the user. Additionally,\nspecifically for DB_RUNRECOVERY, notify the user that this could be due\nto different BDB versions. This error is pretty much only caused by\ncompiling with a newer version of BDB and then trying to open the wallet\nwith a version compiled with an older version of BDB.",
      "tree": {
        "sha": "ee3edf72d9ff4f22542850bb66fc3fd667288e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee3edf72d9ff4f22542850bb66fc3fd667288e33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "160800ac105568a59e343411d21a90e9530e1b9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160800ac105568a59e343411d21a90e9530e1b9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/160800ac105568a59e343411d21a90e9530e1b9e"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 16,
      "deletions": 24
    },
    "files": [
      {
        "sha": "5227013be24a41b2710e8581cf05e3ddb058187c",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
        "patch": "@@ -139,7 +139,7 @@ BerkeleyEnvironment::~BerkeleyEnvironment()\n     Close();\n }\n \n-bool BerkeleyEnvironment::Open(bool retry)\n+bool BerkeleyEnvironment::Open(bilingual_str& err)\n {\n     if (fDbEnvInit) {\n         return true;\n@@ -149,6 +149,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n+        err = strprintf(_(\"Error initializing wallet database environment %s!\"), Directory());\n         return false;\n     }\n \n@@ -188,23 +189,11 @@ bool BerkeleyEnvironment::Open(bool retry)\n             LogPrintf(\"BerkeleyEnvironment::Open: Error %d closing failed database environment: %s\\n\", ret2, DbEnv::strerror(ret2));\n         }\n         Reset();\n-        if (retry) {\n-            // try moving the database env out of the way\n-            fs::path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n-            try {\n-                fs::rename(pathLogDir, pathDatabaseBak);\n-                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.string(), pathDatabaseBak.string());\n-            } catch (const fs::filesystem_error&) {\n-                // failure is ok (well, not really, but it's not worse than what we started with)\n-            }\n-            // try opening it again one more time\n-            if (!Open(false /* retry */)) {\n-                // if it still fails, it probably means we can't even create the database env\n-                return false;\n-            }\n-        } else {\n-            return false;\n+        err = strprintf(_(\"Error initializing wallet database environment %s!\"), Directory());\n+        if (ret == DB_RUNRECOVERY) {\n+            err += Untranslated(\" \") + _(\"This error could occur if this wallet was not shutdown cleanly and was last loaded using a build with a newer version of Berkeley DB. If so, please use the software that last loaded this wallet\");\n         }\n+        return false;\n     }\n \n     fDbEnvInit = true;\n@@ -300,8 +289,7 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", BerkeleyDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", file_path.string());\n \n-    if (!env->Open(true /* retry */)) {\n-        errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n+    if (!env->Open(errorStr)) {\n         return false;\n     }\n \n@@ -342,7 +330,8 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n \n     {\n         LOCK(cs_db);\n-        if (!env->Open(false /* retry */))\n+        bilingual_str open_err;\n+        if (!env->Open(open_err))\n             throw std::runtime_error(\"BerkeleyBatch: Failed to open database environment.\");\n \n         pdb = database.m_db.get();\n@@ -482,7 +471,8 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     // Reset the environment\n     Flush(true); // This will flush and close the environment\n     Reset();\n-    Open(true);\n+    bilingual_str open_err;\n+    Open(open_err);\n }\n \n bool BerkeleyDatabase::Rewrite(const char* pszSkip)"
      },
      {
        "sha": "9c1a5553c693cebd902d8eb00b2f5cc2f2d69946",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
        "patch": "@@ -69,7 +69,7 @@ class BerkeleyEnvironment\n \n     bool Verify(const std::string& strFile);\n \n-    bool Open(bool retry);\n+    bool Open(bilingual_str& error);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);"
      },
      {
        "sha": "af57210f01c2a22aa7a7c6e1e7c71dd20caee8fc",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ea9bab2804928c9f40def61fd99064d2d8f9b8/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=d0ea9bab2804928c9f40def61fd99064d2d8f9b8",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <fs.h>\n #include <streams.h>\n+#include <util/translation.h>\n #include <wallet/salvage.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -20,8 +21,9 @@ bool RecoverDatabaseFile(const fs::path& file_path)\n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n \n-    if (!env->Open(true /* retry */)) {\n-        tfm::format(std::cerr, \"Error initializing wallet database environment %s!\", env->Directory());\n+    bilingual_str open_err;\n+    if (!env->Open(open_err)) {\n+        tfm::format(std::cerr, \"%s\\n\", open_err.original);\n         return false;\n     }\n "
      }
    ]
  }
]