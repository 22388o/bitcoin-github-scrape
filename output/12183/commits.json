[
  {
    "sha": "2c5700e0de9c97e1642226b0745e03c7d019bbb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzU3MDBlMGRlOWM5N2UxNjQyMjI2YjA3NDVlMDNjN2QwMTliYmIz",
    "commit": {
      "author": {
        "name": "Alin Rus",
        "email": "alin@fsck.ro",
        "date": "2018-01-14T17:30:31Z"
      },
      "committer": {
        "name": "Alin Rus",
        "email": "alin@fsck.ro",
        "date": "2018-01-14T17:30:31Z"
      },
      "message": "Make use of emplace_back in nonassociative containers.",
      "tree": {
        "sha": "c7431e825b3f8d23ee4880e38e24c4981380aea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7431e825b3f8d23ee4880e38e24c4981380aea9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c5700e0de9c97e1642226b0745e03c7d019bbb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c5700e0de9c97e1642226b0745e03c7d019bbb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c5700e0de9c97e1642226b0745e03c7d019bbb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c5700e0de9c97e1642226b0745e03c7d019bbb3/comments",
    "author": {
      "login": "flipbitsnotburgers",
      "id": 48412190,
      "node_id": "MDQ6VXNlcjQ4NDEyMTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/48412190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flipbitsnotburgers",
      "html_url": "https://github.com/flipbitsnotburgers",
      "followers_url": "https://api.github.com/users/flipbitsnotburgers/followers",
      "following_url": "https://api.github.com/users/flipbitsnotburgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/flipbitsnotburgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flipbitsnotburgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flipbitsnotburgers/subscriptions",
      "organizations_url": "https://api.github.com/users/flipbitsnotburgers/orgs",
      "repos_url": "https://api.github.com/users/flipbitsnotburgers/repos",
      "events_url": "https://api.github.com/users/flipbitsnotburgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flipbitsnotburgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "flipbitsnotburgers",
      "id": 48412190,
      "node_id": "MDQ6VXNlcjQ4NDEyMTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/48412190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flipbitsnotburgers",
      "html_url": "https://github.com/flipbitsnotburgers",
      "followers_url": "https://api.github.com/users/flipbitsnotburgers/followers",
      "following_url": "https://api.github.com/users/flipbitsnotburgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/flipbitsnotburgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flipbitsnotburgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flipbitsnotburgers/subscriptions",
      "organizations_url": "https://api.github.com/users/flipbitsnotburgers/orgs",
      "repos_url": "https://api.github.com/users/flipbitsnotburgers/repos",
      "events_url": "https://api.github.com/users/flipbitsnotburgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flipbitsnotburgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d2eaba300bc13c556e3cb05420dcc91ae12e1d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2eaba300bc13c556e3cb05420dcc91ae12e1d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2eaba300bc13c556e3cb05420dcc91ae12e1d0"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 78,
      "deletions": 78
    },
    "files": [
      {
        "sha": "d2baaf535e149a68a50d0ed305a9a84da1db7bea",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -546,7 +546,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             throw std::runtime_error(\"unknown sighash flag/sign option\");\n \n     std::vector<CTransaction> txVariants;\n-    txVariants.push_back(tx);\n+    txVariants.emplace_back(tx);\n \n     // mergedTx will end up with all the signatures; it\n     // starts as a clone of the raw tx:"
      },
      {
        "sha": "5959a964b87775a8d125531f36071b5967af829e",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -196,8 +196,8 @@ static bool InitHTTPAllowList()\n     CNetAddr localv6;\n     LookupHost(\"127.0.0.1\", localv4, false);\n     LookupHost(\"::1\", localv6, false);\n-    rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n-    rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n+    rpc_allow_subnets.emplace_back(localv4, 8);      // always allow IPv4 local subnet\n+    rpc_allow_subnets.emplace_back(localv6);         // always allow IPv6 localhost\n     for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n         CSubNet subnet;\n         LookupSubNet(strAllow.c_str(), subnet);\n@@ -325,8 +325,8 @@ static bool HTTPBindAddresses(struct evhttp* http)\n \n     // Determine what addresses to bind to\n     if (!gArgs.IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n-        endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n-        endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n+        endpoints.emplace_back(\"::1\", defaultPort);\n+        endpoints.emplace_back(\"127.0.0.1\", defaultPort);\n         if (gArgs.IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n@@ -335,11 +335,11 @@ static bool HTTPBindAddresses(struct evhttp* http)\n             int port = defaultPort;\n             std::string host;\n             SplitHostPort(strRPCBind, port, host);\n-            endpoints.push_back(std::make_pair(host, port));\n+            endpoints.emplace_back(host, port);\n         }\n     } else { // No specific bind address specified, bind to any\n-        endpoints.push_back(std::make_pair(\"::\", defaultPort));\n-        endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n+        endpoints.emplace_back(\"::\", defaultPort);\n+        endpoints.emplace_back(\"0.0.0.0\", defaultPort);\n     }\n \n     // Bind addresses\n@@ -675,7 +675,7 @@ HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n     LogPrint(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n-    pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n }\n \n void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)"
      },
      {
        "sha": "6a242b293ad941fb55d4a31d9083171e8dbf2657",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -1627,7 +1627,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     std::vector<fs::path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n-        vImportFiles.push_back(strFile);\n+        vImportFiles.emplace_back(strFile);\n     }\n \n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));"
      },
      {
        "sha": "981e5dfec33558edf11ae6c115c05d36a43de90e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -746,7 +746,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         // get current incomplete message, or create a new one\n         if (vRecvMsg.empty() ||\n             vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+            vRecvMsg.emplace_back(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION);\n \n         CNetMessage& msg = vRecvMsg.back();\n \n@@ -2125,7 +2125,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n         return false;\n     }\n \n-    vhListenSocket.push_back(ListenSocket(hListenSocket, fWhitelisted));\n+    vhListenSocket.emplace_back(hListenSocket, fWhitelisted);\n \n     if (addrBind.IsRoutable() && fDiscover && !fWhitelisted)\n         AddLocal(addrBind, LOCAL_BIND);"
      },
      {
        "sha": "c4a9d4efc3b27dc542d473bc7e8dfb89d8214039",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -1173,7 +1173,7 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n             // and we want it right after the last block so they don't\n             // wait for other stuff first.\n             std::vector<CInv> vInv;\n-            vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+            vInv.emplace_back(MSG_BLOCK, chainActive.Tip()->GetBlockHash());\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n             pfrom->hashContinue.SetNull();\n         }\n@@ -1438,7 +1438,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                         break;\n                     }\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                    vGetData.emplace_back(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash());\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n                     LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->GetId());\n@@ -2087,7 +2087,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LogPrint(BCLog::NET, \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->GetId());\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n-            vHeaders.push_back(pindex->GetBlockHeader());\n+            vHeaders.emplace_back(pindex->GetBlockHeader());\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n@@ -2545,7 +2545,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             } else if (status == READ_STATUS_FAILED) {\n                 // Might have collided, fall back to getdata now :(\n                 std::vector<CInv> invs;\n-                invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom), resp.blockhash));\n+                invs.emplace_back(MSG_BLOCK | GetFetchFlags(pfrom), resp.blockhash);\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, invs));\n             } else {\n                 // Block is either okay, or possibly we received\n@@ -3323,14 +3323,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n                     pBestIndex = pindex;\n                     if (fFoundStartingHeader) {\n                         // add this to the headers message\n-                        vHeaders.push_back(pindex->GetBlockHeader());\n+                        vHeaders.emplace_back(pindex->GetBlockHeader());\n                     } else if (PeerHasHeader(&state, pindex)) {\n                         continue; // keep looking for the first new block\n                     } else if (pindex->pprev == nullptr || PeerHasHeader(&state, pindex->pprev)) {\n                         // Peer doesn't have this header but they do have the prior one.\n                         // Start sending headers.\n                         fFoundStartingHeader = true;\n-                        vHeaders.push_back(pindex->GetBlockHeader());\n+                        vHeaders.emplace_back(pindex->GetBlockHeader());\n                     } else {\n                         // Peer doesn't have this header or the prior one -- nothing will\n                         // connect, so bail out.\n@@ -3423,7 +3423,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n \n             // Add blocks\n             for (const uint256& hash : pto->vInventoryBlockToSend) {\n-                vInv.push_back(CInv(MSG_BLOCK, hash));\n+                vInv.emplace_back(MSG_BLOCK, hash);\n                 if (vInv.size() == MAX_INV_SZ) {\n                     connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                     vInv.clear();\n@@ -3521,7 +3521,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n                     }\n                     if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                     // Send\n-                    vInv.push_back(CInv(MSG_TX, hash));\n+                    vInv.emplace_back(MSG_TX, hash);\n                     nRelayedTransactions++;\n                     {\n                         // Expire old relay messages\n@@ -3533,7 +3533,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n \n                         auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n                         if (ret.second) {\n-                            vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n+                            vRelayExpiration.emplace_back(nNow + 15 * 60 * 1000000, ret.first);\n                         }\n                     }\n                     if (vInv.size() == MAX_INV_SZ) {\n@@ -3618,7 +3618,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto);\n-                vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                vGetData.emplace_back(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash());\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n                 LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->GetId());"
      },
      {
        "sha": "6d14b4b4bccf0d9c93d25e35821a9bb2764f3950",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -147,7 +147,7 @@ class QtRPCTimerInterface: public RPCTimerInterface\n bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut)\n {\n     std::vector< std::vector<std::string> > stack;\n-    stack.push_back(std::vector<std::string>());\n+    stack.emplace_back();\n \n     enum CmdParseState\n     {\n@@ -175,7 +175,7 @@ bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &\n         }\n         // Make sure stack is not empty before adding something\n         if (stack.empty()) {\n-            stack.push_back(std::vector<std::string>());\n+            stack.emplace_back();\n         }\n         stack.back().push_back(strArg);\n     };\n@@ -184,7 +184,7 @@ bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &\n         if (nDepthInsideSensitive) {\n             if (!--nDepthInsideSensitive) {\n                 assert(filter_begin_pos);\n-                filter_ranges.push_back(std::make_pair(filter_begin_pos, chpos));\n+                filter_ranges.emplace_back(filter_begin_pos, chpos);\n                 filter_begin_pos = 0;\n             }\n         }\n@@ -282,7 +282,7 @@ bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &\n                             if (nDepthInsideSensitive) {\n                                 ++nDepthInsideSensitive;\n                             }\n-                            stack.push_back(std::vector<std::string>());\n+                            stack.emplace_back();\n                         }\n \n                         // don't allow commands after executed commands on baselevel"
      },
      {
        "sha": "6896575a5cc80b6927eb9ca7e20adc1c2c2aa62c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -323,10 +323,10 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 std::string key(\"PaymentRequest\");\n                 std::string value;\n                 rcp.paymentRequest.SerializeToString(&value);\n-                newTx->vOrderForm.push_back(make_pair(key, value));\n+                newTx->vOrderForm.emplace_back(key, value);\n             }\n             else if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-                newTx->vOrderForm.push_back(make_pair(\"Message\", rcp.message.toStdString()));\n+                newTx->vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n         }\n \n         CReserveKey *keyChange = transaction.getPossibleKeyChange();"
      },
      {
        "sha": "4045fb5e2c6c406374a87460fe8c6bc35c895775",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -430,7 +430,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n                 return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n \n             txid.SetHex(strTxid);\n-            vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n+            vOutPoints.emplace_back(txid, (uint32_t)nOutput);\n         }\n \n         if (vOutPoints.size() > 0)"
      },
      {
        "sha": "17afc665c759165c7dc5fdc06a5213a893b73685",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -159,7 +159,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n \n     for (const auto& entry : mapCommands)\n-        vCommands.push_back(make_pair(entry.second->category + entry.first, entry.second));\n+        vCommands.emplace_back(entry.second->category + entry.first, entry.second);\n     sort(vCommands.begin(), vCommands.end());\n \n     JSONRPCRequest jreq(helpreq);"
      },
      {
        "sha": "bf3ece3fb1bdcac2a684991e34720847cb26997c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -97,13 +97,13 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return true;\n     case TX_SCRIPTHASH:\n         if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n-            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            ret.emplace_back(scriptRet.begin(), scriptRet.end());\n             return true;\n         }\n         return false;\n \n     case TX_MULTISIG:\n-        ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n+        ret.emplace_back(); // workaround CHECKMULTISIG bug\n         return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n \n     case TX_WITNESS_V0_KEYHASH:\n@@ -113,7 +113,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n     case TX_WITNESS_V0_SCRIPTHASH:\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n         if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n-            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            ret.emplace_back(scriptRet.begin(), scriptRet.end());\n             return true;\n         }\n         return false;\n@@ -172,13 +172,13 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         CScript witnessscript(result[0].begin(), result[0].end());\n         txnouttype subType;\n         solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n-        result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n+        result.emplace_back(witnessscript.begin(), witnessscript.end());\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n     }\n \n     if (P2SH) {\n-        result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));\n+        result.emplace_back(subscript.begin(), subscript.end());\n     }\n     sigdata.scriptSig = PushAll(result);\n \n@@ -264,7 +264,7 @@ static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const B\n     }\n     // Now build a merged CScript:\n     unsigned int nSigsHave = 0;\n-    std::vector<valtype> result; result.push_back(valtype()); // pop-one-too-many workaround\n+    std::vector<valtype> result; result.emplace_back(); // pop-one-too-many workaround\n     for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n     {\n         if (sigs.count(vSolutions[i+1]))\n@@ -275,7 +275,7 @@ static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const B\n     }\n     // Fill any missing with OP_0:\n     for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n-        result.push_back(valtype());\n+        result.emplace_back();\n \n     return result;\n }\n@@ -369,7 +369,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, SIGVERSION_WITNESS_V0);\n             result.witness = result.script;\n             result.script.clear();\n-            result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n+            result.witness.emplace_back(pubKey2.begin(), pubKey2.end());\n             return result;\n         }\n     default:"
      },
      {
        "sha": "93b86a1d5b2aae6a9e418640b054f1d3216db329",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -162,7 +162,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n                     (opcode1 >= OP_1 && opcode1 <= OP_16))\n                 {\n                     char n = (char)CScript::DecodeOP_N(opcode1);\n-                    vSolutionsRet.push_back(valtype(1, n));\n+                    vSolutionsRet.emplace_back(1, n);\n                 }\n                 else\n                     break;"
      },
      {
        "sha": "49e61659b41def352383e944dcd03bd08131b844",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -123,8 +123,8 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n     // Test: AddrMan::Add multiple addresses works as expected\n     std::vector<CAddress> vAddr;\n-    vAddr.push_back(CAddress(ResolveService(\"250.1.1.3\", 8333), NODE_NONE));\n-    vAddr.push_back(CAddress(ResolveService(\"250.1.1.4\", 8333), NODE_NONE));\n+    vAddr.emplace_back(ResolveService(\"250.1.1.3\", 8333), NODE_NONE);\n+    vAddr.emplace_back(ResolveService(\"250.1.1.4\", 8333), NODE_NONE);\n     BOOST_CHECK(addrman.Add(vAddr, source));\n     BOOST_CHECK(addrman.size() >= 1);\n }"
      },
      {
        "sha": "058db8633af442df72dd2b8540e70683e9e44dda",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -27,7 +27,7 @@ struct TestVector {\n     explicit TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}\n \n     TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {\n-        vDerive.push_back(TestDerivation());\n+        vDerive.emplace_back();\n         TestDerivation &der = vDerive.back();\n         der.pub = pub;\n         der.prv = prv;"
      },
      {
        "sha": "edb775894b671aeec16ad1458488581fe998a942",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -100,15 +100,15 @@ void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     int ins = (InsecureRandBits(2)) + 1;\n     int outs = fSingle ? ins : (InsecureRandBits(2)) + 1;\n     for (int in = 0; in < ins; in++) {\n-        tx.vin.push_back(CTxIn());\n+        tx.vin.emplace_back();\n         CTxIn &txin = tx.vin.back();\n         txin.prevout.hash = InsecureRand256();\n         txin.prevout.n = InsecureRandBits(2);\n         RandomScript(txin.scriptSig);\n         txin.nSequence = (InsecureRandBool()) ? InsecureRand32() : (unsigned int)-1;\n     }\n     for (int out = 0; out < outs; out++) {\n-        tx.vout.push_back(CTxOut());\n+        tx.vout.emplace_back();\n         CTxOut &txout = tx.vout.back();\n         txout.nValue = InsecureRandRange(100000000);\n         RandomScript(txout.scriptPubKey);"
      },
      {
        "sha": "d6f45d9924ef671d74045c501a4b1ab36eb33137",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -158,8 +158,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForWitness(p2pk);\n         CScript scriptSig = CScript();\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.emplace_back(0);\n+        scriptWitness.stack.emplace_back(0);\n \n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n@@ -188,8 +188,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n+        scriptWitness.stack.emplace_back(0);\n+        scriptWitness.stack.emplace_back(0);\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n@@ -202,9 +202,9 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForWitness(witnessScript);\n         CScript scriptSig = CScript();\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+        scriptWitness.stack.emplace_back(0);\n+        scriptWitness.stack.emplace_back(0);\n+        scriptWitness.stack.emplace_back(witnessScript.begin(), witnessScript.end());\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n@@ -219,9 +219,9 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n         CScriptWitness scriptWitness;\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n-        scriptWitness.stack.push_back(std::vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n+        scriptWitness.stack.emplace_back(0);\n+        scriptWitness.stack.emplace_back(0);\n+        scriptWitness.stack.emplace_back(witnessScript.begin(), witnessScript.end());\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);"
      },
      {
        "sha": "30cfc46cefd15e662ecf491c4ff224026eb654d9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -481,7 +481,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n         std::vector<CScriptCheck> vChecks;\n         CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n-        vChecks.push_back(CScriptCheck());\n+        vChecks.emplace_back();\n         check.swap(vChecks.back());\n         control.Add(vChecks);\n     }"
      },
      {
        "sha": "491b2d9f0c4e8dd57db5137bc264240a0d067ed9",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -529,9 +529,9 @@ BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n {\n     std::vector<std::string> comments;\n-    comments.push_back(std::string(\"comment1\"));\n+    comments.emplace_back(\"comment1\");\n     std::vector<std::string> comments2;\n-    comments2.push_back(std::string(\"comment1\"));\n+    comments2.emplace_back(\"comment1\");\n     comments2.push_back(SanitizeString(std::string(\"Comment2; .,_?@-; !\\\"#$%&'()*+/<=>[]\\\\^`{|}~\"), SAFE_CHARS_UA_COMMENT)); // Semicolon is discouraged but not forbidden by BIP-0014\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));"
      },
      {
        "sha": "7f48023b5263a0d67fc7b7a3f3189ff3ec3639c1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -1656,7 +1656,7 @@ static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& stat\n     vPos.reserve(block.vtx.size());\n     for (const CTransactionRef& tx : block.vtx)\n     {\n-        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        vPos.emplace_back(tx->GetHash(), pos);\n         pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n     }\n \n@@ -1951,7 +1951,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \n         CTxUndo undoDummy;\n         if (i > 0) {\n-            blockundo.vtxundo.push_back(CTxUndo());\n+            blockundo.vtxundo.emplace_back();\n         }\n         UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n     }\n@@ -2067,7 +2067,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n                 std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n                 vFiles.reserve(setDirtyFileInfo.size());\n                 for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n-                    vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n+                    vFiles.emplace_back(*it, &vinfoBlockFile[*it]);\n                     setDirtyFileInfo.erase(it++);\n                 }\n                 std::vector<const CBlockIndex*> vBlocks;\n@@ -3679,7 +3679,7 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n     for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n-        vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n+        vSortedByHeight.emplace_back(pindex->nHeight, pindex);\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)"
      },
      {
        "sha": "09530209d278be83c9c3f4c90dd12455d950fd22",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -368,7 +368,7 @@ bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<C\n                 LogPrintf(\"CDBEnv::Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n                 break;\n             }\n-            vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n+            vResult.emplace_back(ParseHex(keyHex), ParseHex(valueHex));\n         }\n     }\n "
      },
      {
        "sha": "e6786aac9a9f5c0d226a841bccc6fae8a1cc73e6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -48,21 +48,21 @@ static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWalle\n static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n-        errors.push_back(\"Transaction has descendants in the wallet\");\n+        errors.emplace_back(\"Transaction has descendants in the wallet\");\n         return feebumper::Result::INVALID_PARAMETER;\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it_mp = mempool.mapTx.find(wtx.GetHash());\n         if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n-            errors.push_back(\"Transaction has descendants in the mempool\");\n+            errors.emplace_back(\"Transaction has descendants in the mempool\");\n             return feebumper::Result::INVALID_PARAMETER;\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        errors.emplace_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n     return feebumper::Result::OK;\n@@ -84,7 +84,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     errors.clear();\n     auto it = wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n-        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        errors.emplace_back(\"Invalid or non-wallet transaction id\");\n         return Result::INVALID_ADDRESS_OR_KEY;\n     }\n     const CWalletTx& wtx = it->second;\n@@ -95,7 +95,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     }\n \n     if (!SignalsOptInRBF(*wtx.tx)) {\n-        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        errors.emplace_back(\"Transaction is not BIP 125 replaceable\");\n         return Result::WALLET_ERROR;\n     }\n \n@@ -107,7 +107,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n-        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        errors.emplace_back(\"Transaction contains inputs that don't belong to this wallet\");\n         return Result::WALLET_ERROR;\n     }\n \n@@ -117,22 +117,22 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n         if (wallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                errors.push_back(\"Transaction has multiple change outputs\");\n+                errors.emplace_back(\"Transaction has multiple change outputs\");\n                 return Result::WALLET_ERROR;\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        errors.push_back(\"Transaction does not have a change output\");\n+        errors.emplace_back(\"Transaction does not have a change output\");\n         return Result::WALLET_ERROR;\n     }\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n     if (maxNewTxSize < 0) {\n-        errors.push_back(\"Transaction contains inputs that cannot be signed\");\n+        errors.emplace_back(\"Transaction contains inputs that cannot be signed\");\n         return Result::INVALID_ADDRESS_OR_KEY;\n     }\n \n@@ -209,7 +209,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     mtx =  *wtx.tx;\n     CTxOut* poutput = &(mtx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        errors.push_back(\"Change output is too small to bump the fee\");\n+        errors.emplace_back(\"Change output is too small to bump the fee\");\n         return Result::WALLET_ERROR;\n     }\n \n@@ -244,7 +244,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     }\n     auto it = txid.IsNull() ? wallet->mapWallet.end() : wallet->mapWallet.find(txid);\n     if (it == wallet->mapWallet.end()) {\n-        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        errors.emplace_back(\"Invalid or non-wallet transaction id\");\n         return Result::MISC_ERROR;\n     }\n     CWalletTx& oldWtx = it->second;\n@@ -284,7 +284,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        errors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n+        errors.emplace_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n     }\n     return Result::OK;\n }"
      },
      {
        "sha": "6e84930e99e7fb1676c2f9e49018abca0ff03482",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -672,7 +672,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n     for (const auto& entry : mapKeyBirth) {\n         if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n-            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+            vKeyBirth.emplace_back(entry.second, *keyID);\n         }\n     }\n     mapKeyBirth.clear();"
      },
      {
        "sha": "ce70858685c6357dd70faf79db1b8df59d1423ae",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c5700e0de9c97e1642226b0745e03c7d019bbb3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2c5700e0de9c97e1642226b0745e03c7d019bbb3",
        "patch": "@@ -2262,7 +2262,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n                 bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n                 bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n-                vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+                vCoins.emplace_back(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx);\n \n                 // Checks the sum amount of all UTXO's.\n                 if (nMinimumSumAmount != MAX_MONEY) {\n@@ -2851,8 +2851,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // behavior.\"\n                 const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n                 for (const auto& coin : setCoins)\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n-                                              nSequence));\n+                    txNew.vin.emplace_back(coin.outpoint,CScript(),\n+                                              nSequence);\n \n                 // Fill in dummy signatures for fee calculation.\n                 if (!DummySignTx(txNew, setCoins)) {"
      }
    ]
  }
]