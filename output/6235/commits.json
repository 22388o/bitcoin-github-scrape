[
  {
    "sha": "f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzUyNWUyNGUzYTE1NmVhYTAwNGNhMjhhNTlmZTJkNDQ5ZGMxZjll",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-30T19:39:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-20T12:22:44Z"
      },
      "message": "Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir)",
      "tree": {
        "sha": "6fceee33ff5c9efff9e97ea0045f4726239714b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fceee33ff5c9efff9e97ea0045f4726239714b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 48,
      "deletions": 45
    },
    "files": [
      {
        "sha": "02c417c38dc618c8683a94dc78cf87b3b2cd4448",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -260,28 +261,27 @@ const CChainParams &Params() {\n     return *pCurrentParams;\n }\n \n-CChainParams &Params(CBaseChainParams::Network network) {\n-    switch (network) {\n-        case CBaseChainParams::MAIN:\n+CChainParams& Params(const std::string& chain)\n+{\n+    if (chain == CBaseChainParams::MAIN)\n             return mainParams;\n-        case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-        case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return mainParams;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-void SelectParams(CBaseChainParams::Network network) {\n+void SelectParams(const std::string& network)\n+{\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n \n bool SelectParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n+    std::string network = ChainNameFromCommandLine();\n     if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n "
      },
      {
        "sha": "71e2ad861e81174f286792535008d019df7e2bd8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -103,11 +103,16 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/** Return parameters for the given network. */\n-CChainParams &Params(CBaseChainParams::Network network);\n+/**\n+ * @returns CChainParams for the given BIP70 chain name.\n+ */\n+CChainParams& Params(const std::string& chain);\n \n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectParams(CBaseChainParams::Network network);\n+/**\n+ * Sets the params returned by Params() to those for the given BIP70 chain name.\n+ * @throws std::runtime_error when the chain is not supported.\n+ */\n+void SelectParams(const std::string& chain);\n \n /**\n  * Looks for -regtest or -testnet and then calls SelectParams as appropriate."
      },
      {
        "sha": "e46212279fe66e07f36498c6dc5b7baa8453a4cc",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -5,10 +5,16 @@\n \n #include \"chainparamsbase.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n \n #include <assert.h>\n \n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n /**\n  * Main network\n  */\n@@ -71,25 +77,19 @@ const CBaseChainParams& BaseParams()\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network)\n+void SelectBaseParams(const std::string& chain)\n {\n-    switch (network) {\n-    case CBaseChainParams::MAIN:\n+    if (chain == CBaseChainParams::MAIN)\n         pCurrentBaseParams = &mainParams;\n-        break;\n-    case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n         pCurrentBaseParams = &testNetParams;\n-        break;\n-    case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n         pCurrentBaseParams = &regTestParams;\n-        break;\n-    default:\n-        assert(false && \"Unimplemented network\");\n-        return;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-CBaseChainParams::Network NetworkIdFromCommandLine()\n+std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n@@ -105,7 +105,7 @@ CBaseChainParams::Network NetworkIdFromCommandLine()\n \n bool SelectBaseParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n+    std::string network = ChainNameFromCommandLine();\n     if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n "
      },
      {
        "sha": "25a5b3450bdc83a6054bc96b869c1859b3bf2059",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -15,13 +15,11 @@\n class CBaseChainParams\n {\n public:\n-    enum Network {\n-        MAIN,\n-        TESTNET,\n-        REGTEST,\n-\n-        MAX_NETWORK_TYPES\n-    };\n+    /** BIP70 chain name strings (main, test or regtest) */\n+    static const std::string MAIN;\n+    static const std::string TESTNET;\n+    static const std::string REGTEST;\n+    static const std::string MAX_NETWORK_TYPES;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -40,13 +38,13 @@ class CBaseChainParams\n const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(CBaseChainParams::Network network);\n+void SelectBaseParams(const std::string& chain);\n \n /**\n- * Looks for -regtest or -testnet and returns the appropriate Network ID.\n- * Returns MAX_NETWORK_TYPES if an invalid combination is given.\n+ * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+ * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.\n  */\n-CBaseChainParams::Network NetworkIdFromCommandLine();\n+std::string ChainNameFromCommandLine();\n \n /**\n  * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate."
      },
      {
        "sha": "a74fbfc0d713a8fa1581f765cfbdd753f162a919",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -32,13 +32,13 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n+BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(network);\n+        SelectParams(chainName);\n         noui_connect();\n }\n \n@@ -47,7 +47,7 @@ BasicTestingSetup::~BasicTestingSetup()\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n+TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      },
      {
        "sha": "0bab4b68319e108b645f4aad9b53386f3f4f7f2a",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -12,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n+    BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -25,7 +25,7 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n+    TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n "
      }
    ]
  },
  {
    "sha": "55a89751faaada5598771d10401030e9e86eecbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWE4OTc1MWZhYWFkYTU1OTg3NzFkMTA0MDEwMzBlOWU4NmVlY2Jk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T07:00:17Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-20T12:28:43Z"
      },
      "message": "Chainparams: Translations: DRY: options and error strings\n\nAlso remove SelectBaseParamsFromCommandLine and SelectParamsFromCommandLine",
      "tree": {
        "sha": "87607d31265c50db8955f805d280faeb8e82ab03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87607d31265c50db8955f805d280faeb8e82ab03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55a89751faaada5598771d10401030e9e86eecbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a89751faaada5598771d10401030e9e86eecbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55a89751faaada5598771d10401030e9e86eecbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a89751faaada5598771d10401030e9e86eecbd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 37,
      "deletions": 51
    },
    "files": [
      {
        "sha": "44b1586c18a979d70a0335124c890a7de321b7c2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -23,9 +23,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n-    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n@@ -88,8 +86,10 @@ static bool AppInitRPC(int argc, char* argv[])\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n-    if (!SelectBaseParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectBaseParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "5cd5b6657dfb4bf88bf46263828343b208924eb0",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -35,8 +35,10 @@ static bool AppInitRawTx(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n \n@@ -58,8 +60,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n         strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n         strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n-        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n-        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+        AppendParamsHelpMessages(strUsage);\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n "
      },
      {
        "sha": "d8fa473473c6e8c43f8f460d166845c33315ea6c",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -102,8 +102,10 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-        if (!SelectParamsFromCommandLine()) {\n-            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        try {\n+            SelectParams(ChainNameFromCommandLine());\n+        } catch(std::exception &e) {\n+            fprintf(stderr, \"Error: %s\\n\", e.what());\n             return false;\n         }\n "
      },
      {
        "sha": "09881ee8e7c9ae50c3f7c2c2e61d1a7a0aae1947",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -278,13 +278,3 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n-\n-bool SelectParamsFromCommandLine()\n-{\n-    std::string network = ChainNameFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectParams(network);\n-    return true;\n-}"
      },
      {
        "sha": "fd7a840d21b2aa534df51c7a7d7f647f1354686e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -114,10 +114,4 @@ CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n-/**\n- * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n- */\n-bool SelectParamsFromCommandLine();\n-\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "db2dc751f5985187f9f548b50cd11ce215c22634",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -13,7 +13,16 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n-const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n+{\n+    strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n+    if (debugHelp) {\n+        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n+                                   \"This is intended for regression testing tools and app development.\");\n+    }\n+}\n \n /**\n  * Main network\n@@ -95,24 +104,14 @@ std::string ChainNameFromCommandLine()\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n     if (fTestNet && fRegTest)\n-        return CBaseChainParams::MAX_NETWORK_TYPES;\n+        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n     return CBaseChainParams::MAIN;\n }\n \n-bool SelectBaseParamsFromCommandLine()\n-{\n-    std::string network = ChainNameFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectBaseParams(network);\n-    return true;\n-}\n-\n bool AreBaseParamsConfigured()\n {\n     return pCurrentBaseParams != NULL;"
      },
      {
        "sha": "095c4cbdcbfa841305e657b657a90ac637276df4",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n-    static const std::string MAX_NETWORK_TYPES;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -31,6 +30,12 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Append the help messages for the chainparams options to the\n+ * parameter string.\n+ */\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n@@ -46,12 +51,6 @@ void SelectBaseParams(const std::string& chain);\n  */\n std::string ChainNameFromCommandLine();\n \n-/**\n- * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n- */\n-bool SelectBaseParamsFromCommandLine();\n-\n /**\n  * Return true if SelectBaseParamsFromCommandLine() has been called to select\n  * a network."
      },
      {
        "sha": "9bf21cfa37079e1802870d9bdbe7d910053e8e7c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -396,11 +396,10 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-            \"This is intended for regression testing tools and app development.\");\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    AppendParamsHelpMessages(strUsage, showDebug);\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)"
      },
      {
        "sha": "c6bb7112e1b31deeb2dd84711f323f0d62c9d113",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -604,8 +604,10 @@ int main(int argc, char *argv[])\n     // - Needs to be done before createOptionsModel\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: Invalid combination of -regtest and -testnet.\"));\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: %1\").arg(e.what()));\n         return 1;\n     }\n #ifdef ENABLE_WALLET"
      }
    ]
  }
]