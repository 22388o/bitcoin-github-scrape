[
  {
    "sha": "57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzE1M2Q0ZTFhYzZlMmNjOWZjM2YyZmNkNmQ3ODZlOTgxM2Q4MjRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-28T15:14:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-29T15:25:23Z"
      },
      "message": "rpc: Compute number of confirmations of a block from block height\n\nCurrently this uses a CMerkleTx, but that makes no sense as we\nhave the CBlockIndex available. As noted by @jgarzik.",
      "tree": {
        "sha": "57a499b68c12471e1e68d7b8010b7ccd0d5a0a0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57a499b68c12471e1e68d7b8010b7ccd0d5a0a0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "539abc4729ea16039d148cfa3b771929f7d37584",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/539abc4729ea16039d148cfa3b771929f7d37584",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/539abc4729ea16039d148cfa3b771929f7d37584"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8a4b25cc540da61d6c8b272e689a2ffeac3fb552",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
        "patch": "@@ -54,9 +54,11 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n {\n     Object result;\n     result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n-    CMerkleTx txGen(block.vtx[0]);\n-    txGen.SetMerkleBranch(&block);\n-    result.push_back(Pair(\"confirmations\", (int)txGen.GetDepthInMainChain()));\n+    int confirmations = -1;\n+    // Only report confirmations if the block is on the main chain\n+    if (chainActive.Contains(blockindex))\n+        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n@@ -242,7 +244,7 @@ Value getblock(const Array& params, bool fHelp)\n             \"\\nResult (for verbose = true):\\n\"\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\""
      }
    ]
  },
  {
    "sha": "0101483f46396a7f1d19a9d29a1da15639ce4233",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTAxNDgzZjQ2Mzk2YTdmMWQxOWE5ZDI5YTFkYTE1NjM5Y2U0MjMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-28T15:15:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-29T15:26:01Z"
      },
      "message": "Move CMerkleTx to wallet.cpp/h\n\nIt is only used by the wallet so it has no place in main.",
      "tree": {
        "sha": "f00a0b5ddfb8eef309f51812593658563ab71261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f00a0b5ddfb8eef309f51812593658563ab71261"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0101483f46396a7f1d19a9d29a1da15639ce4233",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUAJuKAAoJEHSBCwEjRsmmx9UIAKIeBqmxRmCv98e3Wha5EJ9G\nYo7GY1XYbux3enBekZ6L3lJ1iwgYxfXbt/SNZDdSTbRNPD9xzg8fNjIAqpfBQEIh\nN8G0O2IRpXA3jmYIVJEAYom2rlaJkocDpP6vyEdHwg7PNT2Rx1MbGjLP+MXKfe0s\n1toh5hiYMLAQJHrsNnlTJntUK1sUqLbrnBfN4YWu8IO+OYJweCLqsRpiRsBQGbl/\nTXdtrMsEvaJysWKHHoMxU5WzfF1L9n4yBTQmdN3RTIaIfLumr/Mso2fMKy1Qi9Mb\nmTKyuLXQBmWweLscEpS1nEQbK+arLsjkpC5TWeZkjDgqtOEY+GPYycdlSqZCR2M=\n=DQkX\n-----END PGP SIGNATURE-----",
        "payload": "tree f00a0b5ddfb8eef309f51812593658563ab71261\nparent 57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1409238921 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1409325961 +0200\n\nMove CMerkleTx to wallet.cpp/h\n\nIt is only used by the wallet so it has no place in main.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0101483f46396a7f1d19a9d29a1da15639ce4233",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0101483f46396a7f1d19a9d29a1da15639ce4233",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0101483f46396a7f1d19a9d29a1da15639ce4233/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57153d4e1ac6e2cc9fc3f2fcd6d786e9813d824f"
      }
    ],
    "stats": {
      "total": 315,
      "additions": 156,
      "deletions": 159
    },
    "files": [
      {
        "sha": "6f3a5aae8955297125bad4c0fe9d10010aeee636",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 99,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0101483f46396a7f1d19a9d29a1da15639ce4233/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0101483f46396a7f1d19a9d29a1da15639ce4233/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0101483f46396a7f1d19a9d29a1da15639ce4233",
        "patch": "@@ -732,53 +732,6 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n-int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n-{\n-    AssertLockHeld(cs_main);\n-    CBlock blockTmp;\n-\n-    if (pblock == NULL) {\n-        CCoins coins;\n-        if (pcoinsTip->GetCoins(GetHash(), coins)) {\n-            CBlockIndex *pindex = chainActive[coins.nHeight];\n-            if (pindex) {\n-                if (!ReadBlockFromDisk(blockTmp, pindex))\n-                    return 0;\n-                pblock = &blockTmp;\n-            }\n-        }\n-    }\n-\n-    if (pblock) {\n-        // Update the tx's hashBlock\n-        hashBlock = pblock->GetHash();\n-\n-        // Locate the transaction\n-        for (nIndex = 0; nIndex < (int)pblock->vtx.size(); nIndex++)\n-            if (pblock->vtx[nIndex] == *(CTransaction*)this)\n-                break;\n-        if (nIndex == (int)pblock->vtx.size())\n-        {\n-            vMerkleBranch.clear();\n-            nIndex = -1;\n-            LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n-            return 0;\n-        }\n-\n-        // Fill in merkle branch\n-        vMerkleBranch = pblock->GetMerkleBranch(nIndex);\n-    }\n-\n-    // Is the tx in a block that's in the main chain\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n-    if (mi == mapBlockIndex.end())\n-        return 0;\n-    CBlockIndex* pindex = (*mi).second;\n-    if (!pindex || !chainActive.Contains(pindex))\n-        return 0;\n-\n-    return chainActive.Height() - pindex->nHeight + 1;\n-}\n \n \n \n@@ -1028,58 +981,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n-\n-int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n-{\n-    if (hashBlock == 0 || nIndex == -1)\n-        return 0;\n-    AssertLockHeld(cs_main);\n-\n-    // Find the block it claims to be in\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n-    if (mi == mapBlockIndex.end())\n-        return 0;\n-    CBlockIndex* pindex = (*mi).second;\n-    if (!pindex || !chainActive.Contains(pindex))\n-        return 0;\n-\n-    // Make sure the merkle branch connects to this block\n-    if (!fMerkleVerified)\n-    {\n-        if (CBlock::CheckMerkleBranch(GetHash(), vMerkleBranch, nIndex) != pindex->hashMerkleRoot)\n-            return 0;\n-        fMerkleVerified = true;\n-    }\n-\n-    pindexRet = pindex;\n-    return chainActive.Height() - pindex->nHeight + 1;\n-}\n-\n-int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n-{\n-    AssertLockHeld(cs_main);\n-    int nResult = GetDepthInMainChainINTERNAL(pindexRet);\n-    if (nResult == 0 && !mempool.exists(GetHash()))\n-        return -1; // Not in chain, not in mempool\n-\n-    return nResult;\n-}\n-\n-int CMerkleTx::GetBlocksToMaturity() const\n-{\n-    if (!IsCoinBase())\n-        return 0;\n-    return max(0, (COINBASE_MATURITY+1) - GetDepthInMainChain());\n-}\n-\n-\n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n-{\n-    CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n-}\n-\n-\n // Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, bool fAllowSlow)\n {"
      },
      {
        "sha": "9fe15d3aa3009713d1c529eea0fa441fce518132",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 60,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0101483f46396a7f1d19a9d29a1da15639ce4233/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0101483f46396a7f1d19a9d29a1da15639ce4233/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0101483f46396a7f1d19a9d29a1da15639ce4233",
        "patch": "@@ -344,66 +344,6 @@ class CScriptCheck\n     }\n };\n \n-/** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n-{\n-private:\n-    int GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const;\n-\n-public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n-    int nIndex;\n-\n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n-    CMerkleTx()\n-    {\n-        Init();\n-    }\n-\n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n-    {\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = 0;\n-        nIndex = -1;\n-        fMerkleVerified = false;\n-    }\n-\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        nSerSize += SerReadWrite(s, *(CTransaction*)this, nType, nVersion, ser_action);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    )\n-\n-\n-    int SetMerkleBranch(const CBlock* pblock=NULL);\n-\n-    // Return depth of transaction in blockchain:\n-    // -1  : not in blockchain, and not in memory pool (conflicted transaction)\n-    //  0  : in memory pool, waiting to be included in a block\n-    // >=1 : this many blocks deep in the main chain\n-    int GetDepthInMainChain(CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n-};\n-\n-\n-\n-\n-\n /** Data structure that represents a partial merkle tree.\n  *\n  * It respresents a subset of the txid's of a known block, in a way that"
      },
      {
        "sha": "18a5b3971c9accf326400cd08d3a7998f6b9a494",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0101483f46396a7f1d19a9d29a1da15639ce4233/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0101483f46396a7f1d19a9d29a1da15639ce4233/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0101483f46396a7f1d19a9d29a1da15639ce4233",
        "patch": "@@ -2194,3 +2194,102 @@ CWalletKey::CWalletKey(int64_t nExpires)\n     nTimeCreated = (nExpires ? GetTime() : 0);\n     nTimeExpires = nExpires;\n }\n+\n+int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n+{\n+    AssertLockHeld(cs_main);\n+    CBlock blockTmp;\n+\n+    if (pblock == NULL) {\n+        CCoins coins;\n+        if (pcoinsTip->GetCoins(GetHash(), coins)) {\n+            CBlockIndex *pindex = chainActive[coins.nHeight];\n+            if (pindex) {\n+                if (!ReadBlockFromDisk(blockTmp, pindex))\n+                    return 0;\n+                pblock = &blockTmp;\n+            }\n+        }\n+    }\n+\n+    if (pblock) {\n+        // Update the tx's hashBlock\n+        hashBlock = pblock->GetHash();\n+\n+        // Locate the transaction\n+        for (nIndex = 0; nIndex < (int)pblock->vtx.size(); nIndex++)\n+            if (pblock->vtx[nIndex] == *(CTransaction*)this)\n+                break;\n+        if (nIndex == (int)pblock->vtx.size())\n+        {\n+            vMerkleBranch.clear();\n+            nIndex = -1;\n+            LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+            return 0;\n+        }\n+\n+        // Fill in merkle branch\n+        vMerkleBranch = pblock->GetMerkleBranch(nIndex);\n+    }\n+\n+    // Is the tx in a block that's in the main chain\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+    if (mi == mapBlockIndex.end())\n+        return 0;\n+    CBlockIndex* pindex = (*mi).second;\n+    if (!pindex || !chainActive.Contains(pindex))\n+        return 0;\n+\n+    return chainActive.Height() - pindex->nHeight + 1;\n+}\n+\n+int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n+{\n+    if (hashBlock == 0 || nIndex == -1)\n+        return 0;\n+    AssertLockHeld(cs_main);\n+\n+    // Find the block it claims to be in\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+    if (mi == mapBlockIndex.end())\n+        return 0;\n+    CBlockIndex* pindex = (*mi).second;\n+    if (!pindex || !chainActive.Contains(pindex))\n+        return 0;\n+\n+    // Make sure the merkle branch connects to this block\n+    if (!fMerkleVerified)\n+    {\n+        if (CBlock::CheckMerkleBranch(GetHash(), vMerkleBranch, nIndex) != pindex->hashMerkleRoot)\n+            return 0;\n+        fMerkleVerified = true;\n+    }\n+\n+    pindexRet = pindex;\n+    return chainActive.Height() - pindex->nHeight + 1;\n+}\n+\n+int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n+{\n+    AssertLockHeld(cs_main);\n+    int nResult = GetDepthInMainChainINTERNAL(pindexRet);\n+    if (nResult == 0 && !mempool.exists(GetHash()))\n+        return -1; // Not in chain, not in mempool\n+\n+    return nResult;\n+}\n+\n+int CMerkleTx::GetBlocksToMaturity() const\n+{\n+    if (!IsCoinBase())\n+        return 0;\n+    return max(0, (COINBASE_MATURITY+1) - GetDepthInMainChain());\n+}\n+\n+\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n+{\n+    CValidationState state;\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n+}\n+"
      },
      {
        "sha": "544b4f5bfbe0ed8785527836cb2259f531f9c0e4",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0101483f46396a7f1d19a9d29a1da15639ce4233/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0101483f46396a7f1d19a9d29a1da15639ce4233/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=0101483f46396a7f1d19a9d29a1da15639ce4233",
        "patch": "@@ -457,6 +457,63 @@ struct COutputEntry\n     int vout;\n };\n \n+/** A transaction with a merkle branch linking it to the block chain. */\n+class CMerkleTx : public CTransaction\n+{\n+private:\n+    int GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const;\n+\n+public:\n+    uint256 hashBlock;\n+    std::vector<uint256> vMerkleBranch;\n+    int nIndex;\n+\n+    // memory only\n+    mutable bool fMerkleVerified;\n+\n+\n+    CMerkleTx()\n+    {\n+        Init();\n+    }\n+\n+    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n+    {\n+        Init();\n+    }\n+\n+    void Init()\n+    {\n+        hashBlock = 0;\n+        nIndex = -1;\n+        fMerkleVerified = false;\n+    }\n+\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        nSerSize += SerReadWrite(s, *(CTransaction*)this, nType, nVersion, ser_action);\n+        nVersion = this->nVersion;\n+        READWRITE(hashBlock);\n+        READWRITE(vMerkleBranch);\n+        READWRITE(nIndex);\n+    )\n+\n+\n+    int SetMerkleBranch(const CBlock* pblock=NULL);\n+\n+    // Return depth of transaction in blockchain:\n+    // -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+    //  0  : in memory pool, waiting to be included in a block\n+    // >=1 : this many blocks deep in the main chain\n+    int GetDepthInMainChain(CBlockIndex* &pindexRet) const;\n+    int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const;\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n+};\n+\n+\n /** A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */"
      }
    ]
  }
]