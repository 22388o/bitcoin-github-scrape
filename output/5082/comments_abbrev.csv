sipa,2014-10-13T19:51:53Z,"Concept ACK, and most code changes look good, apart from the nits above.\n",https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-58945202,58945202,
theuni,2014-10-14T03:40:32Z,Nits addressed.\n,https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-58986388,58986388,
TheBlueMatt,2014-10-14T07:34:55Z,"Mostly looks good...while you're changing serialize.h, can you add comments, as the changes now make it even less clear what is going on in that mess.\n",https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59000868,59000868,
sipa,2014-10-14T18:25:42Z,"@theuni passing the name of the field to the classes is not what I meant; this still means they're not composable.\n\nWhat I meant is: Write(make_pair(std::string(""destdata""), CDestData(address, key)), value);\n\nHowever, if you see it like that, there is not even a need for a separate class (though it may help for readability) - you could just as wel use:\n\nWrite(make_pair(std::string(""destdata""",https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59092589,59092589,
theuni,2014-10-14T20:03:44Z,"nits addressed, I believe. I used @sipa's idea to use a pair of pairs for the serialization rather than the custom classes. That seems more clear, and matches one of the uses that was already there as well.\n\nI'll squash if all looks good now.\n",https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59107263,59107263,
sipa,2014-10-14T22:29:38Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59128027,59128027,
TheBlueMatt,2014-10-15T05:15:52Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59158735,59158735,
laanwj,2014-10-15T07:19:16Z,"Yes, not introducing those classes at all is better. utACK\n",https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59166945,59166945,
theuni,2014-10-15T19:13:05Z,squashed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/5082#issuecomment-59259497,59259497,
sipa,2014-10-13T19:49:04Z,"I don't really like data structures that know their own key in a database, as it breaks composability.\nCan you leave the ""acentry"" and ""destdata"" out, and leave those in the actual db write methods using a make_pair(""acentry"", blah)?\n",https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18790509,18790509,src/walletdb.cpp
sipa,2014-10-13T19:49:34Z,Coding style nit: can you put a space after the 'for'?\n,https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18790529,18790529,src/core.cpp
sipa,2014-10-13T19:50:00Z,Coding style nit: can you put a space after the comma?\n,https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18790555,18790555,src/key.cpp
sipa,2014-10-13T19:51:09Z,Coding style nit: can you put a space before the question mark?\n,https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18790621,18790621,src/walletdb.cpp
TheBlueMatt,2014-10-14T06:24:31Z,Is this our coding style? m_?\n,https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18810702,18810702,src/walletdb.cpp
theuni,2014-10-14T06:28:37Z,"Old habit for member vars (a good habit for once, imo). I haven't seen any real continuity in the codebase. What would you prefer?\n",https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18810827,18810827,src/walletdb.cpp
TheBlueMatt,2014-10-14T07:30:49Z,"A long, long time ago\nIn a galaxy far, far away...\n^H^H^H^H^H^H^Hit was always typeVarName, but anything that isnt introducing another conflicting style is good with me (generally matching what is in surrounding code is best).\n",https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18812614,18812614,src/walletdb.cpp
laanwj,2014-10-14T11:57:09Z,"I agree that m_ for members is a fairly good practice, but this (some obscure wallet structure) isn't the place to get it started.\n\nEdit: also we always use explicit `public:` / `private:`, and usually start the class with `public:` members/methods.\n",https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18823200,18823200,src/walletdb.cpp
laanwj,2014-10-14T14:28:50Z,"But for something slightly more interesting than style: CAccEntryMeta and CDestDataMeta are created, serialized, then deleted again.\nThey are never deserialized, and the fields are never read.\nDo you intend to use these on the read-side of things as well, or are you saving that for a later pull?\n",https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18831648,18831648,src/walletdb.cpp
sipa,2014-10-14T18:23:24Z,They're being deserialized field by field in the ReadKeyValue function.\n,https://github.com/bitcoin/bitcoin/pull/5082#discussion_r18848135,18848135,src/walletdb.cpp
