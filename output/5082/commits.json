[
  {
    "sha": "1d9b86d584542fbc34bf49726badaba2ca764228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDliODZkNTg0NTQyZmJjMzRiZjQ5NzI2YmFkYWJhMmNhNzY0MjI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-08T18:27:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:19Z"
      },
      "message": "boost: drop dependency on is_fundamental in serialization\n\nThere's only one case where a vector containing a fundamental type is\nserialized all-at-once, unsigned char. Anything else would lead to\nstrange results.\n\nUse a dummy argument to overload in that case.",
      "tree": {
        "sha": "c4707cfbfa2d6c5374b0edd665d74d897867a3af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4707cfbfa2d6c5374b0edd665d74d897867a3af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d9b86d584542fbc34bf49726badaba2ca764228",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b86d584542fbc34bf49726badaba2ca764228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9b86d584542fbc34bf49726badaba2ca764228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b86d584542fbc34bf49726badaba2ca764228/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/992ab87114b8c9ea8230e97a9c8d8bd71939074d"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8220fecb9c6c17e013c9b758227cd846495bb018",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9b86d584542fbc34bf49726badaba2ca764228/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9b86d584542fbc34bf49726badaba2ca764228/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=1d9b86d584542fbc34bf49726badaba2ca764228",
        "patch": "@@ -21,7 +21,6 @@\n #include <vector>\n \n #include <boost/tuple/tuple.hpp>\n-#include <boost/type_traits/is_fundamental.hpp>\n \n class CAutoFile;\n class CDataStream;\n@@ -432,14 +431,15 @@ template<typename Stream, typename C> void Serialize(Stream& os, const std::basi\n template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n // vector\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+// vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n+template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n \n // others derived from vector\n@@ -536,13 +536,13 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n // vector\n //\n template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n }\n \n-template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename T, typename A, typename V>\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     unsigned int nSize = GetSizeOfCompactSize(v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -553,20 +553,20 @@ unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nV\n template<typename T, typename A>\n inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)\n {\n-    return GetSerializeSize_impl(v, nType, nVersion, boost::is_fundamental<T>());\n+    return GetSerializeSize_impl(v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n-template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename Stream, typename T, typename A, typename V>\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -576,12 +576,12 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVers\n template<typename Stream, typename T, typename A>\n inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)\n {\n-    Serialize_impl(os, v, nType, nVersion, boost::is_fundamental<T>());\n+    Serialize_impl(os, v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -596,8 +596,8 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n     }\n }\n \n-template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename Stream, typename T, typename A, typename V>\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -617,7 +617,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n template<typename Stream, typename T, typename A>\n inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)\n {\n-    Unserialize_impl(is, v, nType, nVersion, boost::is_fundamental<T>());\n+    Unserialize_impl(is, v, nType, nVersion, T());\n }\n \n "
      }
    ]
  },
  {
    "sha": "52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mjk1NTA2OGI3MGZkZDQxNjZmZmU0NDNlNzE2YjBiMmY2ZmU5ZjZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-08T18:28:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:19Z"
      },
      "message": "boost: drop dependency on tuple in serialization\n\nThere's only one user of this form of serialization, so it can be easily\ndropped. It could be re-added if desired when we switch to c++11.",
      "tree": {
        "sha": "83451c056f24669164f1e212531e567928d1e599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83451c056f24669164f1e212531e567928d1e599"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d9b86d584542fbc34bf49726badaba2ca764228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b86d584542fbc34bf49726badaba2ca764228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9b86d584542fbc34bf49726badaba2ca764228"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 4,
      "deletions": 81
    },
    "files": [
      {
        "sha": "55b6891394ba633258fed565c2fcdb3bd97d2f17",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "patch": "@@ -20,8 +20,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/tuple/tuple.hpp>\n-\n class CAutoFile;\n class CDataStream;\n class CScript;\n@@ -452,16 +450,6 @@ template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K\n template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n \n-// 3 tuple\n-template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-\n-// 4 tuple\n-template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-\n // map\n template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n@@ -669,71 +657,6 @@ void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n \n \n \n-//\n-// 3 tuple\n-//\n-template<typename T0, typename T1, typename T2>\n-unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    unsigned int nSize = 0;\n-    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2>\n-void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    Serialize(os, boost::get<0>(item), nType, nVersion);\n-    Serialize(os, boost::get<1>(item), nType, nVersion);\n-    Serialize(os, boost::get<2>(item), nType, nVersion);\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2>\n-void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    Unserialize(is, boost::get<0>(item), nType, nVersion);\n-    Unserialize(is, boost::get<1>(item), nType, nVersion);\n-    Unserialize(is, boost::get<2>(item), nType, nVersion);\n-}\n-\n-\n-\n-//\n-// 4 tuple\n-//\n-template<typename T0, typename T1, typename T2, typename T3>\n-unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    unsigned int nSize = 0;\n-    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<3>(item), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n-void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    Serialize(os, boost::get<0>(item), nType, nVersion);\n-    Serialize(os, boost::get<1>(item), nType, nVersion);\n-    Serialize(os, boost::get<2>(item), nType, nVersion);\n-    Serialize(os, boost::get<3>(item), nType, nVersion);\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n-void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    Unserialize(is, boost::get<0>(item), nType, nVersion);\n-    Unserialize(is, boost::get<1>(item), nType, nVersion);\n-    Unserialize(is, boost::get<2>(item), nType, nVersion);\n-    Unserialize(is, boost::get<3>(item), nType, nVersion);\n-}\n-\n-\n-\n //\n // map\n //"
      },
      {
        "sha": "ffddd8106b31f5ffa685390be222aeac6c228220",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "patch": "@@ -185,7 +185,7 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n \n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n+    return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n@@ -218,7 +218,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         // Read next record\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64_t(0));\n+            ssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? string(\"\") : strAccount), uint64_t(0)));\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n@@ -977,11 +977,11 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename)\n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n     nWalletDBUpdated++;\n-    return Write(boost::make_tuple(std::string(\"destdata\"), address, key), value);\n+    return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n     nWalletDBUpdated++;\n-    return Erase(boost::make_tuple(string(\"destdata\"), address, key));\n+    return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }"
      }
    ]
  },
  {
    "sha": "e405aa48c7221017467f50daf29ff6794c76332d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDA1YWE0OGM3MjIxMDE3NDY3ZjUwZGFmMjlmZjY3OTRjNzYzMzJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-09T20:38:38Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: remove CPrivKey dependency from CECKey\n\nThis allows CECKey to be used without directly depending on the secure\nallocators",
      "tree": {
        "sha": "dbb546b84ac7a1988debd2e413977411dd6dd350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbb546b84ac7a1988debd2e413977411dd6dd350"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e405aa48c7221017467f50daf29ff6794c76332d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e405aa48c7221017467f50daf29ff6794c76332d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e405aa48c7221017467f50daf29ff6794c76332d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e405aa48c7221017467f50daf29ff6794c76332d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52955068b70fdd4166ffe443e716b0b2f6fe9f6d"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "079e2c65405a4b8b16e1c7874e3758008be54dd5",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e405aa48c7221017467f50daf29ff6794c76332d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e405aa48c7221017467f50daf29ff6794c76332d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e405aa48c7221017467f50daf29ff6794c76332d",
        "patch": "@@ -179,19 +179,17 @@ class CECKey {\n         BN_clear_free(&bn);\n     }\n \n-    void GetPrivKey(CPrivKey &privkey, bool fCompressed) {\n+    int GetPrivKeySize(bool fCompressed) {\n         EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n-        int nSize = i2d_ECPrivateKey(pkey, NULL);\n-        assert(nSize);\n-        privkey.resize(nSize);\n-        unsigned char* pbegin = &privkey[0];\n-        int nSize2 = i2d_ECPrivateKey(pkey, &pbegin);\n-        assert(nSize == nSize2);\n+        return i2d_ECPrivateKey(pkey, NULL);\n+    }\n+    int GetPrivKey(unsigned char* privkey, bool fCompressed) {\n+        EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n+        return i2d_ECPrivateKey(pkey, &privkey);\n     }\n \n-    bool SetPrivKey(const CPrivKey &privkey, bool fSkipCheck=false) {\n-        const unsigned char* pbegin = &privkey[0];\n-        if (d2i_ECPrivateKey(&pkey, &pbegin, privkey.size())) {\n+    bool SetPrivKey(const unsigned char* privkey, size_t size, bool fSkipCheck=false) {\n+        if (d2i_ECPrivateKey(&pkey, &privkey, size)) {\n             if(fSkipCheck)\n                 return true;\n \n@@ -424,7 +422,7 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n         return false;\n #else\n     CECKey key;\n-    if (!key.SetPrivKey(privkey))\n+    if (!key.SetPrivKey(&privkey[0], privkey.size()))\n         return false;\n     key.GetSecretBytes(vch);\n #endif\n@@ -436,16 +434,21 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n CPrivKey CKey::GetPrivKey() const {\n     assert(fValid);\n     CPrivKey privkey;\n+    int privkeylen, ret;\n #ifdef USE_SECP256K1\n     privkey.resize(279);\n-    int privkeylen = 279;\n-    int ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n+    privkeylen = 279;\n+    ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n     assert(ret);\n     privkey.resize(privkeylen);\n #else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    key.GetPrivKey(privkey, fCompressed);\n+    privkeylen = key.GetPrivKeySize(fCompressed);\n+    assert(privkeylen);\n+    privkey.resize(privkeylen);\n+    ret = key.GetPrivKey(&privkey[0], fCompressed);\n+    assert(ret == (int)privkey.size());\n #endif\n     return privkey;\n }\n@@ -517,7 +520,7 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n         return false;\n #else\n     CECKey key;\n-    if (!key.SetPrivKey(privkey, fSkipCheck))\n+    if (!key.SetPrivKey(&privkey[0], privkey.size(), fSkipCheck))\n         return false;\n     key.GetSecretBytes(vch);\n #endif"
      }
    ]
  },
  {
    "sha": "e1c946776652a177e3b46db02391263cc24bfd5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWM5NDY3NzY2NTJhMTc3ZTNiNDZkYjAyMzkxMjYzY2MyNGJmZDVh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T04:42:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: drop boost dependency in core.cpp",
      "tree": {
        "sha": "ab42f4635f06f3fd7bc45d75a1fe7d22c4329d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab42f4635f06f3fd7bc45d75a1fe7d22c4329d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1c946776652a177e3b46db02391263cc24bfd5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c946776652a177e3b46db02391263cc24bfd5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c946776652a177e3b46db02391263cc24bfd5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c946776652a177e3b46db02391263cc24bfd5a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e405aa48c7221017467f50daf29ff6794c76332d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e405aa48c7221017467f50daf29ff6794c76332d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e405aa48c7221017467f50daf29ff6794c76332d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6a7a9ff378e9804c9a061a75795b2e6cbde9440d",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c946776652a177e3b46db02391263cc24bfd5a/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c946776652a177e3b46db02391263cc24bfd5a/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=e1c946776652a177e3b46db02391263cc24bfd5a",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"tinyformat.h\"\n \n-#include <boost/foreach.hpp>\n-\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n@@ -113,10 +111,10 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n CAmount CTransaction::GetValueOut() const\n {\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    for (std::vector<CTxOut>::const_iterator it(vout.begin()); it != vout.end(); ++it)\n     {\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n+        nValueOut += it->nValue;\n+        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n             throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n     }\n     return nValueOut;\n@@ -139,10 +137,9 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n         nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n-        unsigned int offset = 41U + std::min(110U, (unsigned int)txin.scriptSig.size());\n+        unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n         if (nTxSize > offset)\n             nTxSize -= offset;\n     }\n@@ -263,8 +260,8 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     */\n     vMerkleTree.clear();\n     vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        vMerkleTree.push_back(tx.GetHash());\n+    for (std::vector<CTransaction>::const_iterator it(vtx.begin()); it != vtx.end(); ++it)\n+        vMerkleTree.push_back(it->GetHash());\n     int j = 0;\n     bool mutated = false;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n@@ -307,12 +304,12 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n {\n     if (nIndex == -1)\n         return 0;\n-    BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+    for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n     {\n         if (nIndex & 1)\n-            hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n+            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n         else\n-            hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n         nIndex >>= 1;\n     }\n     return hash;"
      }
    ]
  },
  {
    "sha": "352058e8b0da4ec37b2f1891716c53adc2957a02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTIwNThlOGIwZGE0ZWMzN2IyZjE4OTE3MTZjNTNhZGMyOTU3YTAy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:24:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: drop boost dependency in utilstrencodings.cpp",
      "tree": {
        "sha": "0f5a62d6bb3397bd4dcfc9fafa866bc11fd6b7f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f5a62d6bb3397bd4dcfc9fafa866bc11fd6b7f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/352058e8b0da4ec37b2f1891716c53adc2957a02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352058e8b0da4ec37b2f1891716c53adc2957a02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/352058e8b0da4ec37b2f1891716c53adc2957a02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352058e8b0da4ec37b2f1891716c53adc2957a02/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1c946776652a177e3b46db02391263cc24bfd5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c946776652a177e3b46db02391263cc24bfd5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c946776652a177e3b46db02391263cc24bfd5a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "81e156f43f96af03053a0e9aa219c9ad4bd7df6a",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/352058e8b0da4ec37b2f1891716c53adc2957a02/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/352058e8b0da4ec37b2f1891716c53adc2957a02/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=352058e8b0da4ec37b2f1891716c53adc2957a02",
        "patch": "@@ -9,8 +9,8 @@\n \n #include <errno.h>\n #include <limits>\n-\n-#include <boost/foreach.hpp>\n+#include <cstdlib>\n+#include <cstring>\n \n using namespace std;\n \n@@ -53,9 +53,9 @@ signed char HexDigit(char c)\n \n bool IsHex(const string& str)\n {\n-    BOOST_FOREACH(char c, str)\n+    for(std::string::const_iterator it(str.begin()); it != str.end(); ++it)\n     {\n-        if (HexDigit(c) < 0)\n+        if (HexDigit(*it) < 0)\n             return false;\n     }\n     return (str.size() > 0) && (str.size()%2 == 0);"
      }
    ]
  },
  {
    "sha": "5f4bcf6b14eb45da408e19295332d2a8486d70df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjRiY2Y2YjE0ZWI0NWRhNDA4ZTE5Mjk1MzMyZDJhODQ4NmQ3MGRm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-13T18:15:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: drop boost dependency in version.cpp.\n\nAlso add a test to verify.",
      "tree": {
        "sha": "8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f4bcf6b14eb45da408e19295332d2a8486d70df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "352058e8b0da4ec37b2f1891716c53adc2957a02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352058e8b0da4ec37b2f1891716c53adc2957a02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/352058e8b0da4ec37b2f1891716c53adc2957a02"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "61daa0a3fe76774d8c01da6c05c3099a51f5258d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=5f4bcf6b14eb45da408e19295332d2a8486d70df",
        "patch": "@@ -9,6 +9,7 @@\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"version.h\"\n \n #include <stdint.h>\n #include <vector>\n@@ -341,4 +342,15 @@ BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 4, 4), \"test\\n    test\");\n }\n \n+BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n+{\n+    std::vector<std::string> comments;\n+    comments.push_back(std::string(\"comment1\"));\n+    std::vector<std::string> comments2;\n+    comments2.push_back(std::string(\"comment1\"));\n+    comments2.push_back(std::string(\"comment2\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d12b681e5c3b72dafe03fc87226943583708a74e",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=5f4bcf6b14eb45da408e19295332d2a8486d70df",
        "patch": "@@ -8,8 +8,6 @@\n \n #include <string>\n \n-#include <boost/algorithm/string/join.hpp>\n-\n // Name of client reported in the 'version' message. Report the same name\n // for both bitcoind and bitcoin-qt, to make it harder for attackers to\n // target servers or GUI users specifically.\n@@ -94,7 +92,13 @@ std::string FormatSubVersion(const std::string& name, int nClientVersion, const\n     ss << \"/\";\n     ss << name << \":\" << FormatVersion(nClientVersion);\n     if (!comments.empty())\n-        ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";\n+    {\n+        std::vector<std::string>::const_iterator it(comments.begin());\n+        ss << \"(\" << *it;\n+        for(++it; it != comments.end(); ++it)\n+            ss << \"; \" << *it;\n+        ss << \")\";\n+    }\n     ss << \"/\";\n     return ss.str();\n }"
      }
    ]
  }
]