sarchar,2013-10-01T16:43:41Z,Changed to a thread-safe version.\n,https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-25467161,25467161,
gavinandresen,2013-10-04T04:41:13Z,"Please add a comment explaining why a simple static instance doesn't work, or somebody not running on Windows is likely to simplify this code in six months by reverting it to what we have now.\n\nAlso: what other initialized-at-startup-time objects do we have that use the LockedPageManager and tickle this bug? Perhaps it would be better to initialize those at startup (and explicitly delete them at",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-25676213,25676213,
sarchar,2013-10-05T10:08:29Z,"I added comments and addressed destruction.\n\nThe objects types using the secure_allocator are SecureString, CKeyingMaterial, and CPrivKey.  SecureString is used as a parameter to some functions that could be used during object construction (or could end up being used by someone else in the future).  It would be non-trivial to make sure these objects are not used in staticly constructed objects. ",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-25745581,25745581,
sipa,2013-10-13T20:42:06Z,"Managed instances are generally better practice than globally-contructed objects, as construct/destruct order isn't guaranteed between them. Also, if there are objects that have overhead in constructing, doing so lazily (=upon first use) is better for modularity (don't waste time/memory on stuff that a user of your code doesn't use).\n\nGeneral ACK on the idea, though I'd feel more comfortable if ",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26226567,26226567,
sarchar,2013-10-13T21:25:24Z,"> General ACK on the idea, though I'd feel more comfortable if the page manager would also get destructed again. Do you know if there's a best-practice idiom for that?\n\nFrom what I understand (about C++), local-statics are destructed in the reverse order they're constructed before program exit.  So the destructor is indeed called at exit.\n\nAlso, rebased.\n",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26227524,26227524,
sipa,2013-10-13T21:29:25Z,"`LockedPageManager::_instance` is indeed destructed at shutdown, but it is a pointer; the object it points to isn't destructed. One option would be using a `boost::scoped_ptr<LockedPageManager>` instead of a `LockedPageManager*`\n\nEDIT: I misread, you're not constructing it on the heap, but in a method with a local static.\n",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26227602,26227602,
sarchar,2013-10-13T21:47:10Z,"> EDIT: I misread, you're not constructing it on the heap, but in a method with a local static.\n\nYeah, it gets destructed in the atexit() code of the standard C++ runtime.  You can put a breakpoint in the base classes destructor to verify.\n\nI'll fix up those other notes you mentioned.\n",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26227932,26227932,
sarchar,2013-10-20T07:34:31Z,"Removed ""initialized in util.cpp"" comment.\n",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26666736,26666736,
BitcoinPullTester,2013-10-20T07:47:32Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/0b8f47dc531d3cbaf172a5e17f27524a40833dba for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26667538,26667538,
sipa,2013-10-20T11:39:34Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/3046#issuecomment-26671354,26671354,
laanwj,2013-10-01T11:30:36Z,Is this thread-safe?\n,https://github.com/bitcoin/bitcoin/pull/3046#discussion_r6683755,6683755,src/allocators.h
sarchar,2013-10-01T15:57:39Z,"It's not.  I'm reading up on some proper ways to get cross-platform thread-safe static initialization, and it looks like boost:call_once might work.  Would that be suitable?\n",https://github.com/bitcoin/bitcoin/pull/3046#discussion_r6690925,6690925,src/allocators.h
laanwj,2013-10-01T16:32:42Z,"Yes, I suppose that's exactly what call_once is for :)\nThinking of boost, maybe it has a built-in way to do managed instances? (not that it would save much code...)\n",https://github.com/bitcoin/bitcoin/pull/3046#discussion_r6692039,6692039,src/allocators.h
sipa,2013-10-13T21:34:50Z,There is an allocators.cpp now; these belong there.\n,https://github.com/bitcoin/bitcoin/pull/3046#discussion_r6935949,6935949,src/util.cpp
sipa,2013-10-13T21:35:27Z,Coding style: no spaces within braces.\n,https://github.com/bitcoin/bitcoin/pull/3046#discussion_r6935953,6935953,src/allocators.h
gavinandresen,2013-10-20T06:10:36Z,Remove comment: they are NOT initialized in util.cpp.\n,https://github.com/bitcoin/bitcoin/pull/3046#discussion_r7081578,7081578,src/allocators.h
