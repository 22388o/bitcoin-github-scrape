[
  {
    "sha": "0b8f47dc531d3cbaf172a5e17f27524a40833dba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjhmNDdkYzUzMWQzY2JhZjE3MmE1ZTE3ZjI3NTI0YTQwODMzZGJh",
    "commit": {
      "author": {
        "name": "Chuck",
        "email": "chuck@borboggle.com",
        "date": "2013-10-01T10:23:17Z"
      },
      "committer": {
        "name": "Chuck",
        "email": "chuck@borboggle.com",
        "date": "2013-10-20T07:29:24Z"
      },
      "message": "Changing LockedPageManager to use a managed instance\n\nThis ensures the allocator is ready no matter when it's needed (as\nsome STL implementations allocate in constructors -- i.e., MSVC's STL\nin debug builds).\n\nUsing boost::call_once to guarantee thread-safe static initialization.\n\nAdding some comments describing why the change was made.\n\nAddressing deinitialization of the LockedPageManager object\nby initializing it in a local static initializer and adding\nan assert in the base's destructor.",
      "tree": {
        "sha": "eb88d649af3af86b65f914206dfe30ad06230d33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb88d649af3af86b65f914206dfe30ad06230d33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b8f47dc531d3cbaf172a5e17f27524a40833dba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b8f47dc531d3cbaf172a5e17f27524a40833dba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b8f47dc531d3cbaf172a5e17f27524a40833dba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b8f47dc531d3cbaf172a5e17f27524a40833dba/comments",
    "author": {
      "login": "sarchar",
      "id": 4928176,
      "node_id": "MDQ6VXNlcjQ5MjgxNzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4928176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sarchar",
      "html_url": "https://github.com/sarchar",
      "followers_url": "https://api.github.com/users/sarchar/followers",
      "following_url": "https://api.github.com/users/sarchar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sarchar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sarchar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sarchar/subscriptions",
      "organizations_url": "https://api.github.com/users/sarchar/orgs",
      "repos_url": "https://api.github.com/users/sarchar/repos",
      "events_url": "https://api.github.com/users/sarchar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sarchar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sarchar",
      "id": 4928176,
      "node_id": "MDQ6VXNlcjQ5MjgxNzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4928176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sarchar",
      "html_url": "https://github.com/sarchar",
      "followers_url": "https://api.github.com/users/sarchar/followers",
      "following_url": "https://api.github.com/users/sarchar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sarchar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sarchar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sarchar/subscriptions",
      "organizations_url": "https://api.github.com/users/sarchar/orgs",
      "repos_url": "https://api.github.com/users/sarchar/repos",
      "events_url": "https://api.github.com/users/sarchar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sarchar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "896853a011f6681d41bc585e020d74a7f2fece88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/896853a011f6681d41bc585e020d74a7f2fece88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/896853a011f6681d41bc585e020d74a7f2fece88"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 45,
      "deletions": 11
    },
    "files": [
      {
        "sha": "15f34aa2c8f36347235dbf6b3ee0e755b0d69372",
        "filename": "src/allocators.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/allocators.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/allocators.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.cpp?ref=0b8f47dc531d3cbaf172a5e17f27524a40833dba",
        "patch": "@@ -24,6 +24,9 @@\n #include <unistd.h> // for sysconf\n #endif\n \n+LockedPageManager* LockedPageManager::_instance = NULL;\n+boost::once_flag LockedPageManager::init_flag = BOOST_ONCE_INIT;\n+\n /** Determine system page size in bytes */\n static inline size_t GetSystemPageSize()\n {"
      },
      {
        "sha": "b199f2dd448e95e7b8402108e9befcc169aa0cc3",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 38,
        "deletions": 5,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=0b8f47dc531d3cbaf172a5e17f27524a40833dba",
        "patch": "@@ -8,6 +8,7 @@\n #include <string.h>\n #include <string>\n #include <boost/thread/mutex.hpp>\n+#include <boost/thread/once.hpp>\n #include <map>\n #include <openssl/crypto.h> // for OPENSSL_cleanse()\n \n@@ -34,6 +35,12 @@ template <class Locker> class LockedPageManagerBase\n         page_mask = ~(page_size - 1);\n     }\n \n+    ~LockedPageManagerBase()\n+    {\n+        assert(this->GetLockedPageCount() == 0);\n+    }\n+\n+\n     // For all pages in affected range, increase lock count\n     void LockRange(void *p, size_t size)\n     {\n@@ -117,26 +124,52 @@ class MemoryPageLocker\n /**\n  * Singleton class to keep track of locked (ie, non-swappable) memory pages, for use in\n  * std::allocator templates.\n+ *\n+ * Some implementations of the STL allocate memory in some constructors (i.e., see\n+ * MSVC's vector<T> implementation where it allocates 1 byte of memory in the allocator.)\n+ * Due to the unpredictable order of static initializers, we have to make sure the\n+ * LockedPageManager instance exists before any other STL-based objects that use\n+ * secure_allocator are created. So instead of having LockedPageManager also be\n+ * static-intialized, it is created on demand.\n  */\n class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n {\n public:\n-    static LockedPageManager instance; // instantiated in util.cpp\n+    static LockedPageManager& Instance() \n+    {\n+        boost::call_once(LockedPageManager::CreateInstance, LockedPageManager::init_flag);\n+        return *LockedPageManager::_instance;\n+    }\n+\n private:\n     LockedPageManager();\n+\n+    static void CreateInstance()\n+    {\n+        // Using a local static instance guarantees that the object is initialized\n+        // when it's first needed and also deinitialized after all objects that use\n+        // it are done with it.  I can think of one unlikely scenario where we may\n+        // have a static deinitialization order/problem, but the check in\n+        // LockedPageManagerBase's destructor helps us detect if that ever happens.\n+        static LockedPageManager instance;\n+        LockedPageManager::_instance = &instance;\n+    }\n+\n+    static LockedPageManager* _instance;\n+    static boost::once_flag init_flag;\n };\n \n //\n // Functions for directly locking/unlocking memory objects.\n // Intended for non-dynamically allocated structures.\n //\n template<typename T> void LockObject(const T &t) {\n-    LockedPageManager::instance.LockRange((void*)(&t), sizeof(T));\n+    LockedPageManager::Instance().LockRange((void*)(&t), sizeof(T));\n }\n \n template<typename T> void UnlockObject(const T &t) {\n     OPENSSL_cleanse((void*)(&t), sizeof(T));\n-    LockedPageManager::instance.UnlockRange((void*)(&t), sizeof(T));\n+    LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n //\n@@ -168,7 +201,7 @@ struct secure_allocator : public std::allocator<T>\n         T *p;\n         p = std::allocator<T>::allocate(n, hint);\n         if (p != NULL)\n-            LockedPageManager::instance.LockRange(p, sizeof(T) * n);\n+            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n         return p;\n     }\n \n@@ -177,7 +210,7 @@ struct secure_allocator : public std::allocator<T>\n         if (p != NULL)\n         {\n             OPENSSL_cleanse(p, sizeof(T) * n);\n-            LockedPageManager::instance.UnlockRange(p, sizeof(T) * n);\n+            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n         std::allocator<T>::deallocate(p, n);\n     }"
      },
      {
        "sha": "9826d63b764149c60e5fa6ab7a6fe18eee7f9880",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=0b8f47dc531d3cbaf172a5e17f27524a40833dba",
        "patch": "@@ -88,16 +88,16 @@ class CCrypter\n         // Try to keep the key data out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n         // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n         // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.\n-        LockedPageManager::instance.LockRange(&chKey[0], sizeof chKey);\n-        LockedPageManager::instance.LockRange(&chIV[0], sizeof chIV);\n+        LockedPageManager::Instance().LockRange(&chKey[0], sizeof chKey);\n+        LockedPageManager::Instance().LockRange(&chIV[0], sizeof chIV);\n     }\n \n     ~CCrypter()\n     {\n         CleanKey();\n \n-        LockedPageManager::instance.UnlockRange(&chKey[0], sizeof chKey);\n-        LockedPageManager::instance.UnlockRange(&chIV[0], sizeof chIV);\n+        LockedPageManager::Instance().UnlockRange(&chKey[0], sizeof chKey);\n+        LockedPageManager::Instance().UnlockRange(&chIV[0], sizeof chIV);\n     }\n };\n "
      },
      {
        "sha": "ab288f63f583dcb8a07995850a79f3924fcdbb86",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b8f47dc531d3cbaf172a5e17f27524a40833dba/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0b8f47dc531d3cbaf172a5e17f27524a40833dba",
        "patch": "@@ -95,8 +95,6 @@ void locking_callback(int mode, int i, const char* file, int line)\n     }\n }\n \n-LockedPageManager LockedPageManager::instance;\n-\n // Init\n class CInit\n {"
      }
    ]
  }
]