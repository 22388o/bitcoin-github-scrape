theuni,2015-02-24T02:23:59Z,"ping @gmaxwell, your thoughts would be appreciated since we discussed this a few nights ago.\n",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75686881,75686881,
gmaxwell,2015-02-24T03:27:22Z,"Sad to hear that visibility control is being problematic, especially as we move towards making a library out of things. In the long term I don't think we can have the library that way (or callers will use random internal symbols). In the short term sure.\n\nThe size increase is smaller than I expected;  8% is worth a reduction in consensus risk and getting binaties working on debian wheezy esp con",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75692193,75692193,
koobs,2015-02-24T04:11:56Z,"@theuni While we're here, --disable-reduced-exports in the error messaging needs to be changed to --disable-reduce-exports\n",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75696617,75696617,
theuni,2015-02-24T04:37:16Z,"@koobs It's fixed, see 3448b13.\n\n@gmaxwell As far as I'm aware, all trouble is caused by old (gcc 4.2 era) libstdc++. So eventually this won't be much of a problem (or it will be replaced with newer problems...).\n\nBut more to your point, I suppose I've explained the changes here poorly. For our official releases, we still build with hidden symbols as before, we just also link libstdc++ statica",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75698314,75698314,
gmaxwell,2015-02-24T04:55:24Z,"@theuni I followed wrt visibility and releases. I /think/ virtually no one using the software as a library will be using our release binaries, so we can expect the excessive exports being abused. I think thats acceptable for now as none of the library interface stuff is stable to begin with.\n",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75699478,75699478,
koobs,2015-02-24T05:01:04Z,"@theuni Just for additional reference here, your statement about libstdc++ being the issue is confirmed and evidenced in the fact that whether using cc (gcc 4.2.1) or clang (3.4.1) on FreeBSD 9-STABLE, libstdc++ is linked.\n\nclang can use both GNU libstdc++ and libc++, depending on the -stdlib= option. On 9.x it uses the former by default, on 10.x and later the latter.\n",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75699877,75699877,
laanwj,2015-02-24T08:17:03Z,"Good catch. Again shows that shipping portable binaries for Linux is all but impossible.\nMaybe something like [xdg-app](http://blogs.gnome.org/mclasen/2015/01/21/sandboxed-applications-for-gnome/) sandboxing can change this in the near future.\n\nOne question: Won't statically linking libstdc++ in the gitian build give problems with Qt (as we don't like that statically, and thus the dynamic qt wi",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75715619,75715619,
theuni,2015-02-25T06:54:03Z,"@laanwj I'm really unsure. As an initial data point, it appears to run fine on Debian Wheezy (where it was broken before).\n\nThinking through it a bit...\nbitcoin-qt's own throw/catch usage should be fine because the exception types are defined internally. Qt's throw/catch usage should be fine because their types are dynamically loaded, and we don't export them.\n\nI think the worrisome case woul",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75914281,75914281,
laanwj,2015-02-25T10:47:09Z,"@theuni Maybe I'm misunderstanding something. I'm not only worried about exceptions, but as I see it this will result in Qt and bitcoin-qt using different versions of libstdc++. The two versions of libstdc++ may have slightly different interpretations of types. When stdc++ types are passed across the dynamic library barrier (for example for QString::fromStdStding) this could cause potential issues",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75940151,75940151,
gmaxwell,2015-02-25T10:49:48Z,"Well for example, GCC 5's libstdc++ includes an ABI incompatible string type. ... but there I expect bitcoin core won't work at all on those systems unless all C++ parts are statically linked.\n",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75940498,75940498,
laanwj,2015-02-25T10:57:22Z,@gmaxwell Right. Running the binary on such a system would only work if Qt is statically linked as well. Another point in favor of that.\n,https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-75941424,75941424,
theuni,2015-02-25T18:33:38Z,@laanwj I'm all for static qt if you're up for it. I'll run a quick gitian test with the above changes + static qt to see if there are any surprises.\n,https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-76025451,76025451,
theuni,2015-02-26T18:48:19Z,Changed to static qt. Release sizes roughly doubled :(\n\nFor testing:\nhttps://bitcoincore.org/cfields/static-qt/bitcoin-0.10.99-linux32.tar.gz\nhttps://bitcoincore.org/cfields/static-qt/bitcoin-0.10.99-linux64.tar.gz\n\nWorks fine on Debian Squeeze 32.\n\nbinary depends:\n\n```\n 0x0000000000000001 (NEEDED)             Shared library: [libX11-xcb.so.1]\n 0x0000000000000001 (NEEDED)             S,https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-76241349,76241349,
sipa,2015-03-01T11:14:08Z,No opinion.\n,https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-76592449,76592449,
laanwj,2015-03-03T15:26:55Z,"> That would drop the libX11-xcb.so.1 and libX11.so.6 deps, but I'm not clear on the implications.\n\nThose are extremely common libraries, and also purely C not C++, so I have no problem with having them as dependency for the GUI.\n",https://github.com/bitcoin/bitcoin/pull/5819#issuecomment-76966290,76966290,
