[
  {
    "sha": "fa811b0b1df1e884833a0d4d849b241ca0f449aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgxMWIwYjFkZjFlODg0ODMzYTBkNGQ4NDliMjQxY2EwZjQ0OWFh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-19T12:38:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-21T20:55:42Z"
      },
      "message": "qa: Normalize executable location",
      "tree": {
        "sha": "4f54a61b73e5eaf023018d2b559dfdeaa50fad63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f54a61b73e5eaf023018d2b559dfdeaa50fad63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa811b0b1df1e884833a0d4d849b241ca0f449aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJa26VOAAoJEM4rdWl+aaVIiLsL/36Yu+k1tlaaVQ/zbWpNyf5H\nMXtwmIb3tM1BtJRfLNSawS7b7Cd314XFj8bTZMH+S+WNIVYxNnmV6F1gAfNfJr23\nyT7Pl9y241zf28pkT9wbd9fDkZQJRIeLdsIMvt25PBWXXKIYSlUh+t7xcd6kJDaD\nuRYIZSbIZpDppfS7weMsyEu08EOrwiIxLd+Q0NNuDkXgZOMMj2zR8jKdoGj3k2/A\njKy8OUALS5gFe0C5A/jkkzG93Kir+2EC9Si0yW569iY/rxwZIH/Oo9c81O+aofCG\nn80Aruewb/WnsKq7fWhPPj7vHsyYLUnGgskLlg8TfHCdUufGXNeKIWUhNSzgSrqy\nEOziGHUDrtMsbZkMXSf50my91Zz2enrMs+Fcj6E/42Oh9HvyhjEWHnai/qjgE9iD\nZzYpy2LCOOzcgb/vLZ7NSkm8X6Mwl/w8zpeTwtyx2OtB3TK7DEplZDixHEL3V60K\nJF374cCNRh2ujR4XdHkcqPoYCPqDVzrZdfd0kIKoew==\n=YuOq\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f54a61b73e5eaf023018d2b559dfdeaa50fad63\nparent 39cf27faf324057cdcce45a07834fc5aa68a8101\nauthor MarcoFalke <falke.marco@gmail.com> 1524141539 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1524344142 -0400\n\nqa: Normalize executable location\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa811b0b1df1e884833a0d4d849b241ca0f449aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa811b0b1df1e884833a0d4d849b241ca0f449aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa811b0b1df1e884833a0d4d849b241ca0f449aa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39cf27faf324057cdcce45a07834fc5aa68a8101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39cf27faf324057cdcce45a07834fc5aa68a8101",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39cf27faf324057cdcce45a07834fc5aa68a8101"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 21,
      "deletions": 30
    },
    "files": [
      {
        "sha": "af2e752b7a8fd7eb6342e1df854b1f13065e624f",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fa811b0b1df1e884833a0d4d849b241ca0f449aa",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import configparser\n-import os\n import struct\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n@@ -47,8 +46,6 @@ def setup_nodes(self):\n \n         # Check that bitcoin has been built with ZMQ enabled.\n         config = configparser.ConfigParser()\n-        if not self.options.configfile:\n-            self.options.configfile = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../config.ini\"))\n         config.read_file(open(self.options.configfile))\n \n         if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):"
      },
      {
        "sha": "49c619a4ce209cd601e9a3995f54602175ee05f7",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fa811b0b1df1e884833a0d4d849b241ca0f449aa",
        "patch": "@@ -57,12 +57,8 @@\n import time\n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n \n-class AcceptBlockTest(BitcoinTestFramework):\n-    def add_options(self, parser):\n-        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n-                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n-                          help=\"bitcoind binary to test\")\n \n+class AcceptBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2"
      },
      {
        "sha": "472664a314ca4d8e6901703b341067e1fa1b51dd",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa811b0b1df1e884833a0d4d849b241ca0f449aa",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n+import configparser\n from enum import Enum\n import logging\n import optparse\n@@ -97,10 +98,10 @@ def main(self):\n                           help=\"Leave bitcoinds and test.* datadir on exit or error\")\n         parser.add_option(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n                           help=\"Don't stop bitcoinds after the test execution\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../../../src\"),\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + \"/../../../src\"),\n                           help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n-        parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../../cache\"),\n-                          help=\"Directory for caching pregenerated datadirs\")\n+        parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + \"/../../cache\"),\n+                          help=\"Directory for caching pregenerated datadirs (default: %default)\")\n         parser.add_option(\"--tmpdir\", dest=\"tmpdir\", help=\"Root directory for datadirs\")\n         parser.add_option(\"-l\", \"--loglevel\", dest=\"loglevel\", default=\"INFO\",\n                           help=\"log events at this level and higher to the console. Can be set to DEBUG, INFO, WARNING, ERROR or CRITICAL. Passing --loglevel DEBUG will output all logs to console. Note that logs at all levels are always written to the test_framework.log file in the temporary test directory.\")\n@@ -111,7 +112,8 @@ def main(self):\n         parser.add_option(\"--coveragedir\", dest=\"coveragedir\",\n                           help=\"Write tested RPC commands into this directory\")\n         parser.add_option(\"--configfile\", dest=\"configfile\",\n-                          help=\"Location of the test framework config file\")\n+                          default=os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + \"/../../config.ini\"),\n+                          help=\"Location of the test framework config file (default: %default)\")\n         parser.add_option(\"--pdbonfailure\", dest=\"pdbonfailure\", default=False, action=\"store_true\",\n                           help=\"Attach a python debugger if test fails\")\n         parser.add_option(\"--usecli\", dest=\"usecli\", default=False, action=\"store_true\",\n@@ -129,6 +131,11 @@ def main(self):\n \n         self.options.cachedir = os.path.abspath(self.options.cachedir)\n \n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n+        self.options.bitcoind = os.getenv(\"BITCOIND\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"])\n+        self.options.bitcoincli = os.getenv(\"BITCOINCLI\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-cli' + config[\"environment\"][\"EXEEXT\"])\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n             self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n@@ -246,12 +253,12 @@ def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, bin\n         if extra_args is None:\n             extra_args = [[]] * num_nodes\n         if binary is None:\n-            binary = [None] * num_nodes\n+            binary = [self.options.bitcoind] * num_nodes\n         assert_equal(len(extra_confs), num_nodes)\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, get_datadir_path(self.options.tmpdir, i), rpchost=rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, get_datadir_path(self.options.tmpdir, i), rpchost=rpchost, timewait=timewait, bitcoind=binary[i], bitcoin_cli=self.options.bitcoincli, stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -399,10 +406,10 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[],rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=None, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "f5c18e7be88ed89dc0bd69e9b1c07dbf36509e82",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa811b0b1df1e884833a0d4d849b241ca0f449aa",
        "patch": "@@ -10,7 +10,6 @@\n import http.client\n import json\n import logging\n-import os\n import re\n import subprocess\n import tempfile\n@@ -57,7 +56,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, rpchost, timewait, binary, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, rpchost, timewait, bitcoind, bitcoin_cli, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n         self.index = i\n         self.datadir = datadir\n         self.rpchost = rpchost\n@@ -66,10 +65,7 @@ def __init__(self, i, datadir, rpchost, timewait, binary, stderr, mocktime, cove\n         else:\n             # Wait for up to 60 seconds for the RPC server to respond\n             self.rpc_timeout = 60\n-        if binary is None:\n-            self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        else:\n-            self.binary = binary\n+        self.binary = bitcoind\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n         if extra_conf != None:\n@@ -90,7 +86,7 @@ def __init__(self, i, datadir, rpchost, timewait, binary, stderr, mocktime, cove\n             \"-noprinttoconsole\"\n         ]\n \n-        self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n+        self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n         self.use_cli = use_cli\n \n         self.running = False"
      },
      {
        "sha": "7be28a258fe94588e3eec045d0b7995d4bc07b9f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa811b0b1df1e884833a0d4d849b241ca0f449aa/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fa811b0b1df1e884833a0d4d849b241ca0f449aa",
        "patch": "@@ -281,9 +281,9 @@ def main():\n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n \n-    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args, args.combinedlogslen)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], tmpdir, args.jobs, args.coverage, passon_args, args.combinedlogslen)\n \n-def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[], combined_logs_len=0):\n+def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=[], combined_logs_len=0):\n     # Warn if bitcoind is already running (unix only)\n     try:\n         if subprocess.check_output([\"pidof\", \"bitcoind\"]) is not None:\n@@ -296,11 +296,6 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     if os.path.isdir(cache_dir):\n         print(\"%sWARNING!%s There is a cache directory here: %s. If tests fail unexpectedly, try deleting the cache directory.\" % (BOLD[1], BOLD[0], cache_dir))\n \n-    #Set env vars\n-    if \"BITCOIND\" not in os.environ:\n-        os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n-        os.environ[\"BITCOINCLI\"] = build_dir + '/src/bitcoin-cli' + exeext\n-\n     tests_dir = src_dir + '/test/functional/'\n \n     flags = [\"--srcdir={}/src\".format(build_dir)] + args"
      }
    ]
  }
]