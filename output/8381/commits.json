[
  {
    "sha": "1ffaff2f747af683513d6d74a7241d41e3f6e051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmZhZmYyZjc0N2FmNjgzNTEzZDZkNzRhNzI0MWQ0MWUzZjZlMDUx",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-07-20T10:31:45Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-07-22T06:35:07Z"
      },
      "message": "Make witness v0 outputs non-standard before segwit activation",
      "tree": {
        "sha": "e1f4f43215830297e1c1e2781e7b9c2313a45200",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1f4f43215830297e1c1e2781e7b9c2313a45200"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffaff2f747af683513d6d74a7241d41e3f6e051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e048f40cc25b6ad3f49d2828c8562b657d91ced"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "70f0a424755a2abb59e6851fc6e9b609c3f06d0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "patch": "@@ -1144,13 +1144,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n-    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n+    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next"
      },
      {
        "sha": "de3996bb4a480a66847de053133b59be3740aa17",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "patch": "@@ -31,7 +31,7 @@\n      *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n      */\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -49,11 +49,14 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     } else if (whichType == TX_NULL_DATA &&\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n+          \n+    else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n+        return false;\n \n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)\n {\n     if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n@@ -92,7 +95,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }"
      },
      {
        "sha": "ad209d0306e2bbfb179632baae07f2670f019153",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "patch": "@@ -53,12 +53,12 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending"
      }
    ]
  },
  {
    "sha": "c59c434b7d1211c13f7904b9bc675e16910a1c0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTljNDM0YjdkMTIxMWMxM2Y3OTA0YjliYzY3NWUxNjkxMGExYzBh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-22T15:09:45Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-07-22T16:01:02Z"
      },
      "message": "qa: Add test for standardness of segwit v0 outputs",
      "tree": {
        "sha": "f5ac045d8d2d967b462b0404da2471def4bc1655",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5ac045d8d2d967b462b0404da2471def4bc1655"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffaff2f747af683513d6d74a7241d41e3f6e051"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 79,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cd02692b1e88c037a9e8e23de145c1a2922af7da",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59c434b7d1211c13f7904b9bc675e16910a1c0a/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59c434b7d1211c13f7904b9bc675e16910a1c0a/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=c59c434b7d1211c13f7904b9bc675e16910a1c0a",
        "patch": "@@ -1086,6 +1086,82 @@ def test_block_relay(self, segwit_activated):\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n             assert(block4.sha256 not in self.old_node.getdataset)\n \n+    # V0 segwit outputs should be standard after activation, but not before.\n+    def test_standardness_v0(self, segwit_activated):\n+        print(\"\\tTesting standardness of v0 outputs (%s activation)\" % (\"after\" if segwit_activated else \"before\"))\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        p2sh_pubkey = hash160(witness_program)\n+        p2sh_scriptPubKey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+\n+        # First prepare a p2sh output (so that spending it will pass standardness)\n+        p2sh_tx = CTransaction()\n+        p2sh_tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n+        p2sh_tx.vout = [CTxOut(self.utxo[0].nValue-1000, p2sh_scriptPubKey)]\n+        p2sh_tx.rehash()\n+\n+        # Mine it on test_node to create the confirmed output.\n+        self.test_node.test_transaction_acceptance(p2sh_tx, with_witness=True, accepted=True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Now test standardness of v0 P2WSH outputs.\n+        # Start by creating a transaction with two outputs.\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+        tx.vout = [CTxOut(p2sh_tx.vout[0].nValue-10000, scriptPubKey)]\n+        tx.vout.append(CTxOut(8000, scriptPubKey)) # Might burn this later\n+        tx.rehash()\n+\n+        self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=segwit_activated)\n+\n+        # Now create something that looks like a P2PKH output. This won't be spendable.\n+        scriptPubKey = CScript([OP_0, hash160(witness_hash)])\n+        tx2 = CTransaction()\n+        if segwit_activated:\n+            # if tx was accepted, then we spend the second output.\n+            tx2.vin = [CTxIn(COutPoint(tx.sha256, 1), b\"\")]\n+            tx2.vout = [CTxOut(7000, scriptPubKey)]\n+            tx2.wit.vtxinwit.append(CTxInWitness())\n+            tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        else:\n+            # if tx wasn't accepted, we just re-spend the p2sh output we started with.\n+            tx2.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+            tx2.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.rehash()\n+\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=segwit_activated)\n+\n+        # Now update self.utxo for later tests.\n+        tx3 = CTransaction()\n+        if segwit_activated:\n+            # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n+            # P2PKH output; just send tx's first output back to an anyone-can-spend.\n+            sync_mempools(self.nodes)\n+            tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+            tx3.vout = [CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE]))]\n+            tx3.wit.vtxinwit.append(CTxInWitness())\n+            tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+            tx3.rehash()\n+            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        else:\n+            # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n+            tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+            tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, witness_program)]\n+            tx3.rehash()\n+            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+\n     # Verify that future segwit upgraded transactions are non-standard,\n     # but valid in blocks. Can run this before and after segwit activation.\n     def test_segwit_versions(self):\n@@ -1658,6 +1734,7 @@ def run_test(self):\n         self.test_witness_tx_relay_before_segwit_activation()\n         self.test_block_relay(segwit_activated=False)\n         self.test_p2sh_witness(segwit_activated=False)\n+        self.test_standardness_v0(segwit_activated=False)\n \n         sync_blocks(self.nodes)\n \n@@ -1679,6 +1756,7 @@ def run_test(self):\n         self.test_witness_input_length()\n         self.test_block_relay(segwit_activated=True)\n         self.test_tx_relay_after_segwit_activation()\n+        self.test_standardness_v0(segwit_activated=True)\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n         self.test_signature_version_1()"
      },
      {
        "sha": "57df1f0b1956b22383d33a045643515bc2c57f33",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59c434b7d1211c13f7904b9bc675e16910a1c0a/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59c434b7d1211c13f7904b9bc675e16910a1c0a/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c59c434b7d1211c13f7904b9bc675e16910a1c0a",
        "patch": "@@ -49,7 +49,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n     } else if (whichType == TX_NULL_DATA &&\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n-          \n+\n     else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n         return false;\n "
      }
    ]
  }
]