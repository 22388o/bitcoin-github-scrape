[
  {
    "sha": "524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjRiNDFmZmRiNjdlYmFmMTUzOGEzOWI4ODM0NGU3ZDQxMThiNGI4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-06T14:53:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-15T22:52:12Z"
      },
      "message": "[refactor] versionbits: make AbstractThresholdConditionChecker less abstract\n\nAbstractThresholdConditionChecker is already tightly tied to\nConsensus::BIP9Deployment, so have it reference that directly rather\nthan abstracting it. It also does not need most of Consensus::Params,\nso pull out the two relevant fields directly.\n\nAlso pull the Condition() implementation and Mask() function into the\nbase class, though keeping Condition() virtual to allow it to be replaced.\n\nThis simplifies the API substantially, but more importantly makes it\neasier to test independently.",
      "tree": {
        "sha": "ad940d9d7b7998d4e26b8692a62b43a3d9d809de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad940d9d7b7998d4e26b8692a62b43a3d9d809de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ba1bab44390090a939d5ab2dee1440330f9a2d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba1bab44390090a939d5ab2dee1440330f9a2d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba1bab44390090a939d5ab2dee1440330f9a2d7"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 94,
      "deletions": 77
    },
    "files": [
      {
        "sha": "e5401ee32efae9d082a511ec8f9083a3cc48ce3c",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 18,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
        "patch": "@@ -26,35 +26,54 @@ static const std::string StateName(ThresholdState state)\n     return \"\";\n }\n \n-static const Consensus::Params paramsDummy = Consensus::Params();\n-\n class TestConditionChecker : public AbstractThresholdConditionChecker\n {\n private:\n     mutable ThresholdConditionCache cache;\n \n+protected:\n+    Consensus::BIP9Deployment m_dep_storage;\n+\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const override { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const override { return 1000; }\n-    int Threshold(const Consensus::Params& params) const override { return 900; }\n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n-\n-    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n-    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n+    TestConditionChecker() : AbstractThresholdConditionChecker(m_dep_storage, 1000, 900)\n+    {\n+        m_dep_storage.bit = 8;\n+        m_dep_storage.nStartTime = TestTime(10000);\n+        m_dep_storage.nTimeout = TestTime(20000);\n+    }\n+\n+    TestConditionChecker& operator=(const TestConditionChecker& other)\n+    {\n+        cache = other.cache;\n+        m_dep_storage = other.m_dep_storage;\n+        return *this;\n+    }\n+\n+    bool Condition(const CBlockIndex* pindex) const override { return (pindex->nVersion & 0x100); }\n+\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, cache); }\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, cache); }\n+\n+    int Period() const { return m_period; }\n };\n \n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n+    TestAlwaysActiveConditionChecker() : TestConditionChecker()\n+    {\n+        m_dep_storage.nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+    }\n };\n \n class TestNeverActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return 1230768000; }\n+    TestNeverActiveConditionChecker() : TestConditionChecker()\n+    {\n+        m_dep_storage.nStartTime = 0;\n+        m_dep_storage.nTimeout = 1230768000;\n+    }\n };\n \n #define CHECKERS 6\n@@ -110,24 +129,25 @@ class VersionBitsTester\n     }\n \n     VersionBitsTester& TestStateSinceHeight(int height) {\n+        const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(pindex) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(pindex) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n \n                 // never active may go from DEFINED -> FAILED at the first period\n-                const auto never_height = checker_never[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back());\n-                BOOST_CHECK_MESSAGE(never_height == 0 || never_height == checker_never[i].Period(paramsDummy), strprintf(\"Test %i for StateSinceHeight (never active)\", num));\n+                const auto never_height = checker_never[i].GetStateSinceHeightFor(pindex);\n+                BOOST_CHECK_MESSAGE(never_height == 0 || never_height == checker_never[i].Period(), strprintf(\"Test %i for StateSinceHeight (never active)\", num));\n             }\n         }\n         num++;\n         return *this;\n     }\n \n     VersionBitsTester& TestState(ThresholdState exp) {\n+        const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n-                const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n                 ThresholdState got = checker[i].GetStateFor(pindex);\n                 ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n                 ThresholdState got_never = checker_never[i].GetStateFor(pindex);"
      },
      {
        "sha": "716eb8b95608aa5853c03133aafac8fa800190bb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
        "patch": "@@ -1832,22 +1832,27 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n {\n private:\n-    int bit;\n+    Consensus::BIP9Deployment m_dep_storage;\n+    const int m_min_height;\n+    const Consensus::Params& m_params;\n \n public:\n-    explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n-\n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n-    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n+    explicit WarningBitsConditionChecker(const Consensus::Params& params, int bitIn) :\n+        AbstractThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow, params.nRuleChangeActivationThreshold),\n+        m_min_height{params.MinBIP9WarningHeight},\n+        m_params{params}\n+    {\n+        m_dep_storage.bit = bitIn;\n+        m_dep_storage.nStartTime = 0;\n+        m_dep_storage.nTimeout = std::numeric_limits<int64_t>::max();\n+    }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n+    bool Condition(const CBlockIndex* pindex) const override\n     {\n-        return pindex->nHeight >= params.MinBIP9WarningHeight &&\n+        return pindex->nHeight >= m_min_height &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n-               ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((pindex->nVersion >> m_dep_storage.bit) & 1) != 0 &&\n+               ((ComputeBlockVersion(pindex->pprev, m_params) >> m_dep_storage.bit) & 1) == 0;\n     }\n };\n \n@@ -2453,8 +2458,8 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n     if (!active_chainstate.IsInitialBlockDownload()) {\n         const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n-            WarningBitsConditionChecker checker(bit);\n-            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            WarningBitsConditionChecker checker(chainParams.GetConsensus(), bit);\n+            ThresholdState state = checker.GetStateFor(pindex, warningcache[bit]);\n             if (state == ThresholdState::ACTIVE || state == ThresholdState::LOCKED_IN) {\n                 const bilingual_str warning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n                 if (state == ThresholdState::ACTIVE) {"
      },
      {
        "sha": "63f9601fb38d99db12ced813d0638c5551ba21cb",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 37,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
        "patch": "@@ -5,12 +5,12 @@\n #include <versionbits.h>\n #include <consensus/params.h>\n \n-ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n-    int nPeriod = Period(params);\n-    int nThreshold = Threshold(params);\n-    int64_t nTimeStart = BeginTime(params);\n-    int64_t nTimeTimeout = EndTime(params);\n+    int nPeriod = m_period;\n+    int nThreshold = m_threshold;\n+    int64_t nTimeStart = m_dep.nStartTime;\n+    int64_t nTimeTimeout = m_dep.nTimeout;\n \n     // Check if this deployment is always active.\n     if (nTimeStart == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n@@ -67,7 +67,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 const CBlockIndex* pindexCount = pindexPrev;\n                 int count = 0;\n                 for (int i = 0; i < nPeriod; i++) {\n-                    if (Condition(pindexCount, params)) {\n+                    if (Condition(pindexCount)) {\n                         count++;\n                     }\n                     pindexCount = pindexCount->pprev;\n@@ -94,12 +94,12 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n-BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n+BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex) const\n {\n     BIP9Stats stats = {};\n \n-    stats.period = Period(params);\n-    stats.threshold = Threshold(params);\n+    stats.period = m_period;\n+    stats.threshold = m_threshold;\n \n     if (pindex == nullptr)\n         return stats;\n@@ -112,7 +112,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n     int count = 0;\n     const CBlockIndex* currentIndex = pindex;\n     while (pindexEndOfPrevPeriod->nHeight != currentIndex->nHeight){\n-        if (Condition(currentIndex, params))\n+        if (Condition(currentIndex))\n             count++;\n         currentIndex = currentIndex->pprev;\n     }\n@@ -123,21 +123,21 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n     return stats;\n }\n \n-int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n-    int64_t start_time = BeginTime(params);\n+    int64_t start_time = m_dep.nStartTime;\n     if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n \n-    const ThresholdState initialState = GetStateFor(pindexPrev, params, cache);\n+    const ThresholdState initialState = GetStateFor(pindexPrev, cache);\n \n     // BIP 9 about state DEFINED: \"The genesis block is by definition in this state for each deployment.\"\n     if (initialState == ThresholdState::DEFINED) {\n         return 0;\n     }\n \n-    const int nPeriod = Period(params);\n+    const int nPeriod = m_period;\n \n     // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n     // To ease understanding of the following height calculation, it helps to remember that\n@@ -149,7 +149,7 @@ int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex*\n \n     const CBlockIndex* previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n \n-    while (previousPeriodParent != nullptr && GetStateFor(previousPeriodParent, params, cache) == initialState) {\n+    while (previousPeriodParent != nullptr && GetStateFor(previousPeriodParent, cache) == initialState) {\n         pindexPrev = previousPeriodParent;\n         previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n     }\n@@ -158,51 +158,39 @@ int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex*\n     return pindexPrev->nHeight + 1;\n }\n \n-namespace\n+bool AbstractThresholdConditionChecker::Condition(const CBlockIndex* pindex) const\n {\n+    return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask()) != 0);\n+}\n+\n+namespace {\n /**\n  * Class to implement versionbits logic.\n  */\n class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n-private:\n-    const Consensus::DeploymentPos id;\n-\n-protected:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n-    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n-\n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n-    {\n-        return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n-    }\n-\n public:\n-    explicit VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}\n-    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }\n+    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : AbstractThresholdConditionChecker(params.vDeployments[id], params.nMinerConfirmationWindow, params.nRuleChangeActivationThreshold) { }\n };\n-\n } // namespace\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n-    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+    return VersionBitsConditionChecker(params, pos).GetStateFor(pindexPrev, cache.caches[pos]);\n }\n \n BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n+    return VersionBitsConditionChecker(params, pos).GetStateStatisticsFor(pindexPrev);\n }\n \n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n-    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+    return VersionBitsConditionChecker(params, pos).GetStateSinceHeightFor(pindexPrev, cache.caches[pos]);\n }\n \n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    return VersionBitsConditionChecker(pos).Mask(params);\n+    return VersionBitsConditionChecker(params, pos).Mask();\n }\n \n void VersionBitsCache::Clear()"
      },
      {
        "sha": "238ac299d26d038d85ceaba865befdf72048e6d0",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524b41ffdb67ebaf1538a39b88344e7d4118b4b8/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
        "patch": "@@ -50,24 +50,28 @@ struct BIP9Stats {\n };\n \n /**\n- * Abstract class that implements BIP9-style threshold logic, and caches results.\n+ * Class that implements BIP9-style threshold logic, and caches results.\n  */\n class AbstractThresholdConditionChecker {\n protected:\n-    virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n-    virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n-    virtual int64_t EndTime(const Consensus::Params& params) const =0;\n-    virtual int Period(const Consensus::Params& params) const =0;\n-    virtual int Threshold(const Consensus::Params& params) const =0;\n+    const Consensus::BIP9Deployment& m_dep;\n+    const int m_period;\n+    const int m_threshold;\n \n public:\n+    AbstractThresholdConditionChecker(const Consensus::BIP9Deployment& dep, int period, int threshold) : m_dep{dep}, m_period{period}, m_threshold{threshold} { }\n+\n+    /** Returns whether a block signals or not */\n+    virtual bool Condition(const CBlockIndex* pindex) const;\n     /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n+    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n-    ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const;\n     /** Returns the height since when the ThresholdState has started for pindex A based on parent pindexPrev B, all blocks of a period share the same */\n-    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const;\n+\n+    inline uint32_t Mask() const { return ((uint32_t)1) << m_dep.bit; }\n };\n \n /** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them"
      }
    ]
  },
  {
    "sha": "d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODZhNjk5ZWRmYjRkYmZlZGY4ZjY2MjM3YjA3NTU4ZDZlZDJjZjg3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-09T00:58:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-15T22:52:12Z"
      },
      "message": "chainparams: make versionbits threshold per-deployment",
      "tree": {
        "sha": "aa9e12aa61aa463ffb3403afdc1e0fe866f0bb1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa9e12aa61aa463ffb3403afdc1e0fe866f0bb1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524b41ffdb67ebaf1538a39b88344e7d4118b4b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/524b41ffdb67ebaf1538a39b88344e7d4118b4b8"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 42,
      "deletions": 13
    },
    "files": [
      {
        "sha": "97cb27073d4c9f5c76038b5892a0b04b9c300931",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "patch": "@@ -83,11 +83,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -200,11 +202,13 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n@@ -335,11 +339,13 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -400,9 +406,11 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};"
      },
      {
        "sha": "924b80c69fdd72b0763084f04abed7ea0e27c6a0",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "patch": "@@ -29,6 +29,8 @@ struct BIP9Deployment {\n     int64_t nStartTime;\n     /** Timeout/expiry MedianTime for the deployment attempt. */\n     int64_t nTimeout;\n+    /** Threshold for activation */\n+    int threshold;\n \n     /** Constant for nTimeout very far in the future. */\n     static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();"
      },
      {
        "sha": "00b397db228811cede103fe6750404e7f5e25270",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 7,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "patch": "@@ -35,11 +35,12 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     Consensus::BIP9Deployment m_dep_storage;\n \n public:\n-    TestConditionChecker() : AbstractThresholdConditionChecker(m_dep_storage, 1000, 900)\n+    TestConditionChecker() : AbstractThresholdConditionChecker(m_dep_storage, 1000)\n     {\n         m_dep_storage.bit = 8;\n         m_dep_storage.nStartTime = TestTime(10000);\n         m_dep_storage.nTimeout = TestTime(20000);\n+        m_dep_storage.threshold = 900;\n     }\n \n     TestConditionChecker& operator=(const TestConditionChecker& other)\n@@ -237,12 +238,21 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n                            .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n     }\n+}\n \n+void sanity_check_params(const Consensus::Params& params)\n+{\n     // Sanity checks of version bit deployments\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n-    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n+\n+        // Verify the threshold is sane and isn't lower than the threshold\n+        // used for warning for unknown activations\n+        int threshold = params.vDeployments[i].threshold;\n+        BOOST_CHECK(threshold > 0);\n+        BOOST_CHECK((uint32_t)threshold >= params.nRuleChangeActivationThreshold);\n+        BOOST_CHECK((uint32_t)threshold <= params.nMinerConfirmationWindow);\n+\n+        uint32_t bitmask = VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -254,14 +264,23 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n-                BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n-                        mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n+            if (VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n+                BOOST_CHECK(params.vDeployments[j].nStartTime > params.vDeployments[i].nTimeout ||\n+                        params.vDeployments[i].nStartTime > params.vDeployments[j].nTimeout);\n             }\n         }\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(versionbits_params)\n+{\n+    for (const auto& chain : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET, CBaseChainParams::REGTEST}) {\n+        const auto chainParams = CreateChainParams(*m_node.args, chain);\n+        const Consensus::Params &params = chainParams->GetConsensus();\n+        sanity_check_params(params);\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly"
      },
      {
        "sha": "d69d48e2a92a9803cfcd76bbdf6a25e02cdc5095",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "patch": "@@ -1838,13 +1838,14 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n public:\n     explicit WarningBitsConditionChecker(const Consensus::Params& params, int bitIn) :\n-        AbstractThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow, params.nRuleChangeActivationThreshold),\n+        AbstractThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow),\n         m_min_height{params.MinBIP9WarningHeight},\n         m_params{params}\n     {\n         m_dep_storage.bit = bitIn;\n         m_dep_storage.nStartTime = 0;\n         m_dep_storage.nTimeout = std::numeric_limits<int64_t>::max();\n+        m_dep_storage.threshold = params.nRuleChangeActivationThreshold;\n     }\n \n     bool Condition(const CBlockIndex* pindex) const override"
      },
      {
        "sha": "4479e63a5994cd8442c29c1f461b7582e9dfebaf",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "patch": "@@ -8,7 +8,7 @@\n ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n     int nPeriod = m_period;\n-    int nThreshold = m_threshold;\n+    int nThreshold = m_dep.threshold;\n     int64_t nTimeStart = m_dep.nStartTime;\n     int64_t nTimeTimeout = m_dep.nTimeout;\n \n@@ -99,7 +99,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n     BIP9Stats stats = {};\n \n     stats.period = m_period;\n-    stats.threshold = m_threshold;\n+    stats.threshold = m_dep.threshold;\n \n     if (pindex == nullptr)\n         return stats;\n@@ -169,7 +169,7 @@ namespace {\n  */\n class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n public:\n-    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : AbstractThresholdConditionChecker(params.vDeployments[id], params.nMinerConfirmationWindow, params.nRuleChangeActivationThreshold) { }\n+    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : AbstractThresholdConditionChecker(params.vDeployments[id], params.nMinerConfirmationWindow) { }\n };\n } // namespace\n "
      },
      {
        "sha": "85057ab61e660a007b4e8b68159577affd6079f9",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86a699edfb4dbfedf8f66237b07558d6ed2cf87/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "patch": "@@ -56,10 +56,9 @@ class AbstractThresholdConditionChecker {\n protected:\n     const Consensus::BIP9Deployment& m_dep;\n     const int m_period;\n-    const int m_threshold;\n \n public:\n-    AbstractThresholdConditionChecker(const Consensus::BIP9Deployment& dep, int period, int threshold) : m_dep{dep}, m_period{period}, m_threshold{threshold} { }\n+    AbstractThresholdConditionChecker(const Consensus::BIP9Deployment& dep, int period) : m_dep{dep}, m_period{period} { }\n \n     /** Returns whether a block signals or not */\n     virtual bool Condition(const CBlockIndex* pindex) const;"
      }
    ]
  },
  {
    "sha": "ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTU0MWFiOWE3Zjk5ZGYzZjkyOTIyYTZlN2M5Y2RkZGJjYmJhMTFh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-07T12:12:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-15T22:52:12Z"
      },
      "message": "scripted-diff: Rename AbstractThresholdConditionChecker and BIP9* classes\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/AbstractThresholdConditionChecker/ThresholdConditionChecker/g' $(git grep -l AbstractThresholdConditionChecker src/)\nsed -i -e 's/BIP9Deployment/VBitsDeployment/g' $(git grep -l BIP9Deployment src/)\nsed -i -e 's/BIP9Stats/VBitsStats/g' $(git grep -l BIP9Stats src/)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e63e5d80092062a5aea93231fd47df100a35adfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e63e5d80092062a5aea93231fd47df100a35adfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86a699edfb4dbfedf8f66237b07558d6ed2cf87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d86a699edfb4dbfedf8f66237b07558d6ed2cf87"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "311291edb0d7a9a6156fd398db6d1b7e0e5f41b2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -343,8 +343,8 @@ class SigNetParams : public CChainParams {\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n@@ -405,11 +405,11 @@ class CRegTestParams : public CChainParams {\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};"
      },
      {
        "sha": "69c779a642322ba38c54dccd4ad04947e440313a",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -22,7 +22,7 @@ enum DeploymentPos\n /**\n  * Struct for each individual consensus rule change using BIP9.\n  */\n-struct BIP9Deployment {\n+struct VBitsDeployment {\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n     /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n@@ -73,7 +73,7 @@ struct Params {\n      */\n     uint32_t nRuleChangeActivationThreshold;\n     uint32_t nMinerConfirmationWindow;\n-    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n+    VBitsDeployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "6f4bb77d76b491ba0c06478265fe6655f0bdfe03",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -1250,7 +1250,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n+        VBitsStats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);"
      },
      {
        "sha": "119f2531b7a7d0c11e7f5b949a47211d725d0e80",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -26,16 +26,16 @@ static const std::string StateName(ThresholdState state)\n     return \"\";\n }\n \n-class TestConditionChecker : public AbstractThresholdConditionChecker\n+class TestConditionChecker : public ThresholdConditionChecker\n {\n private:\n     mutable ThresholdConditionCache cache;\n \n protected:\n-    Consensus::BIP9Deployment m_dep_storage;\n+    Consensus::VBitsDeployment m_dep_storage;\n \n public:\n-    TestConditionChecker() : AbstractThresholdConditionChecker(m_dep_storage, 1000)\n+    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 1000)\n     {\n         m_dep_storage.bit = 8;\n         m_dep_storage.nStartTime = TestTime(10000);\n@@ -52,8 +52,8 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n \n     bool Condition(const CBlockIndex* pindex) const override { return (pindex->nVersion & 0x100); }\n \n-    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, cache); }\n-    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, cache); }\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return ThresholdConditionChecker::GetStateFor(pindexPrev, cache); }\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return ThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, cache); }\n \n     int Period() const { return m_period; }\n };\n@@ -63,7 +63,7 @@ class TestAlwaysActiveConditionChecker : public TestConditionChecker\n public:\n     TestAlwaysActiveConditionChecker() : TestConditionChecker()\n     {\n-        m_dep_storage.nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        m_dep_storage.nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n     }\n };\n "
      },
      {
        "sha": "e3395a4c7a014381395cebea51293615012a9ef4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -1829,16 +1829,16 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */\n-class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n+class WarningBitsConditionChecker : public ThresholdConditionChecker\n {\n private:\n-    Consensus::BIP9Deployment m_dep_storage;\n+    Consensus::VBitsDeployment m_dep_storage;\n     const int m_min_height;\n     const Consensus::Params& m_params;\n \n public:\n     explicit WarningBitsConditionChecker(const Consensus::Params& params, int bitIn) :\n-        AbstractThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow),\n+        ThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow),\n         m_min_height{params.MinBIP9WarningHeight},\n         m_params{params}\n     {"
      },
      {
        "sha": "de2b45e657bc83cc202065efb4d18f6400ed0a24",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -5,15 +5,15 @@\n #include <versionbits.h>\n #include <consensus/params.h>\n \n-ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n+ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n     int nPeriod = m_period;\n     int nThreshold = m_dep.threshold;\n     int64_t nTimeStart = m_dep.nStartTime;\n     int64_t nTimeTimeout = m_dep.nTimeout;\n \n     // Check if this deployment is always active.\n-    if (nTimeStart == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (nTimeStart == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return ThresholdState::ACTIVE;\n     }\n \n@@ -94,9 +94,9 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n-BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex) const\n+VBitsStats ThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex) const\n {\n-    BIP9Stats stats = {};\n+    VBitsStats stats = {};\n \n     stats.period = m_period;\n     stats.threshold = m_dep.threshold;\n@@ -123,10 +123,10 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n     return stats;\n }\n \n-int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n+int ThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n     int64_t start_time = m_dep.nStartTime;\n-    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (start_time == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n \n@@ -158,7 +158,7 @@ int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex*\n     return pindexPrev->nHeight + 1;\n }\n \n-bool AbstractThresholdConditionChecker::Condition(const CBlockIndex* pindex) const\n+bool ThresholdConditionChecker::Condition(const CBlockIndex* pindex) const\n {\n     return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask()) != 0);\n }\n@@ -167,9 +167,9 @@ namespace {\n /**\n  * Class to implement versionbits logic.\n  */\n-class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n+class VersionBitsConditionChecker : public ThresholdConditionChecker {\n public:\n-    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : AbstractThresholdConditionChecker(params.vDeployments[id], params.nMinerConfirmationWindow) { }\n+    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : ThresholdConditionChecker(params.vDeployments[id], params.nMinerConfirmationWindow) { }\n };\n } // namespace\n \n@@ -178,7 +178,7 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(params, pos).GetStateFor(pindexPrev, cache.caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(params, pos).GetStateStatisticsFor(pindexPrev);\n }"
      },
      {
        "sha": "f044e53ce05f2839894bb41f7501f1b6f238dee0",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "patch": "@@ -36,7 +36,7 @@ enum class ThresholdState {\n typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n \n /** Display status of an in-progress BIP9 softfork */\n-struct BIP9Stats {\n+struct VBitsStats {\n     /** Length of blocks of the BIP9 signalling period */\n     int period;\n     /** Number of blocks with the version bit set required to activate the softfork */\n@@ -52,18 +52,18 @@ struct BIP9Stats {\n /**\n  * Class that implements BIP9-style threshold logic, and caches results.\n  */\n-class AbstractThresholdConditionChecker {\n+class ThresholdConditionChecker {\n protected:\n-    const Consensus::BIP9Deployment& m_dep;\n+    const Consensus::VBitsDeployment& m_dep;\n     const int m_period;\n \n public:\n-    AbstractThresholdConditionChecker(const Consensus::BIP9Deployment& dep, int period) : m_dep{dep}, m_period{period} { }\n+    ThresholdConditionChecker(const Consensus::VBitsDeployment& dep, int period) : m_dep{dep}, m_period{period} { }\n \n     /** Returns whether a block signals or not */\n     virtual bool Condition(const CBlockIndex* pindex) const;\n     /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex) const;\n+    VBitsStats GetStateStatisticsFor(const CBlockIndex* pindex) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const;\n@@ -85,7 +85,7 @@ struct VersionBitsCache\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n /** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n /** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      }
    ]
  },
  {
    "sha": "c67ead16f5f526a825f01314c57384ede05c7cc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjdlYWQxNmY1ZjUyNmE4MjVmMDEzMTRjNTczODRlZGUwNWM3Y2M3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-07T09:42:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-15T22:52:12Z"
      },
      "message": "versionbits: GetStateStatisticsFor\n\nDocument that GetStateStatisticsFor expects a pointer to the previous block;\nwhich means that the \"current period\" it's reporting statistics for\nmay not yet have any blocks in it. This is consistent with its usage\nfrom getblockchaininfo.\n\nAlso fix a bug where GetStateStatisticsFor would crash if pindexPrev was\na block in the first retarget period, but not the final block of that\nretarget period. Note that GetStateStatisticsFor would never be called\nin this case, as that would require the first retarget period to be in\nSTARTED state, but it is always in DEFINED state.",
      "tree": {
        "sha": "db252446aed952ef78ebb9bdb24e383e1482d4e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db252446aed952ef78ebb9bdb24e383e1482d4e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c67ead16f5f526a825f01314c57384ede05c7cc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c67ead16f5f526a825f01314c57384ede05c7cc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c67ead16f5f526a825f01314c57384ede05c7cc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c67ead16f5f526a825f01314c57384ede05c7cc7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae541ab9a7f99df3f92922a6e7c9cdddbcbba11a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1c6a02c25fd96374274ad6986ae95296726c56be",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c67ead16f5f526a825f01314c57384ede05c7cc7/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c67ead16f5f526a825f01314c57384ede05c7cc7/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=c67ead16f5f526a825f01314c57384ede05c7cc7",
        "patch": "@@ -94,31 +94,35 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n     return state;\n }\n \n-VBitsStats ThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex) const\n+VBitsStats ThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindexPrev) const\n {\n     VBitsStats stats = {};\n \n     stats.period = m_period;\n     stats.threshold = m_dep.threshold;\n \n-    if (pindex == nullptr)\n+    if (pindexPrev == nullptr || (pindexPrev->nHeight + 1) < stats.period) {\n+        // genesis block or first retarget period is DEFINED, and will\n+        // not give a valid pindexEndOfPrevPeriod\n         return stats;\n+    }\n+\n+    // Find end of previous period -- may be pindexPrev itself\n+    const CBlockIndex* pindexEndOfPrevPeriod = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % stats.period));\n \n-    // Find beginning of period\n-    const CBlockIndex* pindexEndOfPrevPeriod = pindex->GetAncestor(pindex->nHeight - ((pindex->nHeight + 1) % stats.period));\n-    stats.elapsed = pindex->nHeight - pindexEndOfPrevPeriod->nHeight;\n+    stats.elapsed = pindexPrev->nHeight - pindexEndOfPrevPeriod->nHeight;\n \n     // Count from current block to beginning of period\n     int count = 0;\n-    const CBlockIndex* currentIndex = pindex;\n+    const CBlockIndex* currentIndex = pindexPrev;\n     while (pindexEndOfPrevPeriod->nHeight != currentIndex->nHeight){\n         if (Condition(currentIndex))\n             count++;\n         currentIndex = currentIndex->pprev;\n     }\n \n     stats.count = count;\n-    stats.possible = (stats.period - stats.threshold ) >= (stats.elapsed - count);\n+    stats.possible = (stats.period - stats.threshold) >= (stats.elapsed - count);\n \n     return stats;\n }"
      },
      {
        "sha": "59f8b59190bf3796b853db633d02cead8fc06072",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c67ead16f5f526a825f01314c57384ede05c7cc7/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c67ead16f5f526a825f01314c57384ede05c7cc7/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=c67ead16f5f526a825f01314c57384ede05c7cc7",
        "patch": "@@ -63,7 +63,7 @@ class ThresholdConditionChecker {\n     /** Returns whether a block signals or not */\n     virtual bool Condition(const CBlockIndex* pindex) const;\n     /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */\n-    VBitsStats GetStateStatisticsFor(const CBlockIndex* pindex) const;\n+    VBitsStats GetStateStatisticsFor(const CBlockIndex* pindexPrev) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const;"
      }
    ]
  },
  {
    "sha": "414640fbaf8cf00e8e37451764a77cdec3fdd730",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTQ2NDBmYmFmOGNmMDBlOGUzNzQ1MTc2NGE3N2NkZWMzZmRkNzMw",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-07T22:55:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-15T22:52:12Z"
      },
      "message": "versionbits: make Mask signed to match CBlockIndex::nVersion\n\nThis avoids undefined behaviour when doing bitwise operations, so long as\nthe versions are not negative.",
      "tree": {
        "sha": "39d3c330879471d8d4d70384167ad3132cc1a0a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39d3c330879471d8d4d70384167ad3132cc1a0a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/414640fbaf8cf00e8e37451764a77cdec3fdd730",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/414640fbaf8cf00e8e37451764a77cdec3fdd730",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/414640fbaf8cf00e8e37451764a77cdec3fdd730",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/414640fbaf8cf00e8e37451764a77cdec3fdd730/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c67ead16f5f526a825f01314c57384ede05c7cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c67ead16f5f526a825f01314c57384ede05c7cc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c67ead16f5f526a825f01314c57384ede05c7cc7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "78e9e9fbc52b728d9b39cf8befed97bfae80152e",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/414640fbaf8cf00e8e37451764a77cdec3fdd730/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/414640fbaf8cf00e8e37451764a77cdec3fdd730/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=414640fbaf8cf00e8e37451764a77cdec3fdd730",
        "patch": "@@ -264,7 +264,7 @@ void sanity_check_params(const Consensus::Params& params)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n+            if (static_cast<uint32_t>(VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j))) == bitmask) {\n                 BOOST_CHECK(params.vDeployments[j].nStartTime > params.vDeployments[i].nTimeout ||\n                         params.vDeployments[i].nStartTime > params.vDeployments[j].nTimeout);\n             }"
      },
      {
        "sha": "b87408c5566aae9d19d7409ca5c6f54e43f16d9a",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/414640fbaf8cf00e8e37451764a77cdec3fdd730/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/414640fbaf8cf00e8e37451764a77cdec3fdd730/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=414640fbaf8cf00e8e37451764a77cdec3fdd730",
        "patch": "@@ -192,7 +192,7 @@ int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(params, pos).GetStateSinceHeightFor(pindexPrev, cache.caches[pos]);\n }\n \n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+int32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(params, pos).Mask();\n }"
      },
      {
        "sha": "66f556c6b5ea38b407dc2cc8b421c236142122b3",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/414640fbaf8cf00e8e37451764a77cdec3fdd730/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/414640fbaf8cf00e8e37451764a77cdec3fdd730/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=414640fbaf8cf00e8e37451764a77cdec3fdd730",
        "patch": "@@ -70,7 +70,7 @@ class ThresholdConditionChecker {\n     /** Returns the height since when the ThresholdState has started for pindex A based on parent pindexPrev B, all blocks of a period share the same */\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const;\n \n-    inline uint32_t Mask() const { return ((uint32_t)1) << m_dep.bit; }\n+    inline int32_t Mask() const { return ((int32_t)1) << m_dep.bit; }\n };\n \n /** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n@@ -88,6 +88,6 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n /** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+int32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWFiMDEyY2ZkNjU0OTk0YWU3ZjZiYTNlYzNmYTRjYjBiMjgwNmQ3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-25T16:54:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:53:59Z"
      },
      "message": "Migrate versionbits to use height instead of MTP\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "97e1c1211a77da3bc4f42755aad9ead846e4e526",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97e1c1211a77da3bc4f42755aad9ead846e4e526"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "414640fbaf8cf00e8e37451764a77cdec3fdd730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/414640fbaf8cf00e8e37451764a77cdec3fdd730",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/414640fbaf8cf00e8e37451764a77cdec3fdd730"
      }
    ],
    "stats": {
      "total": 321,
      "additions": 138,
      "deletions": 183
    },
    "files": [
      {
        "sha": "c2112243da7ed32162597e660a2f8f0c3200a979",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -81,14 +81,14 @@ class CMainParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n@@ -200,14 +200,14 @@ class CTestNetParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n@@ -337,14 +337,14 @@ class SigNetParams : public CChainParams {\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n@@ -404,12 +404,12 @@ class CRegTestParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};\n@@ -474,10 +474,10 @@ class CRegTestParams : public CChainParams {\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t startheight, int64_t timeoutheight)\n     {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n+        consensus.vDeployments[d].startheight = startheight;\n+        consensus.vDeployments[d].timeoutheight = timeoutheight;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n@@ -501,21 +501,21 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n         if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight\");\n         }\n-        int64_t nStartTime, nTimeout;\n-        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n-            throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+        int64_t startheight = 0, timeoutheight = 0;\n+        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &startheight)) {\n+            throw std::runtime_error(strprintf(\"Invalid startheight (%s)\", vDeploymentParams[1]));\n         }\n-        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n-            throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeoutheight)) {\n+            throw std::runtime_error(strprintf(\"Invalid timeoutheight (%s)\", vDeploymentParams[2]));\n         }\n         bool found = false;\n         for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n             if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), startheight, timeoutheight);\n                 found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld\\n\", vDeploymentParams[0], startheight, timeoutheight);\n                 break;\n             }\n         }"
      },
      {
        "sha": "19d474657a324912c167140655c8ce24be798add",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -22,7 +22,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight\", \"Use given start/timeout heights for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "01b894e2dba6c32bf77555ef0d95fbc1c017a314",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -25,21 +25,24 @@ enum DeploymentPos\n struct VBitsDeployment {\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n-    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n-    int64_t nStartTime;\n-    /** Timeout/expiry MedianTime for the deployment attempt. */\n-    int64_t nTimeout;\n+    /** Start block height for version bits miner confirmation. Must be a retarget block, can be in the past. */\n+    int startheight;\n+    /** Timeout/expiry block height for the deployment attempt. Must be a retarget block. */\n+    int timeoutheight;\n     /** Threshold for activation */\n     int threshold;\n \n-    /** Constant for nTimeout very far in the future. */\n-    static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();\n+    /** Constant for timeoutheight very far in the future. */\n+    static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();\n \n-    /** Special value for nStartTime indicating that the deployment is always active.\n+    /** Special value for startheight indicating that the deployment is always active.\n      *  This is useful for testing, as it means tests don't need to deal with the activation\n      *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n      *  behaviour during activation cannot use this. */\n-    static constexpr int64_t ALWAYS_ACTIVE = -1;\n+    static constexpr int ALWAYS_ACTIVE = -1;\n+    /** Special value for startheight and timeoutheight (both must be set) indicating that the\n+     *  deployment is entirely disabled. */\n+    static constexpr int NEVER_ACTIVE = -2;\n };\n \n /**"
      },
      {
        "sha": "a9375669495fd5d0e96ba6924547237ebe23c0d8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -1225,10 +1225,9 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For BIP9 deployments.\n-    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // Deployments (e.g. testdummy) which are marked as \"never active\" are hidden.\n     // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+    if (consensusParams.vDeployments[id].timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n@@ -1243,8 +1242,8 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     {\n         bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n-    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    bip9.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n+    bip9.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n     int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n@@ -1301,8 +1300,8 @@ RPCHelpMan getblockchaininfo()\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n-                                    {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n-                                    {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n+                                    {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n+                                    {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {"
      },
      {
        "sha": "d282302810e60008e687a37ee848735c64de0958",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 116,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -35,12 +35,12 @@ class TestConditionChecker : public ThresholdConditionChecker\n     Consensus::VBitsDeployment m_dep_storage;\n \n public:\n-    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 1000)\n+    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 10)\n     {\n         m_dep_storage.bit = 8;\n-        m_dep_storage.nStartTime = TestTime(10000);\n-        m_dep_storage.nTimeout = TestTime(20000);\n-        m_dep_storage.threshold = 900;\n+        m_dep_storage.startheight = 100;\n+        m_dep_storage.timeoutheight = 200;\n+        m_dep_storage.threshold = 9;\n     }\n \n     TestConditionChecker& operator=(const TestConditionChecker& other)\n@@ -63,7 +63,7 @@ class TestAlwaysActiveConditionChecker : public TestConditionChecker\n public:\n     TestAlwaysActiveConditionChecker() : TestConditionChecker()\n     {\n-        m_dep_storage.nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        m_dep_storage.startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n     }\n };\n \n@@ -72,8 +72,8 @@ class TestNeverActiveConditionChecker : public TestConditionChecker\n public:\n     TestNeverActiveConditionChecker() : TestConditionChecker()\n     {\n-        m_dep_storage.nStartTime = 0;\n-        m_dep_storage.nTimeout = 1230768000;\n+        m_dep_storage.startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        m_dep_storage.timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n     }\n };\n \n@@ -178,65 +178,40 @@ BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n-        // DEFINED -> FAILED\n-        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n-\n         // DEFINED -> STARTED -> FAILED\n-                           .Reset().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2051, TestTime(10010), 0).TestStarted().TestStateSinceHeight(2000) // 51 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 899 new blocks\n-                           .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n-                           .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n-\n-        // DEFINED -> STARTED -> FAILED while threshold reached\n-                           .Reset().TestDefined().TestStateSinceHeight(0)\n+        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(99, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One block more and it would be defined\n+                           .Mine(100, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(101, TestTime(10010), 0).TestStarted().TestStateSinceHeight(100) // 1 old block\n+                           .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 8 new blocks\n+                           .Mine(110, TestTime(10020), 0).TestStarted().TestStateSinceHeight(100) // 1 old block (so 8 out of the past 10 are new)\n+                           .Mine(151, TestTime(10020), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(200, TestTime(20000), 0).TestFailed().TestStateSinceHeight(200)\n+                           .Mine(300, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(200)\n \n         // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n                            .Reset().TestDefined()\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n-                           .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n-                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n-                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(99, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be started\n+                           .Mine(100, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 9 new blocks\n+                           .Mine(110, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(110) // 1 old block (so 9 out of the past 10)\n+                           .Mine(119, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(110)\n+                           .Mine(120, TestTime(30002), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(200, TestTime(30003), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120)\n \n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n-                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n+                           .Mine(9, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(10, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(20, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(100, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(103, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(105, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(200, TestTime(20000), 0).TestFailed().TestStateSinceHeight(200)\n+                           .Mine(300, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(200);\n     }\n }\n \n@@ -265,8 +240,8 @@ void sanity_check_params(const Consensus::Params& params)\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n             if (static_cast<uint32_t>(VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j))) == bitmask) {\n-                BOOST_CHECK(params.vDeployments[j].nStartTime > params.vDeployments[i].nTimeout ||\n-                        params.vDeployments[i].nStartTime > params.vDeployments[j].nTimeout);\n+                BOOST_CHECK(params.vDeployments[j].startheight > params.vDeployments[i].timeoutheight ||\n+                        params.vDeployments[i].startheight > params.vDeployments[j].timeoutheight);\n             }\n         }\n     }\n@@ -284,100 +259,67 @@ BOOST_AUTO_TEST_CASE(versionbits_params)\n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n-    // on mainnet.\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto period = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST)->GetConsensus().nMinerConfirmationWindow;\n+    gArgs.ForceSetArg(\"-vbparams\", strprintf(\"testdummy:@%s:@%s\", period, period * 2));\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes.\n     int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n-    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n-    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+    int64_t startheight = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight;\n+    int64_t timeoutheight = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight;\n+    const int64_t nTime = TestTime(startheight);\n \n-    assert(nStartTime < nTimeout);\n+    assert(startheight < timeoutheight);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n     // In the second chain, test the bit is set by CBV while STARTED and\n     // LOCKED-IN, and then no longer set while ACTIVE.\n     VersionBitsTester firstChain, secondChain;\n \n-    // Start generating blocks before nStartTime\n-    int64_t nTime = nStartTime - 1;\n-\n-    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n-    // should not be set.\n+    // Start generating blocks before startheight\n+    // Before the chain has reached startheight-1, the bit should not be set.\n     CBlockIndex *lastBlock = nullptr;\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(startheight - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n-    // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n-    for (uint32_t i = 1; i < mainnetParams.nMinerConfirmationWindow - 4; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n-        // to be 4, and the bit we're testing happens to be bit 28.\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-    }\n-    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n-    // CBV should still not yet set the bit.\n-    nTime = nStartTime;\n-    for (uint32_t i = mainnetParams.nMinerConfirmationWindow - 4; i <= mainnetParams.nMinerConfirmationWindow; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-    }\n-\n-    // Advance to the next period and transition to STARTED,\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // Advance to the next block and transition to STARTED,\n+    lastBlock = firstChain.Mine(startheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n-    // Check that ComputeBlockVersion will set the bit until nTimeout\n-    nTime += 600;\n-    uint32_t blocksToMine = mainnetParams.nMinerConfirmationWindow * 2; // test blocks for up to 2 time periods\n-    uint32_t nHeight = mainnetParams.nMinerConfirmationWindow * 3;\n-    // These blocks are all before nTimeout is reached.\n-    while (nTime < nTimeout && blocksToMine > 0) {\n-        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n-        blocksToMine--;\n-        nTime += 600;\n-        nHeight += 1;\n-    }\n+    // Check that ComputeBlockVersion will set the bit until timeoutheight\n+    // These blocks are all before timeoutheight is reached.\n+    lastBlock = firstChain.Mine(timeoutheight - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n-    nTime = nTimeout;\n-    // FAILED is only triggered at the end of a period, so CBV should be setting\n-    // the bit until the period transition.\n-    for (uint32_t i = 0; i < mainnetParams.nMinerConfirmationWindow - 1; i++) {\n-        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        nHeight += 1;\n-    }\n     // The next block should trigger no longer setting the bit.\n-    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(timeoutheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // On a new chain:\n     // verify that the bit will be set after lock-in, and then stop being set\n     // after activation.\n-    nTime = nStartTime;\n \n-    // Mine one period worth of blocks, and check that the bit will be on for the\n+    // Mine up until startheight-1, and check that the bit will be on for the\n     // next period.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(startheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n-    // Mine another period worth of blocks, signaling the new bit.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    // Mine another block, signaling the new bit.\n+    lastBlock = secondChain.Mine(startheight + mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n-    lastBlock = secondChain.Mine((mainnetParams.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(startheight + (mainnetParams.nMinerConfirmationWindow * 2) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(startheight + (mainnetParams.nMinerConfirmationWindow * 2), nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // Finally, verify that after a soft fork has activated, CBV no longer uses"
      },
      {
        "sha": "393180fb3830d6dbe566c51539877b7fa02f19f3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -1843,8 +1843,8 @@ class WarningBitsConditionChecker : public ThresholdConditionChecker\n         m_params{params}\n     {\n         m_dep_storage.bit = bitIn;\n-        m_dep_storage.nStartTime = 0;\n-        m_dep_storage.nTimeout = std::numeric_limits<int64_t>::max();\n+        m_dep_storage.startheight = 0;\n+        m_dep_storage.timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         m_dep_storage.threshold = params.nRuleChangeActivationThreshold;\n     }\n "
      },
      {
        "sha": "bfca35dc560b8bf4ccdd0d98e5c4488e30b8ed19",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -9,11 +9,16 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n {\n     int nPeriod = m_period;\n     int nThreshold = m_dep.threshold;\n-    int64_t nTimeStart = m_dep.nStartTime;\n-    int64_t nTimeTimeout = m_dep.nTimeout;\n+    int64_t height_start = m_dep.startheight;\n+    int64_t height_timeout = m_dep.timeoutheight;\n+\n+    // Check if this deployment is never active.\n+    if (height_start == Consensus::VBitsDeployment::NEVER_ACTIVE && height_timeout == Consensus::VBitsDeployment::NEVER_ACTIVE) {\n+        return ThresholdState::DEFINED;\n+    }\n \n     // Check if this deployment is always active.\n-    if (nTimeStart == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n+    if (height_start == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return ThresholdState::ACTIVE;\n     }\n \n@@ -30,8 +35,10 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n             cache[pindexPrev] = ThresholdState::DEFINED;\n             break;\n         }\n-        if (pindexPrev->GetMedianTimePast() < nTimeStart) {\n-            // Optimization: don't recompute down further, as we know every earlier block will be before the start time\n+\n+        // We track state by previous-block, so the height we should be comparing is +1\n+        if (pindexPrev->nHeight + 1 < height_start) {\n+            // Optimization: don't recompute down further, as we know every earlier block will be before the start height\n             cache[pindexPrev] = ThresholdState::DEFINED;\n             break;\n         }\n@@ -49,20 +56,19 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n         pindexPrev = vToCompute.back();\n         vToCompute.pop_back();\n \n+        // We track state by previous-block, so the height we should be comparing is +1\n+        const int64_t height = pindexPrev->nHeight + 1;\n+\n         switch (state) {\n             case ThresholdState::DEFINED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                if (height >= height_timeout) {\n                     stateNext = ThresholdState::FAILED;\n-                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                } else if (height >= height_start) {\n                     stateNext = ThresholdState::STARTED;\n                 }\n                 break;\n             }\n             case ThresholdState::STARTED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = ThresholdState::FAILED;\n-                    break;\n-                }\n                 // We need to count\n                 const CBlockIndex* pindexCount = pindexPrev;\n                 int count = 0;\n@@ -74,6 +80,8 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n                 }\n                 if (count >= nThreshold) {\n                     stateNext = ThresholdState::LOCKED_IN;\n+                } else if (height >= height_timeout) {\n+                    stateNext = ThresholdState::FAILED;\n                 }\n                 break;\n             }\n@@ -101,14 +109,17 @@ VBitsStats ThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* p\n     stats.period = m_period;\n     stats.threshold = m_dep.threshold;\n \n-    if (pindexPrev == nullptr || (pindexPrev->nHeight + 1) < stats.period) {\n+    // We track state by previous-block, so the height we should be comparing is +1\n+    const int64_t height = pindexPrev ? pindexPrev->nHeight + 1 : 0;\n+\n+    if (pindexPrev == nullptr || height < stats.period) {\n         // genesis block or first retarget period is DEFINED, and will\n         // not give a valid pindexEndOfPrevPeriod\n         return stats;\n     }\n \n     // Find end of previous period -- may be pindexPrev itself\n-    const CBlockIndex* pindexEndOfPrevPeriod = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % stats.period));\n+    const CBlockIndex* pindexEndOfPrevPeriod = pindexPrev->GetAncestor(pindexPrev->nHeight - (height % stats.period));\n \n     stats.elapsed = pindexPrev->nHeight - pindexEndOfPrevPeriod->nHeight;\n \n@@ -129,8 +140,8 @@ VBitsStats ThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* p\n \n int ThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n-    int64_t start_time = m_dep.nStartTime;\n-    if (start_time == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n+    int64_t height_start = m_dep.startheight;\n+    if (height_start == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n "
      },
      {
        "sha": "bf2ed231d838b2694e75ddc9ea27610ca0c8e0bf",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -24,10 +24,10 @@ static const int32_t VERSIONBITS_NUM_BITS = 29;\n  */\n enum class ThresholdState {\n     DEFINED,   // First state that each softfork starts out as. The genesis block is by definition in this state for each deployment.\n-    STARTED,   // For blocks past the starttime.\n+    STARTED,   // For blocks past the startheight.\n     LOCKED_IN, // For one retarget period after the first retarget period with STARTED blocks of which at least threshold have the associated bit set in nVersion.\n     ACTIVE,    // For all blocks after the LOCKED_IN retarget period (final state)\n-    FAILED,    // For all blocks once the first retarget period after the timeout time is hit, if LOCKED_IN wasn't already reached (final state)\n+    FAILED,    // For all blocks once the first retarget period after the timeout height is hit, if LOCKED_IN wasn't already reached (final state)\n };\n \n // A map that gives the state for blocks whose height is a multiple of Period()."
      },
      {
        "sha": "7c4ebddc71b99d8c70216cf77419c91d7631ebb4",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -1201,7 +1201,7 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n-        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:1:1\"], [\"-par=1\"]]\n+        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:@1:@1\"], [\"-par=1\"]]\n \n     def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n "
      },
      {
        "sha": "770d7d53e9ed9e2d2bf8622dd23f1acc12372a63",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "patch": "@@ -139,8 +139,8 @@ def _test_getblockchaininfo(self):\n                 'bip9': {\n                     'status': 'started',\n                     'bit': 28,\n-                    'start_time': 0,\n-                    'timeout': 0x7fffffffffffffff,  # testdummy does not have a timeout so is set to the max int64 value\n+                    'startheight': 144,\n+                    'timeoutheight': 0x7fffffff,  # testdummy does not have a timeout so is set to the max int value\n                     'since': 144,\n                     'statistics': {\n                         'period': 144,\n@@ -156,8 +156,8 @@ def _test_getblockchaininfo(self):\n                 'type': 'bip9',\n                 'bip9': {\n                     'status': 'active',\n-                    'start_time': -1,\n-                    'timeout': 9223372036854775807,\n+                    'startheight': -1,\n+                    'timeoutheight': 0x7fffffff,\n                     'since': 0\n                 },\n                 'height': 0,"
      }
    ]
  },
  {
    "sha": "a440de1a77f64cb1859671a8487d237142df8f3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDQwZGUxYTc3ZjY0Y2IxODU5NjcxYTg0ODdkMjM3MTQyZGY4ZjNh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-26T20:51:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:54:18Z"
      },
      "message": "Rename user facing mentions of BIP 9 to versionbits and/or BIP 8\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "7d89409e75892100b6e925aabdca9ff19b46d2df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d89409e75892100b6e925aabdca9ff19b46d2df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a440de1a77f64cb1859671a8487d237142df8f3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a440de1a77f64cb1859671a8487d237142df8f3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a440de1a77f64cb1859671a8487d237142df8f3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a440de1a77f64cb1859671a8487d237142df8f3a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "272ff79b90dabfebb4687e54fd27a62685ea9039",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a440de1a77f64cb1859671a8487d237142df8f3a/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a440de1a77f64cb1859671a8487d237142df8f3a/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=a440de1a77f64cb1859671a8487d237142df8f3a",
        "patch": "@@ -1,6 +1,7 @@\n BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.21.0**):\n \n-* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n+* [`BIP 8`](https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki): The changes for parallel, rapid deployment based on block height miner activation have been implemented since **v0.21.1** ([PR #21392](https://github.com/bitcoin/bitcoin/pull/21392)). The UASF fallback with forced signaling (`LOT=true`) has not yet been implemented. The current implementation is the equivalent of `LOT=false`.\n+* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575)) Support was removed in **v0.21.1** ([PR #21392](https://github.com/bitcoin/bitcoin/pull/21392)).\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669))."
      },
      {
        "sha": "76f83102916471042974cde355ddb5ffbe1f402a",
        "filename": "doc/release-notes-21392.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a440de1a77f64cb1859671a8487d237142df8f3a/doc/release-notes-21392.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a440de1a77f64cb1859671a8487d237142df8f3a/doc/release-notes-21392.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-21392.md?ref=a440de1a77f64cb1859671a8487d237142df8f3a",
        "patch": "@@ -0,0 +1,7 @@\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+* BIP 9 has been replaced with a partial implementation of BIP 8. This change is reflected in `getblockchaininfo` where references to BIP 9 have been replaced with references to BIP 8."
      },
      {
        "sha": "324f7d517fe33f6f7bfac5c494e1cd937463ee7e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a440de1a77f64cb1859671a8487d237142df8f3a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a440de1a77f64cb1859671a8487d237142df8f3a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a440de1a77f64cb1859671a8487d237142df8f3a",
        "patch": "@@ -1259,8 +1259,8 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n \n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n+    rv.pushKV(\"type\", \"bip8\");\n+    rv.pushKV(\"bip8\", bip9);\n     if (ThresholdState::ACTIVE == thresholdState) {\n         rv.pushKV(\"height\", since_height);\n     }\n@@ -1295,24 +1295,24 @@ RPCHelpMan getblockchaininfo()\n                         {\n                             {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n-                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n-                                {RPCResult::Type::OBJ, \"bip9\", \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip8\\\"\"},\n+                                {RPCResult::Type::OBJ, \"bip8\", \"status of BIP 8 softforks (only for \\\"bip8\\\" type)\",\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n                                     {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n+                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP8 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {\n-                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP9 signalling period\"},\n+                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP8 signalling period\"},\n                                         {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature\"},\n                                         {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n                                         {RPCResult::Type::BOOL, \"possible\", \"returns false if there are not enough blocks left in this period to pass activation threshold\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip8\\\" type with \\\"active\\\" status)\"},\n                                 {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                             }},\n                         }},"
      },
      {
        "sha": "78e44bb606cc60c50233e1c4d308144865eccfb4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a440de1a77f64cb1859671a8487d237142df8f3a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a440de1a77f64cb1859671a8487d237142df8f3a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a440de1a77f64cb1859671a8487d237142df8f3a",
        "patch": "@@ -507,10 +507,10 @@ static RPCHelpMan getblocktemplate()\n     return RPCHelpMan{\"getblocktemplate\",\n         \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n         \"It returns data needed to construct a block to work on.\\n\"\n-        \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+        \"For full specification, see BIPs 22, 23, 8, and 145:\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-        \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#getblocktemplate_changes\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n         {\n             {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n@@ -536,9 +536,9 @@ static RPCHelpMan getblocktemplate()\n                 {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n                 {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n                 {\n-                    {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n+                    {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 8 for format\"},\n                 }},\n-                {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n+                {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit softfork deployments\",\n                 {\n                     {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                 }},"
      },
      {
        "sha": "2f27295d9fe9b59eae1717d3b6f04b4bbf027007",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a440de1a77f64cb1859671a8487d237142df8f3a/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a440de1a77f64cb1859671a8487d237142df8f3a/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=a440de1a77f64cb1859671a8487d237142df8f3a",
        "patch": "@@ -135,8 +135,8 @@ def _test_getblockchaininfo(self):\n             'csv': {'type': 'buried', 'active': False, 'height': 432},\n             'segwit': {'type': 'buried', 'active': True, 'height': 0},\n             'testdummy': {\n-                'type': 'bip9',\n-                'bip9': {\n+                'type': 'bip8',\n+                'bip8': {\n                     'status': 'started',\n                     'bit': 28,\n                     'startheight': 144,\n@@ -153,8 +153,8 @@ def _test_getblockchaininfo(self):\n                 'active': False\n             },\n             'taproot': {\n-                'type': 'bip9',\n-                'bip9': {\n+                'type': 'bip8',\n+                'bip8': {\n                     'status': 'active',\n                     'startheight': -1,\n                     'timeoutheight': 0x7fffffff,"
      }
    ]
  },
  {
    "sha": "8269a341f72c82a96f87d320dc86061195a4075a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjY5YTM0MWY3MmM4MmE5NmY4N2QzMjBkYzg2MDYxMTk1YTQwNzVh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-08T20:02:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:54:25Z"
      },
      "message": "Add minimum activation height to VBitsDeployments",
      "tree": {
        "sha": "f8cab678b0e43291c383b931c5a329bcb48322ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8cab678b0e43291c383b931c5a329bcb48322ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8269a341f72c82a96f87d320dc86061195a4075a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8269a341f72c82a96f87d320dc86061195a4075a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8269a341f72c82a96f87d320dc86061195a4075a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8269a341f72c82a96f87d320dc86061195a4075a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a440de1a77f64cb1859671a8487d237142df8f3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a440de1a77f64cb1859671a8487d237142df8f3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a440de1a77f64cb1859671a8487d237142df8f3a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1fd0f93dc0f68afbf57d093d97ec3f9f76f2a630",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a341f72c82a96f87d320dc86061195a4075a/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a341f72c82a96f87d320dc86061195a4075a/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=8269a341f72c82a96f87d320dc86061195a4075a",
        "patch": "@@ -31,6 +31,10 @@ struct VBitsDeployment {\n     int timeoutheight;\n     /** Threshold for activation */\n     int threshold;\n+    /**\n+     * If lock in occurs, delay activation until at least this block height. Activations only occur on retargets.\n+     */\n+    int64_t m_min_activation_height{0};\n \n     /** Constant for timeoutheight very far in the future. */\n     static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();"
      },
      {
        "sha": "c04c7e1d6a76fd8758b33f3dc2fe80cc265a14ff",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a341f72c82a96f87d320dc86061195a4075a/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a341f72c82a96f87d320dc86061195a4075a/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=8269a341f72c82a96f87d320dc86061195a4075a",
        "patch": "@@ -11,6 +11,7 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n     int nThreshold = m_dep.threshold;\n     int64_t height_start = m_dep.startheight;\n     int64_t height_timeout = m_dep.timeoutheight;\n+    int64_t height_active_min = m_dep.m_min_activation_height;\n \n     // Check if this deployment is never active.\n     if (height_start == Consensus::VBitsDeployment::NEVER_ACTIVE && height_timeout == Consensus::VBitsDeployment::NEVER_ACTIVE) {\n@@ -86,8 +87,10 @@ ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexP\n                 break;\n             }\n             case ThresholdState::LOCKED_IN: {\n-                // Always progresses into ACTIVE.\n-                stateNext = ThresholdState::ACTIVE;\n+                // Only progress into ACTIVE if minimum activation height has been reached\n+                if (height >= height_active_min) {\n+                    stateNext = ThresholdState::ACTIVE;\n+                }\n                 break;\n             }\n             case ThresholdState::FAILED:"
      }
    ]
  },
  {
    "sha": "c0efe1896cc7be1a90784ba440ed3275c10a2499",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGVmZTE4OTZjYzdiZTFhOTA3ODRiYTQ0MGVkMzI3NWMxMGEyNDk5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-06T08:38:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:54:26Z"
      },
      "message": "tests: test versionbits delayed activation",
      "tree": {
        "sha": "e6cb7de02dcf767cbef36e96401401b0169df3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6cb7de02dcf767cbef36e96401401b0169df3b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0efe1896cc7be1a90784ba440ed3275c10a2499",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0efe1896cc7be1a90784ba440ed3275c10a2499",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0efe1896cc7be1a90784ba440ed3275c10a2499",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0efe1896cc7be1a90784ba440ed3275c10a2499/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8269a341f72c82a96f87d320dc86061195a4075a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8269a341f72c82a96f87d320dc86061195a4075a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8269a341f72c82a96f87d320dc86061195a4075a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 43,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e0ff167d7f6093fb4da27514be6e6f34f206cbc7",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 6,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0efe1896cc7be1a90784ba440ed3275c10a2499/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0efe1896cc7be1a90784ba440ed3275c10a2499/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=c0efe1896cc7be1a90784ba440ed3275c10a2499",
        "patch": "@@ -58,6 +58,15 @@ class TestConditionChecker : public ThresholdConditionChecker\n     int Period() const { return m_period; }\n };\n \n+class TestDelayedActivationConditionChecker : public TestConditionChecker\n+{\n+public:\n+    TestDelayedActivationConditionChecker() : TestConditionChecker()\n+    {\n+        m_dep_storage.m_min_activation_height = 250;\n+    }\n+};\n+\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n@@ -88,6 +97,8 @@ class VersionBitsTester\n     // The first one performs all checks, the second only 50%, the third only 25%, etc...\n     // This is to test whether lack of cached information leads to the same results.\n     TestConditionChecker checker[CHECKERS];\n+    // Another 6 that assume delayed activation\n+    TestDelayedActivationConditionChecker checker_delayed[CHECKERS];\n     // Another 6 that assume always active activation\n     TestAlwaysActiveConditionChecker checker_always[CHECKERS];\n     // Another 6 that assume never active activation\n@@ -97,14 +108,16 @@ class VersionBitsTester\n     int num;\n \n public:\n-    VersionBitsTester() : num(0) {}\n+    VersionBitsTester() : num(1000) {}\n \n     VersionBitsTester& Reset() {\n+        num = num - (num % 1000) + 1000;\n         for (unsigned int i = 0; i < vpblock.size(); i++) {\n             delete vpblock[i];\n         }\n         for (unsigned int  i = 0; i < CHECKERS; i++) {\n             checker[i] = TestConditionChecker();\n+            checker_delayed[i] = TestDelayedActivationConditionChecker();\n             checker_always[i] = TestAlwaysActiveConditionChecker();\n             checker_never[i] = TestNeverActiveConditionChecker();\n         }\n@@ -129,11 +142,18 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestStateSinceHeight(int height) {\n+    VersionBitsTester& TestStateSinceHeight(int height)\n+    {\n+        return TestStateSinceHeight(height, height);\n+    }\n+\n+    VersionBitsTester& TestStateSinceHeight(int height, int height_delayed)\n+    {\n         const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(pindex) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+                BOOST_CHECK_MESSAGE(checker_delayed[i].GetStateSinceHeightFor(pindex) == height_delayed, strprintf(\"Test %i for StateSinceHeight (delayed)\", num));\n                 BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(pindex) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n \n                 // never active may go from DEFINED -> FAILED at the first period\n@@ -145,17 +165,30 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestState(ThresholdState exp) {\n+    VersionBitsTester& TestState(ThresholdState exp)\n+    {\n+        return TestState(exp, exp);\n+    }\n+\n+    VersionBitsTester& TestState(ThresholdState exp, ThresholdState exp_delayed)\n+    {\n         const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n+        if (exp != exp_delayed) {\n+            // only expected differences are that delayed stays in locked_in longer\n+            BOOST_CHECK_EQUAL(exp, ThresholdState::ACTIVE);\n+            BOOST_CHECK_EQUAL(exp_delayed, ThresholdState::LOCKED_IN);\n+        }\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 ThresholdState got = checker[i].GetStateFor(pindex);\n+                ThresholdState got_delayed = checker_delayed[i].GetStateFor(pindex);\n                 ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n                 ThresholdState got_never = checker_never[i].GetStateFor(pindex);\n                 // nHeight of the next block. If vpblock is empty, the next (ie first)\n                 // block should be the genesis block with nHeight == 0.\n                 int height = pindex == nullptr ? 0 : pindex->nHeight + 1;\n                 BOOST_CHECK_MESSAGE(got == exp, strprintf(\"Test %i for %s height %d (got %s)\", num, StateName(exp), height, StateName(got)));\n+                BOOST_CHECK_MESSAGE(got_delayed == exp_delayed, strprintf(\"Test %i for %s height %d (got %s; delayed case)\", num, StateName(exp_delayed), height, StateName(got_delayed)));\n                 BOOST_CHECK_MESSAGE(got_always == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE height %d (got %s; always active case)\", num, height, StateName(got_always)));\n                 BOOST_CHECK_MESSAGE(got_never == ThresholdState::DEFINED|| got_never == ThresholdState::FAILED, strprintf(\"Test %i for DEFINED/FAILED height %d (got %s; never active case)\", num, height, StateName(got_never)));\n             }\n@@ -170,6 +203,9 @@ class VersionBitsTester\n     VersionBitsTester& TestActive() { return TestState(ThresholdState::ACTIVE); }\n     VersionBitsTester& TestFailed() { return TestState(ThresholdState::FAILED); }\n \n+    // non-delayed should be active; delayed should still be locked in\n+    VersionBitsTester& TestActiveDelayed() { return TestState(ThresholdState::ACTIVE, ThresholdState::LOCKED_IN); }\n+\n     CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }\n };\n \n@@ -198,9 +234,10 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 9 new blocks\n                            .Mine(110, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(110) // 1 old block (so 9 out of the past 10)\n                            .Mine(119, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(110)\n-                           .Mine(120, TestTime(30002), 0).TestActive().TestStateSinceHeight(120)\n-                           .Mine(200, TestTime(30003), 0).TestActive().TestStateSinceHeight(120)\n-                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(120, TestTime(30002), 0).TestActiveDelayed().TestStateSinceHeight(120, 110) // Delayed will not become active until height 250\n+                           .Mine(200, TestTime(30003), 0).TestActiveDelayed().TestStateSinceHeight(120, 110)\n+                           .Mine(250, TestTime(30004), 0).TestActive().TestStateSinceHeight(120, 250)\n+                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120, 250)\n \n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)"
      }
    ]
  },
  {
    "sha": "409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDlhOGNiYTliZmQxZmZiNzQzOWY0ZTdmZWM0NTUyNmNiODE3OGM0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-09T05:48:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:54:33Z"
      },
      "message": "Clarify and reduce nRuleChangeActivationThreshold\n\nAs thresholds are now parameterized, nRuleChangeActivationThreshold is\nno longer the threshold used for activating new rule changes. Instead it\nis now only used to warn if there is an unkonwn versionbits deployment.\nTo make this clear, rename to m_vbits_min_threshold and update the\ncomment describing it.\n\nAdditionally, because this is just a minimum used for a warning, reduce\nthe threshold to 75% so that future soft forks which may have thresholds\nlower than 95% will still have warnings.",
      "tree": {
        "sha": "1304c542e7423ee305b95c223c31c6604f79d3fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1304c542e7423ee305b95c223c31c6604f79d3fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0efe1896cc7be1a90784ba440ed3275c10a2499",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0efe1896cc7be1a90784ba440ed3275c10a2499",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0efe1896cc7be1a90784ba440ed3275c10a2499"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "be85e271b0e9ce9d15de2313b45377487663f7a0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
        "patch": "@@ -78,7 +78,7 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n@@ -197,7 +197,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n@@ -332,7 +332,7 @@ class SigNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n@@ -401,7 +401,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n-        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.m_vbits_min_threshold = 108; // 75%\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;"
      },
      {
        "sha": "45e84659cbdc1bafdfca59783ae2ae1186243923",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
        "patch": "@@ -73,12 +73,10 @@ struct Params {\n     /** Don't warn about unknown BIP 9 activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n     int MinBIP9WarningHeight;\n-    /**\n-     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n-     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n-     * Examples: 1916 for 95%, 1512 for testchains.\n+    /** Minimum blocks expected for a versionbits deployment threshold.\n+     * Used to determine whether an unknown versionbits deployment has occurred.\n      */\n-    uint32_t nRuleChangeActivationThreshold;\n+    uint32_t m_vbits_min_threshold;\n     uint32_t nMinerConfirmationWindow;\n     VBitsDeployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */"
      },
      {
        "sha": "c52676e6d2ea41ea0e49c5edebb9f14339170784",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
        "patch": "@@ -261,7 +261,7 @@ void sanity_check_params(const Consensus::Params& params)\n         // used for warning for unknown activations\n         int threshold = params.vDeployments[i].threshold;\n         BOOST_CHECK(threshold > 0);\n-        BOOST_CHECK((uint32_t)threshold >= params.nRuleChangeActivationThreshold);\n+        BOOST_CHECK((uint32_t)threshold >= params.m_vbits_min_threshold);\n         BOOST_CHECK((uint32_t)threshold <= params.nMinerConfirmationWindow);\n \n         uint32_t bitmask = VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));"
      },
      {
        "sha": "ea0cf868b8bc6f7c2e13651d021f453668ee0240",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
        "patch": "@@ -1845,7 +1845,7 @@ class WarningBitsConditionChecker : public ThresholdConditionChecker\n         m_dep_storage.bit = bitIn;\n         m_dep_storage.startheight = 0;\n         m_dep_storage.timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        m_dep_storage.threshold = params.nRuleChangeActivationThreshold;\n+        m_dep_storage.threshold = params.m_vbits_min_threshold;\n     }\n \n     bool Condition(const CBlockIndex* pindex) const override"
      }
    ]
  },
  {
    "sha": "e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2Y3NjU0ZmUxYmE5ZDc2Yzg4NTIyNWNmZmRkOWIzZjZjNzIyNDM2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-03-09T14:28:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:54:34Z"
      },
      "message": "test: add min_activation_height to -vbparams",
      "tree": {
        "sha": "8793c82e21ab0fe0e8e8575fa31920747d8b0bc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8793c82e21ab0fe0e8e8575fa31920747d8b0bc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f7654fe1ba9d76c885225cffdd9b3f6c722436/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/409a8cba9bfd1ffb7439f4e7fec45526cb8178c4"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a80ff87e85ea99d95be69cc4ec62bea7e5009254",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f7654fe1ba9d76c885225cffdd9b3f6c722436/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f7654fe1ba9d76c885225cffdd9b3f6c722436/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
        "patch": "@@ -474,10 +474,11 @@ class CRegTestParams : public CChainParams {\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t startheight, int64_t timeoutheight)\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t start_height, int64_t timeout_height, int64_t min_activation_height)\n     {\n-        consensus.vDeployments[d].startheight = startheight;\n-        consensus.vDeployments[d].timeoutheight = timeoutheight;\n+        consensus.vDeployments[d].startheight = start_height;\n+        consensus.vDeployments[d].timeoutheight = timeout_height;\n+        consensus.vDeployments[d].m_min_activation_height = min_activation_height;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n@@ -500,22 +501,25 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n-        if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight\");\n+        if (vDeploymentParams.size() < 3 || vDeploymentParams.size() > 4) {\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight[:@min_activation_height]\");\n         }\n-        int64_t startheight = 0, timeoutheight = 0;\n-        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &startheight)) {\n-            throw std::runtime_error(strprintf(\"Invalid startheight (%s)\", vDeploymentParams[1]));\n+        int64_t start_height = 0, timeout_height = 0, min_activation_height = 0;\n+        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &start_height)) {\n+            throw std::runtime_error(strprintf(\"Invalid start_height (%s)\", vDeploymentParams[1]));\n         }\n-        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeoutheight)) {\n-            throw std::runtime_error(strprintf(\"Invalid timeoutheight (%s)\", vDeploymentParams[2]));\n+        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeout_height)) {\n+            throw std::runtime_error(strprintf(\"Invalid timeout_height (%s)\", vDeploymentParams[2]));\n+        }\n+        if (vDeploymentParams.size() == 4 && (vDeploymentParams[3].front() != '@' || !ParseInt64(vDeploymentParams[3].substr(1), &min_activation_height))) {\n+            throw std::runtime_error(strprintf(\"Invalid min_activation_height (%s)\", vDeploymentParams[3]));\n         }\n         bool found = false;\n         for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n             if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), startheight, timeoutheight);\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), start_height, timeout_height, min_activation_height);\n                 found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld\\n\", vDeploymentParams[0], startheight, timeoutheight);\n+                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld, min_activation_height=%ld\\n\", vDeploymentParams[0], start_height, timeout_height, min_activation_height);\n                 break;\n             }\n         }"
      },
      {
        "sha": "75917f7b928a8379618934408df241a663c55138",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f7654fe1ba9d76c885225cffdd9b3f6c722436/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f7654fe1ba9d76c885225cffdd9b3f6c722436/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
        "patch": "@@ -22,7 +22,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight\", \"Use given start/timeout heights for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight@min_activation_height\", \"Use given start, timeout, and minimum activation heights for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      }
    ]
  },
  {
    "sha": "3cc72deda8f5f5c90556e783afd951ecaa1e1973",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2M3MmRlZGE4ZjVmNWM5MDU1NmU3ODNhZmQ5NTFlY2FhMWUxOTcz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-03-09T15:51:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:54:34Z"
      },
      "message": "test: BIP 8 delayed activation functional test",
      "tree": {
        "sha": "b082d1b502f8ef889abdeffbe97569fbd9d4c7fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b082d1b502f8ef889abdeffbe97569fbd9d4c7fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cc72deda8f5f5c90556e783afd951ecaa1e1973",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc72deda8f5f5c90556e783afd951ecaa1e1973",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc72deda8f5f5c90556e783afd951ecaa1e1973",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc72deda8f5f5c90556e783afd951ecaa1e1973/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f7654fe1ba9d76c885225cffdd9b3f6c722436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f7654fe1ba9d76c885225cffdd9b3f6c722436"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 127,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9da1a728ec162e622837b0e2b26d410190f2b09e",
        "filename": "test/functional/feature_bip8.py",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc72deda8f5f5c90556e783afd951ecaa1e1973/test/functional/feature_bip8.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc72deda8f5f5c90556e783afd951ecaa1e1973/test/functional/feature_bip8.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip8.py?ref=3cc72deda8f5f5c90556e783afd951ecaa1e1973",
        "patch": "@@ -0,0 +1,126 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test BIP 8 softforks\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class Bip8Test(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # Node 0 has TestDummy inactive\n+        # Node 1 has a regular activation window\n+        # Node 2 uses speedy trial.\n+        self.extra_args = [\n+            ['-vbparams=testdummy:@1:@1'],\n+            ['-vbparams=testdummy:@144:@{}'.format(144 * 3)],\n+            ['-vbparams=testdummy:@144:@{}:@{}'.format(144 * 2, 144 * 4)],\n+        ]\n+\n+    def run_test(self):\n+        self.log.info(\"Test status at genesis...\")\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], 0)\n+            assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"defined\")\n+\n+        # BIP 8 state transitions from \"defined\" to \"started\" or \"failed\" after\n+        # the last block of the retargeting period has been mined. This means\n+        # any new rules apply to transactions currently in the mempool, which\n+        # might be mined in the next block.\n+        #\n+        # The next retargeting period starts at block 144, so nothing should\n+        # happen at 142 and the state should change at 143.\n+        self.log.info(\"Test status at height 142...\")\n+        self.nodes[0].generate(142)\n+        self.sync_blocks()\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], 142)\n+            assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"defined\")\n+\n+        self.log.info(\"Test status at height 143...\")\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], 143)\n+            status = info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"]\n+            assert_equal(status, \"failed\" if i == 0 else \"started\")\n+\n+        height = 144 * 2 - 1\n+        self.log.info(\"Test status at height {} when not signalling...\".format(height))\n+        self.nodes[0].generate(144)\n+        self.sync_blocks()\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], height)\n+            status = info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"]\n+            assert_equal(status, \"started\" if i == 1 else \"failed\")\n+\n+        height = 144 * 3 - 1\n+        self.log.info(\"Test status at height {} when not signalling...\".format(height))\n+        self.nodes[0].generate(144)\n+        self.sync_blocks()\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], height)\n+            status = info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"]\n+            assert_equal(status, \"failed\")\n+\n+        height = 144 - 1\n+        self.log.info(\"Roll back to {}...\".format(height))\n+        old_block = self.nodes[0].getblockhash(height + 1)\n+        for node in self.nodes:\n+            node.invalidateblock(old_block)\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], height)\n+\n+        height = 144 * 2 - 1\n+        self.log.info(\"Test status at height {} when signalling...\".format(height))\n+        # The new branch has unique block hashes, because of the signalling and\n+        # because generate uses a deterministic address that depends on the node\n+        # index.\n+        self.nodes[2].generate(144)\n+        self.sync_blocks()\n+\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], height)\n+            status = info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"]\n+            assert_equal(status, \"failed\" if i == 0 else \"locked_in\")\n+\n+        height = 144 * 3 - 1\n+        self.log.info(\"Test status at height {} when signalling...\".format(height))\n+        self.nodes[2].generate(144)\n+        self.sync_blocks()\n+\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], height)\n+            status = info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"]\n+            assert_equal(status, \"failed\" if i == 0 else \"active\" if i == 1 else \"locked_in\")\n+\n+        height = 144 * 4 - 1\n+        self.log.info(\"Test status at height {} when signalling...\".format(height))\n+        self.nodes[2].generate(144)\n+        self.sync_blocks()\n+\n+        for i, node in enumerate(self.nodes):\n+            self.log.debug('Node #{}...'.format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info['blocks'], height)\n+            status = info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"]\n+            assert_equal(status, \"failed\" if i == 0 else \"active\")\n+\n+if __name__ == '__main__':\n+    Bip8Test().main()"
      },
      {
        "sha": "0bc446e25ee92fd61adfbdf1fc8d6f69ee486cae",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc72deda8f5f5c90556e783afd951ecaa1e1973/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc72deda8f5f5c90556e783afd951ecaa1e1973/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3cc72deda8f5f5c90556e783afd951ecaa1e1973",
        "patch": "@@ -130,6 +130,7 @@\n     'p2p_feefilter.py',\n     'feature_reindex.py',\n     'feature_abortnode.py',\n+    'feature_bip8.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py --legacy-wallet',\n     'wallet_keypool_topup.py --descriptors',"
      }
    ]
  },
  {
    "sha": "434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzRiNDNjYTg1MWU2ZDVlM2RhYmQ3OGZkZDEwYTgwZjkwNzk5YWU1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-09T18:33:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T21:11:17Z"
      },
      "message": "Change versionbits deployments to maps\n\nvDeployments is a C array that is used like a map. To make construction\nof deployments and later iteration easier, use a std::map for all things\ncontaining versionbits deployment data.\n\nAlso removes MAX_VERSION_BITS_DEPLOYMENTS as it is no longer needed.",
      "tree": {
        "sha": "0f2cdc8c7ed32e382525b01d9eeb757dfee14179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f2cdc8c7ed32e382525b01d9eeb757dfee14179"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cc72deda8f5f5c90556e783afd951ecaa1e1973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc72deda8f5f5c90556e783afd951ecaa1e1973",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc72deda8f5f5c90556e783afd951ecaa1e1973"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 91,
      "deletions": 74
    },
    "files": [
      {
        "sha": "671b4571640752980be0561b3aafbbe0076bbe21",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 38,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -80,16 +80,16 @@ class CMainParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -199,16 +199,16 @@ class CTestNetParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n@@ -336,16 +336,16 @@ class SigNetParams : public CChainParams {\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Activation of Taproot (BIPs 340-342)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -403,14 +403,15 @@ class CRegTestParams : public CChainParams {\n         consensus.fPowNoRetargeting = true;\n         consensus.m_vbits_min_threshold = 108; // 75%\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].m_min_activation_height = 0; // No minimum activation height\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n+        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};\n@@ -476,9 +477,9 @@ class CRegTestParams : public CChainParams {\n      */\n     void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t start_height, int64_t timeout_height, int64_t min_activation_height)\n     {\n-        consensus.vDeployments[d].startheight = start_height;\n-        consensus.vDeployments[d].timeoutheight = timeout_height;\n-        consensus.vDeployments[d].m_min_activation_height = min_activation_height;\n+        consensus.m_deployments[d].startheight = start_height;\n+        consensus.m_deployments[d].timeoutheight = timeout_height;\n+        consensus.m_deployments[d].m_min_activation_height = min_activation_height;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n@@ -515,9 +516,11 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n             throw std::runtime_error(strprintf(\"Invalid min_activation_height (%s)\", vDeploymentParams[3]));\n         }\n         bool found = false;\n-        for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n-            if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), start_height, timeout_height, min_activation_height);\n+        for (const auto& dep_pair : consensus.m_deployments) {\n+            const auto& dep_pos = dep_pair.first;\n+\n+            if (vDeploymentParams[0] == VersionBitsDeploymentInfo.at(dep_pos).name) {\n+                UpdateVersionBitsParameters(dep_pos, start_height, timeout_height, min_activation_height);\n                 found = true;\n                 LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld, min_activation_height=%ld\\n\", vDeploymentParams[0], start_height, timeout_height, min_activation_height);\n                 break;"
      },
      {
        "sha": "9af1579705d9be30dbc91280341a8cf8d462389d",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <uint256.h>\n #include <limits>\n+#include <map>\n \n namespace Consensus {\n \n@@ -16,7 +17,6 @@ enum DeploymentPos\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n-    MAX_VERSION_BITS_DEPLOYMENTS\n };\n \n /**\n@@ -78,7 +78,7 @@ struct Params {\n      */\n     uint32_t m_vbits_min_threshold;\n     uint32_t nMinerConfirmationWindow;\n-    VBitsDeployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n+    std::map<DeploymentPos, VBitsDeployment> m_deployments;\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "1e4fdeea111cd2dae2040c69c55e040d7c02ae6a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -1224,10 +1224,11 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n \n static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    const auto& dep = consensusParams.m_deployments.at(id);\n     // For BIP9 deployments.\n     // Deployments (e.g. testdummy) which are marked as \"never active\" are hidden.\n     // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n-    if (consensusParams.vDeployments[id].timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE) return;\n+    if (dep.timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n@@ -1240,10 +1241,10 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        bip9.pushKV(\"bit\", dep.bit);\n     }\n-    bip9.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n-    bip9.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n+    bip9.pushKV(\"startheight\", dep.startheight);\n+    bip9.pushKV(\"timeoutheight\", dep.timeoutheight);\n     int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)"
      },
      {
        "sha": "cc942117a5a5d34c65be62e19333ef53f9ebd0a3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -494,7 +494,7 @@ static UniValue BIP22ValidationResult(const BlockValidationState& state)\n }\n \n static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n-    const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n+    const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo.at(pos);\n     std::string s = vbinfo.name;\n     if (!vbinfo.gbt_force) {\n         s.insert(s.begin(), '!');\n@@ -827,8 +827,8 @@ static RPCHelpMan getblocktemplate()\n     }\n \n     UniValue vbavailable(UniValue::VOBJ);\n-    for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n-        Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n+    for (const auto& dep_pair : consensusParams.m_deployments) {\n+        const Consensus::DeploymentPos pos = dep_pair.first;\n         ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n         switch (state) {\n             case ThresholdState::DEFINED:\n@@ -841,8 +841,8 @@ static RPCHelpMan getblocktemplate()\n                 // FALL THROUGH to get vbavailable set...\n             case ThresholdState::STARTED:\n             {\n-                const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n+                const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo.at(pos);\n+                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.m_deployments.at(pos).bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n@@ -854,7 +854,7 @@ static RPCHelpMan getblocktemplate()\n             case ThresholdState::ACTIVE:\n             {\n                 // Add to rules only\n-                const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n+                const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo.at(pos);\n                 aRules.push_back(gbt_vb_name(pos));\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     // Not supported by the client; make sure it's safe to proceed"
      },
      {
        "sha": "ac2775760b607c5f378e6970723528e2b8d80df4",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -255,16 +255,18 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n void sanity_check_params(const Consensus::Params& params)\n {\n     // Sanity checks of version bit deployments\n-    for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+    for (const auto& dep_pair : params.m_deployments) {\n+        const auto& dep_pos = dep_pair.first;\n+        const auto& dep = dep_pair.second;\n \n         // Verify the threshold is sane and isn't lower than the threshold\n         // used for warning for unknown activations\n-        int threshold = params.vDeployments[i].threshold;\n+        int threshold = dep.threshold;\n         BOOST_CHECK(threshold > 0);\n         BOOST_CHECK((uint32_t)threshold >= params.m_vbits_min_threshold);\n         BOOST_CHECK((uint32_t)threshold <= params.nMinerConfirmationWindow);\n \n-        uint32_t bitmask = VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n+        uint32_t bitmask = VersionBitsMask(params, dep_pos);\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -275,10 +277,12 @@ void sanity_check_params(const Consensus::Params& params)\n         // end time of that soft fork.  (Alternatively, the end time of that\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n-        for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (static_cast<uint32_t>(VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j))) == bitmask) {\n-                BOOST_CHECK(params.vDeployments[j].startheight > params.vDeployments[i].timeoutheight ||\n-                        params.vDeployments[i].startheight > params.vDeployments[j].timeoutheight);\n+        for (const auto& other_dep_pair : params.m_deployments) {\n+            const auto& other_dep_pos = other_dep_pair.first;\n+            const auto& other_dep = other_dep_pair.second;\n+            if (other_dep_pos != dep_pos &&  static_cast<uint32_t>(VersionBitsMask(params, other_dep_pos)) == bitmask) {\n+                BOOST_CHECK(other_dep.startheight > dep.timeoutheight ||\n+                        dep.startheight > other_dep.timeoutheight);\n             }\n         }\n     }\n@@ -302,9 +306,9 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes.\n-    int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n-    int64_t startheight = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight;\n-    int64_t timeoutheight = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight;\n+    int64_t bit = mainnetParams.m_deployments.at(Consensus::DEPLOYMENT_TESTDUMMY).bit;\n+    int64_t startheight = mainnetParams.m_deployments.at(Consensus::DEPLOYMENT_TESTDUMMY).startheight;\n+    int64_t timeoutheight = mainnetParams.m_deployments.at(Consensus::DEPLOYMENT_TESTDUMMY).timeoutheight;\n     const int64_t nTime = TestTime(startheight);\n \n     assert(startheight < timeoutheight);"
      },
      {
        "sha": "3c2ccd38f1ede9d1a9267f3c80d46ac66d980c1b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -1816,10 +1816,11 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     LOCK(cs_main);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n-    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n+    for (const auto& dep_pair : params.m_deployments) {\n+        const auto& dep_pos = dep_pair.first;\n+        ThresholdState state = VersionBitsState(pindexPrev, params, dep_pos, versionbitscache);\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n+            nVersion |= VersionBitsMask(params, dep_pos);\n         }\n     }\n "
      },
      {
        "sha": "bb68e47a1cd33510340ba534064b622018bb8fc2",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -187,7 +187,7 @@ namespace {\n  */\n class VersionBitsConditionChecker : public ThresholdConditionChecker {\n public:\n-    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : ThresholdConditionChecker(params.vDeployments[id], params.nMinerConfirmationWindow) { }\n+    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : ThresholdConditionChecker(params.m_deployments.at(id), params.nMinerConfirmationWindow) { }\n };\n } // namespace\n \n@@ -213,7 +213,5 @@ int32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPo\n \n void VersionBitsCache::Clear()\n {\n-    for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n-        caches[d].clear();\n-    }\n+    caches.clear();\n }"
      },
      {
        "sha": "b991515b3f0a98803829d06a429f1c80e055195a",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -77,7 +77,7 @@ class ThresholdConditionChecker {\n  *  keyed by the bit position used to signal support. */\n struct VersionBitsCache\n {\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+    std::map<Consensus::DeploymentPos, ThresholdConditionCache> caches;\n \n     void Clear();\n };"
      },
      {
        "sha": "1b08bae5274eb4422d887d9d2792da0ae4b2a799",
        "filename": "src/versionbitsinfo.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -5,14 +5,21 @@\n #include <versionbitsinfo.h>\n \n #include <consensus/params.h>\n+#include <map>\n \n-const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n+const std::map<Consensus::DeploymentPos, VBDeploymentInfo> VersionBitsDeploymentInfo = {\n     {\n-        /*.name =*/ \"testdummy\",\n-        /*.gbt_force =*/ true,\n+        Consensus::DeploymentPos::DEPLOYMENT_TESTDUMMY,\n+        {\n+            /*.name =*/ \"testdummy\",\n+            /*.gbt_force =*/ true,\n+        }\n     },\n     {\n-        /*.name =*/ \"taproot\",\n-        /*.gbt_force =*/ true,\n+        Consensus::DeploymentPos::DEPLOYMENT_TAPROOT,\n+        {\n+            /*.name =*/ \"taproot\",\n+            /*.gbt_force =*/ true,\n+        }\n     },\n };"
      },
      {
        "sha": "dd2a01cca52bd06917d90365a057277e83f4d7d7",
        "filename": "src/versionbitsinfo.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbitsinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434b43ca851e6d5e3dabd78fdd10a80f90799ae5/src/versionbitsinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.h?ref=434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "patch": "@@ -5,13 +5,16 @@\n #ifndef BITCOIN_VERSIONBITSINFO_H\n #define BITCOIN_VERSIONBITSINFO_H\n \n+#include <consensus/params.h>\n+#include <map>\n+\n struct VBDeploymentInfo {\n     /** Deployment name */\n     const char *name;\n     /** Whether GBT clients can safely ignore this rule in simplified usage */\n     bool gbt_force;\n };\n \n-extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n+extern const std::map<Consensus::DeploymentPos, VBDeploymentInfo> VersionBitsDeploymentInfo;\n \n #endif // BITCOIN_VERSIONBITSINFO_H"
      }
    ]
  },
  {
    "sha": "de47b3189cb01be90de27a5710fc695e9c1c9c3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTQ3YjMxODljYjAxYmU5MGRlMjdhNTcxMGZjNjk1ZTljMWM5YzNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-09T20:15:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T21:11:29Z"
      },
      "message": "Add constructors for VBitsDeployment\n\nInstead of using the default struct constructor and then filling in the\nparameters later, add constructors to VBitsDeployment where the\nparameters are filled in at initialization.",
      "tree": {
        "sha": "78aa09099038fefd7d88d418f3b5c0e0debacc1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78aa09099038fefd7d88d418f3b5c0e0debacc1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de47b3189cb01be90de27a5710fc695e9c1c9c3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de47b3189cb01be90de27a5710fc695e9c1c9c3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de47b3189cb01be90de27a5710fc695e9c1c9c3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de47b3189cb01be90de27a5710fc695e9c1c9c3d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434b43ca851e6d5e3dabd78fdd10a80f90799ae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/434b43ca851e6d5e3dabd78fdd10a80f90799ae5"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 51,
      "deletions": 50
    },
    "files": [
      {
        "sha": "f412799f94b05697fec9f10e855f058c163dd198",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 37,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=de47b3189cb01be90de27a5710fc695e9c1c9c3d",
        "patch": "@@ -80,16 +80,10 @@ class CMainParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TESTDUMMY, Consensus::VBitsDeployment(28, false /* active */));\n \n         // Deployment of Taproot (BIPs 340-342)\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TAPROOT, Consensus::VBitsDeployment(2, false /* active */));\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -199,16 +193,10 @@ class CTestNetParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TESTDUMMY, Consensus::VBitsDeployment(28, false /* active */));\n \n         // Deployment of Taproot (BIPs 340-342)\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TAPROOT, Consensus::VBitsDeployment(2, false /* active */));\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n@@ -336,16 +324,10 @@ class SigNetParams : public CChainParams {\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TESTDUMMY, Consensus::VBitsDeployment(28, false /* active */));\n \n-        // Activation of Taproot (BIPs 340-342)\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n+        // Deployment of Taproot (BIPs 340-342)\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TAPROOT, Consensus::VBitsDeployment(2, true /* active */));\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -403,15 +385,25 @@ class CRegTestParams : public CChainParams {\n         consensus.fPowNoRetargeting = true;\n         consensus.m_vbits_min_threshold = 108; // 75%\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TESTDUMMY].m_min_activation_height = 0; // No minimum activation height\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        consensus.m_deployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n+\n+        // Since the startheight, timeoutheight, and min activation height can be changed with -vbparams,\n+        // don't use the always/never active constructors and instead specify all the parameters\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TESTDUMMY, Consensus::VBitsDeployment(\n+            28, // bit\n+            144, // startheight\n+            Consensus::VBitsDeployment::NO_TIMEOUT, // timeoutheight\n+            108, // threshold\n+            0 // min_activation_height\n+        ));\n+\n+        // Deployment of Taproot (BIPs 340-342)\n+        consensus.m_deployments.emplace(Consensus::DEPLOYMENT_TAPROOT, Consensus::VBitsDeployment(\n+            2, // bit\n+            Consensus::VBitsDeployment::ALWAYS_ACTIVE, // startheight\n+            Consensus::VBitsDeployment::NO_TIMEOUT, // timeoutheight\n+            108, // threshold\n+            0 // min_activation_height\n+        ));\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};\n@@ -477,9 +469,9 @@ class CRegTestParams : public CChainParams {\n      */\n     void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t start_height, int64_t timeout_height, int64_t min_activation_height)\n     {\n-        consensus.m_deployments[d].startheight = start_height;\n-        consensus.m_deployments[d].timeoutheight = timeout_height;\n-        consensus.m_deployments[d].m_min_activation_height = min_activation_height;\n+        consensus.m_deployments.at(d).startheight = start_height;\n+        consensus.m_deployments.at(d).timeoutheight = timeout_height;\n+        consensus.m_deployments.at(d).m_min_activation_height = min_activation_height;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };"
      },
      {
        "sha": "8f9f475c945bd2c40cdca90b62ae613269b1a19e",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=de47b3189cb01be90de27a5710fc695e9c1c9c3d",
        "patch": "@@ -23,6 +23,24 @@ enum DeploymentPos\n  * Struct for each individual consensus rule change using BIP9.\n  */\n struct VBitsDeployment {\n+\n+    /** Construct a VBitsDeployment with all paramters */\n+    VBitsDeployment(int bit, int startheight, int timeoutheight, int threshold, int64_t min_activation_height)\n+        : bit(bit), startheight(startheight), timeoutheight(timeoutheight), threshold(threshold), m_min_activation_height(min_activation_height)\n+        {}\n+\n+    /** Construct a standard VBitsDeployment (i.e. without a minimum activation height) */\n+    VBitsDeployment(int bit, int startheight, int timeoutheight, int threshold)\n+        : bit(bit), startheight(startheight), timeoutheight(timeoutheight), threshold(threshold), m_min_activation_height(0)\n+        {}\n+\n+    /** Construct a VBitsDeployment that is either always active or never active. Used for tests\n+     * For always active, use \"active=true\". For never active, use \"active=false\"\n+     */\n+    VBitsDeployment(int bit, bool active)\n+        : bit(bit), startheight(active ? ALWAYS_ACTIVE : NEVER_ACTIVE), timeoutheight(active ? NO_TIMEOUT : NEVER_ACTIVE), threshold(1916), m_min_activation_height(0)\n+        {}\n+\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n     /** Start block height for version bits miner confirmation. Must be a retarget block, can be in the past. */"
      },
      {
        "sha": "2a36a581ef39deb1f4fe22733800e6f83b1e5367",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=de47b3189cb01be90de27a5710fc695e9c1c9c3d",
        "patch": "@@ -35,13 +35,8 @@ class TestConditionChecker : public ThresholdConditionChecker\n     Consensus::VBitsDeployment m_dep_storage;\n \n public:\n-    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 10)\n-    {\n-        m_dep_storage.bit = 8;\n-        m_dep_storage.startheight = 100;\n-        m_dep_storage.timeoutheight = 200;\n-        m_dep_storage.threshold = 9;\n-    }\n+    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(8, 100, 200, 9)\n+    {}\n \n     TestConditionChecker& operator=(const TestConditionChecker& other)\n     {"
      },
      {
        "sha": "d05d201187715778a8559320c651dab634584091",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de47b3189cb01be90de27a5710fc695e9c1c9c3d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=de47b3189cb01be90de27a5710fc695e9c1c9c3d",
        "patch": "@@ -1840,14 +1840,10 @@ class WarningBitsConditionChecker : public ThresholdConditionChecker\n public:\n     explicit WarningBitsConditionChecker(const Consensus::Params& params, int bitIn) :\n         ThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow),\n+        m_dep_storage(bitIn, 0, Consensus::VBitsDeployment::NO_TIMEOUT, params.m_vbits_min_threshold),\n         m_min_height{params.MinBIP9WarningHeight},\n         m_params{params}\n-    {\n-        m_dep_storage.bit = bitIn;\n-        m_dep_storage.startheight = 0;\n-        m_dep_storage.timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n-        m_dep_storage.threshold = params.m_vbits_min_threshold;\n-    }\n+    {}\n \n     bool Condition(const CBlockIndex* pindex) const override\n     {"
      }
    ]
  },
  {
    "sha": "48771d52c77d9f34f01031949945ba2acdf4d8dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODc3MWQ1MmM3N2Q5ZjM0ZjAxMDMxOTQ5OTQ1YmEyYWNkZjRkOGRk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-09T21:29:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T21:11:46Z"
      },
      "message": "Make parameters in VBitsDeployment const",
      "tree": {
        "sha": "d009f5f9e05e7fe2bdeec3671d045af024568a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d009f5f9e05e7fe2bdeec3671d045af024568a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48771d52c77d9f34f01031949945ba2acdf4d8dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48771d52c77d9f34f01031949945ba2acdf4d8dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48771d52c77d9f34f01031949945ba2acdf4d8dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48771d52c77d9f34f01031949945ba2acdf4d8dd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de47b3189cb01be90de27a5710fc695e9c1c9c3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de47b3189cb01be90de27a5710fc695e9c1c9c3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de47b3189cb01be90de27a5710fc695e9c1c9c3d"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 35,
      "deletions": 33
    },
    "files": [
      {
        "sha": "6acf3ccef3c68a9e5c450e8dd7e36a5d2e5664e6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48771d52c77d9f34f01031949945ba2acdf4d8dd/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48771d52c77d9f34f01031949945ba2acdf4d8dd/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=48771d52c77d9f34f01031949945ba2acdf4d8dd",
        "patch": "@@ -469,9 +469,15 @@ class CRegTestParams : public CChainParams {\n      */\n     void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t start_height, int64_t timeout_height, int64_t min_activation_height)\n     {\n-        consensus.m_deployments.at(d).startheight = start_height;\n-        consensus.m_deployments.at(d).timeoutheight = timeout_height;\n-        consensus.m_deployments.at(d).m_min_activation_height = min_activation_height;\n+        const auto original_dep = consensus.m_deployments.at(d);\n+        consensus.m_deployments.erase(d);\n+        consensus.m_deployments.emplace(d, Consensus::VBitsDeployment(\n+            original_dep.bit, // bit\n+            start_height, // startheight\n+            timeout_height, // timeoutheight\n+            original_dep.threshold, // threshold\n+            min_activation_height // min_activation_height\n+        ));\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };"
      },
      {
        "sha": "161c1d7db3309223efaf7b418cfe7d1772f77a10",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48771d52c77d9f34f01031949945ba2acdf4d8dd/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48771d52c77d9f34f01031949945ba2acdf4d8dd/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=48771d52c77d9f34f01031949945ba2acdf4d8dd",
        "patch": "@@ -42,17 +42,17 @@ struct VBitsDeployment {\n         {}\n \n     /** Bit position to select the particular bit in nVersion. */\n-    int bit;\n+    const int bit;\n     /** Start block height for version bits miner confirmation. Must be a retarget block, can be in the past. */\n-    int startheight;\n+    const int startheight;\n     /** Timeout/expiry block height for the deployment attempt. Must be a retarget block. */\n-    int timeoutheight;\n+    const int timeoutheight;\n     /** Threshold for activation */\n-    int threshold;\n+    const int threshold;\n     /**\n      * If lock in occurs, delay activation until at least this block height. Activations only occur on retargets.\n      */\n-    int64_t m_min_activation_height{0};\n+    const int64_t m_min_activation_height{0};\n \n     /** Constant for timeoutheight very far in the future. */\n     static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();"
      },
      {
        "sha": "54d251361876aa112da9aa1929f877f1bb2f9083",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 25,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48771d52c77d9f34f01031949945ba2acdf4d8dd/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48771d52c77d9f34f01031949945ba2acdf4d8dd/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=48771d52c77d9f34f01031949945ba2acdf4d8dd",
        "patch": "@@ -30,55 +30,51 @@ class TestConditionChecker : public ThresholdConditionChecker\n {\n private:\n     mutable ThresholdConditionCache cache;\n+    static constexpr int BIT = 8;\n+    static constexpr int THRESHOLD = 9;\n+    static constexpr int DEFAULT_START = 100;\n+    static constexpr int DEFAULT_TIMEOUT = 200;\n \n protected:\n     Consensus::VBitsDeployment m_dep_storage;\n \n public:\n-    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(8, 100, 200, 9)\n+    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(BIT, DEFAULT_START, DEFAULT_TIMEOUT, THRESHOLD)\n+    {}\n+    TestConditionChecker(int min_activation_height) : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(BIT, DEFAULT_START, DEFAULT_TIMEOUT, THRESHOLD, min_activation_height)\n+    {}\n+    TestConditionChecker(int start_height, int timeout_height) : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(BIT, start_height, timeout_height, THRESHOLD)\n     {}\n-\n-    TestConditionChecker& operator=(const TestConditionChecker& other)\n-    {\n-        cache = other.cache;\n-        m_dep_storage = other.m_dep_storage;\n-        return *this;\n-    }\n \n     bool Condition(const CBlockIndex* pindex) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return ThresholdConditionChecker::GetStateFor(pindexPrev, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return ThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, cache); }\n \n     int Period() const { return m_period; }\n+\n+    void Clear() { cache.clear(); }\n };\n \n class TestDelayedActivationConditionChecker : public TestConditionChecker\n {\n public:\n-    TestDelayedActivationConditionChecker() : TestConditionChecker()\n-    {\n-        m_dep_storage.m_min_activation_height = 250;\n-    }\n+    TestDelayedActivationConditionChecker() : TestConditionChecker(250)\n+    {}\n };\n \n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    TestAlwaysActiveConditionChecker() : TestConditionChecker()\n-    {\n-        m_dep_storage.startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n-    }\n+    TestAlwaysActiveConditionChecker() : TestConditionChecker(Consensus::VBitsDeployment::ALWAYS_ACTIVE, Consensus::VBitsDeployment::NO_TIMEOUT)\n+    {}\n };\n \n class TestNeverActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    TestNeverActiveConditionChecker() : TestConditionChecker()\n-    {\n-        m_dep_storage.startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-        m_dep_storage.timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n-    }\n+    TestNeverActiveConditionChecker() : TestConditionChecker(Consensus::VBitsDeployment::NEVER_ACTIVE, Consensus::VBitsDeployment::NEVER_ACTIVE)\n+    {}\n };\n \n #define CHECKERS 6\n@@ -111,10 +107,10 @@ class VersionBitsTester\n             delete vpblock[i];\n         }\n         for (unsigned int  i = 0; i < CHECKERS; i++) {\n-            checker[i] = TestConditionChecker();\n-            checker_delayed[i] = TestDelayedActivationConditionChecker();\n-            checker_always[i] = TestAlwaysActiveConditionChecker();\n-            checker_never[i] = TestNeverActiveConditionChecker();\n+            checker[i].Clear();\n+            checker_delayed[i].Clear();\n+            checker_always[i].Clear();\n+            checker_never[i].Clear();\n         }\n         vpblock.clear();\n         return *this;"
      }
    ]
  },
  {
    "sha": "585dd6e774417d759136d5f4a1bd1666e98c08ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODVkZDZlNzc0NDE3ZDc1OTEzNmQ1ZjRhMWJkMTY2NmU5OGMwOGFi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-09T22:59:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T21:16:18Z"
      },
      "message": "Move period into VBitsDeployment",
      "tree": {
        "sha": "cf5679b42454e9bdd05c5e46d4d1904da7ce36ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf5679b42454e9bdd05c5e46d4d1904da7ce36ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/585dd6e774417d759136d5f4a1bd1666e98c08ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/585dd6e774417d759136d5f4a1bd1666e98c08ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/585dd6e774417d759136d5f4a1bd1666e98c08ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/585dd6e774417d759136d5f4a1bd1666e98c08ab/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48771d52c77d9f34f01031949945ba2acdf4d8dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48771d52c77d9f34f01031949945ba2acdf4d8dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48771d52c77d9f34f01031949945ba2acdf4d8dd"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 27,
      "deletions": 18
    },
    "files": [
      {
        "sha": "556b06e372b56ccb2d6361f3553df8bd752d7659",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=585dd6e774417d759136d5f4a1bd1666e98c08ab",
        "patch": "@@ -393,6 +393,7 @@ class CRegTestParams : public CChainParams {\n             144, // startheight\n             Consensus::VBitsDeployment::NO_TIMEOUT, // timeoutheight\n             108, // threshold\n+            consensus.nMinerConfirmationWindow, // period\n             0 // min_activation_height\n         ));\n \n@@ -402,6 +403,7 @@ class CRegTestParams : public CChainParams {\n             Consensus::VBitsDeployment::ALWAYS_ACTIVE, // startheight\n             Consensus::VBitsDeployment::NO_TIMEOUT, // timeoutheight\n             108, // threshold\n+            consensus.nMinerConfirmationWindow, // period\n             0 // min_activation_height\n         ));\n \n@@ -476,6 +478,7 @@ class CRegTestParams : public CChainParams {\n             start_height, // startheight\n             timeout_height, // timeoutheight\n             original_dep.threshold, // threshold\n+            original_dep.m_period, // period\n             min_activation_height // min_activation_height\n         ));\n     }"
      },
      {
        "sha": "31b53497186eca1ffa4a1e3d7318cd97f2fb1fa5",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=585dd6e774417d759136d5f4a1bd1666e98c08ab",
        "patch": "@@ -25,20 +25,20 @@ enum DeploymentPos\n struct VBitsDeployment {\n \n     /** Construct a VBitsDeployment with all paramters */\n-    VBitsDeployment(int bit, int startheight, int timeoutheight, int threshold, int64_t min_activation_height)\n-        : bit(bit), startheight(startheight), timeoutheight(timeoutheight), threshold(threshold), m_min_activation_height(min_activation_height)\n+    VBitsDeployment(int bit, int startheight, int timeoutheight, int threshold, int period, int64_t min_activation_height)\n+        : bit(bit), startheight(startheight), timeoutheight(timeoutheight), threshold(threshold), m_period(period), m_min_activation_height(min_activation_height)\n         {}\n \n     /** Construct a standard VBitsDeployment (i.e. without a minimum activation height) */\n-    VBitsDeployment(int bit, int startheight, int timeoutheight, int threshold)\n-        : bit(bit), startheight(startheight), timeoutheight(timeoutheight), threshold(threshold), m_min_activation_height(0)\n+    VBitsDeployment(int bit, int startheight, int timeoutheight, int threshold, int period)\n+        : bit(bit), startheight(startheight), timeoutheight(timeoutheight), threshold(threshold), m_period(period), m_min_activation_height(0)\n         {}\n \n     /** Construct a VBitsDeployment that is either always active or never active. Used for tests\n      * For always active, use \"active=true\". For never active, use \"active=false\"\n      */\n     VBitsDeployment(int bit, bool active)\n-        : bit(bit), startheight(active ? ALWAYS_ACTIVE : NEVER_ACTIVE), timeoutheight(active ? NO_TIMEOUT : NEVER_ACTIVE), threshold(1916), m_min_activation_height(0)\n+        : bit(bit), startheight(active ? ALWAYS_ACTIVE : NEVER_ACTIVE), timeoutheight(active ? NO_TIMEOUT : NEVER_ACTIVE), threshold(1916), m_period(2016), m_min_activation_height(0)\n         {}\n \n     /** Bit position to select the particular bit in nVersion. */\n@@ -49,6 +49,8 @@ struct VBitsDeployment {\n     const int timeoutheight;\n     /** Threshold for activation */\n     const int threshold;\n+    /** The number of blocks in a single period for measuring the number of signaling blocks. Must be the same number of blocks in a retarget period */\n+    const int m_period;\n     /**\n      * If lock in occurs, delay activation until at least this block height. Activations only occur on retargets.\n      */"
      },
      {
        "sha": "7af5bc7b31100da7a4699e6070f9bb561afbbd20",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=585dd6e774417d759136d5f4a1bd1666e98c08ab",
        "patch": "@@ -32,26 +32,27 @@ class TestConditionChecker : public ThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n     static constexpr int BIT = 8;\n     static constexpr int THRESHOLD = 9;\n+    static constexpr int PERIOD = 10;\n     static constexpr int DEFAULT_START = 100;\n     static constexpr int DEFAULT_TIMEOUT = 200;\n \n protected:\n     Consensus::VBitsDeployment m_dep_storage;\n \n public:\n-    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(BIT, DEFAULT_START, DEFAULT_TIMEOUT, THRESHOLD)\n+    TestConditionChecker() : ThresholdConditionChecker(m_dep_storage), m_dep_storage(BIT, DEFAULT_START, DEFAULT_TIMEOUT, THRESHOLD, PERIOD)\n     {}\n-    TestConditionChecker(int min_activation_height) : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(BIT, DEFAULT_START, DEFAULT_TIMEOUT, THRESHOLD, min_activation_height)\n+    TestConditionChecker(int min_activation_height) : ThresholdConditionChecker(m_dep_storage), m_dep_storage(BIT, DEFAULT_START, DEFAULT_TIMEOUT, THRESHOLD, PERIOD, min_activation_height)\n     {}\n-    TestConditionChecker(int start_height, int timeout_height) : ThresholdConditionChecker(m_dep_storage, 10), m_dep_storage(BIT, start_height, timeout_height, THRESHOLD)\n+    TestConditionChecker(int start_height, int timeout_height) : ThresholdConditionChecker(m_dep_storage), m_dep_storage(BIT, start_height, timeout_height, THRESHOLD, PERIOD)\n     {}\n \n     bool Condition(const CBlockIndex* pindex) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return ThresholdConditionChecker::GetStateFor(pindexPrev, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return ThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, cache); }\n \n-    int Period() const { return m_period; }\n+    int Period() const { return m_dep_storage.m_period; }\n \n     void Clear() { cache.clear(); }\n };\n@@ -253,9 +254,13 @@ void sanity_check_params(const Consensus::Params& params)\n         // Verify the threshold is sane and isn't lower than the threshold\n         // used for warning for unknown activations\n         int threshold = dep.threshold;\n+        int period = dep.m_period;\n         BOOST_CHECK(threshold > 0);\n         BOOST_CHECK((uint32_t)threshold >= params.m_vbits_min_threshold);\n-        BOOST_CHECK((uint32_t)threshold <= params.nMinerConfirmationWindow);\n+        BOOST_CHECK(threshold <= period);\n+\n+        // Verify that the period is the same as the retarget window\n+        BOOST_CHECK((uint32_t)period == params.nMinerConfirmationWindow);\n \n         uint32_t bitmask = VersionBitsMask(params, dep_pos);\n         // Make sure that no deployment tries to set an invalid bit."
      },
      {
        "sha": "5f525ec9f976c945fa7f7cc26db8adc579753aa2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=585dd6e774417d759136d5f4a1bd1666e98c08ab",
        "patch": "@@ -1839,8 +1839,8 @@ class WarningBitsConditionChecker : public ThresholdConditionChecker\n \n public:\n     explicit WarningBitsConditionChecker(const Consensus::Params& params, int bitIn) :\n-        ThresholdConditionChecker(m_dep_storage, params.nMinerConfirmationWindow),\n-        m_dep_storage(bitIn, 0, Consensus::VBitsDeployment::NO_TIMEOUT, params.m_vbits_min_threshold),\n+        ThresholdConditionChecker(m_dep_storage),\n+        m_dep_storage(bitIn, 0, Consensus::VBitsDeployment::NO_TIMEOUT, params.m_vbits_min_threshold, params.nMinerConfirmationWindow),\n         m_min_height{params.MinBIP9WarningHeight},\n         m_params{params}\n     {}"
      },
      {
        "sha": "6673951bc483cf2bf813f9cfc31dbcdaea6281a5",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=585dd6e774417d759136d5f4a1bd1666e98c08ab",
        "patch": "@@ -7,7 +7,7 @@\n \n ThresholdState ThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, ThresholdConditionCache& cache) const\n {\n-    int nPeriod = m_period;\n+    int nPeriod = m_dep.m_period;\n     int nThreshold = m_dep.threshold;\n     int64_t height_start = m_dep.startheight;\n     int64_t height_timeout = m_dep.timeoutheight;\n@@ -109,7 +109,7 @@ VBitsStats ThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* p\n {\n     VBitsStats stats = {};\n \n-    stats.period = m_period;\n+    stats.period = m_dep.m_period;\n     stats.threshold = m_dep.threshold;\n \n     // We track state by previous-block, so the height we should be comparing is +1\n@@ -155,7 +155,7 @@ int ThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexP\n         return 0;\n     }\n \n-    const int nPeriod = m_period;\n+    const int nPeriod = m_dep.m_period;\n \n     // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n     // To ease understanding of the following height calculation, it helps to remember that\n@@ -187,7 +187,7 @@ namespace {\n  */\n class VersionBitsConditionChecker : public ThresholdConditionChecker {\n public:\n-    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : ThresholdConditionChecker(params.m_deployments.at(id), params.nMinerConfirmationWindow) { }\n+    explicit VersionBitsConditionChecker(const Consensus::Params& params, Consensus::DeploymentPos id) : ThresholdConditionChecker(params.m_deployments.at(id)) { }\n };\n } // namespace\n "
      },
      {
        "sha": "e9c404e2df387c04a3beafb7af2a21f9853e9565",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/585dd6e774417d759136d5f4a1bd1666e98c08ab/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=585dd6e774417d759136d5f4a1bd1666e98c08ab",
        "patch": "@@ -55,10 +55,9 @@ struct VBitsStats {\n class ThresholdConditionChecker {\n protected:\n     const Consensus::VBitsDeployment& m_dep;\n-    const int m_period;\n \n public:\n-    ThresholdConditionChecker(const Consensus::VBitsDeployment& dep, int period) : m_dep{dep}, m_period{period} { }\n+    ThresholdConditionChecker(const Consensus::VBitsDeployment& dep) : m_dep{dep} { }\n \n     /** Returns whether a block signals or not */\n     virtual bool Condition(const CBlockIndex* pindex) const;"
      }
    ]
  }
]