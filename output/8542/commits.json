[
  {
    "sha": "a9535bc56673291e884059463466d3709cf2b1c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTUzNWJjNTY2NzMyOTFlODg0MDU5NDYzNDY2ZDM3MDljZjJiMWM3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-24T20:42:17Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-18T22:43:14Z"
      },
      "message": "net: Pass best block known height into net\n\nThen pass the current best height into CNode at creation time.\n\nThis way CNode has no dependency on main for height, and the signals only move\nin one direction.\n\nThis also helps to prevent identity leakage a tiny bit. Before this change, an\nattacker could theoretically make 2 connections on different interfaces. They\nwould connect fully on one, and only establish the initial connection on the\nother. Once they receive a new block, they would relay it to your first\nconnection, and immediately commence the version handshake on the second. Since\nthe new block height is reflected immediately, they could attempt to learn\nwhether the two connections were correlated.\n\nThis is, of course, incredibly unlikely to work due to the small timings\ninvolved and receipt from other senders. But it doesn't hurt to lock-in\nnBestHeight at the time of connection, rather than letting the remote choose\nthe time.",
      "tree": {
        "sha": "4182b7f9bde3ee400aebf9cb0dabc2ad1d385805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4182b7f9bde3ee400aebf9cb0dabc2ad1d385805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9535bc56673291e884059463466d3709cf2b1c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9535bc56673291e884059463466d3709cf2b1c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9535bc56673291e884059463466d3709cf2b1c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9535bc56673291e884059463466d3709cf2b1c7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8250de13587ed05ca45df3e12c5dc9bcb1500e2c"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 28,
      "deletions": 25
    },
    "files": [
      {
        "sha": "0949f677c3c96764246d7714083281cb71e1b211",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9535bc56673291e884059463466d3709cf2b1c7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9535bc56673291e884059463466d3709cf2b1c7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a9535bc56673291e884059463466d3709cf2b1c7",
        "patch": "@@ -1503,6 +1503,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n+    SetNodeStartHeight(chainActive.Height());\n     StartNode(threadGroup, scheduler);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "7017064d737e3a3831ba8de3e6ca90e62338b432",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9535bc56673291e884059463466d3709cf2b1c7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9535bc56673291e884059463466d3709cf2b1c7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9535bc56673291e884059463466d3709cf2b1c7",
        "patch": "@@ -325,12 +325,6 @@ CNodeState *State(NodeId pnode) {\n     return &it->second;\n }\n \n-int GetHeight()\n-{\n-    LOCK(cs_main);\n-    return chainActive.Height();\n-}\n-\n void UpdatePreferredDownload(CNode* node, CNodeState* state)\n {\n     nPreferredDownload -= state->fPreferredDownload;\n@@ -633,7 +627,6 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n \n void RegisterNodeSignals(CNodeSignals& nodeSignals)\n {\n-    nodeSignals.GetHeight.connect(&GetHeight);\n     nodeSignals.ProcessMessages.connect(&ProcessMessages);\n     nodeSignals.SendMessages.connect(&SendMessages);\n     nodeSignals.InitializeNode.connect(&InitializeNode);\n@@ -642,7 +635,6 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals)\n \n void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n {\n-    nodeSignals.GetHeight.disconnect(&GetHeight);\n     nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n     nodeSignals.SendMessages.disconnect(&SendMessages);\n     nodeSignals.InitializeNode.disconnect(&InitializeNode);\n@@ -2769,6 +2761,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n+    SetNodeStartHeight(pindexDelete->pprev->nHeight);\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         SyncWithWallets(tx, pindexDelete->pprev);\n     }\n@@ -3046,6 +3039,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             nNewHeight = chainActive.Height();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n+        SetNodeStartHeight(nNewHeight);\n \n         // Notifications/callbacks that can run without cs_main\n "
      },
      {
        "sha": "0c02eb266bd4f6d5501e0be23ddd39b77f58dfc0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9535bc56673291e884059463466d3709cf2b1c7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9535bc56673291e884059463466d3709cf2b1c7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a9535bc56673291e884059463466d3709cf2b1c7",
        "patch": "@@ -109,6 +109,8 @@ CCriticalSection cs_nLastNodeId;\n static CSemaphore *semOutbound = NULL;\n boost::condition_variable messageHandlerCondition;\n \n+static std::atomic<int> nNodeStartHeight(0);\n+\n // Signals for message handling\n static CNodeSignals g_signals;\n CNodeSignals& GetNodeSignals() { return g_signals; }\n@@ -186,6 +188,11 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n     return ret;\n }\n \n+void SetNodeStartHeight(int nHeight)\n+{\n+    nNodeStartHeight.store(nHeight, std::memory_order_relaxed);\n+};\n+\n int GetnScore(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n@@ -434,7 +441,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n+        CNode* pnode = new CNode(nNodeStartHeight.load(std::memory_order_relaxed), hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n         pnode->AddRef();\n \n         {\n@@ -492,18 +499,16 @@ void CNode::CloseSocketDisconnect()\n \n void CNode::PushVersion()\n {\n-    int nBestHeight = GetNodeSignals().GetHeight().get_value_or(0);\n-\n     int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n     CAddress addrMe = GetLocalAddress(&addr);\n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     if (fLogIPs)\n-        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n+        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nOurStartHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n-        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n+        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nOurStartHeight, addrMe.ToString(), id);\n     PushMessage(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, strSubVersion, nBestHeight, ::fRelayTxes);\n+                nLocalHostNonce, strSubVersion, nOurStartHeight, ::fRelayTxes);\n }\n \n \n@@ -1072,7 +1077,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+    CNode* pnode = new CNode(nNodeStartHeight.load(std::memory_order_relaxed), hSocket, addr, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n \n@@ -2069,7 +2074,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        pnodeLocalHost = new CNode(nNodeStartHeight.load(std::memory_order_relaxed), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n     }\n \n     Discover(threadGroup);\n@@ -2425,12 +2430,13 @@ bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n-CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(int nOurStartHeightIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n     nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n     addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001)\n+    filterInventoryKnown(50000, 0.000001),\n+    nOurStartHeight(nOurStartHeightIn)\n {\n     nServices = NODE_NONE;\n     nServicesExpected = NODE_NONE;"
      },
      {
        "sha": "89e0a3caf9fb7dfa21629619c0804fbd6c602ad1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9535bc56673291e884059463466d3709cf2b1c7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9535bc56673291e884059463466d3709cf2b1c7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a9535bc56673291e884059463466d3709cf2b1c7",
        "patch": "@@ -115,7 +115,6 @@ struct CombinerAll\n // Signals for message handling\n struct CNodeSignals\n {\n-    boost::signals2::signal<int ()> GetHeight;\n     boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n     boost::signals2::signal<bool (CNode*), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n@@ -151,7 +150,7 @@ bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(enum Network net);\n bool IsReachable(const CNetAddr &addr);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n-\n+void SetNodeStartHeight(int nHeight);\n \n extern bool fDiscover;\n extern bool fListen;\n@@ -443,7 +442,10 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    // Out height at the time of node creation\n+    const int nOurStartHeight;\n+\n+    CNode(int nOurStartHeightIn, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:"
      },
      {
        "sha": "44bb149866d05ab38a7bce4233af305ea2c497f1",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9535bc56673291e884059463466d3709cf2b1c7/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9535bc56673291e884059463466d3709cf2b1c7/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a9535bc56673291e884059463466d3709cf2b1c7",
        "patch": "@@ -46,15 +46,15 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     CNode::ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(0, INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n+    CNode dummyNode2(0, INVALID_SOCKET, addr2, \"\", true);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2);\n@@ -70,7 +70,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CNode::ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(0, INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1);\n@@ -91,7 +91,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(INVALID_SOCKET, addr, \"\", true);\n+    CNode dummyNode(0, INVALID_SOCKET, addr, \"\", true);\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);"
      }
    ]
  }
]