[
  {
    "sha": "37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2U4NjRlYjlmZWU0YjU5MmJkNjFjNWVjMzU1NWIwMGEyZGUyY2Y3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-02T18:04:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-05T19:44:44Z"
      },
      "message": "Add FastRandomContext::rand256() and ::randbytes()\n\nFastRandomContext now provides all functionality that the real Rand* functions\nprovide.",
      "tree": {
        "sha": "901f97994d5a2e5aebf5f3e41d27698b780ac152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/901f97994d5a2e5aebf5f3e41d27698b780ac152"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fec4da0bec93a49798b5f5e92cf76e900759ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fec4da0bec93a49798b5f5e92cf76e900759ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fec4da0bec93a49798b5f5e92cf76e900759ee4"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e1ccfa5f2404a961f6bedde6a594ed30969d2015",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
        "patch": "@@ -304,6 +304,26 @@ void FastRandomContext::RandomSeed()\n     requires_seed = false;\n }\n \n+uint256 FastRandomContext::rand256()\n+{\n+    if (bytebuf_size < 32) {\n+        FillByteBuffer();\n+    }\n+    uint256 ret;\n+    memcpy(ret.begin(), bytebuf + 64 - bytebuf_size, 32);\n+    bytebuf_size -= 32;\n+    return ret;\n+}\n+\n+std::vector<unsigned char> FastRandomContext::randbytes(size_t len)\n+{\n+    std::vector<unsigned char> ret(len);\n+    if (len > 0) {\n+        rng.Output(&ret[0], len);\n+    }\n+    return ret;\n+}\n+\n FastRandomContext::FastRandomContext(const uint256& seed) : requires_seed(false), bytebuf_size(0), bitbuf_size(0)\n {\n     rng.SetKey(seed.begin(), 32);"
      },
      {
        "sha": "dcb74eadb5b79f5c176aec9efd068c21c2222dc8",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
        "patch": "@@ -110,9 +110,15 @@ class FastRandomContext {\n         }\n     }\n \n+    /** Generate random bytes. */\n+    std::vector<unsigned char> randbytes(size_t len);\n+\n     /** Generate a random 32-bit integer. */\n     uint32_t rand32() { return randbits(32); }\n \n+    /** generate a random uint256. */\n+    uint256 rand256();\n+\n     /** Generate a random boolean. */\n     bool randbool() { return randbits(1); }\n };"
      },
      {
        "sha": "132e190051ea30c8a97f16853f2eefa7ac4dfb0d",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
        "patch": "@@ -25,14 +25,21 @@ BOOST_AUTO_TEST_CASE(fastrandom_tests)\n     BOOST_CHECK_EQUAL(ctx1.rand32(), ctx2.rand32());\n     BOOST_CHECK_EQUAL(ctx1.rand64(), ctx2.rand64());\n     BOOST_CHECK_EQUAL(ctx1.randbits(3), ctx2.randbits(3));\n+    BOOST_CHECK(ctx1.randbytes(17) == ctx2.randbytes(17));\n+    BOOST_CHECK(ctx1.rand256() == ctx2.rand256());\n     BOOST_CHECK_EQUAL(ctx1.randbits(7), ctx2.randbits(7));\n+    BOOST_CHECK(ctx1.randbytes(128) == ctx2.randbytes(128));\n     BOOST_CHECK_EQUAL(ctx1.rand32(), ctx2.rand32());\n     BOOST_CHECK_EQUAL(ctx1.randbits(3), ctx2.randbits(3));\n+    BOOST_CHECK(ctx1.rand256() == ctx2.rand256());\n+    BOOST_CHECK(ctx1.randbytes(50) == ctx2.randbytes(50));\n \n     // Check that a nondeterministic ones are not\n     FastRandomContext ctx3;\n     FastRandomContext ctx4;\n     BOOST_CHECK(ctx3.rand64() != ctx4.rand64()); // extremely unlikely to be equal\n+    BOOST_CHECK(ctx3.rand256() != ctx4.rand256());\n+    BOOST_CHECK(ctx3.randbytes(7) != ctx4.randbytes(7));\n }\n \n BOOST_AUTO_TEST_CASE(fastrandom_randbits)"
      }
    ]
  },
  {
    "sha": "90620d66c91ae91c0d5ce73582eb39c47e35ae98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDYyMGQ2NmM5MWFlOTFjMGQ1Y2U3MzU4MmViMzljNDdlMzVhZTk4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T22:13:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-05T19:44:44Z"
      },
      "message": "scripted-diff: Rename cuckoo tests' local rand context\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/insecure_rand/local_rand_ctx/g' src/test/cuckoocache_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "797e2a71f70b7fc517b7cd5f6c451dc723752dd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/797e2a71f70b7fc517b7cd5f6c451dc723752dd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90620d66c91ae91c0d5ce73582eb39c47e35ae98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90620d66c91ae91c0d5ce73582eb39c47e35ae98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90620d66c91ae91c0d5ce73582eb39c47e35ae98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90620d66c91ae91c0d5ce73582eb39c47e35ae98/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37e864eb9fee4b592bd61c5ec3555b00a2de2cf7"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ed391e184cf5dd653f5bfcb3e18c93ccaf789456",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90620d66c91ae91c0d5ce73582eb39c47e35ae98/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90620d66c91ae91c0d5ce73582eb39c47e35ae98/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=90620d66c91ae91c0d5ce73582eb39c47e35ae98",
        "patch": "@@ -23,18 +23,18 @@\n  *  using BOOST_CHECK_CLOSE to fail.\n  *\n  */\n-FastRandomContext insecure_rand(true);\n+FastRandomContext local_rand_ctx(true);\n \n BOOST_AUTO_TEST_SUITE(cuckoocache_tests);\n \n \n-/** insecure_GetRandHash fills in a uint256 from insecure_rand\n+/** insecure_GetRandHash fills in a uint256 from local_rand_ctx\n  */\n void insecure_GetRandHash(uint256& t)\n {\n     uint32_t* ptr = (uint32_t*)t.begin();\n     for (uint8_t j = 0; j < 8; ++j)\n-        *(ptr++) = insecure_rand.rand32();\n+        *(ptr++) = local_rand_ctx.rand32();\n }\n \n \n@@ -45,7 +45,7 @@ void insecure_GetRandHash(uint256& t)\n  */\n BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)\n {\n-    insecure_rand = FastRandomContext(true);\n+    local_rand_ctx = FastRandomContext(true);\n     CuckooCache::cache<uint256, SignatureCacheHasher> cc{};\n     size_t megabytes = 4;\n     cc.setup_bytes(megabytes << 20);\n@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)\n template <typename Cache>\n double test_cache(size_t megabytes, double load)\n {\n-    insecure_rand = FastRandomContext(true);\n+    local_rand_ctx = FastRandomContext(true);\n     std::vector<uint256> hashes;\n     Cache set{};\n     size_t bytes = megabytes * (1 << 20);\n@@ -76,7 +76,7 @@ double test_cache(size_t megabytes, double load)\n     for (uint32_t i = 0; i < n_insert; ++i) {\n         uint32_t* ptr = (uint32_t*)hashes[i].begin();\n         for (uint8_t j = 0; j < 8; ++j)\n-            *(ptr++) = insecure_rand.rand32();\n+            *(ptr++) = local_rand_ctx.rand32();\n     }\n     /** We make a copy of the hashes because future optimizations of the\n      * cuckoocache may overwrite the inserted element, so the test is\n@@ -137,7 +137,7 @@ template <typename Cache>\n void test_cache_erase(size_t megabytes)\n {\n     double load = 1;\n-    insecure_rand = FastRandomContext(true);\n+    local_rand_ctx = FastRandomContext(true);\n     std::vector<uint256> hashes;\n     Cache set{};\n     size_t bytes = megabytes * (1 << 20);\n@@ -147,7 +147,7 @@ void test_cache_erase(size_t megabytes)\n     for (uint32_t i = 0; i < n_insert; ++i) {\n         uint32_t* ptr = (uint32_t*)hashes[i].begin();\n         for (uint8_t j = 0; j < 8; ++j)\n-            *(ptr++) = insecure_rand.rand32();\n+            *(ptr++) = local_rand_ctx.rand32();\n     }\n     /** We make a copy of the hashes because future optimizations of the\n      * cuckoocache may overwrite the inserted element, so the test is\n@@ -200,7 +200,7 @@ template <typename Cache>\n void test_cache_erase_parallel(size_t megabytes)\n {\n     double load = 1;\n-    insecure_rand = FastRandomContext(true);\n+    local_rand_ctx = FastRandomContext(true);\n     std::vector<uint256> hashes;\n     Cache set{};\n     size_t bytes = megabytes * (1 << 20);\n@@ -210,7 +210,7 @@ void test_cache_erase_parallel(size_t megabytes)\n     for (uint32_t i = 0; i < n_insert; ++i) {\n         uint32_t* ptr = (uint32_t*)hashes[i].begin();\n         for (uint8_t j = 0; j < 8; ++j)\n-            *(ptr++) = insecure_rand.rand32();\n+            *(ptr++) = local_rand_ctx.rand32();\n     }\n     /** We make a copy of the hashes because future optimizations of the\n      * cuckoocache may overwrite the inserted element, so the test is\n@@ -302,7 +302,7 @@ void test_cache_generations()\n     // iterations with non-deterministic values, so it isn't \"overfit\" to the\n     // specific entropy in FastRandomContext(true) and implementation of the\n     // cache.\n-    insecure_rand = FastRandomContext(true);\n+    local_rand_ctx = FastRandomContext(true);\n \n     // block_activity models a chunk of network activity. n_insert elements are\n     // adde to the cache. The first and last n/4 are stored for removal later\n@@ -319,7 +319,7 @@ void test_cache_generations()\n             for (uint32_t i = 0; i < n_insert; ++i) {\n                 uint32_t* ptr = (uint32_t*)inserts[i].begin();\n                 for (uint8_t j = 0; j < 8; ++j)\n-                    *(ptr++) = insecure_rand.rand32();\n+                    *(ptr++) = local_rand_ctx.rand32();\n             }\n             for (uint32_t i = 0; i < n_insert / 4; ++i)\n                 reads.push_back(inserts[i]);"
      }
    ]
  },
  {
    "sha": "124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjRkMTNhNThjZGNkOWY2NmVlZmZjN2U2MjgxZTNlYjEyOWUzMzk4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T22:09:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-05T19:44:44Z"
      },
      "message": "Merge test_random.h into test_bitcoin.h",
      "tree": {
        "sha": "27b689722c38170f22543453fbf06b41fb336846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27b689722c38170f22543453fbf06b41fb336846"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90620d66c91ae91c0d5ce73582eb39c47e35ae98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90620d66c91ae91c0d5ce73582eb39c47e35ae98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90620d66c91ae91c0d5ce73582eb39c47e35ae98"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 20,
      "deletions": 41
    },
    "files": [
      {
        "sha": "44b5f83edba96a87691357a9ce75fe7d7a0a9214",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -74,7 +74,6 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/test_bitcoin_main.cpp \\\n-  test/test_random.h \\\n   test/testutil.cpp \\\n   test/testutil.h \\\n   test/timedata_tests.cpp \\"
      },
      {
        "sha": "6073a9282c1e04ea27fd2b980860052637e22932",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -8,7 +8,6 @@\n #include \"undo.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n #include \"validation.h\"\n #include \"consensus/validation.h\"\n "
      },
      {
        "sha": "4b76cc1021be2b7f662c8d1a52ae8c4f1ab36b3a",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -13,7 +13,6 @@\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "a86c4fa48d50e705391c1cae271e868685ed4389",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -4,7 +4,6 @@\n \n #include \"consensus/merkle.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "e3a4f90aaff77679e17118e6b916d49c5ba2b283",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -10,7 +10,6 @@\n #include \"arith_uint256.h\"\n #include \"version.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "45bcac68371d3c089a494ac3d9204aa487ba27b3",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -9,7 +9,6 @@\n #include \"streams.h\"\n \n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "f796216e5f0874c379ac2848e9b1d3c4789b88b3",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -11,7 +11,6 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\""
      },
      {
        "sha": "9e09533b9be4122859ed84ff18fcb72f6acd0ea1",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -5,7 +5,6 @@\n #include \"chain.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "80d46e04a61b7b7a7a31a6968b345a621be4a563",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -9,11 +9,30 @@\n #include \"fs.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n+#include \"random.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n #include <boost/thread.hpp>\n \n+extern uint256 insecure_rand_seed;\n+extern FastRandomContext insecure_rand_ctx;\n+\n+static inline void seed_insecure_rand(bool fDeterministic = false)\n+{\n+    if (fDeterministic) {\n+        insecure_rand_seed = uint256();\n+    } else {\n+        insecure_rand_seed = GetRandHash();\n+    }\n+    insecure_rand_ctx = FastRandomContext(insecure_rand_seed);\n+}\n+\n+static inline uint32_t insecure_rand(void)\n+{\n+    return insecure_rand_ctx.rand32();\n+}\n+\n /** Basic testing setup.\n  * This just configures logging and chain parameters.\n  */"
      },
      {
        "sha": "318c44df4dc8048f5df3a30716a8d109c26c69e0",
        "filename": "src/test/test_random.h",
        "status": "removed",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90620d66c91ae91c0d5ce73582eb39c47e35ae98/src/test/test_random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90620d66c91ae91c0d5ce73582eb39c47e35ae98/src/test/test_random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_random.h?ref=90620d66c91ae91c0d5ce73582eb39c47e35ae98",
        "patch": "@@ -1,29 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_TEST_RANDOM_H\n-#define BITCOIN_TEST_RANDOM_H\n-\n-#include \"random.h\"\n-\n-extern uint256 insecure_rand_seed;\n-extern FastRandomContext insecure_rand_ctx;\n-\n-static inline void seed_insecure_rand(bool fDeterministic = false)\n-{\n-    if (fDeterministic) {\n-        insecure_rand_seed = uint256();\n-    } else {\n-        insecure_rand_seed = GetRandHash();\n-    }\n-    insecure_rand_ctx = FastRandomContext(insecure_rand_seed);\n-}\n-\n-static inline uint32_t insecure_rand(void)\n-{\n-    return insecure_rand_ctx.rand32();\n-}\n-\n-#endif"
      },
      {
        "sha": "3b3c929850d795c81f303b30b4da3a6c3a720504",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -10,7 +10,6 @@\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "5302af94641447cf8b2b4a62ffedebe06eb5f989",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -5,7 +5,6 @@\n #include \"chain.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"test/test_random.h\"\n #include \"chainparams.h\"\n #include \"validation.h\"\n #include \"consensus/params.h\""
      },
      {
        "sha": "f9c3f3eb1852c69576fc5e0adf251faf916a64c1",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124d13a58cdcd9f66eeffc7e6281e3eb129e3398/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "patch": "@@ -2,9 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"test/test_random.h\"\n-#include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utilstrencodings.h\"\n #include \"wallet/crypter.h\"\n \n #include <vector>"
      }
    ]
  },
  {
    "sha": "1119927df03c94f9306e4d92f55d147b900522fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTE5OTI3ZGYwM2M5NGY5MzA2ZTRkOTJmNTVkMTQ3YjkwMDUyMmZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T22:00:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-05T19:44:44Z"
      },
      "message": "Add various insecure_rand wrappers for tests",
      "tree": {
        "sha": "2216b4ff708b42cecb6de835d5f8843d4d8e2cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2216b4ff708b42cecb6de835d5f8843d4d8e2cde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1119927df03c94f9306e4d92f55d147b900522fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119927df03c94f9306e4d92f55d147b900522fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1119927df03c94f9306e4d92f55d147b900522fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119927df03c94f9306e4d92f55d147b900522fb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124d13a58cdcd9f66eeffc7e6281e3eb129e3398",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/124d13a58cdcd9f66eeffc7e6281e3eb129e3398"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "821ae060b5283a1b15281c6b26f65b2f2426dfcb",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119927df03c94f9306e4d92f55d147b900522fb/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119927df03c94f9306e4d92f55d147b900522fb/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=1119927df03c94f9306e4d92f55d147b900522fb",
        "patch": "@@ -28,10 +28,12 @@ static inline void seed_insecure_rand(bool fDeterministic = false)\n     insecure_rand_ctx = FastRandomContext(insecure_rand_seed);\n }\n \n-static inline uint32_t insecure_rand(void)\n-{\n-    return insecure_rand_ctx.rand32();\n-}\n+static inline uint32_t insecure_rand() { return insecure_rand_ctx.rand32(); }\n+static inline uint256 insecure_rand256() { return insecure_rand_ctx.rand256(); }\n+static inline uint64_t insecure_randbits(int bits) { return insecure_rand_ctx.randbits(bits); }\n+static inline uint64_t insecure_randrange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+static inline bool insecure_randbool() { return insecure_rand_ctx.randbool(); }\n+static inline std::vector<unsigned char> insecure_randbytes(size_t len) { return insecure_rand_ctx.randbytes(len); }\n \n /** Basic testing setup.\n  * This just configures logging and chain parameters."
      }
    ]
  },
  {
    "sha": "efee1db21a652019e0ab18fffc233d91bb7f1816",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmVlMWRiMjFhNjUyMDE5ZTBhYjE4ZmZmYzIzM2Q5MWJiN2YxODE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T22:28:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-05T19:45:44Z"
      },
      "message": "scripted-diff: use insecure_rand256/randrange more\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/\\<GetRandHash(/insecure_rand256(/\" src/test/*_tests.cpp\nsed -i \"s/\\<GetRand(/insecure_randrange(/\" src/test/*_tests.cpp src/test/test_bitcoin.cpp\nsed -i 's/\\<insecure_rand() % \\([0-9]\\+\\)/insecure_randrange(\\1)/g' src/test/*_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "32b2fc3ecb73daa71075df246975fb5e2dae7590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32b2fc3ecb73daa71075df246975fb5e2dae7590"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efee1db21a652019e0ab18fffc233d91bb7f1816",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efee1db21a652019e0ab18fffc233d91bb7f1816",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efee1db21a652019e0ab18fffc233d91bb7f1816",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efee1db21a652019e0ab18fffc233d91bb7f1816/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1119927df03c94f9306e4d92f55d147b900522fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119927df03c94f9306e4d92f55d147b900522fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1119927df03c94f9306e4d92f55d147b900522fb"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 72,
      "deletions": 72
    },
    "files": [
      {
        "sha": "acc7e43b7cc7d7031e7b77d0874205e0202e7718",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n-    it = mapOrphanTransactions.lower_bound(GetRandHash());\n+    it = mapOrphanTransactions.lower_bound(insecure_rand256());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n@@ -148,7 +148,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CMutableTransaction tx;\n         tx.vin.resize(1);\n         tx.vin[0].prevout.n = 0;\n-        tx.vin[0].prevout.hash = GetRandHash();\n+        tx.vin[0].prevout.hash = insecure_rand256();\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;"
      },
      {
        "sha": "3abac85cb1ce9a5713d2fe53aa560ac02cf1d9a2",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -30,16 +30,16 @@ static CBlock BuildBlockTestCase() {\n     block.vtx.resize(3);\n     block.vtx[0] = MakeTransactionRef(tx);\n     block.nVersion = 42;\n-    block.hashPrevBlock = GetRandHash();\n+    block.hashPrevBlock = insecure_rand256();\n     block.nBits = 0x207fffff;\n \n-    tx.vin[0].prevout.hash = GetRandHash();\n+    tx.vin[0].prevout.hash = insecure_rand256();\n     tx.vin[0].prevout.n = 0;\n     block.vtx[1] = MakeTransactionRef(tx);\n \n     tx.vin.resize(10);\n     for (size_t i = 0; i < tx.vin.size(); i++) {\n-        tx.vin[i].prevout.hash = GetRandHash();\n+        tx.vin[i].prevout.hash = insecure_rand256();\n         tx.vin[i].prevout.n = 0;\n     }\n     block.vtx[2] = MakeTransactionRef(tx);\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     block.vtx.resize(1);\n     block.vtx[0] = MakeTransactionRef(std::move(coinbase));\n     block.nVersion = 42;\n-    block.hashPrevBlock = GetRandHash();\n+    block.hashPrevBlock = insecure_rand256();\n     block.nBits = 0x207fffff;\n \n     bool mutated;\n@@ -316,7 +316,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n \n BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {\n     BlockTransactionsRequest req1;\n-    req1.blockhash = GetRandHash();\n+    req1.blockhash = insecure_rand256();\n     req1.indexes.resize(4);\n     req1.indexes[0] = 0;\n     req1.indexes[1] = 1;"
      },
      {
        "sha": "267a3d1377638b3d9b3e51223661a0b656272199",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -463,7 +463,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n \n static std::vector<unsigned char> RandomData()\n {\n-    uint256 r = GetRandHash();\n+    uint256 r = insecure_rand256();\n     return std::vector<unsigned char>(r.begin(), r.end());\n }\n "
      },
      {
        "sha": "8388d8d0ff94bf351b8a6ee88f9d083b2db3cebc",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -160,7 +160,7 @@ void Correct_Queue_range(std::vector<size_t> range)\n         FakeCheckCheckCompletion::n_calls = 0;\n         CCheckQueueControl<FakeCheckCheckCompletion> control(small_queue.get());\n         while (total) {\n-            vChecks.resize(std::min(total, (size_t) GetRand(10)));\n+            vChecks.resize(std::min(total, (size_t) insecure_randrange(10)));\n             total -= vChecks.size();\n             control.Add(vChecks);\n         }\n@@ -204,7 +204,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n {\n     std::vector<size_t> range;\n     range.reserve(100000/1000);\n-    for (size_t i = 2; i < 100000; i += std::max((size_t)1, (size_t)GetRand(std::min((size_t)1000, ((size_t)100000) - i))))\n+    for (size_t i = 2; i < 100000; i += std::max((size_t)1, (size_t)insecure_randrange(std::min((size_t)1000, ((size_t)100000) - i))))\n         range.push_back(i);\n     Correct_Queue_range(range);\n }\n@@ -224,7 +224,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n         CCheckQueueControl<FailingCheck> control(fail_queue.get());\n         size_t remaining = i;\n         while (remaining) {\n-            size_t r = GetRand(10);\n+            size_t r = insecure_randrange(10);\n \n             std::vector<FailingCheck> vChecks;\n             vChecks.reserve(r);\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n     {\n         CCheckQueueControl<UniqueCheck> control(queue.get());\n         while (total) {\n-            size_t r = GetRand(10);\n+            size_t r = insecure_randrange(10);\n             std::vector<UniqueCheck> vChecks;\n             for (size_t k = 0; k < r && total; k++)\n                 vChecks.emplace_back(--total);\n@@ -320,7 +320,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         {\n             CCheckQueueControl<MemoryCheck> control(queue.get());\n             while (total) {\n-                size_t r = GetRand(10);\n+                size_t r = insecure_randrange(10);\n                 std::vector<MemoryCheck> vChecks;\n                 for (size_t k = 0; k < r && total; k++) {\n                     total--;"
      },
      {
        "sha": "d7b3d194d88797b1c60f1117c41e6dd94b7de32e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -43,7 +43,7 @@ class CCoinsViewTest : public CCoinsView\n             return false;\n         }\n         coin = it->second;\n-        if (coin.IsSpent() && insecure_rand() % 2 == 0) {\n+        if (coin.IsSpent() && insecure_randrange(2) == 0) {\n             // Randomly return false in case of an empty entry.\n             return false;\n         }\n@@ -64,7 +64,7 @@ class CCoinsViewTest : public CCoinsView\n             if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n                 // Same optimization used in CCoinsViewDB is to only write dirty entries.\n                 map_[it->first] = it->second.coin;\n-                if (it->second.coin.IsSpent() && insecure_rand() % 3 == 0) {\n+                if (it->second.coin.IsSpent() && insecure_randrange(3) == 0) {\n                     // Randomly delete empty entries on write.\n                     map_.erase(it->first);\n                 }\n@@ -139,22 +139,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     std::vector<uint256> txids;\n     txids.resize(NUM_SIMULATION_ITERATIONS / 8);\n     for (unsigned int i = 0; i < txids.size(); i++) {\n-        txids[i] = GetRandHash();\n+        txids[i] = insecure_rand256();\n     }\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n         // Do a random modification.\n         {\n             uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n             Coin& coin = result[COutPoint(txid, 0)];\n-            const Coin& entry = (insecure_rand() % 500 == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+            const Coin& entry = (insecure_randrange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n \n-            if (insecure_rand() % 5 == 0 || coin.IsSpent()) {\n+            if (insecure_randrange(5) == 0 || coin.IsSpent()) {\n                 Coin newcoin;\n                 newcoin.out.nValue = insecure_rand();\n                 newcoin.nHeight = 1;\n-                if (insecure_rand() % 16 == 0 && coin.IsSpent()) {\n+                if (insecure_randrange(16) == 0 && coin.IsSpent()) {\n                     newcoin.out.scriptPubKey.assign(1 + (insecure_rand() & 0x3F), OP_RETURN);\n                     BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\n                     added_an_unspendable_entry = true;\n@@ -172,15 +172,15 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         }\n \n         // One every 10 iterations, remove a random entry from the cache\n-        if (insecure_rand() % 10 == 0) {\n+        if (insecure_randrange(10) == 0) {\n             COutPoint out(txids[insecure_rand() % txids.size()], 0);\n             int cacheid = insecure_rand() % stack.size();\n             stack[cacheid]->Uncache(out);\n             uncached_an_entry |= !stack[cacheid]->HaveCoinInCache(out);\n         }\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n-        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+        if (insecure_randrange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n             for (auto it = result.begin(); it != result.end(); it++) {\n                 bool have = stack.back()->HaveCoin(it->first);\n                 const Coin& coin = stack.back()->AccessCoin(it->first);\n@@ -198,22 +198,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             }\n         }\n \n-        if (insecure_rand() % 100 == 0) {\n+        if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n-            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+            if (stack.size() > 1 && insecure_randrange(2) == 0) {\n                 unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n-        if (insecure_rand() % 100 == 0) {\n+        if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+            if (stack.size() > 0 && insecure_randrange(2) == 0) {\n                 //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_randrange(2))) {\n                 //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n@@ -253,7 +253,7 @@ UtxoData utxoData;\n \n UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {\n     assert(utxoSet.size());\n-    auto utxoSetIt = utxoSet.lower_bound(COutPoint(GetRandHash(), 0));\n+    auto utxoSetIt = utxoSet.lower_bound(COutPoint(insecure_rand256(), 0));\n     if (utxoSetIt == utxoSet.end()) {\n         utxoSetIt = utxoSet.begin();\n     }\n@@ -301,7 +301,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbase_coins.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n-                if (insecure_rand() % 10 == 0 && coinbase_coins.size()) {\n+                if (insecure_randrange(10) == 0 && coinbase_coins.size()) {\n                     auto utxod = FindRandomFrom(coinbase_coins);\n                     // Reuse the exact same coinbase\n                     tx = std::get<0>(utxod->second);\n@@ -411,7 +411,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n         }\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n-        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+        if (insecure_randrange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n             for (auto it = result.begin(); it != result.end(); it++) {\n                 bool have = stack.back()->HaveCoin(it->first);\n                 const Coin& coin = stack.back()->AccessCoin(it->first);\n@@ -421,31 +421,31 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n         }\n \n         // One every 10 iterations, remove a random entry from the cache\n-        if (utxoset.size() > 1 && insecure_rand() % 30 == 0) {\n+        if (utxoset.size() > 1 && insecure_randrange(30) == 0) {\n             stack[insecure_rand() % stack.size()]->Uncache(FindRandomFrom(utxoset)->first);\n         }\n-        if (disconnected_coins.size() > 1 && insecure_rand() % 30 == 0) {\n+        if (disconnected_coins.size() > 1 && insecure_randrange(30) == 0) {\n             stack[insecure_rand() % stack.size()]->Uncache(FindRandomFrom(disconnected_coins)->first);\n         }\n-        if (duplicate_coins.size() > 1 && insecure_rand() % 30 == 0) {\n+        if (duplicate_coins.size() > 1 && insecure_randrange(30) == 0) {\n             stack[insecure_rand() % stack.size()]->Uncache(FindRandomFrom(duplicate_coins)->first);\n         }\n \n-        if (insecure_rand() % 100 == 0) {\n+        if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n-            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+            if (stack.size() > 1 && insecure_randrange(2) == 0) {\n                 unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n-        if (insecure_rand() % 100 == 0) {\n+        if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+            if (stack.size() > 0 && insecure_randrange(2) == 0) {\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_randrange(2))) {\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();"
      },
      {
        "sha": "de7e590f92e9d2601cd22eb240d6c9b704e4c917",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -31,7 +31,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n-        uint256 in = GetRandHash();\n+        uint256 in = insecure_rand256();\n         uint256 res;\n \n         // Ensure that we're doing real obfuscation when obfuscate=true\n@@ -53,11 +53,11 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n-        uint256 in = GetRandHash();\n+        uint256 in = insecure_rand256();\n         char key2 = 'j';\n-        uint256 in2 = GetRandHash();\n+        uint256 in2 = insecure_rand256();\n         char key3 = 'k';\n-        uint256 in3 = GetRandHash();\n+        uint256 in3 = insecure_rand256();\n \n         uint256 res;\n         CDBBatch batch(dbw);\n@@ -91,10 +91,10 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n \n         // The two keys are intentionally chosen for ordering\n         char key = 'j';\n-        uint256 in = GetRandHash();\n+        uint256 in = insecure_rand256();\n         BOOST_CHECK(dbw.Write(key, in));\n         char key2 = 'k';\n-        uint256 in2 = GetRandHash();\n+        uint256 in2 = insecure_rand256();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n         std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n@@ -132,7 +132,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     // Set up a non-obfuscated wrapper to write some initial data.\n     CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n-    uint256 in = GetRandHash();\n+    uint256 in = insecure_rand256();\n     uint256 res;\n \n     BOOST_CHECK(dbw->Write(key, in));\n@@ -155,7 +155,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n     BOOST_CHECK(is_null_key(dbwrapper_private::GetObfuscateKey(odbw))); // The key should be an empty string\n \n-    uint256 in2 = GetRandHash();\n+    uint256 in2 = insecure_rand256();\n     uint256 res3;\n  \n     // Check that we can write successfully\n@@ -174,7 +174,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     // Set up a non-obfuscated wrapper to write some initial data.\n     CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n-    uint256 in = GetRandHash();\n+    uint256 in = insecure_rand256();\n     uint256 res;\n \n     BOOST_CHECK(dbw->Write(key, in));\n@@ -193,7 +193,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     BOOST_CHECK(!odbw.Read(key, res2));\n     BOOST_CHECK(!is_null_key(dbwrapper_private::GetObfuscateKey(odbw)));\n \n-    uint256 in2 = GetRandHash();\n+    uint256 in2 = insecure_rand256();\n     uint256 res3;\n  \n     // Check that we can write successfully"
      },
      {
        "sha": "4e88a0ea5118dad6ee563da964d94e7d281d702f",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(siphash)\n     for (int i = 0; i < 16; ++i) {\n         uint64_t k1 = ctx.rand64();\n         uint64_t k2 = ctx.rand64();\n-        uint256 x = GetRandHash();\n+        uint256 x = insecure_rand256();\n         uint32_t n = ctx.rand32();\n         uint8_t nb[4];\n         WriteLE32(nb, n);"
      },
      {
        "sha": "785864520d42e847e824cf464b4220a52293e363",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n {\n     for (int i = 0; i < 32; i++) {\n         // Try 32 block sizes: all sizes from 0 to 16 inclusive, and then 15 random sizes.\n-        int ntx = (i <= 16) ? i : 17 + (insecure_rand() % 4000);\n+        int ntx = (i <= 16) ? i : 17 + (insecure_randrange(4000));\n         // Try up to 3 mutations.\n         for (int mutate = 0; mutate <= 3; mutate++) {\n             int duplicate1 = mutate >= 1 ? 1 << ctz(ntx) : 0; // The last how many transactions to duplicate first."
      },
      {
        "sha": "02bc930034bb788855e75015ff74317e9deba581",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -372,7 +372,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     while (chainActive.Tip()->nHeight < 209999) {\n         CBlockIndex* prev = chainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n-        next->phashBlock = new uint256(GetRandHash());\n+        next->phashBlock = new uint256(insecure_rand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n@@ -384,7 +384,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     while (chainActive.Tip()->nHeight < 210000) {\n         CBlockIndex* prev = chainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n-        next->phashBlock = new uint256(GetRandHash());\n+        next->phashBlock = new uint256(insecure_rand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;"
      },
      {
        "sha": "3572505af3936bce5e8ae8e784b82c2d511f830b",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -22,7 +22,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n         unsigned int n = insecure_rand() % vHash.size();\n-        int bit = insecure_rand() % 256;\n+        int bit = insecure_randrange(256);\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };"
      },
      {
        "sha": "d3c8a521d8c2fe5db239277c3d54cc592e8705bd",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -74,9 +74,9 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n     }\n \n     for (int j = 0; j < 1000; j++) {\n-        CBlockIndex *p1 = &blocks[GetRand(10000)];\n-        CBlockIndex *p2 = &blocks[GetRand(10000)];\n-        CBlockIndex *p3 = &blocks[GetRand(10000)];\n+        CBlockIndex *p1 = &blocks[insecure_randrange(10000)];\n+        CBlockIndex *p2 = &blocks[insecure_randrange(10000)];\n+        CBlockIndex *p3 = &blocks[insecure_randrange(10000)];\n \n         int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, chainParams->GetConsensus());\n         BOOST_CHECK_EQUAL(tdiff, p1->GetBlockTime() - p2->GetBlockTime());"
      },
      {
        "sha": "28f72a9b91ad29ee016f7cc6f0213a868da1cfb6",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -206,14 +206,14 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.erase(insecure_rand() % test.size());\n             }\n             if (((r >> 4) % 8) == 2) {\n-                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_rand() % 5) - 2));\n+                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_randrange(5)) - 2));\n                 test.resize(new_size);\n             }\n             if (((r >> 7) % 8) == 3) {\n-                test.insert(insecure_rand() % (test.size() + 1), 1 + (insecure_rand() % 2), insecure_rand());\n+                test.insert(insecure_rand() % (test.size() + 1), 1 + (insecure_randrange(2)), insecure_rand());\n             }\n             if (((r >> 10) % 8) == 4) {\n-                int del = std::min<int>(test.size(), 1 + (insecure_rand() % 2));\n+                int del = std::min<int>(test.size(), 1 + (insecure_randrange(2)));\n                 int beg = insecure_rand() % (test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n@@ -225,20 +225,20 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             }\n             if (((r >> 21) % 32) == 7) {\n                 int values[4];\n-                int num = 1 + (insecure_rand() % 4);\n+                int num = 1 + (insecure_randrange(4));\n                 for (int k = 0; k < num; k++) {\n                     values[k] = insecure_rand();\n                 }\n                 test.insert_range(insecure_rand() % (test.size() + 1), values, values + num);\n             }\n             if (((r >> 26) % 32) == 8) {\n-                int del = std::min<int>(test.size(), 1 + (insecure_rand() % 4));\n+                int del = std::min<int>(test.size(), 1 + (insecure_randrange(4)));\n                 int beg = insecure_rand() % (test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n             r = insecure_rand();\n             if (r % 32 == 9) {\n-                test.reserve(insecure_rand() % 32);\n+                test.reserve(insecure_randrange(32));\n             }\n             if ((r >> 5) % 64 == 10) {\n                 test.shrink_to_fit();\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.clear();\n             }\n             if (((r >> 21) % 512) == 12) {\n-                test.assign(insecure_rand() % 32, insecure_rand());\n+                test.assign(insecure_randrange(32), insecure_rand());\n             }\n             if (((r >> 15) % 8) == 3) {\n                 test.swap();"
      },
      {
        "sha": "564fc6b94419aac26695328fbc0aa77dee061aac",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -89,7 +89,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n void static RandomScript(CScript &script) {\n     static const opcodetype oplist[] = {OP_FALSE, OP_1, OP_2, OP_3, OP_CHECKSIG, OP_IF, OP_VERIF, OP_RETURN, OP_CODESEPARATOR};\n     script = CScript();\n-    int ops = (insecure_rand() % 10);\n+    int ops = (insecure_randrange(10));\n     for (int i=0; i<ops; i++)\n         script << oplist[insecure_rand() % (sizeof(oplist)/sizeof(oplist[0]))];\n }\n@@ -98,21 +98,21 @@ void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     tx.nVersion = insecure_rand();\n     tx.vin.clear();\n     tx.vout.clear();\n-    tx.nLockTime = (insecure_rand() % 2) ? insecure_rand() : 0;\n-    int ins = (insecure_rand() % 4) + 1;\n-    int outs = fSingle ? ins : (insecure_rand() % 4) + 1;\n+    tx.nLockTime = (insecure_randrange(2)) ? insecure_rand() : 0;\n+    int ins = (insecure_randrange(4)) + 1;\n+    int outs = fSingle ? ins : (insecure_randrange(4)) + 1;\n     for (int in = 0; in < ins; in++) {\n         tx.vin.push_back(CTxIn());\n         CTxIn &txin = tx.vin.back();\n-        txin.prevout.hash = GetRandHash();\n-        txin.prevout.n = insecure_rand() % 4;\n+        txin.prevout.hash = insecure_rand256();\n+        txin.prevout.n = insecure_randrange(4);\n         RandomScript(txin.scriptSig);\n-        txin.nSequence = (insecure_rand() % 2) ? insecure_rand() : (unsigned int)-1;\n+        txin.nSequence = (insecure_randrange(2)) ? insecure_rand() : (unsigned int)-1;\n     }\n     for (int out = 0; out < outs; out++) {\n         tx.vout.push_back(CTxOut());\n         CTxOut &txout = tx.vout.back();\n-        txout.nValue = insecure_rand() % 100000000;\n+        txout.nValue = insecure_randrange(100000000);\n         RandomScript(txout.scriptPubKey);\n     }\n }"
      },
      {
        "sha": "00ad5c1aa8c7ff392aae74ecd3ad33f2135b5efb",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n \n     // Test 100 random starting points for locators.\n     for (int n=0; n<100; n++) {\n-        int r = insecure_rand() % 150000;\n+        int r = insecure_randrange(150000);\n         CBlockIndex* tip = (r < 100000) ? &vBlocksMain[r] : &vBlocksSide[r - 100000];\n         CBlockLocator locator = chain.GetLocator(tip);\n "
      },
      {
        "sha": "afc151b80173a2fa95484c0ebffdf040509f4934",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efee1db21a652019e0ab18fffc233d91bb7f1816/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=efee1db21a652019e0ab18fffc233d91bb7f1816",
        "patch": "@@ -59,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n+        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(insecure_randrange(100000)));\n         fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);"
      }
    ]
  },
  {
    "sha": "3ecabae36364e905e7821fba3e60aa7f8418de6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWNhYmFlMzYzNjRlOTA1ZTc4MjFmYmEzZTYwYWE3Zjg0MThkZTZj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T18:34:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T18:34:55Z"
      },
      "message": "Replace more rand() % NUM by randranges",
      "tree": {
        "sha": "04b22d1cf440fcedacdea019f6421c629d766b44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04b22d1cf440fcedacdea019f6421c629d766b44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ecabae36364e905e7821fba3e60aa7f8418de6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ecabae36364e905e7821fba3e60aa7f8418de6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ecabae36364e905e7821fba3e60aa7f8418de6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ecabae36364e905e7821fba3e60aa7f8418de6c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efee1db21a652019e0ab18fffc233d91bb7f1816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efee1db21a652019e0ab18fffc233d91bb7f1816",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efee1db21a652019e0ab18fffc233d91bb7f1816"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c923f8df284c42155c9f3ca96487b0e0f0ee3264",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n         // Do a random modification.\n         {\n-            uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n+            uint256 txid = txids[insecure_randrange(txids.size())]; // txid we're going to modify in this iteration.\n             Coin& coin = result[COutPoint(txid, 0)];\n             const Coin& entry = (insecure_randrange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n@@ -201,7 +201,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && insecure_randrange(2) == 0) {\n-                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                unsigned int flushIndex = insecure_randrange(stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n@@ -434,7 +434,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n         if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && insecure_randrange(2) == 0) {\n-                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                unsigned int flushIndex = insecure_randrange(stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }"
      },
      {
        "sha": "ab3e6fc1fd3216701312071d2afe25455a461b80",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -38,7 +38,7 @@ void TestVector(const Hasher &h, const In &in, const Out &out) {\n         Hasher hasher(h);\n         size_t pos = 0;\n         while (pos < in.size()) {\n-            size_t len = insecure_rand() % ((in.size() - pos + 1) / 2 + 1);\n+            size_t len = insecure_randrange((in.size() - pos + 1) / 2 + 1);\n             hasher.Write((unsigned char*)&in[pos], len);\n             pos += len;\n             if (pos > 0 && pos + 2 * out.size() > in.size() && pos < in.size()) {"
      },
      {
        "sha": "3108da85969d6da03dc2e6e22df9c825d26520a7",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -120,7 +120,7 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n                     // If ntx <= 16, try all branches. Otherwise, try 16 random ones.\n                     int mtx = loop;\n                     if (ntx > 16) {\n-                        mtx = insecure_rand() % ntx;\n+                        mtx = insecure_randrange(ntx);\n                     }\n                     std::vector<uint256> newBranch = BlockMerkleBranch(block, mtx);\n                     std::vector<uint256> oldBranch = BlockGetMerkleBranch(block, merkleTree, mtx);"
      },
      {
        "sha": "d07a9f3959ee17a8a8c72463c8147fa40cae8ec8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -21,7 +21,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n public:\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n-        unsigned int n = insecure_rand() % vHash.size();\n+        unsigned int n = insecure_randrange(vHash.size());\n         int bit = insecure_randrange(256);\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }"
      },
      {
        "sha": "d951a6c3c2b610e1001185ac5482345ba742a452",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -200,21 +200,21 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n         for (int i = 0; i < 2048; i++) {\n             int r = insecure_rand();\n             if ((r % 4) == 0) {\n-                test.insert(insecure_rand() % (test.size() + 1), insecure_rand());\n+                test.insert(insecure_randrange(test.size() + 1), insecure_rand());\n             }\n             if (test.size() > 0 && ((r >> 2) % 4) == 1) {\n-                test.erase(insecure_rand() % test.size());\n+                test.erase(insecure_randrange(test.size()));\n             }\n             if (((r >> 4) % 8) == 2) {\n                 int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_randrange(5)) - 2));\n                 test.resize(new_size);\n             }\n             if (((r >> 7) % 8) == 3) {\n-                test.insert(insecure_rand() % (test.size() + 1), 1 + (insecure_randrange(2)), insecure_rand());\n+                test.insert(insecure_randrange(test.size() + 1), 1 + insecure_randrange(2), insecure_rand());\n             }\n             if (((r >> 10) % 8) == 4) {\n                 int del = std::min<int>(test.size(), 1 + (insecure_randrange(2)));\n-                int beg = insecure_rand() % (test.size() + 1 - del);\n+                int beg = insecure_randrange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n             if (((r >> 13) % 16) == 5) {\n@@ -229,11 +229,11 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 for (int k = 0; k < num; k++) {\n                     values[k] = insecure_rand();\n                 }\n-                test.insert_range(insecure_rand() % (test.size() + 1), values, values + num);\n+                test.insert_range(insecure_randrange(test.size() + 1), values, values + num);\n             }\n             if (((r >> 26) % 32) == 8) {\n                 int del = std::min<int>(test.size(), 1 + (insecure_randrange(4)));\n-                int beg = insecure_rand() % (test.size() + 1 - del);\n+                int beg = insecure_randrange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n             r = insecure_rand();\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.shrink_to_fit();\n             }\n             if (test.size() > 0) {\n-                test.update(insecure_rand() % test.size(), insecure_rand());\n+                test.update(insecure_randrange(test.size()), insecure_rand());\n             }\n             if (((r >> 11) % 1024) == 11) {\n                 test.clear();"
      },
      {
        "sha": "805c09c1a41ee4fba60cc6ecbbf927dde7da220c",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -91,7 +91,7 @@ void static RandomScript(CScript &script) {\n     script = CScript();\n     int ops = (insecure_randrange(10));\n     for (int i=0; i<ops; i++)\n-        script << oplist[insecure_rand() % (sizeof(oplist)/sizeof(oplist[0]))];\n+        script << oplist[insecure_randrange(sizeof(oplist)/sizeof(oplist[0]))];\n }\n \n void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n@@ -138,7 +138,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n         RandomTransaction(txTo, (nHashType & 0x1f) == SIGHASH_SINGLE);\n         CScript scriptCode;\n         RandomScript(scriptCode);\n-        int nIn = insecure_rand() % txTo.vin.size();\n+        int nIn = insecure_randrange(txTo.vin.size());\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);"
      },
      {
        "sha": "36f29a486b914811bcab618c4e6da3641a3454d4",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ecabae36364e905e7821fba3e60aa7f8418de6c/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "patch": "@@ -34,8 +34,8 @@ BOOST_AUTO_TEST_CASE(skiplist_test)\n     }\n \n     for (int i=0; i < 1000; i++) {\n-        int from = insecure_rand() % (SKIPLIST_LENGTH - 1);\n-        int to = insecure_rand() % (from + 1);\n+        int from = insecure_randrange(SKIPLIST_LENGTH - 1);\n+        int to = insecure_randrange(from + 1);\n \n         BOOST_CHECK(vIndex[SKIPLIST_LENGTH - 1].GetAncestor(from) == &vIndex[from]);\n         BOOST_CHECK(vIndex[from].GetAncestor(to) == &vIndex[to]);\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n         } else {\n             // randomly choose something in the range [MTP, MTP*2]\n             int64_t medianTimePast = vBlocksMain[i].GetMedianTimePast();\n-            int r = insecure_rand() % medianTimePast;\n+            int r = insecure_randrange(medianTimePast);\n             vBlocksMain[i].nTime = r + medianTimePast;\n             vBlocksMain[i].nTimeMax = std::max(vBlocksMain[i].nTime, vBlocksMain[i-1].nTimeMax);\n         }\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n     // Verify that FindEarliestAtLeast is correct.\n     for (unsigned int i=0; i<10000; ++i) {\n         // Pick a random element in vBlocksMain.\n-        int r = insecure_rand() % vBlocksMain.size();\n+        int r = insecure_randrange(vBlocksMain.size());\n         int64_t test_time = vBlocksMain[r].nTime;\n         CBlockIndex *ret = chain.FindEarliestAtLeast(test_time);\n         BOOST_CHECK(ret->nTimeMax >= test_time);"
      }
    ]
  },
  {
    "sha": "5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjBiMDRlZWRjNWJiZGI5MzE5YzlmMWYxYTZjNTk5MzM3ZjViYmUz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T18:34:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T18:35:13Z"
      },
      "message": "Replace rand() & ((1 << N) - 1) with randbits(N)",
      "tree": {
        "sha": "793fc19101574c742e5066481014a9f4738d08bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/793fc19101574c742e5066481014a9f4738d08bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ecabae36364e905e7821fba3e60aa7f8418de6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ecabae36364e905e7821fba3e60aa7f8418de6c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "27d8db8b9e3ee50e6aa6ea744b212b52e28fabbc",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
        "patch": "@@ -155,11 +155,11 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                 newcoin.out.nValue = insecure_rand();\n                 newcoin.nHeight = 1;\n                 if (insecure_randrange(16) == 0 && coin.IsSpent()) {\n-                    newcoin.out.scriptPubKey.assign(1 + (insecure_rand() & 0x3F), OP_RETURN);\n+                    newcoin.out.scriptPubKey.assign(1 + insecure_randbits(6), OP_RETURN);\n                     BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\n                     added_an_unspendable_entry = true;\n                 } else {\n-                    newcoin.out.scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n+                    newcoin.out.scriptPubKey.assign(insecure_randbits(6), 0); // Random sizes so we can test memory usage accounting\n                     (coin.IsSpent() ? added_an_entry : updated_an_entry) = true;\n                     coin = newcoin;\n                 }"
      },
      {
        "sha": "32086ead5e8d9a60889ada15564405979352719c",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
        "patch": "@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             std::vector<bool> vMatch(nTx, false);\n             std::vector<uint256> vMatchTxid1;\n             for (unsigned int j=0; j<nTx; j++) {\n-                bool fInclude = (insecure_rand() & ((1 << (att/2)) - 1)) == 0;\n+                bool fInclude = insecure_randbits(att / 2) == 0;\n                 vMatch[j] = fInclude;\n                 if (fInclude)\n                     vMatchTxid1.push_back(vTxid[j]);"
      },
      {
        "sha": "7af29f2aa615ec08a371518641f3b1a20d2c5967",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
        "patch": "@@ -80,7 +80,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestStateSinceHeight(int height) {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+            if (insecure_randbits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? NULL : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n             }\n         }\n@@ -90,7 +90,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestDefined() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+            if (insecure_randbits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_DEFINED, strprintf(\"Test %i for DEFINED\", num));\n             }\n         }\n@@ -100,7 +100,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestStarted() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+            if (insecure_randbits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_STARTED, strprintf(\"Test %i for STARTED\", num));\n             }\n         }\n@@ -110,7 +110,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestLockedIn() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+            if (insecure_randbits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n             }\n         }\n@@ -120,7 +120,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestActive() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+            if (insecure_randbits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n             }\n         }\n@@ -130,7 +130,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestFailed() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+            if (insecure_randbits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_FAILED, strprintf(\"Test %i for FAILED\", num));\n             }\n         }"
      }
    ]
  },
  {
    "sha": "2ada67852174a76753080d65a7adbe27241a9caa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWRhNjc4NTIxNzRhNzY3NTMwODBkNjVhN2FkYmUyNzI0MWE5Y2Fh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T23:14:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T18:35:16Z"
      },
      "message": "Use randbits instead of ad-hoc emulation in prevector tests",
      "tree": {
        "sha": "37bca3fc3117f89912559ddb755ef2c23261e340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37bca3fc3117f89912559ddb755ef2c23261e340"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ada67852174a76753080d65a7adbe27241a9caa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ada67852174a76753080d65a7adbe27241a9caa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ada67852174a76753080d65a7adbe27241a9caa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ada67852174a76753080d65a7adbe27241a9caa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0b04eedc5bbdb9319c9f1f1a6c599337f5bbe3"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "674221e00930e003755fc2b2c3c14c8a425d3e7e",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ada67852174a76753080d65a7adbe27241a9caa/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ada67852174a76753080d65a7adbe27241a9caa/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=2ada67852174a76753080d65a7adbe27241a9caa",
        "patch": "@@ -198,67 +198,65 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n     for (int j = 0; j < 64; j++) {\n         prevector_tester<8, int> test;\n         for (int i = 0; i < 2048; i++) {\n-            int r = insecure_rand();\n-            if ((r % 4) == 0) {\n+            if (insecure_randbits(2) == 0) {\n                 test.insert(insecure_randrange(test.size() + 1), insecure_rand());\n             }\n-            if (test.size() > 0 && ((r >> 2) % 4) == 1) {\n+            if (test.size() > 0 && insecure_randbits(2) == 1) {\n                 test.erase(insecure_randrange(test.size()));\n             }\n-            if (((r >> 4) % 8) == 2) {\n+            if (insecure_randbits(3) == 2) {\n                 int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_randrange(5)) - 2));\n                 test.resize(new_size);\n             }\n-            if (((r >> 7) % 8) == 3) {\n+            if (insecure_randbits(3) == 3) {\n                 test.insert(insecure_randrange(test.size() + 1), 1 + insecure_randrange(2), insecure_rand());\n             }\n-            if (((r >> 10) % 8) == 4) {\n+            if (insecure_randbits(3) == 4) {\n                 int del = std::min<int>(test.size(), 1 + (insecure_randrange(2)));\n                 int beg = insecure_randrange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n-            if (((r >> 13) % 16) == 5) {\n+            if (insecure_randbits(4) == 5) {\n                 test.push_back(insecure_rand());\n             }\n-            if (test.size() > 0 && ((r >> 17) % 16) == 6) {\n+            if (test.size() > 0 && insecure_randbits(4) == 6) {\n                 test.pop_back();\n             }\n-            if (((r >> 21) % 32) == 7) {\n+            if (insecure_randbits(5) == 7) {\n                 int values[4];\n                 int num = 1 + (insecure_randrange(4));\n                 for (int k = 0; k < num; k++) {\n                     values[k] = insecure_rand();\n                 }\n                 test.insert_range(insecure_randrange(test.size() + 1), values, values + num);\n             }\n-            if (((r >> 26) % 32) == 8) {\n+            if (insecure_randbits(5) == 8) {\n                 int del = std::min<int>(test.size(), 1 + (insecure_randrange(4)));\n                 int beg = insecure_randrange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n-            r = insecure_rand();\n-            if (r % 32 == 9) {\n+            if (insecure_randbits(5) == 9) {\n                 test.reserve(insecure_randrange(32));\n             }\n-            if ((r >> 5) % 64 == 10) {\n+            if (insecure_randbits(6) == 10) {\n                 test.shrink_to_fit();\n             }\n             if (test.size() > 0) {\n                 test.update(insecure_randrange(test.size()), insecure_rand());\n             }\n-            if (((r >> 11) % 1024) == 11) {\n+            if (insecure_randbits(10) == 11) {\n                 test.clear();\n             }\n-            if (((r >> 21) % 512) == 12) {\n+            if (insecure_randbits(9) == 12) {\n                 test.assign(insecure_randrange(32), insecure_rand());\n             }\n-            if (((r >> 15) % 8) == 3) {\n+            if (insecure_randbits(3) == 3) {\n                 test.swap();\n             }\n-            if (((r >> 15) % 16) == 8) {\n+            if (insecure_randbits(4) == 8) {\n                 test.copy();\n             }\n-            if (((r >> 15) % 32) == 18) {\n+            if (insecure_randbits(5) == 18) {\n                 test.move();\n             }\n         }"
      }
    ]
  },
  {
    "sha": "2fcd9cc86bfce944e3312e9a24685403250f3bdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmNkOWNjODZiZmNlOTQ0ZTMzMTJlOWEyNDY4NTQwMzI1MGYzYmRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T23:18:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T18:35:16Z"
      },
      "message": "scripted-diff: Use randbits/bool instead of randrange where possible\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/insecure_randbits(1)/insecure_randbool()/g' src/test/*_tests.cpp\nsed -i 's/insecure_randrange(2)/insecure_randbool()/g' src/test/*_tests.cpp\nsed -i 's/insecure_randrange(4)/insecure_randbits(2)/g' src/test/*_tests.cpp\nsed -i 's/insecure_randrange(32)/insecure_randbits(5)/g' src/test/*_tests.cpp\nsed -i 's/insecure_randrange(256)/insecure_randbits(8)/g' src/test/*_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "7aafcf14463ac2d6eabbc732c252d125a1b9ed1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aafcf14463ac2d6eabbc732c252d125a1b9ed1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fcd9cc86bfce944e3312e9a24685403250f3bdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcd9cc86bfce944e3312e9a24685403250f3bdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fcd9cc86bfce944e3312e9a24685403250f3bdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcd9cc86bfce944e3312e9a24685403250f3bdc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ada67852174a76753080d65a7adbe27241a9caa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ada67852174a76753080d65a7adbe27241a9caa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ada67852174a76753080d65a7adbe27241a9caa"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "21ee7e6bdf08328f94b7c61b5852fe04d6678899",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=2fcd9cc86bfce944e3312e9a24685403250f3bdc",
        "patch": "@@ -43,7 +43,7 @@ class CCoinsViewTest : public CCoinsView\n             return false;\n         }\n         coin = it->second;\n-        if (coin.IsSpent() && insecure_randrange(2) == 0) {\n+        if (coin.IsSpent() && insecure_randbool() == 0) {\n             // Randomly return false in case of an empty entry.\n             return false;\n         }\n@@ -200,20 +200,20 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n \n         if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n-            if (stack.size() > 1 && insecure_randrange(2) == 0) {\n+            if (stack.size() > 1 && insecure_randbool() == 0) {\n                 unsigned int flushIndex = insecure_randrange(stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n         if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && insecure_randrange(2) == 0) {\n+            if (stack.size() > 0 && insecure_randbool() == 0) {\n                 //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && insecure_randrange(2))) {\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_randbool())) {\n                 //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n@@ -433,19 +433,19 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n \n         if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n-            if (stack.size() > 1 && insecure_randrange(2) == 0) {\n+            if (stack.size() > 1 && insecure_randbool() == 0) {\n                 unsigned int flushIndex = insecure_randrange(stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n         if (insecure_randrange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && insecure_randrange(2) == 0) {\n+            if (stack.size() > 0 && insecure_randbool() == 0) {\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && insecure_randrange(2))) {\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_randbool())) {\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();"
      },
      {
        "sha": "40893741577addb3a5c6712190acc7a067d6213a",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=2fcd9cc86bfce944e3312e9a24685403250f3bdc",
        "patch": "@@ -22,7 +22,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n         unsigned int n = insecure_randrange(vHash.size());\n-        int bit = insecure_randrange(256);\n+        int bit = insecure_randbits(8);\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };"
      },
      {
        "sha": "5d9d18726822a4d282fbbbdd615ed6a8e81b122b",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=2fcd9cc86bfce944e3312e9a24685403250f3bdc",
        "patch": "@@ -209,10 +209,10 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.resize(new_size);\n             }\n             if (insecure_randbits(3) == 3) {\n-                test.insert(insecure_randrange(test.size() + 1), 1 + insecure_randrange(2), insecure_rand());\n+                test.insert(insecure_randrange(test.size() + 1), 1 + insecure_randbool(), insecure_rand());\n             }\n             if (insecure_randbits(3) == 4) {\n-                int del = std::min<int>(test.size(), 1 + (insecure_randrange(2)));\n+                int del = std::min<int>(test.size(), 1 + (insecure_randbool()));\n                 int beg = insecure_randrange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n@@ -224,19 +224,19 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             }\n             if (insecure_randbits(5) == 7) {\n                 int values[4];\n-                int num = 1 + (insecure_randrange(4));\n+                int num = 1 + (insecure_randbits(2));\n                 for (int k = 0; k < num; k++) {\n                     values[k] = insecure_rand();\n                 }\n                 test.insert_range(insecure_randrange(test.size() + 1), values, values + num);\n             }\n             if (insecure_randbits(5) == 8) {\n-                int del = std::min<int>(test.size(), 1 + (insecure_randrange(4)));\n+                int del = std::min<int>(test.size(), 1 + (insecure_randbits(2)));\n                 int beg = insecure_randrange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n             if (insecure_randbits(5) == 9) {\n-                test.reserve(insecure_randrange(32));\n+                test.reserve(insecure_randbits(5));\n             }\n             if (insecure_randbits(6) == 10) {\n                 test.shrink_to_fit();\n@@ -248,7 +248,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.clear();\n             }\n             if (insecure_randbits(9) == 12) {\n-                test.assign(insecure_randrange(32), insecure_rand());\n+                test.assign(insecure_randbits(5), insecure_rand());\n             }\n             if (insecure_randbits(3) == 3) {\n                 test.swap();"
      },
      {
        "sha": "b8d6bdd730de0a9ce48083e6c336f75fc72df186",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fcd9cc86bfce944e3312e9a24685403250f3bdc/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=2fcd9cc86bfce944e3312e9a24685403250f3bdc",
        "patch": "@@ -98,16 +98,16 @@ void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n     tx.nVersion = insecure_rand();\n     tx.vin.clear();\n     tx.vout.clear();\n-    tx.nLockTime = (insecure_randrange(2)) ? insecure_rand() : 0;\n-    int ins = (insecure_randrange(4)) + 1;\n-    int outs = fSingle ? ins : (insecure_randrange(4)) + 1;\n+    tx.nLockTime = (insecure_randbool()) ? insecure_rand() : 0;\n+    int ins = (insecure_randbits(2)) + 1;\n+    int outs = fSingle ? ins : (insecure_randbits(2)) + 1;\n     for (int in = 0; in < ins; in++) {\n         tx.vin.push_back(CTxIn());\n         CTxIn &txin = tx.vin.back();\n         txin.prevout.hash = insecure_rand256();\n-        txin.prevout.n = insecure_randrange(4);\n+        txin.prevout.n = insecure_randbits(2);\n         RandomScript(txin.scriptSig);\n-        txin.nSequence = (insecure_randrange(2)) ? insecure_rand() : (unsigned int)-1;\n+        txin.nSequence = (insecure_randbool()) ? insecure_rand() : (unsigned int)-1;\n     }\n     for (int out = 0; out < outs; out++) {\n         tx.vout.push_back(CTxOut());"
      }
    ]
  },
  {
    "sha": "e945848582160b23fa0bc6f797e2bd8ac676ee0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTQ1ODQ4NTgyMTYwYjIzZmEwYmM2Zjc5N2UyYmQ4YWM2NzZlZTBl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T19:03:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-07T19:08:39Z"
      },
      "message": "scripted-diff: Use new naming style for insecure_rand* functions\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<insecure_randbits(/InsecureRandBits(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\nsed -i 's/\\<insecure_randbool(/InsecureRandBool(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\nsed -i 's/\\<insecure_randrange(/InsecureRandRange(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\nsed -i 's/\\<insecure_randbytes(/InsecureRandBytes(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\nsed -i 's/\\<insecure_rand256(/InsecureRand256(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\nsed -i 's/\\<insecure_rand(/InsecureRand32(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\nsed -i 's/\\<seed_insecure_rand(/SeedInsecureRand(/g' src/test/*.cpp src/test/*.h src/wallet/test/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "8f21846a56c3ee99978f9a64514ae8be2fa378ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f21846a56c3ee99978f9a64514ae8be2fa378ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e945848582160b23fa0bc6f797e2bd8ac676ee0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e945848582160b23fa0bc6f797e2bd8ac676ee0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e945848582160b23fa0bc6f797e2bd8ac676ee0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e945848582160b23fa0bc6f797e2bd8ac676ee0e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fcd9cc86bfce944e3312e9a24685403250f3bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcd9cc86bfce944e3312e9a24685403250f3bdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fcd9cc86bfce944e3312e9a24685403250f3bdc"
      }
    ],
    "stats": {
      "total": 284,
      "additions": 142,
      "deletions": 142
    },
    "files": [
      {
        "sha": "a7a3a1bdf04c2a9b73764db381122e29d61f1b6f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n-    it = mapOrphanTransactions.lower_bound(insecure_rand256());\n+    it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n     return it->second.tx;\n@@ -148,7 +148,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CMutableTransaction tx;\n         tx.vin.resize(1);\n         tx.vin[0].prevout.n = 0;\n-        tx.vin[0].prevout.hash = insecure_rand256();\n+        tx.vin[0].prevout.hash = InsecureRand256();\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;"
      },
      {
        "sha": "10a40fea3cb179eb1a41455c5fbbdc7b238e5fc1",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -30,16 +30,16 @@ static CBlock BuildBlockTestCase() {\n     block.vtx.resize(3);\n     block.vtx[0] = MakeTransactionRef(tx);\n     block.nVersion = 42;\n-    block.hashPrevBlock = insecure_rand256();\n+    block.hashPrevBlock = InsecureRand256();\n     block.nBits = 0x207fffff;\n \n-    tx.vin[0].prevout.hash = insecure_rand256();\n+    tx.vin[0].prevout.hash = InsecureRand256();\n     tx.vin[0].prevout.n = 0;\n     block.vtx[1] = MakeTransactionRef(tx);\n \n     tx.vin.resize(10);\n     for (size_t i = 0; i < tx.vin.size(); i++) {\n-        tx.vin[i].prevout.hash = insecure_rand256();\n+        tx.vin[i].prevout.hash = InsecureRand256();\n         tx.vin[i].prevout.n = 0;\n     }\n     block.vtx[2] = MakeTransactionRef(tx);\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     block.vtx.resize(1);\n     block.vtx[0] = MakeTransactionRef(std::move(coinbase));\n     block.nVersion = 42;\n-    block.hashPrevBlock = insecure_rand256();\n+    block.hashPrevBlock = InsecureRand256();\n     block.nBits = 0x207fffff;\n \n     bool mutated;\n@@ -316,7 +316,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n \n BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {\n     BlockTransactionsRequest req1;\n-    req1.blockhash = insecure_rand256();\n+    req1.blockhash = InsecureRand256();\n     req1.indexes.resize(4);\n     req1.indexes[0] = 0;\n     req1.indexes[1] = 1;"
      },
      {
        "sha": "1788ee13269cfd3ef92417c55abacf80aa044215",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -463,7 +463,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n \n static std::vector<unsigned char> RandomData()\n {\n-    uint256 r = insecure_rand256();\n+    uint256 r = InsecureRand256();\n     return std::vector<unsigned char>(r.begin(), r.end());\n }\n "
      },
      {
        "sha": "bf999eb5248668aa487b07a26598de0edd886a51",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -160,7 +160,7 @@ void Correct_Queue_range(std::vector<size_t> range)\n         FakeCheckCheckCompletion::n_calls = 0;\n         CCheckQueueControl<FakeCheckCheckCompletion> control(small_queue.get());\n         while (total) {\n-            vChecks.resize(std::min(total, (size_t) insecure_randrange(10)));\n+            vChecks.resize(std::min(total, (size_t) InsecureRandRange(10)));\n             total -= vChecks.size();\n             control.Add(vChecks);\n         }\n@@ -204,7 +204,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n {\n     std::vector<size_t> range;\n     range.reserve(100000/1000);\n-    for (size_t i = 2; i < 100000; i += std::max((size_t)1, (size_t)insecure_randrange(std::min((size_t)1000, ((size_t)100000) - i))))\n+    for (size_t i = 2; i < 100000; i += std::max((size_t)1, (size_t)InsecureRandRange(std::min((size_t)1000, ((size_t)100000) - i))))\n         range.push_back(i);\n     Correct_Queue_range(range);\n }\n@@ -224,7 +224,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n         CCheckQueueControl<FailingCheck> control(fail_queue.get());\n         size_t remaining = i;\n         while (remaining) {\n-            size_t r = insecure_randrange(10);\n+            size_t r = InsecureRandRange(10);\n \n             std::vector<FailingCheck> vChecks;\n             vChecks.reserve(r);\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n     {\n         CCheckQueueControl<UniqueCheck> control(queue.get());\n         while (total) {\n-            size_t r = insecure_randrange(10);\n+            size_t r = InsecureRandRange(10);\n             std::vector<UniqueCheck> vChecks;\n             for (size_t k = 0; k < r && total; k++)\n                 vChecks.emplace_back(--total);\n@@ -320,7 +320,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         {\n             CCheckQueueControl<MemoryCheck> control(queue.get());\n             while (total) {\n-                size_t r = insecure_randrange(10);\n+                size_t r = InsecureRandRange(10);\n                 std::vector<MemoryCheck> vChecks;\n                 for (size_t k = 0; k < r && total; k++) {\n                     total--;"
      },
      {
        "sha": "a72975d6e435120e6eb4ec17eed173c090f68b6c",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 39,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -43,7 +43,7 @@ class CCoinsViewTest : public CCoinsView\n             return false;\n         }\n         coin = it->second;\n-        if (coin.IsSpent() && insecure_randbool() == 0) {\n+        if (coin.IsSpent() && InsecureRandBool() == 0) {\n             // Randomly return false in case of an empty entry.\n             return false;\n         }\n@@ -64,7 +64,7 @@ class CCoinsViewTest : public CCoinsView\n             if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n                 // Same optimization used in CCoinsViewDB is to only write dirty entries.\n                 map_[it->first] = it->second.coin;\n-                if (it->second.coin.IsSpent() && insecure_randrange(3) == 0) {\n+                if (it->second.coin.IsSpent() && InsecureRandRange(3) == 0) {\n                     // Randomly delete empty entries on write.\n                     map_.erase(it->first);\n                 }\n@@ -139,31 +139,31 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     std::vector<uint256> txids;\n     txids.resize(NUM_SIMULATION_ITERATIONS / 8);\n     for (unsigned int i = 0; i < txids.size(); i++) {\n-        txids[i] = insecure_rand256();\n+        txids[i] = InsecureRand256();\n     }\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n         // Do a random modification.\n         {\n-            uint256 txid = txids[insecure_randrange(txids.size())]; // txid we're going to modify in this iteration.\n+            uint256 txid = txids[InsecureRandRange(txids.size())]; // txid we're going to modify in this iteration.\n             Coin& coin = result[COutPoint(txid, 0)];\n-            const Coin& entry = (insecure_randrange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+            const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n \n-            if (insecure_randrange(5) == 0 || coin.IsSpent()) {\n+            if (InsecureRandRange(5) == 0 || coin.IsSpent()) {\n                 Coin newcoin;\n-                newcoin.out.nValue = insecure_rand();\n+                newcoin.out.nValue = InsecureRand32();\n                 newcoin.nHeight = 1;\n-                if (insecure_randrange(16) == 0 && coin.IsSpent()) {\n-                    newcoin.out.scriptPubKey.assign(1 + insecure_randbits(6), OP_RETURN);\n+                if (InsecureRandRange(16) == 0 && coin.IsSpent()) {\n+                    newcoin.out.scriptPubKey.assign(1 + InsecureRandBits(6), OP_RETURN);\n                     BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\n                     added_an_unspendable_entry = true;\n                 } else {\n-                    newcoin.out.scriptPubKey.assign(insecure_randbits(6), 0); // Random sizes so we can test memory usage accounting\n+                    newcoin.out.scriptPubKey.assign(InsecureRandBits(6), 0); // Random sizes so we can test memory usage accounting\n                     (coin.IsSpent() ? added_an_entry : updated_an_entry) = true;\n                     coin = newcoin;\n                 }\n-                stack.back()->AddCoin(COutPoint(txid, 0), std::move(newcoin), !coin.IsSpent() || insecure_rand() & 1);\n+                stack.back()->AddCoin(COutPoint(txid, 0), std::move(newcoin), !coin.IsSpent() || InsecureRand32() & 1);\n             } else {\n                 removed_an_entry = true;\n                 coin.Clear();\n@@ -172,15 +172,15 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         }\n \n         // One every 10 iterations, remove a random entry from the cache\n-        if (insecure_randrange(10) == 0) {\n-            COutPoint out(txids[insecure_rand() % txids.size()], 0);\n-            int cacheid = insecure_rand() % stack.size();\n+        if (InsecureRandRange(10) == 0) {\n+            COutPoint out(txids[InsecureRand32() % txids.size()], 0);\n+            int cacheid = InsecureRand32() % stack.size();\n             stack[cacheid]->Uncache(out);\n             uncached_an_entry |= !stack[cacheid]->HaveCoinInCache(out);\n         }\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n-        if (insecure_randrange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+        if (InsecureRandRange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n             for (auto it = result.begin(); it != result.end(); it++) {\n                 bool have = stack.back()->HaveCoin(it->first);\n                 const Coin& coin = stack.back()->AccessCoin(it->first);\n@@ -198,22 +198,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             }\n         }\n \n-        if (insecure_randrange(100) == 0) {\n+        if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n-            if (stack.size() > 1 && insecure_randbool() == 0) {\n-                unsigned int flushIndex = insecure_randrange(stack.size() - 1);\n+            if (stack.size() > 1 && InsecureRandBool() == 0) {\n+                unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n-        if (insecure_randrange(100) == 0) {\n+        if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && insecure_randbool() == 0) {\n+            if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && insecure_randbool())) {\n+            if (stack.size() == 0 || (stack.size() < 4 && InsecureRandBool())) {\n                 //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n@@ -253,7 +253,7 @@ UtxoData utxoData;\n \n UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {\n     assert(utxoSet.size());\n-    auto utxoSetIt = utxoSet.lower_bound(COutPoint(insecure_rand256(), 0));\n+    auto utxoSetIt = utxoSet.lower_bound(COutPoint(InsecureRand256(), 0));\n     if (utxoSetIt == utxoSet.end()) {\n         utxoSetIt = utxoSet.begin();\n     }\n@@ -286,22 +286,22 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::set<COutPoint> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        uint32_t randiter = insecure_rand();\n+        uint32_t randiter = InsecureRand32();\n \n         // 19/20 txs add a new transaction\n         if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n-            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n-            unsigned int height = insecure_rand();\n+            tx.vout[0].scriptPubKey.assign(InsecureRand32() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n+            unsigned int height = InsecureRand32();\n             Coin old_coin;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbase_coins.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n-                if (insecure_randrange(10) == 0 && coinbase_coins.size()) {\n+                if (InsecureRandRange(10) == 0 && coinbase_coins.size()) {\n                     auto utxod = FindRandomFrom(coinbase_coins);\n                     // Reuse the exact same coinbase\n                     tx = std::get<0>(utxod->second);\n@@ -411,7 +411,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n         }\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n-        if (insecure_randrange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+        if (InsecureRandRange(1000) == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n             for (auto it = result.begin(); it != result.end(); it++) {\n                 bool have = stack.back()->HaveCoin(it->first);\n                 const Coin& coin = stack.back()->AccessCoin(it->first);\n@@ -421,31 +421,31 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n         }\n \n         // One every 10 iterations, remove a random entry from the cache\n-        if (utxoset.size() > 1 && insecure_randrange(30) == 0) {\n-            stack[insecure_rand() % stack.size()]->Uncache(FindRandomFrom(utxoset)->first);\n+        if (utxoset.size() > 1 && InsecureRandRange(30) == 0) {\n+            stack[InsecureRand32() % stack.size()]->Uncache(FindRandomFrom(utxoset)->first);\n         }\n-        if (disconnected_coins.size() > 1 && insecure_randrange(30) == 0) {\n-            stack[insecure_rand() % stack.size()]->Uncache(FindRandomFrom(disconnected_coins)->first);\n+        if (disconnected_coins.size() > 1 && InsecureRandRange(30) == 0) {\n+            stack[InsecureRand32() % stack.size()]->Uncache(FindRandomFrom(disconnected_coins)->first);\n         }\n-        if (duplicate_coins.size() > 1 && insecure_randrange(30) == 0) {\n-            stack[insecure_rand() % stack.size()]->Uncache(FindRandomFrom(duplicate_coins)->first);\n+        if (duplicate_coins.size() > 1 && InsecureRandRange(30) == 0) {\n+            stack[InsecureRand32() % stack.size()]->Uncache(FindRandomFrom(duplicate_coins)->first);\n         }\n \n-        if (insecure_randrange(100) == 0) {\n+        if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, flush an intermediate cache\n-            if (stack.size() > 1 && insecure_randbool() == 0) {\n-                unsigned int flushIndex = insecure_randrange(stack.size() - 1);\n+            if (stack.size() > 1 && InsecureRandBool() == 0) {\n+                unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n                 stack[flushIndex]->Flush();\n             }\n         }\n-        if (insecure_randrange(100) == 0) {\n+        if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && insecure_randbool() == 0) {\n+            if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && insecure_randbool())) {\n+            if (stack.size() == 0 || (stack.size() < 4 && InsecureRandBool())) {\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();"
      },
      {
        "sha": "a4f0e17c9970e6b84fecf9acad3d56f1881f0c37",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -38,7 +38,7 @@ void TestVector(const Hasher &h, const In &in, const Out &out) {\n         Hasher hasher(h);\n         size_t pos = 0;\n         while (pos < in.size()) {\n-            size_t len = insecure_randrange((in.size() - pos + 1) / 2 + 1);\n+            size_t len = InsecureRandRange((in.size() - pos + 1) / 2 + 1);\n             hasher.Write((unsigned char*)&in[pos], len);\n             pos += len;\n             if (pos > 0 && pos + 2 * out.size() > in.size() && pos < in.size()) {"
      },
      {
        "sha": "2d8a419bdb0f95b6650bc4b224535ab89fa17901",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -31,7 +31,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n         fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n-        uint256 in = insecure_rand256();\n+        uint256 in = InsecureRand256();\n         uint256 res;\n \n         // Ensure that we're doing real obfuscation when obfuscate=true\n@@ -53,11 +53,11 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n-        uint256 in = insecure_rand256();\n+        uint256 in = InsecureRand256();\n         char key2 = 'j';\n-        uint256 in2 = insecure_rand256();\n+        uint256 in2 = InsecureRand256();\n         char key3 = 'k';\n-        uint256 in3 = insecure_rand256();\n+        uint256 in3 = InsecureRand256();\n \n         uint256 res;\n         CDBBatch batch(dbw);\n@@ -91,10 +91,10 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n \n         // The two keys are intentionally chosen for ordering\n         char key = 'j';\n-        uint256 in = insecure_rand256();\n+        uint256 in = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key, in));\n         char key2 = 'k';\n-        uint256 in2 = insecure_rand256();\n+        uint256 in2 = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n         std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n@@ -132,7 +132,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     // Set up a non-obfuscated wrapper to write some initial data.\n     CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n-    uint256 in = insecure_rand256();\n+    uint256 in = InsecureRand256();\n     uint256 res;\n \n     BOOST_CHECK(dbw->Write(key, in));\n@@ -155,7 +155,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n     BOOST_CHECK(is_null_key(dbwrapper_private::GetObfuscateKey(odbw))); // The key should be an empty string\n \n-    uint256 in2 = insecure_rand256();\n+    uint256 in2 = InsecureRand256();\n     uint256 res3;\n  \n     // Check that we can write successfully\n@@ -174,7 +174,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     // Set up a non-obfuscated wrapper to write some initial data.\n     CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n-    uint256 in = insecure_rand256();\n+    uint256 in = InsecureRand256();\n     uint256 res;\n \n     BOOST_CHECK(dbw->Write(key, in));\n@@ -193,7 +193,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     BOOST_CHECK(!odbw.Read(key, res2));\n     BOOST_CHECK(!is_null_key(dbwrapper_private::GetObfuscateKey(odbw)));\n \n-    uint256 in2 = insecure_rand256();\n+    uint256 in2 = InsecureRand256();\n     uint256 res3;\n  \n     // Check that we can write successfully"
      },
      {
        "sha": "05b6b3b1e6a11f2d55fea0072d95be2bb0cbd957",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(siphash)\n     for (int i = 0; i < 16; ++i) {\n         uint64_t k1 = ctx.rand64();\n         uint64_t k2 = ctx.rand64();\n-        uint256 x = insecure_rand256();\n+        uint256 x = InsecureRand256();\n         uint32_t n = ctx.rand32();\n         uint8_t nb[4];\n         WriteLE32(nb, n);"
      },
      {
        "sha": "1a1cf4399c2d58876846ff07a57b39087cf0f13f",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n {\n     for (int i = 0; i < 32; i++) {\n         // Try 32 block sizes: all sizes from 0 to 16 inclusive, and then 15 random sizes.\n-        int ntx = (i <= 16) ? i : 17 + (insecure_randrange(4000));\n+        int ntx = (i <= 16) ? i : 17 + (InsecureRandRange(4000));\n         // Try up to 3 mutations.\n         for (int mutate = 0; mutate <= 3; mutate++) {\n             int duplicate1 = mutate >= 1 ? 1 << ctz(ntx) : 0; // The last how many transactions to duplicate first.\n@@ -120,7 +120,7 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n                     // If ntx <= 16, try all branches. Otherwise, try 16 random ones.\n                     int mtx = loop;\n                     if (ntx > 16) {\n-                        mtx = insecure_randrange(ntx);\n+                        mtx = InsecureRandRange(ntx);\n                     }\n                     std::vector<uint256> newBranch = BlockMerkleBranch(block, mtx);\n                     std::vector<uint256> oldBranch = BlockGetMerkleBranch(block, merkleTree, mtx);"
      },
      {
        "sha": "c95800a728c22b2f5635f48147172a44b9e2fa8a",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -372,7 +372,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     while (chainActive.Tip()->nHeight < 209999) {\n         CBlockIndex* prev = chainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n-        next->phashBlock = new uint256(insecure_rand256());\n+        next->phashBlock = new uint256(InsecureRand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n@@ -384,7 +384,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     while (chainActive.Tip()->nHeight < 210000) {\n         CBlockIndex* prev = chainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n-        next->phashBlock = new uint256(insecure_rand256());\n+        next->phashBlock = new uint256(InsecureRand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;"
      },
      {
        "sha": "708a9ca508a9c4cd1d4c4c3407da1e23b03bee6a",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -21,8 +21,8 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n public:\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n-        unsigned int n = insecure_randrange(vHash.size());\n-        int bit = insecure_randbits(8);\n+        unsigned int n = InsecureRandRange(vHash.size());\n+        int bit = InsecureRandBits(8);\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };\n@@ -31,7 +31,7 @@ BOOST_FIXTURE_TEST_SUITE(pmt_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {\n-    seed_insecure_rand(false);\n+    SeedInsecureRand(false);\n     static const unsigned int nTxCounts[] = {1, 4, 7, 17, 56, 100, 127, 256, 312, 513, 1000, 4095};\n \n     for (int i = 0; i < 12; i++) {\n@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             std::vector<bool> vMatch(nTx, false);\n             std::vector<uint256> vMatchTxid1;\n             for (unsigned int j=0; j<nTx; j++) {\n-                bool fInclude = insecure_randbits(att / 2) == 0;\n+                bool fInclude = InsecureRandBits(att / 2) == 0;\n                 vMatch[j] = fInclude;\n                 if (fInclude)\n                     vMatchTxid1.push_back(vTxid[j]);"
      },
      {
        "sha": "b9fabd02e4df57dac6435a6a234a4515c7d3267b",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -74,9 +74,9 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n     }\n \n     for (int j = 0; j < 1000; j++) {\n-        CBlockIndex *p1 = &blocks[insecure_randrange(10000)];\n-        CBlockIndex *p2 = &blocks[insecure_randrange(10000)];\n-        CBlockIndex *p3 = &blocks[insecure_randrange(10000)];\n+        CBlockIndex *p1 = &blocks[InsecureRandRange(10000)];\n+        CBlockIndex *p2 = &blocks[InsecureRandRange(10000)];\n+        CBlockIndex *p3 = &blocks[InsecureRandRange(10000)];\n \n         int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, chainParams->GetConsensus());\n         BOOST_CHECK_EQUAL(tdiff, p1->GetBlockTime() - p2->GetBlockTime());"
      },
      {
        "sha": "354fed1c1dad3fdc405cc2d412b8a079d5ba0a58",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -187,7 +187,7 @@ class prevector_tester {\n     }\n \n     prevector_tester() {\n-        seed_insecure_rand();\n+        SeedInsecureRand();\n         rand_seed = insecure_rand_seed;\n         rand_cache = insecure_rand_ctx;\n     }\n@@ -198,65 +198,65 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n     for (int j = 0; j < 64; j++) {\n         prevector_tester<8, int> test;\n         for (int i = 0; i < 2048; i++) {\n-            if (insecure_randbits(2) == 0) {\n-                test.insert(insecure_randrange(test.size() + 1), insecure_rand());\n+            if (InsecureRandBits(2) == 0) {\n+                test.insert(InsecureRandRange(test.size() + 1), InsecureRand32());\n             }\n-            if (test.size() > 0 && insecure_randbits(2) == 1) {\n-                test.erase(insecure_randrange(test.size()));\n+            if (test.size() > 0 && InsecureRandBits(2) == 1) {\n+                test.erase(InsecureRandRange(test.size()));\n             }\n-            if (insecure_randbits(3) == 2) {\n-                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (insecure_randrange(5)) - 2));\n+            if (InsecureRandBits(3) == 2) {\n+                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (InsecureRandRange(5)) - 2));\n                 test.resize(new_size);\n             }\n-            if (insecure_randbits(3) == 3) {\n-                test.insert(insecure_randrange(test.size() + 1), 1 + insecure_randbool(), insecure_rand());\n+            if (InsecureRandBits(3) == 3) {\n+                test.insert(InsecureRandRange(test.size() + 1), 1 + InsecureRandBool(), InsecureRand32());\n             }\n-            if (insecure_randbits(3) == 4) {\n-                int del = std::min<int>(test.size(), 1 + (insecure_randbool()));\n-                int beg = insecure_randrange(test.size() + 1 - del);\n+            if (InsecureRandBits(3) == 4) {\n+                int del = std::min<int>(test.size(), 1 + (InsecureRandBool()));\n+                int beg = InsecureRandRange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n-            if (insecure_randbits(4) == 5) {\n-                test.push_back(insecure_rand());\n+            if (InsecureRandBits(4) == 5) {\n+                test.push_back(InsecureRand32());\n             }\n-            if (test.size() > 0 && insecure_randbits(4) == 6) {\n+            if (test.size() > 0 && InsecureRandBits(4) == 6) {\n                 test.pop_back();\n             }\n-            if (insecure_randbits(5) == 7) {\n+            if (InsecureRandBits(5) == 7) {\n                 int values[4];\n-                int num = 1 + (insecure_randbits(2));\n+                int num = 1 + (InsecureRandBits(2));\n                 for (int k = 0; k < num; k++) {\n-                    values[k] = insecure_rand();\n+                    values[k] = InsecureRand32();\n                 }\n-                test.insert_range(insecure_randrange(test.size() + 1), values, values + num);\n+                test.insert_range(InsecureRandRange(test.size() + 1), values, values + num);\n             }\n-            if (insecure_randbits(5) == 8) {\n-                int del = std::min<int>(test.size(), 1 + (insecure_randbits(2)));\n-                int beg = insecure_randrange(test.size() + 1 - del);\n+            if (InsecureRandBits(5) == 8) {\n+                int del = std::min<int>(test.size(), 1 + (InsecureRandBits(2)));\n+                int beg = InsecureRandRange(test.size() + 1 - del);\n                 test.erase(beg, beg + del);\n             }\n-            if (insecure_randbits(5) == 9) {\n-                test.reserve(insecure_randbits(5));\n+            if (InsecureRandBits(5) == 9) {\n+                test.reserve(InsecureRandBits(5));\n             }\n-            if (insecure_randbits(6) == 10) {\n+            if (InsecureRandBits(6) == 10) {\n                 test.shrink_to_fit();\n             }\n             if (test.size() > 0) {\n-                test.update(insecure_randrange(test.size()), insecure_rand());\n+                test.update(InsecureRandRange(test.size()), InsecureRand32());\n             }\n-            if (insecure_randbits(10) == 11) {\n+            if (InsecureRandBits(10) == 11) {\n                 test.clear();\n             }\n-            if (insecure_randbits(9) == 12) {\n-                test.assign(insecure_randbits(5), insecure_rand());\n+            if (InsecureRandBits(9) == 12) {\n+                test.assign(InsecureRandBits(5), InsecureRand32());\n             }\n-            if (insecure_randbits(3) == 3) {\n+            if (InsecureRandBits(3) == 3) {\n                 test.swap();\n             }\n-            if (insecure_randbits(4) == 8) {\n+            if (InsecureRandBits(4) == 8) {\n                 test.copy();\n             }\n-            if (insecure_randbits(5) == 18) {\n+            if (InsecureRandBits(5) == 18) {\n                 test.move();\n             }\n         }"
      },
      {
        "sha": "d882ca7a635491a9aa3df3dec84205d8c1308063",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -89,30 +89,30 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n void static RandomScript(CScript &script) {\n     static const opcodetype oplist[] = {OP_FALSE, OP_1, OP_2, OP_3, OP_CHECKSIG, OP_IF, OP_VERIF, OP_RETURN, OP_CODESEPARATOR};\n     script = CScript();\n-    int ops = (insecure_randrange(10));\n+    int ops = (InsecureRandRange(10));\n     for (int i=0; i<ops; i++)\n-        script << oplist[insecure_randrange(sizeof(oplist)/sizeof(oplist[0]))];\n+        script << oplist[InsecureRandRange(sizeof(oplist)/sizeof(oplist[0]))];\n }\n \n void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {\n-    tx.nVersion = insecure_rand();\n+    tx.nVersion = InsecureRand32();\n     tx.vin.clear();\n     tx.vout.clear();\n-    tx.nLockTime = (insecure_randbool()) ? insecure_rand() : 0;\n-    int ins = (insecure_randbits(2)) + 1;\n-    int outs = fSingle ? ins : (insecure_randbits(2)) + 1;\n+    tx.nLockTime = (InsecureRandBool()) ? InsecureRand32() : 0;\n+    int ins = (InsecureRandBits(2)) + 1;\n+    int outs = fSingle ? ins : (InsecureRandBits(2)) + 1;\n     for (int in = 0; in < ins; in++) {\n         tx.vin.push_back(CTxIn());\n         CTxIn &txin = tx.vin.back();\n-        txin.prevout.hash = insecure_rand256();\n-        txin.prevout.n = insecure_randbits(2);\n+        txin.prevout.hash = InsecureRand256();\n+        txin.prevout.n = InsecureRandBits(2);\n         RandomScript(txin.scriptSig);\n-        txin.nSequence = (insecure_randbool()) ? insecure_rand() : (unsigned int)-1;\n+        txin.nSequence = (InsecureRandBool()) ? InsecureRand32() : (unsigned int)-1;\n     }\n     for (int out = 0; out < outs; out++) {\n         tx.vout.push_back(CTxOut());\n         CTxOut &txout = tx.vout.back();\n-        txout.nValue = insecure_randrange(100000000);\n+        txout.nValue = InsecureRandRange(100000000);\n         RandomScript(txout.scriptPubKey);\n     }\n }\n@@ -121,7 +121,7 @@ BOOST_FIXTURE_TEST_SUITE(sighash_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sighash_test)\n {\n-    seed_insecure_rand(false);\n+    SeedInsecureRand(false);\n \n     #if defined(PRINT_SIGHASH_JSON)\n     std::cout << \"[\\n\";\n@@ -133,12 +133,12 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n     nRandomTests = 500;\n     #endif\n     for (int i=0; i<nRandomTests; i++) {\n-        int nHashType = insecure_rand();\n+        int nHashType = InsecureRand32();\n         CMutableTransaction txTo;\n         RandomTransaction(txTo, (nHashType & 0x1f) == SIGHASH_SINGLE);\n         CScript scriptCode;\n         RandomScript(scriptCode);\n-        int nIn = insecure_randrange(txTo.vin.size());\n+        int nIn = InsecureRandRange(txTo.vin.size());\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);"
      },
      {
        "sha": "d70ccafd85d91a2b2f382363666a6d5750cc84e3",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -34,8 +34,8 @@ BOOST_AUTO_TEST_CASE(skiplist_test)\n     }\n \n     for (int i=0; i < 1000; i++) {\n-        int from = insecure_randrange(SKIPLIST_LENGTH - 1);\n-        int to = insecure_randrange(from + 1);\n+        int from = InsecureRandRange(SKIPLIST_LENGTH - 1);\n+        int to = InsecureRandRange(from + 1);\n \n         BOOST_CHECK(vIndex[SKIPLIST_LENGTH - 1].GetAncestor(from) == &vIndex[from]);\n         BOOST_CHECK(vIndex[from].GetAncestor(to) == &vIndex[to]);\n@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n \n     // Test 100 random starting points for locators.\n     for (int n=0; n<100; n++) {\n-        int r = insecure_randrange(150000);\n+        int r = InsecureRandRange(150000);\n         CBlockIndex* tip = (r < 100000) ? &vBlocksMain[r] : &vBlocksSide[r - 100000];\n         CBlockLocator locator = chain.GetLocator(tip);\n \n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n         } else {\n             // randomly choose something in the range [MTP, MTP*2]\n             int64_t medianTimePast = vBlocksMain[i].GetMedianTimePast();\n-            int r = insecure_randrange(medianTimePast);\n+            int r = InsecureRandRange(medianTimePast);\n             vBlocksMain[i].nTime = r + medianTimePast;\n             vBlocksMain[i].nTimeMax = std::max(vBlocksMain[i].nTime, vBlocksMain[i-1].nTimeMax);\n         }\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n     // Verify that FindEarliestAtLeast is correct.\n     for (unsigned int i=0; i<10000; ++i) {\n         // Pick a random element in vBlocksMain.\n-        int r = insecure_randrange(vBlocksMain.size());\n+        int r = InsecureRandRange(vBlocksMain.size());\n         int64_t test_time = vBlocksMain[r].nTime;\n         CBlockIndex *ret = chain.FindEarliestAtLeast(test_time);\n         BOOST_CHECK(ret->nTimeMax >= test_time);"
      },
      {
        "sha": "c1aea1680add3391411fd4669713a7d00857df07",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -59,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(insecure_randrange(100000)));\n+        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);"
      },
      {
        "sha": "0087eeb2d7bd1b6527748eb11e452e2c2b41e75e",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -18,7 +18,7 @@\n extern uint256 insecure_rand_seed;\n extern FastRandomContext insecure_rand_ctx;\n \n-static inline void seed_insecure_rand(bool fDeterministic = false)\n+static inline void SeedInsecureRand(bool fDeterministic = false)\n {\n     if (fDeterministic) {\n         insecure_rand_seed = uint256();\n@@ -28,12 +28,12 @@ static inline void seed_insecure_rand(bool fDeterministic = false)\n     insecure_rand_ctx = FastRandomContext(insecure_rand_seed);\n }\n \n-static inline uint32_t insecure_rand() { return insecure_rand_ctx.rand32(); }\n-static inline uint256 insecure_rand256() { return insecure_rand_ctx.rand256(); }\n-static inline uint64_t insecure_randbits(int bits) { return insecure_rand_ctx.randbits(bits); }\n-static inline uint64_t insecure_randrange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n-static inline bool insecure_randbool() { return insecure_rand_ctx.randbool(); }\n-static inline std::vector<unsigned char> insecure_randbytes(size_t len) { return insecure_rand_ctx.randbytes(len); }\n+static inline uint32_t InsecureRand32() { return insecure_rand_ctx.rand32(); }\n+static inline uint256 InsecureRand256() { return insecure_rand_ctx.rand256(); }\n+static inline uint64_t InsecureRandBits(int bits) { return insecure_rand_ctx.randbits(bits); }\n+static inline uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+static inline bool InsecureRandBool() { return insecure_rand_ctx.randbool(); }\n+static inline std::vector<unsigned char> InsecureRandBytes(size_t len) { return insecure_rand_ctx.randbytes(len); }\n \n /** Basic testing setup.\n  * This just configures logging and chain parameters."
      },
      {
        "sha": "5e9dfb730bbb94e51b2623b7f06afe2d3b3326bb",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n \n BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n {\n-    seed_insecure_rand(true);\n+    SeedInsecureRand(true);\n     for (int mod=2;mod<11;mod++)\n     {\n         int mask = 1;\n@@ -269,7 +269,7 @@ BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n         for (int i = 0; i < 10000; i++) {\n             uint32_t rval;\n             do{\n-                rval=insecure_rand()&mask;\n+                rval=InsecureRand32()&mask;\n             }while(rval>=(uint32_t)mod);\n             count += rval==0;\n         }"
      },
      {
        "sha": "faa2383d148750234883216cac67d2dbb6506a80",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -80,7 +80,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestStateSinceHeight(int height) {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if (insecure_randbits(i) == 0) {\n+            if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? NULL : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n             }\n         }\n@@ -90,7 +90,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestDefined() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if (insecure_randbits(i) == 0) {\n+            if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_DEFINED, strprintf(\"Test %i for DEFINED\", num));\n             }\n         }\n@@ -100,7 +100,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestStarted() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if (insecure_randbits(i) == 0) {\n+            if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_STARTED, strprintf(\"Test %i for STARTED\", num));\n             }\n         }\n@@ -110,7 +110,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestLockedIn() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if (insecure_randbits(i) == 0) {\n+            if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n             }\n         }\n@@ -120,7 +120,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestActive() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if (insecure_randbits(i) == 0) {\n+            if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n             }\n         }\n@@ -130,7 +130,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestFailed() {\n         for (int i = 0; i < CHECKERS; i++) {\n-            if (insecure_randbits(i) == 0) {\n+            if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_FAILED, strprintf(\"Test %i for FAILED\", num));\n             }\n         }"
      },
      {
        "sha": "524a72c303fba2c0c9f3fd02b031f97c94d56b7d",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e945848582160b23fa0bc6f797e2bd8ac676ee0e/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=e945848582160b23fa0bc6f797e2bd8ac676ee0e",
        "patch": "@@ -192,7 +192,7 @@ BOOST_AUTO_TEST_CASE(passphrase) {\n     std::string hash(GetRandHash().ToString());\n     std::vector<unsigned char> vchSalt(8);\n     GetRandBytes(&vchSalt[0], vchSalt.size());\n-    uint32_t rounds = insecure_rand();\n+    uint32_t rounds = InsecureRand32();\n     if (rounds > 30000)\n         rounds = 30000;\n     TestCrypter::TestPassphrase(vchSalt, SecureString(hash.begin(), hash.end()), rounds);"
      }
    ]
  }
]