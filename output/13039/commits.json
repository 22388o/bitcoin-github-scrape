[
  {
    "sha": "cf0277928fa8d955d75f661021845789194dfff7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjAyNzc5MjhmYThkOTU1ZDc1ZjY2MTAyMTg0NTc4OTE5NGRmZmY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-04-20T09:21:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-04-23T12:25:28Z"
      },
      "message": "Add logging and error handling for file syncing\n\nAdd logging and error handling inside, and outside of FileCommit.\nFunctions such as fsync, fdatasync will return error in case of hardware\nI/O errors, and ignoring this means it can silently continue through\ndata corruption.  (c.f.\nhttps://lwn.net/SubscriberLink/752063/12b232ab5039efbe/)",
      "tree": {
        "sha": "da392672c936ad9f6a91c2d77c4377a22ac127d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da392672c936ad9f6a91c2d77c4377a22ac127d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf0277928fa8d955d75f661021845789194dfff7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0277928fa8d955d75f661021845789194dfff7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf0277928fa8d955d75f661021845789194dfff7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0277928fa8d955d75f661021845789194dfff7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b262eb2d80bfa27ae8501078ce47bc1407e9c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b262eb2d80bfa27ae8501078ce47bc1407e9c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b262eb2d80bfa27ae8501078ce47bc1407e9c55"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 36,
      "deletions": 13
    },
    "files": [
      {
        "sha": "59305ff187da17442a6021f9663502cf11c1aa5b",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0277928fa8d955d75f661021845789194dfff7/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0277928fa8d955d75f661021845789194dfff7/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=cf0277928fa8d955d75f661021845789194dfff7",
        "patch": "@@ -49,7 +49,8 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n \n     // Serialize\n     if (!SerializeDB(fileout, data)) return false;\n-    FileCommit(fileout.Get());\n+    if (!FileCommit(fileout.Get()))\n+        return error(\"%s: Failed to flush file %s\", __func__, pathTmp.string());\n     fileout.fclose();\n \n     // replace existing file, if any, with new file"
      },
      {
        "sha": "9a3067259f273a7bcb86834ed60c246e6907568a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0277928fa8d955d75f661021845789194dfff7/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0277928fa8d955d75f661021845789194dfff7/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=cf0277928fa8d955d75f661021845789194dfff7",
        "patch": "@@ -788,21 +788,37 @@ bool TryCreateDirectories(const fs::path& p)\n     return false;\n }\n \n-void FileCommit(FILE *file)\n+bool FileCommit(FILE *file)\n {\n-    fflush(file); // harmless if redundantly called\n+    if (fflush(file) != 0) { // harmless if redundantly called\n+        LogPrintf(\"%s: fflush failed: %d\\n\", __func__, errno);\n+        return false;\n+    }\n #ifdef WIN32\n     HANDLE hFile = (HANDLE)_get_osfhandle(_fileno(file));\n-    FlushFileBuffers(hFile);\n+    if (FlushFileBuffers(hFile) == 0) {\n+        LogPrintf(\"%s: FlushFileBuffers failed: %d\\n\", __func__, GetLastError());\n+        return false;\n+    }\n #else\n     #if defined(__linux__) || defined(__NetBSD__)\n-    fdatasync(fileno(file));\n+    if (fdatasync(fileno(file)) != 0 && errno != EINVAL) { // Ignore EINVAL for filesystems that don't support sync\n+        LogPrintf(\"%s: fdatasync failed: %d\\n\", __func__, errno);\n+        return false;\n+    }\n     #elif defined(__APPLE__) && defined(F_FULLFSYNC)\n-    fcntl(fileno(file), F_FULLFSYNC, 0);\n+    if (fcntl(fileno(file), F_FULLFSYNC, 0) == -1) { // Manpage says \"value other than -1\" is returned on success\n+        LogPrintf(\"%s: fcntl F_FULLFSYNC failed: %d\\n\", __func__, errno);\n+        return false;\n+    }\n     #else\n-    fsync(fileno(file));\n+    if (fsync(fileno(file)) != 0 && errno != EINVAL) {\n+        LogPrintf(\"%s: fsync failed: %d\\n\", __func__, errno);\n+        return false;\n+    }\n     #endif\n #endif\n+    return true;\n }\n \n bool TruncateFile(FILE *file, unsigned int length) {"
      },
      {
        "sha": "ce94f396af77e32113188a41ed027bce05d539ba",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0277928fa8d955d75f661021845789194dfff7/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0277928fa8d955d75f661021845789194dfff7/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=cf0277928fa8d955d75f661021845789194dfff7",
        "patch": "@@ -71,7 +71,7 @@ bool error(const char* fmt, const Args&... args)\n }\n \n void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n-void FileCommit(FILE *file);\n+bool FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);"
      },
      {
        "sha": "158bdcc63f34673d2350d8e354a110138ee45f24",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0277928fa8d955d75f661021845789194dfff7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0277928fa8d955d75f661021845789194dfff7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cf0277928fa8d955d75f661021845789194dfff7",
        "patch": "@@ -1615,22 +1615,27 @@ void static FlushBlockFile(bool fFinalize = false)\n     LOCK(cs_LastBlockFile);\n \n     CDiskBlockPos posOld(nLastBlockFile, 0);\n+    bool status = true;\n \n     FILE *fileOld = OpenBlockFile(posOld);\n     if (fileOld) {\n         if (fFinalize)\n-            TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nSize);\n-        FileCommit(fileOld);\n+            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nSize);\n+        status &= FileCommit(fileOld);\n         fclose(fileOld);\n     }\n \n     fileOld = OpenUndoFile(posOld);\n     if (fileOld) {\n         if (fFinalize)\n-            TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-        FileCommit(fileOld);\n+            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nUndoSize);\n+        status &= FileCommit(fileOld);\n         fclose(fileOld);\n     }\n+\n+    if (!status) {\n+        AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n+    }\n }\n \n static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n@@ -4760,7 +4765,8 @@ bool DumpMempool(void)\n         }\n \n         file << mapDeltas;\n-        FileCommit(file.Get());\n+        if (!FileCommit(file.Get()))\n+            throw std::runtime_error(\"FileCommit failed\");\n         file.fclose();\n         RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\");\n         int64_t last = GetTimeMicros();"
      }
    ]
  }
]