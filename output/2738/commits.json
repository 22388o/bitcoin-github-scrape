[
  {
    "sha": "a79342479f577013f2fd2573fb32585d6f4981b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzkzNDI0NzlmNTc3MDEzZjJmZDI1NzNmYjMyNTg1ZDZmNDk4MWIz",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-06-24T19:09:50Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:49:43Z"
      },
      "message": "Relay OP_RETURN data TxOut as standard transaction type",
      "tree": {
        "sha": "dccd44003e725234363f2e95a3fb61e1ae24e486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dccd44003e725234363f2e95a3fb61e1ae24e486"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a79342479f577013f2fd2573fb32585d6f4981b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79342479f577013f2fd2573fb32585d6f4981b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a79342479f577013f2fd2573fb32585d6f4981b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79342479f577013f2fd2573fb32585d6f4981b3/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "28f6b8dbad27f0dac72daca6f1bfe41d7e701908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f6b8dbad27f0dac72daca6f1bfe41d7e701908",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28f6b8dbad27f0dac72daca6f1bfe41d7e701908"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 56,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ed48fd5760ec0d1f6f499bc0e385bcbd5b634d5e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79342479f577013f2fd2573fb32585d6f4981b3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79342479f577013f2fd2573fb32585d6f4981b3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a79342479f577013f2fd2573fb32585d6f4981b3",
        "patch": "@@ -497,17 +497,28 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n             return false;\n         }\n     }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey)) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }\n-        if (txout.IsDust(CTransaction::nMinRelayTxFee)) {\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if (txout.IsDust(CTransaction::nMinRelayTxFee)) {\n             reason = \"dust\";\n             return false;\n         }\n     }\n \n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1) {\n+        reason = \"mucho-data\";\n+        return false;\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "858743f887c9519a2e03f5f99500a09c3fac54bd",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79342479f577013f2fd2573fb32585d6f4981b3/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79342479f577013f2fd2573fb32585d6f4981b3/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=a79342479f577013f2fd2573fb32585d6f4981b3",
        "patch": "@@ -79,6 +79,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_PUBKEYHASH: return \"pubkeyhash\";\n     case TX_SCRIPTHASH: return \"scripthash\";\n     case TX_MULTISIG: return \"multisig\";\n+    case TX_NULL_DATA: return \"nulldata\";\n     }\n     return NULL;\n }\n@@ -220,6 +221,7 @@ const char* GetOpName(opcodetype opcode)\n     // template matching params\n     case OP_PUBKEYHASH             : return \"OP_PUBKEYHASH\";\n     case OP_PUBKEY                 : return \"OP_PUBKEY\";\n+    case OP_SMALLDATA              : return \"OP_SMALLDATA\";\n \n     case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n     default:\n@@ -1148,6 +1150,9 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n         // Sender provides N pubkeys, receivers provides M signatures\n         mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n+\n+        // Empty, provably prunable, data-carrying output\n+        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n     }\n \n     // Shortcut for pay-to-script-hash, which are more constrained than the other types:\n@@ -1232,6 +1237,12 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 else\n                     break;\n             }\n+            else if (opcode2 == OP_SMALLDATA)\n+            {\n+                // small pushdata, <= 80 bytes\n+                if (vch1.size() > 80)\n+                    break;\n+            }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n                 // Others must match exactly\n@@ -1294,6 +1305,7 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n     switch (whichTypeRet)\n     {\n     case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -1325,6 +1337,8 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     {\n     case TX_NONSTANDARD:\n         return -1;\n+    case TX_NULL_DATA:\n+        return 1;\n     case TX_PUBKEY:\n         return 1;\n     case TX_PUBKEYHASH:\n@@ -1339,10 +1353,9 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n-bool IsStandard(const CScript& scriptPubKey)\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n {\n     vector<valtype> vSolutions;\n-    txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n@@ -1401,6 +1414,7 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     switch (whichType)\n     {\n     case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -1462,6 +1476,8 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, typeRet, vSolutions))\n         return false;\n+    if (typeRet == TX_NULL_DATA)\n+        return true;\n \n     if (typeRet == TX_MULTISIG)\n     {\n@@ -1677,6 +1693,7 @@ static CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo,\n     switch (txType)\n     {\n     case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n         // Don't know anything about this, assume bigger one is correct:\n         if (sigs1.size() >= sigs2.size())\n             return PushAll(sigs1);"
      },
      {
        "sha": "30a7c076923e5ecd0bdcaa2f533afa60b6bae145",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79342479f577013f2fd2573fb32585d6f4981b3/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79342479f577013f2fd2573fb32585d6f4981b3/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=a79342479f577013f2fd2573fb32585d6f4981b3",
        "patch": "@@ -46,6 +46,7 @@ enum txnouttype\n     TX_PUBKEYHASH,\n     TX_SCRIPTHASH,\n     TX_MULTISIG,\n+    TX_NULL_DATA,\n };\n \n class CNoDestination {\n@@ -202,6 +203,7 @@ enum opcodetype\n \n \n     // template matching params\n+    OP_SMALLDATA = 0xf9,\n     OP_SMALLINTEGER = 0xfa,\n     OP_PUBKEYS = 0xfb,\n     OP_PUBKEYHASH = 0xfd,\n@@ -683,7 +685,7 @@ bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);"
      },
      {
        "sha": "29b190692fbf57a16df8885cc09dba3deb9c52bc",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79342479f577013f2fd2573fb32585d6f4981b3/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79342479f577013f2fd2573fb32585d6f4981b3/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=a79342479f577013f2fd2573fb32585d6f4981b3",
        "patch": "@@ -133,21 +133,23 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n+    txnouttype whichType;\n+\n     CScript a_and_b;\n     a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b));\n+    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b));\n+    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n \n     CScript escrow;\n     escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow));\n+    BOOST_CHECK(::IsStandard(escrow, whichType));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << key[3].GetPubKey() << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four));\n+    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n@@ -158,7 +160,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey();\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i]));\n+        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      },
      {
        "sha": "5dfb67cbe4b740b9ab286cb45a97657216c583c9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79342479f577013f2fd2573fb32585d6f4981b3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79342479f577013f2fd2573fb32585d6f4981b3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a79342479f577013f2fd2573fb32585d6f4981b3",
        "patch": "@@ -273,6 +273,20 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n+\n+    // 80-byte TX_NULL_DATA (standard)\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+\n+    // 81-byte TX_NULL_DATA (non-standard)\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    BOOST_CHECK(!IsStandardTx(t, reason));\n+\n+    // Only one TX_NULL_DATA permitted\n+    t.vout.resize(2);\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    BOOST_CHECK(!IsStandardTx(t, reason));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]