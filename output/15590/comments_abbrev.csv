Sjors,2019-03-14T10:21:11Z,"The `IsSegWit()` check mentioned in the description can be found here, but I'll hold off on a PR for now: https://github.com/Sjors/bitcoin/compare/2019/03/descriptor-address-type...Sjors:2019/03/descriptor-is-segwit",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-472789620,472789620,
sipa,2019-03-16T22:03:06Z,"I don't think this makes sense. The address type is a property of a scriptPubKey, not of a descriptor (in particular, it's not well defined for `combo` descriptors).\n\nYou can already determine the address type of a scriptPubKey using ExtractDestination().",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-473596344,473596344,
DrahtBot,2019-05-30T05:15:24Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#18034](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18034.html) (Get the OutputType for a descriptor by acho",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-497205621,497205621,
meshcollider,2019-11-22T19:56:05Z,"@Sjors can you respond to sipa? I agree with him that this isn't really a property of descriptors, but I haven't looked into whether this makes your future work heaps easier or not. If not, let's close this :)",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-557671952,557671952,
Sjors,2019-11-23T08:38:18Z,"I still use this inside #16546 for external signer support. However that PR is built on top of descriptor wallet support #15764 which is still in flux. So it's probably more useful to discuss again when that's ready.\n\nThe use case here is that we obtain descriptors from a hardware wallet, e.g. via the HWI [getdescriptors](https://github.com/bitcoin-core/HWI/blob/d6799f366e5009ee637fac9acb07520",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-557778970,557778970,
meshcollider,2019-11-24T05:19:50Z,"Perhaps in that case, it would be better to make a ""CanProvideAddressTypeX"" which takes a descriptor and an address type and returns a bool. Roughly provides the same functionality but makes more logical sense to me.\n\nCan't HWI just tell the wallet which descriptor it wants to use for which address type though?",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-557859028,557859028,
Sjors,2019-11-24T09:13:04Z,"The first suggestions seems doable, but not sure why it's better. By address type you mean OutputType? It seems less flexible though, as in the longer run I don't know if we really want to hold on to OutputType.\n\nE.g. multisig would likely only use bech32 and wrapped segwit, not legacy p2sh or bare multisig. All we need is the new AddressType to distinguish those.\n\nI can also imagine addin",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-557870777,557870777,
achow101,2020-01-30T23:04:27Z,What exactly is the utility of knowing whether the address type is base58 or bech32? I don't think we have many things that depend on the encoding. Rather what we care about is the OutputType.,https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-580503360,580503360,
Sjors,2020-01-31T10:08:27Z,"@achow101 my initial thinking was to stuff OutputType in the legacy box, along with its `GetDestinationForKey()`, `AddAndGetDestinationForScript`, etc,  and switch to the simpler `AddressType`. However it's still part of the `ScriptPubKeyMan` interface, so maybe not worth changing now.\n\nWhen sharing an address, the distinction between base58 and bech32 is all that matters. So ideally I'd like ",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-580670210,580670210,
achow101,2020-01-31T18:11:22Z,"While it would be nice to just have the distinction be between base58 and bech32, I don't think we are going to lose the ""legacy"" distinction any time soon. Besides the whole backwards compatibility thing, there are still holdouts who insist on legacy addresses.\n\nThis also gets more complicated with taproot which don't allow for P2SH wrapped addresses. Even with just a base58 or bech32 address",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-580846062,580846062,
Sjors,2020-01-31T18:13:56Z,">  there are still holdouts who insist on legacy addresses\n\nYikes, there are services that refuse to send to p2sh? Do you have an example?\n\n> inevitably someone will have implemented segwit incorrectly and can't send to v1 addresses\n\nSadly that's conceivable... Especially since early on there was a recommendation to only allow v0.",https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-580847050,580847050,
Sjors,2020-02-10T13:25:18Z,Closing in favor of #18034,https://github.com/bitcoin/bitcoin/pull/15590#issuecomment-584120739,584120739,
MarcoFalke,2019-03-13T13:07:31Z,"Could remove the default case and move the assert after the switch, so that the compiler will issue a warning when the assert could be hit",https://github.com/bitcoin/bitcoin/pull/15590#discussion_r265116055,265116055,src/addresstype.cpp
Sjors,2019-03-14T09:57:25Z,"The compiler throws plenty of warnings even if I remove the `assert`:\n<img width=""749"" alt=""Schermafbeelding 2019-03-14 om 10 54 05"" src=""https://user-images.githubusercontent.com/10217/54347597-95b80c00-4647-11e9-89fa-6aad4c77a4e5.png"">",https://github.com/bitcoin/bitcoin/pull/15590#discussion_r265492299,265492299,src/addresstype.cpp
