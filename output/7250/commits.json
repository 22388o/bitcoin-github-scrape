[
  {
    "sha": "fa0a9749eb09f6b537b98075241a7fcb46f758e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBhOTc0OWViMDlmNmI1MzdiOTgwNzUyNDFhN2ZjYjQ2Zjc1OGUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-24T10:58:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-24T11:26:36Z"
      },
      "message": "[qa] Move gen_return_txouts() to util.py",
      "tree": {
        "sha": "cf6d4b3925928947f035e71df6cf720e9844d118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf6d4b3925928947f035e71df6cf720e9844d118"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0a9749eb09f6b537b98075241a7fcb46f758e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0a9749eb09f6b537b98075241a7fcb46f758e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0a9749eb09f6b537b98075241a7fcb46f758e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0a9749eb09f6b537b98075241a7fcb46f758e3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 24,
      "deletions": 66
    },
    "files": [
      {
        "sha": "be87c3bb4177ae55fdbae537735cb1aaa464a421",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fa0a9749eb09f6b537b98075241a7fcb46f758e3",
        "patch": "@@ -85,22 +85,7 @@ def received_pong():\n class MaxUploadTest(BitcoinTestFramework):\n     def __init__(self):\n         self.utxo = []\n-\n-        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n-        # So we have big transactions and full blocks to fill up our block files\n-        # create one script_pubkey\n-        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-        for i in xrange (512):\n-            script_pubkey = script_pubkey + \"01\"\n-        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n-        self.txouts = \"81\"\n-        for k in xrange(128):\n-            # add txout value\n-            self.txouts = self.txouts + \"0000000000000000\"\n-            # add length of script_pubkey\n-            self.txouts = self.txouts + \"fd0402\"\n-            # add script_pubkey\n-            self.txouts = self.txouts + script_pubkey\n+        self.txouts = gen_return_txouts()\n  \n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\","
      },
      {
        "sha": "3ba17ac4f1c7312864bd11bda17dbd32b713e7bd",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=fa0a9749eb09f6b537b98075241a7fcb46f758e3",
        "patch": "@@ -11,22 +11,8 @@\n class MempoolLimitTest(BitcoinTestFramework):\n \n     def __init__(self):\n-        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n-        # So we have big transactions (and therefore can't fit very many into each block)\n-        # create one script_pubkey\n-        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-        for i in xrange (512):\n-            script_pubkey = script_pubkey + \"01\"\n-        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n-        self.txouts = \"81\"\n-        for k in xrange(128):\n-            # add txout value\n-            self.txouts = self.txouts + \"0000000000000000\"\n-            # add length of script_pubkey\n-            self.txouts = self.txouts + \"fd0402\"\n-            # add script_pubkey\n-            self.txouts = self.txouts + script_pubkey\n-                    \n+        self.txouts = gen_return_txouts()\n+\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\", \"-debug\"]))"
      },
      {
        "sha": "ae6ad63e1f45ba760f8d4703694db3d44e3961f6",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=fa0a9749eb09f6b537b98075241a7fcb46f758e3",
        "patch": "@@ -15,21 +15,7 @@\n class PrioritiseTransactionTest(BitcoinTestFramework):\n \n     def __init__(self):\n-        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n-        # So we have big transactions (and therefore can't fit very many into each block)\n-        # create one script_pubkey\n-        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-        for i in xrange (512):\n-            script_pubkey = script_pubkey + \"01\"\n-        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n-        self.txouts = \"81\"\n-        for k in xrange(128):\n-            # add txout value\n-            self.txouts = self.txouts + \"0000000000000000\"\n-            # add length of script_pubkey\n-            self.txouts = self.txouts + \"fd0402\"\n-            # add script_pubkey\n-            self.txouts = self.txouts + script_pubkey\n+        self.txouts = gen_return_txouts()\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)"
      },
      {
        "sha": "fbf40f24c37fc1e49b4d4a5aba1d42cb24999ee7",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fa0a9749eb09f6b537b98075241a7fcb46f758e3",
        "patch": "@@ -23,24 +23,7 @@ class PruneTest(BitcoinTestFramework):\n     def __init__(self):\n         self.utxo = []\n         self.address = [\"\",\"\"]\n-\n-        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n-        # So we have big transactions and full blocks to fill up our block files\n-\n-        # create one script_pubkey\n-        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-        for i in xrange (512):\n-            script_pubkey = script_pubkey + \"01\"\n-        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n-        self.txouts = \"81\"\n-        for k in xrange(128):\n-            # add txout value\n-            self.txouts = self.txouts + \"0000000000000000\"\n-            # add length of script_pubkey\n-            self.txouts = self.txouts + \"fd0402\"\n-            # add script_pubkey\n-            self.txouts = self.txouts + script_pubkey\n-\n+        self.txouts = gen_return_txouts()\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)"
      },
      {
        "sha": "147def46d268fda51a07040553b547d0bd7fa046",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0a9749eb09f6b537b98075241a7fcb46f758e3/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa0a9749eb09f6b537b98075241a7fcb46f758e3",
        "patch": "@@ -436,6 +436,24 @@ def create_confirmed_utxos(fee, node, count):\n     assert(len(utxos) >= count)\n     return utxos\n \n+def gen_return_txouts():\n+    # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+    # So we have big transactions (and therefore can't fit very many into each block)\n+    # create one script_pubkey\n+    script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+    for i in xrange (512):\n+        script_pubkey = script_pubkey + \"01\"\n+    # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+    txouts = \"81\"\n+    for k in xrange(128):\n+        # add txout value\n+        txouts = txouts + \"0000000000000000\"\n+        # add length of script_pubkey\n+        txouts = txouts + \"fd0402\"\n+        # add script_pubkey\n+        txouts = txouts + script_pubkey\n+    return txouts\n+\n def create_lots_of_big_transactions(node, txouts, utxos, fee):\n     addr = node.getnewaddress()\n     txids = []\n@@ -453,4 +471,4 @@ def create_lots_of_big_transactions(node, txouts, utxos, fee):\n         signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n-    return txids\n\\ No newline at end of file\n+    return txids"
      }
    ]
  }
]