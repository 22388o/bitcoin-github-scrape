Sjors,2019-02-11T15:13:51Z,"See earlier discussion in https://github.com/bitcoin/bitcoin/pull/14912#pullrequestreview-186165666 for different approaches like `_popen` or `boost process`.\n\ncc @practicalswift @promag @ken2812221 @ryanofsky",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-462363602,462363602,
jgarzik,2019-02-11T15:32:47Z,"This C++11 python-inspired subprocess module may or may not be of relevant interest, as it avoids Boost in favor of straight C++11: http://templated-thoughts.blogspot.com/2016/03/sub-processing-with-modern-c.html",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-462370972,462370972,
Sjors,2019-02-12T08:16:28Z,"@jgarzik thanks! [1600 lines of code](https://github.com/arun11299/cpp-subprocess/blob/master/subprocess.hpp) seems a bit overkill, but on the other hand it looks very clean and presumably better than anything I would come up with.\n\nIt currently doesn't have Windows support, but they're open to patches.\n\nSpeaking of UniValue :-) I think I need to reorder the Makefile to prevent some Travis",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-462660765,462660765,
practicalswift,2019-02-12T10:14:24Z,"The `-regtest` requirement is very important: could add a test case triggering the \n""runcommand for regression testing (`-regtest` mode) only"" code path?",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-462699963,462699963,
Sjors,2019-02-12T10:24:13Z,"@practicalswift agreed, but I don't know if the functional test framework can launch a Testnet node without triggering a real IBD. I suppose I can configure it to not connect to any peers.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-462703287,462703287,
Sjors,2019-02-13T08:19:19Z,"AppVeyor seems unhappy about the `RPCHelpMan` syntax:\n\n```\n[C:\projects\bitcoin\build_msvc\libbitcoin_util\libbitcoin_util.vcxproj]\n25c:\projects\bitcoin\src\leveldb\db\skiplist.h(360): warning C4312: 'reinterpret_cast': conversion from 'int' to 'void *' of greater size [C:\projects\bitcoin\build_msvc\libleveldb\libleveldb.vcxproj]\n26c:\projects\bitcoin\src\rpc\misc.cpp(371): error C2440",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463102457,463102457,
Sjors,2019-02-13T18:03:08Z,"I switched to boost::process, which should give us Windows support. It's included with the depends Boost 1.64. Because the minimum Boost version is 1.47, this functionality is just not compiled for older versions of Boost.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463303078,463303078,
Sjors,2019-02-13T20:25:28Z,"@DrahtBot AppVeyor `vcpkg install` [fails](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/22349441) (I tried restarting), mostly likely as a result of me adding the `boost-process` package:\n<img width=""938"" alt=""schermafbeelding 2019-02-13 om 21 20 30"" src=""https://user-images.githubusercontent.com/10217/52741261-3e396880-2fd5-11e9-8d6f-19d0b034df6b.png"">\n\nI add AppVeyor to my own G",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463354672,463354672,
MarcoFalke,2019-02-13T20:34:16Z,"Not sure how to purge the cache, maybe @ken2812221 knows",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463357839,463357839,
Sjors,2019-02-13T20:59:05Z,"On the bright side, the Gitian build does work:\n<img width=""515"" alt=""schermafbeelding 2019-02-13 om 21 57 48"" src=""https://user-images.githubusercontent.com/10217/52743539-8b6c0900-2fda-11e9-94a8-278488d0b454.png"">\n ",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463367863,463367863,
Sjors,2019-02-13T21:15:28Z,Trying something based on the [docs](https://www.appveyor.com/docs/build-cache/#cleaning-up-cache)...,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463374432,463374432,
DrahtBot,2019-02-13T21:18:04Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19504 (Bump minimum python version to 3.6 by ajtowns)\n* #19077 (wallet: Add sqlite as an alternative wallet database and",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463375407,463375407,
Sjors,2019-02-13T21:21:54Z,"I can't build master either on my own instance ([logs](https://ci.appveyor.com/project/Sjors/bitcoin/builds/22351406)).\n\n```\n...\nlibbitcoin_server.lib(index_txindex.obj) : error LNK2001: unresolved external symbol ""public: void __cdecl leveldb::WriteBatch::Clear(void)"" (?Clear@WriteBatch@leveldb@@QEAAXXZ) [C:\projects\bitcoin\build_msvc\bitcoin-wallet\bitcoin-wallet.vcxproj]\n53C:\project",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463376980,463376980,
jonasschnelli,2019-02-14T02:03:22Z,"@Sjors:\nI miss some context. Can you elaborate why this is necessary for external signer support?",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463455360,463455360,
Sjors,2019-02-14T08:31:58Z,"@jonasschnelli #14912 allows Bitcoin Core to communicate with [HWI](https://github.com/bitcoin-core/HWI) which in turns communicates with the device. That way we don't have to implement device specific support, but instead communicate via a (to be) standardised protocol to a driver. That driver could be HWI, but it could be any other command line utility that understands the same commands and give",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463538471,463538471,
ken2812221,2019-02-15T08:59:39Z,"Looks like appveyor has not updated their `boost-process` package.\n~~Maybe you could try to add~~\n```yml\n- cmd: git -C C:\tools\vcpkg pull -q\n```\n~~before~~\n```yml\n- cmd: vcpkg remove --outdated --recurse\n```\n\nEdit: It doesn't work. But it works on my PC.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463959583,463959583,
Sjors,2019-02-15T10:05:46Z,"@ken2812221 AppVeyor actually passed before my rebase. I think the problem is that it needs to bust cache before running, so that it adds `boost-process`.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-463980188,463980188,
luke-jr,2019-02-16T14:14:16Z,"Most distros seem to split boost modules, so just because 1.64 is used doesn't guarantee boost::process is installed I think? We probably need a configure check...",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-464350372,464350372,
Sjors,2019-02-18T08:40:39Z,"@luke-jr good point, I actually noticed that with AppVeyor which aborted much too late in the build process before I added the `boost-process` package.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-464637892,464637892,
Sjors,2019-02-19T12:56:37Z,"Rebased. I cherry-picked Luke's commit to explicitly detect boost-process with `#ifdef HAVE_BOOST_PROCESS`.\n\nI started reviewing boost-process in #15440",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-465118058,465118058,
Sjors,2019-03-15T13:08:10Z,Added support for stdin.,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-473279025,473279025,
Sjors,2019-03-15T14:11:02Z,"Not sure what I'm doing wrong for the windows cross compile [build](https://travis-ci.org/bitcoin/bitcoin/jobs/506760796)...\n\n<img width=""1247"" alt=""Schermafbeelding 2019-03-15 om 15 10 34"" src=""https://user-images.githubusercontent.com/10217/54437257-85318f80-4734-11e9-9666-8833e96c9e95.png"">\n",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-473300625,473300625,
jgarzik,2019-03-15T14:23:29Z,"> Not sure what I'm doing wrong for the windows cross compile [build](https://travis-\n\nThe string `stdin` is a symbol from `stdio.h` of type `FILE *`.  The compiler thinks you are passing the well-known FILE* to runCommandParseJSON()\n\nRecommend avoiding the `stdin` string altogether, since that's a symbol from the earliest days of ANSI C.  Call it `stdinData` or something.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-473305237,473305237,
Sjors,2019-04-24T17:31:27Z,"Note that on macOS with Homebrew boost 1.69.0_2 won't find `boost::process`, due to similar errors as described [here](https://github.com/boostorg/process/issues/55). It works fine with depends though.\n\n_Update 2019-06-11: Homebrew boost 1.70 is out and works_ ",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-486344698,486344698,
promag,2019-10-22T20:30:52Z,"While testing #13339 rebased with this one I've come to the conclusion that `boost::process::system` is way slower than standard `system`. Looks like there is some internal synchronization when multiple concurrent calls are made - can be observed with `bitcoin-cli -regtest generatetoaddress 10 ...` and `-blocknotify=...`.\n\nI'll push the above to a different branch.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-545140438,545140438,
Sjors,2019-10-30T19:23:05Z,"I added `USE_EXTERNAL_SIGNER` to `test/config.ini` so that the test suite can check for it directly.  Previously the test suite would call `runcommand` to find out. I also added `--disable-external-signer` to allow opting out.\n\n```\nOptions used to compile and link:\n  with wallet     = yes\n  with gui / qt   = yes\n    with qr       = yes\n  external signer = no\n  with zmq        = yes",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548073537,548073537,
practicalswift,2019-10-31T08:23:20Z,@Sjors Since `runcommand` support increases the attack surface perhaps it should be opt-in (`--enable-external-signer`) instead of opt-out (`--disable-external-signer`)?,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548261802,548261802,
Sjors,2019-10-31T08:45:43Z,"@practicalswift if this were a standalone PR I would agree, but this PR only makes sense if we decide to go ahead with external signer support. Disabling that by default seems overkill.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548268886,548268886,
ryanofsky,2019-10-31T12:59:34Z,"> TODO:\n> \n> * [ ]  review boost process in #15440\n\nJust saw this TODO. Is it still valid? If so, could you clarify who is supposed to do what? Is this blocking? Or do you just want to encourage people to look at the boost process implementation?(Could include a link to https://github.com/boostorg/process in that case)\n\nIf Boost.Process does need more scrutiny, that might be a reason t",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548362065,548362065,
ryanofsky,2019-10-31T13:16:56Z,"> If Boost.Process does need more scrutiny, that might be a reason to disable its use by default.\n\nNote that to disable boost process by default but still get test coverage on travis you would need to add a depends option and enable the option it in one or more travis configurations, passing it to `configure` through [`depends/config.site.in`](https://github.com/bitcoin/bitcoin/blob/feb1a8c03a",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548369465,548369465,
Sjors,2019-10-31T15:43:28Z,"There is a `--with-boost-process` option already as part of the first commit (`Clone ax_boost_chrono to ax_boost_process`). I believe this can be used to turn Boost::Process off entirely, but I haven't tested it.\n\n> Just saw this TODO. Is it still valid? If so, could you clarify who is supposed to do what? Is this blocking?\n\nWe haven't included Boost::Process code before. If anyone feels u",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548437890,548437890,
Sjors,2019-11-01T20:59:08Z,"Rebased, implemented some of @ryanofsky's suggestions. I might look into ditching the `runcommand` test RPC in favor of a unit test later. ",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548948803,548948803,
laanwj,2019-11-02T10:56:55Z,"I haven't dived into details of why it's needed for external signers, but from a security perspective I really dislike an RPC call that can invoke arbitrary commands.\n\nEdit: could we restrict this to a set of commands specified in `bitcoin.conf`?",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-549032668,549032668,
Sjors,2019-11-02T17:03:03Z,"> I haven't dived into details of why it's needed for external signers, but from a security perspective I really dislike an RPC call that can invoke arbitrary commands.\n> \n> Edit: could we restrict this to a set of commands specified in `bitcoin.conf`?\n\nExternal signer support has precisely that restriction (the only command that's called is specified by `-signer`).",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-549062329,549062329,
Sjors,2019-11-02T19:30:12Z,"I dropped the `runcommand` regtest RPC call and added `test/system_tests.cpp` instead. This test file creates the `command.py` test script programatically, because `test_bitcoin` is a standalone executable.\n\nI think  `--disable-external-signer` is easier to understand than `--without-boost-process` and more future proof. We might add different communication methods later to this feature, e.g. ",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-549073747,549073747,
Sjors,2019-11-03T09:34:06Z,"I simplified the tests by just using `echo` instead of calling a Python script.\n\nThe test is skipped on the Windows Travis machine (`boost::process::process_error:  CreateProcess failed: No such device or address`), but does run on AppVeyor. I also skip the `stdin` test on all Windows platforms, but this will be tested via functional tests here: https://github.com/bitcoin/bitcoin/pull/16546/co",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-549119510,549119510,
Sjors,2019-11-04T16:12:16Z,Rebased after native ARM support for Travis was added in #17233.  I re-enabled Boost::Process for the ARM Travis machine (replacing 23b653aad with 8f811db).,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-549426422,549426422,
Sjors,2019-11-08T08:16:27Z,@sipsorcery it looks like AppVeyor is not picking up the `boost-process` package I added (after I rebased on #17364 ,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-551430268,551430268,
laanwj,2019-11-08T09:20:57Z,"Concept ACK, recent changes (test in a different way than adding a (potential security hole) RPC call, `--disable-external-signer` instead of `--without-boost-process`) definitely seem like improvements to me.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-551451359,551451359,
sipsorcery,2019-11-08T09:21:05Z,"@Sjors the mechanism I added to save the 2 minutes updating the vcpkg source each build assumes if any installed packages are cached then all required packages are installed. As you've highlighted that's not a great assumption. \n\nI'll come up with a fix pronto.\n\n",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-551451404,551451404,
Sjors,2019-11-11T16:49:33Z,"Rebased after AppVeyor improvement in #17416. My `ax_boost_process` PR has been merged upstream, but I missed a spot: https://github.com/autoconf-archive/autoconf-archive/pull/203. That doesn't have to hold this PR back though.\n\n",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-552522731,552522731,
Sjors,2019-11-19T18:15:23Z,I cherry-picked  #17520 to ignore the compiler error due to an unused variable in Boost 1.70. Alternatively we can upgrade to Boost 1.71.,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-555637503,555637503,
Sjors,2020-01-16T14:53:14Z,"I made a separate PR to bump Boost, as that seems to be causing some CI issues: #17941",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-575187434,575187434,
Sjors,2020-01-24T16:34:39Z,"Travis fails: https://travis-ci.org/bitcoin/bitcoin/jobs/641302549\n\n```\nRunning 2 test cases...\n2956Test cases order is shuffled using seed: 899780953\n2957Entering test module ""Bitcoin Core Test Suite""\n2958test/system_tests.cpp(11): Entering test suite ""system_tests""\n2959test/system_tests.cpp(20): Entering test case ""run_command""\n29602020-01-24T11:25:50Z Seed: Setting random seed f",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-578204339,578204339,
Sjors,2020-01-28T10:14:13Z,"Looks like valgrind finds an issue, but I'm not sure how to interpret the result:\n\n```sh\nvalgrind --suppressions=contrib/valgrind.supp --leak-check=full src/test/test_bitcoin --run_test=system_tests\n```\n\n```\n==1639== Memcheck, a memory error detector\n==1639== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1639== Using Valgrind-3.15.0 and LibVEX; rerun with -h f",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-579173285,579173285,
Sjors,2020-01-28T15:37:14Z,"I added some additional checks and now Travis (with valgrind) is happy: https://travis-ci.org/bitcoin/bitcoin/builds/642905548. It looks like valgrind was actually helpful here, because the mysterious failures I was seeing previously in https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-549119510 are also gone. I no longer need to skip Windows, macOS and ARM Travis builds.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-579304916,579304916,
Sjors,2020-04-27T14:03:11Z,"Instead of bumping Boost to 1.72 I added a small patch to get rid of the unused variable in Boost Process (needed for `./configure --enable-werror`). Now that descriptor wallets are merged, this should be ready for review, as one of the prerequisites for HWI support.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-620007105,620007105,
jb55,2020-04-28T16:53:57Z,"Concept ACK, weak Boost NACK but in the absence of a better alternative perhaps its fine for now. but surely it wouldn't be difficult to make a few small, well tested functions that execute external commands on each OS? It wouldn't need to be fancy or full featured like https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-462370972.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-620729797,620729797,
Sjors,2020-04-28T18:19:35Z,"> surely it wouldn't be difficult to make a few small, well tested functions that execute external commands on each OS\n\nMaybe merging this use of Boost will motivate more people to actually try and do that :-)",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-620774760,620774760,
instagibbs,2020-05-22T19:41:14Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-632884165,632884165,
MarcoFalke,2020-06-01T12:58:33Z,"Is it required that the signer can run arbitrary system commands in the name of bitcoind when instead some well defined interface could be defined? Or more generally, to better understand the motivation behind this pull request, I'd like to see which other options have been explored and discarded (and why).",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-636846542,636846542,
Sjors,2020-06-01T13:57:55Z,"`runCommandParseJSON` is not exposed anywhere until #16546. That PR is indeed limited to very specific commands. It lets you specify a script location, but the commands themselves (e.g. `signtx`) and expected response format are hard coded. An earlier version of this PR did allow arbitrary commands, though only on regtest, through a `runcommand` RPC. This was dropped because of security concerns (",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-636875868,636875868,
MarcoFalke,2020-06-01T14:03:12Z,"Fair enough. And the command is static and supplied at startup in the bitcoin.conf file (just like walletnotify), right?",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-636878545,636878545,
Sjors,2020-06-01T14:37:14Z,"@MarcoFalke yes, at least in #16546 it's set through `-signer`. #16549 lets you configure it from the GUI without a restart, but that PR is still draft.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-636896652,636896652,
MarcoFalke,2020-06-01T16:25:31Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-636968831,636968831,
Sjors,2020-06-10T15:49:42Z,"It seems Travis decided not to run this time. I rebased #16546 on top of this, and Travis does run there...",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-642097557,642097557,
promag,2020-06-11T23:36:07Z,Tested ACK 6878673311d1081d804e2ac888473ddca3baa3a0 on macos. Are you considering supporting parsing multiline json?,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-642982446,642982446,
fanquake,2020-06-12T06:14:58Z,"Reading through the discussion here, it's still unclear to me why this is opt-out rather than opt-in. I don't understand the comment [here](https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-548437890):\n> On the other hand, perhaps this can be merged faster if it's off by default. In that case I'll open a separate PR to switch the default; which is necessary to make external signer funct",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-643086741,643086741,
Sjors,2020-06-12T09:01:08Z,"So there's 3 scenarios:\n1. binary download\n2. compiled when boost::process is absent\n3. compiled when boost::process is present\n\nI mainly considered (1) and (2), because I don't think requiring self compilation for GUI features makes sense. \n\nIf you have a strong preference for turning it off by default for (3) I can do that. However, it's unusual for features that are shipped in bin",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-643161334,643161334,
Sjors,2020-06-16T13:35:51Z,"I made `boost::process` opt-in, and switched all CI instances to use `--with-boost-process` (except win64). It's not listed in the configure summary but you can tell it works from the number of tests run by `test_bitcoin --run_test=system_test`.\n\nThe next PR in this series (RPC support) will also be opt-in: `--enable-external-signer`. This will be included in the configure summary and, when en",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-644770082,644770082,
jonatack,2020-06-19T19:12:09Z,"Concept ACK, will review shortly",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-646822813,646822813,
Sjors,2020-06-25T17:00:36Z,"Thanks, rebased and addressed nits.\n\n> I did not read the middle 137 comments hidden by GitHub\n\nYou don't know what you're missing :-)",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-649703561,649703561,
Sjors,2020-06-29T17:21:10Z,"A day not spent rebasing, is a day not lived... (ok, this one was trivial)",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-651254301,651254301,
Sjors,2020-07-02T18:02:17Z,"Did I mention I love rebasing? :-)\n\nI added it to the configure summary. Also added `std::err` content to the exception message.\n\n@achow101 wrote:\n\n> Instead of explicitly opting in, I would prefer boost process was used if it is available, like we do for miniupnp and zmq.\n\nSo do I, but @fanquake didn't agree:\n\n> Even if it has not necessarily been the case in the past, I'd muc",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-653147950,653147950,
promag,2020-07-16T23:01:01Z,"appveyor failed with\n```\n\nC:/projects/bitcoin/src/test/system_tests.cpp(28): error: in ""system_tests/run_command"": check ex.what() == std::string(""execve failed: No such file or directory"") has failed [ CreateProcess failed: The system cannot find the file specified. != execve failed: No such file or directory]\n```\n\n> So for now my aim is to switch to opt-out once the GUI feature lands",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-659722160,659722160,
MarcoFalke,2020-07-17T15:01:13Z,Looks like appveyor doesn't like this https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/34093575#L811,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-660155898,660155898,
Sjors,2020-07-17T19:40:23Z,Rebased and hopefully made peace with AppVeyor,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-660303151,660303151,
hebasto,2020-07-19T16:06:04Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-660668767,660668767,
Sjors,2020-07-21T11:45:00Z,"Thanks @hebasto, I'll apply those suggestions if I need to rebase again.",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-661806448,661806448,
Sjors,2020-07-30T11:02:34Z,Rebased and addressed @hebasto's comments.,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-666299345,666299345,
Sjors,2020-07-31T13:34:46Z,"I think the sanatizer failure is unrelated. Restarted. Log for reference: https://cirrus-ci.com/task/5039271566376960\n",https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-667122596,667122596,
achow101,2020-07-31T20:20:30Z,ACK 31cf68a3ad1f0a5537c8419e2912b55fbfb88fa0,https://github.com/bitcoin/bitcoin/pull/15382#issuecomment-667339982,667339982,
MarcoFalke,2019-02-12T16:20:36Z,Why is this RPC exposed? For testing purposes? It should be a unit test in that case.,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r256031640,256031640,src/rpc/misc.cpp
Sjors,2019-02-12T16:28:26Z,"It's restricted to regtest (similar to `setmocktime`). Main reasons I didn't build a unit test:\n1. no idea how\n2. potentially creates even more cross-platform headaches\n3. `runCommand` is also only tested via functional tests (via `blocknotify`, etc)",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r256035462,256035462,src/rpc/misc.cpp
practicalswift,2019-02-13T10:55:31Z,Wrong indentation :-),https://github.com/bitcoin/bitcoin/pull/15382#discussion_r256343233,256343233,test/functional/mocks/command.py
practicalswift,2019-02-13T10:56:41Z,This is redefining `args` from the outer scope.,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r256343651,256343651,test/functional/mocks/command.py
MarcoFalke,2019-02-13T13:51:01Z,"```suggestion\n                    {""command"", RPCArg::Type::STR, RPCArg::Optional::NO, ""Command must return JSON\n""},\n```",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r256402540,256402540,src/rpc/misc.cpp
MarcoFalke,2019-03-06T20:18:05Z,Needs rebase and all those ugly hunks dropped in this file,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r263117286,263117286,src/Makefile.test.include
Sjors,2019-03-07T18:59:26Z,"Hooray, I was able to drop 829171fa3182db545d9a07834fa1c2006fa01b6e",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r263522044,263522044,src/Makefile.test.include
practicalswift,2019-03-25T08:46:57Z,"This does not have to be a method, right? Could be a function instead?",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r268533578,268533578,test/functional/test_framework/test_framework.py
promag,2019-09-28T08:34:42Z,"> potentially creates even more cross-platform headaches\n\nWhat you mean? Because of the command itself?\n",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r329302645,329302645,src/rpc/misc.cpp
promag,2019-09-28T08:37:39Z,Will this be used out of RPC? Otherwise could be moved to src/rpc/util.h?,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r329302744,329302744,src/util/system.cpp
promag,2019-09-28T08:39:52Z,"nit, wrong `prog=`.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r329302797,329302797,test/functional/mocks/command.py
Sjors,2019-10-10T14:00:33Z,"Yes, this be used by the wallet (including from the GUI).",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r333536945,333536945,src/util/system.cpp
promag,2019-10-10T15:38:16Z,"Typo, witch.\n\nAlso, could say what happens if the output can't be parsed.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r333593463,333593463,src/util/system.h
promag,2019-10-10T15:42:49Z,"@Sjors how about supporting `-exec ""cmd""` in bitcoin_test binary (or in any other test binary), then that could be used in the functional test (instead of this RPC).",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r333595853,333595853,src/rpc/misc.cpp
practicalswift,2019-10-10T15:58:02Z,"> Typo, witch.\n\nWhich, seems like like a typo witch hunt. ",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r333604100,333604100,src/util/system.h
promag,2019-10-10T16:05:26Z,"Ah! I wanted to type ""with"".",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r333607833,333607833,src/util/system.h
practicalswift,2019-10-22T20:47:36Z,Can we check for `-regtest` explicitly instead of implicitly via `fPowNoRetargeting`? Explicit feels better than implicit when it comes to enabling remote execution :),https://github.com/bitcoin/bitcoin/pull/15382#discussion_r337741996,337741996,src/rpc/misc.cpp
Sjors,2019-10-23T08:18:25Z,Done,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r337907204,337907204,src/rpc/misc.cpp
ryanofsky,2019-10-31T11:33:05Z,"In commit ""configure: Clone ax_boost_chrono to ax_boost_process"" (0e019caf5fb5b86bbbf7c23edc43be5a4313ae85)\n\nWhere did this file come from? Is it copied from some upstream source? If there are bugfixes or updates, how will we incorporate them here? If there are bugfixes here, will we send them upstream? This seems similar to files at https://github.com/autoconf-archive/autoconf-archive/tree/ma",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341087261,341087261,build-aux/m4/ax_boost_process.m4
ryanofsky,2019-10-31T11:37:51Z,"In commit ""configure: add --enable-external-signer"" (ec6af5d1c993d584861be4ce6a0f5188f1af73af)\n\n""but cannot be built"" is really vague, could say ""but requires Boost.Pocess""",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341089111,341089111,configure.ac
ryanofsky,2019-10-31T11:46:59Z,"In commit ""configure: add --enable-external-signer"" (ec6af5d1c993d584861be4ce6a0f5188f1af73af)\n\nAt first glance there seems to be little reason for a build flag `--enable-external-signer` to exist when the user will have to explicitly enable and configure the feature at runtime anyway. But the reason for the build flag seems to be that older versions of boost that we support don't include Boos",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341092693,341092693,configure.ac
ryanofsky,2019-10-31T11:52:22Z,"In commit ""configure: add --enable-external-signer"" (ec6af5d1c993d584861be4ce6a0f5188f1af73af)\n\nShould change `USE_EXTERNAL_SIGNER` to `ENABLE_EXTERNAL_SIGNER`. `USE_` is appropriate if the flag toggles use of an external library (configure `--with-` option). `ENABLE_` is appropriate if flag toggles a feature our application (configure `--enable-` option, https://autotools.io/autoconf/argument",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341094876,341094876,configure.ac
ryanofsky,2019-10-31T12:04:05Z,"I think it's ok to have this RPC only enabled in regtest. If you wanted to add more protection against misuse, you could disable it without `gArgs.GetBoolArg(""-enable-unsafe-runcommand-rpc"", false)` or similar.\n\nIf you did want to drop the RPC and just write a unit test for `runCommandParseJSON`, I don't think it would be difficult to do by just having the unit test write a temporary json file",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341099265,341099265,src/rpc/misc.cpp
ryanofsky,2019-10-31T12:10:07Z,"In commit ""[util] add runCommandParseJSON"" (82079a04e6505424bbcb4b030a81d368933d24a7)\n\nNaming convention for argument and variables in this function could use snake_case instead of camelCase and drop strHungarianNotationPrefixes",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341101501,341101501,src/util/system.cpp
ryanofsky,2019-10-31T12:28:42Z,"In commit ""configure: add --enable-external-signer"" (ec6af5d1c993d584861be4ce6a0f5188f1af73af)\n\nBefore we actually check in code making this flag useful, the `./configure --help` text should say `(incomplete, experimental)` or similar to avoid suggesting the build will support a feature that isn't actually usable.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341108710,341108710,configure.ac
ryanofsky,2019-10-31T12:30:28Z,"In commit ""configure: add --enable-external-signer"" (ec6af5d1c993d584861be4ce6a0f5188f1af73af)\n\nThis is pretty misleading to print before the feature actually implemented. Would suggest commenting this out by default to avoid confusion.\n\nEDIT: Alternately you could drop `--enable-external-signer` replacing it with `--with-boost-process` instead and printing `with Boost.Process = $use_boost",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341109367,341109367,configure.ac
Sjors,2019-10-31T15:30:33Z,@luke-jr?,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341207204,341207204,build-aux/m4/ax_boost_process.m4
Sjors,2019-10-31T15:32:02Z,"I should also rename the commit message to `--disable-external-signer` given the default is enable when a recent enough Boost version is found. I'll update the version info as well, although I believe it will throw if you try `--enable-external-signer` on a old version of Boost.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341208109,341208109,configure.ac
Sjors,2019-10-31T15:33:15Z,Any tips for efficiently renaming a constant accross multiple commits?,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341208797,341208797,configure.ac
Sjors,2019-11-01T18:15:42Z,"I swapped it out in favor of a more recent boost::system based example, listed the changes, and made an upstream PR: https://github.com/autoconf-archive/autoconf-archive/pull/202 ",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341693328,341693328,build-aux/m4/ax_boost_process.m4
Sjors,2019-11-01T18:22:25Z,"Added, and clarified the commit to indicate external signer is an upcoming feature.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341695922,341695922,configure.ac
Sjors,2019-11-01T20:42:02Z,"To rename in each commit:\n```sh\ngit rebase -i HEAD~5 --exec 'git diff --name-only --diff-filter=AMC HEAD~ | xargs sed -i ""s/USE_EXTERNAL_SIGNER/ENABLE_EXTERNAL_SIGNER/g""; git commit -a --amend --no-edit'\n```\n\nTo rename messages:\n```sh\ngit filter-branch -f --msg-filter 'sed -e ""s/USE_EXTERNAL_SIGNER/ENABLE_EXTERNAL_SIGNER/g""'  HEAD~5..HEAD\n```\n\nI wasn't able to get `filter-branc",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341743556,341743556,configure.ac
ryanofsky,2019-11-01T22:15:47Z,"Extra space indenting the line? And also the one above assuming tabs are supposed to be 4 spaces.\n\n",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341769239,341769239,build-aux/m4/ax_boost_process.m4
Sjors,2019-11-02T19:35:16Z,"I commented this line out, but leaving `--enable-external-signer` in place (and keeping the indentation change).",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r341823294,341823294,configure.ac
Sjors,2020-01-28T14:10:18Z,Valgrind warns here: `==22385== Warning: invalid file descriptor -1 in syscall close()` during the test with `std::in`.,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r371823316,371823316,src/util/system.cpp
fjahr,2020-04-28T13:05:46Z,"I was thinking that throwing the function name at the user might not be helpful for most of them. Similar below, it might be confusing to give a JSON error when the workflow is automatic and the user is not handling JSON themselves. But I guess there will be better, more specific error messages used when this is utilized in external signer support.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r416595972,416595972,src/util/system.cpp
Sjors,2020-04-28T16:30:24Z,"Indeed, consumers should catch this error and do something more useful. There's different ways to do that, e.g. subclassing `std::runtime_error` or using a return enum like `TransactionError`, but we can figure that out later.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r416755280,416755280,src/util/system.cpp
MarcoFalke,2020-05-31T22:01:08Z,Could mention that this is a workaround for https://github.com/bitcoin/bitcoin/issues/19128 ?,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r432988630,432988630,src/test/system_tests.cpp
Sjors,2020-06-01T12:31:10Z,Done and rebased.,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r433206237,433206237,src/test/system_tests.cpp
jonatack,2020-06-22T14:56:52Z,bfed9cdd nit: sort,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r443621448,443621448,src/Makefile.test.include
jonatack,2020-06-22T15:02:47Z,"bfed9cdd\n```suggestion\nUniValue RunCommandParseJSON(const std::string& str_command, const std::string& str_std_in="""");\n```",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r443625876,443625876,src/util/system.h
achow101,2020-06-29T20:03:02Z,"In commit `[util] add RunCommandParseJSON`\n\nWe should be piping stderr too. In HWI, this is used for some info to the user that we can discard here. But on failure, it can provide useful debugging information that we would want to see in the exception.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r447220680,447220680,src/util/system.cpp
achow101,2020-06-29T20:07:56Z,"In commit `[util] add RunCommandParseJSON`\n\nMaybe use the `false` command which always fails? Or is the intent to try a command that probably won't exist?",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r447223107,447223107,src/test/system_tests.cpp
Sjors,2020-07-02T18:03:57Z,"~Keeping it for now, but I suppose `false` could work too, assuming it exists on Windows.~\n\nWhen a command doesn't exist, Boost::Process intercepts this and throws its own exception.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r449186106,449186106,src/test/system_tests.cpp
hebasto,2020-07-19T16:40:24Z,"This part of the OP\n> ... use `./configure --without-boost-process` to opt out...\n\nshould be inverted, right?",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r456929281,456929281,configure.ac
hebasto,2020-07-19T16:54:56Z,"7588341b8a88370ce3382799d739063965376301\nMay I suggest to use [`AS_IF`](https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/autoconf.html#index-AS_005fIF-1574) macro for [those](https://autotools.io/autoconf/m4sh.html) reasons?",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r456930644,456930644,configure.ac
hebasto,2020-07-19T17:11:57Z,"A typo seems remain :)\n```suggestion\n * Execute a command which returns JSON, and parse the result.\n```",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r456932313,456932313,src/util/system.h
Sjors,2020-07-21T11:44:32Z,Fixed,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r458034063,458034063,configure.ac
hebasto,2020-07-30T12:54:06Z,Is a tab character placed here intentionally?,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r462974225,462974225,depends/packages/boost.mk
Sjors,2020-07-31T11:38:37Z,"Just copy-pasted that line... Fixed, since I had to rebase again.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r463560514,463560514,depends/packages/boost.mk
promag,2020-08-02T00:51:12Z,"nit, could mention it throws if command fails (failure return code) or JSON parser fails.",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r464015687,464015687,src/util/system.h
ryanofsky,2020-08-03T15:48:48Z,"In commit ""[util] add RunCommandParseJSON"" (31cf68a3ad1f0a5537c8419e2912b55fbfb88fa0)\n\nThis code seems nonsensical, and I spent like an hour trying to figure out how it might be working. I think what is happening is that boost's [build_arg](https://github.com/boostorg/process/blob/4fd88876013a9547b8bc7183d0096c86e9a1141f/include/boost/process/detail/posix/basic_cmd.hpp#L53) function is buildin",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r464500701,464500701,src/test/system_tests.cpp
Sjors,2020-08-04T09:16:28Z,Any lasting changes to this file would have to made upstream: https://www.gnu.org/software/autoconf-archive/ax_boost_process.html,https://github.com/bitcoin/bitcoin/pull/15382#discussion_r464915040,464915040,build-aux/m4/ax_boost_process.m4
Sjors,2020-08-04T09:21:20Z,"""boost's weird command line splitting code and escaping rule"" are what the user has to deal with when using `-signer=` in the followup PR, so it seems reasonable to have to test use that too.\n\nI fixed a failed AppVeyor tests with this `#ifdef WIN32` line, so the code does run (and system_tests is in the [log](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/34409701#L802)).   Maybe it's",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r464917904,464917904,src/test/system_tests.cpp
ryanofsky,2020-08-04T15:19:42Z,"re: https://github.com/bitcoin/bitcoin/pull/15382#discussion_r464915040\n\n> Any lasting changes to this file would have to made upstream: [gnu.org/software/autoconf-archive/ax_boost_process.html](https://www.gnu.org/software/autoconf-archive/ax_boost_process.html)\n\nOops, sorry, that was a stale review comment. But good to see changes made are upstream in https://github.com/autoconf-archive/",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r465130675,465130675,build-aux/m4/ax_boost_process.m4
ryanofsky,2020-08-04T17:27:16Z,"re: https://github.com/bitcoin/bitcoin/pull/15382#discussion_r464500701\n\nI think the current PR is ok, and any followup can happen later. This is kind of a mess, but just read details below if interested in what I think is wrong here.\n\nI think it is bad if an external signer option isn't going to execute commands as straight shell commands the way `-alertnotify` `-blocknotify` and `-wallet",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r465212138,465212138,src/test/system_tests.cpp
ryanofsky,2020-08-04T17:47:00Z,"In commit ""[build] make boost-process opt-in"" (c47e4bbf0b44f2de1278f9538124ec98ee0815bb)\n\nThis seems ok, and I'm assuming it's a temporary thing, but I think ideally you wouldn't need to mess with library detection to build bitcoin with a feature turned off. I.e. instead of `#if HAVE_BOOST_PROCESS` in the code it would be better to have `#if ENABLE_EXTERNAL_SIGNER`. So if external signing wasn",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r465223709,465223709,configure.ac
ryanofsky,2020-08-04T17:59:38Z,"In commit ""[util] add RunCommandParseJSON"" (31cf68a3ad1f0a5537c8419e2912b55fbfb88fa0)\n\nI think it would be better not to require output to be formatted on a single line. Also better to trigger an error if these is unexpected data after the first line:\n\n```diff\n--- a/src/util/system.cpp\n+++ b/src/util/system.cpp\n@@ -1188,10 +1188,8 @@ UniValue RunCommandParseJSON(const std::string& st",https://github.com/bitcoin/bitcoin/pull/15382#discussion_r465230853,465230853,src/util/system.cpp
