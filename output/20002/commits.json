[
  {
    "sha": "6df7882029854f0427d84b22081018ae77e27e66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGY3ODgyMDI5ODU0ZjA0MjdkODRiMjIwODEwMThhZTc3ZTI3ZTY2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-09-23T08:23:44Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-14T12:55:55Z"
      },
      "message": "net: add peer network to CNodeStats",
      "tree": {
        "sha": "0d4b6ecedae58e3a28b8768817a544808f841e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d4b6ecedae58e3a28b8768817a544808f841e51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6df7882029854f0427d84b22081018ae77e27e66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+G9WAACgkQT1chs9Dj\nkh3IZg/+PoB7Z7XL9CIjH2OjUoiJD3w8+OC8VFNb0dYyt24bGtOI+IQUTlJEBDFB\nYilJSx/qnhtrMbXJ5z4aa6h9Ja/PQH5yu1snTEO0wnCPQwFOZjdUDOnzJ1cuveRm\n/J+XV53+Z7sR8WC3nqsM/ZM7eg2dnxKfDPYPPQH5I9fqc5k9Yt/SfD92IdjknSov\n0vQRWpFDhYLIyEDv9zvycis+SSzaiWZBWH8VvVm8iWOFiYsvdUcr+L4yhSQjTL1L\nUsIeEPwdUfPZOuKjW2b4ngdCVDW/shViTaRKJ+lg5P3jbppFLq0kyM2syvyLF5pR\nszVb2Wla/N6QFbS37WhWsDynqpkb7UgNuXB5azvMlSoJ7n581mfcvktffppIKdUI\nA+yRLsR1pKMVoxiJe8UoOElKcna44xZcUM1FkenNLVSig+2Is34nO0dL52taacTr\nWQUcHrcz1iD+Miiedk9zQfg1C+OyQongmeYqFdRlhyoyEwF6aeq8NPbCrrq+003f\nmubOr/w38H6IEk27sTlHS06VLXky03JMjIMPB9X8Wi6+7voqh5Wtk4ycqujNzoG1\nn0bcMpCsFrU5ib4iyDiaqFtZIauq154PVQYdUwYWlT5kwedEdEfEqcaZm/0MwEGj\nW220HNPJTXG1hea1yXjn3X7dhlhZBwDTYL3pH2TLxe3f7EjUcwg=\n=mTIG\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGwK6E8VXfMPZ+Prpf7XPekcsPqMjVYkGKXJF2XodGidCP/wEHJ2zZ1/jc3W\nEITAbMxGt8cI8CB4wzLW7Zdyv08x0tHwUO2Ph/MthWvCGlVeeQ3RolFGyQjxBF+G\n9WLwCDfTT/WFM+9eAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BCqQl9Qoy8XrcaRoRNeXtMiCPAgafCof1mK\nVsfAynI3H5oBot96tjjuL8vsJbUbZW75+0gI8QRfhvVi8AgX6Z357D0v7QCD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ//wEKxhHhA98qYiEcc3zY8x1ysI8CC5ZExsrDvIUupxGqPalLtAEQ3mR/PlF8V1\ncU65QHfbYgjxBF+G9WTwCL7eFzo4k9oDAIPf4w0u+QyOKShodHRwczovL2Zpbm5l\neS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t8BDBp4BaIhrzuPhrPFJ88YmsCPAg\nBTgtm8a6D+ZMHnuitf3FNC1FClKqnfWq9m2DG617lVUI8CB5pGdjC/aWWkw2zFhz\nyDvs4WC/qLte8l51olHxpgtfiQjxBF+G9WLwCD9RFM+eT/nkAIPf4w0u+QyOIyJo\ndHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0d4b6ecedae58e3a28b8768817a544808f841e51\nparent f79a4a895279ba4efa43494270633f94f7d18342\nauthor Jon Atack <jon@atack.com> 1600849424 +0200\ncommitter Jon Atack <jon@atack.com> 1602680155 +0200\n\nnet: add peer network to CNodeStats\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6df7882029854f0427d84b22081018ae77e27e66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6df7882029854f0427d84b22081018ae77e27e66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6df7882029854f0427d84b22081018ae77e27e66/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f79a4a895279ba4efa43494270633f94f7d18342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f79a4a895279ba4efa43494270633f94f7d18342",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f79a4a895279ba4efa43494270633f94f7d18342"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5db7fc9e730496c61607405370a27592778ca4bf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6df7882029854f0427d84b22081018ae77e27e66/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6df7882029854f0427d84b22081018ae77e27e66/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6df7882029854f0427d84b22081018ae77e27e66",
        "patch": "@@ -552,6 +552,7 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     X(nServices);\n     X(addr);\n     X(addrBind);\n+    stats.m_network = GetNetworkName(ConnectedThroughNetwork());\n     stats.m_mapped_as = addr.GetMappedAS(m_asmap);\n     if (m_tx_relay != nullptr) {\n         LOCK(m_tx_relay->cs_filter);"
      },
      {
        "sha": "eec48a7e95e014cbfa1608b4d021046e53139cc1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6df7882029854f0427d84b22081018ae77e27e66/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6df7882029854f0427d84b22081018ae77e27e66/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6df7882029854f0427d84b22081018ae77e27e66",
        "patch": "@@ -706,6 +706,8 @@ class CNodeStats\n     CAddress addr;\n     // Bind address of our side of the connection\n     CAddress addrBind;\n+    // Name of the network the peer connected through\n+    std::string m_network;\n     uint32_t m_mapped_as;\n     std::string m_conn_type_string;\n };"
      }
    ]
  },
  {
    "sha": "4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTM4YTEwOWFkZjEzZjJjNjBhNTBmMDhkNGNjOWRkYjhkN2RlZDk2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-09-23T09:27:54Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-14T12:56:03Z"
      },
      "message": "rpc, test: expose CNodeStats network in RPC getpeerinfo",
      "tree": {
        "sha": "d106b1b1d9463134825f6478589c7901c9916b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d106b1b1d9463134825f6478589c7901c9916b38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+G9WMACgkQT1chs9Dj\nkh0ggRAAlOAMDex4VZMoiA/PjdG4+tBzviuso5aW1zqQTqbZa8JDBfVVjpDeKFUm\nieOzatMDdJWFHdjl8QDwC95kdS7xE510+7PylJc+6btR+qrnxDEb6AZ/G13n1KJE\nA8RT+2vPh+6ORSv+OFUjil4lA38gJqcgLgSLhvq5lLAKtLJrADOgd/14OJcAzNAW\n5GD0ewJA70/gSzIDAN+4eV1R5/JfC7rrGppcPi6YEzWR4C2AcXFHcWC5ief/dBn8\nTBgUV2RWMoAC0nzqt1TEGPIdHn2gpn7rTCUPmtpjLabBcnUv1/yr/sz4OPg5fuGw\nV7tYLEgnr8M0qGnmYrGWiXTh6AOqblK0b/7ksin+coyPQcN/DHhXaRBV7URIdwAa\n6D/nPML+NXuWb9r1Ect83b8kyJnKByCBSAMcxbiIJU9f63OsVFBrs3sgD4JHnAP/\nev6QakMRRP7HNLO8v/mI4l+DcY6IFWAgLx9UhMs8CND/DhUursHaSxQVeXQeF04M\nedb+xkpeyYM90Rh/cg/CJkGdQVNlUE21Xa8IuUHyl+xlMtlFw2LNL53geks1ngsD\nZ2AemGopG9Rm73pB0W6gTN8ajZSV3CXBZJaANH4upbp6GQ7/Vbamu2QjuIbf1fOq\nz2lFC85w3ILFmXvK7rx8J3JoQnQ1Tj5EgMhepS3poaVOosHvMs4=\n=2EEK\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHM+qBLfc2kQg0TALPTonn+OLr9DkekeD2OBWysvthyqCP/wEF7M1NJ/Dvs3\njMEpN9C9q0sI8SAsv/CHEyvOYW6JjSgk8YOJQrK/D3L5r1nrXnF/nymlpQjxBF+G\n9WTwCKayDgVirZw4AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQr44XBtfCIYnhNzbUE7NQywjxBF+G9WbwCB5M\n1b/HV/NPAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t//AQzNZE0YiyEV3Gl6KqbfGUVwjxII7b+hYKPglMT81d0wpj2swm\nmGYMSx0+qkfFGBIL5TvzCPEgN1kwjRgr30j9w6EGFKryzE0/bQHvmy6lQOwzlclz\n50EI8QRfhvVk8Aiqa8TQxMbqugCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BD+BamCEowFm25WmPAl/jgHCPEE\nX4b1ZPAILPLDtaISnE8Ag9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree d106b1b1d9463134825f6478589c7901c9916b38\nparent 6df7882029854f0427d84b22081018ae77e27e66\nauthor Jon Atack <jon@atack.com> 1600853274 +0200\ncommitter Jon Atack <jon@atack.com> 1602680163 +0200\n\nrpc, test: expose CNodeStats network in RPC getpeerinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6df7882029854f0427d84b22081018ae77e27e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6df7882029854f0427d84b22081018ae77e27e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6df7882029854f0427d84b22081018ae77e27e66"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 38,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d095f538b4beadfb5953df81f35c305c51c3b558",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
        "patch": "@@ -94,6 +94,7 @@ static RPCHelpMan getpeerinfo()\n                             {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n                             {RPCResult::Type::STR, \"addrbind\", \"(ip:port) Bind address of the connection to the peer\"},\n                             {RPCResult::Type::STR, \"addrlocal\", \"(ip:port) Local address as reported by the peer\"},\n+                            {RPCResult::Type::STR, \"network\", \"Network (ipv4, ipv6, or onion) the peer connected through\"},\n                             {RPCResult::Type::NUM, \"mapped_as\", \"The AS in the BGP route to the peer used for diversifying\\n\"\n                                                                 \"peer selection (only available if the asmap config flag is set)\"},\n                             {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n@@ -165,10 +166,13 @@ static RPCHelpMan getpeerinfo()\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n         obj.pushKV(\"id\", stats.nodeid);\n         obj.pushKV(\"addr\", stats.addrName);\n-        if (!(stats.addrLocal.empty()))\n-            obj.pushKV(\"addrlocal\", stats.addrLocal);\n-        if (stats.addrBind.IsValid())\n+        if (stats.addrBind.IsValid()) {\n             obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+        }\n+        if (!(stats.addrLocal.empty())) {\n+            obj.pushKV(\"addrlocal\", stats.addrLocal);\n+        }\n+        obj.pushKV(\"network\", stats.m_network);\n         if (stats.m_mapped_as != 0) {\n             obj.pushKV(\"mapped_as\", uint64_t(stats.m_mapped_as));\n         }"
      },
      {
        "sha": "dfae58e860596d5da77b7f8f5ad9b4d308889f85",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 31,
        "deletions": 10,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
        "patch": "@@ -18,8 +18,9 @@\n     - proxy on IPv6\n \n - Create various proxies (as threads)\n-- Create bitcoinds that connect to them\n-- Manipulate the bitcoinds using addnode (onetry) an observe effects\n+- Create nodes that connect to them\n+- Manipulate the peer connections using addnode (onetry) and observe effects\n+- Test the getpeerinfo `network` field for the peer\n \n addnode connect to IPv4\n addnode connect to IPv6\n@@ -40,6 +41,12 @@\n from test_framework.netutil import test_ipv6_local\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n+# From GetNetworkName() in netbase.cpp:\n+NET_UNROUTABLE = \"\"\n+NET_IPV4 = \"ipv4\"\n+NET_IPV6 = \"ipv6\"\n+NET_ONION = \"onion\"\n+\n \n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -90,10 +97,16 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args=args)\n         self.start_nodes()\n \n+    def network_test(self, node, addr, network):\n+        for peer in node.getpeerinfo():\n+            if peer[\"addr\"] == addr:\n+                assert_equal(peer[\"network\"], network)\n+\n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []\n-        # Test: outgoing IPv4 connection through node\n-        node.addnode(\"15.61.23.23:1234\", \"onetry\")\n+        addr = \"15.61.23.23:1234\"\n+        self.log.debug(\"Test: outgoing IPv4 connection through node for address {}\".format(addr))\n+        node.addnode(addr, \"onetry\")\n         cmd = proxies[0].queue.get()\n         assert isinstance(cmd, Socks5Command)\n         # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n@@ -104,10 +117,12 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             assert_equal(cmd.username, None)\n             assert_equal(cmd.password, None)\n         rv.append(cmd)\n+        self.network_test(node, addr, network=NET_IPV4)\n \n         if self.have_ipv6:\n-            # Test: outgoing IPv6 connection through node\n-            node.addnode(\"[1233:3432:2434:2343:3234:2345:6546:4534]:5443\", \"onetry\")\n+            addr = \"[1233:3432:2434:2343:3234:2345:6546:4534]:5443\"\n+            self.log.debug(\"Test: outgoing IPv6 connection through node for address {}\".format(addr))\n+            node.addnode(addr, \"onetry\")\n             cmd = proxies[1].queue.get()\n             assert isinstance(cmd, Socks5Command)\n             # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n@@ -118,10 +133,12 @@ def node_test(self, node, proxies, auth, test_onion=True):\n                 assert_equal(cmd.username, None)\n                 assert_equal(cmd.password, None)\n             rv.append(cmd)\n+            self.network_test(node, addr, network=NET_IPV6)\n \n         if test_onion:\n-            # Test: outgoing onion connection through node\n-            node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n+            addr = \"bitcoinostk4e4re.onion:8333\"\n+            self.log.debug(\"Test: outgoing onion connection through node for address {}\".format(addr))\n+            node.addnode(addr, \"onetry\")\n             cmd = proxies[2].queue.get()\n             assert isinstance(cmd, Socks5Command)\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n@@ -131,9 +148,11 @@ def node_test(self, node, proxies, auth, test_onion=True):\n                 assert_equal(cmd.username, None)\n                 assert_equal(cmd.password, None)\n             rv.append(cmd)\n+            self.network_test(node, addr, network=NET_ONION)\n \n-        # Test: outgoing DNS name connection through node\n-        node.addnode(\"node.noumenon:8333\", \"onetry\")\n+        addr = \"node.noumenon:8333\"\n+        self.log.debug(\"Test: outgoing DNS name connection through node for address {}\".format(addr))\n+        node.addnode(addr, \"onetry\")\n         cmd = proxies[3].queue.get()\n         assert isinstance(cmd, Socks5Command)\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n@@ -143,6 +162,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             assert_equal(cmd.username, None)\n             assert_equal(cmd.password, None)\n         rv.append(cmd)\n+        self.network_test(node, addr, network=NET_UNROUTABLE)\n \n         return rv\n \n@@ -197,5 +217,6 @@ def networks_dict(d):\n                 assert_equal(n3[net]['proxy_randomize_credentials'], False)\n             assert_equal(n3['onion']['reachable'], False)\n \n+\n if __name__ == '__main__':\n     ProxyTest().main()"
      }
    ]
  },
  {
    "sha": "5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTMzZmFiMzdlODY3OWUxZDBkMDhlYWQ0ZjVjY2NmNDk3OWRjMTVi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-09-23T08:53:33Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-14T12:56:05Z"
      },
      "message": "cli: simplify -netinfo using getpeerinfo network field",
      "tree": {
        "sha": "4a82d379cc7528b7b1c932b7bd955f9418837b76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a82d379cc7528b7b1c932b7bd955f9418837b76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+G9WUACgkQT1chs9Dj\nkh3bYg//fpKPC50xMYKpKel25yIeH6yMsE9msHTNMldiG6si1IgPqr5NjmVM7ZOg\nbWhWtR/h3ySfXMsddc5z0Fw0LHreKkCE9JmtcwPBd/nHe78tOogSKDkeFeX/ynDy\nFMVAZAMkW2s/u8so1+dP3QFj4ZZHcbl4SeGWuZLm1tLLLII8jUEZ/VC3aCPw1OjW\n+3kBiUT2C+42KPA9AVoi03nEATGC/LMXs/voumuaTtdf5oJnWnjLTdyGSvF9HEo6\nbWjfpDL17gX4xVhZM0KobSbPf0KwA4Fl1/ENHzCpn9lQVnMl9iU+GnU91JV+YjHA\n8TOGdUeWmY8rgzLA1O7CiPT5T+VJU+mX7V1kggWcrS7A8jceCpj9qVe4HauGFEog\nm+NE9FPZ3wy3+WycxfqInoJtj+qPmjArRZ5dR00VmQVANsXk9JkQGH06RSY3HFfd\nkSmDXVG4ShGb85rCb58H+8K0NrhIto15IFnSP39ivmpVVdPMKuS7OPGShMUaMaCy\n2jwoI2TaOuyHRMAy0XmUY+qIynnKQiAKP89hoYn+CNg8d8LFo2tikl2mqXu3y3/4\nQ3FwFSXMb92iZhzORE3kQm6YwZgUqdZnpWzkvf2vzeok5s/clZkAMlxrk73spjde\nMB01kWrfBXTqEKtY/iZKEzyklrihNsyGPi8qVxhjxJ44QpyBrmU=\n=SR0E\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGNEwP6LnA6DEntveo1QI6p1v+qoCcMKjFYvQO8Zu7VNCP/wEAz4M+lyWqQ+\nnD+ZjI/xNHoI8QRfhvVm8AgKDbsTyBLcCwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wECNftncM78z/bWmW5tfB0pMI8SDmbckk\nM6hsqhinx0PaKUoN1GhjMn0eU4Z9pmc/6JWA5wjxBF+G9WjwCIM0Va4AFbWCAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n//AQUxhE2hH2m0eeKayvx5KHXwjxBF+G9WbwCHlcgS/NN9fpAIPf4w0u+QyOLi1o\ndHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEHQt\n7n5sL+glVeXSf1VVTlgI8QRfhvVm8AgW8zNKQGC9TQCD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 4a82d379cc7528b7b1c932b7bd955f9418837b76\nparent 4938a109adf13f2c60a50f08d4cc9ddb8d7ded96\nauthor Jon Atack <jon@atack.com> 1600851213 +0200\ncommitter Jon Atack <jon@atack.com> 1602680165 +0200\n\ncli: simplify -netinfo using getpeerinfo network field\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5133fab37e8679e1d0d08ead4f5cccf4979dc15b/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4938a109adf13f2c60a50f08d4cc9ddb8d7ded96"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 13,
      "deletions": 49
    },
    "files": [
      {
        "sha": "98ce049156413a6ba93b36d7198f5efc6a3d8ab8",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 49,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5133fab37e8679e1d0d08ead4f5cccf4979dc15b/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5133fab37e8679e1d0d08ead4f5cccf4979dc15b/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
        "patch": "@@ -39,8 +39,6 @@ static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n-static const std::string ONION{\".onion\"};\n-static const size_t ONION_LEN{ONION.size()};\n \n /** Default number of blocks to generate for RPC generatetoaddress. */\n static const std::string DEFAULT_NBLOCKS = \"1\";\n@@ -298,30 +296,10 @@ class GetinfoRequestHandler: public BaseRequestHandler\n class NetinfoRequestHandler : public BaseRequestHandler\n {\n private:\n-    bool IsAddrIPv6(const std::string& addr) const\n-    {\n-        return !addr.empty() && addr.front() == '[';\n-    }\n-    bool IsInboundOnion(const std::string& addr_local, int mapped_as) const\n-    {\n-        return mapped_as == 0 && addr_local.find(ONION) != std::string::npos;\n-    }\n-    bool IsOutboundOnion(const std::string& addr, int mapped_as) const\n-    {\n-        const size_t addr_len{addr.size()};\n-        const size_t onion_pos{addr.rfind(ONION)};\n-        return mapped_as == 0 && onion_pos != std::string::npos && addr_len > ONION_LEN &&\n-               (onion_pos == addr_len - ONION_LEN || onion_pos == addr.find_last_of(\":\") - ONION_LEN);\n-    }\n     uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n     bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n     bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n     bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n-    enum struct NetType {\n-        ipv4,\n-        ipv6,\n-        onion,\n-    };\n     struct Peer {\n         int id;\n         int mapped_as;\n@@ -334,30 +312,21 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         double min_ping;\n         double ping;\n         std::string addr;\n+        std::string network;\n         std::string sub_version;\n-        NetType net_type;\n         bool is_block_relay;\n         bool is_outbound;\n         bool operator<(const Peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n     };\n-    std::string NetTypeEnumToString(NetType t)\n-    {\n-        switch (t) {\n-        case NetType::ipv4: return \"ipv4\";\n-        case NetType::ipv6: return \"ipv6\";\n-        case NetType::onion: return \"onion\";\n-        } // no default case, so the compiler can warn about missing cases\n-        assert(false);\n-    }\n     std::string ChainToString() const\n     {\n         if (gArgs.GetChainName() == CBaseChainParams::TESTNET) return \" testnet\";\n         if (gArgs.GetChainName() == CBaseChainParams::REGTEST) return \" regtest\";\n         return \"\";\n     }\n public:\n-    const int ID_PEERINFO = 0;\n-    const int ID_NETWORKINFO = 1;\n+    static constexpr int ID_PEERINFO = 0;\n+    static constexpr int ID_NETWORKINFO = 1;\n \n     UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n     {\n@@ -394,29 +363,22 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n \n         for (const UniValue& peer : getpeerinfo.getValues()) {\n-            const std::string addr{peer[\"addr\"].get_str()};\n-            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n-            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n             const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n             const bool is_inbound{peer[\"inbound\"].get_bool()};\n-            NetType net_type{NetType::ipv4};\n+            const std::string network{peer[\"network\"].get_str()};\n             if (is_inbound) {\n-                if (IsAddrIPv6(addr)) {\n-                    net_type = NetType::ipv6;\n+                if (network == \"ipv6\") {\n                     ++ipv6_i;\n-                } else if (IsInboundOnion(addr_local, mapped_as)) {\n-                    net_type = NetType::onion;\n+                } else if (network == \"onion\") {\n                     ++onion_i;\n                 } else {\n                     ++ipv4_i;\n                 }\n                 if (is_block_relay) ++block_relay_i;\n             } else {\n-                if (IsAddrIPv6(addr)) {\n-                    net_type = NetType::ipv6;\n+                if (network == \"ipv6\") {\n                     ++ipv6_o;\n-                } else if (IsOutboundOnion(addr, mapped_as)) {\n-                    net_type = NetType::onion;\n+                } else if (network == \"onion\") {\n                     ++onion_o;\n                 } else {\n                     ++ipv4_o;\n@@ -426,16 +388,18 @@ class NetinfoRequestHandler : public BaseRequestHandler\n             if (DetailsRequested()) {\n                 // Push data for this peer to the peers vector.\n                 const int peer_id{peer[\"id\"].get_int()};\n+                const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n                 const int version{peer[\"version\"].get_int()};\n-                const std::string sub_version{peer[\"subver\"].get_str()};\n                 const int64_t conn_time{peer[\"conntime\"].get_int64()};\n                 const int64_t last_blck{peer[\"last_block\"].get_int64()};\n                 const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n                 const int64_t last_send{peer[\"lastsend\"].get_int64()};\n                 const int64_t last_trxn{peer[\"last_transaction\"].get_int64()};\n                 const double min_ping{peer[\"minping\"].isNull() ? -1 : peer[\"minping\"].get_real()};\n                 const double ping{peer[\"pingtime\"].isNull() ? -1 : peer[\"pingtime\"].get_real()};\n-                peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, sub_version, net_type, is_block_relay, !is_inbound});\n+                const std::string addr{peer[\"addr\"].get_str()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, network, sub_version, is_block_relay, !is_inbound});\n                 max_peer_id_length = std::max(ToString(peer_id).length(), max_peer_id_length);\n                 max_addr_length = std::max(addr.length() + 1, max_addr_length);\n                 is_asmap_on |= (mapped_as != 0);\n@@ -457,7 +421,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n                     \"%3s %5s %5s%6s%7s%5s%5s%5s%5s%7s%*i %*s %-*s%s\\n\",\n                     peer.is_outbound ? \"out\" : \"in\",\n                     peer.is_block_relay ? \"block\" : \"full\",\n-                    NetTypeEnumToString(peer.net_type),\n+                    peer.network,\n                     peer.min_ping == -1 ? \"\" : ToString(round(1000 * peer.min_ping)),\n                     peer.ping == -1 ? \"\" : ToString(round(1000 * peer.ping)),\n                     peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),"
      }
    ]
  },
  {
    "sha": "82fd40216c70037480150d2b62e2b58c57784546",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmZkNDAyMTZjNzAwMzc0ODAxNTBkMmI2MmUyYjU4YzU3Nzg0NTQ2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-02T20:57:40Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-14T12:56:07Z"
      },
      "message": "refactor: promote some -netinfo localvars to class members",
      "tree": {
        "sha": "2c4d2ce09891d36089b0c5811601df3e65a78484",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c4d2ce09891d36089b0c5811601df3e65a78484"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82fd40216c70037480150d2b62e2b58c57784546",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+G9WcACgkQT1chs9Dj\nkh29MRAAoF/KI31odRXGrSP6CCR7SQenoMcg+z32XxwTfj0RaWnwhj5+wBo4uf97\nao6ioqV4cZC/hgg05pgRKCHutrrVH7J3Ky04PVWKYEk0CmwVB7YbLhBYPqydYh6U\nlSHfny2J360cMaDUF9koOZaILCfHlwd0Yl4EI3ito8BhJ/ulf4Mvzd0h0VvfEbQI\nj2RGwwOqPSzJmxgtNFfIt37MGhFYUk9SD6t+H87wha9banmk3dmRfOZcxVR49jt3\nfFivlZHzWWY6RWsCJ8waCpoZIqalG6QU1sv7400PYX0Rvblp1KpjD9BoOjGmj20e\nX398izO7gCrA8DTuJSP4v/u+zU4jWrpMPRI3+hDcb8I2O5CIdm1N6Oo632EJYCKg\nGnKKI4KXHImWgctYS/LgzYwD7y3m1haJ3Li6FPUK3BsqzN8Tum+Dgb7oUKv8AZyx\ncj1834VKH2fXMwzn+6RnFU6r5G+XupKEapM/PsqvXzz9k/4LurKkUZiEGpDH26Lr\nITcjKWWMUPUgNVYag6RDxTZEDpVNoT4yCcsP7c4iSMwXX8dkZhkMGf8SlGYqsw8x\nFnHTnWeE6m4jDoHqy2e1Y9ovmuBZPAyrSBTo9Ky3pXSoBZNIqxiz7TY/xW4a1pl7\ni0umT/ptUAbsBCeF+7fljhK6jUoH8sUoi7rKH+QzWRIJZij61NU=\n=BxqL\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPzjXkQAx8GCDBtK+CjFNTmMGJXzXukx6rc+6SsazbrmCP/wEJCCIjz0GoR4\np5nBDX9j0Q4I8QRfhvVo8Ah21P9uKjkszgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEK/99qZDtU8pMWojF43T\n7YsI8QRfhvVo8AhMt0Y3RoOYgQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wELIBHMHqdTZidYHAd3Q906UI8QRfhvVq8Agr5qQy\nvrG9FQCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3\nYWxsLmNvbfAQ6BudDXqhIfJ4Peudfk57bgjxBF+G9WjwCB+LbeaXZRZxAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2c4d2ce09891d36089b0c5811601df3e65a78484\nparent 5133fab37e8679e1d0d08ead4f5cccf4979dc15b\nauthor Jon Atack <jon@atack.com> 1601672260 +0200\ncommitter Jon Atack <jon@atack.com> 1602680167 +0200\n\nrefactor: promote some -netinfo localvars to class members\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82fd40216c70037480150d2b62e2b58c57784546",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82fd40216c70037480150d2b62e2b58c57784546",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82fd40216c70037480150d2b62e2b58c57784546/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5133fab37e8679e1d0d08ead4f5cccf4979dc15b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5133fab37e8679e1d0d08ead4f5cccf4979dc15b"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "8ff285cb9bbcc1cb4ed6cec3d59ffe3c5cf49270",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82fd40216c70037480150d2b62e2b58c57784546/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82fd40216c70037480150d2b62e2b58c57784546/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=82fd40216c70037480150d2b62e2b58c57784546",
        "patch": "@@ -300,6 +300,9 @@ class NetinfoRequestHandler : public BaseRequestHandler\n     bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n     bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n     bool IsVersionSelected() const { return m_details_level == 3 || m_details_level == 4; }\n+    bool m_is_asmap_on{false};\n+    size_t m_max_addr_length{0};\n+    size_t m_max_id_length{2};\n     struct Peer {\n         int id;\n         int mapped_as;\n@@ -318,12 +321,15 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         bool is_outbound;\n         bool operator<(const Peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n     };\n+    std::vector<Peer> m_peers;\n     std::string ChainToString() const\n     {\n         if (gArgs.GetChainName() == CBaseChainParams::TESTNET) return \" testnet\";\n         if (gArgs.GetChainName() == CBaseChainParams::REGTEST) return \" regtest\";\n         return \"\";\n     }\n+    const int64_t m_time_now{GetSystemTimeInSeconds()};\n+\n public:\n     static constexpr int ID_PEERINFO = 0;\n     static constexpr int ID_NETWORKINFO = 1;\n@@ -354,12 +360,8 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         }\n \n         // Count peer connection totals, and if DetailsRequested(), store peer data in a vector of structs.\n-        const int64_t time_now{GetSystemTimeInSeconds()};\n         int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n         int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n-        size_t max_peer_id_length{2}, max_addr_length{0};\n-        bool is_asmap_on{false};\n-        std::vector<Peer> peers;\n         const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n \n         for (const UniValue& peer : getpeerinfo.getValues()) {\n@@ -399,23 +401,23 @@ class NetinfoRequestHandler : public BaseRequestHandler\n                 const double ping{peer[\"pingtime\"].isNull() ? -1 : peer[\"pingtime\"].get_real()};\n                 const std::string addr{peer[\"addr\"].get_str()};\n                 const std::string sub_version{peer[\"subver\"].get_str()};\n-                peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, network, sub_version, is_block_relay, !is_inbound});\n-                max_peer_id_length = std::max(ToString(peer_id).length(), max_peer_id_length);\n-                max_addr_length = std::max(addr.length() + 1, max_addr_length);\n-                is_asmap_on |= (mapped_as != 0);\n+                m_peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, network, sub_version, is_block_relay, !is_inbound});\n+                m_max_id_length = std::max(ToString(peer_id).length(), m_max_id_length);\n+                m_max_addr_length = std::max(addr.length() + 1, m_max_addr_length);\n+                m_is_asmap_on |= (mapped_as != 0);\n             }\n         }\n \n         // Generate report header.\n         std::string result{strprintf(\"%s %s%s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), ChainToString(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n \n         // Report detailed peer connections list sorted by direction and minimum ping time.\n-        if (DetailsRequested() && !peers.empty()) {\n-            std::sort(peers.begin(), peers.end());\n+        if (DetailsRequested() && !m_peers.empty()) {\n+            std::sort(m_peers.begin(), m_peers.end());\n             result += \"Peer connections sorted by direction and min ping\\n<-> relay   net mping   ping send recv  txn  blk uptime \";\n-            if (is_asmap_on) result += \" asmap \";\n-            result += strprintf(\"%*s %-*s%s\\n\", max_peer_id_length, \"id\", IsAddressSelected() ? max_addr_length : 0, IsAddressSelected() ? \"address\" : \"\", IsVersionSelected() ? \"version\" : \"\");\n-            for (const Peer& peer : peers) {\n+            if (m_is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s%s\\n\", m_max_id_length, \"id\", IsAddressSelected() ? m_max_addr_length : 0, IsAddressSelected() ? \"address\" : \"\", IsVersionSelected() ? \"version\" : \"\");\n+            for (const Peer& peer : m_peers) {\n                 std::string version{ToString(peer.version) + peer.sub_version};\n                 result += strprintf(\n                     \"%3s %5s %5s%6s%7s%5s%5s%5s%5s%7s%*i %*s %-*s%s\\n\",\n@@ -424,16 +426,16 @@ class NetinfoRequestHandler : public BaseRequestHandler\n                     peer.network,\n                     peer.min_ping == -1 ? \"\" : ToString(round(1000 * peer.min_ping)),\n                     peer.ping == -1 ? \"\" : ToString(round(1000 * peer.ping)),\n-                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n-                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n-                    peer.last_trxn == 0 ? \"\" : ToString((time_now - peer.last_trxn) / 60),\n-                    peer.last_blck == 0 ? \"\" : ToString((time_now - peer.last_blck) / 60),\n-                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n-                    is_asmap_on ? 7 : 0, // variable spacing\n-                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n-                    max_peer_id_length, // variable spacing\n+                    peer.last_send == 0 ? \"\" : ToString(m_time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(m_time_now - peer.last_recv),\n+                    peer.last_trxn == 0 ? \"\" : ToString((m_time_now - peer.last_trxn) / 60),\n+                    peer.last_blck == 0 ? \"\" : ToString((m_time_now - peer.last_blck) / 60),\n+                    peer.conn_time == 0 ? \"\" : ToString((m_time_now - peer.conn_time) / 60),\n+                    m_is_asmap_on ? 7 : 0, // variable spacing\n+                    m_is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    m_max_id_length, // variable spacing\n                     peer.id,\n-                    IsAddressSelected() ? max_addr_length : 0, // variable spacing\n+                    IsAddressSelected() ? m_max_addr_length : 0, // variable spacing\n                     IsAddressSelected() ? peer.addr : \"\",\n                     IsVersionSelected() && version != \"0\" ? version : \"\");\n             }"
      }
    ]
  },
  {
    "sha": "6272604bef3b409455b010d134b4b62c8f6ff49f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjcyNjA0YmVmM2I0MDk0NTViMDEwZDEzNGI0YjYyYzhmNmZmNDlm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-02T20:19:52Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-14T14:29:37Z"
      },
      "message": "refactor: enable -netinfo to add future networks (i2p, cjdns)\n\nAfter this commit, a new network may be added by changing 4 lines:\n- increment the value of `m_networks_size`\n- add the network name to `m_networks`\n- add the network name to this line: `result += \"        ipv4    ipv6   onion   total  block-relay\\n\";`\n- add \"counts.at(i).at(<m_networks pos>)\" to this line: `result += strprintf(\"%-5s  %5i   %5i   %5i   %5i   %5i\\n...`",
      "tree": {
        "sha": "5b1c00a6284455cc707ea9ae4020dbe9cea9adcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b1c00a6284455cc707ea9ae4020dbe9cea9adcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6272604bef3b409455b010d134b4b62c8f6ff49f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+HC1gACgkQT1chs9Dj\nkh2O2Q/6Awp+JdT9GQTWvwD/o6Q0aViEvPstWsQjls1DBoL6iFhmduMnoD7w9hcp\nzbrVnBs+NkhW+S8USXTJRGv2E+3U5zvC9+F0U04XnmBGgAp3Dhmj+Eepxnop2ezv\nB/vRxjitYpIr05OyzfW0Lcwko4Dgoz94DSLSg3HyDB7MSkLNzexIvTCtUVID5cv0\nlmAWariBHJggkrHEGiQEr47wcjEf+DeHBSqL1+WsQ4lzOlxrvMf16CkwHEIwDdkZ\n8gx0D07MYodaC0ajYQM8y3Gc2pEhgYNusN4jPxwjrR15bNLUoaDFoS/cqEjjT1XD\nXnW4SdoeU0vostlSG9GKbST3r5ueVfxh8qKk+tluVB4PKfifCnOyThMBd7wWinpI\nU0IQtcybT+pWv/DTMoEyxIK8mP1k2zQDQ7+W+6nQPZOoDRWWRNiUNnt0KzEjyo1W\npcEZyLDxY5TqdAs3JZsRl2s51O3DmR4N/6b7odZycESjg0HM1h8S12IN88F5XcXp\nowNW/vVfDNo6QcxAw57kMC4iqnJN2xwKoNUdr4R1jeBB87npAFy4Ip9synZMdRvy\nH2UaI6b/uWdXiDJA7LDHIfjeSV8nTvMPyndwY0B4takvXe3IHep4Ly9sIeHL9KAX\nCkW3MkuJzGxobJRs+pFsRptPR8umYzKmSazGyutG16xnYijRf2E=\n=ZzyV\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJeWFHxY7ZnNDaxR4kcXXLZjTXdO6xItEcPxFmkT3C04CP/wEBoY5QsFnR8X\ndlkSPBsRSK0I8QRfhwtZ8Aj1SEtt/fcToQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEFOY0faDedpvmffLzZkHGHUI8QRfhwta\n8Agv42KUKZ0zQACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQk70KBU2qY5e626O8wXLnogjxBF+HC1rwCIac\nHZeDO+6PAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDjFW2G0VQcT3sbCesn5xtkCPEEX4cLW/AIIcCJZrutHNMA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5b1c00a6284455cc707ea9ae4020dbe9cea9adcf\nparent 82fd40216c70037480150d2b62e2b58c57784546\nauthor Jon Atack <jon@atack.com> 1601669992 +0200\ncommitter Jon Atack <jon@atack.com> 1602685777 +0200\n\nrefactor: enable -netinfo to add future networks (i2p, cjdns)\n\nAfter this commit, a new network may be added by changing 4 lines:\n- increment the value of `m_networks_size`\n- add the network name to `m_networks`\n- add the network name to this line: `result += \"        ipv4    ipv6   onion   total  block-relay\\n\";`\n- add \"counts.at(i).at(<m_networks pos>)\" to this line: `result += strprintf(\"%-5s  %5i   %5i   %5i   %5i   %5i\\n...`\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6272604bef3b409455b010d134b4b62c8f6ff49f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6272604bef3b409455b010d134b4b62c8f6ff49f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6272604bef3b409455b010d134b4b62c8f6ff49f/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82fd40216c70037480150d2b62e2b58c57784546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82fd40216c70037480150d2b62e2b58c57784546",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82fd40216c70037480150d2b62e2b58c57784546"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 28,
      "deletions": 31
    },
    "files": [
      {
        "sha": "ed58f1bbab2bb654c78073d98b4eb4291fc5f73c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 31,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6272604bef3b409455b010d134b4b62c8f6ff49f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6272604bef3b409455b010d134b4b62c8f6ff49f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6272604bef3b409455b010d134b4b62c8f6ff49f",
        "patch": "@@ -296,6 +296,17 @@ class GetinfoRequestHandler: public BaseRequestHandler\n class NetinfoRequestHandler : public BaseRequestHandler\n {\n private:\n+    static constexpr int8_t UNKNOWN_NETWORK{-1};\n+    static constexpr size_t m_networks_size{3};\n+    const std::array<std::string, m_networks_size> m_networks{{\"ipv4\", \"ipv6\", \"onion\"}};\n+    std::array<std::array<uint16_t, m_networks_size + 2>, 3> m_counts{{{}}}; //!< Peer counts by (in/out/total, networks/total/block-relay)\n+    int8_t NetworkStringToId(const std::string& str) const\n+    {\n+        for (size_t i = 0; i < m_networks_size; ++i) {\n+            if (str == m_networks.at(i)) return i;\n+        }\n+        return UNKNOWN_NETWORK;\n+    }\n     uint8_t m_details_level{0}; //!< Optional user-supplied arg to set dashboard details level\n     bool DetailsRequested() const { return m_details_level > 0 && m_details_level < 5; }\n     bool IsAddressSelected() const { return m_details_level == 2 || m_details_level == 4; }\n@@ -360,32 +371,19 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         }\n \n         // Count peer connection totals, and if DetailsRequested(), store peer data in a vector of structs.\n-        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n-        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n-        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n-\n-        for (const UniValue& peer : getpeerinfo.getValues()) {\n-            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n-            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+        for (const UniValue& peer : batch[ID_PEERINFO][\"result\"].getValues()) {\n             const std::string network{peer[\"network\"].get_str()};\n-            if (is_inbound) {\n-                if (network == \"ipv6\") {\n-                    ++ipv6_i;\n-                } else if (network == \"onion\") {\n-                    ++onion_i;\n-                } else {\n-                    ++ipv4_i;\n-                }\n-                if (is_block_relay) ++block_relay_i;\n-            } else {\n-                if (network == \"ipv6\") {\n-                    ++ipv6_o;\n-                } else if (network == \"onion\") {\n-                    ++onion_o;\n-                } else {\n-                    ++ipv4_o;\n-                }\n-                if (is_block_relay) ++block_relay_o;\n+            const int8_t network_id{NetworkStringToId(network)};\n+            if (network_id == UNKNOWN_NETWORK) continue;\n+            const bool is_outbound{!peer[\"inbound\"].get_bool()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            ++m_counts.at(is_outbound).at(network_id);      // in/out by network\n+            ++m_counts.at(is_outbound).at(m_networks_size); // in/out overall\n+            ++m_counts.at(2).at(network_id);                // total by network\n+            ++m_counts.at(2).at(m_networks_size);           // total overall\n+            if (is_block_relay) {\n+                ++m_counts.at(is_outbound).at(m_networks_size + 1); // in/out block-relay\n+                ++m_counts.at(2).at(m_networks_size + 1);           // total block-relay\n             }\n             if (DetailsRequested()) {\n                 // Push data for this peer to the peers vector.\n@@ -401,7 +399,7 @@ class NetinfoRequestHandler : public BaseRequestHandler\n                 const double ping{peer[\"pingtime\"].isNull() ? -1 : peer[\"pingtime\"].get_real()};\n                 const std::string addr{peer[\"addr\"].get_str()};\n                 const std::string sub_version{peer[\"subver\"].get_str()};\n-                m_peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, network, sub_version, is_block_relay, !is_inbound});\n+                m_peers.push_back({peer_id, mapped_as, version, conn_time, last_blck, last_recv, last_send, last_trxn, min_ping, ping, addr, network, sub_version, is_block_relay, is_outbound});\n                 m_max_id_length = std::max(ToString(peer_id).length(), m_max_id_length);\n                 m_max_addr_length = std::max(addr.length() + 1, m_max_addr_length);\n                 m_is_asmap_on |= (mapped_as != 0);\n@@ -443,12 +441,11 @@ class NetinfoRequestHandler : public BaseRequestHandler\n         }\n \n         // Report peer connection totals by type.\n-        total_i = ipv4_i + ipv6_i + onion_i;\n-        total_o = ipv4_o + ipv6_o + onion_o;\n         result += \"        ipv4    ipv6   onion   total  block-relay\\n\";\n-        result += strprintf(\"in     %5i   %5i   %5i   %5i   %5i\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n-        result += strprintf(\"out    %5i   %5i   %5i   %5i   %5i\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n-        result += strprintf(\"total  %5i   %5i   %5i   %5i   %5i\\n\", ipv4_i + ipv4_o, ipv6_i + ipv6_o, onion_i + onion_o, total_i + total_o, block_relay_i + block_relay_o);\n+        const std::array<std::string, 3> rows{{\"in\", \"out\", \"total\"}};\n+        for (size_t i = 0; i < m_networks_size; ++i) {\n+            result += strprintf(\"%-5s  %5i   %5i   %5i   %5i   %5i\\n\", rows.at(i), m_counts.at(i).at(0), m_counts.at(i).at(1), m_counts.at(i).at(2), m_counts.at(i).at(m_networks_size), m_counts.at(i).at(m_networks_size + 1));\n+        }\n \n         // Report local addresses, ports, and scores.\n         result += \"\\nLocal addresses\";"
      }
    ]
  }
]