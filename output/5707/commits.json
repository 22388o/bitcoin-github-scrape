[
  {
    "sha": "14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGQwMjNmMWFlYjRmMjVhYzBmNDI3NDViM2EyOWMzZGNkNjNjODM0",
    "commit": {
      "author": {
        "name": "Earlz",
        "email": "earlz@earlz.net",
        "date": "2015-01-25T15:27:54Z"
      },
      "committer": {
        "name": "Earlz",
        "email": "earlz@earlz.net",
        "date": "2015-01-25T15:56:30Z"
      },
      "message": "change hardcoded character constants to a set of descriptive named constants for database keys",
      "tree": {
        "sha": "b4a4c16c3c4087b6fa3e611b0a167da63e0f2346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4a4c16c3c4087b6fa3e611b0a167da63e0f2346"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/comments",
    "author": {
      "login": "Earlz",
      "id": 371222,
      "node_id": "MDQ6VXNlcjM3MTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/371222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Earlz",
      "html_url": "https://github.com/Earlz",
      "followers_url": "https://api.github.com/users/Earlz/followers",
      "following_url": "https://api.github.com/users/Earlz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Earlz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Earlz/subscriptions",
      "organizations_url": "https://api.github.com/users/Earlz/orgs",
      "repos_url": "https://api.github.com/users/Earlz/repos",
      "events_url": "https://api.github.com/users/Earlz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Earlz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Earlz",
      "id": 371222,
      "node_id": "MDQ6VXNlcjM3MTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/371222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Earlz",
      "html_url": "https://github.com/Earlz",
      "followers_url": "https://api.github.com/users/Earlz/followers",
      "following_url": "https://api.github.com/users/Earlz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Earlz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Earlz/subscriptions",
      "organizations_url": "https://api.github.com/users/Earlz/orgs",
      "repos_url": "https://api.github.com/users/Earlz/repos",
      "events_url": "https://api.github.com/users/Earlz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Earlz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 32,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f9326e5e2ea12864bb708242dc19a3087adf080c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 21,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "patch": "@@ -14,31 +14,42 @@\n \n using namespace std;\n \n+static const char DB_COINS = 'c';\n+static const char DB_BLOCK_FILES = 'f';\n+static const char DB_TXINDEX = 't';\n+static const char DB_BLOCK_INDEX = 'b';\n+\n+static const char DB_BEST_BLOCK = 'B';\n+static const char DB_FLAG = 'F';\n+static const char DB_REINDEX_FLAG = 'R';\n+static const char DB_LAST_BLOCK = 'l';\n+\n+\n void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n     if (coins.IsPruned())\n-        batch.Erase(make_pair('c', hash));\n+        batch.Erase(make_pair(DB_COINS, hash));\n     else\n-        batch.Write(make_pair('c', hash), coins);\n+        batch.Write(make_pair(DB_COINS, hash), coins);\n }\n \n void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write('B', hash);\n+    batch.Write(DB_BEST_BLOCK, hash);\n }\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair('c', txid), coins);\n+    return db.Read(make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair('c', txid));\n+    return db.Exists(make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n-    if (!db.Read('B', hashBestChain))\n+    if (!db.Read(DB_BEST_BLOCK, hashBestChain))\n         return uint256();\n     return hashBestChain;\n }\n@@ -67,23 +78,23 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevel\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair('f', nFile), info);\n+    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n     if (fReindexing)\n-        return Write('R', '1');\n+        return Write(DB_REINDEX_FLAG, '1');\n     else\n-        return Erase('R');\n+        return Erase(DB_REINDEX_FLAG);\n }\n \n bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n-    fReindexing = Exists('R');\n+    fReindexing = Exists(DB_REINDEX_FLAG);\n     return true;\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n-    return Read('l', nFile);\n+    return Read(DB_LAST_BLOCK, nFile);\n }\n \n bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n@@ -104,7 +115,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'c') {\n+            if (chType == DB_COINS) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n@@ -142,33 +153,33 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair('f', it->first), *it->second);\n+        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n-    batch.Write('l', nLastFile);\n+    batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair('b', (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair('t', txid), pos);\n+    return Read(make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair('t', it->first), it->second);\n+        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair('F', name), fValue ? '1' : '0');\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     char ch;\n-    if (!Read(std::make_pair('F', name), ch))\n+    if (!Read(std::make_pair(DB_FLAG, name), ch))\n         return false;\n     fValue = ch == '1';\n     return true;\n@@ -179,7 +190,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256());\n+    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex\n@@ -190,7 +201,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'b') {\n+            if (chType == DB_BLOCK_INDEX) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CDiskBlockIndex diskindex;"
      }
    ]
  }
]