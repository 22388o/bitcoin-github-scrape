DrahtBot,2019-01-10T18:31:14Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15681](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15681.html) ([mempool] Allow one extra single-ancestor t",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-453203439,453203439,
practicalswift,2019-01-10T18:34:05Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-453204363,453204363,
sipa,2019-01-11T18:17:13Z,Concept ACK; I'll review for changes in behavior for specific validation reasons later.,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-453608761,453608761,
laanwj,2019-01-14T14:23:14Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-454021358,454021358,
ajtowns,2019-01-18T13:42:02Z,"> Started reviewing this, but IMO, the way this PR is structured makes it difficult to verify that it doesn't unintentionally change behavior.\n\nFWIW, I've had a go at redoing the patchset to try to make the (potential) functionality changes more clear: https://github.com/ajtowns/bitcoin/commits/201901-dosreasons\n\nThis has (I think) all the behaviour changes first:\n\n    d9451de0d0 drop ",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-455549857,455549857,
sdaftuar,2019-01-18T14:46:55Z,"Thanks all for the review so far!\n\nI'd started taking a stab at rewriting this; I'll continue with my approach to see how it ends up but @ajtowns thank you for your help -- @ryanofsky if you have any thoughts on @ajtowns's rework please let me know, happy to adapt his breakdown and include here if that approach looks good.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-455570076,455570076,
ryanofsky,2019-01-18T15:12:31Z,"> @ryanofsky if you have any thoughts on @ajtowns's rework please let me know\n\nTook a quick look, and I think ajtowns's refactor is great. It's a slightly different approach than I suggested in that the 32747d0746d91a8f63e39cedfb232f8c36b33bc6 commit which starts using reason codes is done all at once instead of incrementally as reasons are added, so it requires a little bit of grepping to ver",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-455578840,455578840,
naumenkogs,2019-01-21T19:16:15Z,"Concept ACK, I will take a closer look once the code is updated per comments above I guess.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-456175021,456175021,
sdaftuar,2019-01-24T18:26:48Z,"I have redone this along the lines of @ajtowns branch, and cleaned up each commit (I think!) so that each one should be logically correct, pass tests, etc.\n\nI've saved the original version of this PR here: https://github.com/sdaftuar/bitcoin/commits/15141.original\n\nThe diff between the two is pretty small (just some formatting changes that were getting tedious to resolve, and I removed a c",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-457304487,457304487,
sdaftuar,2019-01-29T16:52:34Z,"I addressed @ryanofsky's comments so far (which rewrote the git history, since one of the commit messages changed, so I also squashed in a comment change as well).  Previous version of this PR is now here: https://github.com/sdaftuar/bitcoin/commits/15141.1.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-458617310,458617310,
sdaftuar,2019-02-08T17:57:22Z,"This needs a simple rebase, but can I get concept ACK/NACK from more reviewers on whether the reworked form of this PR (which broke things up into many more commits) is preferable compared to the original formulation? ",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-461890129,461890129,
sipa,2019-02-08T18:43:36Z,"I haven't reviewed the last few commits yet (only up to ""[refactor] Use Reasons directly instead of DoS codes""), but so far the structure is very clear. Concept ACK on that.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-461903853,461903853,
sdaftuar,2019-02-08T19:31:53Z,Thanks @sipa.  Rebased.  Prior version is here: [15141.2](https://github.com/sdaftuar/bitcoin/commits/15141.2),https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-461919044,461919044,
sipa,2019-02-08T20:19:20Z,"One overall comment: it seems there is a subset of `ValidationInvalidReason`s that are valid for transactions, and another subset that is valid for blocks. Perhaps it's useful to have functions to test whether one belongs to those sets, and invoke those functions in assertions after validation returns in their respective contexts. That seems a bit more future-proof than just having comments of the",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-461933821,461933821,
sdaftuar,2019-03-02T17:31:31Z,"I believe I addressed all of @sipa's comments.  I think I've addressed all the substantive comments from @ryanofsky, with the exception of moving around code between commits.  If reviewers would like to see the code moved to more accurately reflect each commit message, I can try, but I'd prefer to do something like that just before merge and have reviewers do a last verify that the overall diff is",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-468941434,468941434,
sdaftuar,2019-03-07T20:15:02Z,Squashed the history down.  Unsquashed version is [15141.4](https://github.com/sdaftuar/bitcoin/commits/15141.4).,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-470677054,470677054,
Sjors,2019-03-09T08:31:33Z,@ryanofsky there's still a few `====` commits that need to go.,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-471158025,471158025,
sdaftuar,2019-03-09T16:32:47Z,@sjors Removed the empty commits from the PR.  Old version is here: https://github.com/sdaftuar/bitcoin/commits/15141.6,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-471198250,471198250,
ryanofsky,2019-03-28T16:56:19Z,"I wonder who else is still planning to review this PR. @sipa, @jnewbery, @kallewoof, @sjors, @ajtowns all reviewed previous versions. @TheBlueMatt wrote the original version and discussed it recently offline. @naumenkogs wrote that he intends to review. Is there anyone else? It seems like if some subset of the people who already reviewed this rereviewed it, it could be ready to merge.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-477682421,477682421,
jamesob,2019-03-30T03:01:08Z,"I'm going to take a read through at some point (probably tomorrow), but that definitely shouldn't hang up a merge if the reviewers mentioned above have signed off.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-478200330,478200330,
ajtowns,2019-04-01T07:54:46Z,"utACK daf23bf0b9791cb6a1515e3764d1f645e1181859\n\nI think it would have made sense to split this PR after ""Clean up banning levels"", so utACK 96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5 as well, fwiw. I guess it's probably better to just get reviews for the whole thing at this point though.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-478474586,478474586,
sdaftuar,2019-04-03T09:29:28Z,Rebased.  Old version is here: https://github.com/sdaftuar/bitcoin/commits/15141.7,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-479413048,479413048,
jamesob,2019-04-03T15:16:12Z,reACK daf674e55a4efbf6031af8389de2537ed32b4bcc based on a review of [the interdiff](https://gist.github.com/jamesob/26a9a2fcdad52097ea4e2d891adb2f99).,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-479533964,479533964,
jnewbery,2019-04-10T20:54:30Z,"I've fully reviewed everything up to _Clean up banning levels_ (daf35b19b3841fe93dfd717b7c233ff293b61503) and quickly looked at the rest of the commits. I agree with @TheBlueMatt that some of the intermediate commits introduce behaviour changes and should be changed or squashed.\n\nI have a branch here https://github.com/jnewbery/bitcoin/tree/2019_04_clean_up_banning that rebases everything up t",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-481861456,481861456,
sdaftuar,2019-04-11T18:37:17Z,"Old version of this pr is here: [15141.9](https://github.com/sdaftuar/bitcoin/commits/15141.9)\n\nI took that version and incorporated many of the comments and bugfixes Matt suggested, along with a few improvements from John, and a bunch of fixes to commit messages/authorship attribution/etc here: [15141.10](https://github.com/sdaftuar/bitcoin/commits/15141.10)\n\nHere's a diff of 15141.9 and ",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-482246149,482246149,
sdaftuar,2019-04-14T12:15:34Z,Just pushed up a new version that fixes a bug in an intermediate commit. (Final code was unchanged as the bug was already fixed in a later commit.)  Old version was [15141.11](https://github.com/sdaftuar/bitcoin/commits/15141.11).,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-482961641,482961641,
sdaftuar,2019-04-15T15:07:36Z,"Rewrote the history one more time to incorporate the rest of Matt's feedback (other than squashing some of the intermediate commits).  Old version is here: [15141.12](https://github.com/sdaftuar/bitcoin/commits/15141.12)\n\nAlso, @jnewbery pointed out somewhere (I seem to have lost the link to the comment) that reviewers should take note that DoS scores would accumulate, while the switch to Reas",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-483291375,483291375,
jnewbery,2019-04-15T22:03:53Z,"I think it's worth updating the git commit log in 088336aa3cab566a6418fb2e88824bdf668b8458 (_[refactor] Add useful-for-dos ""reason"" field to CValidationState_) to say that previously, blocks which had a transaction that failed a non-p2sh pre-segwit softfork would not result in a ban, but now will. I also think that you should remove the `[refactor]` tag for a commit which isn't a pure refactor and",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-483435610,483435610,
sdaftuar,2019-04-16T17:08:41Z,"> I think it's worth updating the git commit log in 088336a ([refactor] Add useful-for-dos ""reason"" field to CValidationState) to say that previously, blocks which had a transaction that failed a non-p2sh pre-segwit softfork would not result in a ban, but now will. I also think that you should remove the [refactor] tag for a commit which isn't a pure refactor and changes p2p behaviour.\n\nThis b",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-483762083,483762083,
jnewbery,2019-04-16T22:07:59Z,@ajtowns @TheBlueMatt - you've both more-or-less ACKed a branch that reaches basically the same final state as this current branch. Are you able to reACK?,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-483862207,483862207,
JeremyRubin,2019-04-25T19:37:54Z,"Concept ACK that this seems ok -- haven't had a chance to re-go through commit by commit and make sure the behavioral changes are solid, but they seem sensible.\n\nNoting that merging this would make it possible to reboot the work in https://github.com/bitcoin/bitcoin/pull/11523 if there's positive sentiment for it.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-486810161,486810161,
TheBlueMatt,2019-04-26T19:55:02Z,utACK fdd7683c558984a96dd556e2c93dde156b85a75f,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-487181380,487181380,
laanwj,2019-04-30T06:35:39Z,"Getting a local failure in `mining_getblocktemplate_longpoll.py`—might be unrelated to this change\n```\n1/119 - mining_getblocktemplate_longpoll.py failed, Duration: 12 s\n\nstdout:\n2019-04-30T06:29:27.597000Z TestFramework (INFO): Initializing test directory /tmp/test_runner_₿_🏃_20190430_082919/mining_getblocktemplate_longpoll_115\n2019-04-30T06:29:28.464000Z TestFramework (INFO): Warning",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-487835088,487835088,
promag,2019-04-30T07:13:41Z,@laanwj so it took `getblocktemplate` more than 5 seconds? I don't remember seeing this failure.,https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-487842802,487842802,
laanwj,2019-04-30T07:57:31Z,"> Edit: couldn't we replace the reject code with a mapping from ValidationInvalidReason?\n\nSo to check this I've analyzed all occurences of Invalid (with this PR applied):\n\n### Occurences\n```\nsrc/consensus/tx_check.cpp:14       ValidationInvalidReason::CONSENSUS                    REJECT_INVALID\nsrc/consensus/tx_check.cpp:16       ValidationInvalidReason::CONSENSUS                    ",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-487853157,487853157,
laanwj,2019-04-30T08:09:50Z,"- apart from f3883a321bf4ab289edcd9754b12cae3a648b175 whose rationale I disagree with (I don't think it's redundant, as commented), I think this is overall a move in the right direction\n- my last comment could be addressed (if at all) in a follow-up PR\n\nutACK fdd7683c558984a96dd556e2c93dde156b85a75f",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-487856279,487856279,
sdaftuar,2019-05-03T13:40:53Z,"@laanwj Thanks for the review.  I updated the PR to drop that commit, so that we once again use a CValidationState to return the debug information if CheckTransaction() fails for a transaction in a block.  \n\nPrevious version of the code is at [15141.14](https://github.com/sdaftuar/bitcoin/commits/15141.14).",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-489099103,489099103,
jnewbery,2019-05-03T14:10:21Z,"utACK 0ff1c2a838da9e8dc7f77609adc89124bbea3e2b\n\n~Only change is dropping the _Drop obsolete sigops comment_ commit.~\n\nEDIT: Copy-paste error above. The only change was dropping the _Remove redundant state.Invalid() call after CheckTransaction()_ commit.",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-489108506,489108506,
laanwj,2019-05-04T09:59:19Z,"thanks for addressing my comment, and sorry for holding this up last-minute\nutACK 0ff1c2a838da9e8dc7f77609adc89124bbea3e2b",https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-489313054,489313054,
jnewbery,2019-01-14T19:52:06Z,nit: change to `m_reason` and avoid all the non-shadowing naming tricks below (`reasonIn` and `_reason`),https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247634533,247634533,src/consensus/validation.h
jnewbery,2019-01-14T20:03:52Z,"nit: s/conflicts with a tx in the chain/conflicts with a confirmed transaction. Same comment below for ""exists in the mempool or on chain""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247638591,247638591,src/consensus/validation.h
jnewbery,2019-01-14T22:09:50Z,"This seems entirely obvious and not requiring a comment to me, which makes me think there's some subtlety I've missed. Is this just saying that if we receive a block with witness data, it should be valid-according-to-BIP141?\n\nPedantic nit: I'd also avoid talking about 'data-providers' in validation.cpp. After this PR, validation should be unconcerned with data-providers and only be validating ",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247678436,247678436,src/validation.cpp
jnewbery,2019-01-14T22:42:35Z,"It's unclear to me whether peers should always be punished for `BLOCK_INVALID_PREV`. For example, if the previous block was invalid because of `RECENT_CONSENSUS_CHANGE` and the peer wasn't punished, should it be punished for relaying this descendant block?\n\nShould compact block peers be punished for relaying the block if its parent is invalid? My reading of https://github.com/bitcoin/bips/blob",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247688022,247688022,src/net_processing.cpp
sdaftuar,2019-01-15T01:23:21Z,"I believe this comment is contrasting a CONSENSUS failure from a RECENT_CONSENSUS_CHANGE -- I think in @TheBlueMatt's original PR he had some validation failures marked as RECENT_CONSENSUS_CHANGE, but eventually we decided to switch them all out (and reserve RECENT_CONSENSUS_CHANGE as something we might do in the future).\n\nI think I agree with you philosophically that validation ought not be v",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247736063,247736063,src/validation.cpp
sdaftuar,2019-01-15T01:29:26Z,"Self-review: I think adding this line here may be a bug.  At any rate, there is a serious confusion between the hacky punish_invalid bool in the existing code and the introduction of MaybePunishNode in this PR that ought to be cleaned up.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247737022,247737022,src/net_processing.cpp
ajtowns,2019-01-15T05:31:44Z,"I think this comment is justifying upgrading the (at the time recent) segwit test from a RECENT_CONSENSUS_CHANGE to just CONSENSUS_CHANGE, the reason being that either you've got an old client that didn't provide segwit data -- in which case this test won't trigger because the `bad-blk-length` test will already have failed -- or it is providing segwit data but doing it wrong, in which case there's",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247768943,247768943,src/validation.cpp
ajtowns,2019-01-15T05:56:37Z,"If miners have mostly upgraded then building on top of a `RECENT_CONSENSUS_CHANGE` block should be rare enough for this not to be a huge problem.\n\nIf not, and we want to cope with a moderately controversial consensus upgrade, then we probably want to track whether blocks failed due to `RECENT_CONSENSUS_CHANGE` and mark their children as also failing due to `RECENT_CONSENSUS_CHANGE` (after chec",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247771578,247771578,src/net_processing.cpp
ajtowns,2019-01-15T06:07:14Z,Maybe having `inline bool CorruptionPossible() const { return reason == BLOCK_MUTATED; }` would make for nicer code elsewhere?,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247772868,247772868,src/consensus/validation.h
ajtowns,2019-01-15T12:57:07Z,"This change isn't a clean refactor -- `!state.CorruptionPossible()` would have returned false after this, but its replacement in this commit (ie, `state.GetReason() != BLOCK_MUTATED`) will return true. I think this is okay though, since `CorruptionPossible()` is only checked for block updates, and this just deals with mempool tx's, and the uses of `state.CorruptionPossible()` that this would have ",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247881222,247881222,src/validation.cpp
ajtowns,2019-01-15T14:18:58Z,"Seems like this change could be squashed into ""Remove references to CValidationState's DoS and CorruptionPossible"" ?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247908811,247908811,src/blockencodings.cpp
ajtowns,2019-01-15T14:48:25Z,"This replaces the `Misbehaving(.., ""invalid header received"");` from earlier; shouldn't be introducing a bug (unless the move to below the `if` introduces one)?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247920759,247920759,src/net_processing.cpp
sdaftuar,2019-01-15T17:54:52Z,"I believe there is an unintended behavior change here -- previously, ""duplicate invalid"" headers were not assigned DoS points.  We added a bunch of logic (just above this line of code) to punish outbound peers for providing invalid headers.\n\nAfter the rewrite in this PR, CACHED_INVALID is a bannable offense from any peer (other than in HB compact block relay).\n\nI'll rework this...",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247998223,247998223,src/net_processing.cpp
sdaftuar,2019-01-15T18:07:57Z,"With respect to the issue you're bringing up, I believe the behavior in this PR matches existing behavior, in which case I'd prefer to defer improvement to a future PR.  If I'm missing some way that we've made things different or worse though let me know.\n\nAs for BIP 152:\n\n>A node MUST NOT send a cmpctblock message without having validated that the header properly commits to each transacti",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248002976,248002976,src/net_processing.cpp
ryanofsky,2019-01-15T19:30:40Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\n\nNote: word-diff is useful here to review new function arguments:\n\n```bash\ngit log -p -n1 -U0 --word-diff-regex=. a5415e85caaf2f5a77d6bae9574bb6d21139ee34\n```",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248032542,248032542,src/consensus/tx_verify.cpp
ryanofsky,2019-01-15T19:36:28Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34):\n\nWhy remove this comment?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248034524,248034524,src/validation.cpp
ryanofsky,2019-01-15T19:44:08Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\n\nThis seems like it is doubling the state.nDoS level, in addition to updating the reason enum:\n\nhttps://github.com/bitcoin/bitcoin/blob/a5415e85caaf2f5a77d6bae9574bb6d21139ee34/src/consensus/validation.h#L96\n\nWould suggest replacing this change something more straightforward lik",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248036953,248036953,src/validation.cpp
ryanofsky,2019-01-15T19:45:33Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\n\nExtra space on this line",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248037437,248037437,src/validation.cpp
ryanofsky,2019-01-15T19:47:21Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\n\nThis also seems to double state.nDoS.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248038062,248038062,src/validation.cpp
ryanofsky,2019-01-15T19:52:30Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\n\nIs there a check for the requirement that MISSING_INPUTS is not used for a block? I would expect to see an assert(reason != MISSING_INPUTS) or assert(ValidForBlock(reason)) or something like that somewhere.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248039678,248039678,src/validation.cpp
ryanofsky,2019-01-15T19:57:17Z,"In commit ""Add useful-for-dos ""reason"" field to CValidationState"" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\n\nNote: I guess this line used to set state.corruptionPossible = false but no longer does.\n\nhttps://github.com/bitcoin/bitcoin/blob/cebe910718ae4f099f292736192a4e725ad02b94/src/consensus/validation.h#L54-L58\n\nNew way seems better.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248041505,248041505,src/validation.cpp
ryanofsky,2019-01-15T20:21:21Z,"In commit ""Use state reason field to check for collisions in cmpctblocks"" (963699d1316f6b14c98a4624f766393379db85e1)\n\nSince the `mapBlockSource` bool is now being passed as `!via_compact_block`, it seems like the field description should mention something about setting it based on whether the source was a compact or full block:\n\nhttps://github.com/bitcoin/bitcoin/blob/6bdc4491e06433eb380ca",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248048711,248048711,src/net_processing.cpp
ajtowns,2019-01-18T13:19:59Z,"We checked `state.IsInvalid()` a couple of lines earlier, so this addition is redundant.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r249039245,249039245,src/test/txvalidation_tests.cpp
ryanofsky,2019-01-24T22:22:42Z,"In commit ""Check transactions just logs a message"" (94c2cdb88049af5283a7c1f52ea6e52ac2946686)\n\nCould you update the commit message to say whether this commit changes behavior at all, and what the motivation is? At first glance it seems like this probably doesn't change behavior, and the only motivation is to simplify code. But I could easily be missing something.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r250800408,250800408,src/validation.cpp
ryanofsky,2019-01-24T22:31:03Z,"In commit ""[refactor] Use maybepunish etc"" (8226bed4191a50129ac6fdbcb8fad5e1c6b7cacd)\n\nNote: This acquires lock recursively in `PeerLogicValidation::BlockChecked`. Seems fine, but just wanted to note it wasn't happening before.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r250802869,250802869,src/net_processing.cpp
ryanofsky,2019-01-24T22:46:54Z,"In commit ""[refactor] Update some comments in validation.cpp as we arent doing DoS there"" (e534b0b78bec49750421b5f52012b857df197e24)\n\nWhy remove this comment entirely?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r250807170,250807170,src/validation.cpp
sdaftuar,2019-01-29T16:50:51Z,Done,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r251920734,251920734,src/validation.cpp
sdaftuar,2019-01-29T16:51:03Z,Updated with a new comment.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r251920815,251920815,src/validation.cpp
sdaftuar,2019-01-31T21:40:20Z,Fixed in latest commit.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r252851518,252851518,src/consensus/validation.h
sdaftuar,2019-01-31T21:40:29Z,"I don't really think ""confirmed transaction"" is any clearer than ""tx in the chain"" -- if anything, the latter seems more specific to me, as ""confirmed"" is a concept that only makes sense in the context of the chain that you're on, which ""tx in the chain"" is more explicit about.\n\nI'm going to leave this comment intact, pending other opinions.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r252851556,252851556,src/consensus/validation.h
sipa,2019-02-08T20:56:59Z,I think the current wording is fine.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255232967,255232967,src/consensus/validation.h
sipa,2019-02-08T20:58:36Z,Nit: you can use `name(std::move(addrNameIn))` here to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255233378,255233378,src/net_processing.cpp
sipa,2019-02-08T21:05:05Z,"The comment says ""disconnect"", but the DoS score will also cause a ban here. Is that intentional? (it seems it's retaining existing behavior, so I assume it is).",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255235104,255235104,src/net_processing.cpp
sdaftuar,2019-02-10T15:28:09Z,"This is actually a behavior change from existing behavior, but hopefully a relatively harmless one.  Here's the relevant snippet from master:\n\nhttps://github.com/bitcoin/bitcoin/blob/2945492424934fa360f86b116184ee8e34f19d0a/src/net_processing.cpp#L1552-L1585\n\nIt's a bit hard to decipher because of the multiple layers going on here, but basically `punish_duplicate_invalid` is only set to tr",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255342147,255342147,src/net_processing.cpp
ryanofsky,2019-02-11T20:55:41Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Txn with empty vin/vout or null prevouts move from 10 DoS points to 100""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255688905,255688905,src/consensus/tx_verify.cpp
ryanofsky,2019-02-11T20:55:46Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Txn with empty vin/vout or null prevouts move from 10 DoS points to 100""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255688944,255688944,src/consensus/tx_verify.cpp
ryanofsky,2019-02-11T20:56:02Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Txn with empty vin/vout or null prevouts move from 10 DoS points to 100""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255689044,255689044,src/consensus/tx_verify.cpp
ryanofsky,2019-02-11T20:56:24Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Inclusion of a premature coinbase spend now results in a ban""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255689172,255689172,src/consensus/tx_verify.cpp
ryanofsky,2019-02-11T20:56:51Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Loose transactions with a dependency loop now result in a ban instead of 10 DoS points""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255689323,255689323,src/validation.cpp
ryanofsky,2019-02-11T20:57:10Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Proof of work failure moves from 50 DoS points to a ban""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255689428,255689428,src/validation.cpp
ryanofsky,2019-02-11T20:57:39Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Blocks with timestamps under MTP now result in a ban""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255689613,255689613,src/validation.cpp
ryanofsky,2019-02-11T20:58:17Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Any pre-segwit soft-fork errors (ie all soft-fork errors) now result in a ban""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255689820,255689820,src/validation.cpp
ryanofsky,2019-02-11T20:59:01Z,"In commit ""Clean up banning levels"" (96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5)\n\nNote: this is ""Inclusion of non-final transactions in a block now results in a ban""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255690104,255690104,src/validation.cpp
ryanofsky,2019-02-11T21:17:58Z,"In commit ""[refactor] Add useful-for-dos ""reason"" field to CValidationState"" (ac3873e2a92457995f7e5a9e5fc24352af360c6b)\n\nPassing state.GetDoS() instead of 0 might make it clearer behavior isn't changing.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255696468,255696468,src/validation.cpp
ryanofsky,2019-02-11T21:33:17Z,"In commit ""TX_MISSING_INPUTS now has a DoS score of 0"" (bee1d4f5e29c8c447ac47a608240b38216750072)\n\nNot sure, but it seems like it might be nice to have a comment here saying TX_MISSING_INPUTS reason will change to CONSENSUS if the transaction is included in a block, and lead to a higher dos score in that case.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255702109,255702109,src/consensus/validation.h
ryanofsky,2019-02-11T21:52:40Z,"In commit ""LookupBlockIndex -> CACHED_INVALID"" (c558ebaa6d02154eaf762a28d2a7e954acee0661)\n\nNote: behavior should be unchanged here because ProcessNewBlockHeaders calls AcceptBlockHeader which sets CACHED_INVALID if a header is already known and has BLOCK_FAILED_MASK is set. If the first invalid header is invalid for a different reason the check shouldn't trigger either before or after this cha",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255708805,255708805,src/net_processing.cpp
ryanofsky,2019-02-11T22:02:20Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255235104\n\nNote: Thread pertains to commit ""Fix handling of invalid headers"" (9dd6fc18658b36b63b9f264676ac484879597b83)\n",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r255712280,255712280,src/net_processing.cpp
ryanofsky,2019-02-12T17:02:16Z,"In commit ""[refactor] Use Reasons directly instead of DoS codes"" (346699322ca820c5d95c255386df3ce1fb1f3d11)\n\nWould be good to add a comment here saying that if this function is changed, then the MayResultInDisconnect function above should also be updated.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256052181,256052181,src/net_processing.cpp
ryanofsky,2019-02-12T17:07:07Z,"In commit ""[refactor] Use Reasons directly instead of DoS codes"" (346699322ca820c5d95c255386df3ce1fb1f3d11)\n\nThis change seems like a step backwards to me. It seems cleaner and less error prone to keep MaybePunishNode and MayResultInDisconnect both implemented in terms of the same nice `GetDoSForReason` function added in ac3873e2a92457995f7e5a9e5fc24352af360c6b (renamed to `GetDos` in 6e3332a7",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256054235,256054235,src/net_processing.cpp
ryanofsky,2019-02-12T17:24:15Z,"In commit ""[refactor] Use Reasons directly instead of DoS codes"" (346699322ca820c5d95c255386df3ce1fb1f3d11)\n\nIt would be clearer to write ""may result in a peer banning/disconnecting us"" than ""may result in us banning/disconnecting a peer."" Otherwise the next sentence makes less sense, and the overall comment is confusing about how the function is used.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256061290,256061290,src/net_processing.cpp
ryanofsky,2019-02-12T18:03:59Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247737022\n\n> I'll rework this...\n\nThis is resolved now?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256077494,256077494,src/net_processing.cpp
ryanofsky,2019-02-12T18:14:47Z,"In commit ""[refactor] Use Reasons directly instead of DoS codes"" (346699322ca820c5d95c255386df3ce1fb1f3d11)\n\nNote: ""elsewhere"" refers to the CACHED_INVALID check in ProcessHeadersMessage added in earlier commit ""LookupBlockIndex -> CACHED_INVALID"" (c558ebaa6d02154eaf762a28d2a7e954acee0661).\n\nI would suggest clarifying this, but this is all replaced in the next commit ""Fix handling of inval",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256081557,256081557,src/net_processing.cpp
ryanofsky,2019-02-12T18:35:29Z,"In commit ""Fix handling of invalid headers"" (9dd6fc18658b36b63b9f264676ac484879597b83)\n\nIt would be nice to keep more of this comment, like the high-level goal of freeing outbound slots, and other parts if they are still accurate. It might also be good to keep a TODO about how we could ""improve ban-behavior"" here as mentioned in https://github.com/bitcoin/bitcoin/pull/15141#discussion_r2553421",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256089801,256089801,src/net_processing.cpp
ryanofsky,2019-02-12T18:38:32Z,"In commit ""[refactor] Use Reasons directly instead of DoS codes"" (346699322ca820c5d95c255386df3ce1fb1f3d11)\n\nIs calling Misbehaving here when via_compact_block is true a change in behavior? Same question below for the BLOCK_MISSING_PREV case.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256091126,256091126,src/net_processing.cpp
ryanofsky,2019-02-12T18:43:46Z,"In commit ""[refactor] Use Reasons directly instead of DoS codes"" (346699322ca820c5d95c255386df3ce1fb1f3d11)\n\nIs returning true here a change in behavior? (via_compact_block is currently always false where this function is called)",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256093250,256093250,src/net_processing.cpp
sdaftuar,2019-02-21T19:01:49Z,"So this is only used for transaction relay, but this function is written to be more generic...  Perhaps I should limit the scope of this function to make it clear that transaction invalidity reasons are the only thing we would ask about?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r259070431,259070431,src/net_processing.cpp
TheBlueMatt,2019-02-21T19:21:02Z,This appears to be correct to me. Obviously should update the comment to note this.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r259077758,259077758,src/net_processing.cpp
sdaftuar,2019-02-21T20:28:31Z,"Regarding BLOCK_INVALID_PREV, see above:\n\nhttps://github.com/bitcoin/bitcoin/pull/15141/files/3048533275227e67ce22931c6360513bddbd1767..346699322ca820c5d95c255386df3ce1fb1f3d11#r248002976\n\nFor the MISSING_PREV case, this is somewhat confusing but I don't think it's possible for via_compact_block to be true in that case, because we will send the peer a getheaders message if we receive a com",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r259101986,259101986,src/net_processing.cpp
sdaftuar,2019-03-02T16:58:25Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261833651,261833651,src/net_processing.cpp
sdaftuar,2019-03-02T17:01:39Z,Fixed comment in latest commit.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261833755,261833755,src/net_processing.cpp
sdaftuar,2019-03-02T17:19:31Z,"The goal of this work was to make net_processing aware of the actual reasons for validation failures, rather than just deal with opaque numbers instructing it to do something.\n\nIn the future, I'd like to make it so that we use more context to decide how to punish a peer.  One example is to differentiate inbound and outbound peer misbehaviors.  Another potential example is if we'd treat RECENT_",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261834407,261834407,src/net_processing.cpp
sdaftuar,2019-03-02T17:24:53Z,I think this PR is basically what that TODO is referring to!,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261834566,261834566,src/net_processing.cpp
sdaftuar,2019-03-02T17:26:01Z,Cleaned up in the latest version.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261834593,261834593,src/net_processing.cpp
sdaftuar,2019-03-02T17:27:59Z,Is this still relevant after the latest changes?,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261834665,261834665,src/net_processing.cpp
kallewoof,2019-03-05T05:21:43Z,"Maybe this is covered already, but why is premature coinbase using `TX_MISSING_INPUTS` as the reason? It's not really missing.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262350926,262350926,src/consensus/tx_verify.cpp
kallewoof,2019-03-05T05:25:37Z,"I understand if you don't wanna bother this late in the process, but it really seems like `ValidationResult` or `ValidationOutcome` would have been easier on the eyes, where this would be `SUCCESSFUL` or something.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262351517,262351517,src/consensus/validation.h
kallewoof,2019-03-05T05:29:13Z,"Any particular reason why this isn't just `CNodeState(.., const std::string& addrNameIn, ...) : ..., name(addrNameIn)`?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262352042,262352042,src/net_processing.cpp
kallewoof,2019-03-05T05:39:18Z,"You could shrink diff a few lines if you felt like it:\n```C++\nif (!state.IsInvalid() || !TxRelayMayResultInDisconnect(state)) {\n    LogPrintf(""Force relaying tx %s from whitelisted peer=%d\n"", tx.GetHash().ToString(), pfrom->GetId());\n    RelayTransaction(tx, connman);\n} else {\n    LogPrintf(""Not relaying invalid transaction %s from whitelisted peer=%d (%s)\n"", tx.GetHash().ToString(),",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262353524,262353524,src/net_processing.cpp
kallewoof,2019-03-05T05:42:37Z,"Nit: you use `/*paramname=*/ value` above, but `/*paramname*/ value` here.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262354030,262354030,src/net_processing.cpp
kallewoof,2019-03-05T05:43:00Z,And here (`p=` vs `p`).,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262354087,262354087,src/net_processing.cpp
kallewoof,2019-03-05T05:45:14Z,Good question.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262354509,262354509,src/validation.cpp
kallewoof,2019-03-05T05:49:48Z,"Still extra space as @ryanofsky pointed out.\n```suggestion\n                    // soft-fork flags to our script flags, in which case we need to\n```",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262355138,262355138,src/validation.cpp
ajtowns,2019-03-05T06:25:35Z,Should update the comment here too probably -- s/assign a non-zero DoS score for/disconnect a peer/.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262361186,262361186,src/net_processing.cpp
ajtowns,2019-03-05T06:26:15Z,"Yeah, swapping the order here messes up the following fixup! commits too.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262361315,262361315,src/net_processing.cpp
ajtowns,2019-03-05T08:20:09Z,"In either case, the transaction may be valid sometime later, but isn't valid now and isn't valid in a block, so they're not very distinct.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262387412,262387412,src/consensus/tx_verify.cpp
kallewoof,2019-03-05T08:29:08Z,`TX_INPUTS_UNAVAILABLE`?,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262390249,262390249,src/consensus/tx_verify.cpp
ryanofsky,2019-03-05T18:53:20Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256054235\n\nThanks, this makes sense and the simplification fixes all the parts I didn't like.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262641531,262641531,src/net_processing.cpp
ryanofsky,2019-03-05T18:53:29Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256052181\n\n> Is this still relevant after the latest changes?\n\nNot important. Maybe you could say a comment would be more helpful now that the functions don't look related. But it's not a big deal if there's no reminder to check sending behavior when you change receiving behavior.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262641592,262641592,src/net_processing.cpp
ryanofsky,2019-03-05T18:55:54Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256091126\n\nThanks, looks like these cases are really not possible given `assert(IsTransactionReason)` in the new code.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262642581,262642581,src/net_processing.cpp
ryanofsky,2019-03-05T19:04:16Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262352042\n\n> Any particular reason why this isn't just CNodeState(.., const std::string& addrNameIn, ...) : ..., name(addrNameIn)?\n\nThis would be worse because you can't move from a const reference and there would be an unnecessary copy.\n\nIf a function is inserting an argument into a data structure, it's good practice for it",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262645915,262645915,src/net_processing.cpp
ryanofsky,2019-03-05T19:35:11Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r250800408\n\n> Done\n\nThanks, new commit is ""Remove redundant state.Invalid() call after CheckTransaction()"" (59ff8e67c2c62ec11d76d3d1b54dc4829363ad5e)",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262657469,262657469,src/validation.cpp
ryanofsky,2019-03-05T19:36:51Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r250807170\n\n> Updated with a new comment.\n\nThanks, new commit is ""[refactor] Update some comments in validation.cpp as we arent doing DoS there"" (9b7978efe3d127fa7833d6561a9d053c6820dc1b)\n",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262658155,262658155,src/validation.cpp
ryanofsky,2019-03-05T19:38:11Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r256061290\n\n> It would be clearer to write\n\nStill might be nice to make this change",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262658711,262658711,src/net_processing.cpp
kallewoof,2019-03-06T03:02:45Z,"I am pretty sure there will be no copying if the input is discardable, except for `-O0`, but I could be mistaken.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262776609,262776609,src/net_processing.cpp
ryanofsky,2019-03-06T04:32:46Z,"Initializing the member either has to copy or move, and you can't move from a const object, so the copy constructor will be called. If you are referring to `-O0` it sounds like you are thinking about [copy elision](https://en.cppreference.com/w/cpp/language/copy_elision), but that doesn't apply here for member initialization.\n\nSimple advice is to use `const&` for an argument that you want to c",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262788735,262788735,src/net_processing.cpp
kallewoof,2019-03-06T04:44:51Z,"I see. But we are doing `const type& var` all over the place elsewhere. This is in fact why I wondered about the ""derivation from the standard"" here. (A simple search for `const std::string&` gives 799 results.)",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262790206,262790206,src/net_processing.cpp
sipa,2019-03-06T06:15:13Z,Passing a string by reference doesn't need a copy. Using it to initialize a member does.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262803346,262803346,src/net_processing.cpp
kallewoof,2019-03-06T07:13:13Z,Interesting. Sorry for clogging up the PR.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262814934,262814934,src/net_processing.cpp
jonatack,2019-03-06T11:37:09Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r261834407\n\nPossibly consider adding this helpful context information to the PR description.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262903651,262903651,src/net_processing.cpp
Sjors,2019-03-06T13:28:19Z,"So if I understand this correctly:\n* `state.Invalid()` just calls `state.DoS() with `level=0` and `corruptionIn=false` (default).\n* `CheckTransaction()` can currently fail in various ways, calling:\n  * `state.DoS` with:\n    * `level` 10 or 100: _why isn't this higher level a problem?_\n    * `corruptionIn` not specified (so defaults to `false`)",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262939693,262939693,src/validation.cpp
Sjors,2019-03-06T13:37:44Z,"Note that `MAX_BLOCK_SIGOPS` has been renamed / replaced by `MAX_STANDARD_TX_SIGOPS_COST` as part of SegWit in 2b1f6f9ccf36f1e0a2c9d99154e1642f796d7c2b. In addition to this comment, `MAX_BLOCK_SIGOPS` is also still mentioned in the function test framework. But that doesn't explain why the comment can be removed.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262943213,262943213,src/validation.cpp
Sjors,2019-03-06T13:44:57Z,"Not sure about what to change here, but it's helpful to clarify the role of whitelisting peers better.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262946088,262946088,src/net_processing.cpp
Sjors,2019-03-06T14:27:05Z,"What was the original idea behind bumping this? Was it to continue validating and perhaps find additional errors before giving up, to see if the originating peer needs stronger punishment?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262963047,262963047,src/consensus/validation.h
sdaftuar,2019-03-07T14:52:53Z,"I'd prefer to rename this in a future PR, since that would be a simple change and I don't want to hold up the structural improvements here.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263416581,263416581,src/consensus/validation.h
sdaftuar,2019-03-07T15:04:20Z,"> level 10 or 100: why isn't this higher level a problem?\n\n@sjors I don't understand your question -- can you rephrase?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263421860,263421860,src/validation.cpp
sdaftuar,2019-03-07T15:16:14Z,"I think this comment is not very helpful. It was originally added in #4150, and in the review on that PR people complained that the phrasing in this comment is confusing (""invalid rather than merely non-standard"" - huh?).\n\nIf reviewers prefer it, then I can just improve this comment rather than delete it -- it just seems to me like the code reads just fine on its own.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263427652,263427652,src/validation.cpp
sdaftuar,2019-03-07T19:18:39Z,Done,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263529316,263529316,src/net_processing.cpp
sdaftuar,2019-03-07T19:21:11Z,Done in latest commit.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263530223,263530223,src/net_processing.cpp
sdaftuar,2019-03-07T19:21:21Z,Done,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263530270,263530270,src/net_processing.cpp
sdaftuar,2019-03-07T19:24:46Z,Yeah I was just going to skip this because it gets rewritten in a later commit.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263531494,263531494,src/net_processing.cpp
sdaftuar,2019-03-07T19:25:25Z,Done in latest commit.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263531733,263531733,src/net_processing.cpp
sdaftuar,2019-03-07T19:26:04Z,"Not going to bother with these minor style nits, we can clean these up later if anyone cares to.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263531931,263531931,src/net_processing.cpp
sdaftuar,2019-03-07T19:32:53Z,"I don't know the history here, but that seems like a reasonable guess.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263534436,263534436,src/consensus/validation.h
sdaftuar,2019-03-07T19:37:34Z,"Also I think most of the information in this comment is needed because the logic is much more complex before this PR than after.  After this PR, it's very easy to see how we handle different kinds of invalid blocks/headers, and so less verbose explanations are needed about the reasoning.  I shrunk this comment down to:\n```\n            // Disconnect outbound (but not inbound) peers if on an inv",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263536180,263536180,src/net_processing.cpp
sdaftuar,2019-03-07T19:51:40Z,I created a new TX_PREMATURE_COINBASE for this in the latest commit.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r263541233,263541233,src/consensus/tx_verify.cpp
ajtowns,2019-04-01T08:11:40Z,"`MAX_BLOCK_SIGOPS` is replaced by `MAX_BLOCK_SIGOPS_COST` (which is just multiplied by the witness scale factor of 4) as part of segwit. `MAX_STANDARD_TX_SIGOPS_COST` is just a separate rule at the relay/mempool level saying ""you have to use at least 5 tx's to hit the sigop limit"".\n\nI agree that the comment's just confusing given how we understand ""invalid"" (breaks consensus rules) vs ""non-sta",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r270755296,270755296,src/validation.cpp
ajtowns,2019-04-01T09:29:07Z,"If I understand correctly: the higher level (ie, changing the 10's to 100's in 96cedc8d0c0e3ad279bc2223a7fc3185b17ebde5 - the ""clean up banning levels"" commit) isn't a problem because these failures are all consensus ones, so any reasonable implementation shouldn't be making them. (Except for immature coinbase and missing inputs at the mempool level which are downgraded elsewhere)",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r270783503,270783503,src/validation.cpp
jamesob,2019-04-01T20:34:34Z,"This seems fluffy - I suspect we'd want to call out specific changes if we were to actually do something like this.\nI guess there's value in having it here as a conceptual placeholder, but I'd be surprised if this symbol ever actually got used.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r271039747,271039747,src/consensus/validation.h
jamesob,2019-04-01T20:37:44Z,Nice.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r271040842,271040842,src/consensus/validation.h
jamesob,2019-04-01T20:48:37Z,"I know this is behavior we're inheriting, but I find it kind of weird that too many sigops in a transaction is considered a standardness issue (score 0), but too many sigops in a block is consensus violation (ban). I guess conceptually it's not as bad to try to broadcast a transaction that has too many sigops vs. a PoW'd block, but I'm curious if there's a specific reason for the inconsistency bey",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r271044827,271044827,src/validation.cpp
sdaftuar,2019-04-03T09:28:21Z,"Happy to remove if others agree since that was my preference as well, but I left this in because Matt preferred it when we originally discussed this on his PR.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r271653942,271653942,src/consensus/validation.h
jamesob,2019-04-03T15:25:16Z,It's not hurting anything; I'd rather have this merged and remove it later.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r271798923,271798923,src/consensus/validation.h
TheBlueMatt,2019-04-08T21:24:23Z,"Can you amend the commit message to indicate *why* the ""obsolete comment"" is obsolete?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273244827,273244827,src/validation.cpp
TheBlueMatt,2019-04-08T21:34:09Z,"""Use maybepunish"" needs a real commitmessage. Wtf is a ""maybepunish"" and why are we using it?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273247912,273247912,src/net_processing.cpp
TheBlueMatt,2019-04-09T17:54:28Z,"In ""use maybepunish"" - this is a major behavior change. After this commit sending an invalid header via compact block no longer gets a ban when it previously did.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273627490,273627490,src/net_processing.cpp
TheBlueMatt,2019-04-09T17:56:33Z,"Can you just drop this commit? Its really nontrivial to review and, by the end, is unused anyway.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273628371,273628371,src/consensus/validation.h
TheBlueMatt,2019-04-09T18:14:34Z,"This now results in banning peers when they relay us mempool transactions when we aren't yet fully synced. I dont think this is acceptable. Also, you add this here and then have a commit dedicated to removing it later, all to make intermediate assert()s pass, when you could just change the above DoS score...",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273635618,273635618,src/consensus/tx_verify.cpp
TheBlueMatt,2019-04-09T18:53:06Z,Both of these asserts are useless - we remove the value later in the same PR - please enforce this using the scripted-diff or just remove them - they only serve to confuse reviewers.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273651943,273651943,src/consensus/validation.h
TheBlueMatt,2019-04-09T18:56:54Z,"This is nonsense, why is it in consensus code, and why is it removed later? It just makes review harder.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273653409,273653409,src/consensus/validation.h
TheBlueMatt,2019-04-09T18:59:12Z,"what? The compiler will warn you if you are missing an entry, instead of adding an assert which only warns at runtime?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273654298,273654298,src/consensus/validation.h
TheBlueMatt,2019-04-09T18:59:42Z,"Huh?! Just remove the parameter, then.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273654487,273654487,src/net_processing.cpp
TheBlueMatt,2019-04-09T19:21:34Z,"Still this. Also, the grammar here is confusing - what may not be the case until we add new flags? I think you meant ""note that this may not be the case *after* we add additional flags""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273662210,273662210,src/validation.cpp
TheBlueMatt,2019-04-09T19:23:35Z,This name is somewhat more generic than it needs to be - maybe call it BLOCK_TIME_FUTURE.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273662927,273662927,src/consensus/validation.h
TheBlueMatt,2019-04-09T19:24:16Z,Why is this CONSENSUS and not BLOCK_INVALID_HEADER?,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273663169,273663169,src/validation.cpp
TheBlueMatt,2019-04-09T19:34:40Z,"Can you squash ""nit: reason -> m_reason""? Please don't add full commits that just address nits. Ignoring the nit is also perfectly valid.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273666745,273666745,src/consensus/validation.h
TheBlueMatt,2019-04-09T19:35:31Z,"Oof this really sucks. To avoid delaying this PR I think this is fine, but we *really* need to just switch to two different ValidationState classes for Transactions and Blocks.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273667031,273667031,src/consensus/validation.h
jnewbery,2019-04-11T14:25:20Z,"re: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r262963047\n\nThis needs to be done in this early commit so that the second half of this PR is refactor-only. Once we move to invalid-reason based punishment, calling `Invalid()` on a `CValidationState` object  sets the reason and doesn't 'increment' it.\n\nI think this commit should stay, possible squashed with the following commit ",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r274450461,274450461,src/consensus/validation.h
sdaftuar,2019-04-11T18:38:07Z,Done in latest version.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r274577540,274577540,src/validation.cpp
sdaftuar,2019-04-11T18:38:13Z,Done in latest version.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r274577574,274577574,src/net_processing.cpp
sdaftuar,2019-04-11T18:38:22Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r274577634,274577634,src/net_processing.cpp
sdaftuar,2019-04-11T18:38:32Z,Fixed the banning brokenness.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r274577714,274577714,src/consensus/tx_verify.cpp
sdaftuar,2019-04-11T18:38:53Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r274577833,274577833,src/consensus/validation.h
sdaftuar,2019-04-13T23:45:19Z,"@TheBlueMatt On further thought, I think this commit still introduces a bug in compact block headers handling, which is fixed later in this PR -- a duplicate-invalid header delivered by a compact block peer would cause that peer to get disconnected.  Will fix.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275136052,275136052,src/net_processing.cpp
jnewbery,2019-04-15T21:53:43Z,"I agree that this is confusing. IMO, even better than passing in `state.GetDoS() to state.DoS()` would be:\n\n```\nstate.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false, state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\nstate.SetCorruptionPossible();\n```",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275559383,275559383,src/validation.cpp
ajtowns,2019-04-16T06:19:52Z,"FWIW, I had a go at this. See https://github.com/ajtowns/bitcoin/commits/201904-dos-rework-sep\n\nI think it works okay, but splitting the type sure hits a lot of lines, see: https://github.com/ajtowns/bitcoin/commit/74bf5c12672d7eee877230d31b308c696fe83904 which is the commit that just splits the type. It's followed by the rest of this PR rebased on top of it, but with ValidationInvalidReason r",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275642921,275642921,src/consensus/validation.h
jnewbery,2019-04-16T14:37:02Z,"Nice work @ajtowns, but I think @sdaftuar might have a meltdown if we try to rebase this PR on any additional changes at this point. It seems to me that splitting `CValidationState` into separate classes for Tx and Block can be done in a follow-up PR to this. I'll commit to reviewing that follow-up PR if you open it after this is merged.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275831887,275831887,src/consensus/validation.h
jnewbery,2019-04-16T18:49:33Z,"nit: This should be ""not invalid or not yet tested for validity""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275943030,275943030,src/consensus/validation.h
jnewbery,2019-04-16T18:51:18Z,nit: I think this TODO should be next to the `TX_MISSING_INPUTS` line,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275943653,275943653,src/consensus/validation.h
jnewbery,2019-04-16T19:00:39Z,nit: this seems like the wrong reason (although `nAbsurdFee` is only used by the wallet so it doesn't really matter. I also think that ATMP shouldn't take an `nAbsurdFee` parameter - see #15810),https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275947067,275947067,src/validation.cpp
jnewbery,2019-04-16T19:21:39Z,"nit: change ""we don't know why"" to ""we didn't store the reason why""",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275954338,275954338,src/consensus/validation.h
jnewbery,2019-04-16T19:33:58Z,"nit: drop the `first_invalid_header` argument. It defaults to `nullptr` and you're no longer using the returned value.\n\nFollow-up: remove the `first_invalid` argument from `ProcessNewBlockHeaders()` since none of the callers now use it.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r275958549,275958549,src/net_processing.cpp
JeremyRubin,2019-04-25T19:27:03Z,"Noting for later reference:\n\nDefinitely not worth changing in this PR now given # of acks, but this can probably be cleaned up in a later PR to just give each category of error a unique prefix (e.g, make all TX_* have MSByte set to 3 and all BLOCK_* have MSB set to 2 and general set to 1) or something.\n\n```\nenum class ValidationInvalidReason : uint64_t {\n  IS_GENERAL REASON =1 << 56,\",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r278697544,278697544,src/consensus/validation.h
promag,2019-04-30T00:22:49Z,"nit, this could have stayed.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r279584928,279584928,src/validation.cpp
laanwj,2019-04-30T07:14:41Z,"Two things here:\n- I think the point here was to add the specific failed tx hash as context information\n- Not sure it's a good idea to add `LogPrintf` in validation. We've spent a lot of time some years ago to remove all direct logging in validation to reduce the spamminess for users (don't want `ERROR`s in the log for things that are not the users's fault), replacing it with messages in the v",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r279635303,279635303,src/validation.cpp
practicalswift,2019-04-30T07:25:10Z,"Use `LogPrint(BCLog, …)` instead  to log to a specific log category and thus reduce the default log noise?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r279638040,279638040,src/validation.cpp
practicalswift,2019-04-30T07:25:32Z,"Use `LogPrint(BCLog, …)` instead  to log to a specific log category and thus reduce the default log noise?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r279638157,279638157,src/net_processing.cpp
laanwj,2019-04-30T07:25:36Z,"There's a very large correlation with the reject codes here e.g. ValidationInvalidReason::CONSENSUS<->REJECT_INVALID. Not really a problem, though adding another way to classify every instance of Invalid/DoS seems a bit overkill and the number of parameters keeps growing.\n\nEdit: couldn't we *replace* the reject code with a mapping from ValidationInvalidReason?",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r279638172,279638172,src/consensus/tx_check.cpp
jnewbery,2019-04-30T14:00:28Z,See commit https://github.com/bitcoin/bitcoin/pull/15921/commits/903d68f21da8eaa9f397232f54d35b8c58de8851 in follow-up PR #15921 which removes the reject code from ValidationState.,https://github.com/bitcoin/bitcoin/pull/15141#discussion_r279767688,279767688,src/consensus/tx_check.cpp
sdaftuar,2019-05-02T19:11:45Z,"Thanks, I see your point (and good catch on the unconditional log message, I agree that we should not do that). I'll revert this change.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r280558397,280558397,src/validation.cpp
sdaftuar,2020-02-05T15:09:25Z,"@TheBlueMatt I was tracking down our use of TX_WITNESS_MUTATED and the introduction of it here seems like a bug -- any idea why we did this?  TX_NOT_STANDARD seems more correct, and actually I think now that we should rename TX_WITNESS_MUTATED to TX_WITNESS_STRIPPED to make it clear how we use it.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r375312729,375312729,src/validation.cpp
TheBlueMatt,2020-02-05T20:10:33Z,"It was my understanding that this could trigger in case the witness was malleated by a third part (making it nonstandard), which was the original definition for WITNESS_MUTATED.",https://github.com/bitcoin/bitcoin/pull/15141#discussion_r375482254,375482254,src/validation.cpp
