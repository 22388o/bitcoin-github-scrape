[
  {
    "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDI4ODdmMjdmYjU4MDllNzI4NjJkNDM4NWViYTg2NTg4YmM5N2Qw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-03T21:23:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Require timestamps for importmulti keys\n\nAdditionally, accept a \"now\" timestamp, to allow avoiding rescans for keys\nwhich are known never to have been used.\n\nNote that the behavior when \"now\" is specified is slightly different than the\nprevious behavior when no timestamp was specified at all. Previously, when no\ntimestamp was specified, it would avoid rescanning during the importmulti call,\nbut set the key's nCreateTime value to 1, which would not prevent future block\nreads in later ScanForWalletTransactions calls. With this change, passing a\n\"now\" timestamp will set the key's nCreateTime to the current block time\ninstead of 1.\n\nFixes #9491",
      "tree": {
        "sha": "203a8fb48e26aaa644aa5f21c9a3bf92ef886786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203a8fb48e26aaa644aa5f21c9a3bf92ef886786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/442887f27fb5809e72862d4385eba86588bc97d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 64,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8f60e63e2e50dd7ecc7c2f84b5aace5a68d83440",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -33,6 +33,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n             \"scriptPubKey\": {\n                 \"address\": address\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [pubkey] if data == Data.pub else [],\n             \"keys\": [key] if data == Data.priv else [],\n             \"label\": label,"
      },
      {
        "sha": "b4d4b6c5b8048faee3fcc2b895d37e51446fb4cc",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -52,7 +52,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -65,6 +66,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -76,7 +78,8 @@ def run_test (self):\n         print(\"Should not import a scriptPubKey without internal flag\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": address['scriptPubKey']\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -93,6 +96,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -106,6 +110,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -120,6 +125,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n         result = self.nodes[1].importmulti(request)\n@@ -137,6 +143,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -151,6 +158,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"watchonly\": True\n         }])\n@@ -166,6 +174,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n@@ -179,6 +188,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -203,7 +213,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n@@ -229,6 +240,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -253,6 +265,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n@@ -277,6 +290,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n             \"watchonly\": True\n@@ -294,6 +308,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -310,6 +325,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -330,6 +346,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -346,6 +363,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n             \"internal\": True\n         }])\n@@ -356,5 +374,18 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n \n+        # Bad or missing timestamps\n+        print(\"Should throw on invalid or missing timestamp values\")\n+        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+            }])\n+        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+                \"timestamp\": \"\",\n+            }])\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "4674c95bfe606e1eabe9cdf78f7c588e08936448",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -640,7 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue processImport(const UniValue& data) {\n+UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+{\n     try {\n         bool success = false;\n \n@@ -659,7 +660,6 @@ UniValue processImport(const UniValue& data) {\n         const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         bool isP2SH = strRedeemScript.length() > 0;\n@@ -958,6 +958,20 @@ UniValue processImport(const UniValue& data) {\n     }\n }\n \n+int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+{\n+    if (data.exists(\"timestamp\")) {\n+        const UniValue& timestamp = data[\"timestamp\"];\n+        if (timestamp.isNum()) {\n+            return timestamp.get_int64();\n+        } else if (timestamp.isStr() && timestamp.get_str() == \"now\") {\n+            return now;\n+        }\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected number or \\\"now\\\" timestamp value for key. got type %s\", uvTypeName(timestamp.type())));\n+    }\n+    throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n+}\n+\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     // clang-format off\n@@ -970,13 +984,17 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n-            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n@@ -1015,6 +1033,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     EnsureWalletIsUnlocked();\n \n+    // Verify all timestamps are present before importing any keys.\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    for (const UniValue& data : requests.getValues()) {\n+        GetImportTimestamp(data, now);\n+    }\n+\n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n@@ -1028,7 +1052,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n-        const UniValue result = processImport(data);\n+        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+        const UniValue result = ProcessImport(data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1041,8 +1066,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n \n         // Get the lowest timestamp.\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n-\n         if (timestamp < nLowestTimestamp) {\n             nLowestTimestamp = timestamp;\n         }"
      }
    ]
  },
  {
    "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Y5OTE3NTZjZjM1N2I2NTFjNjQxNWUzZDk1MGU1YWE5ZDM1NWFi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-06T16:13:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Add test to check new importmulti \"now\" value\n\nEasiest way to test this was to expose the timestamp via the validateaddress\nRPC (which was already looking up and returning key metadata).",
      "tree": {
        "sha": "f38afae8fed8244798b0e85eb7d64e24a8a2ed01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f38afae8fed8244798b0e85eb7d64e24a8a2ed01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b9874ccb855dd6a650e4dc4318a4afa8a29dc334",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -139,6 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -150,6 +151,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # Address + Private key + watchonly\n         print(\"Should not import an address with private key and with watchonly\")"
      },
      {
        "sha": "25fad3c2e38e315efe901a9080f3499274e9179c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -167,6 +167,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -204,10 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-        {\n-            ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-            ret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+        if (pwalletMain) {\n+            const auto& meta = pwalletMain->mapKeyMetadata;\n+            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it != meta.end()) {\n+                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                if (!it->second.hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                }\n+            }\n         }\n #endif\n     }"
      }
    ]
  },
  {
    "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjZhODExNGNiZTJhODdhNmM4NGQ3NjkwYTc3MTZhMThkNzgyYzU2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-07T16:08:08Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Use MTP for importmulti \"now\" timestamps",
      "tree": {
        "sha": "772a6f3de292c0c246d151ab23babce021f21748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/772a6f3de292c0c246d151ab23babce021f21748"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52e40d6c1cc3d07fe4c17649cf6f6d8741299d86",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -139,7 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']"
      },
      {
        "sha": "9310a320c76c4737eaabcadcde7eccc3c43f9033",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -1034,7 +1034,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     EnsureWalletIsUnlocked();\n \n     // Verify all timestamps are present before importing any keys.\n-    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n     for (const UniValue& data : requests.getValues()) {\n         GetImportTimestamp(data, now);\n     }"
      }
    ]
  }
]