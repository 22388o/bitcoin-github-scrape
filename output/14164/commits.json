[
  {
    "sha": "dc287c98f8b33576f3c71db02a232106ef0e57d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzI4N2M5OGY4YjMzNTc2ZjNjNzFkYjAyYTIzMjEwNmVmMGU1N2Q5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-07T12:20:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-07T12:20:26Z"
      },
      "message": "Squashed 'src/univalue/' changes from 51d3ab34ba..7890db99d6\n\n7890db99d6 Merge #11: Remove deprecated std pair wrappers\n40e34852ac Merge #14: Cleaned up namespace imports to reduce symbol collisions\n85052a4819 Remove deprecated std::pair wrappers\nd208f986dd Cleaned up namespace imports to reduce symbol collisions\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 7890db99d693572d27ade3e14268bd7236134529",
      "tree": {
        "sha": "e73765406fc0a0fb4796504ea08a2e05cfea8bc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e73765406fc0a0fb4796504ea08a2e05cfea8bc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc287c98f8b33576f3c71db02a232106ef0e57d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc287c98f8b33576f3c71db02a232106ef0e57d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc287c98f8b33576f3c71db02a232106ef0e57d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc287c98f8b33576f3c71db02a232106ef0e57d9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a570098021be6a7b9f4589300ea655ae4633628e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a570098021be6a7b9f4589300ea655ae4633628e"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 27,
      "deletions": 104
    },
    "files": [
      {
        "sha": "85fe20924acef784470a633886c7ba86d6979bcf",
        "filename": "gen/gen.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc287c98f8b33576f3c71db02a232106ef0e57d9/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc287c98f8b33576f3c71db02a232106ef0e57d9/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/gen/gen.cpp?ref=dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "patch": "@@ -12,8 +12,6 @@\n #include <string.h>\n #include \"univalue.h\"\n \n-using namespace std;\n-\n static bool initEscapes;\n static std::string escapes[256];\n "
      },
      {
        "sha": "91b104e56e7436986e5ea147bc815ab4156bb9cf",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 0,
        "deletions": 68,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc287c98f8b33576f3c71db02a232106ef0e57d9/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc287c98f8b33576f3c71db02a232106ef0e57d9/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "patch": "@@ -15,7 +15,6 @@\n #include <cassert>\n \n #include <sstream>        // .get_int64()\n-#include <utility>        // std::pair\n \n class UniValue {\n public:\n@@ -177,76 +176,9 @@ class UniValue {\n     const UniValue& get_array() const;\n \n     enum VType type() const { return getType(); }\n-    bool push_back(std::pair<std::string,UniValue> pear) {\n-        return pushKV(pear.first, pear.second);\n-    }\n     friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n };\n \n-//\n-// The following were added for compatibility with json_spirit.\n-// Most duplicate other methods, and should be removed.\n-//\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(cVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(strVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(u64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(i64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(dVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n-{\n-    std::string key(cKey);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n-{\n-    return std::make_pair(key, uVal);\n-}\n-\n enum jtokentype {\n     JTOK_ERR        = -1,\n     JTOK_NONE       = 0,                           // eof"
      },
      {
        "sha": "4c9c15d63e338557b9004ae1b48cea320c30a139",
        "filename": "lib/univalue.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc287c98f8b33576f3c71db02a232106ef0e57d9/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc287c98f8b33576f3c71db02a232106ef0e57d9/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "patch": "@@ -10,8 +10,6 @@\n \n #include \"univalue.h\"\n \n-using namespace std;\n-\n const UniValue NullUniValue;\n \n void UniValue::clear()\n@@ -37,15 +35,15 @@ bool UniValue::setBool(bool val_)\n     return true;\n }\n \n-static bool validNumStr(const string& s)\n+static bool validNumStr(const std::string& s)\n {\n-    string tokenVal;\n+    std::string tokenVal;\n     unsigned int consumed;\n     enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n-bool UniValue::setNumStr(const string& val_)\n+bool UniValue::setNumStr(const std::string& val_)\n {\n     if (!validNumStr(val_))\n         return false;\n@@ -58,7 +56,7 @@ bool UniValue::setNumStr(const string& val_)\n \n bool UniValue::setInt(uint64_t val_)\n {\n-    ostringstream oss;\n+    std::ostringstream oss;\n \n     oss << val_;\n \n@@ -67,7 +65,7 @@ bool UniValue::setInt(uint64_t val_)\n \n bool UniValue::setInt(int64_t val_)\n {\n-    ostringstream oss;\n+    std::ostringstream oss;\n \n     oss << val_;\n \n@@ -76,7 +74,7 @@ bool UniValue::setInt(int64_t val_)\n \n bool UniValue::setFloat(double val_)\n {\n-    ostringstream oss;\n+    std::ostringstream oss;\n \n     oss << std::setprecision(16) << val_;\n \n@@ -85,7 +83,7 @@ bool UniValue::setFloat(double val_)\n     return ret;\n }\n \n-bool UniValue::setStr(const string& val_)\n+bool UniValue::setStr(const std::string& val_)\n {\n     clear();\n     typ = VSTR;"
      },
      {
        "sha": "14834db24dc8f1455566303a6a54eb0ed7b66ffd",
        "filename": "lib/univalue_read.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc287c98f8b33576f3c71db02a232106ef0e57d9/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc287c98f8b33576f3c71db02a232106ef0e57d9/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "patch": "@@ -8,8 +8,6 @@\n #include \"univalue.h\"\n #include \"univalue_utffilter.h\"\n \n-using namespace std;\n-\n static bool json_isdigit(int ch)\n {\n     return ((ch >= '0') && (ch <= '9'));\n@@ -42,7 +40,7 @@ static const char *hatoui(const char *first, const char *last,\n     return first;\n }\n \n-enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n+enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n                             const char *raw, const char *end)\n {\n     tokenVal.clear();\n@@ -114,7 +112,7 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n     case '8':\n     case '9': {\n         // part 1: int\n-        string numStr;\n+        std::string numStr;\n \n         const char *first = raw;\n \n@@ -174,7 +172,7 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n     case '\"': {\n         raw++;                                // skip \"\n \n-        string valStr;\n+        std::string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n         while (true) {\n@@ -255,9 +253,9 @@ bool UniValue::read(const char *raw, size_t size)\n     clear();\n \n     uint32_t expectMask = 0;\n-    vector<UniValue*> stack;\n+    std::vector<UniValue*> stack;\n \n-    string tokenVal;\n+    std::string tokenVal;\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;"
      },
      {
        "sha": "827eb9b27154ba202a8d7b6c97f941a18ec363dd",
        "filename": "lib/univalue_write.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc287c98f8b33576f3c71db02a232106ef0e57d9/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc287c98f8b33576f3c71db02a232106ef0e57d9/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "patch": "@@ -8,11 +8,9 @@\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n \n-using namespace std;\n-\n-static string json_escape(const string& inS)\n+static std::string json_escape(const std::string& inS)\n {\n-    string outS;\n+    std::string outS;\n     outS.reserve(inS.size() * 2);\n \n     for (unsigned int i = 0; i < inS.size(); i++) {\n@@ -28,10 +26,10 @@ static string json_escape(const string& inS)\n     return outS;\n }\n \n-string UniValue::write(unsigned int prettyIndent,\n-                       unsigned int indentLevel) const\n+std::string UniValue::write(unsigned int prettyIndent,\n+                            unsigned int indentLevel) const\n {\n-    string s;\n+    std::string s;\n     s.reserve(1024);\n \n     unsigned int modIndent = indentLevel;\n@@ -62,12 +60,12 @@ string UniValue::write(unsigned int prettyIndent,\n     return s;\n }\n \n-static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n+static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)\n {\n     s.append(prettyIndent * indentLevel, ' ');\n }\n \n-void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\n {\n     s += \"[\";\n     if (prettyIndent)\n@@ -89,7 +87,7 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n     s += \"]\";\n }\n \n-void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\n {\n     s += \"{\";\n     if (prettyIndent)"
      },
      {
        "sha": "75c0dc225a72e0fd3df027d66ed66f569b2c51f6",
        "filename": "test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc287c98f8b33576f3c71db02a232106ef0e57d9/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc287c98f8b33576f3c71db02a232106ef0e57d9/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "patch": "@@ -17,8 +17,7 @@\n #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n #endif\n \n-using namespace std;\n-string srcdir(JSON_TEST_SRC);\n+std::string srcdir(JSON_TEST_SRC);\n static bool test_failed = false;\n \n #define d_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", filename.c_str()); } }\n@@ -30,9 +29,9 @@ static std::string rtrim(std::string s)\n     return s;\n }\n \n-static void runtest(string filename, const string& jdata)\n+static void runtest(std::string filename, const std::string& jdata)\n {\n-        string prefix = filename.substr(0, 4);\n+        std::string prefix = filename.substr(0, 4);\n \n         bool wantPass = (prefix == \"pass\") || (prefix == \"roun\");\n         bool wantFail = (prefix == \"fail\");\n@@ -56,19 +55,19 @@ static void runtest(string filename, const string& jdata)\n \n static void runtest_file(const char *filename_)\n {\n-        string basename(filename_);\n-        string filename = srcdir + \"/\" + basename;\n+        std::string basename(filename_);\n+        std::string filename = srcdir + \"/\" + basename;\n         FILE *f = fopen(filename.c_str(), \"r\");\n         assert(f != NULL);\n \n-        string jdata;\n+        std::string jdata;\n \n         char buf[4096];\n         while (!feof(f)) {\n                 int bread = fread(buf, 1, sizeof(buf), f);\n                 assert(!ferror(f));\n \n-                string s(buf, bread);\n+                std::string s(buf, bread);\n                 jdata += s;\n         }\n "
      }
    ]
  },
  {
    "sha": "faad55a9a24601aac47b5e3bc44827ddb41d8f93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFkNTVhOWEyNDYwMWFhYzQ3YjVlM2JjNDQ4MjdkZGI0MWQ4Zjkz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-07T12:22:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-07T12:21:14Z"
      },
      "message": "Update univalue subtree",
      "tree": {
        "sha": "2608058e723256ed51a68b3048af1ae61b03d8ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2608058e723256ed51a68b3048af1ae61b03d8ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faad55a9a24601aac47b5e3bc44827ddb41d8f93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbkm06AAoJEM4rdWl+aaVIkqgMAJI7/DaP/8BRM1JmhyZvoyu+\nX7z2hODtuwuoHksADiPxvvAaWzgscDXfIN6tXn5QkU2zbbAU+eiKYB/lb1GTbKzf\nESwfplDwEn0acG2QOf9NSrBier8XfdJlLlrA9Ghy4h8hTCcVLM463FWbtt9ACz46\n0od0d43taQxEH/PX89Gr/hgxaWO63C83LZ0aEreloV7bBtHoIafanwFxlYaI96UH\nKUaCdWnklpNYjwweE+XdG5cIDxRWenx/wfPmfDTYI9BsSwUE2piNNGnmGhAtDQjF\nhU6lsheqmGzNcDdx00e8NCHbElw7oKvH9YAjYZdy4FCwSewqgskAMcNGXGK5WRP9\nfSo5XhUQhy15+oQUInHPyX2jN5bo7PB1P3m9GMCBjD+U6Dlwx6Ats8Pm0H/0RiiD\nt7ek6FHGbihfFLHWm3qgGCQ97l8CpfyLorCPdosqMflhJ5CURdzqVBpzHir8eWjw\niS0B1tKjQWB0U6XoWzWcKZRii0nzCvuMGES1Q+0xuw==\n=JqCW\n-----END PGP SIGNATURE-----",
        "payload": "tree 2608058e723256ed51a68b3048af1ae61b03d8ea\nparent 4799b0932a10c5a48706700a07899b33ef9c8bae\nparent dc287c98f8b33576f3c71db02a232106ef0e57d9\nauthor MarcoFalke <falke.marco@gmail.com> 1536322920 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1536322874 -0400\n\nUpdate univalue subtree\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faad55a9a24601aac47b5e3bc44827ddb41d8f93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faad55a9a24601aac47b5e3bc44827ddb41d8f93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faad55a9a24601aac47b5e3bc44827ddb41d8f93/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4799b0932a10c5a48706700a07899b33ef9c8bae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4799b0932a10c5a48706700a07899b33ef9c8bae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4799b0932a10c5a48706700a07899b33ef9c8bae"
      },
      {
        "sha": "dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc287c98f8b33576f3c71db02a232106ef0e57d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc287c98f8b33576f3c71db02a232106ef0e57d9"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 27,
      "deletions": 104
    },
    "files": [
      {
        "sha": "85fe20924acef784470a633886c7ba86d6979bcf",
        "filename": "src/univalue/gen/gen.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen/gen.cpp?ref=faad55a9a24601aac47b5e3bc44827ddb41d8f93",
        "patch": "@@ -12,8 +12,6 @@\n #include <string.h>\n #include \"univalue.h\"\n \n-using namespace std;\n-\n static bool initEscapes;\n static std::string escapes[256];\n "
      },
      {
        "sha": "91b104e56e7436986e5ea147bc815ab4156bb9cf",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 0,
        "deletions": 68,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=faad55a9a24601aac47b5e3bc44827ddb41d8f93",
        "patch": "@@ -15,7 +15,6 @@\n #include <cassert>\n \n #include <sstream>        // .get_int64()\n-#include <utility>        // std::pair\n \n class UniValue {\n public:\n@@ -177,76 +176,9 @@ class UniValue {\n     const UniValue& get_array() const;\n \n     enum VType type() const { return getType(); }\n-    bool push_back(std::pair<std::string,UniValue> pear) {\n-        return pushKV(pear.first, pear.second);\n-    }\n     friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n };\n \n-//\n-// The following were added for compatibility with json_spirit.\n-// Most duplicate other methods, and should be removed.\n-//\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(cVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(strVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(u64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(i64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(dVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n-{\n-    std::string key(cKey);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n-{\n-    return std::make_pair(key, uVal);\n-}\n-\n enum jtokentype {\n     JTOK_ERR        = -1,\n     JTOK_NONE       = 0,                           // eof"
      },
      {
        "sha": "4c9c15d63e338557b9004ae1b48cea320c30a139",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=faad55a9a24601aac47b5e3bc44827ddb41d8f93",
        "patch": "@@ -10,8 +10,6 @@\n \n #include \"univalue.h\"\n \n-using namespace std;\n-\n const UniValue NullUniValue;\n \n void UniValue::clear()\n@@ -37,15 +35,15 @@ bool UniValue::setBool(bool val_)\n     return true;\n }\n \n-static bool validNumStr(const string& s)\n+static bool validNumStr(const std::string& s)\n {\n-    string tokenVal;\n+    std::string tokenVal;\n     unsigned int consumed;\n     enum jtokentype tt = getJsonToken(tokenVal, consumed, s.data(), s.data() + s.size());\n     return (tt == JTOK_NUMBER);\n }\n \n-bool UniValue::setNumStr(const string& val_)\n+bool UniValue::setNumStr(const std::string& val_)\n {\n     if (!validNumStr(val_))\n         return false;\n@@ -58,7 +56,7 @@ bool UniValue::setNumStr(const string& val_)\n \n bool UniValue::setInt(uint64_t val_)\n {\n-    ostringstream oss;\n+    std::ostringstream oss;\n \n     oss << val_;\n \n@@ -67,7 +65,7 @@ bool UniValue::setInt(uint64_t val_)\n \n bool UniValue::setInt(int64_t val_)\n {\n-    ostringstream oss;\n+    std::ostringstream oss;\n \n     oss << val_;\n \n@@ -76,7 +74,7 @@ bool UniValue::setInt(int64_t val_)\n \n bool UniValue::setFloat(double val_)\n {\n-    ostringstream oss;\n+    std::ostringstream oss;\n \n     oss << std::setprecision(16) << val_;\n \n@@ -85,7 +83,7 @@ bool UniValue::setFloat(double val_)\n     return ret;\n }\n \n-bool UniValue::setStr(const string& val_)\n+bool UniValue::setStr(const std::string& val_)\n {\n     clear();\n     typ = VSTR;"
      },
      {
        "sha": "14834db24dc8f1455566303a6a54eb0ed7b66ffd",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=faad55a9a24601aac47b5e3bc44827ddb41d8f93",
        "patch": "@@ -8,8 +8,6 @@\n #include \"univalue.h\"\n #include \"univalue_utffilter.h\"\n \n-using namespace std;\n-\n static bool json_isdigit(int ch)\n {\n     return ((ch >= '0') && (ch <= '9'));\n@@ -42,7 +40,7 @@ static const char *hatoui(const char *first, const char *last,\n     return first;\n }\n \n-enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n+enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n                             const char *raw, const char *end)\n {\n     tokenVal.clear();\n@@ -114,7 +112,7 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n     case '8':\n     case '9': {\n         // part 1: int\n-        string numStr;\n+        std::string numStr;\n \n         const char *first = raw;\n \n@@ -174,7 +172,7 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n     case '\"': {\n         raw++;                                // skip \"\n \n-        string valStr;\n+        std::string valStr;\n         JSONUTF8StringFilter writer(valStr);\n \n         while (true) {\n@@ -255,9 +253,9 @@ bool UniValue::read(const char *raw, size_t size)\n     clear();\n \n     uint32_t expectMask = 0;\n-    vector<UniValue*> stack;\n+    std::vector<UniValue*> stack;\n \n-    string tokenVal;\n+    std::string tokenVal;\n     unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;"
      },
      {
        "sha": "827eb9b27154ba202a8d7b6c97f941a18ec363dd",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=faad55a9a24601aac47b5e3bc44827ddb41d8f93",
        "patch": "@@ -8,11 +8,9 @@\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n \n-using namespace std;\n-\n-static string json_escape(const string& inS)\n+static std::string json_escape(const std::string& inS)\n {\n-    string outS;\n+    std::string outS;\n     outS.reserve(inS.size() * 2);\n \n     for (unsigned int i = 0; i < inS.size(); i++) {\n@@ -28,10 +26,10 @@ static string json_escape(const string& inS)\n     return outS;\n }\n \n-string UniValue::write(unsigned int prettyIndent,\n-                       unsigned int indentLevel) const\n+std::string UniValue::write(unsigned int prettyIndent,\n+                            unsigned int indentLevel) const\n {\n-    string s;\n+    std::string s;\n     s.reserve(1024);\n \n     unsigned int modIndent = indentLevel;\n@@ -62,12 +60,12 @@ string UniValue::write(unsigned int prettyIndent,\n     return s;\n }\n \n-static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n+static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)\n {\n     s.append(prettyIndent * indentLevel, ' ');\n }\n \n-void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\n {\n     s += \"[\";\n     if (prettyIndent)\n@@ -89,7 +87,7 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n     s += \"]\";\n }\n \n-void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\n {\n     s += \"{\";\n     if (prettyIndent)"
      },
      {
        "sha": "75c0dc225a72e0fd3df027d66ed66f569b2c51f6",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faad55a9a24601aac47b5e3bc44827ddb41d8f93/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=faad55a9a24601aac47b5e3bc44827ddb41d8f93",
        "patch": "@@ -17,8 +17,7 @@\n #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n #endif\n \n-using namespace std;\n-string srcdir(JSON_TEST_SRC);\n+std::string srcdir(JSON_TEST_SRC);\n static bool test_failed = false;\n \n #define d_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", filename.c_str()); } }\n@@ -30,9 +29,9 @@ static std::string rtrim(std::string s)\n     return s;\n }\n \n-static void runtest(string filename, const string& jdata)\n+static void runtest(std::string filename, const std::string& jdata)\n {\n-        string prefix = filename.substr(0, 4);\n+        std::string prefix = filename.substr(0, 4);\n \n         bool wantPass = (prefix == \"pass\") || (prefix == \"roun\");\n         bool wantFail = (prefix == \"fail\");\n@@ -56,19 +55,19 @@ static void runtest(string filename, const string& jdata)\n \n static void runtest_file(const char *filename_)\n {\n-        string basename(filename_);\n-        string filename = srcdir + \"/\" + basename;\n+        std::string basename(filename_);\n+        std::string filename = srcdir + \"/\" + basename;\n         FILE *f = fopen(filename.c_str(), \"r\");\n         assert(f != NULL);\n \n-        string jdata;\n+        std::string jdata;\n \n         char buf[4096];\n         while (!feof(f)) {\n                 int bread = fread(buf, 1, sizeof(buf), f);\n                 assert(!ferror(f));\n \n-                string s(buf, bread);\n+                std::string s(buf, bread);\n                 jdata += s;\n         }\n "
      }
    ]
  }
]