[
  {
    "sha": "ec98b78e1e1ce6bd9e6189788f7689aebfbf343c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzk4Yjc4ZTFlMWNlNmJkOWU2MTg5Nzg4Zjc2ODlhZWJmYmYzNDNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-07T19:32:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-08T18:07:11Z"
      },
      "message": "Tests for wallet encryption stuff\n\nAdded a functional test which tests the encryptwallet, walletpassphrase, walletpassphrasechange, and walletlock RPCs",
      "tree": {
        "sha": "ef891b0e00def58aa540f0cbaee7f9c07d64d8b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef891b0e00def58aa540f0cbaee7f9c07d64d8b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46311e792f4e4a53b7dc418215b03d890d0594d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46311e792f4e4a53b7dc418215b03d890d0594d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46311e792f4e4a53b7dc418215b03d890d0594d5"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7de31510ab3c81f09c93d5684d2ab7b2174c7ad",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ec98b78e1e1ce6bd9e6189788f7689aebfbf343c",
        "patch": "@@ -111,6 +111,7 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n+    'wallet-encryption.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      },
      {
        "sha": "33872e3c946503a952df993fee31c5770b21996a",
        "filename": "test/functional/wallet-encryption.py",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec98b78e1e1ce6bd9e6189788f7689aebfbf343c/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=ec98b78e1e1ce6bd9e6189788f7689aebfbf343c",
        "patch": "@@ -0,0 +1,66 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Wallet encryption\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    bitcoind_processes,\n+    BITCOIND_PROC_WAIT_TIMEOUT,\n+)\n+\n+class WalletEncryptionTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        passphrase = \"WalletPassphrase\"\n+        passphrase2 = \"SecondWalletPassphrase\"\n+\n+        # Make sure the wallet isn't encrypted first\n+        address = self.nodes[0].getnewaddress()\n+        privkey = self.nodes[0].dumpprivkey(address)\n+        assert_equal(privkey[:1], \"c\")\n+        assert_equal(len(privkey), 52)\n+\n+        # Encrypt the wallet\n+        self.nodes[0].encryptwallet(passphrase)\n+        bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+\n+        # Test that the wallet is encrypted\n+        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+\n+        # Check that walletpassphrase works\n+        self.nodes[0].walletpassphrase(passphrase, 2)\n+        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+\n+        # Check that the timeout is right\n+        time.sleep(2)\n+        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+\n+        # Test wrong passphrase\n+        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n+\n+        # Test walletlock\n+        self.nodes[0].walletpassphrase(passphrase, 84600)\n+        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        self.nodes[0].walletlock()\n+        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+\n+        # Test passphrase changes\n+        self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n+        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n+        self.nodes[0].walletpassphrase(passphrase2, 10)\n+        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+\n+if __name__ == '__main__':\n+    WalletEncryptionTest().main()"
      }
    ]
  }
]