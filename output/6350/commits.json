[
  {
    "sha": "70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGFlNDNlOWI3ODU4ZDAzY2Q2NGQwN2JkMzEwZjljODVmNWIzZWU1",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2015-06-30T13:40:44Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2015-06-30T13:45:49Z"
      },
      "message": "add tests for the decodescript rpc. add mention of the rpc regression tests to the testing seciton of the main readme.",
      "tree": {
        "sha": "8080d97b4fcabf83a91eb82ac1d463a83cad0381",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8080d97b4fcabf83a91eb82ac1d463a83cad0381"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0564c5b795d1be675a0ac0a2e8038db0970ac376",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0564c5b795d1be675a0ac0a2e8038db0970ac376",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0564c5b795d1be675a0ac0a2e8038db0970ac376"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 121,
      "deletions": 0
    },
    "files": [
      {
        "sha": "594d98c39f9c6112090c5b30052db4cbfff798ab",
        "filename": "README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
        "patch": "@@ -58,6 +58,10 @@ lots of money.\n Developers are strongly encouraged to write unit tests for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n \n+There are also regression and integration tests of the RPC interface, written\n+in Python, that are run automatically on the build server.\n+These tests can be run with: `qa/pull-tester/rpc-tests.sh`\n+\n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be\n used for manual QA testing \u2014 a link to them will appear in a comment on the"
      },
      {
        "sha": "c032f8a03874e016c72d615cf4cc578e91d71a91",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
        "patch": "@@ -35,6 +35,7 @@ testScripts=(\n     'walletbackup.py'\n     'nodehandling.py'\n     'reindex.py'\n+    'decodescript.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'"
      },
      {
        "sha": "ce3bc94ef7d51f1d89a73943b5cd12a80c006cd4",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=70ae43e9b7858d03cd64d07bd310f9c85f5b3ee5",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class DecodeScriptTest(BitcoinTestFramework):\n+    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n+\n+    def setup_chain(self):\n+        print('Initializing test directory ' + self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.is_network_split = False\n+\n+    def decodescript_script_sig(self):\n+        signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        push_signature = '48' + signature\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptSig\n+        # the scriptSig of a public key scriptPubKey simply pushes a signature onto the stack\n+        rpc_result = self.nodes[0].decodescript(push_signature)\n+        assert_equal(signature, rpc_result['asm'])\n+\n+        # 2) P2PKH scriptSig\n+        rpc_result = self.nodes[0].decodescript(push_signature + push_public_key)\n+        assert_equal(signature + ' ' + public_key, rpc_result['asm'])\n+\n+        # 3) multisig scriptSig\n+        # this also tests the leading portion of a P2SH multisig scriptSig\n+        # OP_0 <A sig> <B sig>\n+        rpc_result = self.nodes[0].decodescript('00' + push_signature + push_signature)\n+        assert_equal('0 ' + signature + ' ' + signature, rpc_result['asm'])\n+\n+        # 4) P2SH scriptSig\n+        # an empty P2SH redeemScript is valid and makes for a very simple test case.\n+        # thus, such a spending scriptSig would just need to pass the outer redeemScript\n+        # hash test and leave true on the top of the stack.\n+        rpc_result = self.nodes[0].decodescript('5100')\n+        assert_equal('1 0', rpc_result['asm'])\n+\n+        # 5) null data scriptSig - no such thing because null data scripts can not be spent.\n+        # thus, no test case for that standard transaction type is here.\n+\n+    def decodescript_script_pub_key(self):\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+        public_key_hash = '11695b6cd891484c2d49ec5aa738ec2b2f897777'\n+        push_public_key_hash = '14' + public_key_hash\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n+        assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 2) P2PKH scriptPubKey\n+        # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n+        assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 3) multisig scriptPubKey\n+        # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_public_key + push_public_key + '53ae')\n+        assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n+\n+        # 4) P2SH scriptPubKey\n+        # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n+        # push_public_key_hash here should actually be the hash of a redeem script.\n+        # but this works the same for purposes of this test.\n+        rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n+        assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n+\n+        # 5) null data scriptPubKey\n+        # use a signature look-alike here to make sure that we do not decode random data as a signature.\n+        # this matters if/when signature sighash decoding comes along.\n+        # would want to make sure that no such decoding takes place in this case.\n+        signature_imposter = '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        # OP_RETURN <data>\n+        rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n+        assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n+\n+        # 6) a CLTV redeem script. redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n+        # OP_NOP2 is also known as OP_CHECKLOCKTIMEVERIFY.\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        #\n+        # OP_IF\n+        #   <receiver-pubkey> OP_CHECKSIGVERIFY\n+        # OP_ELSE\n+        #   <lock-until> OP_NOP2 OP_DROP\n+        # OP_ENDIF\n+        # <sender-pubkey> OP_CHECKSIG\n+        #\n+        # lock until block 500,000\n+        rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n+        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_NOP2 OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+    def run_test(self):\n+        self.decodescript_script_sig()\n+        self.decodescript_script_pub_key()\n+\n+if __name__ == '__main__':\n+    DecodeScriptTest().main()\n+"
      }
    ]
  }
]