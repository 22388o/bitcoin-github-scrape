laanwj,2016-04-06T10:49:36Z,">  Depending on the size of your wallet and number of UTXOs, performance gains may be up to 98%.\n\nYes, this makes sense.\n\nHow does it affect memory usage?\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206306314,206306314,
sipa,2016-04-06T11:04:44Z,"Concept ACK, it's silly that we didn't have this.\n\nMemory usage: I expect it to consume around 80 bytes per unspent output on 64-bit platforms.\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206311871,206311871,
promag,2016-04-06T11:15:55Z,ACK\n\nRename first commit to something like `Add index to wallet UTXO`\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206317124,206317124,
joaopaulofonseca,2016-04-06T11:19:36Z,"The overall memory usage will depend on the wallet size, more particularly on the UTXO count. Given the info being stored per UTXO (an outpoint and a pair with `isminetype` and pointer to Tx), the extra memory increment won't be that much.\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206318458,206318458,
joaopaulofonseca,2016-04-06T11:20:25Z,"@promag that makes sense. This is not a cache, but more like an index..\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206318794,206318794,
pedrobranco,2016-04-06T11:30:32Z,Tested ACK.\n\nIn my case the improvements of listunspent are from 12s. to **0.1s** .\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206323111,206323111,
jonasschnelli,2016-04-06T11:40:59Z,Nice work!\nConcept ACK.\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206327965,206327965,
laanwj,2016-04-06T11:59:21Z,"> Given the info being stored per UTXO (an outpoint and a pair with isminetype and pointer to Tx), the extra memory increment won't be that much.\n\nSo this only uses (~80 bytes) memory per actually unspent output that is in the wallet? That's great. I then don't expect the extra memory use for that to be significant. The bulk is wasted on keeping historical transactions anyway.\n\nConcept ACK.\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206337868,206337868,
gmaxwell,2016-04-06T15:02:42Z,Concept ACK. Thanks for working on this.\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206417233,206417233,
promag,2016-04-06T23:03:15Z,Solves #6573.\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-206609908,206609908,
instagibbs,2016-04-12T18:35:06Z,lightly tested ACK\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-209045083,209045083,
promag,2016-04-19T13:49:35Z,This change greatly improves the performance of AvailableCoins and indirectly listunspent and others. Is it reasonable to expect this in next 0.12 update?\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-211930118,211930118,
sipa,2016-04-19T13:58:18Z,"@promag Only bug fixes and consensus changes are backported to old releases. It's well on track for 0.13, though.\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-211932849,211932849,
laanwj,2016-04-19T14:12:59Z,"I think this needs at least one more code review ACK before merge (to master, not 0.12)\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-211938822,211938822,
sipa,2016-04-19T14:38:52Z,"How does this deal with:\n- reorganizations (coins marked as spent may go back to being unspent)?\n- conflicts (there may be multiple unconfirmed transactions at the tip, and which set of them is accepted can change easily)?\n- abandoned transactions?\n",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-211952457,211952457,
fanquake,2016-05-27T07:59:20Z,This needs a rebase.\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-222084615,222084615,
sipa,2016-06-01T17:04:31Z,@jpdffonseca Feel like answering my questions above?\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-223059060,223059060,
joaopaulofonseca,2016-06-02T09:39:56Z,@sipa I'm working to unify `mapTxSpends` and `mapTxUnspents`.\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-223243848,223243848,
paveljanik,2016-10-08T16:50:35Z,@jpdffonseca Are you still working on this? We need performance improvements especially for large wallets.\n\nNeeds rebase.\n,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-252435304,252435304,
joaopaulofonseca,2016-10-10T09:11:10Z,"@paveljanik lately I haven't had too much time to work on it. After testing more deeply, I realized that this solution does not always handles well some of the cases mentioned above by @sipa, so it should have a different approach.\n\nI've been trying another improvements that optimize not the `unspents` list itself but other values necessary to calculate the `unspents`, such as the call `CWallet:",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-252567866,252567866,
fanquake,2017-01-12T14:48:09Z,Closing due to inactivity. @joaopaulofonseca if you do end up finishing work on your other improvements PRs are welcome.,https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-272181702,272181702,
joaopaulofonseca,2017-03-07T14:01:30Z,"Deprecated partially by #9939. Caching accurately these values gets a little tricky because of all the scenarios that could make the cache invalidated (conflicts, double-spends, reorganizations, abandoned transactions, etc, ...). ",https://github.com/bitcoin/bitcoin/pull/7823#issuecomment-284728946,284728946,
sipa,2016-04-19T14:25:40Z,Typo: spent output\n,https://github.com/bitcoin/bitcoin/pull/7823#discussion_r60240635,60240635,src/wallet/wallet.cpp
sipa,2016-04-19T14:27:40Z,Simpler to write as mapTxUnspents.erase(outpoint)\n,https://github.com/bitcoin/bitcoin/pull/7823#discussion_r60241000,60241000,src/wallet/wallet.cpp
