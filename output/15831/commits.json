[
  {
    "sha": "fad81d870aa6dd25d4fab5faad4c956ba364734a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ4MWQ4NzBhYTZkZDI1ZDRmYWI1ZmFhZDRjOTU2YmEzNjQ3MzRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-16T17:06:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-16T17:05:54Z"
      },
      "message": "test: Fixup creatmultisig documentation and whitespace",
      "tree": {
        "sha": "d64b1e85f1d6ef39827024921957f67fe5f2a412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d64b1e85f1d6ef39827024921957f67fe5f2a412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad81d870aa6dd25d4fab5faad4c956ba364734a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgC+wv8CkyhaIZOasPZ+o4i84wK9wO47YTyn/nWV/iMwwsEh/2flVv9UJvRRquJ\na3cyN12/clkTgGBuqdcLhMYZePoymYhFQjRmSLDIzp4bY/cV6sNhhexuLWlq9nz6\nM0BdS7MqsRn8pHGiENF8PcRSMm0sioGLpKVyl5zmh+drzELOXgyNd9VX95zPgWNQ\nNEBTSbujp/RVqjLgD7I4bQ2Pvos+92JfGBTcaqVb0tONgKiEy3x/sd9KyCOE+0TZ\nCy7AtI2m38kwuNzGmMDZgrO1D+UMDMrQ9ZwM8/tTZSWtYb1cTaEDoywlgaWZHzS0\ne50u073621aLd90vHMb8PXVE8bpf0SGWkIZ0lJWfvSYX25y9IedHKRX/ouLAjT/w\nnDXDFgO47yhzpFEhYvwEWbeTbdl3ou3nFMS+s+Et8xzZM0hBaQOjNU6kZRhRuOxl\nYivFKC8obkEOknRF0Y66A3Xm8f0i0VUg5zxp9Ta9x0AntQVykc2GPwlPY+FzHzEa\n3YJSxvr3\n=DwLC\n-----END PGP SIGNATURE-----",
        "payload": "tree d64b1e85f1d6ef39827024921957f67fe5f2a412\nparent 78295e97b8d38ecf6628b5d8ce1efd3900a5c345\nauthor MarcoFalke <falke.marco@gmail.com> 1555434397 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1555434354 -0400\n\ntest: Fixup creatmultisig documentation and whitespace\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad81d870aa6dd25d4fab5faad4c956ba364734a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad81d870aa6dd25d4fab5faad4c956ba364734a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad81d870aa6dd25d4fab5faad4c956ba364734a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78295e97b8d38ecf6628b5d8ce1efd3900a5c345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78295e97b8d38ecf6628b5d8ce1efd3900a5c345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78295e97b8d38ecf6628b5d8ce1efd3900a5c345"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0a3e3d8f758a6d2e944f1ad4bc060a124995820f",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad81d870aa6dd25d4fab5faad4c956ba364734a/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad81d870aa6dd25d4fab5faad4c956ba364734a/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=fad81d870aa6dd25d4fab5faad4c956ba364734a",
        "patch": "@@ -1,12 +1,13 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n+\"\"\"Test multisig RPCs\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n import decimal\n \n+\n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -17,29 +18,29 @@ def skip_test_if_missing_module(self):\n \n     def get_keys(self):\n         node0, node1, node2 = self.nodes\n-        self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n-        self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n-        self.priv = [node1.dumpprivkey(a) for a in self.add]\n+        add = [node1.getnewaddress() for _ in range(self.nkeys)]\n+        self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in add]\n+        self.priv = [node1.dumpprivkey(a) for a in add]\n         self.final = node2.getnewaddress()\n \n     def run_test(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n \n         # 50 BTC each, rest will be 25 BTC each\n         node0.generate(149)\n         self.sync_all()\n \n         self.moved = 0\n-        for self.nkeys in [3,5]:\n-            for self.nsigs in [2,3]:\n+        for self.nkeys in [3, 5]:\n+            for self.nsigs in [2, 3]:\n                 for self.output_type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:\n                     self.get_keys()\n                     self.do_multisig()\n \n         self.checkbalances()\n \n     def checkbalances(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         node0.generate(100)\n         self.sync_all()\n \n@@ -49,13 +50,13 @@ def checkbalances(self):\n \n         height = node0.getblockchaininfo()[\"blocks\"]\n         assert 150 < height < 350\n-        total = 149*50 + (height-149-100)*25\n+        total = 149 * 50 + (height - 149 - 100) * 25\n         assert bal1 == 0\n         assert bal2 == self.moved\n-        assert bal0+bal1+bal2 == total\n+        assert bal0 + bal1 + bal2 == total\n \n     def do_multisig(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n \n         msig = node2.createmultisig(self.nsigs, self.pub, self.output_type)\n         madd = msig[\"address\"]\n@@ -74,7 +75,7 @@ def do_multisig(self):\n         txid = node0.sendtoaddress(madd, 40)\n \n         tx = node0.getrawtransaction(txid, True)\n-        vout = [v[\"n\"] for v in tx[\"vout\"] if madd in v[\"scriptPubKey\"].get(\"addresses\",[])]\n+        vout = [v[\"n\"] for v in tx[\"vout\"] if madd in v[\"scriptPubKey\"].get(\"addresses\", [])]\n         assert len(vout) == 1\n         vout = vout[0]\n         scriptPubKey = tx[\"vout\"][vout][\"scriptPubKey\"][\"hex\"]\n@@ -86,7 +87,7 @@ def do_multisig(self):\n         outval = value - decimal.Decimal(\"0.00001000\")\n         rawtx = node2.createrawtransaction([{\"txid\": txid, \"vout\": vout}], [{self.final: outval}])\n \n-        rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], prevtxs)\n+        rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs - 1], prevtxs)\n         rawtx3 = node2.signrawtransactionwithkey(rawtx2[\"hex\"], [self.priv[-1]], prevtxs)\n \n         self.moved += outval\n@@ -97,5 +98,6 @@ def do_multisig(self):\n         txinfo = node0.getrawtransaction(tx, True, blk)\n         self.log.info(\"n/m=%d/%d %s size=%d vsize=%d weight=%d\" % (self.nsigs, self.nkeys, self.output_type, txinfo[\"size\"], txinfo[\"vsize\"], txinfo[\"weight\"]))\n \n+\n if __name__ == '__main__':\n     RpcCreateMultiSigTest().main()"
      }
    ]
  },
  {
    "sha": "fab6a0a659bb856e4598af3e0679fc37d5239478",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI2YTBhNjU5YmI4NTZlNDU5OGFmM2UwNjc5ZmMzN2Q1MjM5NDc4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-16T17:12:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-17T11:43:34Z"
      },
      "message": "test: Add test that addmultisigaddress fails for watchonly addresses",
      "tree": {
        "sha": "45b43f3fc16752994c05879eff268a136e467e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45b43f3fc16752994c05879eff268a136e467e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6a0a659bb856e4598af3e0679fc37d5239478",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjCXAwAtZ31AwRX5BCHrBD6RyPXoVCkoZVQYvezOAHb+rhOROL6w8bGrrLc3Gpa\n59OKUeJGYGGeWW95+oWhWSVS/aH1yImu0+1zldPJLz3U9k0diqhHKdnC1JePwrqM\nO5grCkz6TtuBn1NGofFCFZlT8qnG+N0i2a40LKGZbydb43twjoVkNRf68s26hFhK\nLxAjGU8y4VvSklay3zbH62UkV8W0NGGf/SRUE/xO5W85D2dIMebWG6ydY+pk/5Pt\noFawd5JCTIhfHbnFEhHLGVz6bQ8eBlc+1wEItuBG9d+2E1uav5WOUBzYCIp+HTpD\nqZdBiGTIy2cPVxYAtxahytm/2ViUQnpmxSYDftAH8I6Qs7qyjeBdei8XCWH4r8mG\nxGQoIUPHLP7I/4gT0niwQBXEBRiJTDbMtsX2jop/mJAtF6QkcBA9Wlr4K0zJjV2K\nKiKNdPo5v94pw73RVkIEG515IMXjeZkHfMwDQkt9kvBe0FwaFu74/auNielBES9E\nxe4m4rN/\n=aS34\n-----END PGP SIGNATURE-----",
        "payload": "tree 45b43f3fc16752994c05879eff268a136e467e5a\nparent fad81d870aa6dd25d4fab5faad4c956ba364734a\nauthor MarcoFalke <falke.marco@gmail.com> 1555434774 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1555501414 -0400\n\ntest: Add test that addmultisigaddress fails for watchonly addresses\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6a0a659bb856e4598af3e0679fc37d5239478",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6a0a659bb856e4598af3e0679fc37d5239478",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6a0a659bb856e4598af3e0679fc37d5239478/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad81d870aa6dd25d4fab5faad4c956ba364734a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad81d870aa6dd25d4fab5faad4c956ba364734a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad81d870aa6dd25d4fab5faad4c956ba364734a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7abcd71bb885a4e36939d46e3a577e07174c4857",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab6a0a659bb856e4598af3e0679fc37d5239478/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab6a0a659bb856e4598af3e0679fc37d5239478/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=fab6a0a659bb856e4598af3e0679fc37d5239478",
        "patch": "@@ -5,6 +5,9 @@\n \"\"\"Test multisig RPCs\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n import decimal\n \n \n@@ -26,7 +29,9 @@ def get_keys(self):\n     def run_test(self):\n         node0, node1, node2 = self.nodes\n \n-        # 50 BTC each, rest will be 25 BTC each\n+        self.check_addmultisigaddress_errors()\n+\n+        self.log.info('Generating blocks ...')\n         node0.generate(149)\n         self.sync_all()\n \n@@ -39,6 +44,15 @@ def run_test(self):\n \n         self.checkbalances()\n \n+    def check_addmultisigaddress_errors(self):\n+        self.log.info('Check that addmultisigaddress fails when the private keys are missing')\n+        addresses = [self.nodes[1].getnewaddress(address_type='legacy') for _ in range(2)]\n+        assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n+        for a in addresses:\n+            # Importing all addresses should not change the result\n+            self.nodes[0].importaddress(a)\n+        assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n+\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         node0.generate(100)"
      }
    ]
  }
]