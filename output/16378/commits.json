[
  {
    "sha": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmM4ZDBmZDU5MDZiYzk2MzdkNTEzY2QxOTNhMWY0N2FkOTRkYTI4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-07-11T17:50:45Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-09-07T18:33:16Z"
      },
      "message": "[rpc] walletcreatefundedpsbt: allow inputs to be null\n\nThis is of neglible use here, but it allows new RPC methods to take outputs as their first argument and make inputs optional.",
      "tree": {
        "sha": "be9216ebdda7218dc910d5279b291434bf308cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be9216ebdda7218dc910d5279b291434bf308cad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl9WfOwACgkQV/+b28ww\nEAk37A//QKRB4HOTVeXh64Bpoqu56i+aj/YMA/8XCz6+VP3SE2Lm6VboXAmSx/8E\n0LGOz5gJJW51RuJQDtyuRTxlW4UwwgVj1lot3/j1w6PpOmN8uAX/Sm8EwrUeOb5W\naCguoqWqY/0e0PI7xLx5TChmroTC9gz0rpamk6uCaKl6RP3v09uSz/chY9YZh4Ch\nIYRmWIoiTPaFNC6Um7psNshbgdpX78ZXUQKW8i6W0AZPQM6bsTwHb/pUCjCLSdxe\ny1MPdOdq5LuVVCa5eREUFQCzCAJ47bXBgQmjAdD4R9QaXZ/Hbkoh8RdvTUKsXp0+\nxFKrMcyLPwa2YDTlwpNMOzUkvp37lX/Lxln1RaxKEefiV/ypmCHDnfWy6PANfDDz\nqW300fMXKMEur8YY5Azq+ko5s7ynCnVvFFjHazOuHds5iZAf6353H51IDQ+mXkAr\nuu/vpYBK9gIEG1vyEvQreeQyJc8JPo7198sCtmLicVTmSSu6BDrVlNXEZeFFZSD+\n368iW83mG4+g4icGu+XLQSQYD+81cVOM3x7c1vwxAfH+Aukd+s80P12W7AReaZeV\n1Nbf29saWg6k12sYcrwkb7lQfeJ1gdk0XgKLf1f/L4S66V8P2qM5MYLuhgGJlj4T\nB5uZMmOZBMUq1Bk+G7ylE8WEJaXwDbUyOEQjFuUqN3WZ+OYcWDY=\n=nrk5\n-----END PGP SIGNATURE-----",
        "payload": "tree be9216ebdda7218dc910d5279b291434bf308cad\nparent 25839661305ec9fe8c25d171e31270d95311a4e4\nauthor Sjors Provoost <sjors@sprovoost.nl> 1562867445 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1599503596 +0200\n\n[rpc] walletcreatefundedpsbt: allow inputs to be null\n\nThis is of neglible use here, but it allows new RPC methods to take outputs as their first argument and make inputs optional.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25839661305ec9fe8c25d171e31270d95311a4e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25839661305ec9fe8c25d171e31270d95311a4e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25839661305ec9fe8c25d171e31270d95311a4e4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cfe4575090421737e2db94175bebab5b792d6c9b",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
        "patch": "@@ -21,10 +21,15 @@\n \n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf)\n {\n-    if (inputs_in.isNull() || outputs_in.isNull())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n+    if (outputs_in.isNull())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output argument must be non-null\");\n+\n+    UniValue inputs;\n+    if (inputs_in.isNull())\n+        inputs = UniValue::VARR;\n+    else\n+        inputs = inputs_in.get_array();\n \n-    UniValue inputs = inputs_in.get_array();\n     const bool outputs_is_obj = outputs_in.isObject();\n     UniValue outputs = outputs_is_obj ? outputs_in.get_obj() : outputs_in.get_array();\n "
      },
      {
        "sha": "c00f5b1b70835d82fe9cdd6821f81c08d942670b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
        "patch": "@@ -3997,7 +3997,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The inputs. Leave empty to add inputs automatically. See add_inputs option.\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. See add_inputs option.\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {"
      },
      {
        "sha": "781a49dfaca10f77d935bbc984d4b80e2fedd467",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc8d0fd5906bc9637d513cd193a1f47ad94da28/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
        "patch": "@@ -94,6 +94,9 @@ def run_test(self):\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90}, 0, {\"add_inputs\": True})['psbt']\n         assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 2)\n \n+        # Inputs argument can be null\n+        self.nodes[0].walletcreatefundedpsbt(None, {self.nodes[2].getnewaddress():10})\n+\n         # Node 1 should not be able to add anything to it but still return the psbtx same as before\n         psbtx = self.nodes[1].walletprocesspsbt(psbtx1)['psbt']\n         assert_equal(psbtx1, psbtx)"
      }
    ]
  },
  {
    "sha": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzJhMTQ0NWRjOWQyMmM5ZDcyOWI4MzAxYzhiM2Y1NDE5NWJjZmNm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-02T13:01:27Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-09-07T18:33:16Z"
      },
      "message": "[rpc] add snake case aliases for transaction methods",
      "tree": {
        "sha": "43eb5be1df5292b04e738cdd0c131efaf40fcad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43eb5be1df5292b04e738cdd0c131efaf40fcad7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl9WfOwACgkQV/+b28ww\nEAmGtw//crkcSmgGSbfl/HRS3AZu+iZcOqCD53nNpptTHuvpbdw+Imal8Dqk6Bxc\nWbT8/B+RmpvE0JfNqmMfwqIbOgizTXT2hwS5TvLrl2HU/9dS18I3IZGSOFSlObcI\nMSLzO2JkijLG+G055f+7OeynvhsrBfPRu/MNZ6crNtR5wB92htFM+uVgKzvQLHkz\nIMI0cu1dSW8CdLx3SKnPcc1hR6/pDQTUaEy6PxiEOwyJgJuSWRVBEqptgBjvr1yt\nJwRtT45McYpWHnSB3BzxTsYJet+3Kj0OIxqC7zXApFh2A/a4e8Lv2FPIYOSO22Jr\nqWoUxQtKHFMUxIRk7SKhnmnvx/Um1YFGEi9NHt40T+1biBcWOf5c526tl+N/xIfX\nVf5+Am97/0Uqr8J46C3KPwUsXcl0mCN+J0U2RU8v+ApsHGxwMx9tUB1VTJOyUYni\n5VCXsxMDvHlNYbpdbuP/76LWidUeHKxBV9By1GXNzJeSQL9MK18r4/yP7oNQTYU6\npnzbIgDVYQHEQrZlzBIbcElpfD7TDUHCiHH4DaM1fVhEeuiFVG3Bu6c//DPwXpTr\nqbeLMGInx3HAPB6amZcz5z34YZVKGLvx1G6rcL5JhACrjI42mey1+i65ifGDm3f5\nIUTncEV2Vng/5cuDvbSLzHGxKsdTFkjHHBgY2V0yZGYoVoKrBdo=\n=hxQZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 43eb5be1df5292b04e738cdd0c131efaf40fcad7\nparent 1bc8d0fd5906bc9637d513cd193a1f47ad94da28\nauthor Sjors Provoost <sjors@sprovoost.nl> 1583154087 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1599503596 +0200\n\n[rpc] add snake case aliases for transaction methods\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc8d0fd5906bc9637d513cd193a1f47ad94da28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc8d0fd5906bc9637d513cd193a1f47ad94da28"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "89867fad3b28bca6fa51cae1e31d7f0d89e4907d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
        "patch": "@@ -2956,12 +2956,17 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n+                {\"change_address\", UniValueType(UniValue::VSTR)},\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n+                {\"change_position\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n+                {\"include_watching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n+                {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n+                {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n@@ -2972,22 +2977,24 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n         }\n \n-        if (options.exists(\"changeAddress\")) {\n-            CTxDestination dest = DecodeDestination(options[\"changeAddress\"].get_str());\n+        if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n+            const std::string change_address_str = (options.exists(\"change_address\") ? options[\"change_address\"] : options[\"changeAddress\"]).get_str();\n+            CTxDestination dest = DecodeDestination(change_address_str);\n \n             if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"changeAddress must be a valid bitcoin address\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Change address must be a valid bitcoin address\");\n             }\n \n             coinControl.destChange = dest;\n         }\n \n-        if (options.exists(\"changePosition\"))\n-            change_position = options[\"changePosition\"].get_int();\n+        if (options.exists(\"changePosition\") || options.exists(\"change_position\")) {\n+            change_position = (options.exists(\"change_position\") ? options[\"change_position\"] : options[\"changePosition\"]).get_int();\n+        }\n \n         if (options.exists(\"change_type\")) {\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both changeAddress and address_type options\");\n+            if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both change address and address type options\");\n             }\n             OutputType out_type;\n             if (!ParseOutputType(options[\"change_type\"].get_str(), out_type)) {\n@@ -2996,10 +3003,12 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.m_change_type.emplace(out_type);\n         }\n \n-        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(options[\"includeWatching\"], *pwallet);\n+        const UniValue include_watching_option = options.exists(\"include_watching\") ? options[\"include_watching\"] : options[\"includeWatching\"];\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(include_watching_option, *pwallet);\n \n-        if (options.exists(\"lockUnspents\"))\n-            lockUnspents = options[\"lockUnspents\"].get_bool();\n+        if (options.exists(\"lockUnspents\") || options.exists(\"lock_unspents\")) {\n+            lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n+        }\n \n         if (options.exists(\"feeRate\"))\n         {\n@@ -3013,8 +3022,8 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.fOverrideFeeRate = true;\n         }\n \n-        if (options.exists(\"subtractFeeFromOutputs\"))\n-            subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();\n+        if (options.exists(\"subtractFeeFromOutputs\") || options.exists(\"subtract_fee_from_outputs\") )\n+            subtractFeeFromOutputs = (options.exists(\"subtract_fee_from_outputs\") ? options[\"subtract_fee_from_outputs\"] : options[\"subtractFeeFromOutputs\"]).get_array();\n \n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();"
      },
      {
        "sha": "6dcbec27144d3921c9a6f5a252938cf0731ab4e4",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
        "patch": "@@ -224,7 +224,7 @@ def test_invalid_change_address(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n+        assert_raises_rpc_error(-5, \"Change address must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n     def test_valid_change_address(self):\n         self.log.info(\"Test fundrawtxn with a provided change address\")"
      }
    ]
  },
  {
    "sha": "92326d89766155a792254d30a9962251b8fc7799",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjMyNmQ4OTc2NjE1NWE3OTIyNTRkMzBhOTk2MjI1MWI4ZmM3Nzk5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-08-07T15:36:36Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-09-10T11:44:53Z"
      },
      "message": "[rpc] add send method",
      "tree": {
        "sha": "5ecf9e916565ee452377c9db6082d09a340903b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ecf9e916565ee452377c9db6082d09a340903b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92326d89766155a792254d30a9962251b8fc7799",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl9aEbcACgkQV/+b28ww\nEAngfg//XwZi0NMl/Gw17yFn0+5ia9NJ55YrY1JmVvRs8CZtB1WLQfdBTMEF5kpu\n1gKCq0Zwq2Ad6Ku4obyLqRxZXymUGV74GdDM4cWLPSD1qFdA4R1UwxXAYcS4vUw4\ntsoNPjdD4knEdlkkDQLeD7Z6yJp7r+YaXn10OovhIqboQtbcZO2RInzbf1ehR32l\n1qbCXUqfzkLum2Drct4OXYY5bQwXta61OooFcgkje1IJSk68Yrsu0F9DPQt2qZ6z\nRcLdD2oZd7wVTzENOwVYWgkQ/LB0Ia0+Rh+PTs8cPeQ9IXFA+UYB0h3+12VxkcGi\nDAxnG10sxt9IrbDKn/VWvrXIwoXuiZ2Rux5P1xBY0CqOjl30ZhraL5Fas/oqnHZU\nUxqPwiE3OmWBvkiJhPUZlaN4J3hTyDCF2lsYmFF7BSYuCHlVAVfgZOYcJRpPRCDS\nQIIXrhzoPlzYgYWvEOs1K/LAsGvGWWs6c4AR2ED+rWEFWk32WJof4n/NOohB6Me5\nLfDnUAZRrHfCV88Dl/7m0u0Iz54OjB0rCXSjmHB8cPvnnFsCSrIPR/FJjhO1ZUri\nTpXSC5QMupIfPgKqzty28J5zq/MK9UeqB79WGwN15ICpEm3NdX66jMLnIZ9YKrgn\nTHZTS4jZPkBfOZUtrUhRTmhkhraMi21yoD7OaHZaOgqjUurqyDE=\n=VQ7i\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ecf9e916565ee452377c9db6082d09a340903b4\nparent 2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf\nauthor Sjors Provoost <sjors@sprovoost.nl> 1596814596 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1599738293 +0200\n\n[rpc] add send method\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92326d89766155a792254d30a9962251b8fc7799",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92326d89766155a792254d30a9962251b8fc7799",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92326d89766155a792254d30a9962251b8fc7799/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c2a1445dc9d22c9d729b8301c8b3f54195bcfcf"
      }
    ],
    "stats": {
      "total": 535,
      "additions": 534,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b006ea1a56d4183a34f3fef7eb4db68fe315c498",
        "filename": "doc/release-notes-16378.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92326d89766155a792254d30a9962251b8fc7799/doc/release-notes-16378.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92326d89766155a792254d30a9962251b8fc7799/doc/release-notes-16378.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16378.md?ref=92326d89766155a792254d30a9962251b8fc7799",
        "patch": "@@ -0,0 +1,5 @@\n+RPC\n+---\n+- A new `send` RPC with similar syntax to `walletcreatefundedpsbt`, including\n+  support for coin selection and a custom fee rate. Using the new `send` method\n+  is encouraged: `sendmany` and `sendtoaddress` may be deprecated in a future release."
      },
      {
        "sha": "6ef32941322c688b3adb48c2f0f15d0f5ad66150",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92326d89766155a792254d30a9962251b8fc7799/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92326d89766155a792254d30a9962251b8fc7799/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=92326d89766155a792254d30a9962251b8fc7799",
        "patch": "@@ -125,6 +125,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxoutproof\", 0, \"txids\" },\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n+    { \"send\", 0, \"outputs\" },\n+    { \"send\", 1, \"conf_target\" },\n+    { \"send\", 3, \"options\" },\n     { \"importprivkey\", 2, \"rescan\" },\n     { \"importaddress\", 2, \"rescan\" },\n     { \"importaddress\", 3, \"p2sh\" },"
      },
      {
        "sha": "62a3206802a352388c9b0ff52eb76b48c36b860b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 186,
        "deletions": 1,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92326d89766155a792254d30a9962251b8fc7799/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92326d89766155a792254d30a9962251b8fc7799/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=92326d89766155a792254d30a9962251b8fc7799",
        "patch": "@@ -11,6 +11,7 @@\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n+#include <policy/policy.h>\n #include <policy/rbf.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n@@ -2955,16 +2956,20 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         RPCTypeCheckObj(options,\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n+                {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"change_address\", UniValueType(UniValue::VSTR)},\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"change_position\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"include_watching\", UniValueType(UniValue::VBOOL)},\n+                {\"inputs\", UniValueType(UniValue::VARR)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n-                {\"feeRate\", UniValueType()}, // will be checked below\n+                {\"locktime\", UniValueType(UniValue::VNUM)},\n+                {\"feeRate\", UniValueType()}, // will be checked below,\n+                {\"psbt\", UniValueType(UniValue::VBOOL)},\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n@@ -3866,6 +3871,185 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // ARR or OBJ, checked later\n+                UniValue::VNUM,\n+                UniValue::VSTR,\n+                UniValue::VOBJ\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            UniValue options = request.params[3];\n+            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"add_to_wallet\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overriden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // Fill transaction with out data and sign\n+            bool complete = true;\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            // Serialize the PSBT\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+            ssTx << psbtx;\n+            const std::string result_str = EncodeBase64(ssTx.str());\n+\n+            if (psbt_opt_in || !complete || !add_to_wallet) {\n+                result.pushKV(\"psbt\", result_str);\n+            }\n+\n+            if (complete) {\n+                std::string err_string;\n+                std::string hex = EncodeHexTx(CTransaction(mtx));\n+                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+                result.pushKV(\"txid\", tx->GetHash().GetHex());\n+                if (add_to_wallet && !psbt_opt_in) {\n+                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+                } else {\n+                    result.pushKV(\"hex\", hex);\n+                }\n+            }\n+            result.pushKV(\"complete\", complete);\n+\n+            return result;\n+        }\n+    };\n+}\n+\n UniValue sethdseed(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"sethdseed\",\n@@ -4223,6 +4407,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+    { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"options\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },"
      },
      {
        "sha": "a3e160f12efdbf65b378e1d95b2c31186d99ae29",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92326d89766155a792254d30a9962251b8fc7799/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92326d89766155a792254d30a9962251b8fc7799/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=92326d89766155a792254d30a9962251b8fc7799",
        "patch": "@@ -225,6 +225,7 @@\n     'rpc_estimatefee.py',\n     'rpc_getblockstats.py',\n     'wallet_create_tx.py',\n+    'wallet_send.py',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',\n     'wallet_coinbase_category.py',"
      },
      {
        "sha": "b64d2030a4a523b032212f3a2becf0270f9dc6fd",
        "filename": "test/functional/wallet_send.py",
        "status": "added",
        "additions": 339,
        "deletions": 0,
        "changes": 339,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92326d89766155a792254d30a9962251b8fc7799/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92326d89766155a792254d30a9962251b8fc7799/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=92326d89766155a792254d30a9962251b8fc7799",
        "patch": "@@ -0,0 +1,339 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the send RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_raises_rpc_error\n+)\n+\n+class WalletSendTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        # whitelist all peers to speed up tx relay / mempool sync\n+        self.extra_args = [\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+            [\"-whitelist=127.0.0.1\",\"-walletrbf=1\"],\n+        ]\n+        getcontext().prec = 8 # Satoshi precision for Decimal\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n+                  arg_conf_target=None, arg_estimate_mode=None,\n+                  conf_target=None, estimate_mode=None, add_to_wallet=None,psbt=None,\n+                  inputs=None,add_inputs=None,change_address=None,change_position=None,change_type=None,\n+                  include_watching=None,locktime=None,lock_unspents=None,replaceable=None,subtract_fee_from_outputs=None,\n+                  expect_error=None):\n+        assert (amount is None) != (data is None)\n+\n+        from_balance_before = from_wallet.getbalance()\n+        if to_wallet is None:\n+            assert amount is None\n+        else:\n+            to_untrusted_pending_before = to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n+        if amount:\n+            dest = to_wallet.getnewaddress()\n+            outputs = {dest: amount}\n+        else:\n+            outputs = {\"data\": data}\n+\n+        # Construct options dictionary\n+        options = {}\n+        if add_to_wallet is not None:\n+            options[\"add_to_wallet\"] = add_to_wallet\n+        else:\n+            if psbt:\n+                add_to_wallet = False\n+            else:\n+                add_to_wallet = from_wallet.getwalletinfo()[\"private_keys_enabled\"] # Default value\n+        if psbt is not None:\n+            options[\"psbt\"] = psbt\n+        if conf_target is not None:\n+            options[\"conf_target\"] = conf_target\n+        if estimate_mode is not None:\n+            options[\"estimate_mode\"] = estimate_mode\n+        if inputs is not None:\n+            options[\"inputs\"] = inputs\n+        if add_inputs is not None:\n+            options[\"add_inputs\"] = add_inputs\n+        if change_address is not None:\n+            options[\"change_address\"] = change_address\n+        if change_position is not None:\n+            options[\"change_position\"] = change_position\n+        if change_type is not None:\n+            options[\"change_type\"] = change_type\n+        if include_watching is not None:\n+            options[\"include_watching\"] = include_watching\n+        if locktime is not None:\n+            options[\"locktime\"] = locktime\n+        if lock_unspents is not None:\n+            options[\"lock_unspents\"] = lock_unspents\n+        if replaceable is None:\n+            replaceable = True # default\n+        else:\n+            options[\"replaceable\"] = replaceable\n+        if subtract_fee_from_outputs is not None:\n+            options[\"subtract_fee_from_outputs\"] = subtract_fee_from_outputs\n+\n+        if len(options.keys()) == 0:\n+            options = None\n+\n+        if expect_error is None:\n+            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+        else:\n+            try:\n+                assert_raises_rpc_error(expect_error[0],expect_error[1],from_wallet.send,\n+                                        outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+            except AssertionError:\n+                # Provide debug info if the test fails\n+                self.log.error(\"Unexpected successful result:\")\n+                self.log.error(options)\n+                res = from_wallet.send(outputs=outputs,conf_target=arg_conf_target,estimate_mode=arg_estimate_mode,options=options)\n+                self.log.error(res)\n+                if \"txid\" in res and add_to_wallet:\n+                    self.log.error(\"Transaction details:\")\n+                    try:\n+                        tx = from_wallet.gettransaction(res[\"txid\"])\n+                        self.log.error(tx)\n+                        self.log.error(\"testmempoolaccept (transaction may already be in mempool):\")\n+                        self.log.error(from_wallet.testmempoolaccept([tx[\"hex\"]]))\n+                    except JSONRPCException as exc:\n+                        self.log.error(exc)\n+\n+                raise\n+\n+            return\n+\n+        if locktime:\n+            return res\n+\n+        if from_wallet.getwalletinfo()[\"private_keys_enabled\"] and not include_watching:\n+            assert_equal(res[\"complete\"], True)\n+            assert \"txid\" in res\n+        else:\n+            assert_equal(res[\"complete\"], False)\n+            assert not \"txid\" in res\n+            assert \"psbt\" in res\n+\n+        if add_to_wallet and not include_watching:\n+            # Ensure transaction exists in the wallet:\n+            tx = from_wallet.gettransaction(res[\"txid\"])\n+            assert tx\n+            assert_equal(tx[\"bip125-replaceable\"], \"yes\" if replaceable else \"no\")\n+            # Ensure transaction exists in the mempool:\n+            tx = from_wallet.getrawtransaction(res[\"txid\"],True)\n+            assert tx\n+            if amount:\n+                if subtract_fee_from_outputs:\n+                    assert_equal(from_balance_before - from_wallet.getbalance(), amount)\n+                else:\n+                    assert_greater_than(from_balance_before - from_wallet.getbalance(), amount)\n+            else:\n+                assert next((out for out in tx[\"vout\"] if out[\"scriptPubKey\"][\"asm\"] == \"OP_RETURN 35\"), None)\n+        else:\n+            assert_equal(from_balance_before, from_wallet.getbalance())\n+\n+        if to_wallet:\n+            self.sync_mempools()\n+            if add_to_wallet:\n+                if not subtract_fee_from_outputs:\n+                    assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before + Decimal(amount if amount else 0))\n+            else:\n+                assert_equal(to_wallet.getbalances()[\"mine\"][\"untrusted_pending\"], to_untrusted_pending_before)\n+\n+        return res\n+\n+    def run_test(self):\n+        self.log.info(\"Setup wallets...\")\n+        # w0 is a wallet with coinbase rewards\n+        w0 = self.nodes[0].get_wallet_rpc(\"\")\n+        # w1 is a regular wallet\n+        self.nodes[1].createwallet(wallet_name=\"w1\")\n+        w1 = self.nodes[1].get_wallet_rpc(\"w1\")\n+        # w2 contains the private keys for w3\n+        self.nodes[1].createwallet(wallet_name=\"w2\")\n+        w2 = self.nodes[1].get_wallet_rpc(\"w2\")\n+        # w3 is a watch-only wallet, based on w2\n+        self.nodes[1].createwallet(wallet_name=\"w3\",disable_private_keys=True)\n+        w3 = self.nodes[1].get_wallet_rpc(\"w3\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            a2_change = w2.getrawchangeaddress() # doesn't actually use change derivation\n+            res = w3.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"watchonly\": True\n+            },{\n+                \"desc\": w2.getaddressinfo(a2_change)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": True,\n+                \"internal\": True,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}, {\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w3\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # w4 has private keys enabled, but only contains watch-only keys (from w2)\n+        self.nodes[1].createwallet(wallet_name=\"w4\",disable_private_keys=False)\n+        w4 = self.nodes[1].get_wallet_rpc(\"w4\")\n+        for _ in range(3):\n+            a2_receive = w2.getnewaddress()\n+            res = w4.importmulti([{\n+                \"desc\": w2.getaddressinfo(a2_receive)[\"desc\"],\n+                \"timestamp\": \"now\",\n+                \"keypool\": False,\n+                \"watchonly\": True\n+            }])\n+            assert_equal(res, [{\"success\": True}])\n+\n+        w0.sendtoaddress(a2_receive, 10) # fund w4\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Send to address...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True)\n+\n+        self.log.info(\"Don't broadcast...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        assert(res[\"hex\"])\n+\n+        self.log.info(\"Return PSBT...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, psbt=True)\n+        assert(res[\"psbt\"])\n+\n+        self.log.info(\"Create transaction that spends to address, but don't broadcast...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False)\n+        # conf_target & estimate_mode can be set as argument or option\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n+                     self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n+        # but not at the same time\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n+                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+\n+        self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n+        res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create PSBT from wallet w4 with watch-only keys, sign with w2...\")\n+        self.test_send(from_wallet=w4, to_wallet=w1, amount=1, expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w4, to_wallet=w1, amount=1, include_watching=True, add_to_wallet=False)\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Create OP_RETURN...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1)\n+        self.test_send(from_wallet=w0, data=\"Hello World\", expect_error=(-8, \"Data must be hexadecimal string (not 'Hello World')\"))\n+        self.test_send(from_wallet=w0, data=\"23\")\n+        res = self.test_send(from_wallet=w3, data=\"23\")\n+        res = w2.walletprocesspsbt(res[\"psbt\"])\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Set fee rate...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n+                       expect_error=(-3, \"Amount out of range\"))\n+        # Fee rate of 0.1 satoshi per byte should throw an error\n+        # TODO: error should say 1.000 sat/b\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.000001, estimate_mode=\"BTC/KB\",\n+                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        # TODO: Return hex if fee rate is below -maxmempool\n+        # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        # assert res[\"hex\"]\n+        # hex = res[\"hex\"]\n+        # res = self.nodes[0].testmempoolaccept([hex])\n+        # assert not res[0][\"allowed\"]\n+        # assert_equal(res[0][\"reject-reason\"], \"...\") # low fee\n+        # assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.000001\"))\n+\n+        self.log.info(\"If inputs are specified, do not automatically add more...\")\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[], add_to_wallet=False)\n+        assert res[\"complete\"]\n+        utxo1 = w0.listunspent()[0]\n+        assert_equal(utxo1[\"amount\"], 50)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1],\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=False,\n+                       expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=51, inputs=[utxo1], add_inputs=True, add_to_wallet=False)\n+        assert res[\"complete\"]\n+\n+        self.log.info(\"Manual change address and position...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, change_address=\"not an address\",\n+                       expect_error=(-5, \"Change address must be a valid bitcoin address\"))\n+        change_address = w0.getnewaddress()\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address)\n+        assert res[\"complete\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address, change_position=0)\n+        assert res[\"complete\"]\n+        assert_equal(self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"], [change_address])\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_type=\"legacy\", change_position=0)\n+        assert res[\"complete\"]\n+        change_address = self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]\n+        assert change_address[0] == \"m\" or change_address[0] == \"n\"\n+\n+        self.log.info(\"Set lock time...\")\n+        height = self.nodes[0].getblockchaininfo()[\"blocks\"]\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, locktime=height + 1)\n+        assert res[\"complete\"]\n+        assert res[\"txid\"]\n+        txid = res[\"txid\"]\n+        # Although the wallet finishes the transaction, it can't be added to the mempool yet:\n+        hex = self.nodes[0].gettransaction(res[\"txid\"])[\"hex\"]\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert not res[0][\"allowed\"]\n+        assert_equal(res[0][\"reject-reason\"], \"non-final\")\n+        # It shouldn't be confirmed in the next block\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 0)\n+        # The mempool should allow it now:\n+        res = self.nodes[0].testmempoolaccept([hex])\n+        assert res[0][\"allowed\"]\n+        # Don't wait for wallet to add it to the mempool:\n+        res = self.nodes[0].sendrawtransaction(hex)\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].gettransaction(txid)[\"confirmations\"], 1)\n+\n+        self.log.info(\"Lock unspents...\")\n+        utxo1 = w0.listunspent()[0]\n+        assert_greater_than(utxo1[\"amount\"], 1)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1], add_to_wallet=False, lock_unspents=True)\n+        assert res[\"complete\"]\n+        locked_coins = w0.listlockunspent()\n+        assert_equal(len(locked_coins), 1)\n+        # Locked coins are automatically unlocked when manually selected\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, inputs=[utxo1],add_to_wallet=False)\n+\n+        self.log.info(\"Replaceable...\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, replaceable=True)\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, replaceable=False)\n+\n+        self.log.info(\"Subtract fee from output\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, subtract_fee_from_outputs=[0])\n+\n+\n+if __name__ == '__main__':\n+    WalletSendTest().main()"
      }
    ]
  }
]