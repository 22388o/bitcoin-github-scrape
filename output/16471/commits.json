[
  {
    "sha": "42a5e912ee4e91a5191d659588f0605e1ada2f33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmE1ZTkxMmVlNGU5MWE1MTkxZDY1OTU4OGYwNjA1ZTFhZGEyZjMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-26T20:21:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-26T20:21:26Z"
      },
      "message": "[mempool] log correct messages when CPFP fails",
      "tree": {
        "sha": "61756fe4753f24c2d2484b8d0606bb4d38488f30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61756fe4753f24c2d2484b8d0606bb4d38488f30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42a5e912ee4e91a5191d659588f0605e1ada2f33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42a5e912ee4e91a5191d659588f0605e1ada2f33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42a5e912ee4e91a5191d659588f0605e1ada2f33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42a5e912ee4e91a5191d659588f0605e1ada2f33/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b4677df62f17921482f0e456d77fb5bf96de4703",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a5e912ee4e91a5191d659588f0605e1ada2f33/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a5e912ee4e91a5191d659588f0605e1ada2f33/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=42a5e912ee4e91a5191d659588f0605e1ada2f33",
        "patch": "@@ -618,6 +618,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n             setAncestors.clear();\n+            // If CalculateMemPoolAncestors fails second time, we want the original error string.\n+            std::string dummy_err_string;\n             // If the new transaction is relatively small (up to 40k weight)\n             // and has at most one ancestor (ie ancestor limit of 2, including\n             // the new transaction), allow it if its parent has exactly the\n@@ -629,7 +631,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             // outputs - one for each counterparty. For more info on the uses for\n             // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n             if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, errString)) {\n+                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n                 return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n             }\n         }"
      },
      {
        "sha": "30f851fb8ed47ab057ea5831eb0f3f9b00a54f86",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a5e912ee4e91a5191d659588f0605e1ada2f33/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a5e912ee4e91a5191d659588f0605e1ada2f33/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=42a5e912ee4e91a5191d659588f0605e1ada2f33",
        "patch": "@@ -66,14 +66,14 @@ def run_test(self):\n         assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many unconfirmed ancestors [limit: 25]\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n         # ...even if it chains on from some point in the middle of the chain.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n         # ...even if it chains on to two parent transactions with one in the chain.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n         # ...especially if its > 40k weight\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n         # But not if it chains directly off the first transaction\n         self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n         # and the second chain should work just fine"
      }
    ]
  }
]