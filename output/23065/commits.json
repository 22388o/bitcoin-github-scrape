[
  {
    "sha": "c52789365e5dbcb25aa5f1775de4d318da79e5a7",
    "node_id": "C_kwDOABII59oAKGM1Mjc4OTM2NWU1ZGJjYjI1YWE1ZjE3NzVkZTRkMzE4ZGE3OWU1YTc",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-22T12:17:55Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-25T11:50:06Z"
      },
      "message": "Allow locked UTXOs to be store in the wallet database",
      "tree": {
        "sha": "084875ba97e0bb82e4a34d5b1f2448af999dfbe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/084875ba97e0bb82e4a34d5b1f2448af999dfbe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c52789365e5dbcb25aa5f1775de4d318da79e5a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52789365e5dbcb25aa5f1775de4d318da79e5a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c52789365e5dbcb25aa5f1775de4d318da79e5a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52789365e5dbcb25aa5f1775de4d318da79e5a7/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51c7d88e6790d857b9920bb8b51422320dde662d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c7d88e6790d857b9920bb8b51422320dde662d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51c7d88e6790d857b9920bb8b51422320dde662d"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 58,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f92d100ef5f6d4ae5bf667f906cbf3001c659bbe",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "patch": "@@ -122,10 +122,10 @@ class Wallet\n     virtual bool displayAddress(const CTxDestination& dest) = 0;\n \n     //! Lock coin.\n-    virtual void lockCoin(const COutPoint& output) = 0;\n+    virtual bool lockCoin(const COutPoint& output) = 0;\n \n     //! Unlock coin.\n-    virtual void unlockCoin(const COutPoint& output) = 0;\n+    virtual bool unlockCoin(const COutPoint& output) = 0;\n \n     //! Return whether coin is locked.\n     virtual bool isLockedCoin(const COutPoint& output) = 0;"
      },
      {
        "sha": "809569cfaa1d02c9243bc1a573806a382d528487",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "patch": "@@ -214,12 +214,12 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->DisplayAddress(dest);\n     }\n-    void lockCoin(const COutPoint& output) override\n+    bool lockCoin(const COutPoint& output) override\n     {\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->LockCoin(output);\n     }\n-    void unlockCoin(const COutPoint& output) override\n+    bool unlockCoin(const COutPoint& output) override\n     {\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->UnlockCoin(output);"
      },
      {
        "sha": "a9610d05a47991f371b5795d72ae5d17ae60eab4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "patch": "@@ -589,19 +589,24 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n-void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n+void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid, WalletBatch* batch)\n {\n     mapTxSpends.insert(std::make_pair(outpoint, wtxid));\n \n-    setLockedCoins.erase(outpoint);\n+    if (batch) {\n+        UnlockCoin(outpoint, batch);\n+    } else {\n+        WalletBatch temp_batch(GetDatabase());\n+        UnlockCoin(outpoint, &temp_batch);\n+    }\n \n     std::pair<TxSpends::iterator, TxSpends::iterator> range;\n     range = mapTxSpends.equal_range(outpoint);\n     SyncMetaData(range);\n }\n \n \n-void CWallet::AddToSpends(const uint256& wtxid)\n+void CWallet::AddToSpends(const uint256& wtxid, WalletBatch* batch)\n {\n     auto it = mapWallet.find(wtxid);\n     assert(it != mapWallet.end());\n@@ -610,7 +615,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n         return;\n \n     for (const CTxIn& txin : thisTx.tx->vin)\n-        AddToSpends(txin.prevout, wtxid);\n+        AddToSpends(txin.prevout, wtxid, batch);\n }\n \n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n@@ -910,7 +915,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx);\n-        AddToSpends(hash);\n+        AddToSpends(hash, &batch);\n     }\n \n     if (!fInsertedNew)\n@@ -2260,22 +2265,36 @@ bool CWallet::DisplayAddress(const CTxDestination& dest)\n     return signer_spk_man->DisplayAddress(scriptPubKey, signer);\n }\n \n-void CWallet::LockCoin(const COutPoint& output)\n+bool CWallet::LockCoin(const COutPoint& output, WalletBatch* batch)\n {\n     AssertLockHeld(cs_wallet);\n     setLockedCoins.insert(output);\n+    if (batch) {\n+        return batch->WriteLockedUTXO(output);\n+    }\n+    return true;\n }\n \n-void CWallet::UnlockCoin(const COutPoint& output)\n+bool CWallet::UnlockCoin(const COutPoint& output, WalletBatch* batch)\n {\n     AssertLockHeld(cs_wallet);\n-    setLockedCoins.erase(output);\n+    bool was_locked = setLockedCoins.erase(output);\n+    if (batch && was_locked) {\n+        return batch->EraseLockedUTXO(output);\n+    }\n+    return true;\n }\n \n-void CWallet::UnlockAllCoins()\n+bool CWallet::UnlockAllCoins()\n {\n     AssertLockHeld(cs_wallet);\n+    bool success = true;\n+    WalletBatch batch(GetDatabase());\n+    for (auto it = setLockedCoins.begin(); it != setLockedCoins.end(); ++it) {\n+        success &= batch.EraseLockedUTXO(*it);\n+    }\n     setLockedCoins.clear();\n+    return success;\n }\n \n bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const"
      },
      {
        "sha": "6b4bcf31c4e142ce6fd31c492e20c186d745f4f3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "patch": "@@ -256,8 +256,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     typedef std::multimap<COutPoint, uint256> TxSpends;\n     TxSpends mapTxSpends GUARDED_BY(cs_wallet);\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void AddToSpends(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void AddToSpends(const uint256& wtxid, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n@@ -449,9 +449,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool DisplayAddress(const CTxDestination& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool LockCoin(const COutPoint& output, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool UnlockCoin(const COutPoint& output, WalletBatch* batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /*"
      },
      {
        "sha": "c697534c06a97021834a857cd516ea56cee685b5",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "patch": "@@ -40,6 +40,7 @@ const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n+const std::string LOCKED_UTXO{\"lockedutxo\"};\n const std::string MASTER_KEY{\"mkey\"};\n const std::string MINVERSION{\"minversion\"};\n const std::string NAME{\"name\"};\n@@ -284,6 +285,16 @@ bool WalletBatch::WriteDescriptorCacheItems(const uint256& desc_id, const Descri\n     return true;\n }\n \n+bool WalletBatch::WriteLockedUTXO(const COutPoint& output)\n+{\n+    return WriteIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)), uint8_t{'1'});\n+}\n+\n+bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n+{\n+    return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};\n@@ -701,6 +712,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n             wss.fIsEncrypted = true;\n+        } else if (strType == DBKeys::LOCKED_UTXO) {\n+            uint256 hash;\n+            uint32_t n;\n+            ssKey >> hash;\n+            ssKey >> n;\n+            pwallet->LockCoin(COutPoint(hash, n));\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&"
      },
      {
        "sha": "a549c8039ca83487cf2fbb3c978cc36ecf0c2141",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52789365e5dbcb25aa5f1775de4d318da79e5a7/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "patch": "@@ -65,6 +65,7 @@ extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n extern const std::string KEY;\n extern const std::string KEYMETA;\n+extern const std::string LOCKED_UTXO;\n extern const std::string MASTER_KEY;\n extern const std::string MINVERSION;\n extern const std::string NAME;\n@@ -250,6 +251,9 @@ class WalletBatch\n     bool WriteDescriptorLastHardenedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n     bool WriteDescriptorCacheItems(const uint256& desc_id, const DescriptorCache& cache);\n \n+    bool WriteLockedUTXO(const COutPoint& output);\n+    bool EraseLockedUTXO(const COutPoint& output);\n+\n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database"
      }
    ]
  },
  {
    "sha": "f13fc16295c19a156f2974d2d73fba56d52fc161",
    "node_id": "C_kwDOABII59oAKGYxM2ZjMTYyOTVjMTlhMTU2ZjI5NzRkMmQ3M2ZiYTU2ZDUyZmMxNjE",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-22T12:18:39Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-25T11:50:06Z"
      },
      "message": "Allow lockunspent to store the lock in the wallet DB",
      "tree": {
        "sha": "c50e2ebcaa6d7699830dae95e917eb1ac6601a74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c50e2ebcaa6d7699830dae95e917eb1ac6601a74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13fc16295c19a156f2974d2d73fba56d52fc161",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13fc16295c19a156f2974d2d73fba56d52fc161",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13fc16295c19a156f2974d2d73fba56d52fc161",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13fc16295c19a156f2974d2d73fba56d52fc161/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52789365e5dbcb25aa5f1775de4d318da79e5a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c52789365e5dbcb25aa5f1775de4d318da79e5a7"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "93e49cb9a891bf1a1b9856f38c697a3539df6798",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13fc16295c19a156f2974d2d73fba56d52fc161/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13fc16295c19a156f2974d2d73fba56d52fc161/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f13fc16295c19a156f2974d2d73fba56d52fc161",
        "patch": "@@ -131,6 +131,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxoutsetinfo\", 2, \"use_index\"},\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n+    { \"lockunspent\", 2, \"persistent\" },\n     { \"send\", 0, \"outputs\" },\n     { \"send\", 1, \"conf_target\" },\n     { \"send\", 3, \"fee_rate\"},"
      },
      {
        "sha": "d75673d3449433955afe30752de3d34390aa5b46",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13fc16295c19a156f2974d2d73fba56d52fc161/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13fc16295c19a156f2974d2d73fba56d52fc161/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f13fc16295c19a156f2974d2d73fba56d52fc161",
        "patch": "@@ -2137,8 +2137,9 @@ static RPCHelpMan lockunspent()\n                 \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n                 \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n                 \"Manually selected coins are automatically unlocked.\\n\"\n-                \"Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\\n\"\n-                \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n+                \"Locks are stored in memory only, unless persistent=true, in which case they will be written to the\\n\"\n+                \"wallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\\n\"\n+                \"(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\\n\"\n                 \"Also see the listunspent call\\n\",\n                 {\n                     {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n@@ -2152,6 +2153,7 @@ static RPCHelpMan lockunspent()\n                             },\n                         },\n                     },\n+                    {\"persistent\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to write/erase this lock in the wallet database, or keep the change in memory only. Ignored for unlocking.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::BOOL, \"\", \"Whether the command was successful or not\"\n@@ -2165,6 +2167,8 @@ static RPCHelpMan lockunspent()\n             + HelpExampleCli(\"listlockunspent\", \"\") +\n             \"\\nUnlock the transaction again\\n\"\n             + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nLock the transaction persistently in the wallet database\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\" true\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n                 },\n@@ -2183,9 +2187,13 @@ static RPCHelpMan lockunspent()\n \n     bool fUnlock = request.params[0].get_bool();\n \n+    const bool persistent{request.params[2].isNull() ? false : request.params[2].get_bool()};\n+\n     if (request.params[1].isNull()) {\n-        if (fUnlock)\n-            pwallet->UnlockAllCoins();\n+        if (fUnlock) {\n+            if (!pwallet->UnlockAllCoins())\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coins failed\");\n+        }\n         return true;\n     }\n \n@@ -2236,17 +2244,24 @@ static RPCHelpMan lockunspent()\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n         }\n \n-        if (!fUnlock && is_locked) {\n+        if (!fUnlock && is_locked && !persistent) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output already locked\");\n         }\n \n         outputs.push_back(outpt);\n     }\n \n+    std::unique_ptr<WalletBatch> batch = nullptr;\n+    // Unlock is always persistent\n+    if (fUnlock || persistent) batch = std::make_unique<WalletBatch>(pwallet->GetDatabase());\n+\n     // Atomically set (un)locked status for the outputs.\n     for (const COutPoint& outpt : outputs) {\n-        if (fUnlock) pwallet->UnlockCoin(outpt);\n-        else pwallet->LockCoin(outpt);\n+        if (fUnlock) {\n+            if (!pwallet->UnlockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coin failed\");\n+        } else {\n+            if (!pwallet->LockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Locking coin failed\");\n+        }\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "719ae927dcdb60c0f9902fa79796256035228c4e",
    "node_id": "C_kwDOABII59oAKDcxOWFlOTI3ZGNkYjYwYzBmOTkwMmZhNzk3OTYyNTYwMzUyMjhjNGU",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-22T12:19:05Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-25T11:50:06Z"
      },
      "message": "Update lockunspent tests for lock persistence",
      "tree": {
        "sha": "192f4fb5b6a214bff8def2674aa7e1933455fa6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/192f4fb5b6a214bff8def2674aa7e1933455fa6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/719ae927dcdb60c0f9902fa79796256035228c4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719ae927dcdb60c0f9902fa79796256035228c4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/719ae927dcdb60c0f9902fa79796256035228c4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719ae927dcdb60c0f9902fa79796256035228c4e/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13fc16295c19a156f2974d2d73fba56d52fc161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13fc16295c19a156f2974d2d73fba56d52fc161",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13fc16295c19a156f2974d2d73fba56d52fc161"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5c464ae142bc78560a6330f33a4950db4355d26a",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/719ae927dcdb60c0f9902fa79796256035228c4e/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/719ae927dcdb60c0f9902fa79796256035228c4e/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=719ae927dcdb60c0f9902fa79796256035228c4e",
        "patch": "@@ -121,13 +121,49 @@ def run_test(self):\n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n+        # Trying to unlock an output which isn't locked should error\n         assert_raises_rpc_error(-8, \"Invalid parameter, expected locked output\", self.nodes[2].lockunspent, True, [unspent_0])\n+\n+        # Locking an already-locked output should error\n         self.nodes[2].lockunspent(False, [unspent_0])\n         assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n+\n+        # Restarting the node should clear the lock\n+        self.restart_node(2)\n+        self.nodes[2].lockunspent(False, [unspent_0])\n+\n+        # Unloading and reloating the wallet should clear the lock\n+        assert_equal(self.nodes[0].listwallets(), [self.default_wallet_name])\n+        self.nodes[2].unloadwallet(self.default_wallet_name)\n+        self.nodes[2].loadwallet(self.default_wallet_name)\n+        assert_equal(len(self.nodes[2].listlockunspent()), 0)\n+\n+        # Locking non-persistently, then re-locking persistently, is allowed\n+        self.nodes[2].lockunspent(False, [unspent_0])\n+        self.nodes[2].lockunspent(False, [unspent_0], True)\n+\n+        # Restarting the node with the lock written to the wallet should keep the lock\n+        self.restart_node(2)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n+\n+        # Unloading and reloading the wallet with a persistent lock should keep the lock\n+        self.nodes[2].unloadwallet(self.default_wallet_name)\n+        self.nodes[2].loadwallet(self.default_wallet_name)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n+\n+        # Locked outputs should not be used, even if they are the only available funds\n         assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n+\n+        # Unlocking should remove the persistent lock\n         self.nodes[2].lockunspent(True, [unspent_0])\n+        self.restart_node(2)\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n+\n+        # Reconnect node 2 after restarts\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+\n         assert_raises_rpc_error(-8, \"txid must be of length 64 (not 34, for '0000000000000000000000000000000000')\",\n                                 self.nodes[2].lockunspent, False,\n                                 [{\"txid\": \"0000000000000000000000000000000000\", \"vout\": 0}])"
      }
    ]
  },
  {
    "sha": "077154fe698f5556ad6e26ef49c9024c2f07ff68",
    "node_id": "C_kwDOABII59oAKDA3NzE1NGZlNjk4ZjU1NTZhZDZlMjZlZjQ5YzkwMjRjMmYwN2ZmNjg",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-23T00:30:46Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-25T11:50:06Z"
      },
      "message": "Add release note for lockunspent change",
      "tree": {
        "sha": "a89607ac268262af2cdc566c9da5148dff2c4abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a89607ac268262af2cdc566c9da5148dff2c4abb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/077154fe698f5556ad6e26ef49c9024c2f07ff68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077154fe698f5556ad6e26ef49c9024c2f07ff68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/077154fe698f5556ad6e26ef49c9024c2f07ff68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077154fe698f5556ad6e26ef49c9024c2f07ff68/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "719ae927dcdb60c0f9902fa79796256035228c4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719ae927dcdb60c0f9902fa79796256035228c4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/719ae927dcdb60c0f9902fa79796256035228c4e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6ec002b2df1e151e40416330690bd57247b451cd",
        "filename": "doc/release-notes-23065.md",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/077154fe698f5556ad6e26ef49c9024c2f07ff68/doc/release-notes-23065.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/077154fe698f5556ad6e26ef49c9024c2f07ff68/doc/release-notes-23065.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-23065.md?ref=077154fe698f5556ad6e26ef49c9024c2f07ff68",
        "patch": "@@ -0,0 +1,15 @@\n+Notable changes\n+===============\n+\n+Updated RPCs\n+------------\n+\n+- `lockunspent` now optionally takes a third parameter, `persistent`, which\n+causes the lock to be written persistently to the wallet database. This\n+allows UTXOs to remain locked even after node restarts or crashes.\n+\n+GUI changes\n+-----------\n+\n+- UTXOs which are locked via the GUI are now stored persistently in the\n+wallet database, so are not lost on node shutdown or crash.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "d96b000e94d72d041689c5c47e374df2ebc0e011",
    "node_id": "C_kwDOABII59oAKGQ5NmIwMDBlOTRkNzJkMDQxNjg5YzVjNDdlMzc0ZGYyZWJjMGUwMTE",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-23T02:54:02Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-25T11:50:06Z"
      },
      "message": "Make GUI UTXO lock/unlock persistent",
      "tree": {
        "sha": "893d38948a7073c2902bf4520bcb49ae9013b2cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/893d38948a7073c2902bf4520bcb49ae9013b2cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d96b000e94d72d041689c5c47e374df2ebc0e011",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d96b000e94d72d041689c5c47e374df2ebc0e011",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d96b000e94d72d041689c5c47e374df2ebc0e011",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d96b000e94d72d041689c5c47e374df2ebc0e011/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "077154fe698f5556ad6e26ef49c9024c2f07ff68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077154fe698f5556ad6e26ef49c9024c2f07ff68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/077154fe698f5556ad6e26ef49c9024c2f07ff68"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6766e0510fb6836efe93fba2afc79901987923c2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d96b000e94d72d041689c5c47e374df2ebc0e011/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d96b000e94d72d041689c5c47e374df2ebc0e011/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=d96b000e94d72d041689c5c47e374df2ebc0e011",
        "patch": "@@ -122,7 +122,7 @@ class Wallet\n     virtual bool displayAddress(const CTxDestination& dest) = 0;\n \n     //! Lock coin.\n-    virtual bool lockCoin(const COutPoint& output) = 0;\n+    virtual bool lockCoin(const COutPoint& output, const bool write_to_db) = 0;\n \n     //! Unlock coin.\n     virtual bool unlockCoin(const COutPoint& output) = 0;"
      },
      {
        "sha": "86dbd05b1a5fdd942eca53a5aff81ff9983f2d2f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d96b000e94d72d041689c5c47e374df2ebc0e011/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d96b000e94d72d041689c5c47e374df2ebc0e011/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d96b000e94d72d041689c5c47e374df2ebc0e011",
        "patch": "@@ -241,7 +241,7 @@ void CoinControlDialog::lockCoin()\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n     COutPoint outpt(uint256S(contextMenuItem->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), contextMenuItem->data(COLUMN_ADDRESS, VOutRole).toUInt());\n-    model->wallet().lockCoin(outpt);\n+    model->wallet().lockCoin(outpt, /* write_to_db = */ true);\n     contextMenuItem->setDisabled(true);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n     updateLabelLocked();"
      },
      {
        "sha": "d9fc6de79bb6b657c8ce8a2ffa9067f6298665f8",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d96b000e94d72d041689c5c47e374df2ebc0e011/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d96b000e94d72d041689c5c47e374df2ebc0e011/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=d96b000e94d72d041689c5c47e374df2ebc0e011",
        "patch": "@@ -214,15 +214,17 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->DisplayAddress(dest);\n     }\n-    bool lockCoin(const COutPoint& output) override\n+    bool lockCoin(const COutPoint& output, const bool write_to_db) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->LockCoin(output);\n+        std::unique_ptr<WalletBatch> batch = write_to_db ? std::make_unique<WalletBatch>(m_wallet->GetDatabase()) : nullptr;\n+        return m_wallet->LockCoin(output, batch.get());\n     }\n     bool unlockCoin(const COutPoint& output) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->UnlockCoin(output);\n+        std::unique_ptr<WalletBatch> batch = std::make_unique<WalletBatch>(m_wallet->GetDatabase());\n+        return m_wallet->UnlockCoin(output, batch.get());\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {"
      }
    ]
  }
]