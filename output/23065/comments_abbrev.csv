prayank23,2021-09-22 15:40:32,"Concept ACK \n\nThanks a lot for improving privacy and working on this issue. Will test it in few minutes.",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925049449,925049449,
DrahtBot,2021-09-22 17:29:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22929](https://github.com/bitcoin/bitcoin/pull/22929) (wallet: Automatically add receiving destinations to the address b",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925134299,925134299,
prayank23,2021-09-22 19:04:06,"Tested on Pop!_OS and everything works as expected. \n\nSteps that I followed for testing:\n\n### Check default behavior :white_check_mark: \n\n```\nbitcoin-cli -rpcwallet=W1 listunspent\n\n[\n  {\n    ""txid"": ""752871b9f6aeacbd1d60a0154aabd098cd7b172b74928f9af0a6104af0dbf9ff"",\n    ""vout"": 0,\n    ""address"": ""bcrt1qa8xy0hlvlsr66yvv80h3qxp9stq68aef6pzvjt"",\n    ""label"": """",\n    ""scr",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925224499,925224499,
kristapsk,2021-09-22 19:11:49,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925233945,925233945,
meshcollider,2021-09-23 00:10:57,"Thanks, addressed both review suggestions.\n\nHappy to make GUI changes persistent too, it would be a very simple change. Can discuss if it is a useful change.",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925417204,925417204,
kristapsk,2021-09-23 01:09:23,"> Happy to make GUI changes persistent too, it would be a very simple change. Can discuss if it is a useful change.\n\nI think it is. People who use manual coin control will likely manually selected specfic UTXOs for single tx and lock unspent for longer term. And longer term should survive bitcoin-qt restarts. At least that looks to me more intuitive. Also, from privacy perspective, it is bette",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925439096,925439096,
meshcollider,2021-09-23 03:00:36,"Sure, added persistent locking to the GUI now then üëç ",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925471896,925471896,
prayank23,2021-09-23 07:14:05,"tACK https://github.com/bitcoin/bitcoin/pull/23065/commits/687d65f910755ae4c73db1cfe6b4ffaf351ce297\n\nChanges since last review:\n\n- GUI\n- Release notes\n- Comment in test\n- Example\n\n<details>\n  <summary>Tried locking/unlocking UTXOs in GUI (No issues)</summary>\n\n![image](https://user-images.githubusercontent.com/13405205/134467429-b3c1144f-63ff-4b92-b652-923766f37cee.png)\n",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925559102,925559102,
prayank23,2021-09-23 07:15:24,"> wallet_address_types.py --descriptors              | ‚úñ Failed  | 25 s\n\nNot sure if this error in CI is related to PR: https://github.com/bitcoin/bitcoin/pull/23065/checks?check_run_id=3682608670",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925559783,925559783,
meshcollider,2021-09-23 07:27:29,"> @prayank23 Not sure if this error in CI is related to PR\n\nLooks unrelated, it looks like some random windows socket issue:\n> OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted\n",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-925565997,925565997,
kristapsk,2021-09-24 05:46:52,I think this needs also release note about existing behaviour change in the GUI.,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926362818,926362818,
meshcollider,2021-09-24 10:08:44,"> lock(utxo, persistent=false) but utxo already has persisted lock - should delete from db?\n\nI don't think we should allow re-locking in any case, better to require explicitly unlocking then locking again.\n\n> unlock(utxo, persistent=false) but utxo already has persisted lock - should delete from db?\n\nI was thinking a lot about this while writing the PR. It does make sense to me that un",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926508651,926508651,
laanwj,2021-09-24 11:44:10,"> Why not just always persist? What are the cons of that? If someone wants no locks then just call lockunspent true after load.\n\nNot sure about this. It's a much larger behavior change (downstream software probably relies on starting with a clean slate after restart), and if this behavior really turns out to be more popular it could always be done later.",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926560757,926560757,
promag,2021-09-24 11:54:04,"> > Why not just always persist? What are the cons of that? If someone wants no locks then just call lockunspent true after load.\n> \n> Not sure about this. It's a much larger behavior change (downstream software probably relies on starting with a clean slate after restart), and if this behavior really turns out to be more popular it could always be done later.\n\nNot only restart, even `load",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926566188,926566188,
laanwj,2021-09-24 13:00:08,"> How about a startup flag like --persist-unspent-locks?\n\nPlease don't add another startup option that subtly changes behavior over all wallets :smile: \nI was actually fearing this when I looked at this PR, and was pleasantly surprised it's a flag per utxo.",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926605696,926605696,
promag,2021-09-24 15:35:13,@meshcollider I think you should mention that only manual locks can be persisted. Funding calls result in memory-only locks.,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926723004,926723004,
achow101,2021-09-24 18:11:48,The GUI change needs a release note.,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926828146,926828146,
meshcollider,2021-09-25 00:49:42,"I'll leave any potential behaviour changes with `fundrawtransaction`/`send` RPCs and lock reasons for a follow-up PR, to keep this change simpler. Storing the reason should be easy, just using the value of the LOCKED_UTXO DB field which is currently just always `1`.",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926984334,926984334,
Pob1212,2021-09-25 16:19:51,gh pr checkout 23065,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927144073,927144073,
achow101,2021-09-25 18:29:04,ACK d96b000e94d72d041689c5c47e374df2ebc0e011,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927164312,927164312,
prayank23,2021-09-26 04:22:50,"Many changes since last review: https://github.com/bitcoin/bitcoin/compare/2d3ed88..d96b000, agree that changes about GUI should be mentioned in release notes and few things looked confusing in above discussion so tested again.\n\n1. **GUI only** : Lock/Unlock no issues.\n2. **CLI**:\n   2.1 Errors: `Invalid parameter, output already locked` this is not printed in one case when when you try to",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927228484,927228484,
achow101,2021-09-26 04:46:00,"> Lock UTXO with new parameter (db). Unlock UTXO without new parameter. Unlocked state remains after restart x\n\nNo? There's also a test for that case. Perhaps you are looking at a previous revision.",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927230675,927230675,
meshcollider,2021-09-26 05:30:25,"Thanks @prayank23 for your detailed testing!\n\n> 2.1 Errors: Invalid parameter, output already locked this is not printed in one case when when you try to lock UTXO which is already locked with new parameter set as true‚ö†Ô∏è\n\nYes, I decided it isn't worth the overhead of checking if the persistent lock exists in the database, if someone wants to lock the same output twice persistently then I d",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927235252,927235252,
prayank23,2021-09-26 06:55:12,"Steps that I did for 2.5:\n\n```\n$ bitcoind --version\nBitcoin Core version v22.99.0-d96b000e94d7\n\n$ bitcoind\n\n$ bitcoin-cli -rpcwallet=Wallet1 listlockunspent\n[\n]\n\n$ bitcoin-cli -rpcwallet=Wallet1 lockunspent false ""[{\""txid\"":\""f3c7ab973f3f1857135ae9e9b10da8e85f6482a2a5d45d22d3aa20609e408ef7\"",\""vout\"":1}]"" true\n\ntrue\n\n$ bitcoin-cli -rpcwallet=Wallet1 listlockunspent",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927245864,927245864,
meshcollider,2021-09-26 07:22:49,"Oh, apologies @prayank23 , I misread your comment. That behaviour is intended:\n\n> I was thinking a lot about this while writing the PR. It does make sense to me that unlock would simply remove any locks, persistent or not.\n\nWe discussed this briefly on IRC at the wallet meeting and decided this approach made the most sense.\n\n(By the way, if you start bitcoind with the -daemon flag you ",https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927249213,927249213,
meshcollider,2021-09-26 07:42:07,@prayank23 Thanks! Happy to discuss changing the default after this is merged as a follow-up.,https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-927251609,927251609,
MarcoFalke,2021-09-22 12:33:59,"nit: Univalue get_* will already do type checking, so can drop `RPCTypeCheckArgument`.\n\n```suggestion\n    const bool store_lock{request.params[2].isNull() ? false : request.params[2].get_bool()};\n```",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r713893867,713893867,src/wallet/rpcwallet.cpp
MarcoFalke,2021-09-22 12:35:52,nit: Would a unique_ptr work here?,https://github.com/bitcoin/bitcoin/pull/23065#discussion_r713895402,713895402,src/wallet/rpcwallet.cpp
meshcollider,2021-09-22 12:56:41,Good point!,https://github.com/bitcoin/bitcoin/pull/23065#discussion_r713913249,713913249,src/wallet/rpcwallet.cpp
achow101,2021-09-22 16:51:56,"In 94b6c8db5010bf1f38f1458866575cb599d17326 ""Update lockunspent tests for lock persistence""\n\nnit:\n\n```suggestion\n        # Restarting the node with the lock written to the wallet should keep the lock\n```",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r714133225,714133225,test/functional/wallet_basic.py
prayank23,2021-09-22 17:38:13,nit: Can add one example here for new argument,https://github.com/bitcoin/bitcoin/pull/23065#discussion_r714168388,714168388,src/wallet/rpcwallet.cpp
laanwj,2021-09-23 11:45:52,"I would slightly prefer for this parameter to be called ""persistent"". I think it better captures the meaning.",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r714714304,714714304,src/wallet/rpcwallet.cpp
meshcollider,2021-09-24 01:06:48,"Sure, done ",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r715251615,715251615,src/wallet/rpcwallet.cpp
promag,2021-09-25 10:15:01,Could have a duplicate test that unloads and loads the wallet instead of restarting the node.,https://github.com/bitcoin/bitcoin/pull/23065#discussion_r716022097,716022097,test/functional/wallet_basic.py
promag,2021-09-25 10:19:22,If the output is not locked (erase returns zero) then it could early return `false` or you can avoid `EraseLockedUTXO`.,https://github.com/bitcoin/bitcoin/pull/23065#discussion_r716022534,716022534,src/wallet/wallet.cpp
promag,2021-09-25 10:37:22,"Re https://github.com/bitcoin/bitcoin/pull/23065#issuecomment-926508651\n\n> > lock(utxo, persistent=false) but utxo already has persisted lock - should delete from db?\n> \n> I don't think we should allow re-locking in any case, better to require explicitly unlocking then locking again.\n\nIf you want to implement this breaking change then use the return value of `insert()` to know if the o",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r716024371,716024371,src/wallet/wallet.cpp
meshcollider,2021-09-25 10:58:57,"> Otherwise, the lock can be persisted but not in memory.\n\nSorry, I'm not sure how this could happen. Upon thinking further, I think its fine to upgrade a memory-only lock to a persistent lock (this is useful if fundrawtransaction locked the spends and we want to persistently lock them afterward). But how could we end up with a persistent lock not in memory?\n\nEDIT: I've updated the PR to a",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r716026664,716026664,src/wallet/wallet.cpp
promag,2021-09-25 13:16:06,"> But how could we end up with a persistent lock not in memory?\n\nRight, doesn't happen now that unlock clears from memory and db.",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r716040761,716040761,src/wallet/wallet.cpp
promag,2021-09-25 13:18:08,"But does it make sense to allow memory-only lock if it is already persisted?\n\nEDIT: looks like this is not possible since lockunspent RPC checks if unspent is already locked.",https://github.com/bitcoin/bitcoin/pull/23065#discussion_r716040997,716040997,src/wallet/wallet.cpp
