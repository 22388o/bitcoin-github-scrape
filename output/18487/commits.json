[
  {
    "sha": "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjhlMTU3MjhkMWFkMDU4YTRiN2Q3NTY5ZmQ1ZDViYTY4MDZjYTI4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-03-31T23:22:14Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-02T16:25:27Z"
      },
      "message": "rpc: Fix rpcRunLater race in walletpassphrase",
      "tree": {
        "sha": "6b190400bc7250fe03d24b7231d1b7efe730c9af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b190400bc7250fe03d24b7231d1b7efe730c9af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2db25233cf0dd1d2668a4aafc4fc94c47c11849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2db25233cf0dd1d2668a4aafc4fc94c47c11849",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2db25233cf0dd1d2668a4aafc4fc94c47c11849"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 39,
      "deletions": 31
    },
    "files": [
      {
        "sha": "03bfdb4a2509afaa4ee60c2d577e5f07dfc580f8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
        "patch": "@@ -1918,44 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n+    // rpcRunLater must be called without cs_wallet held otherwise a deadlock\n+    // can occur. The deadlock would happen when RPCRunLater removes the\n+    // previous timer (and waits for the callback to finish if already running)\n+    // and the callback locks cs_wallet.\n+    AssertLockNotHeld(wallet->cs_wallet);\n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded."
      }
    ]
  }
]