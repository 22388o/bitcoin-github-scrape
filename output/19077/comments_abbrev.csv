achow101,2020-05-27 03:19:02,I've dropped the amalgamation file,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634403350,634403350,
jonasschnelli,2020-05-27 15:54:20,"Pretty amazing work! Thanks for doing this.\nFor testing purposes, would it make sense to add logdb (#5686, simple implementation) in order to test and benchmark?\n\nConcept ACK on a BDB replacement for descriptor wallets.\nStill unsure wether sqlite or an internal format should be chosen. Maybe a comparison(-matrix) of internal vs. sqlite could be done?\n\nAs for concrete implementation ste",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634758099,634758099,
achow101,2020-05-27 16:25:46,"> For testing purposes, would it make sense to add logdb (#5686, simple implementation) in order to test and benchmark?\n\nI don't think it really makes sense to add a database system that we aren't going to use.\n\n> Still unsure wether sqlite or an internal format should be chosen. Maybe a comparison(-matrix) of internal vs. sqlite could be done?\n\nI think there's two primary reasons to c",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634780861,634780861,
practicalswift,2020-05-27 19:21:45,"Concept ACK\n\nNice work! Very readable code!",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634887122,634887122,
DrahtBot,2020-05-27 19:50:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20094 (wallet: Unify wallet directory lock error message by hebasto)\n* #19502 (Bugfix: Wallet: Soft-fail exceptions with",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634903672,634903672,
laanwj,2020-05-28 10:41:25,"CONCEPT ACK\n :tada: :partying_face: :tada: \nVery happy to move on from BerkeleyDB and I've always liked sqlite as a versatile but still minimalistic replacement.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-635262568,635262568,
Sjors,2020-06-01 15:28:04,"Concept ACK. I'm able to build and run the test suite (including `feature_backwards_compatibility.py`) on macOS 10.15.4 with Homebrew `brew install sqlite3` (don't forget to add). I'm also able to build with `/depends`. I'm able to load an existing descriptor wallet (bdb) and create a new one.\n\nIs there a particular reason to stick to `.dat` as the file extension, rather than `.sqlite`? If you",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-636923373,636923373,
achow101,2020-06-01 15:58:45,"> Is there a particular reason to stick to `.dat` as the file extension, rather than `.sqlite`? If you do the latter, `listwalletdir` and the Open Wallet GUI need a trivial change.\n\nThere are 2 reasons. The first is that it's easier on review on implementation to stick to one filename. As you mentioned, if I make it `.sqlite`, `listwalletdir` and other places need to be changed. There are seve",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-636939984,636939984,
luke-jr,2020-06-03 18:03:26,"> I don't think it really makes sense to add a database system that we aren't going to use.\n\nMaybe it's time to use logdb.\n\n>Review and implementation are much simpler\n\nRealistically, this should be phrased ""review and implementation are behind closed doors by another team, and non-transparent"".\n\nWhile SQLite has a free license, it is not open development. I'm not sure if their rev",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-638366578,638366578,
jamesob,2020-06-11 20:33:08,Concept ACK. Awesome.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-642914167,642914167,
achow101,2020-07-23 03:50:24,"Since #19334 has been merged, this is now ready for review.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-662805756,662805756,
achow101,2020-07-24 21:17:33,"> If it's available, I'd be curious to see a diff of the additional changes that switch `wallet.dat` to `wallet.sqlite` and how complicated they are.\n\nhttps://github.com/achow101/bitcoin/tree/sqlite-wallet-w-rename is a copy of the original branch with the rename. It's a bit outdated, but it should give you an idea of what was needed for renaming.\n\n  > Do we know how current & previous ver",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-663738278,663738278,
achow101,2020-08-10 22:11:20,I've taken @ryanofsky's rebase and made a few changes. Notably I removed the filename change and the related tests. Also I made a slight change to CreateWallet` so that the GUI would also make sqlite wallets for descriptor wallets.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-671615437,671615437,
meshcollider,2020-09-06 23:48:19,This can now be rebased after #19619 merge ,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-687936981,687936981,
achow101,2020-09-06 23:55:49,Rebased,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-687938563,687938563,
pstratem,2020-09-07 17:18:29,"Should probably be setting the application_id pragma to something constant and random.\n\nIt's also important that fullfsync be set because Mac OS X is a liar.\n\nCould also be setting user_version, which is a way of versioning the schema.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-688444710,688444710,
achow101,2020-09-07 22:05:08,"> Should probably be setting the application_id pragma to something constant and random.\n\nCould just set it to the network magic bytes? I think that might even let us deal with #12805 by ensuring that we only open a wallet that was created with the correct network magic as the application_id.\n\n> Could also be setting user_version, which is a way of versioning the schema.\n\nWould it be u",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-688523403,688523403,
achow101,2020-09-10 00:23:37,Added application_id as the network magic. Also added user_version.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-689894349,689894349,
S3RK,2020-09-24 13:54:10,"ACK 46db9cd\nCode reviewed and lightly tested. I built it on macOS 10.13.6 with sqlite (3.19.3) installed from brew.\n * Created, loaded and unloaded a wallet; loaded multiple sqlite wallets\n * Verified checks for `application_id` and schema version (`user_version`)\n * Verified SQLite global log configuration; errors appear in the log file as expected\n * Integrity check gives a proper erro",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-698359773,698359773,
fjahr,2020-09-25 14:00:57,"Concept ACK and Approach ACK. From my initial shallow pass, the code looks very good already. Local build, automated tests, and some manual testing were all successful. Will keep going and dig into SQLite documentation at the same time since I am not experienced with it.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-698946207,698946207,
jonatack,2020-09-25 19:25:19,Concept ACK. On my review shortlist. ,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699111834,699111834,
fjahr,2020-09-26 18:24:52,"I have run coverage checks on the current state of this PR [here](https://fjahr.com/files/19077_cov_baseline/src/wallet/index.html) (these are the total coverage number, i.e. including functional tests). The `wallet/sqlite.cpp` numbers are low because of many lines dedicated to error checking but also `HasKey()` and `TxnAbort()` are not covered while they are covered on the BDB class. I suppose th",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699530872,699530872,
achow101,2020-09-26 19:50:39,"`TxnAbort` isn't covered by either SQLite or BDB, and that is expected as it is only called in an failure case.\n\n`HasKey` seems to be only used by `DatabaseBatch::Exists` which is currently only used by `BerkeleyBatch` for a backwards compatibility case that SQLite doesn't need.\n\n> We currently only run the wallet tests with a descriptor wallet AFAICT. Should this be changed now? Maybe the",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699540371,699540371,
achow101,2020-09-28 01:59:52,"> It's not clear to me how concurrent accesses are handled, how sqlite guarantees a concurrent thread B waits until after thread A calls `sqlite3_reset`.\n\nHave you read https://sqlite.org/lockingv3.html?",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699728618,699728618,
achow101,2020-09-28 16:21:18,"> I left a few comments but I don't consider any of them blocking.\n\nGreat! I'll leave them until something blocking comes up.\n\n> There are no changes to the docs so far. Do you plan to do these in a follow-up?\n\nOh yeah, documentation... I'll do them in a follow up.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-700139275,700139275,
achow101,2020-09-30 16:25:16,"Rebased, so addressed comments. Also added some basic documentation to the build docs.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-701499340,701499340,
achow101,2020-10-01 19:54:07,"> I think this change should be merged with more tests enabled. Particularly wallet_backup.py and wallet_multiwallet.py tests would be good to have running, but probably others would be good as well. Doing this is pretty straightforward after #20034, and I took a shot at in a branch: [master...ryanofsky:pr/sql](https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql) ([branch](https:/",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-702362595,702362595,
achow101,2020-10-06 18:39:19,"I've also made a few changes to pass a couple of tests with #18788 merged. https://github.com/achow101/bitcoin/tree/sqlite-master is a branch with this and #18788 merged in, based on master. That branch also has an additional commit so that tool_wallet works with sqlite.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-704474094,704474094,
achow101,2020-10-07 19:08:27,"I've done the suggested changes except for `wallet.sqlite`. I think we should discuss this during the wallet meeting this week.\n\nI've also pulled in the suggested test changes.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705136747,705136747,
achow101,2020-10-07 20:36:55,"I've done some testing with the behavior around a downgrading and different filenames.\n\n* Downgrading with the sqlite wallet named `wallet.dat`\n  * Previous versions will attempt to open the `wallet.dat` file and fail to do so because the file magic does not match BDB's. However on that failure, a salvage will be attempted. This will do nothing because the file magic does not match BDB's. Th",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705180018,705180018,
achow101,2020-10-08 14:25:24,"> We could also stick to wallet.dat for the main wallet, but use `.sqlite` for all freshly created ones.\n\nNot sure what you mean by ""main wallet""",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705606970,705606970,
Sjors,2020-10-08 14:33:23,The default wallet.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705612296,705612296,
achow101,2020-10-08 15:08:25,"> The default wallet.\n\nNo. That's way more confusing. We also stopped making the default wallet.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705634683,705634683,
achow101,2020-10-08 19:30:07,"> * Compatibility and safety with external tools and documentation. It seems unlikely external tools or documentation would be able to cope correctly with data in a new format (I would be curious to see counterexamples). I would actually expect things written to deal with BDB files to handle SQLite data badly or even dangerously. If there is external documentation referencing `wallet.dat` files, a",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705777007,705777007,
hebasto,2020-10-09 14:24:42,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706212692,706212692,
MarcoFalke,2020-10-09 15:37:43,"There is a leak, which should be suppressed (or fixed) before this is merged:\n\n```\n==39670==ERROR: LeakSanitizer: detected memory leaks\nIndirect leak of 16960 byte(s) in 147 object(s) allocated from:\n    #0 0x55f2dce75a7d in malloc (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0x16a3a7d)\n    #1 0x7fc222afacfa  (/lib/x86_64-linux-gnu/libsqlite3.so.0+0x4",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706252885,706252885,
achow101,2020-10-09 17:57:02,Memory leak should be fixed now.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706323119,706323119,
DrahtBot,2020-10-10 18:08:46,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 12a1c3ad1a43634d2a98717e49e3f02c4acea2fe<br>(master) | commit c696e443e88ea1c0440bea0bc7e865ead6018afd<br>(master and this pull) |\n|--|--|--|\n| *-aarch64-linux-gnu-debug.tar.gz | [`4f65f0a878718595...`](https://drahtbot.space/guix/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-aarch64-linux,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706589403,706589403,
DrahtBot,2020-10-11 08:01:37,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 12a1c3ad1a43634d2a98717e49e3f02c4acea2fe<br>(master) | commit b0ebf88b908191fc78591742ce447cb75a233986<br>(master and this pull) |\n|--|--|--|\n| *-aarch64-linux-gnu-debug.tar.gz | [`fecb0fbc29aa125d...`](https://drahtbot.space/gitian/bitcoin/bitcoin/12a1c3ad1a43634d2a98717e49e3f02c4acea2fe/bitcoin-12a1c3ad1a43-aarch64-l,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706666938,706666938,
MarcoFalke,2020-10-11 09:12:44,"Both windows and linux cross builds fail with:\n\n```\nBuilding sqlite...\nmake[1]: Entering directory '/home/ubuntu/build/bitcoin/depends/work/build/x86_64-w64-mingw32/sqlite/3320100-a2b073ad5d5'\n/bin/bash ./libtool  --tag=CC   --mode=compile x86_64-w64-mingw32-gcc -DPACKAGE_NAME=\""sqlite\"" -DPACKAGE_TARNAME=\""sqlite\"" -DPACKAGE_VERSION=\""3.32.1\"" -DPACKAGE_STRING=\""sqlite\ 3.32.1\"" -DPACKA",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706674785,706674785,
hebasto,2020-10-11 09:27:45,"@MarcoFalke \n> Both windows and linux cross builds fail with:\n\nMind providing your setup, as I cannot reproduce fail?",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706676467,706676467,
MarcoFalke,2020-10-11 09:38:07,It is the gitian setup,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706677646,706677646,
hebasto,2020-10-11 10:32:09,"> It is the gitian setup\n\nConfirm fail, unfortunately.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706683704,706683704,
hebasto,2020-10-11 10:54:06,"@MarcoFalke \n\nFor `HOST=x86_64-w64-mingw32` the diff between local and gitian logs:\n\n```diff\n@@ -4,7 +4,8 @@\n checking whether build environment is sane... yes\n checking for x86_64-w64-mingw32-strip... x86_64-w64-mingw32-strip\n checking for a thread-safe mkdir -p... /bin/mkdir -p\n-checking for gawk... gawk\n+checking for gawk... no\n+checking for mawk... mawk\n checking whethe",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706686229,706686229,
hebasto,2020-10-11 13:46:13,"@MarcoFalke \n\nI've managed to fix gitian build for Windows with the following patch:\n```diff\n--- a/contrib/gitian-descriptors/gitian-win.yml\n+++ b/contrib/gitian-descriptors/gitian-win.yml\n@@ -81,7 +81,7 @@ script: |\n         echo ""REAL=\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`"" >> ${WRAP_DIR}/${i}-${prog}\n         echo ""export LD_PRELOAD='/usr/\$",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706707219,706707219,
hebasto,2020-10-11 14:02:09,Making gitian builds now for https://github.com/hebasto/bitcoin/commits/pr19077-1011-gitian branch with a fixup https://github.com/hebasto/bitcoin/commit/149af3c5eff6da055affc695baa063fac631d4ba commit.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706709307,706709307,
hebasto,2020-10-11 14:59:40,"The results of gitian builds with the fixup https://github.com/hebasto/bitcoin/commit/149af3c5eff6da055affc695baa063fac631d4ba commit.\n\n- Linux:\n```\nGenerating report\n036ba5ede9ee30e3d8bb093f1f66c574550f41385db973c34854a3d1ec38cc10  bitcoin-149af3c5eff6-aarch64-linux-gnu-debug.tar.gz\n66046c1e1cceab6183cf856fdfbf9a1b6df3bc88384aecfc6161e0f354a9ecb4  bitcoin-149af3c5eff6-aarch64-linux-gn",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706717533,706717533,
achow101,2020-10-11 16:14:59,Addressed comments and also pulled in @hebasto's diff for the gitian build.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706728469,706728469,
achow101,2020-10-11 18:49:17,"> 1. It would be nice to mention the `wallet.dat-journal` file in the `files.md` doc.\n\nDone.\n\n> 2. Every time a wallet is loaded I can see a database exception message in the log:\n\nApparently we do a read for a now unused record (read is done for backwards compatibility). Since this isn't in new sqlite wallets, the read fails. I've changed the logging for `ReadKey` to not log an error ",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706750312,706750312,
DrahtBot,2020-10-11 23:45:49,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 0b2abaa666d6f3331e3246ffd64dd47946e9dcdf<br>(master) | commit c568ff48dac2a2d49fc15a86aca7deb94e2f6723<br>(master and this pull) |\n|--|--|--|\n| *.tar.gz | [`026efb7dd6132c32...`](https://drahtbot.space/guix/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6.tar.gz) | [`c63f6e8493c7df93...`](htt,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706787399,706787399,
achow101,2020-10-12 00:08:16,"I've determined the minimum sqlite version to be 3.7.17, assuming that all versions between that and the latest work if the oldest works. `configure.ac` and `doc/dependencies.md` have been updated to reflect this. With 3.7.17, all tests pass and it was able to load a wallet created with 3.32.1.\n\nFun fact, the oldest version I was able to download was 3.7.16 and it does not work as the `applica",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-706790592,706790592,
DrahtBot,2020-10-12 14:22:39,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 0b2abaa666d6f3331e3246ffd64dd47946e9dcdf<br>(master) | commit 3cfdc4b038257ed68d498ed212fe00283a795bb3<br>(master and this pull) |\n|--|--|--|\n| *-osx-unsigned.dmg | [`04e4b56842a70884...`](https://drahtbot.space/gitian/bitcoin/bitcoin/0b2abaa666d6f3331e3246ffd64dd47946e9dcdf/bitcoin-0b2abaa666d6-osx-unsigned.dmg) | [`4,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-707151719,707151719,
achow101,2020-10-12 14:57:50,"> There is no consistency in our docs about mentioning of SQLite: `SQLite 3` and `SQLite3` are used. Could we use the only naming, say `SQLite`?\n\nShould be unified to SQLite now.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-707171733,707171733,
meshcollider,2020-10-14 02:32:34,"@Sjors it seems almost everyone has no preference regarding the extension, as there are pros and cons either way. It seems the easiest thing to do is leave this PR as-is to get it in to the release in time, unless anyone has a good reason to sway the decision.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708116889,708116889,
achow101,2020-10-14 15:34:37,"Rebased. There was a silent merge conflict with #20130.\n\n@hebasto @S3RK @promag @Sjors @ryanofsky @meshcollider @fjahr Could you all re-review/re-ACK this so we can merge it before the feature freeze tomorrow?",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708483129,708483129,
Sjors,2020-10-14 17:54:47,re-utACK c4a29d0a90b821c443c10891d9326c534d15cf97,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708563650,708563650,
promag,2020-10-14 20:30:55,"Tested ACK c4a29d0a90b821c443c10891d9326c534d15cf97.\n\n> I am honestly confused about reasons for locking into `wallet.dat` again when it's so easy now to use a clean format.\n\n@ryanofsky clean format as in different file extension? I think it can be discussed and changed even after feature freeze, just like @achow says in OP.",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708643476,708643476,
fjahr,2020-10-14 23:40:33,reACK c4a29d0a90b821c443c10891d9326c534d15cf97,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708716760,708716760,
S3RK,2020-10-15 02:11:30,"Re-review ACK c4a29d0a90b821c443c10891d9326c534d15cf97\nAnd thanks for fixing the silent merge conflict",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708849268,708849268,
fanquake,2020-10-15 03:40:56,@meshcollider has declared that he'll be sorely disappointed if he doesn't get to pull the merge trigger on this PR.,https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708876279,708876279,
meshcollider,2020-10-15 07:11:52,"re-utACK c4a29d0a90b821c443c10891d9326c534d15cf97\n\nLet's go 🚀 ",https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-708949919,708949919,
ryanofsky,2020-07-24 20:20:16,"In commit ""Change WalletLocation::Exists to check for wallet file existence"" (6e7ef52e359e55bc82a30207a701995f0ca255d7)\n\nMinor: I can't really figure out what this commit and also the previous commit ""wallet: Don't Verify if database location doesn't exist"" (b64e40310742e3975ae704a801ccafa73d8617bf) are doing. Changes seem harmless, but they are making code more complicated. It would be good i",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460269271,460269271,src/wallet/walletutil.cpp
ryanofsky,2020-07-24 20:34:37,"In commit ""Add libsqlite3"" (31243f5482bb1c8a71affbe7ced6653a09bd6829)\n\nWould suggest splitting this commit and other build and depends and travis related commits into a separate build PR so it can get feedback from bitcoin build aficionados (and so this PR can more approachable for regular and wallet reviewers).\n\nI think probably build reviewers will want a `--with-sqlite` configure option",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191,460275191,configure.ac
ryanofsky,2020-07-24 20:37:14,"In commit ""Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch"" (08847ca4de58c112da4b6455230f7b454afa543c)\n\nMinor: Suggest `sqlite3* m_db{nullptr};` or `sqlite3* m_db = nullptr;` here to be sure this is safe without looking and even if someone adds another constructor.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460276199,460276199,src/wallet/sqlite.h
ryanofsky,2020-07-24 20:41:46,"In commit ""Introduce g_file_paths"" (d038d04a4e3e0522a51cf0d39110749f8395f61a)\n\nMinor: Pretty sure we can get rid of these globals with more sane loading code in the wallet, but in any case could consider switching RecursiveMutex to Mutex if possible and switching `cs_sqlite` to `g_sqlite_mutex` to follow newer conventions",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460278213,460278213,src/wallet/sqlite.cpp
ryanofsky,2020-07-24 20:43:50,"In commit ""Implement SQLiteDatabaseVersion"" (b2f2e7171861fe2998f2c27af44b65b0e1f558aa)\n\nMinor: SQLiteLibraryVersion might be a more descriptive name",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460279135,460279135,src/wallet/sqlite.cpp
ryanofsky,2020-07-24 20:47:36,"In commit ""Initialize and Shutdown sqlite3 globals"" (5c78c9094a0158e4d466b696a3bbbcbd35b51b15)\n\nMinor: Would add comment saying this is a no-op if it is already called. Another option would be to only call it when g_file_paths is empty.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460280638,460280638,src/wallet/sqlite.cpp
ryanofsky,2020-07-24 20:48:46,"In commit ""Initialize and Shutdown sqlite3 globals"" (5c78c9094a0158e4d466b696a3bbbcbd35b51b15)\n\nReturn value isn't checked here. Would suggest at least logging an error so we know if something has gone wrong.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460281099,460281099,src/wallet/sqlite.cpp
achow101,2020-07-24 21:20:52,"The motivation is so that we check the wallet file itself as part of the db type checking later on. IIRC there were some issues with where the wrong file type was being used that necessitated these changes.\n\nI'll try to expand the commit message ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460293438,460293438,src/wallet/walletutil.cpp
achow101,2020-07-27 00:47:32,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596136,460596136,src/wallet/sqlite.h
achow101,2020-07-27 00:47:39,Renamed,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596148,460596148,src/wallet/sqlite.cpp
achow101,2020-07-27 00:48:16,"Probably, but I'm also following the convention set by `BerkeleyDatabaseVersion`.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596211,460596211,src/wallet/sqlite.cpp
achow101,2020-07-27 00:48:21,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596216,460596216,src/wallet/sqlite.cpp
achow101,2020-07-27 00:48:27,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596231,460596231,src/wallet/sqlite.cpp
promag,2020-08-02 14:41:06,"A couple of comments here:\n\n- file at path is opened twice.\n- nit, in `DetermineStorageType` you check `IsSQLiteFile` first, maybe change there for now as most is BDB.\n- maybe follow up, this could use `DetermineStorageType`.\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r464085954,464085954,src/wallet/walletutil.cpp
achow101,2020-08-04 21:43:46,"> file at path is opened twice.\n\nIt is?\n\nDone the other 2 suggestions.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465347410,465347410,src/wallet/walletutil.cpp
promag,2020-08-04 21:46:23,At worst case it is.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465348577,465348577,src/wallet/walletutil.cpp
Sjors,2020-08-07 18:09:06,787047133d22f014bea2646d3b23cd18801f19c2: you can drop the `else if (fs::is_directory(location.GetPath()` branch from `rpcwallet.cpp`,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467193743,467193743,test/functional/wallet_multiwallet.py
ryanofsky,2020-08-07 22:02:29,"In commit ""Add/Remove m_file_path to/from g_file_paths in con/destructor"" (316002da052cad68c54a48e918d1d5f2ca58c0d0)\n\nMinor: Developer notes and current clang-format config don't indent namespace contents\n\nAlso, I wonder if these variables are even necessary. If sqlite supports opening databases in an exclusive mode, there should be no need for our code to maintain this additional list of ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467304981,467304981,src/wallet/sqlite.cpp
achow101,2020-08-10 23:24:53,sqlite does have a way to open databases in an exclusive mode but we don't use it. But we also do that ourselves with the `.walletlock` file. So I think this is just unnecessary anyways and thus I've removed it.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r468239295,468239295,src/wallet/sqlite.cpp
S3RK,2020-09-19 08:37:16,"1) I suppose the locking is done in the calling code. Do I understand correctly that it's managed by `cs_wallet`? \n\n2) nit: I believe it's better to have all members private. Why not make `SQLiteBatch` a friend class or just pass the statement handlers when we construct `SQLiteBatch` object.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491332879,491332879,src/wallet/sqlite.h
S3RK,2020-09-19 09:45:04,I double pstratem's comment regarding `fullsync` and `checkpoint_fullsync`,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491354812,491354812,src/wallet/sqlite.cpp
S3RK,2020-09-19 10:03:19,What if we create read-only batch first and then a read-write batch? Looks like it's going to fail since the connection will remain read-only.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491360876,491360876,src/wallet/sqlite.cpp
S3RK,2020-09-19 10:06:55,nit: IIUC we need to close db handler even in the case of an error.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491362245,491362245,src/wallet/sqlite.cpp
S3RK,2020-09-20 04:46:01,nit: why not verify `m_cursor_init` just in case?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491651973,491651973,src/wallet/sqlite.cpp
S3RK,2020-09-20 07:22:39,nit: maybe add an upper limit to avoid hanging the thread in case something went wrong?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491662874,491662874,src/wallet/sqlite.cpp
achow101,2020-09-21 23:14:48,"> I suppose the locking is done in the calling code. Do I understand correctly that it's managed by `cs_wallet`?\n\nFor the most part, yes. Sometimes we do need to handle concurrency withing `SQLiteDatabase` but those should already be handled by `m_refcount` and sqlite itself.\n\n> nit: I believe it's better to have all members private. Why not make `SQLiteBatch` a friend class or just pass t",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492397526,492397526,src/wallet/sqlite.h
achow101,2020-09-22 00:25:12,I think we always open in read-write mode first so that doesn't have any effect. But I suppose we should still have a check for that.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417032,492417032,src/wallet/sqlite.cpp
achow101,2020-09-22 00:27:30,It will be closed when the `SQLiteDatabase` is destructed.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585,492417585,src/wallet/sqlite.cpp
achow101,2020-09-22 00:29:49,I think it's fine,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121,492418121,src/wallet/sqlite.cpp
achow101,2020-09-22 01:13:56,Added `fullfsync` enabling. `checkpoint_fullsync` is not needed as we don't use WAL mode.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428340,492428340,src/wallet/sqlite.cpp
achow101,2020-09-22 01:14:02,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428354,492428354,src/wallet/sqlite.cpp
achow101,2020-09-22 01:14:14,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428410,492428410,src/wallet/sqlite.cpp
Sjors,2020-09-22 10:33:08,`NO_SQLITE` and `NO_BDB` (hooray!) needs a mention in depends/README,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492632145,492632145,depends/Makefile
S3RK,2020-09-22 11:35:09,"> For the most part, yes. Sometimes we do need to handle concurrency withing SQLiteDatabase but those should already be handled by m_refcount and sqlite itself.\n\nCould you please elaborate on this part? It looks like there are indeed places when we access `WalletDatabase` instance from another thread without acquiring lock first. For example `CWallet::chainStateFlushed`. From my understanding ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492663400,492663400,src/wallet/sqlite.h
S3RK,2020-09-22 11:51:14,"Actually, I couldn't find a single place when we create read-only batch at all. Maybe I'm missing something. Do you know what was the original purpose to add read-only mode?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492671660,492671660,src/wallet/sqlite.cpp
achow101,2020-09-22 16:53:14,"It's pretty much just a leftover from BDB. The single place a readonly batch is used is in `BerkeleyDatabase::Rewrite`. Maybe we should just remove the readonly stuff, but that could be done in a followup.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492889600,492889600,src/wallet/sqlite.cpp
achow101,2020-09-22 16:57:47,"According to https://sqlite.org/threadsafe.html, the default multithreading mode is serialized which means that a single database connection can be used from multiple threads safely. So no locking is needed with that.\n\nI suppose we should enforce that when opening by setting `SQLITE_OPEN_FULLMUTEX`?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492892531,492892531,src/wallet/sqlite.h
S3RK,2020-09-23 10:03:20,"Thanks for clarification.\n\n> I suppose we should enforce that when opening by setting `SQLITE_OPEN_FULLMUTEX`?\n\nI think that's a great idea. I would say that [SQLITE_CONFIG_SERIALIZED](https://sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigserialized) is even better. It explicitly say that it's safe to use both connection and **prepared statement** objects.\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426,493400426,src/wallet/sqlite.h
achow101,2020-09-23 16:17:04,DOne,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493721352,493721352,src/wallet/sqlite.h
fjahr,2020-09-27 15:40:32,"5ece9f577a6e6463b15b0d88f35a7f18808936f2\n\nWhy not keep it as `NO_WALLET`?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495585293,495585293,ci/test/00_setup_env_native_msan.sh
fjahr,2020-09-27 16:25:30,"8c7832a45f9acb088a87689573c2be47870b5c8a\n\nIt feels strange to me that the log callback makes everything blow up in a special case. I think we use asserts for developer errors but I don't think that's the case here. Also doesn't this mean that the `throw std::runtime_error` on L36 will never be used? ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495589636,495589636,src/wallet/sqlite.cpp
fjahr,2020-09-27 16:41:32,"cf3a2373b0aa7a20ff15367730161ac18f3f302b\n\nnit\n```suggestion\n    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n    const bool create = strchr(mode, 'c') != nullptr;\n    int flags;\n\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495591171,495591171,src/wallet/sqlite.cpp
fjahr,2020-09-27 18:47:36,"e4d88e26a5da6f119b6a0124fb18ee9909e486a4\n\nMaybe use a runtime_error here instead of an assert? Same in `EraseKey`.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495602648,495602648,src/wallet/sqlite.cpp
promag,2020-09-27 20:21:44,"01b3cb026806784ae20eb670bd9aa40c43a94e54\n\nnit, use initializer `{nullptr}`?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495611715,495611715,src/wallet/sqlite.h
fjahr,2020-09-27 20:27:46,"94d5ee30677b2282e87f79a6f945bceff41faaad\n\nThis is the case when neither DB exists and a new one is created, right? Would be worth a comment here I think.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495612384,495612384,src/wallet/walletdb.cpp
fjahr,2020-09-27 20:38:22,"81d9ce910f61aed16c7298150775b973102db498\n\nMaybe check and error if a different format was passed?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495613541,495613541,src/wallet/wallet.cpp
achow101,2020-09-28 01:54:36,`NO_WALLET` means both no BDB and no SQLite,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495653143,495653143,ci/test/00_setup_env_native_msan.sh
achow101,2020-09-28 01:59:12,"> It feels strange to me that the log callback makes everything blow up in a special case. I think we use asserts for developer errors but I don't think that's the case here.\n\nThis would only be hit in a developer error or a sqlite bug.\n\n> Also doesn't this mean that the `throw std::runtime_error` on L36 will never be used?\n\nI don't think so?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495654073,495654073,src/wallet/sqlite.cpp
fjahr,2020-09-28 17:36:50,My question was unclear: I meant to ask why are we adding SQLite to this environment while we are excluding BDB here?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121953,496121953,ci/test/00_setup_env_native_msan.sh
fjahr,2020-09-28 17:36:54,"Hm, the docs aren't very clear on this (or I can't find the right place) so I can not say yet if there are cases where `ret == SQLITE_OK` but the log callback is still being called. That would be the only case when this seems valuable because otherwise the `runtime_error` would be hit in case there is a problem and the error message would be clearer I think? Yes, this could be a bug in SQLite but ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121996,496121996,src/wallet/sqlite.cpp
achow101,2020-09-28 17:54:57,"This test environment is a little weird.\n\nThe wallet is actually enabled and BDB is being used. However the BDB being used needs to be built with some special flags, so it can't be built via depends. What this option does is disable BDB in depends so that BDB can be built separately with whatever it needs to work in this env. Because SQLite doesn't need this special building, it can be built b",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496132342,496132342,ci/test/00_setup_env_native_msan.sh
achow101,2020-09-28 17:59:21,I think if `ret != SQLITE_OK` both `ErrorLogCallback` and `runtime_error` get called. The `ErrorLogCallback` doesn't change `ret` to `SQLITE_OK` and it doesn't throw it's own exception. The assertion should never fail so that won't cause a program exit either.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921,496134921,src/wallet/sqlite.cpp
achow101,2020-09-30 16:07:04,I don't think that is necessary.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497629841,497629841,src/wallet/wallet.cpp
achow101,2020-09-30 16:24:48,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641658,497641658,src/wallet/sqlite.h
achow101,2020-09-30 16:24:53,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641719,497641719,src/wallet/sqlite.cpp
achow101,2020-09-30 16:24:56,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641745,497641745,src/wallet/sqlite.cpp
achow101,2020-09-30 16:24:59,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641790,497641790,src/wallet/walletdb.cpp
ryanofsky,2020-09-30 22:01:21,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191\n\nIn commit ""Add libsqlite3"" (10124c3d6c5176d5df94964e530a4b0c6edd8381)\n\nMinor: Maybe someone more familiar with the build can weigh in, but it seems like it could be desirable to allow building bitcoin without sqlite even if sqlite is installed on the system. Also, I think other dependency checks have been switched to ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497825930,497825930,configure.ac
ryanofsky,2020-09-30 22:02:51,"In commit ""Add sqlite to travis and depends"" (443d029fb859262c56b8be32205a2b4540dbb843)\n\nMinor: Would be nice to preserve alphabetical order and avoid need to change unrelated lines",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497826540,497826540,build_msvc/vcpkg.json
ryanofsky,2020-09-30 22:04:47,"In commit ""Add sqlite to travis and depends"" (443d029fb859262c56b8be32205a2b4540dbb843)\n\nMinor: Spacing on this line is inconsistent with the rest of the file",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497827306,497827306,depends/packages/packages.mk
ryanofsky,2020-09-30 22:11:05,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (f35f89f1ae53914f6183ec3d7da6a1d0c27bed16)\n\nSee main comment for reasoning, but this is awkward to change later so I think the commit introducing this should start with the appropriate final value (hopefully ""wallet.sqlite"" or similar)",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497829773,497829773,src/wallet/sqlite.cpp
ryanofsky,2020-09-30 22:21:02,"In commit ""Initialize and Shutdown sqlite3 globals"" (13cca0d881acc81dbf4a6496bb02d4fefc905a77)\n\nThere's still a race condition here if two databases are opened at the same time. sqlite3_config will only be called once for both databases, but only one of the databases will actually block waiting for the call to complete, so the other database open will most likely fail. Similar races can happen",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497833472,497833472,src/wallet/sqlite.cpp
S3RK,2020-10-01 10:24:24,@achow101 I'd like to follow up on this if you don't have plans to do it yourself,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498140301,498140301,src/wallet/sqlite.cpp
achow101,2020-10-01 16:12:01,@S3RK Go ahead,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498362766,498362766,src/wallet/sqlite.cpp
ryanofsky,2020-10-01 17:56:18,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921\n\nAgree with achow that this is an appropriate place to assert. We're passing along a context value, and asserting we are passed back the same value. We're not checking for a runtime error, just documenting an assumption about how the code should is supposed to work, and adding a sanity check to detect if the assumption is ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498421232,498421232,src/wallet/sqlite.cpp
ryanofsky,2020-10-01 18:22:58,"In commit ""Implement SQLiteDatabase::Open"" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\n\nNote for future improvement: We should probaby stop this non-standard use of flags. ""w"" or ""a"" normally creates a new file not ""c"". https://www.gnu.org/software/libc/manual/html_node/Opening-Streams.html. It might also be better to switch away from modes strings to `readonly` / `require_new` / `require_exist",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498435139,498435139,src/wallet/sqlite.cpp
ryanofsky,2020-10-01 18:27:09,"In commit ""Implement SQLiteDatabase::Open"" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\n\nCould avoid the need for this preamble using CREATE TABLE IF NOT EXISTS syntax: https://www.sqlite.org/draft/lang_createtable.html",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365,498437365,src/wallet/sqlite.cpp
ryanofsky,2020-10-01 18:32:40,"In commit ""Implement SQLiteDatabase::Open"" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\n\nI think you need to do this check even in the (m_db == nullptr) case above in case the file or filesystem is read-only. According to https://www.oreilly.com/library/view/using-sqlite/9781449394592/re303.html SQLITE_OPEN_READWRITE will ""Attempt to open the file read/write. If this is not possible, open the fi",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498440461,498440461,src/wallet/sqlite.cpp
ryanofsky,2020-10-01 19:02:41,"In commit ""sqlitedb: Create and lock the wallet directory"" (af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3)\n\nThis doesn't seem like the most ideal approach. We were forced to use .walletlock in #11904 because the old version of BDB we use doesn't support set_lk_exclusive. But with sqlite it would seem simpler and safer to use its exclusive locking functionality: https://www.sqlite.org/pragma.html#pr",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498455603,498455603,src/wallet/sqlite.cpp
achow101,2020-10-01 20:03:13,"I agree that flags would probably be better. Also, I think there's an argument for dropping `read_only` considering it is only used by BerkeleyDatagbase::Rewrite.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498484152,498484152,src/wallet/sqlite.cpp
achow101,2020-10-01 20:07:37,"Since only an EXCLUSIVE lock is acquired after the first write, I'm not sure that the locking pragma provides strong enough guarantees for us. Another bitcoind could conceivably open the same wallet while only the SHARED lock is held.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168,498486168,src/wallet/sqlite.cpp
achow101,2020-10-01 21:50:36,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530916,498530916,build_msvc/vcpkg.json
achow101,2020-10-01 21:50:42,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530950,498530950,depends/packages/packages.mk
achow101,2020-10-01 21:50:51,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531001,498531001,src/wallet/sqlite.cpp
achow101,2020-10-01 21:50:57,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531025,498531025,src/wallet/sqlite.cpp
achow101,2020-10-01 21:51:01,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531047,498531047,src/wallet/sqlite.cpp
achow101,2020-10-02 00:19:17,"I attempted to make it so that BDB or sqlite could be disabled, but I wasn't able to get it to work. I'll leave that for a followup for someone more familiar with autotools.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498571179,498571179,configure.ac
Sjors,2020-10-02 10:50:54,"Maybe we can bump from 3.32.1 to 3.33.0 in a followup, but before the release.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498750983,498750983,depends/packages/sqlite.mk
S3RK,2020-10-03 07:49:24,I did [an implementation](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) based on this PR to move from modes string to bool flags; and removed read-only mode as well. I'll open a PR once this one will be merged.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987,499125987,src/wallet/sqlite.cpp
Sjors,2020-10-05 10:44:42,"a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb: using an enum to handle modes would seem more readable, especially because these mode strings are a BDB artefact. See also https://github.com/bitcoin/bitcoin/pull/19077/commits/0344ccea4dcc0692e736dd759fc3945272a3266c#r498435139",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499506296,499506296,src/wallet/sqlite.cpp
Sjors,2020-10-05 11:10:03,"Perhaps citing from the [sqlite3 manual](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html) in the comment is more clear:\n\n```\n// From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option: \n// ""The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\n// the first parameter to the application-defined logger function whenever that funct",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499518957,499518957,src/wallet/sqlite.cpp
Sjors,2020-10-05 11:36:33,"0344ccea4dcc0692e736dd759fc3945272a3266c  let's drop `IF NOT EXISTS`. If `create` is only set for new database then no table should exist. Alternatively, if `create` is meant as ""create if needed"", then it's seems safer to explicitly check if the table doesn't exist yet. In that case the error  ""Failed to create new database"" is incorrect.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499532896,499532896,src/wallet/sqlite.cpp
Sjors,2020-10-05 11:44:00,"0344cce: is `PRAGMA fullfsync` ephemeral? [Documentation](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync) isn't very clear about that. If so, it shouldn't be under `create`. On macOS 10.15.7 with sqlite 3.28.0 when I call `PRAGMA fullfsync;` it returns `0`.\n\n_Update_: it's fine, `create` is confusingly named, but this is code is run every time you load a wallet",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499536692,499536692,src/wallet/sqlite.cpp
Sjors,2020-10-05 12:09:45,"0344cce: you may want to add this check early in the `create` block too. E.g. if I make an existing wallet read-only, it will throw a confusing ""Failed to set the application id"" (its first attempt to write).",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499550279,499550279,src/wallet/sqlite.cpp
Sjors,2020-10-05 14:31:41,"Just noticed @ryanofsky's comment: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365\n\nI think it's safer to explicitly check if the table is present. In general it's nice to have a clearly separate code path for stuff we only do on wallet creation (and upgrade).",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317,499643317,src/wallet/sqlite.cpp
ryanofsky,2020-10-05 14:54:50,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317\n\n> Just noticed @ryanofsky's comment: [#19077 (comment)](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365)\n> \n> I think it's safer to explicitly check if the table is present. In general it's nice to have a clearly separate code path for stuff we only do on wallet creation (and upgrade).\n\nDroppin",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499660884,499660884,src/wallet/sqlite.cpp
achow101,2020-10-05 16:10:20,">  Alternatively, if `create` is meant as ""create if needed"", then it's seems safer to explicitly check if the table doesn't exist yet. In that case the error ""Failed to create new database"" is incorrect.\n\nIt is use as a ""create if needed."" All wallet DBs are created with the mode ""cr+"". I don't think we should be giving an error if the table doesn't exist in that case either.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449,499713449,src/wallet/sqlite.cpp
achow101,2020-10-05 16:12:28,AFAICT it is persistent.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499714803,499714803,src/wallet/sqlite.cpp
achow101,2020-10-05 16:17:20,"Yes, this should be done as a followup.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499717981,499717981,src/wallet/sqlite.cpp
achow101,2020-10-05 16:26:27,"sqlite has a fairly aggressive release cycle, so I think we can leave this for later.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499723594,499723594,depends/packages/sqlite.mk
achow101,2020-10-05 16:32:33,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727144,499727144,src/wallet/sqlite.cpp
achow101,2020-10-05 16:32:45,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727257,499727257,depends/Makefile
achow101,2020-10-05 16:33:57,Added this comment.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727925,499727925,src/wallet/sqlite.cpp
ryanofsky,2020-10-05 23:51:31,"In commit ""Add sqlite to travis and depends"" (8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb)\n\ns/NO_SQLITET/NO_SQLITE",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499932369,499932369,depends/README.md
ryanofsky,2020-10-06 00:18:23,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (b6eeb2b5ee6964a9034aca6f4be2b72d532589ca)\n\nI think the refcounting code in this PR is confusing and should be removed. Rewrite method can just vacuum without sleeping. Close method can unconditionally close m_db it's not null. m_refcount doesn't ever need be referenced, AddRef and RemoveRef don't ever need to be called, and they be ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499939951,499939951,src/wallet/sqlite.h
ryanofsky,2020-10-06 00:20:09,"In commit ""Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch"" (46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce)\n\nCan drop reference counting (see dummy classes comment)",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499940422,499940422,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 00:42:50,"In commit ""Implement SQLiteBatch::Close"" (fbf44184de758271e759978cd5037efcb4ba4eb1)\n\nThis should log an error if TxnAbort() fails. It might also be useful to log an error if TxnAbort succeeds, since this condition should never happen unless there is unpaired TxnBegin call or an unhandled exception.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946057,499946057,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 00:44:00,"In commit ""Implement SQLiteBatch::Close"" (fbf44184de758271e759978cd5037efcb4ba4eb1)\n\nCan drop reference counting (see dummy classes comment)",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946323,499946323,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 01:50:36,"In commit ""Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch"" (46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce)\n\nI don't think it makes sense to open the database in the batch constructor instead of in the database constructor. It makes the batch constructor assymetric (there's no database close in the destructor), forces database to be needlessly opened, closed, and reo",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499962753,499962753,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 01:58:06,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449\n\n> It is use as a ""create if needed."" All wallet DBs are created with the mode ""cr+"". I don't think we should be giving an error if the table doesn't exist in that case either.\n\nIt would require changes outside sqlite.cpp/sqlite.h but it should be possible to throw an error instead of defensively creating tables if the",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499964465,499964465,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:14:20,"In commit ""Implement SQLiteDatabase::Open"" (96d2a5f8b8ea7dd512deaac4d1d70702517af6c1)\n\nShould drop this comment. Copying a wallet may be a problem if you do it in a crazy way, or it may be perfectly safe. BDB code started checking for copies only as a kludge (initial kludge protected against ambiguity in the bdb log format when multiple databases were opened in the same environment, and later ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499968299,499968299,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:17:42,"In commit ""Implement SQLiteDatabase::Open"" (96d2a5f8b8ea7dd512deaac4d1d70702517af6c1)\n\nShould add `NOT NULL` constraint to key and value columns. Code already has to deal with empty string values, so it would be better not to throw in NULL values and errors as well where we don't need them.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499969112,499969112,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:24:16,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (b6eeb2b5ee6964a9034aca6f4be2b72d532589ca)\n\nparam is renamed to `mode` in later commit, could just call it mode here to avoid rename",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499970587,499970587,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:37:05,"In commit ""sqlitedb: Create and lock the wallet directory"" (4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a)\n\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168\n\n> Since only an EXCLUSIVE lock is acquired after the first write, I'm not sure that the locking pragma provides strong enough guarantees for us. Another bitcoind could conceivably open the same wallet while only the ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499973617,499973617,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:50:14,"In commit ""Implement SQLiteDatabase::Verify"" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\n\nI don't think you can close the db if opening failed. I think even on cases where we don't act on errors, we should at least log them. It would be best if all the sqlite_* calls in this PR logged errors so we are never blindly debugging or guessing about errors like this. ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499976815,499976815,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:52:38,"In commit ""Implement SQLiteDatabase::Verify"" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\n\nThis looks like a bug. You can't delete a prepared statement that wasn't created, and this might lead to a bad pointer dereference since since stmt pointer is not initialized.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499977375,499977375,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:56:35,"In commit ""Implement SQLiteDatabase::Verify"" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\n\nWould be good to disambiguate this error from error immediately above (step failed vs read failed)",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978292,499978292,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 02:58:20,"In commit ""Implement SQLiteDatabase::Verify"" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\n\nWould be good to prefix sqlite error lines with ""Failed to verify"" text if error string is currently empty here.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978706,499978706,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:10:40,"In commit ""Implement SQLiteDatabase::Verify"" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\n\nIt is odd to lock the wallet here because it means the wallet will be locked on opening when `options.verify` is true, but not locked until later when `options.verify` is false (later when the first batch is created).\n\nThe simplest thing approach would seem to just open and lock the database once when ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499981600,499981600,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:17:50,"In commit ""Implement SQLiteDatabase::Flush, PeriodicFlush, and ReloadDbEnv as No-ops"" (addc4630a2a6587b0e07b9c45644117542685fed)\n\nAll the comments in the commit description should be comments in the code, so they are not lost in git history and so code makes sense. Would also suggest implementing these methods inline in the header file to avoid giving a misleading impression from reading the c",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499983328,499983328,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:21:56,"In commit ""sqlitedb: Create and lock the wallet directory"" (4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a)\n\nThis fails to unlock the wallet if it was opened with options.verify = true, but m_db is null because no batch was created. In practice, I'm guessing this never happens, but this is the type of complication which would go away if we used sqlite locking instead of implementing our own locking.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984258,499984258,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:23:43,"In commit ""Implement SQLiteDatabase::RemoveRef and AddRef"" (e63b9504257165780b2c56ec46bc842b8d680dbc)\n\nCan drop reference counting (see dummy classes comment) and this whole commit\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984625,499984625,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:28:07,"In commit ""Add SetupSQLStatements"" (fcee39162e5713f581443eb26d36c65c2c0b9cda)\n\nShould log errors if these fail so potential bugs don't go undetected and so we are less likely to have to debug blindly.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499985602,499985602,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:47:24,"In commit ""Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey"" (21289de5fd85b4510032393902b0dec84704cf77)\n\nThis whole commit does not seem thread safe. Wallet RPC calls can come in from multiple threads and validation events come in on their own thread, so I would think multiple batch objects and reads and writes could happen simultaneously. If this is the case bind_blob/step calls",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499989994,499989994,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:52:42,"In commit ""Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort"" (d448c6c362642f24b08b754cb09066ced847f867)\n\nIt would seem best to log errors if these calls fail. TxnBegin, TxnCommit, TxnAbort should never return false unless there's a bug in our code or a runtime error and in either case having more debug information would be useful",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129,499991129,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 03:57:16,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121\n\nIn commit ""Implement SQLiteDatabase::Rewrite"" (0d75b4013400b5a6bfa1f5c75082a8ff0701bd84)\n\n> I think it's fine\n\nThis whole loop doesn't seem like a good idea. If it actually serves a purpose, there should be a comment about it with specifics. Otherwise I think Rewrite should directly vacuum, and this sleepy loop th",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499992082,499992082,src/wallet/sqlite.cpp
S3RK,2020-10-06 05:45:38,I think we've discussed it already here https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582,500018582,src/wallet/sqlite.cpp
S3RK,2020-10-06 05:54:31,"From the [docs](https://www.sqlite.org/c3ref/open.html)\n> Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close() when it is no longer required.\n\nLogging is handled by [global error log](https://www.sqlite.org/errlog.html)\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272,500021272,src/wallet/sqlite.cpp
S3RK,2020-10-06 05:55:38,"I'm not sure if we SHOULD finalize failed prepared statement, but it's a no-op to finalize a NULL pointer.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625,500021625,src/wallet/sqlite.cpp
S3RK,2020-10-06 05:56:29,Logging is handled by [global error log](https://www.sqlite.org/errlog.html),https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021921,500021921,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 06:19:08,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582\n\n> I think we've discussed it already here [#19077 (comment)](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426)\n\nYou can use the same prepared statement from different threads but you can't use the same statement for different purposes with different values at the same time from different threads. Th",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500029597,500029597,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 06:30:26,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272\n\n> Logging is handled by [global error log](https://www.sqlite.org/errlog.html)\n\nThanks for explaining sqlite3_close. How do you know whether or not something is logged to the error log? Does every function call that doesn't return SQLITE_OK log to the error log? If so, then I guess there's no technical reason to handl",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500033853,500033853,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 06:33:22,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625\n\n> I'm not sure if we SHOULD finalize failed prepared statement, but it's a no-op to finalize a NULL pointer.\n\nThe pointer looks uninitialized, not null. Even if this actually works, I wouldn't code that looks so fragile and broken.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500035085,500035085,src/wallet/sqlite.cpp
S3RK,2020-10-06 09:47:30,"> Does every function call that doesn't return SQLITE_OK log to the error log?\n\nThis is my current understanding of how it works based on my tests and the following line from documentation. \n\n> SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.\n\nI can check particular scenarios if you'd like.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185,500146185,src/wallet/sqlite.cpp
S3RK,2020-10-06 09:57:32,As an out parameter It's set to NULL in case of an error. This is documented and to me the code in question looks like an intended use of sqlite api. The sqlite3_finalize routine can be called at any point during the life cycle. I'm not sure whether it's possible for an error to happen when statement is initialized. But it looks reasonable and safer to finalize whenever we encounter an error at an,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129,500152129,src/wallet/sqlite.cpp
S3RK,2020-10-06 10:26:00,"Now I think you're correct. Looks like the locking in sqlite will guarantee safety for a single call, but we ourselves still have to take care for the sequence of the calls.\n\n> You can use the same prepared statement from different threads but you can't use the same statement for different purposes with different values at the same time from different threads.\n\nThis is what I failed to art",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500167882,500167882,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 11:43:54,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129\n\n> As an out parameter It's set to NULL in case of an error. This is documented and to me the code in question looks like an intended use of sqlite api.\n\nSorry, where is this documented? Even assuming it is documented, would you expect anybody else reading the code to know this? Or will the next person maintaining or d",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500208899,500208899,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 11:54:26,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185\n\n> This is my current understanding of how it works based on my tests and the following line from documentation.\n\nThis looks like a misreading to me. The documentation could easily say every failing call is logged, but it doesn't, and even goes out of it's way to say it ""strives to keep error logger traffic low."" But e",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500214610,500214610,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 13:09:47,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987\n\n> I did [an implementation](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) based on this PR to move from modes string to bool flags; and removed read-only mode as well. I'll open a PR once this one will be merged.\n\nSince these changes would only simplify this PR, ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500261927,500261927,src/wallet/sqlite.cpp
S3RK,2020-10-06 13:39:37,"Just not to sound unfounded — here is the link https://www.sqlite.org/c3ref/prepare.html\nMaybe I misunderstood your point, I didn't mean to say that I'm against initializing it to null, it's a good idea. It was more to the fact that I believe calling finalize is fine in the case of an error.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500285658,500285658,src/wallet/sqlite.cpp
S3RK,2020-10-06 13:59:10,"Indeed I assumed (maybe falsely) that the next maintainer is familiar with SQLite C api. My humble personal preference is not to complicate the code by duplicating the error messages, when the library can do it for us. I just tried to provide more context for the author and the reviewers, sorry if it wasn't helpful. ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585,500304585,src/wallet/sqlite.cpp
ryanofsky,2020-10-06 14:12:29,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585\n\n> Indeed I assumed (maybe falsely) that the next maintainer is familiar with SQLite C api. My humble personal preference is not to complicate the code by duplicating the error messages, when the library can do it for us. I just tried to provide more context for the author and the reviewers, sorry if it wasn't helpful.\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500317531,500317531,src/wallet/sqlite.cpp
achow101,2020-10-06 16:04:07,"The purpose of opening the database within a batch is to only open it when the database is going to be used. It is then left open to avoid constantly closing and reopening it.\n\nWe also do it to set the mode on the database, but the usefulness of that is arguable but we can deal with that in a followup.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009,500419009,src/wallet/sqlite.cpp
achow101,2020-10-06 16:09:28,"From https://sqlite.org/pragma.html#pragma_locking_mode\n\n> The first time the database is read in EXCLUSIVE mode, a shared lock is obtained and held. The first time the database is written, an exclusive lock is obtained and held.\n\nSo opening in exclusive mode means that there is a potential case where bitcoind has not yet written anything and thus only has a shared lock. In that case, anot",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742,500422742,src/wallet/sqlite.cpp
achow101,2020-10-06 16:18:04,"From https://sqlite.org/c3ref/open.html\n\n> Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close() when it is no longer required.\n\nSince it is ok for a database to not exist when we do `Verify`, I think it is correct to not log anything on the `NOTFOUND` error here.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500428260,500428260,src/wallet/sqlite.cpp
achow101,2020-10-06 16:23:24,"From https://sqlite.org/c3ref/prepare.html\n\n> *ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step(). If there is an error, *ppStmt is set to NULL.\n\nSo `stmt` should be NULL after prepare if it fails.\n\nFrom https://sqlite.org/c3ref/finalize.html\n\n> Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.\n>\n> The application",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500431876,500431876,src/wallet/sqlite.cpp
achow101,2020-10-06 18:19:22,Fixed,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504040,500504040,depends/README.md
achow101,2020-10-06 18:19:27,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504081,500504081,src/wallet/sqlite.h
achow101,2020-10-06 18:19:33,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504175,500504175,src/wallet/sqlite.cpp
achow101,2020-10-06 18:19:38,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504235,500504235,src/wallet/sqlite.cpp
achow101,2020-10-06 18:19:43,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504286,500504286,src/wallet/sqlite.cpp
achow101,2020-10-06 18:19:50,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504376,500504376,src/wallet/sqlite.cpp
achow101,2020-10-06 18:20:07,"`PRIMARY KEY` implies not null, so i've just added `NOT NULL` for `value`.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504579,500504579,src/wallet/sqlite.cpp
achow101,2020-10-06 18:20:12,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504637,500504637,src/wallet/sqlite.cpp
achow101,2020-10-06 18:20:33,"Made `stmt` nullptr, and also done for other statements.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504885,500504885,src/wallet/sqlite.cpp
achow101,2020-10-06 18:21:08,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505229,500505229,src/wallet/sqlite.cpp
achow101,2020-10-06 18:21:15,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505300,500505300,src/wallet/sqlite.cpp
achow101,2020-10-06 18:21:52,I've changed `Verify` to unlock the directory at the end of the function.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505689,500505689,src/wallet/sqlite.cpp
achow101,2020-10-06 18:21:58,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505741,500505741,src/wallet/sqlite.cpp
achow101,2020-10-06 18:24:32,I've removed `if (!m_db) return;` so this will always be run. This is safe because `sqlite3_close` on a nullptr is a no-op. This will unconditionally unlock the directory on db close.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507420,500507420,src/wallet/sqlite.cpp
achow101,2020-10-06 18:24:38,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507483,500507483,src/wallet/sqlite.cpp
achow101,2020-10-06 18:25:02,Moved all of the statements into `SQLiteBatch`.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507778,500507778,src/wallet/sqlite.cpp
achow101,2020-10-06 18:25:08,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507852,500507852,src/wallet/sqlite.cpp
achow101,2020-10-06 18:25:20,Removed the loop,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507977,500507977,src/wallet/sqlite.cpp
achow101,2020-10-06 18:32:11,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500512372,500512372,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 01:27:29,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (f747380289b06ba1631e1cec30b96b5aecb61f36)\n\nComment ""Indicate the a new database user has began using the database. Increments m_refcount"" isn't accurate",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684600,500684600,src/wallet/sqlite.h
ryanofsky,2020-10-07 01:28:35,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (f747380289b06ba1631e1cec30b96b5aecb61f36)\n\nComment about pszSkip doesn't apply here",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684857,500684857,src/wallet/sqlite.h
ryanofsky,2020-10-07 01:33:02,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (f747380289b06ba1631e1cec30b96b5aecb61f36)\n\nComment isn't true since method is a no-op. I think this method and other methods which are no-ops like PeriodicFlush ReloadDbEn or never called AddRef RemoveRef should be inlined here so it's obvious what their role is in the sqlite implementation and how they are not normal methods",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500685968,500685968,src/wallet/sqlite.h
ryanofsky,2020-10-07 01:33:52,"In commit ""Add SQLiteDatabase and SQLiteBatch dummy classes"" (f747380289b06ba1631e1cec30b96b5aecb61f36)\n\nComment is also incorrect",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500686157,500686157,src/wallet/sqlite.h
ryanofsky,2020-10-07 01:43:42,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009\n> The purpose of opening the database within a batch is to only open it when the database is going to be used. It is then left open to avoid constantly closing and reopening it.\n\nIt sounds like my suggestion was not clear. My suggestion is to open the database when the database object is created, and close it when it is ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500688620,500688620,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 01:55:58,"In commit ""Implement SQLiteDatabase::Open"" (d1559561a68dd6604efd91baa5dbd28c995d0074)\n\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585\n\n> It will be closed when the `SQLiteDatabase` is destructed.\n\nIt does looks like `db` pointer can be leaked here if ret is not OK.\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692052,500692052,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 01:56:46,"In commit ""Implement SQLiteDatabase::Open"" (d1559561a68dd6604efd91baa5dbd28c995d0074)\n\nIt looks like `db` pointer can be leaked here if this error is thrown\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692290,500692290,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 01:57:24,"In commit ""Implement SQLiteDatabase::Open"" (d1559561a68dd6604efd91baa5dbd28c995d0074)\n\nIt looks like `db` pointer can be leaked here if ret is not OK.\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692495,500692495,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 02:21:40,"In commit ""Implement SQLiteDatabase::Open"" (d1559561a68dd6604efd91baa5dbd28c995d0074)\n\n`key` needs `NOT NULL` constraint to prevent nulls (primary key isn't enough).\n\n```\n$ sqlite3\nSQLite version 3.30.1 2019-10-10 20:19:45\nsqlite> CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL);\nsqlite> insert into main values (null, 'value');\nsqlite> select * from main",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500699840,500699840,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 02:22:25,"In commit ""Implement SQLiteDatabase::Open"" (d1559561a68dd6604efd91baa5dbd28c995d0074)\n\nIt looks like `db` pointer can be leaked here if ret is not OK.\n",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500700087,500700087,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 02:30:01,"In commit ""Implement SQLiteBatch::Close"" (29395e28698978dc65e16c4eaf9bb8f8e7429e7d)\n\nWould be good to `s/Batch closed/Batch closed unexpectedly without explicit commit or abort/` here and below to be clear this is an error, not an informational log",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500702146,500702146,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 02:42:03,"In commit ""Implement SQLiteBatch::Close"" (29395e28698978dc65e16c4eaf9bb8f8e7429e7d)\n\nWould be good to `s/could not abort/failed to abort/` to be clear abort call was made rather than considered",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500705096,500705096,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 03:24:10,"In commit ""sqlitedb: Create and lock the wallet directory"" (a6415a4dc752db171bd842fb376c5c5a919c04e5)\n\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742\n\n> From [sqlite.org/pragma.html#pragma_locking_mode](https://sqlite.org/pragma.html#pragma_locking_mode)\n\nOh, you are absolutely right. Just setting the pragma doesn't get the lock, you have to do an empty transac",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500715649,500715649,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 03:35:19,"In commit ""Add SetupSQLStatements"" (f86afc53406448428dadaf59d0ccf78fb1421220)\n\nIt looks like there are double-delete bugs in this method depending on how it's called. Statement pointers are not set to null if finalize returns `SQLITE_OK`, so if Close is called twice sqlite3_finalize will be called with invalid deleted pointers and possibly segfault.\n\nOne fix would be to set the pointers to",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500718150,500718150,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 03:44:21,"In commit ""Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey"" (36ea015032ddf1aa7d424b463c2c6c531d832295)\n\nThroughout the PR would be good to check all return codes and log errors with context information whenever any sqlite3_* calls fail. But if the practice of checking return codes is going to be set aside when calling sqlite, feel free to ignore the suggestion.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500720094,500720094,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 03:52:59,"In commit ""Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey"" (36ea015032ddf1aa7d424b463c2c6c531d832295)\n\nTheoretically it might be more efficient to use \n`SELECT EXISTS(SELECT * FROM main WHERE key = ?)` instead of `SELECT value FROM main WHERE key = ?` to avoid needing to read the table and just use the index. But probably does not matter in practice.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500722270,500722270,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 03:59:00,"In commit ""Implement SQLiteDatabase::Backup"" (273e8adfe8e96d45dca0e44fe194bf2548dd6686)\n\nShould drop this line. ""There should be exactly one call to sqlite3_backup_finish() for each successful call to sqlite3_backup_init()."" https://www.sqlite.org/c3ref/backup_finish.html",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500723715,500723715,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 04:35:14,"In commit ""Implement SQLiteDatabase::Verify"" (90a7a6b371d1106f1cab02bcdda2454a828add1d)\n\nI know the history of the PR, but at this point post-#19619, I think it is a little nuts to keep using the sequence:\n\n1. Lock wallet directory\n2. Open database\n3. Verify database\n4. Unlock wallet directory\n5. Lock wallet directory\n6. Open database\n7. Use database\n8. Close database\n9. Un",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500732068,500732068,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 15:38:15,"In commit ""Implement SQLiteDatabase::Open"" (d1559561a68dd6604efd91baa5dbd28c995d0074)\n\nLooking at [S3RK's branch](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) https://github.com/bitcoin/bitcoin/pull/19077/#discussion_r499125987, I don't see a need to parse the mode argument at all. I think `SQLiteDatabase::Open` should ignore the mode ar",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501113175,501113175,src/wallet/sqlite.cpp
achow101,2020-10-07 16:39:12,"> This just means you need 3 statements to open the database:\n\nThen there's the potential for race conditions in 2 instances: before the pragma is executed, and after it is executed but before the transaction begins.\n\nEdit: Oh I guess we just exit with the database is in use error when `begin transaction` fails.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002,501156002,src/wallet/sqlite.cpp
ryanofsky,2020-10-07 16:49:53,"re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002\n\n> Then there's the potential for race conditions in 2 instances: before the pragma is executed, and after it is executed but before the transaction begins.\n\nThere's no race condition here:\n\n```c++\ndb = sqlite_open(path); // Or error ""sorry, couldn't open database""\nsqlite_exec(db, ""pragma locking_mode=exclusive",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501162929,501162929,src/wallet/sqlite.cpp
achow101,2020-10-07 19:04:39,Removed,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245126,501245126,src/wallet/sqlite.h
achow101,2020-10-07 19:04:49,Removed and inlined these functions.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245213,501245213,src/wallet/sqlite.h
achow101,2020-10-07 19:05:17,I've changed this to just use `m_db` so on failure it will be cleaned up by the destructor.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245501,501245501,src/wallet/sqlite.cpp
achow101,2020-10-07 19:05:29,done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245594,501245594,src/wallet/sqlite.cpp
achow101,2020-10-07 19:05:39,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245688,501245688,src/wallet/sqlite.cpp
achow101,2020-10-07 19:05:43,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245718,501245718,src/wallet/sqlite.cpp
achow101,2020-10-07 19:05:57,Set the pointers to nullptr.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245832,501245832,src/wallet/sqlite.cpp
achow101,2020-10-07 19:06:15,I think it's fine to skip checking the return codes for clear_bindings and reset.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245965,501245965,src/wallet/sqlite.cpp
achow101,2020-10-07 19:06:25,Removed,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246061,501246061,src/wallet/sqlite.cpp
achow101,2020-10-07 19:07:19,"Done.\n\nAs a result of this, I've also dropped the usage of `mode` and the database will always be created if it does not exist. This is fine as we enforce existence during `MakeDatabase`, but it would be better to have a `create` flag for this.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246525,501246525,src/wallet/sqlite.cpp
achow101,2020-10-07 19:07:43,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246716,501246716,src/wallet/sqlite.cpp
Sjors,2020-10-08 10:48:03,"d993dee317b93b11296282b9e97fa66e8c5ca152:\n```\n// If m_db is not in autocommit mode, try to abort the transaction in progress\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501625111,501625111,src/wallet/sqlite.cpp
Sjors,2020-10-08 10:51:58,"d993dee317b93b11296282b9e97fa66e8c5ca152: `TxnAbort()` returns `true` if and only if `ROLLBACK TRANSACTION` succeeds, so I'm confused what you mean by ""without the transaction being explicitly commited or aborted""\n\nSee also @ryanofsky: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501627285,501627285,src/wallet/sqlite.cpp
Sjors,2020-10-08 11:04:39,"Is it worth (in a followup) using `sqlite3_prepare_v3` with the `SQLITE_PREPARE_PERSISTENT` flag?\nhttps://www.sqlite.org/c3ref/c_prepare_normalize.html#sqlitepreparepersistent\n\nI guess that's only useful if these prepared statements can live longer than a single batch.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501634132,501634132,src/wallet/sqlite.cpp
Sjors,2020-10-08 11:43:28,"fac0cf3d1edff440cdbd19d2615cba701bb4a17d  Agree, but logging why `sqlite3_bind_blob` and `sqlite3_step` fail does seem useful.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501654556,501654556,src/wallet/sqlite.cpp
Sjors,2020-10-08 11:55:01,fac0cf3d1edff440cdbd19d2615cba701bb4a17d: you could move the `sqlite3_step` to a common function (especially if it has more error handling),https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501660749,501660749,src/wallet/sqlite.cpp
Sjors,2020-10-08 12:06:08,87d8fbfe58c5daa61326f67c228f09e7758ea368: this warrants a log message,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501667010,501667010,src/wallet/sqlite.cpp
Sjors,2020-10-08 12:07:59,"0584828e2a9022d5b548ebda6a9a8329296bcafb: worth logging why opening the destination file failed, and why backup failed to initialize, step or finish",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501668061,501668061,src/wallet/sqlite.cpp
Sjors,2020-10-08 12:18:05,4e8011a868d10650880cf5c5c01f005bc9fcc402 (maybe for followup): does it make sense to make this a prepared statement?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501674265,501674265,src/wallet/sqlite.cpp
Sjors,2020-10-08 12:31:33,"dfa867392725f999a331404205635ee7a331886f maybe explicitly mention in `EncryptWallet` that SQLite also leaves data behind when you delete a row (docs say: ""This can allow deleted content to be recovered by a hacker or by forensic analysis."")\n\nMaybe throw/assert that `skip` is not set, since the argument is ignored.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501682189,501682189,src/wallet/sqlite.cpp
Sjors,2020-10-08 13:59:58,"4eaffb807d7050dd95a1939585cc4df3caf57118: I tried opening a signet wallet (`loadwallet`) in testnet mode. It failed with `Data is not in recognized format.`, rather than this error. That's probably because `IsSQLiteFile` also checks this.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501744252,501744252,src/wallet/sqlite.cpp
Sjors,2020-10-08 14:12:32,"I changed `WALLET_SCHEMA_VERSION` to `1`, recompiled and was able to open an existing wallet...\nDitto if I create a new wallet with version 10, set it back to 0 and load it.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501753764,501753764,src/wallet/sqlite.cpp
achow101,2020-10-08 14:23:08,"> I'm confused what you mean by ""without the transaction being explicitly commited or aborted""\n\nIt means that the caller didn't call `TxnAbort` or `TxnCommit` and instead it is being done on the batch close.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762050,501762050,src/wallet/sqlite.cpp
achow101,2020-10-08 14:24:08,"Since we've moved the statements to `SQLiteBatch`, I don't think that makes sense to do.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762891,501762891,src/wallet/sqlite.cpp
achow101,2020-10-08 14:49:15,:shrug: I guess that error is fine too. `IsSQLiteFile` needs to check the app id to avoid it showing up in `listwallets`.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501782793,501782793,src/wallet/sqlite.cpp
achow101,2020-10-08 15:06:38,Had to revert back to this as it is necessary to know whether we are creating the wallet for other stuff.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796450,501796450,src/wallet/sqlite.cpp
achow101,2020-10-08 15:06:48,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796568,501796568,src/wallet/sqlite.cpp
achow101,2020-10-08 15:07:06,I don't think that is necessary.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796793,501796793,src/wallet/sqlite.cpp
achow101,2020-10-08 15:07:11,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796843,501796843,src/wallet/sqlite.cpp
achow101,2020-10-08 15:07:16,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796902,501796902,src/wallet/sqlite.cpp
achow101,2020-10-08 15:07:40,I don't think that is necessary.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797166,501797166,src/wallet/sqlite.cpp
achow101,2020-10-08 15:07:55,I think this should be fixed now.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797364,501797364,src/wallet/sqlite.cpp
achow101,2020-10-08 15:08:44,Added logging.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501798002,501798002,src/wallet/sqlite.cpp
achow101,2020-10-08 15:10:12,"> [4e8011a](https://github.com/bitcoin/bitcoin/commit/4e8011a868d10650880cf5c5c01f005bc9fcc402) (maybe for followup): does it make sense to make this a prepared statement?\n\nNo. There's nothing to prepare.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501799116,501799116,src/wallet/sqlite.cpp
ryanofsky,2020-10-08 16:53:31,"In commit ""Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch"" (328ff35370cc30b64006480ccc80418888e1d488)\n\nIs still keeping this Open call intentional? Should add a comment if so.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501869098,501869098,src/wallet/sqlite.cpp
ryanofsky,2020-10-08 16:59:25,"In commit ""Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch"" (328ff35370cc30b64006480ccc80418888e1d488)\n\nIs still keeping this fs::is_regular_file intentional? Should add a comment if so. It seems like the file should already exists at this point, and if it didn't you would probably want to return an error not skip verification.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501872912,501872912,src/wallet/sqlite.cpp
Sjors,2020-10-08 18:30:12,"Accidentally loading a wallet from the wrong network via RPC takes some effort, so I don't mind punting on this :-)",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501929335,501929335,src/wallet/sqlite.cpp
Sjors,2020-10-08 18:40:58,It is,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501935599,501935599,src/wallet/sqlite.cpp
achow101,2020-10-08 19:43:21,It's there to ensure that the database is always open when a `SQLiteBatch` is active. Maybe it would be better to just `assert(m_database.m_db)`?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501970123,501970123,src/wallet/sqlite.cpp
achow101,2020-10-08 19:57:10,"I've changed it to assert, along with a comment.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501977103,501977103,src/wallet/sqlite.cpp
achow101,2020-10-08 19:57:16,Removed.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501977169,501977169,src/wallet/sqlite.cpp
hebasto,2020-10-11 04:16:51,"5fc97fa479136e61e8869b77ba731900c3233fcf, why not using `pkg config`:\n```suggestion\n    PKG_CHECK_MODULES([SQLITE], [sqlite3],, [AC_MSG_ERROR([sqlite3 not found.])])\n```\n?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502863113,502863113,configure.ac
hebasto,2020-10-11 04:33:35,"bd18fe80cacc25054c561aa8460752b59be0a78c\nnit: Spaces around `=` could improve readability (here and in other files in this commit):\n```suggestion\nbdb_packages = bdb\nsqlite_packages = sqlite\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502864150,502864150,depends/packages/packages.mk
hebasto,2020-10-11 04:51:26,"bd18fe80cacc25054c561aa8460752b59be0a78c\nAs `libsqlite3.la` is the only target, `bin` and `share` subdirs are not created:\n```suggestion\n  rm lib/*.la\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502865334,502865334,depends/packages/sqlite.mk
hebasto,2020-10-11 04:55:01,"05c427a0654d2fe0907d8a755e74a2e2d0a51f07\nnit: Could make the wording consistent with other OS build docs (e.g., `doc/build-unix.md`):\n```suggestion\nIn this case there is no dependency on Berkeley DB 4.8 and SQLite3.\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502865572,502865572,doc/build-osx.md
hebasto,2020-10-11 04:59:44,"05c427a0654d2fe0907d8a755e74a2e2d0a51f07\nnit: As this doc is for human, I'd prefer:\n```suggestion\n    sudo apt install libsqlite3-dev\n```\n\nFor Fedora the following works:\n```\nsudo dnf install sqlite-devel\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502865841,502865841,doc/build-unix.md
hebasto,2020-10-11 05:01:51,"05c427a0654d2fe0907d8a755e74a2e2d0a51f07\n1. Mind keeping the lexicographic order?\n\n2. Why minimum version is not mentioned?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502866026,502866026,doc/dependencies.md
hebasto,2020-10-11 05:12:21,"05c427a0654d2fe0907d8a755e74a2e2d0a51f07\n```suggestion\n`./`         | `wallet.dat`      | Personal wallet with keys and transactions. May be either a Berkeley DB or SQLite3 database file\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502866675,502866675,doc/files.md
hebasto,2020-10-11 05:21:31,"011fa1e2657d624593bb7f23f697a741f7b51577, typo:\n```suggestion\n            LogPrintf(""SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly committed or aborted\n"");\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502867317,502867317,src/wallet/sqlite.cpp
hebasto,2020-10-11 05:39:08,"1a2eec03f0dc7731d5c199a97db148534ce174a2\n```suggestion\n    const bool m_mock{false};\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502868538,502868538,src/wallet/sqlite.h
hebasto,2020-10-11 05:41:24,"1a2eec03f0dc7731d5c199a97db148534ce174a2, nit -- style:\n```suggestion\n    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock = false);\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502868724,502868724,src/wallet/sqlite.h
hebasto,2020-10-11 05:42:23,"1a2eec03f0dc7731d5c199a97db148534ce174a2, nit -- style:\n```suggestion\n    bool Rewrite(const char* skip = nullptr) override;\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502868799,502868799,src/wallet/sqlite.h
hebasto,2020-10-11 05:45:58,"1a2eec03f0dc7731d5c199a97db148534ce174a2\n```suggestion\n    const bool m_read_only{false};\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502869040,502869040,src/wallet/sqlite.h
hebasto,2020-10-11 05:46:44,"1a2eec03f0dc7731d5c199a97db148534ce174a2, nit -- style:\n```suggestion\n    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502869093,502869093,src/wallet/sqlite.h
hebasto,2020-10-11 06:04:29,"1a2eec03f0dc7731d5c199a97db148534ce174a2, `clang-format` suggests\n```suggestion\nSQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502870437,502870437,src/wallet/sqlite.cpp
hebasto,2020-10-11 06:26:01,"70a2c658549c8a0caa3e58dcc7894d2bb8872cd5\n```suggestion\n    void Cleanup() noexcept;\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502872200,502872200,src/wallet/sqlite.h
hebasto,2020-10-11 06:26:40,"70a2c658549c8a0caa3e58dcc7894d2bb8872cd5\n```suggestion\nvoid SQLiteDatabase::Cleanup() noexcept\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502872272,502872272,src/wallet/sqlite.cpp
hebasto,2020-10-11 06:35:40,"70a2c658549c8a0caa3e58dcc7894d2bb8872cd5\nnit: Maybe use (here and in other commits) the new `Assert` (#19277,  #19491)?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502873114,502873114,src/wallet/sqlite.cpp
hebasto,2020-10-11 06:41:41,"6720df53bd5d4e551c101743c4050bd0c7682238\n`Assert(m_db);` ?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502873626,502873626,src/wallet/sqlite.cpp
hebasto,2020-10-11 06:45:55,"6720df53bd5d4e551c101743c4050bd0c7682238\nnit: Mind moving the `table_exists` declaration 9 lines down to its first usage?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502874011,502874011,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:02:03,"83952c59940e4b03bf63b48c0f83b460f988d4be\nWhy not declare all strings as `const char* const` and drop all of the following `c_str` conversions?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502875497,502875497,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:06:01,"8eee65c46d3b897fca9e07b092f3714e3bcdb79e\n```suggestion\n        LogPrintf(""%s: Unable to begin backup: %s\n"", __func__, sqlite3_errmsg(m_db));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502875831,502875831,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:07:52,"8eee65c46d3b897fca9e07b092f3714e3bcdb79e\n```suggestion\n        LogPrintf(""%s: Unable to backup: %s\n"", __func__, sqlite3_errstr(res));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502875988,502875988,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:14:32,"c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d, nit\n```suggestion\n    const fs::path file = path / DATABASE_FILENAME;\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502876560,502876560,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:19:42,"c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d\n```suggestion\n        if (error.empty()) {\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502877051,502877051,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:21:16,"c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d\n\nIs it needed to include `\n` into translatable string?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502877212,502877212,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:30:36,"c3aeda3d2f7d7b34b8a35ccea478161b0ca2c80d\n```suggestion\n        const char* msg = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878069,502878069,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:33:39,"14b81e521c310cb616b7920b5625b704ef1e1899\n```suggestion\n    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878352,502878352,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:34:54,"293bdfcdc1825e1b288ee09584cf26979a4d5900\n```suggestion\n    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878458,502878458,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:35:29,"293bdfcdc1825e1b288ee09584cf26979a4d5900\n```suggestion\n    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502878520,502878520,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:44:36,"c4b6cf7ed72490df24a2e2d28d947002f3e6ef16\n```suggestion\n    const fs::path file = path / DATABASE_FILENAME;\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502879435,502879435,src/wallet/sqlite.cpp
hebasto,2020-10-11 07:53:04,"c4b6cf7ed72490df24a2e2d28d947002f3e6ef16\n\nDrop `Untranslated`? I don't think we should mimic the code around here.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502880353,502880353,src/wallet/walletdb.cpp
hebasto,2020-10-11 08:02:01,"c4b6cf7ed72490df24a2e2d28d947002f3e6ef16\n\nWe could skip access to `format` value:\n```suggestion\n    if (format && options.require_format && format != options.require_format) {\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502881270,502881270,src/wallet/walletdb.cpp
hebasto,2020-10-11 08:10:22,"5f17c73e8b890c92d2dc74e0e3bb34d217bc5160\n\nWhy add another declaration instead of `#include <wallet/sqlite.h>`?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882199,502882199,src/wallet/walletutil.cpp
hebasto,2020-10-11 08:15:33,"87e2d29baca9d08e90ed401bf360b9b7e866c62c\n```suggestion\n    uint32_t app_id = static_cast<uint32_t>(sqlite3_column_int(app_id_stmt, 0));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882710,502882710,src/wallet/sqlite.cpp
hebasto,2020-10-11 08:18:22,"87e2d29baca9d08e90ed401bf360b9b7e866c62c\n```suggestion\n        std::string set_app_id = strprintf(""PRAGMA application_id = %d"", static_cast<int32_t>(app_id));\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502882955,502882955,src/wallet/sqlite.cpp
hebasto,2020-10-11 08:24:55,"10ceb039e8361d91a9169da8f68872ad4b564403\n```suggestion\nstatic constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502883560,502883560,src/wallet/sqlite.cpp
hebasto,2020-10-11 08:29:35,"1a2eec03f0dc7731d5c199a97db148534ce174a2\n```suggestion\nstatic const char* const DATABASE_FILENAME = ""wallet.dat"";\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502884016,502884016,src/wallet/sqlite.cpp
meshcollider,2020-10-11 08:38:19,nit: names here are not per style guideline and do not match the .cpp file,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502884857,502884857,src/wallet/sqlite.h
MarcoFalke,2020-10-11 09:13:30,"```\nmsbuild /p:TrackFileAccess=false build_msvc\bitcoin.sln /m /v:q /nologo\nC:\projects\bitcoin\src\wallet\sqlite.cpp(65,40): error C2220: the following warning is treated as an error [C:\projects\bitcoin\build_msvc\libbitcoin_wallet\libbitcoin_wallet.vcxproj]\nC:\projects\bitcoin\src\wallet\sqlite.cpp(65,40): warning C4101: 'e': unreferenced local variable [C:\projects\bitcoin\build_msvc\lib",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502888684,502888684,src/wallet/sqlite.cpp
meshcollider,2020-10-11 09:16:56,nit: fullfsync,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502889094,502889094,src/wallet/sqlite.cpp
meshcollider,2020-10-11 09:36:11,I thought the database was never in read-only mode after a successful opening?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502891009,502891009,src/wallet/sqlite.cpp
hebasto,2020-10-11 09:38:53,"This could be worked around with the following patch:\n```diff\n--- a/build_msvc/common.init.vcxproj\n+++ b/build_msvc/common.init.vcxproj\n@@ -117,7 +117,7 @@\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <AdditionalOptions>/utf-8 /std:c++17 %(AdditionalOptions)</AdditionalOptions>\n-      <DisableSpecificWarnings>4018;4221;424",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502891275,502891275,src/wallet/sqlite.cpp
meshcollider,2020-10-11 09:53:21,"Comment is a little ambiguously worded, IMO better to say ""Specifying -1 causes all pages to be copied """,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502892802,502892802,src/wallet/sqlite.cpp
sipsorcery,2020-10-11 10:50:33,"What's the reason to not get rid of the unused variable `e`?\n\n`catch (const std::runtime_error&) {\n...\n}`",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502898808,502898808,src/wallet/sqlite.cpp
achow101,2020-10-11 15:28:26,Meh. The convention in all of these files is no spaces around `=`.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502930230,502930230,depends/packages/packages.mk
achow101,2020-10-11 15:28:54,The minimum version is not known.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502930271,502930271,doc/dependencies.md
achow101,2020-10-11 15:33:04,That does the opposite of what we want.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502930770,502930770,src/wallet/sqlite.cpp
achow101,2020-10-11 15:35:02,I think that is unnecessary.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931000,502931000,src/wallet/sqlite.cpp
achow101,2020-10-11 15:42:48,I think it is clearer this way.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931868,502931868,src/wallet/walletdb.cpp
achow101,2020-10-11 15:42:55,This should be translated? Why not mimic the code?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931886,502931886,src/wallet/walletdb.cpp
achow101,2020-10-11 15:43:04,To avoid a circular dependency.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502931905,502931905,src/wallet/walletutil.cpp
hebasto,2020-10-11 15:46:28,"> To avoid a circular dependency.\n\nWhich one? `test/lint/lint-circular-dependencies.sh` is green for me.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502932283,502932283,src/wallet/walletutil.cpp
hebasto,2020-10-11 15:48:07,"> This should be translated?\n\nI think so. And other user-faced messages in this function too, but this is out of this PR scope.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502932464,502932464,src/wallet/walletdb.cpp
hebasto,2020-10-11 15:51:14,Is different approach to two comparing variables of the same type really clearer? Up to you :),https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502932837,502932837,src/wallet/walletdb.cpp
hebasto,2020-10-11 15:54:52,"Probably, it would be better to leave it as is for now, and apply changes in the follow up pull.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502933286,502933286,src/wallet/walletdb.cpp
achow101,2020-10-11 16:10:03,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935045,502935045,configure.ac
achow101,2020-10-11 16:10:11,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935069,502935069,depends/packages/sqlite.mk
achow101,2020-10-11 16:10:16,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935085,502935085,doc/build-osx.md
achow101,2020-10-11 16:10:20,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935098,502935098,doc/build-unix.md
achow101,2020-10-11 16:10:24,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935119,502935119,doc/files.md
achow101,2020-10-11 16:10:31,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935130,502935130,src/wallet/sqlite.cpp
achow101,2020-10-11 16:10:36,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935138,502935138,src/wallet/sqlite.h
achow101,2020-10-11 16:10:41,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935157,502935157,src/wallet/sqlite.h
achow101,2020-10-11 16:10:45,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935164,502935164,src/wallet/sqlite.h
achow101,2020-10-11 16:10:56,Removed this variable.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935196,502935196,src/wallet/sqlite.h
achow101,2020-10-11 16:11:00,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935211,502935211,src/wallet/sqlite.h
achow101,2020-10-11 16:11:05,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935218,502935218,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:09,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935224,502935224,src/wallet/sqlite.h
achow101,2020-10-11 16:11:13,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935227,502935227,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:20,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935239,502935239,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:28,Inlined all of these.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935247,502935247,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:32,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935253,502935253,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:39,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935273,502935273,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:44,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935290,502935290,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:50,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935301,502935301,src/wallet/sqlite.cpp
achow101,2020-10-11 16:11:54,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935320,502935320,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:03,"No, made that `Untranslated`",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935327,502935327,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:08,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935329,502935329,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:12,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935334,502935334,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:17,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935349,502935349,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:22,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935361,502935361,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:27,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935369,502935369,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:36,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935380,502935380,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:41,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935390,502935390,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:45,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935401,502935401,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:49,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935403,502935403,src/wallet/sqlite.cpp
achow101,2020-10-11 16:12:59,Removed `e`,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935420,502935420,src/wallet/sqlite.cpp
achow101,2020-10-11 16:13:08,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935427,502935427,src/wallet/sqlite.cpp
achow101,2020-10-11 16:13:35,Removed `m_read_only` and these checks.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935464,502935464,src/wallet/sqlite.cpp
achow101,2020-10-11 16:13:42,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935472,502935472,src/wallet/sqlite.cpp
achow101,2020-10-11 16:14:31,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502935535,502935535,src/wallet/sqlite.h
achow101,2020-10-11 16:28:08,"Oh right, they're both `Optional`. Changed.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937015,502937015,src/wallet/walletdb.cpp
achow101,2020-10-11 16:32:45,I think there was one in a previous iteration of this PR. But I'm going to leave it as is for now.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937474,502937474,src/wallet/walletutil.cpp
hebasto,2020-10-11 16:34:56,Not yet :),https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937660,502937660,src/wallet/sqlite.cpp
hebasto,2020-10-11 16:35:48,"piconit: a missed space\n```suggestion\n        if ((res = sqlite3_prepare_v2(m_database.m_db, ""insert or replace into main values(?, ?)"", -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937766,502937766,src/wallet/sqlite.cpp
achow101,2020-10-11 16:37:55,Oops.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502937951,502937951,src/wallet/sqlite.cpp
achow101,2020-10-11 16:39:14,Fixed,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502938062,502938062,src/wallet/sqlite.cpp
promag,2020-10-11 22:04:18,"nit, extra `;`.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502971698,502971698,src/wallet/sqlite.h
achow101,2020-10-11 22:44:09,Fixed.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r502975954,502975954,src/wallet/sqlite.h
hebasto,2020-10-12 07:53:44,"3eff1f9bec5b92e3cb1e7fa5f0c7e0163b4f4ce2, pico-nit: It's odd not seeing a space after `,`\n```suggestion\n    PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17],, [AC_MSG_ERROR([sqlite3 not found.])])\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503103687,503103687,configure.ac
hebasto,2020-10-12 07:55:48,"f3b8ee19a09e676762d0584572aee927c4ecaa89, nit: both flags are redundant\n```suggestion\n  rm lib/*.la\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503104847,503104847,depends/packages/sqlite.mk
hebasto,2020-10-12 07:57:41,"61079ce5f2ddd22d10edf500c3852fe04eedc912\n```suggestion\n| SQLite 3 | [3.32.1](https://sqlite.org/download.html) | [3.7.17](https://github.com/bitcoin/bitcoin/pull/19077) |  |  |  |\n```",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503105960,503105960,doc/dependencies.md
hebasto,2020-10-12 10:06:55,"f4fd2218d705ed08f8554f9cd1946c087335d2f2\n\nThe [F_FULLFSYNC syncing method](https://sqlite.org/pragma.html#pragma_fullfsync) is supported by macOS only. Do we really want to implement plarform-dependant behavior of a wallet database?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503186271,503186271,src/wallet/sqlite.cpp
hebasto,2020-10-12 11:17:44,"f4fd2218d705ed08f8554f9cd1946c087335d2f2\n\nAccording to SQLite [docs](https://sqlite.org/lockingv3.html#transaction_control) the actual moment of `EXCLUSIVE` lock acquiring is a bit vague:\n> Note that the BEGIN command does not acquire any locks on the database. ... No EXCLUSIVE lock is acquired until either the memory cache fills up and must be spilled to disk or until the transaction commit",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503224576,503224576,src/wallet/sqlite.cpp
achow101,2020-10-12 14:54:06,"fullfsync ensures that the data is written to disk on macOS, so we definitely need it.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503351332,503351332,src/wallet/sqlite.cpp
achow101,2020-10-12 14:57:21,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503353490,503353490,configure.ac
achow101,2020-10-12 14:57:26,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503353549,503353549,depends/packages/sqlite.mk
achow101,2020-10-12 14:57:30,Done,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503353599,503353599,doc/dependencies.md
hebasto,2020-10-12 15:18:12,"554dac60f160df08f94497a78e3e7a30217a5850, nit: is `else` required here\n```suggestion\n        if (ret == SQLITE_DONE) break;\n        if (ret != SQLITE_ROW) {\n```\n?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503366280,503366280,src/wallet/sqlite.cpp
achow101,2020-10-12 15:23:23,I think that `ret != SQLITE_ROW` is a sufficient catch-all. We only want to special case `SQLITE_DONE`.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503369412,503369412,src/wallet/sqlite.cpp
hebasto,2020-10-12 15:28:10,I agree with you. Why do we need `else` word for that?,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503372405,503372405,src/wallet/sqlite.cpp
achow101,2020-10-12 15:40:29,"I guess it isn't strictly necessary, but it doesn't really matter.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503379686,503379686,src/wallet/sqlite.cpp
hebasto,2020-10-12 15:41:44,You are right again :),https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503380408,503380408,src/wallet/sqlite.cpp
meshcollider,2020-10-12 21:31:18,nit: capitalisation of SQL statement,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503541979,503541979,src/wallet/sqlite.cpp
promag,2020-10-12 22:17:29,"40b15923da624272830ab51ac30be892b9d5712b\n\nIt was already suggested in https://github.com/bitcoin/bitcoin/pull/19077#pullrequestreview-497108156\n\n> Could add a dedicated statement for HasKey, see https://stackoverflow.com/a/9756276/1978589. Are you going to add any index to main table?\n\nAnyway it could also log ""Unable to bind value to statement"" when binding fails.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503561815,503561815,src/wallet/sqlite.cpp
Sjors,2020-10-13 12:37:31,"It looks like most pragmas are not persistent: http://sqlite.1065341.n5.nabble.com/Which-pragmas-are-persistent-td95287.html (I tested that `application_id` is persisted, but `fullfsync` is `0`) ",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r503914986,503914986,src/wallet/sqlite.cpp
achow101,2020-10-13 15:54:48,Changed.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504067803,504067803,src/wallet/sqlite.cpp
achow101,2020-10-13 15:54:54,Fixed,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504067878,504067878,src/wallet/sqlite.cpp
achow101,2020-10-13 15:55:12,Moved this to always be run right after the lock is acquired.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504068161,504068161,src/wallet/sqlite.cpp
ryanofsky,2020-10-14 16:15:16,"In commit ""Include sqlite3 in documentation"" (6c6639ac9f6e1677da066cf809f9e3fa4d2e7c32)\n\nIf need to update, there are two corrections that could be made:\n\n- Line 69 ""Wallets are Berkeley DB (BDB) databases"" is no longer true\n- Line 76 ""Wallet lock file"" should say ""BDB wallet lock file""",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r504805234,504805234,doc/files.md
hebasto,2020-10-15 08:42:38,Addressed in #20152.,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r505351038,505351038,doc/files.md
MarcoFalke,2020-11-05 17:21:05,"Does this return path need to set `status = DatabaseStatus::SUCCESS;`?\n\nI am asking because gcc seems to generate binaries that will inject false positives into valgrind. I haven't found a bug in the code.\n\nThough, the bdb version also seems to set `::SUCCESS`, so it might be appropriate here as well?",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518223118,518223118,src/wallet/sqlite.cpp
achow101,2020-11-05 17:33:45,"I suppose it should, but istm it shouldn't matter. I'm pretty sure we never check `status` if there isn't a failure.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518231532,518231532,src/wallet/sqlite.cpp
MarcoFalke,2020-11-05 17:39:52,"Jup, we don't check `status` if there is no failure. It is just a style question.",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518236788,518236788,src/wallet/sqlite.cpp
MarcoFalke,2020-11-05 19:38:56,"Also happening with clang, so I'll try to fix this",https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518317828,518317828,src/wallet/sqlite.cpp
MarcoFalke,2020-11-05 19:43:15,#20324 ,https://github.com/bitcoin/bitcoin/pull/19077#discussion_r518320258,518320258,src/wallet/sqlite.cpp
