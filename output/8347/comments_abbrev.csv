petertodd,2016-07-17T00:49:25Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233158950,233158950,
NicolasDorier,2016-07-17T03:21:30Z,"ACK 6f3d616 (I thought there was a subtle difference between `const CBlockIndex* pindexPrev` and `CBlockIndex* const pindexPrev` that only C Jedi could understand, but [it is fine](http://stackoverflow.com/questions/1143262/what-is-the-difference-between-const-int-const-int-const-and-int-const))\n",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233162939,233162939,
sipa,2016-07-17T06:17:23Z,"@NicolasDorier: no, the first is a pointer to a const CBlockIndex. The second is a const pointer to a non-const CBlockIndex.\n",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233167358,233167358,
sipa,2016-07-17T06:18:29Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233167385,233167385,
dcousens,2016-07-17T06:21:51Z,utACK 6f3d616\n,https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233167470,233167470,
paveljanik,2016-07-17T07:13:57Z,ACK https://github.com/bitcoin/bitcoin/pull/8347/commits/6f3d616dc8d6840c2293ffadd8cc3209f1100193\n,https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233168955,233168955,
jtimon,2016-07-17T11:56:12Z,"> @NicolasDorier: no, the first is a pointer to a const CBlockIndex. The second is a const pointer to a non-const CBlockIndex.\n\nActually, I don't think the const after does anything at all. Note that the declaration of ContextualCheckBlock didn't had any const in it, but the definition had it. It seems to me that the const in the definition must be ignored or else it wouldn't link for not matchi",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233178454,233178454,
jonasschnelli,2016-07-17T12:04:19Z,ACK 6f3d616\n,https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233178770,233178770,
jtimon,2016-07-17T12:06:10Z,"Extending on the meta discussion, if I understand it correctly, it works like this:\n\n1) `const Object*` and `const Object&` are equivalent: you can neither  change the state of the object nor change the address in memory the pointer is pointing to.\n\n2) With `Object&` you can change the state of the object, but not the pointer.\n\n3) With `Object*` you can both change the state of the object an",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233178847,233178847,
instagibbs,2016-07-18T14:03:38Z,"@jtimon (possibly misunderstanding your point) const Object\* is only const on the object, not the pointer itself. The pointer itself can be modified.\n\nthat said, utACK https://github.com/bitcoin/bitcoin/commit/6f3d616dc8d6840c2293ffadd8cc3209f1100193\n",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233337564,233337564,
jtimon,2016-07-18T14:40:12Z,"@instagibbs so in my little example, ptr will be &B after calling the function? https://0bin.net/paste/qfBVja+dQAt-R56h#BbZHm3Ynf3rkl01YLVU+tgPKggTbeVMvarzFk-LhFDN\n",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233348398,233348398,
sipa,2016-07-18T14:49:29Z,"@jtimon You have two variables named ptr there. A global one, and one inside testFunction. When testFunction is called, its argument (ptr) is evaluated (resulting in &A), and the _value_ &A is passed to the function, which binds it to the parameter ptr. Executing `ptr = &B` modifies the local variable ptr, but not the global one (as the argument is passed by value, not by reference).\n",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233351312,233351312,
jtimon,2016-07-20T19:44:57Z,"@sipa Right, which is what I was saying to @instagibbs , that the pointer would not be modified with const. But if you s/const Object\* ptr/Object\* ptr/ then the local ptr will be changed. Right?\nIs my comment https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-233178847 incorrect ?\n",https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-234060071,234060071,
laanwj,2016-07-21T12:31:20Z,utACK 6f3d616\n,https://github.com/bitcoin/bitcoin/pull/8347#issuecomment-234239361,234239361,
