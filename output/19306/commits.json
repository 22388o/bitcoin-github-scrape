[
  {
    "sha": "8f1767d115eca870cb80f9aab4e1d2e3da32620e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjE3NjdkMTE1ZWNhODcwY2I4MGY5YWFiNGUxZDJlM2RhMzI2MjBl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-15T08:38:34Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:33:58Z"
      },
      "message": "refactor: Prevent double lock in MempoolToJSON()",
      "tree": {
        "sha": "8e5f404a0fc6beba9f59b78b351ab08766bc2c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e5f404a0fc6beba9f59b78b351ab08766bc2c2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f1767d115eca870cb80f9aab4e1d2e3da32620e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1zYACgkQQQEIES5+\nqB/hJA/+LiH4Au20SAvdzNyfPqEC7G1WQ6uNvFuL+/5B5jhnY47rLrRPM+EmId+r\nQy/DcPLne/VBiCPVlKvSCzqRvYyY9Q7EpU+xwkHos/BcTSKHs6byyDdzs32YeJOm\nYjCnAq3BMzSB3tNSUqHbntoNQW2585Y2MUrDTQ5X9ulPhnDYHHtJZnPnJfIS/HeJ\nm5KH4O3XbOFYV0OlKHbe2Xu2l2iHR43xYbn1l61keWmVbgSgJ335wM+o201ovyu+\n2+8C5XD11F3WSYRJPhNsXP9MDMN3yI/n9G7SZe2tNMu0wfYw2ajwxrsRovOHYcG+\nnkOD7juRjVQZGSpr2aafWsuPFK8guzvyF7ZAlFeUSYyebmCD4N5rrhSaSY9Jim3a\nQxlmICcgWg6WCb3L4mMpHLBwh6qT1v3b9vlTB/cWmsOaxGrtmK/vU7Atg97nWSuR\n4WtGfBLo+6ZrVn39uqmyCggypKvq3IoWR3oxxcfw5GOZd7sJtTEOo5TZ15rGO1Cm\nVxQwDALzKS34aQOr4DHTa15//m6X8S4CBmt7Jl4QP6Z2OCN9x000q2uhNvQ4bloY\nzdPSPLuNGKRrMpLLE7nBEapvYOii8SFKYdTcgp7ES5uqQLVQLZyUw4XIsNdirpFU\n3jCxKga8RrQM9c2oxwGGF0fXM5xnx4Y1QAq6A40dkocn4vBJ92M=\n=mW4t\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e5f404a0fc6beba9f59b78b351ab08766bc2c2f\nparent 68d1f1698f50f9f3c848d988b6f89fe981cc662c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592210314 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395638 +0300\n\nrefactor: Prevent double lock in MempoolToJSON()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1767d115eca870cb80f9aab4e1d2e3da32620e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f1767d115eca870cb80f9aab4e1d2e3da32620e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1767d115eca870cb80f9aab4e1d2e3da32620e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68d1f1698f50f9f3c848d988b6f89fe981cc662c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d1f1698f50f9f3c848d988b6f89fe981cc662c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68d1f1698f50f9f3c848d988b6f89fe981cc662c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 21,
      "deletions": 17
    },
    "files": [
      {
        "sha": "9ddd7307298814e96b2910021960296cff70107a",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=8f1767d115eca870cb80f9aab4e1d2e3da32620e",
        "patch": "@@ -18,21 +18,23 @@ static void AddTx(const CTransactionRef& tx, const CAmount& fee, CTxMemPool& poo\n static void RpcMempool(benchmark::Bench& bench)\n {\n     CTxMemPool pool;\n-    LOCK2(cs_main, pool.cs);\n-\n-    for (int i = 0; i < 1000; ++i) {\n-        CMutableTransaction tx = CMutableTransaction();\n-        tx.vin.resize(1);\n-        tx.vin[0].scriptSig = CScript() << OP_1;\n-        tx.vin[0].scriptWitness.stack.push_back({1});\n-        tx.vout.resize(1);\n-        tx.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-        tx.vout[0].nValue = i;\n-        const CTransactionRef tx_r{MakeTransactionRef(tx)};\n-        AddTx(tx_r, /* fee */ i, pool);\n+    {\n+        LOCK2(cs_main, pool.cs);\n+        for (int i = 0; i < 1000; ++i) {\n+            CMutableTransaction tx = CMutableTransaction();\n+            tx.vin.resize(1);\n+            tx.vin[0].scriptSig = CScript() << OP_1;\n+            tx.vin[0].scriptWitness.stack.push_back({1});\n+            tx.vout.resize(1);\n+            tx.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+            tx.vout[0].nValue = i;\n+            const CTransactionRef tx_r{MakeTransactionRef(tx)};\n+            AddTx(tx_r, /* fee */ i, pool);\n+        }\n     }\n \n     bench.run([&] {\n+        LOCK(pool.cs);\n         (void)MempoolToJSON(pool, /*verbose*/ true);\n     });\n }"
      },
      {
        "sha": "f0a6bb22d5345b4042ea22f28b8332eeb893b377",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=8f1767d115eca870cb80f9aab4e1d2e3da32620e",
        "patch": "@@ -362,7 +362,7 @@ static bool rest_mempool_contents(const util::Ref& context, HTTPRequest* req, co\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolObject = MempoolToJSON(*mempool, true);\n+        UniValue mempoolObject = WITH_LOCK(mempool->cs, return MempoolToJSON(*mempool, true));\n \n         std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "sha": "29f53fd5cef657fe06b89a8a05c0bbf40441a243",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8f1767d115eca870cb80f9aab4e1d2e3da32620e",
        "patch": "@@ -485,8 +485,8 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n \n UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n {\n+    AssertLockHeld(pool.cs);\n     if (verbose) {\n-        LOCK(pool.cs);\n         UniValue o(UniValue::VOBJ);\n         for (const CTxMemPoolEntry& e : pool.mapTx) {\n             const uint256& hash = e.GetTx().GetHash();\n@@ -540,7 +540,9 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return MempoolToJSON(EnsureMemPool(request.context), fVerbose);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    LOCK(mempool.cs);\n+    return MempoolToJSON(mempool, fVerbose);\n }\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)"
      },
      {
        "sha": "c03592009e3611b1f0e7b500d453d756f15c55df",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1767d115eca870cb80f9aab4e1d2e3da32620e/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=8f1767d115eca870cb80f9aab4e1d2e3da32620e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <amount.h>\n #include <sync.h>\n+#include <txmempool.h>\n \n #include <stdint.h>\n #include <vector>\n@@ -15,7 +16,6 @@ extern RecursiveMutex cs_main;\n \n class CBlock;\n class CBlockIndex;\n-class CTxMemPool;\n class ChainstateManager;\n class UniValue;\n struct NodeContext;\n@@ -43,7 +43,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n \n /** Mempool to JSON */\n-UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose = false);\n+UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose = false) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n /** Block header to JSON */\n UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex) LOCKS_EXCLUDED(cs_main);"
      }
    ]
  },
  {
    "sha": "c903bf73895a375a3418be8f446905e0bb3e24e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTAzYmY3Mzg5NWEzNzVhMzQxOGJlOGY0NDY5MDVlMGJiM2UyNGUw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-04T12:02:38Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:04Z"
      },
      "message": "refactor: Add thread context to AcceptToMemoryPool() call sites",
      "tree": {
        "sha": "7c1e9451c231790f582907a0a4becf62a05a0a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c1e9451c231790f582907a0a4becf62a05a0a11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c903bf73895a375a3418be8f446905e0bb3e24e0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1zwACgkQQQEIES5+\nqB/apA/+KIF7KroD9aUUHmqTKBWtE+Omsv0/fWOILSzpuxYBHTfGt/dSmDXEP6fi\nFA9aChm6N5xVG5DzEf8g3Q/Hww07GNrKu2FzMKwfZfGaxbRyfq2ssMyKJsBKyx/R\nW8C6rTB2Yv6v0tRRRR5Dwb7/yPjPTtE37LOfOf/u30WR5+ODgcHnxdjSJ0Pg+KyI\nNM2CgTL2qmG7olTXAUmnOOB8ll5INRLkh12z0jzJ8hB94UVo0uSfS4/zk1CYuppH\nql0bR1+dV6geN+RxIlOIeFnV9rIR1pUMP452sjIPqkAlY4WGYrbTP+bY9ARPyOmY\nZvbR8ncS5F4qS7ro4wMcCTgRGqiSiM2pEOGmMfa4VDyhZ3aVJDUysatCXwA7ibmK\ndhBGmWMnNjhR055+oPYkNCiFiyVu623Eip4ocX/F8AcClP6FCTpaODBsXz5+5+3U\npIQMgpK+naJF+GEVh9uc+Y1DfmwyWouv2r2LEGav2IkVFndHfWlGypOmNw3Y16IW\n5IrFSrXFzCBJJTSjInrurJ17FSueFkMq0RRYtiC2ye0Cl0KSy4VT6h8r8oik8Rad\n0fDwEGOdlkDLFQF9dgHOLwjJ3XnrP+H63E73X423HddqwmbQlcW9WsJdTT5vzp9E\nG/jf01e/FKJJ+MsF9QQhOw3n/GX12uq5bCh3ovKP4rZrHIJ/2/Q=\n=1Ium\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c1e9451c231790f582907a0a4becf62a05a0a11\nparent 8f1767d115eca870cb80f9aab4e1d2e3da32620e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599220958 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395644 +0300\n\nrefactor: Add thread context to AcceptToMemoryPool() call sites\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c903bf73895a375a3418be8f446905e0bb3e24e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c903bf73895a375a3418be8f446905e0bb3e24e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c903bf73895a375a3418be8f446905e0bb3e24e0/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f1767d115eca870cb80f9aab4e1d2e3da32620e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1767d115eca870cb80f9aab4e1d2e3da32620e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f1767d115eca870cb80f9aab4e1d2e3da32620e"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 57,
      "deletions": 19
    },
    "files": [
      {
        "sha": "cd9af9c5f04167fef3b95971a145582f1dd13642",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -5,13 +5,13 @@\n #include <bench/bench.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n+#include <sync.h>\n #include <test/util/mining.h>\n #include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <txmempool.h>\n #include <validation.h>\n \n-\n #include <vector>\n \n static void AssembleBlock(benchmark::Bench& bench)\n@@ -46,6 +46,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n     }\n     {\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n+        AssertLockNotHeld(test_setup.m_node.mempool->cs);\n \n         for (const auto& txr : txs) {\n             TxValidationState state;"
      },
      {
        "sha": "d49caa8fb49bc40fc7acbc82962ba7083ea31364",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -290,7 +290,7 @@ class ChainImpl : public Chain\n     bool broadcastTransaction(const CTransactionRef& tx,\n         const CAmount& max_tx_fee,\n         bool relay,\n-        std::string& err_string) override\n+        std::string& err_string) override EXCLUSIVE_LOCKS_REQUIRED(!m_node.mempool->cs)\n     {\n         const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures."
      },
      {
        "sha": "959b2c9339fbcbc31697ced2c041b713f6d5e556",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -2036,10 +2036,17 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n     return;\n }\n \n-void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+void static ProcessOrphanTx(\n+    CConnman& connman,\n+    CTxMemPool& mempool,\n+    std::set<uint256>& orphan_work_set,\n+    std::list<CTransactionRef>& removed_txn)\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans, !mempool.cs)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n+    AssertLockNotHeld(mempool.cs);\n+\n     std::set<NodeId> setMisbehaving;\n     bool done = false;\n     while (!done && !orphan_work_set.empty()) {\n@@ -2058,7 +2065,7 @@ void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uin\n         TxValidationState orphan_state;\n \n         if (setMisbehaving.count(fromPeer)) continue;\n-        if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+        if (::AcceptToMemoryPool(mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -2342,6 +2349,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                                          const std::chrono::microseconds time_received,\n                                          const CChainParams& chainparams, const std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockNotHeld(m_mempool.cs);\n+\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom.GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n     {\n@@ -3016,7 +3025,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n         if (!AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid), m_mempool) &&\n-            AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+            ::AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -3844,6 +3853,8 @@ bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n \n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockNotHeld(::mempool.cs);\n+\n     const CChainParams& chainparams = Params();\n     //\n     // Message format"
      },
      {
        "sha": "76fe0b64c3603ed4bc1801ab2e49495863ac353e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -9,14 +9,15 @@\n #include <consensus/params.h>\n #include <net.h>\n #include <sync.h>\n+#include <txmempool.h>\n #include <validationinterface.h>\n \n class CChainParams;\n-class CTxMemPool;\n class ChainstateManager;\n \n extern RecursiveMutex cs_main;\n extern RecursiveMutex g_cs_orphans;\n+extern CTxMemPool mempool;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n@@ -68,7 +69,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     * @param[in]   pfrom           The node which we have received messages from.\n     * @param[in]   interrupt       Interrupt condition for processing threads\n     */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n+    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override EXCLUSIVE_LOCKS_REQUIRED(!::mempool.cs);\n     /**\n     * Send queued protocol messages to be sent to a give node.\n     *\n@@ -89,7 +90,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     /** Process a single message from a peer. Public for fuzz testing */\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n                         const std::chrono::microseconds time_received, const CChainParams& chainparams,\n-                        const std::atomic<bool>& interruptMsgProc);\n+                        const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(!m_mempool.cs);\n \n private:\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip"
      },
      {
        "sha": "ce69ed7374a8531d7a8a8ce7246657965120e823",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -3,13 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <node/transaction.h>\n+\n #include <consensus/validation.h>\n #include <net.h>\n #include <net_processing.h>\n #include <node/context.h>\n+#include <sync.h>\n #include <validation.h>\n #include <validationinterface.h>\n-#include <node/transaction.h>\n \n #include <future>\n \n@@ -20,6 +22,8 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n     assert(node.connman);\n     assert(node.mempool);\n+    AssertLockNotHeld(node.mempool->cs);\n+\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n     bool callback_set = false;\n@@ -38,7 +42,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool. Submit it.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+        if (!::AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             err_string = state.ToString();\n             if (state.IsInvalid()) {"
      },
      {
        "sha": "b7aed664810217f338961c28712b14e66cf76b92",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -6,12 +6,12 @@\n #define BITCOIN_NODE_TRANSACTION_H\n \n #include <attributes.h>\n+#include <node/context.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n+#include <txmempool.h>\n #include <util/error.h>\n \n-struct NodeContext;\n-\n /** Maximum fee rate for sendrawtransaction and testmempoolaccept RPC calls.\n  * Also used by the GUI when broadcasting a completed PSBT.\n  * By default, a transaction with a fee rate higher than this will be rejected\n@@ -36,6 +36,12 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+NODISCARD TransactionError BroadcastTransaction(\n+    NodeContext& node,\n+    CTransactionRef tx,\n+    std::string& err_string,\n+    const CAmount& max_tx_fee,\n+    bool relay,\n+    bool wait_callback) EXCLUSIVE_LOCKS_REQUIRED(!node.mempool->cs);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "82dd0c8cfc212107be2c023af69fae8580fee093",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -101,6 +101,7 @@ void PSBTOperationsDialog::broadcastTransaction()\n \n     CTransactionRef tx = MakeTransactionRef(mtx);\n     std::string err_string;\n+    AssertLockNotHeld(m_client_model->node().context()->mempool->cs);\n     TransactionError error = BroadcastTransaction(\n         *m_client_model->node().context(), tx, err_string, DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK(), /* relay */ true, /* await_callback */ false);\n "
      },
      {
        "sha": "4a50334b4da6adf1cde36eca0702f12c6e0b8cff",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -22,6 +22,7 @@\n #include <interfaces/node.h>\n #include <node/ui_interface.h>\n #include <psbt.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n \n #include <QAction>"
      },
      {
        "sha": "16d7948f446866462aff9b9d163c017ca5d0119f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -27,6 +27,8 @@\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n+#include <sync.h>\n+#include <txmempool.h>\n #include <uint256.h>\n #include <util/bip32.h>\n #include <util/moneystr.h>\n@@ -35,7 +37,6 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n-\n #include <numeric>\n #include <stdint.h>\n \n@@ -847,6 +848,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n     NodeContext& node = EnsureNodeContext(request.context);\n+    AssertLockNotHeld(node.mempool->cs);\n     const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n@@ -926,7 +928,8 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     bool test_accept_res;\n     {\n         LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n+        AssertLockNotHeld(mempool.cs);\n+        test_accept_res = ::AcceptToMemoryPool(mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);"
      },
      {
        "sha": "727f6ae9503fe3dc0dd00f4aa5d39d1fdfcef40a",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -5,7 +5,9 @@\n #include <consensus/validation.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n+#include <sync.h>\n #include <test/util/setup_common.h>\n+#include <txmempool.h>\n #include <validation.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -33,12 +35,13 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     TxValidationState state;\n \n     LOCK(cs_main);\n+    AssertLockNotHeld(m_node.mempool->cs);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n \n     BOOST_CHECK_EQUAL(\n             false,\n-            AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n+            ::AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n                 nullptr /* plTxnReplaced */,\n                 true /* bypass_limits */,\n                 0 /* nAbsurdFee */));"
      },
      {
        "sha": "4a8a03fe9c81d400fde6eb29e900bec02232d701",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -7,6 +7,7 @@\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n+#include <sync.h>\n #include <test/util/setup_common.h>\n #include <txmempool.h>\n #include <validation.h>\n@@ -27,9 +28,10 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     const auto ToMemPool = [this](const CMutableTransaction& tx) {\n         LOCK(cs_main);\n+        AssertLockNotHeld(m_node.mempool->cs);\n \n         TxValidationState state;\n-        return AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n+        return ::AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n             nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n     };\n "
      },
      {
        "sha": "ff8b4e5ee4e8f805347cff24b472a064e137d53c",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -11,7 +11,9 @@\n #include <pow.h>\n #include <random.h>\n #include <script/standard.h>\n+#include <sync.h>\n #include <test/util/setup_common.h>\n+#include <txmempool.h>\n #include <util/time.h>\n #include <validation.h>\n #include <validationinterface.h>\n@@ -283,10 +285,12 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n         // Add the txs to the tx pool\n         {\n             LOCK(cs_main);\n+            AssertLockNotHeld(m_node.mempool->cs);\n+\n             TxValidationState state;\n             std::list<CTransactionRef> plTxnReplaced;\n             for (const auto& tx : txs) {\n-                BOOST_REQUIRE(AcceptToMemoryPool(\n+                BOOST_REQUIRE(::AcceptToMemoryPool(\n                     *m_node.mempool,\n                     state,\n                     tx,"
      },
      {
        "sha": "d0945708bd3a8161bcce60b0eb6710e79dbebdb3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c903bf73895a375a3418be8f446905e0bb3e24e0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c903bf73895a375a3418be8f446905e0bb3e24e0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c903bf73895a375a3418be8f446905e0bb3e24e0",
        "patch": "@@ -386,7 +386,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n         // ignore validation errors in resurrected transactions\n         TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n+            !::AcceptToMemoryPool(mempool, stateDummy, *it,\n                                 nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n@@ -5086,6 +5086,7 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n+                AssertLockNotHeld(pool.cs);\n                 AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n                                            false /* test_accept */);"
      }
    ]
  },
  {
    "sha": "7878cfc4afdfeaf7455277e0baffac4e8ced1964",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODc4Y2ZjNGFmZGZlYWY3NDU1Mjc3ZTBiYWZmYWM0ZThjZWQxOTY0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-04T12:17:49Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:04Z"
      },
      "message": "refactor: Prevent double lock in AcceptToMemoryPool()",
      "tree": {
        "sha": "e1458b9171be1d2afe467b336adfb4b729edd600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1458b9171be1d2afe467b336adfb4b729edd600"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7878cfc4afdfeaf7455277e0baffac4e8ced1964",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1zwACgkQQQEIES5+\nqB8b2g//foUZqBEfC+7ucnacblPWTA7yKsf0QFBxngKFwctbvabeD+CDt1coVYHZ\ntMgAVZD/34fEwkVEWzekyJohj0GZgB77qMLJiVCh2Z/3bbnZ7tINwNWGCX5hTJrw\ncS8F0QiRtYLLCgnZ1iJl8ezl6laUvFYYN1Ff+rPtAa2Co9mr49AefCKgr8rfqJWg\nufE53XKV84pWw+FcUmC/HSwk3sL31bwWMIJpoj1UUr1RJjRgAkEAoQUFYuucP7g/\n+18F8psHirtkk8LvdQEYPpbQSu3ly8hqcJt++rI2PHOT4e2KCfdBkxxKRZrEdYjg\na6NOKLr5ts1Tqy7XsQlKasQ1bB3zGeiW5c795cD4VPI8zsBM5QDkq0o/SOdqse32\nyAdOJL2IuGGGiPFKzVgk7qd5FdNAFJ4HuJbt9aH+R/6KmAn19KQ+rChbuVfR06Bg\nyFviM6QKASvA8KTdUgDoH88XXvbzDS5zfXFDA7Pt3LkkRnv65kdXk+rFCeOVXLAG\nfYmEBOE0YZUughW5ZR5NQ83gO6s39u2mrzqQS71I1AZwlDTRUNBnQ0ygALa2StUv\nsIHNup3GfS/2h2whmDvc4GX73/5iHNMYywUegz9yLIaLJDONd+ZQUAf90V0mv3eC\nXWrosJaZugeFqklOeqP/bZuiAstF2p1sHCxkp/tqwsSfnGgOtUQ=\n=uHTO\n-----END PGP SIGNATURE-----",
        "payload": "tree e1458b9171be1d2afe467b336adfb4b729edd600\nparent c903bf73895a375a3418be8f446905e0bb3e24e0\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599221869 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395644 +0300\n\nrefactor: Prevent double lock in AcceptToMemoryPool()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7878cfc4afdfeaf7455277e0baffac4e8ced1964",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7878cfc4afdfeaf7455277e0baffac4e8ced1964",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7878cfc4afdfeaf7455277e0baffac4e8ced1964/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c903bf73895a375a3418be8f446905e0bb3e24e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c903bf73895a375a3418be8f446905e0bb3e24e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c903bf73895a375a3418be8f446905e0bb3e24e0"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 57,
      "deletions": 21
    },
    "files": [
      {
        "sha": "469eafdf29d0fbef59adcae11ddb6d1976e90d31",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -50,7 +50,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n \n         for (const auto& txr : txs) {\n             TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n+            bool ret{::AcceptToMemoryPoolWithUnlockedMempool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n             assert(ret);\n         }\n     }"
      },
      {
        "sha": "a7c65a5d117569a9e608860aac7d4d2a1dc46b81",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -2065,7 +2065,7 @@ void static ProcessOrphanTx(\n         TxValidationState orphan_state;\n \n         if (setMisbehaving.count(fromPeer)) continue;\n-        if (::AcceptToMemoryPool(mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+        if (::AcceptToMemoryPoolWithUnlockedMempool(mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -3025,7 +3025,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n         if (!AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid), m_mempool) &&\n-            ::AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+            ::AcceptToMemoryPoolWithUnlockedMempool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {"
      },
      {
        "sha": "6793672cac6428e3f34cc382adece23a181604e5",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -42,7 +42,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool. Submit it.\n         TxValidationState state;\n-        if (!::AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+        if (!::AcceptToMemoryPoolWithUnlockedMempool(*node.mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             err_string = state.ToString();\n             if (state.IsInvalid()) {"
      },
      {
        "sha": "7a7181d4181a5a4e38f897a49723c26289719462",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -929,7 +929,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     {\n         LOCK(cs_main);\n         AssertLockNotHeld(mempool.cs);\n-        test_accept_res = ::AcceptToMemoryPool(mempool, state, std::move(tx),\n+        test_accept_res = ::AcceptToMemoryPoolWithUnlockedMempool(mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);"
      },
      {
        "sha": "c156734e00aa6c74790743fc3893e7ac1221040a",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -41,7 +41,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     BOOST_CHECK_EQUAL(\n             false,\n-            ::AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n+            ::AcceptToMemoryPoolWithUnlockedMempool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n                 nullptr /* plTxnReplaced */,\n                 true /* bypass_limits */,\n                 0 /* nAbsurdFee */));"
      },
      {
        "sha": "e4e106365db8ba8750f4904a6fba0202a24e581b",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -31,7 +31,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         AssertLockNotHeld(m_node.mempool->cs);\n \n         TxValidationState state;\n-        return ::AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n+        return ::AcceptToMemoryPoolWithUnlockedMempool(*m_node.mempool, state, MakeTransactionRef(tx),\n             nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n     };\n "
      },
      {
        "sha": "805cbb5983ba28108415399ca8a431b9b109ca06",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -290,7 +290,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n             TxValidationState state;\n             std::list<CTransactionRef> plTxnReplaced;\n             for (const auto& tx : txs) {\n-                BOOST_REQUIRE(::AcceptToMemoryPool(\n+                BOOST_REQUIRE(::AcceptToMemoryPoolWithUnlockedMempool(\n                     *m_node.mempool,\n                     state,\n                     tx,"
      },
      {
        "sha": "ca161a320a1344dc7fd646b09c07ca9f2b9c02a2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -386,7 +386,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n         // ignore validation errors in resurrected transactions\n         TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !::AcceptToMemoryPool(mempool, stateDummy, *it,\n+            !::AcceptToMemoryPoolWithLockedMempool(mempool, stateDummy, *it,\n                                 nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n@@ -1031,7 +1031,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n-    LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n+    LockAssertion lock(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n@@ -1059,11 +1059,14 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n \n } // anon namespace\n \n+namespace {\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n+bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {\n+    AssertLockHeld(pool.cs);\n+\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n     bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n@@ -1082,13 +1085,36 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+bool AcceptToMemoryPoolHelper(\n+    CTxMemPool& pool, TxValidationState& state, const CTransactionRef& tx,\n+    std::list<CTransactionRef>* plTxnReplaced,\n+    bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {\n+    AssertLockHeld(pool.cs);\n     const CChainParams& chainparams = Params();\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n }\n+} // namespace\n+\n+bool AcceptToMemoryPoolWithLockedMempool(\n+    CTxMemPool& pool, TxValidationState& state, const CTransactionRef& tx,\n+    std::list<CTransactionRef>* plTxnReplaced,\n+    bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+{\n+    AssertLockHeld(pool.cs);\n+    return AcceptToMemoryPoolHelper(pool, state, tx, plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+}\n+\n+bool AcceptToMemoryPoolWithUnlockedMempool(\n+    CTxMemPool& pool, TxValidationState& state, const CTransactionRef& tx,\n+    std::list<CTransactionRef>* plTxnReplaced,\n+    bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+{\n+    AssertLockNotHeld(pool.cs);\n+    LOCK(pool.cs);\n+    return AcceptToMemoryPoolHelper(pool, state, tx, plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+}\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n {\n@@ -5087,9 +5113,12 @@ bool LoadMempool(CTxMemPool& pool)\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n                 AssertLockNotHeld(pool.cs);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n-                                           false /* test_accept */);\n+                {\n+                    LOCK(pool.cs);\n+                    AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n+                                               nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n+                                               false /* test_accept */);\n+                }\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "0d65dca4e266d45143e78c4ced18d194695b6ac0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7878cfc4afdfeaf7455277e0baffac4e8ced1964/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "patch": "@@ -201,9 +201,16 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool AcceptToMemoryPoolWithLockedMempool(\n+    CTxMemPool& pool, TxValidationState& state, const CTransactionRef& tx,\n+    std::list<CTransactionRef>* plTxnReplaced,\n+    bool bypass_limits, const CAmount nAbsurdFee, bool test_accept = false)\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs);\n+bool AcceptToMemoryPoolWithUnlockedMempool(\n+    CTxMemPool& pool, TxValidationState& state, const CTransactionRef& tx,\n+    std::list<CTransactionRef>* plTxnReplaced,\n+    bool bypass_limits, const CAmount nAbsurdFee, bool test_accept = false)\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main, !pool.cs);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      }
    ]
  },
  {
    "sha": "b3d44b9dca4752061bb62d509017886a49d6f14f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2Q0NGI5ZGNhNDc1MjA2MWJiNjJkNTA5MDE3ODg2YTQ5ZDZmMTRm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-04T12:30:18Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:05Z"
      },
      "message": "refactor: Specify CChainState::FlushStateToDisk() by mempool mutex state",
      "tree": {
        "sha": "05e600626cb34c5327ec7487a57d58b5d13a820a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e600626cb34c5327ec7487a57d58b5d13a820a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3d44b9dca4752061bb62d509017886a49d6f14f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z0ACgkQQQEIES5+\nqB/xDQ/9HUe8YxblkNJwa4WJeRrrkAatY8Ay4KUGVElHXhcVpWeKIQqRLQ6NJbe0\ne5mM0Ufy6+1j+Ze9+GXII20u1ml0o5XfKQc9NswTvaFMBCcbr6BUAtygaAgEcvkr\nVNn3V1ryubRw1EGadPuowAaxDmWPy4P5Xvro1QmQS0SVsNOJMeHO2p78BSdKvLQ1\nnw1YrVexyjGQqAx0klnjVXs4bGQavKCJHVBvvUluNWCSn+1rF6MBzshg9ZsBhNiF\ntj8tgUEmMYdK+a3qoRPndGTew4Bwm0SKB+8EVIxleBN/t5eWa+OE2RPX+LaIuUxI\nnm/TCOYzwRj5CPT9T5xV5C9+7WEFLR2Z/8Fz6jzkEUGCYeojlvyGuDgCkGc4DdoT\nABY2e1UF2k0JgGN3jN2at0/YJg3nxLOORjUvmzpVRTgqjI+y8oam/1iJIiKBqjiK\nRO/GmjY9qnEkVSdfgz+qBkxfvkRC5sPMWvhm4AQ5LLOz6Qrjgs4JIikSlQu3eIPw\ngi4qRG1t7N1w6yr6IORGlO6Sj5sBckI3LS0pDhzPrKNe9XY/uE/dgTeUuruY4SWV\nIXm2r68Uj+aS/rQUfqGBhKEQVDtZBNxZId95bLTXoDKSit/wYSYgmp8T14rIGUZD\nfGeelxaoFZFr/aFeY54kdOrwvtf6CeqGVueD91zq564fhkV781w=\n=FfRk\n-----END PGP SIGNATURE-----",
        "payload": "tree 05e600626cb34c5327ec7487a57d58b5d13a820a\nparent 7878cfc4afdfeaf7455277e0baffac4e8ced1964\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599222618 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395645 +0300\n\nrefactor: Specify CChainState::FlushStateToDisk() by mempool mutex state\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d44b9dca4752061bb62d509017886a49d6f14f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3d44b9dca4752061bb62d509017886a49d6f14f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d44b9dca4752061bb62d509017886a49d6f14f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7878cfc4afdfeaf7455277e0baffac4e8ced1964",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7878cfc4afdfeaf7455277e0baffac4e8ced1964"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 46,
      "deletions": 15
    },
    "files": [
      {
        "sha": "363474c330b8239e8f84f5fea6fa407e5554a0df",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 13,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3d44b9dca4752061bb62d509017886a49d6f14f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3d44b9dca4752061bb62d509017886a49d6f14f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b3d44b9dca4752061bb62d509017886a49d6f14f",
        "patch": "@@ -1081,7 +1081,8 @@ bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& poo\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n-    ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n+    LockAssertion lock(::mempool.cs);\n+    ::ChainstateActive().FlushStateToDiskWithLockedMempool(chainparams, state_dummy, FlushStateMode::PERIODIC);\n     return res;\n }\n \n@@ -2288,7 +2289,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n     return CoinsCacheSizeState::OK;\n }\n \n-bool CChainState::FlushStateToDisk(\n+bool CChainState::FlushStateToDiskHelper(\n     const CChainParams& chainparams,\n     BlockValidationState &state,\n     FlushStateMode mode,\n@@ -2421,7 +2422,8 @@ bool CChainState::FlushStateToDisk(\n void CChainState::ForceFlushStateToDisk() {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS)) {\n+    AssertLockNotHeld(::mempool.cs);\n+    if (!this->FlushStateToDiskWithUnlockedMempool(chainparams, state, FlushStateMode::ALWAYS)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2431,7 +2433,8 @@ void CChainState::PruneAndFlush() {\n     fCheckForPruning = true;\n     const CChainParams& chainparams = Params();\n \n-    if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n+    AssertLockNotHeld(::mempool.cs);\n+    if (!this->FlushStateToDiskWithUnlockedMempool(chainparams, state, FlushStateMode::NONE)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2536,7 +2539,8 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * MILLI);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n+    LockAssertion lock(::mempool.cs);\n+    if (!FlushStateToDiskWithLockedMempool(chainparams, state, FlushStateMode::IF_NEEDED))\n         return false;\n \n     if (disconnectpool) {\n@@ -2653,7 +2657,8 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * MILLI, nTimeFlush * MICRO, nTimeFlush * MILLI / nBlocksTotal);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n+    LockAssertion lock(::mempool.cs);\n+    if (!FlushStateToDiskWithLockedMempool(chainparams, state, FlushStateMode::IF_NEEDED))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n@@ -2966,7 +2971,8 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::PERIODIC)) {\n+    AssertLockNotHeld(::mempool.cs);\n+    if (!FlushStateToDiskWithUnlockedMempool(chainparams, state, FlushStateMode::PERIODIC)) {\n         return false;\n     }\n \n@@ -3856,7 +3862,8 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+    AssertLockNotHeld(::mempool.cs);\n+    FlushStateToDiskWithUnlockedMempool(chainparams, state, FlushStateMode::NONE);\n \n     CheckBlockIndex(chainparams.GetConsensus());\n \n@@ -4011,7 +4018,8 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    if (!::ChainstateActive().FlushStateToDisk(\n+    AssertLockNotHeld(::mempool.cs);\n+    if (!::ChainstateActive().FlushStateToDiskWithUnlockedMempool(\n             chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n@@ -4587,7 +4595,8 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n         LimitValidationInterfaceQueue();\n \n         // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n+        AssertLockNotHeld(::mempool.cs);\n+        if (!FlushStateToDiskWithUnlockedMempool(params, state, FlushStateMode::PERIODIC)) {\n             LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n@@ -4606,7 +4615,8 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n             // and skip it here, we're about to -reindex-chainstate anyway, so\n             // it'll get called a bunch real soon.\n             BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n+            AssertLockNotHeld(::mempool.cs);\n+            if (!FlushStateToDiskWithUnlockedMempool(params, state, FlushStateMode::ALWAYS)) {\n                 LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n                 return false;\n             }\n@@ -5030,10 +5040,10 @@ bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n \n     if (coinstip_size > old_coinstip_size) {\n         // Likely no need to flush if cache sizes have grown.\n-        ret = FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED);\n+        ret = FlushStateToDiskWithUnlockedMempool(chainparams, state, FlushStateMode::IF_NEEDED);\n     } else {\n         // Otherwise, flush state to disk and deallocate the in-memory coins map.\n-        ret = FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS);\n+        ret = FlushStateToDiskWithUnlockedMempool(chainparams, state, FlushStateMode::ALWAYS);\n         CoinsTip().ReallocateCache();\n     }\n     return ret;"
      },
      {
        "sha": "86a03f727743f8d1bbbe36e43976a61544a490c6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3d44b9dca4752061bb62d509017886a49d6f14f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3d44b9dca4752061bb62d509017886a49d6f14f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b3d44b9dca4752061bb62d509017886a49d6f14f",
        "patch": "@@ -612,11 +612,32 @@ class CChainState {\n      *\n      * @returns true unless a system error occurred\n      */\n-    bool FlushStateToDisk(\n+    bool FlushStateToDiskHelper(\n         const CChainParams& chainparams,\n         BlockValidationState &state,\n         FlushStateMode mode,\n-        int nManualPruneHeight = 0);\n+        int nManualPruneHeight);\n+\n+    bool FlushStateToDiskWithLockedMempool(\n+        const CChainParams& chainparams,\n+        BlockValidationState& state,\n+        FlushStateMode mode,\n+        int nManualPruneHeight = 0) // EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n+        EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n+    {\n+        AssertLockHeld(::mempool.cs);\n+        return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight);\n+    }\n+\n+    bool FlushStateToDiskWithUnlockedMempool(\n+        const CChainParams& chainparams,\n+        BlockValidationState& state,\n+        FlushStateMode mode,\n+        int nManualPruneHeight = 0) EXCLUSIVE_LOCKS_REQUIRED(!::mempool.cs)\n+    {\n+        AssertLockNotHeld(::mempool.cs);\n+        return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight);\n+    }\n \n     //! Unconditionally flush all changes to disk.\n     void ForceFlushStateToDisk();"
      }
    ]
  },
  {
    "sha": "afcf9161cef59de6b6f3286de268b851fc025e31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmNmOTE2MWNlZjU5ZGU2YjZmMzI4NmRlMjY4Yjg1MWZjMDI1ZTMx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T06:22:00Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:05Z"
      },
      "message": "refactor: Avoid excessive mempool locking in FlushStateToDiskHelper()",
      "tree": {
        "sha": "1719f1b05b738049e76ce4123433d271a30dbb8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1719f1b05b738049e76ce4123433d271a30dbb8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afcf9161cef59de6b6f3286de268b851fc025e31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z0ACgkQQQEIES5+\nqB8R3hAAjdu856QEjoSv2UI2yyPUecYS3AetrzXQAYsmqmjViFlYaY8vIUjxkKSQ\nzcPhjXBqR4UqR43+WfigkvDGNTz1V7Sghz8e4TiMMEmrWYkxcJQpVTY5zXOG6oTQ\nLpRbwAaccBncCa/ErWJa1wHO8QREbS+/Q76KhLFJEkf50wn7BzbizUv0TPpyDewg\nz03Qu+ruwb0LYnDUhwW9QQtiAJ0z5cSKVJKdsgiDuGX7wp64+GQod+qHHadx2pCc\nuAhAA2rnvXK2/Yt34D/oq5ymLMsL1bF/k00YtDpynESKnQ/rlSJwwN7ORojLE8wg\nzcqSdwlKpK5M4ZSq6fLYWFckgZEtOLgxoIoPs9KAG2ekWXVRgyCf5Suv0V6T2si1\nOL/FmtN2ZAg32qFV9qkWCR+xPUkHnnVOD3BdE+m/f3ZmNlXU1yGJ8mV1AdPYNBnm\nYiB8EoPXNI4Et8Ewl4HT3csP1E0RyG4RRCBrh10F7JWdG3wPHkpzsMTs8ds4BJxb\ns1goejBgK+ZHmJzqBe86ldRF43m7SO2MJYBrPGZw9elOCj5uK4fSu7/m8ZweOvGp\noO+HdvX/OugnF+5vMV71P7LhM/SzhMVq2zXcgs404FN5Id7vN69qVU6UdChBuee/\nNMttBYWKfUQA6fyPt1rq13h1fXO4ftoutomDTCEf901VOaoRc1Y=\n=J4S+\n-----END PGP SIGNATURE-----",
        "payload": "tree 1719f1b05b738049e76ce4123433d271a30dbb8c\nparent b3d44b9dca4752061bb62d509017886a49d6f14f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592288520 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395645 +0300\n\nrefactor: Avoid excessive mempool locking in FlushStateToDiskHelper()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afcf9161cef59de6b6f3286de268b851fc025e31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afcf9161cef59de6b6f3286de268b851fc025e31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afcf9161cef59de6b6f3286de268b851fc025e31/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3d44b9dca4752061bb62d509017886a49d6f14f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d44b9dca4752061bb62d509017886a49d6f14f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3d44b9dca4752061bb62d509017886a49d6f14f"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 14,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8910b891d677966f0628fd280d7d904a454207a4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afcf9161cef59de6b6f3286de268b851fc025e31/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afcf9161cef59de6b6f3286de268b851fc025e31/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=afcf9161cef59de6b6f3286de268b851fc025e31",
        "patch": "@@ -2293,9 +2293,9 @@ bool CChainState::FlushStateToDiskHelper(\n     const CChainParams& chainparams,\n     BlockValidationState &state,\n     FlushStateMode mode,\n-    int nManualPruneHeight)\n+    int nManualPruneHeight,\n+    const CoinsCacheSizeState cache_state)\n {\n-    LOCK(cs_main);\n     assert(this->CanFlushToDisk());\n     static std::chrono::microseconds nLastWrite{0};\n     static std::chrono::microseconds nLastFlush{0};\n@@ -2309,7 +2309,6 @@ bool CChainState::FlushStateToDiskHelper(\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&m_mempool);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {"
      },
      {
        "sha": "9a5593af52fe1a586dd3c6c231a1f69be85e529d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afcf9161cef59de6b6f3286de268b851fc025e31/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afcf9161cef59de6b6f3286de268b851fc025e31/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=afcf9161cef59de6b6f3286de268b851fc025e31",
        "patch": "@@ -616,7 +616,8 @@ class CChainState {\n         const CChainParams& chainparams,\n         BlockValidationState &state,\n         FlushStateMode mode,\n-        int nManualPruneHeight);\n+        int nManualPruneHeight,\n+        CoinsCacheSizeState cache_state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool FlushStateToDiskWithLockedMempool(\n         const CChainParams& chainparams,\n@@ -625,8 +626,10 @@ class CChainState {\n         int nManualPruneHeight = 0) // EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n         EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n     {\n+        LOCK(cs_main);\n         AssertLockHeld(::mempool.cs);\n-        return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight);\n+        const CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&::mempool);\n+        return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight, cache_state);\n     }\n \n     bool FlushStateToDiskWithUnlockedMempool(\n@@ -635,8 +638,14 @@ class CChainState {\n         FlushStateMode mode,\n         int nManualPruneHeight = 0) EXCLUSIVE_LOCKS_REQUIRED(!::mempool.cs)\n     {\n+        LOCK(cs_main);\n         AssertLockNotHeld(::mempool.cs);\n-        return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight);\n+        CoinsCacheSizeState cache_state;\n+        {\n+            LOCK(::mempool.cs);\n+            cache_state = GetCoinsCacheSizeState(&::mempool);\n+        }\n+        return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight, cache_state);\n     }\n \n     //! Unconditionally flush all changes to disk."
      }
    ]
  },
  {
    "sha": "52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmVjNjBkN2JkZDBmYzcyZmJmNDU0OTc5ZTlkMWRlOWE1ZDBmOTll",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T06:36:27Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:05Z"
      },
      "message": "refactor: Remove excessive locking in CTxMemPool methods",
      "tree": {
        "sha": "9c596ab3a53c0ec5f87d194275ae32bde74cb4be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c596ab3a53c0ec5f87d194275ae32bde74cb4be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z0ACgkQQQEIES5+\nqB/gOw//VcrIS6AxjleQGoduFqZGboPLJHSg/QHVx7c2wFEwLYlK0qIlIGfxPCok\nfkPajYOtKZzVwKkiBpdCow7rY+j2nxKMKpBHWPKcnnNsSn9tnLcdeC6wcU6RzZIn\nX+J1yr8JjH9wS3lTiTDUg+jNlHi1zjoavDoqVwfrDVtAqR777grrK48Xhx9/nXqL\nqQAo94GItsKO0N6/9azmd1mmSVOKsjPfilRj1aVvnTTAm1mm0aL3U5Sn8A1R+dRo\nnL8JoYuOkCiyRVAY44JwXUiACeV/poY972ggxkM86SrhNlvA4ZCf1MaW7nvboej0\nSuDDYMBqvvJD4hFrSM3wXymemtiz57mFBv5LwEOCikmYF7H0LXtvTzSFudGrqX4S\nDIjAy8G0pyORrp2wRTxrfcwsp/i1+1Yy2zQI8jjwB+Io6qLa6JHU3l0+eSlMmUe0\nr+qmTW90+hGGmtCNn1V+Wz2knwvwdAyh4iVE7J3BU8cYk8BO4PvAvmi9BDQhZgmU\nZQZi6+bPJeOVdXQLhzUX1AMC33eVcPxrayQKl9dD1tQFRTxKlDfYVuSV20e6825b\njq7PQ1gpbT6ugYe4TMHewiFyDIAs8o9Seqod57vWqyliNZ5hWJsOQF/FjSbJM8Kt\njq1Y5aXgU+frJCgZAlkbIZ971uwYd8EuRMEQD/tBGuxvyYJ9H9o=\n=0FkR\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c596ab3a53c0ec5f87d194275ae32bde74cb4be\nparent afcf9161cef59de6b6f3286de268b851fc025e31\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592289387 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395645 +0300\n\nrefactor: Remove excessive locking in CTxMemPool methods\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afcf9161cef59de6b6f3286de268b851fc025e31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afcf9161cef59de6b6f3286de268b851fc025e31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afcf9161cef59de6b6f3286de268b851fc025e31"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03d29488db312e5e96a0897ef270d3b364a21697",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
        "patch": "@@ -773,7 +773,6 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n \n void CTxMemPool::queryHashes(std::vector<uint256>& vtxid) const\n {\n-    LOCK(cs);\n     auto iters = GetSortedDepthAndScore();\n \n     vtxid.clear();"
      },
      {
        "sha": "a3bd424b4f1ca21f287b18b62c2bfc961f6eed8e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
        "patch": "@@ -614,7 +614,7 @@ class CTxMemPool\n     void clear();\n     void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid=false);\n-    void queryHashes(std::vector<uint256>& vtxid) const;\n+    void queryHashes(std::vector<uint256>& vtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     bool isSpent(const COutPoint& outpoint) const;\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);"
      }
    ]
  },
  {
    "sha": "f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjgyNWZhN2I1NjBjOTZkYzc0NzdlZmY5MGI1YzI1YmZmOGVlZGQ0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T06:36:39Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:06Z"
      },
      "message": "refactor: Make CTxMemPool::ClearPrioritisation() private",
      "tree": {
        "sha": "f1ae8c91c64eff9e14c891c259c8a7d1eb192603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ae8c91c64eff9e14c891c259c8a7d1eb192603"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z4ACgkQQQEIES5+\nqB88BBAAkWbHcDQpljXGnG+DTm7oKn38E4UOOaKUABMsWTeFfxvtFNTceloQBJGY\nEA0mrZ7mrMtFhJJb6x3jkHVlPymejdEaJy8dP87XeB6SWEEej1DzbVWZJoMHS2zf\nryJYeUBu7af5KieILm3nb2TXrKUwDae47GG6s8wq8/qNoNhX3My816ZHDEks0BNa\ndwumMXu1sbexW1ZVhoXdgQNpO4dTf/L7EK8CMie1miDrW0H5r2cgUrFqVEP4RZGb\npF/iu0zj9UMRP8e/RHipyxxcHrgrq8qsPdcbbNm5MxhudUOfoY+CSvqywu0FJbhn\nAQtmzyXfYL7enMQ9VTWfenEbo1owMWY6eMvTujrAnm0NvFzI6aHAyp+3Y+D1VENI\n/MaD/1hqYbf2zPNEgXn1G2iwQ7/YO9pm+Hu5YLt8f8S/KpHaJOKSYuXi56igazic\nRPLZztJl3rTLfQwboGR/GI/XogbTJnreYf/B0EZCJTcPcTNl5JmGvhvGUGGcx756\nAU7Q2vre9TKHpZvyXrro1ZUoDX0CPq+qqv+b5J9j2R8H7ypSgGlXwpA6iZz3x/w2\nh46FPFVtp+TS7yXiBzz8I2JCuB6WkelaejlDp80yPPZPYU9hoCdN8PQWPExTbtbf\nuGqUaMtuXLstkk9+siBth/DVawO6Y9HMFrZSuoVMDqn++qJpV+o=\n=bpG3\n-----END PGP SIGNATURE-----",
        "payload": "tree f1ae8c91c64eff9e14c891c259c8a7d1eb192603\nparent 52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592289399 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395646 +0300\n\nrefactor: Make CTxMemPool::ClearPrioritisation() private\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2825fa7b560c96dc7477eff90b5c25bff8eedd4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52ec60d7bdd0fc72fbf454979e9d1de9a5d0f99e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b1f548259b1df891e3653b29a6385bbabef135c0",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2825fa7b560c96dc7477eff90b5c25bff8eedd4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2825fa7b560c96dc7477eff90b5c25bff8eedd4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
        "patch": "@@ -579,6 +579,8 @@ class CTxMemPool\n      */\n     std::map<uint256, uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+    void ClearPrioritisation(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n     std::map<uint256, CAmount> mapDeltas;\n@@ -627,7 +629,6 @@ class CTxMemPool\n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta);\n     void ApplyDelta(const uint256& hash, CAmount &nFeeDelta) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void ClearPrioritisation(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Get the transaction in the pool that spends the same prevout */\n     const CTransaction* GetConflictTx(const COutPoint& prevout) const EXCLUSIVE_LOCKS_REQUIRED(cs);"
      }
    ]
  },
  {
    "sha": "ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzk4ZGFmMGFiM2Q0OTFjNWViZWE3YzI1OWM0NGExYWM4ZTI0MmI2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T06:37:12Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:06Z"
      },
      "message": "refactor: Add negative thread safety annotations to CTxMemPool",
      "tree": {
        "sha": "5c46a68322856be8ec5540b0b00aff2325266251",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c46a68322856be8ec5540b0b00aff2325266251"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z4ACgkQQQEIES5+\nqB+HqQ//S3HhOzBmF0/WJEedVaQ4T2zLfDaIgSk4s/pCI8YD0YjXyVc6riR2G9/q\nuoHez0z55ld1HNBMFkerbvdmGMq9PouHhj64enXzairCKVpZXkC6+6ot/n9pwAiu\npCBA6uZpA0fiFj8eloxrg+5xzUSzYCkWvefMWHPjL4L3gUgI7uBhbc7K60CQsBGq\nUOTElKTaciyYpx8TlvY8iiTuCi9XzdrlnaICaatJtg+ras+NteGIyZhTISD/TuP3\ngCQNP3Uy+e8D2Wh0uy47tqecddRsKYfTIKoNb1H03bONxXYD+dtVZC63YMzwQkaT\nuA1s/FxD8eVnLTWohfgCcFPR0b+A9ZLgXIzmOG0OHD+1Vw5IJYfYnLgAdS6tHIiu\nms5QEoCZP6mC8iB5GYi0FTbOjCM/an4spTaR3ajULFVggPfSCWesWmFQY4oIyt9h\nB/oQqg8dwVbmaPCwSxWb1RmZ3LGDU5od5hkx8qsUo+5CJOAT1U2KKsG/32y7Hghc\nQEBLJhu6m3JMhppDqa5TMjVOkcIzR3YOIIYegtf5oOmnTuFrwKo72z7iBL09q4O8\nLPBtqvEFfB7ypo35Vr/IR5XbVGQww0zxeQpDHHb85mMs2l3I3TposzHTqd09uUVD\nZr7YDBrwtmsXqnUzxLv+tU8jJNkthW9EXUxe8gk1GXkvDt2hTdY=\n=xQOO\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c46a68322856be8ec5540b0b00aff2325266251\nparent f2825fa7b560c96dc7477eff90b5c25bff8eedd4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592289432 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395646 +0300\n\nrefactor: Add negative thread safety annotations to CTxMemPool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2825fa7b560c96dc7477eff90b5c25bff8eedd4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2825fa7b560c96dc7477eff90b5c25bff8eedd4"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9ee8826fbe9d0bb8ab9f137c3a947603b0b1216c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
        "patch": "@@ -728,6 +728,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid)\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = wtxid ? get_iter_from_wtxid(hasha) : mapTx.find(hasha);\n     if (i == mapTx.end()) return false;\n@@ -812,6 +813,7 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n \n TxMempoolInfo CTxMemPool::info(const GenTxid& gtxid) const\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = (gtxid.IsWtxid() ? get_iter_from_wtxid(gtxid.GetHash()) : mapTx.find(gtxid.GetHash()));\n     if (i == mapTx.end())\n@@ -823,6 +825,7 @@ TxMempoolInfo CTxMemPool::info(const uint256& txid) const { return info(GenTxid{\n \n void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)\n {\n+    AssertLockNotHeld(cs);\n     {\n         LOCK(cs);\n         CAmount &delta = mapDeltas[hash];\n@@ -1118,6 +1121,7 @@ bool CTxMemPool::IsLoaded() const\n \n void CTxMemPool::SetIsLoaded(bool loaded)\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     m_is_loaded = loaded;\n }"
      },
      {
        "sha": "6f8f5e20b6a2091234a805b569c6dc6412683afe",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
        "patch": "@@ -596,7 +596,12 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { LOCK(cs); nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n+    void setSanityCheck(double dFrequency = 1.0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0);\n+    }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of\n@@ -615,7 +620,7 @@ class CTxMemPool\n \n     void clear();\n     void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n-    bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid=false);\n+    bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid = false) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     void queryHashes(std::vector<uint256>& vtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     bool isSpent(const COutPoint& outpoint) const;\n     unsigned int GetTransactionsUpdated() const;\n@@ -627,7 +632,7 @@ class CTxMemPool\n     bool HasNoInputsOf(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta);\n+    void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     void ApplyDelta(const uint256& hash, CAmount &nFeeDelta) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Get the transaction in the pool that spends the same prevout */\n@@ -703,7 +708,7 @@ class CTxMemPool\n     bool IsLoaded() const;\n \n     /** Sets the current loaded state */\n-    void SetIsLoaded(bool loaded);\n+    void SetIsLoaded(bool loaded) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n \n     unsigned long size() const\n     {\n@@ -733,14 +738,16 @@ class CTxMemPool\n         AssertLockHeld(cs);\n         return mapTx.project<0>(mapTx.get<index_by_wtxid>().find(wtxid));\n     }\n-    TxMempoolInfo info(const uint256& hash) const;\n-    TxMempoolInfo info(const GenTxid& gtxid) const;\n+    TxMempoolInfo info(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+    TxMempoolInfo info(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     std::vector<TxMempoolInfo> infoAll() const;\n \n     size_t DynamicMemoryUsage() const;\n \n     /** Adds a transaction to the unbroadcast set */\n-    void AddUnbroadcastTx(const uint256& txid, const uint256& wtxid) {\n+    void AddUnbroadcastTx(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n         LOCK(cs);\n         // Sanity Check: the transaction should also be in the mempool\n         if (exists(txid)) {"
      }
    ]
  },
  {
    "sha": "26da318c12da9200d937ba110d34c0adddf69e51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmRhMzE4YzEyZGE5MjAwZDkzN2JhMTEwZDM0YzBhZGRkZjY5ZTUx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:00:44Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:06Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::check()",
      "tree": {
        "sha": "79ab02776707a2696b1678afea8bd86132c9103f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ab02776707a2696b1678afea8bd86132c9103f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26da318c12da9200d937ba110d34c0adddf69e51",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z4ACgkQQQEIES5+\nqB/X0w/8Dxmk3Y9kWPKdaR55aLKEdtt6WxAH8sC7HpdPt8gRvCK1Bevaetp5KA8j\nPBif8yQfyd3a167rIiHqCo0uU8r/l8WpAwhkxCNVI75Ikw6TvVbp0Eu4dN87ZuGy\nCuJAJbjqAa187yAvPl5Ol38/4nz3KlZCsft11PGICy+CAQy24a5EnQZNrLHs7xdu\nS0092uIvOoriBlcZhLII+dlr6wTuP7REby6KnMIjSnf/dDSEBev0XrL8wc19TD2e\ncIs/pq2hfRC3Fj+g2hBmpVLx3IdJwZHBhREK0J2N3770Oi+/QIgJrL2BGSOwNgjq\nQNX+y23OlBZqcm6cssmRJIyaRq0wYYP9cqW6RLYbhuHZDvIFKaQ2CCjrMyl13Jmt\npSJlCaZMHdi4eywAaFjYHz12vzBNf/rtr2M4GR2/6+/b2ycZ5j3FuBiC1e0swBD+\nL2/5n97dLiDYEEj8RKESnEr9kEdKVPWza9OLLWjxFKM/RS/y5C5MvR6K4Rz8RaLh\nCuGadfzzsOkARD+Gvf7NM15z5jIW5UPVbegVonfSOf39QeqbiwSRTpL3eeUnEHbK\nZBP46kfvf4xmq4D7jijrc4rVfMMauIWxfB3fG4YZMA3eqO5yvlhl4KbC4D80ByBr\nJEG/G9WLt1PRswP9iOvIvU+VK+O1aVFlrcZ7lTrfJJMCO6RV1wE=\n=eZv2\n-----END PGP SIGNATURE-----",
        "payload": "tree 79ab02776707a2696b1678afea8bd86132c9103f\nparent ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592290844 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395646 +0300\n\nrefactor: Prevent double lock in CTxMemPool::check()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26da318c12da9200d937ba110d34c0adddf69e51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26da318c12da9200d937ba110d34c0adddf69e51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26da318c12da9200d937ba110d34c0adddf69e51/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec98daf0ab3d491c5ebea7c259c44a1ac8e242b6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "82853b80820139f3ac5f8c22c31224a6e0756d7a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da318c12da9200d937ba110d34c0adddf69e51/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da318c12da9200d937ba110d34c0adddf69e51/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=26da318c12da9200d937ba110d34c0adddf69e51",
        "patch": "@@ -610,9 +610,8 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n     UpdateCoins(tx, mempoolDuplicate, std::numeric_limits<int>::max());\n }\n \n-void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n+void CTxMemPool::checkNonLockHelper(const CCoinsViewCache* pcoins) const\n {\n-    LOCK(cs);\n     if (nCheckFrequency == 0)\n         return;\n "
      },
      {
        "sha": "4bffe4628c194a9f9e10b4c0e022bf2a13cf61fe",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da318c12da9200d937ba110d34c0adddf69e51/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da318c12da9200d937ba110d34c0adddf69e51/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=26da318c12da9200d937ba110d34c0adddf69e51",
        "patch": "@@ -595,7 +595,14 @@ class CTxMemPool\n      * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n      * check does nothing.\n      */\n-    void check(const CCoinsViewCache *pcoins) const;\n+    void checkNonLockHelper(const CCoinsViewCache* pcoins) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void check(const CCoinsViewCache* pcoins) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        checkNonLockHelper(pcoins);\n+    }\n+\n     void setSanityCheck(double dFrequency = 1.0) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         AssertLockNotHeld(cs);"
      },
      {
        "sha": "597fe40509e747ac5c3bffd545532fec52e4eb3b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26da318c12da9200d937ba110d34c0adddf69e51/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26da318c12da9200d937ba110d34c0adddf69e51/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=26da318c12da9200d937ba110d34c0adddf69e51",
        "patch": "@@ -2831,7 +2831,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         // any disconnected transactions back to the mempool.\n         UpdateMempoolForReorg(m_mempool, disconnectpool, true);\n     }\n-    m_mempool.check(&CoinsTip());\n+    m_mempool.checkNonLockHelper(&CoinsTip());\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)"
      }
    ]
  },
  {
    "sha": "87d624c46c5ea32068a463feedef3b4647f13bd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2Q2MjRjNDZjNWVhMzIwNjhhNDYzZmVlZGVmM2I0NjQ3ZjEzYmQw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:02:01Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:07Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::clear()",
      "tree": {
        "sha": "740355734f222d4634ce2549c7a16aeb8fca2486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/740355734f222d4634ce2549c7a16aeb8fca2486"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87d624c46c5ea32068a463feedef3b4647f13bd0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z8ACgkQQQEIES5+\nqB+BGA/9GA0NEu8d0QeG0bnAqchSuGQx8/lZXkbLWpcDtY/SlTlPRj/K6tvR8Ui7\nPVwoRvWTbMfXm10UFwkUjAYA2wADHK84jZQWsuvWy+UA+Bqv7soHls7gV4x+fPCl\naXe6XPevRzPfnMacQnLL3AX8y1McuE1IVXCJgFMB2F6JtnnTB11OGAHsuk1vDTgK\nHNZp7MouS7CLNbBKjwnKMHgzC0lrff7DRgn3FjrjNbD5MYRURK2c4+4G8hLUhJGx\nhB52yIzrfWZQ20BQeIvTV3Lua87SSoQRg2jh/tIdPKZjlxUkH0zCMcmB4d0kouEr\noZz2V+rCGGXpdm9r9nUeyCuNhacgIMe00XSKPBz3kLALeKmfOu5U18DeZgk52hXs\nJtYKtv65G06bdxfFDW8kHh+x7j3+51930Qt1IK/o1dG9BSkmIPb5ZODcTgIJMeb2\nAHu84ABFTEQVlpygKFDXYvLIJadpygDpCSIaRsD0XHyCycE8lPwK281zIGR87jtt\ni8IMKskH2VQcR5a/Ei7qWn5+WVSMU0FqI448oheqcWrfdmGADRYyDLDG1kCQcfcx\nPdOLFjcn8Hw5PROsG+ZMup3oTDzxZ1R6jpBwp6zp5l4xgXDh1sZxbVEg6BnGHL7E\nwu0+L65/uIWnLTl1cO1cD39u/9RZooWM2EwPiW3lqFfjzHRmLNQ=\n=UaYz\n-----END PGP SIGNATURE-----",
        "payload": "tree 740355734f222d4634ce2549c7a16aeb8fca2486\nparent 26da318c12da9200d937ba110d34c0adddf69e51\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592290921 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395647 +0300\n\nrefactor: Prevent double lock in CTxMemPool::clear()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87d624c46c5ea32068a463feedef3b4647f13bd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87d624c46c5ea32068a463feedef3b4647f13bd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87d624c46c5ea32068a463feedef3b4647f13bd0/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26da318c12da9200d937ba110d34c0adddf69e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26da318c12da9200d937ba110d34c0adddf69e51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26da318c12da9200d937ba110d34c0adddf69e51"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "41a7b189b47d3191d1d6014c039823f4bf929903",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87d624c46c5ea32068a463feedef3b4647f13bd0/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87d624c46c5ea32068a463feedef3b4647f13bd0/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=87d624c46c5ea32068a463feedef3b4647f13bd0",
        "patch": "@@ -761,7 +761,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     tb = make_tx(/* output_values */ {5 * COIN, 3 * COIN}, /* inputs */  {ta});\n     tc = make_tx(/* output_values */ {2 * COIN}, /* inputs */ {tb}, /* input_indices */ {1});\n     td = make_tx(/* output_values */ {6 * COIN}, /* inputs */ {tb, tc}, /* input_indices */ {0, 0});\n-    pool.clear();\n+    pool.clearNonLockHelper();\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(ta));\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tb));\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tc));"
      },
      {
        "sha": "0680f5f6820a63b19f0962126e70c103943acc04",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87d624c46c5ea32068a463feedef3b4647f13bd0/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87d624c46c5ea32068a463feedef3b4647f13bd0/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=87d624c46c5ea32068a463feedef3b4647f13bd0",
        "patch": "@@ -287,7 +287,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vout[0].nValue = BLOCKSUBSIDY;\n@@ -301,7 +301,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // block size > limit\n     tx.vin[0].scriptSig = CScript();\n@@ -321,13 +321,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // orphan in *m_node.mempool, template creation fails\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // child with higher feerate than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n@@ -344,7 +344,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // coinbase in *m_node.mempool, template creation fails\n     tx.vin.resize(1);\n@@ -356,7 +356,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // double spend txn pair in *m_node.mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -369,7 +369,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // subsidy changing\n     int nHeight = ::ChainActive().Height();\n@@ -414,7 +414,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     // Delete the dummy blocks again.\n     while (::ChainActive().Tip()->nHeight > nHeight) {\n@@ -519,7 +519,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     ::ChainActive().Tip()->nHeight--;\n     SetMockTime(0);\n-    m_node.mempool->clear();\n+    m_node.mempool->clearNonLockHelper();\n \n     TestPackageSelection(chainparams, scriptPubKey, txFirst);\n "
      },
      {
        "sha": "884805f383553497a0e61593f8187d836848eed5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87d624c46c5ea32068a463feedef3b4647f13bd0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87d624c46c5ea32068a463feedef3b4647f13bd0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=87d624c46c5ea32068a463feedef3b4647f13bd0",
        "patch": "@@ -329,7 +329,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n     : nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)\n {\n-    _clear(); //lock free clear\n+    clearInternal();\n \n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n@@ -582,7 +582,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     blockSinceLastRollingFeeBump = true;\n }\n \n-void CTxMemPool::_clear()\n+void CTxMemPool::clearInternal()\n {\n     mapLinks.clear();\n     mapTx.clear();\n@@ -595,12 +595,6 @@ void CTxMemPool::_clear()\n     ++nTransactionsUpdated;\n }\n \n-void CTxMemPool::clear()\n-{\n-    LOCK(cs);\n-    _clear();\n-}\n-\n static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& mempoolDuplicate, const int64_t spendheight)\n {\n     TxValidationState dummy_state; // Not used. CheckTxInputs() should always pass"
      },
      {
        "sha": "b191a46c23008084da3d72f9b080a0333b46beb7",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87d624c46c5ea32068a463feedef3b4647f13bd0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87d624c46c5ea32068a463feedef3b4647f13bd0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=87d624c46c5ea32068a463feedef3b4647f13bd0",
        "patch": "@@ -580,6 +580,8 @@ class CTxMemPool\n     std::map<uint256, uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n     void ClearPrioritisation(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    // This method does not contain AssertLockHeld(cs), and should be used in CTxMemPool constructors only.\n+    void clearInternal() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n@@ -625,8 +627,18 @@ class CTxMemPool\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    void clear();\n-    void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n+    void clearNonLockHelper() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n+        clearInternal();\n+    }\n+    void clear() EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        clearInternal();\n+    }\n+\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid = false) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     void queryHashes(std::vector<uint256>& vtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     bool isSpent(const COutPoint& outpoint) const;"
      }
    ]
  },
  {
    "sha": "b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWI4ZGZkOTU3MDBlYmU4Y2ExYTdjYjM1NjY4OTA1OGUwNGQ3YWI0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:03:55Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:34:07Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::isSpent()",
      "tree": {
        "sha": "bb496b241248c5d18c3821932067236e4c9b19a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb496b241248c5d18c3821932067236e4c9b19a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U1z8ACgkQQQEIES5+\nqB9f5w/+MwuqVcsEwwjryL+hv2T3JtYeDA87NLpPfNk6TKHwQF+nIo3AArJkq9w0\nqAY2N6DbufU6xk/NWtrbUvWy9bC2BO62pfbR0ldH/uZLH3jo8PgkBWgrXRkf33nc\nOHMBUkfpyIDM/QqarzZA0BLrP5ZhCc2/PVJ3pUz0lLoj9zEJTy/sFGKO6S8wsmzV\nDbXF9Z6iAHUZWWmSsGpRDJR1hMJRJJZHLrnro9pAx146uuMAGXhZD7Ej7rzTYniH\nsBAUfbsty/8xHLKZsJM2tuT1XzqMdRxvukQbzuxFDRua0U7hdjgQyaDOPEkSx1wI\nNOBpPmKlQapY/VCaVOWpNa+X1nhExcN3RZLQOuMChxG4fjNlrSNfcpVFCMJZqRix\nc8Kqh3Wzh++T9cGsoDJ6ps9Vk1jamre0H7rqlqdLQxteCC30SdtnGSqnntObMBlv\nvQtD1ea+YTRD3ni5AWjVkwylq5SMzNWDbGN1CSmsFmk3C7AHINc/mRvgHISh9nSa\nSOw9NPxb8BniUi9AGUlnnMbjSvvg1GNXpBiEItd9VEt60XorP5KwtAsHQ1eXzzgL\nQ//pso9Usu9sdguH6QKq8zmvAXLOTKrihC5Z11YDUVh2j7aHaf7Dlh3ez1rhQUMz\nbjWVeq/RpDk3Fy+YDVKv4aD9j+e2WMv38qU+1CwUK1Qa4b8j3TU=\n=vbRY\n-----END PGP SIGNATURE-----",
        "payload": "tree bb496b241248c5d18c3821932067236e4c9b19a8\nparent 87d624c46c5ea32068a463feedef3b4647f13bd0\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592291035 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395647 +0300\n\nrefactor: Prevent double lock in CTxMemPool::isSpent()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87d624c46c5ea32068a463feedef3b4647f13bd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87d624c46c5ea32068a463feedef3b4647f13bd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87d624c46c5ea32068a463feedef3b4647f13bd0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "708e8416ca2da9b25360d82f408cf6f7d628bf75",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
        "patch": "@@ -533,10 +533,15 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n     {\n-        auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n+        auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool, bool mempool_locked) {\n             for (const COutPoint& vOutPoint : vOutPoints) {\n                 Coin coin;\n-                bool hit = !mempool.isSpent(vOutPoint) && view.GetCoin(vOutPoint, coin);\n+                bool hit;\n+                if (mempool_locked) {\n+                    hit = !mempool.isSpent(vOutPoint) && view.GetCoin(vOutPoint, coin);\n+                } else {\n+                    hit = WITH_LOCK(mempool.cs, return !mempool.isSpent(vOutPoint)) && view.GetCoin(vOutPoint, coin);\n+                }\n                 hits.push_back(hit);\n                 if (hit) outs.emplace_back(std::move(coin));\n             }\n@@ -549,10 +554,10 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n             LOCK2(cs_main, mempool->cs);\n             CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n             CCoinsViewMemPool viewMempool(&viewChain, *mempool);\n-            process_utxos(viewMempool, *mempool);\n+            process_utxos(viewMempool, *mempool, true /* mempool locked */);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n-            process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());\n+            process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool(), false /* mempool unlocked */);\n         }\n \n         for (size_t i = 0; i < hits.size(); ++i) {"
      },
      {
        "sha": "c85e0f19a6418d03d9eb891607bbf814c31d9fde",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
        "patch": "@@ -337,9 +337,9 @@ CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n     nCheckFrequency = 0;\n }\n \n-bool CTxMemPool::isSpent(const COutPoint& outpoint) const\n+bool CTxMemPool::isSpent(const COutPoint& outpoint) const NO_THREAD_SAFETY_ANALYSIS\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n     return mapNextTx.count(outpoint);\n }\n "
      },
      {
        "sha": "6d82a69fad8078585284590aa7e3ced1efea65fe",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
        "patch": "@@ -641,7 +641,7 @@ class CTxMemPool\n \n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid = false) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     void queryHashes(std::vector<uint256>& vtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    bool isSpent(const COutPoint& outpoint) const;\n+    bool isSpent(const COutPoint& outpoint) const; // EXCLUSIVE_LOCKS_REQUIRED(cs);\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);\n     /**"
      }
    ]
  },
  {
    "sha": "12922a0b65e175fb4956ebe41f2722a5b778c826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjkyMmEwYjY1ZTE3NWZiNDk1NmViZTQxZjI3MjJhNWI3NzhjODI2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:17:17Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:12Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::GetMinFee()",
      "tree": {
        "sha": "c54eb38ac1b01460a8885894c6de87d213e38303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c54eb38ac1b01460a8885894c6de87d213e38303"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12922a0b65e175fb4956ebe41f2722a5b778c826",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U14AACgkQQQEIES5+\nqB9kTw/+PUQSUxdPgXWDyT1+u+seBzfB5J7jUCw6mW2RXd+5Jyr6idLkz0XpxY0m\nz21kaIDj2n8yJzaafv8JzEPHwv506l+Aht+z86GlrKQfMnXcU/pJI04KICRbuujL\nQr7Dkdcwoa2q4cT+p8ubNZaSMMBGrcY1MltLpLhdYLUcndBfJeURtTefm1OKL8Dx\n+puMBfyFd3MUBtStrU45ASs41e5kl/BTRp3nRf+xXR1coHE3ieN7EZIghU2yYmM7\nVBex5MEOV8bd+sHTjIa+X1An9X0NP1RAf7VRwevw9MqSQlRo3Ty1jgySe6trvnuz\n0zFluA/gHS81ePIjwcaM+69p7vz24NGu3jn8VCmo7vVBcp8wed5d930QVfrEi+Fh\n8/YN29/7q7ZYElRbU9ZMq/dZqALEJIul+vDdqy+GJ4vTO25h6eukfoCU/EKtpFMx\nvBs5/6aVhKM5UZCJr4dOUPbatYf2+ifDHaDvjVlqzWVjBaGgK5G+HdTgxSZmmTRF\nwUS+2MvH4AX5uF8JNa8qf6jyrbL18/wVh0TdEZzlHXBXFmVtEXwMLPJkTv8tyo+3\nTQIKY9F5uYzhGj1p3H2QMOyjmZnKQeM/Zg5ECXEO0sd7JVOzpk8wVtJtkEhYyut2\nRl+8YaJeDd9ziUhE7PnV1Knb98CYIsytvm8BeIRLIUacCmuehpE=\n=FLEf\n-----END PGP SIGNATURE-----",
        "payload": "tree c54eb38ac1b01460a8885894c6de87d213e38303\nparent b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592291837 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395712 +0300\n\nrefactor: Prevent double lock in CTxMemPool::GetMinFee()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12922a0b65e175fb4956ebe41f2722a5b778c826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12922a0b65e175fb4956ebe41f2722a5b778c826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12922a0b65e175fb4956ebe41f2722a5b778c826/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9b8dfd95700ebe8ca1a7cb356689058e04d7ab4"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 22,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e0b6388d98aabdf0c75390646cfbd905f36c4168",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -333,9 +333,10 @@ class ChainImpl : public Chain\n     {\n         return ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     }\n-    CFeeRate mempoolMinFee() override\n+    CFeeRate mempoolMinFee() override EXCLUSIVE_LOCKS_REQUIRED(!::mempool.cs)\n     {\n         if (!m_node.mempool) return {};\n+        AssertLockNotHeld(m_node.mempool->cs);\n         return m_node.mempool->GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }"
      },
      {
        "sha": "a24411e80e7cbd189dbf36a3dbc60ffa94df287b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -4676,6 +4676,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         if (pto->m_tx_relay != nullptr && pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !pto->HasPermission(PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n         ) {\n+            AssertLockNotHeld(m_mempool.cs);\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};"
      },
      {
        "sha": "5ee3dc284716b64e0bd43c4b6bde3921af712d0b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -1416,7 +1416,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n-    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFeeNonLockHelper(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n     return ret;"
      },
      {
        "sha": "3618b467ac259842fa4142fadbb5f3fb790a0462",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -472,7 +472,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n     CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(CTransaction(tx3)) + GetVirtualTransactionSize(CTransaction(tx2)));\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n \n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vin.resize(2);\n@@ -549,27 +549,27 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(1).GetFeePerK(), 1000);\n     // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(1).GetFeePerK(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n \n     SetMockTime(0);"
      },
      {
        "sha": "7096efcd667b7cba4d68bdb99d94043604b9c53e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -999,8 +999,8 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     return it->second.children;\n }\n \n-CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n-    LOCK(cs);\n+CFeeRate CTxMemPool::GetMinFeeNonLockHelper(size_t sizelimit) const\n+{\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n         return CFeeRate(llround(rollingMinimumFeeRate));\n "
      },
      {
        "sha": "a2e7723fcbddd030c68a756684b84381584d8ab8",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -706,7 +706,13 @@ class CTxMemPool\n       *  takes the fee rate to go back down all the way to 0. When the feerate\n       *  would otherwise be half of this, it is set to 0 instead.\n       */\n-    CFeeRate GetMinFee(size_t sizelimit) const;\n+    CFeeRate GetMinFeeNonLockHelper(size_t sizelimit) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CFeeRate GetMinFee(size_t sizelimit) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return GetMinFeeNonLockHelper(sizelimit);\n+    }\n \n     /** Remove transactions from the mempool until its dynamic size is <= sizelimit.\n       *  pvNoSpendsRemaining, if set, will be populated with the list of outpoints"
      },
      {
        "sha": "27a94803fdc994c2d16f124a109579d7c66ae870",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12922a0b65e175fb4956ebe41f2722a5b778c826/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12922a0b65e175fb4956ebe41f2722a5b778c826/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=12922a0b65e175fb4956ebe41f2722a5b778c826",
        "patch": "@@ -522,9 +522,9 @@ class MemPoolAccept\n     bool Finalize(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Compare a package's feerate against minimum allowed.\n-    bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state)\n+    bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFeeNonLockHelper(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }"
      }
    ]
  },
  {
    "sha": "a249d59dc7b58bac5c5b702aa8a513a472092c60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjQ5ZDU5ZGM3YjU4YmFjNWM1YjcwMmFhOGE1MTNhNDcyMDkyYzYw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:28:41Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:50Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::GetTransactionAncestry()",
      "tree": {
        "sha": "6861749ac3eedd4e5943615c2f47b0ad1121038a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6861749ac3eedd4e5943615c2f47b0ad1121038a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a249d59dc7b58bac5c5b702aa8a513a472092c60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16YACgkQQQEIES5+\nqB9mgRAAsWmkEVwjimGM/xKUMte+xXfGs28lehbbv/qo0hnkwmSlLPeCKMLHrzz4\npHDxYDmACUzYtOl+Db84q0VtVEJehDYZH23lrDjffPzbPQBAmccSuSBObs+xFT00\n78k5vYaIC6fRrtL1ktlxauhpVdjkZuNZ4VgIEVKMBtSlxVmv+vDZYiBEVAYXDrdT\nEcJOPA2ZxfBWbdGY5fK/S0ETq0GFc888DjJ8N738XWJGLOZsg6g92fM6g6UfCmX5\nkCy5iaP1Qnwdt4FH2DUeNOKetKcFKFj8ffkiTSu7n4Sd/Rq7+xwrmR3xY4WZQxGp\n09cWSxOuZ72/fipQSvLNYJSLib5ui6j1uGIfisEZaNpeNMKwgbt3QiK/Ct1m+HJ1\nzL/ysOseY5wgt6o7vzAf/b9SoyT3/h7oMxF+3fJlvj5chnNHfrHKI42Z0nSlD9Sh\nVscrI0AJ4o9mQEuhWwRbESEXVORldV70PkSZ+T43UKSCGrv325bgTa16/npxHf6p\nSRbO7iI31JKdL9LdTXjOmzqOihVPra1uGkR5GD0EdBG381TWGEzQjaiP+LENab/4\nfvRnkBLUsYUxN7KGjAggAyHtRYRjeBx5d6KkLFv2Hgnqf3DX8U8ncEAttDrKffXs\nvG/2+7nTp8+/HZq/pfqXTWGxK1spfUf0dKtceqjQ0qptPHSpFE4=\n=ZKTv\n-----END PGP SIGNATURE-----",
        "payload": "tree 6861749ac3eedd4e5943615c2f47b0ad1121038a\nparent 12922a0b65e175fb4956ebe41f2722a5b778c826\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592292521 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395750 +0300\n\nrefactor: Prevent double lock in CTxMemPool::GetTransactionAncestry()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a249d59dc7b58bac5c5b702aa8a513a472092c60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a249d59dc7b58bac5c5b702aa8a513a472092c60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a249d59dc7b58bac5c5b702aa8a513a472092c60/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12922a0b65e175fb4956ebe41f2722a5b778c826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12922a0b65e175fb4956ebe41f2722a5b778c826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12922a0b65e175fb4956ebe41f2722a5b778c826"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f7503e697e8c6bcd7179af2dcecb81ade2ba9053",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a249d59dc7b58bac5c5b702aa8a513a472092c60/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a249d59dc7b58bac5c5b702aa8a513a472092c60/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=a249d59dc7b58bac5c5b702aa8a513a472092c60",
        "patch": "@@ -298,10 +298,12 @@ class ChainImpl : public Chain\n         // that Chain clients do not need to know about.\n         return TransactionError::OK == err;\n     }\n-    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n+    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override EXCLUSIVE_LOCKS_REQUIRED(!::mempool.cs)\n     {\n         ancestors = descendants = 0;\n         if (!m_node.mempool) return;\n+        AssertLockNotHeld(m_node.mempool->cs);\n+        LOCK(m_node.mempool->cs);\n         m_node.mempool->GetTransactionAncestry(txid, ancestors, descendants);\n     }\n     void getPackageLimits(unsigned int& limit_ancestor_count, unsigned int& limit_descendant_count) override"
      },
      {
        "sha": "2869df2e39efc9ccadd7f125c13041f804dba75c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a249d59dc7b58bac5c5b702aa8a513a472092c60/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a249d59dc7b58bac5c5b702aa8a513a472092c60/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a249d59dc7b58bac5c5b702aa8a513a472092c60",
        "patch": "@@ -1096,8 +1096,8 @@ uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {\n     return maximum;\n }\n \n-void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const {\n-    LOCK(cs);\n+void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const\n+{\n     auto it = mapTx.find(txid);\n     ancestors = descendants = 0;\n     if (it != mapTx.end()) {"
      },
      {
        "sha": "8463847d58367d09874ae07dc13b9167ca38fe47",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a249d59dc7b58bac5c5b702aa8a513a472092c60/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a249d59dc7b58bac5c5b702aa8a513a472092c60/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a249d59dc7b58bac5c5b702aa8a513a472092c60",
        "patch": "@@ -727,7 +727,7 @@ class CTxMemPool\n      * Calculate the ancestor and descendant count for the given transaction.\n      * The counts include the transaction itself.\n      */\n-    void GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const;\n+    void GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** @returns true if the mempool is fully loaded */\n     bool IsLoaded() const;"
      }
    ]
  },
  {
    "sha": "89dfadc5890a4af30fd829b5620659c276c50ba4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWRmYWRjNTg5MGE0YWYzMGZkODI5YjU2MjA2NTljMjc2YzUwYmE0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:30:18Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:50Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::IsLoaded()",
      "tree": {
        "sha": "001b17772172f586a854696d4faefc6c3da29116",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/001b17772172f586a854696d4faefc6c3da29116"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89dfadc5890a4af30fd829b5620659c276c50ba4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16YACgkQQQEIES5+\nqB+fjA//aOTGQg0PTV86SbvB7CuponrRmztfXfOmQZmaF2LDT5BuYsdcLbtHXKHI\n44qMeGd8ba9zxIK8DAzSnVkOm04ijn1RDk9oBLFNyOoycl4dbkl+EdIQHaTpnyP6\nRDzwaqgZ+8xc+gsBm46dWPwActvwbM0sUWuSFwBHorAzVNA9f2EdmHCfpa5XCgcP\nzvr6KxmpllmcY/kHAC6M/0/EQ1LxBmi1GXaiS+DhJm1jmfH0Xn3D3TobGX4bwepH\nIPVyCzWG9sS8O+jaGOhHVa6kpU8/Qfl6wp/C94XFF5MK8A1GjiXXkzOImNrq4kgR\n4tFhCQig8z9oS1JIc9cbx7UfPZHF9XHNyuq+OMW/km1E7Ddw3uOJ7g8k9Ic2gdXl\nfOfzPJ4Uq5h6FNVUOwvoCfp0dCXNPfTcjim8KxXEml1GzVt2aTbRQ1eKGdfyek7s\nYGMskHx67qwjRfljxL8fL73AHuh1yw9OZgyhoe4Y23fcb/YrocFIjvM3JHRr6H6T\nBsuf3pkrbSE7c9HTOxONvbvhhPwDxLlbtJi149wwTfN+V7ZV677415+lPsrq41e0\njZKvA16S8gi1tUt1+7Ke8Tg38hne6+Nn2H+uKM47Ics+WxSRMERVsT8O9guloI+M\nquUDAENvgcJXPttbxupryrKZv0brnnAOPuA8bkwoegsPBruDOKs=\n=pJ5/\n-----END PGP SIGNATURE-----",
        "payload": "tree 001b17772172f586a854696d4faefc6c3da29116\nparent a249d59dc7b58bac5c5b702aa8a513a472092c60\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592292618 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395750 +0300\n\nrefactor: Prevent double lock in CTxMemPool::IsLoaded()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89dfadc5890a4af30fd829b5620659c276c50ba4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89dfadc5890a4af30fd829b5620659c276c50ba4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89dfadc5890a4af30fd829b5620659c276c50ba4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a249d59dc7b58bac5c5b702aa8a513a472092c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a249d59dc7b58bac5c5b702aa8a513a472092c60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a249d59dc7b58bac5c5b702aa8a513a472092c60"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "857d43e7088b6d58c790bb9221256e5ca2a87fc5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89dfadc5890a4af30fd829b5620659c276c50ba4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89dfadc5890a4af30fd829b5620659c276c50ba4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=89dfadc5890a4af30fd829b5620659c276c50ba4",
        "patch": "@@ -1410,7 +1410,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     // Make sure this call is atomic in the pool.\n     LOCK(pool.cs);\n     UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"loaded\", pool.IsLoaded());\n+    ret.pushKV(\"loaded\", pool.IsLoadedNonLockHelper());\n     ret.pushKV(\"size\", (int64_t)pool.size());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());"
      },
      {
        "sha": "a060cae59ed52c8ede92dbb7d6e955a557c9b83e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89dfadc5890a4af30fd829b5620659c276c50ba4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89dfadc5890a4af30fd829b5620659c276c50ba4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=89dfadc5890a4af30fd829b5620659c276c50ba4",
        "patch": "@@ -1106,9 +1106,8 @@ void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors,\n     }\n }\n \n-bool CTxMemPool::IsLoaded() const\n+bool CTxMemPool::IsLoadedNonLockHelper() const\n {\n-    LOCK(cs);\n     return m_is_loaded;\n }\n "
      },
      {
        "sha": "e8bec6140f1116643d9b55ed93bb95960dda73f9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89dfadc5890a4af30fd829b5620659c276c50ba4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89dfadc5890a4af30fd829b5620659c276c50ba4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=89dfadc5890a4af30fd829b5620659c276c50ba4",
        "patch": "@@ -730,7 +730,13 @@ class CTxMemPool\n     void GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** @returns true if the mempool is fully loaded */\n-    bool IsLoaded() const;\n+    bool IsLoadedNonLockHelper() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    bool IsLoaded() const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return IsLoadedNonLockHelper();\n+    }\n \n     /** Sets the current loaded state */\n     void SetIsLoaded(bool loaded) EXCLUSIVE_LOCKS_REQUIRED(!cs);"
      }
    ]
  },
  {
    "sha": "e1eab65372089837dc78f9447e58681dde5c292f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWVhYjY1MzcyMDg5ODM3ZGM3OGY5NDQ3ZTU4NjgxZGRlNWMyOTJm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T07:31:33Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:50Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::size()",
      "tree": {
        "sha": "04e1cb9e22d872a64b15c9fe2a7a099c48357b6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04e1cb9e22d872a64b15c9fe2a7a099c48357b6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1eab65372089837dc78f9447e58681dde5c292f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16YACgkQQQEIES5+\nqB/8UhAAhw7SDE86tjWvU51bL1XnDk2fsjGXuvk1mogb04jxHPdCeKE/arNJCe9o\ndRCWenWXxhxyIDeyHfel30AL2/MB5lwLI3Jl8uI5BB2VtNGyS9IYO/wfDkmc7N9m\ndgi21a/AsjVxhQdVwZwR4N2nngFrDC9Nzp+EBCwwQ563cNwOzBJXW9JAgLg4iwhC\n61xvLBqhXxDGYRGSxZ8MdvZ8RnkJ3J3uscQ92xMdqO57gswqvZfa8XsHae1JX4tO\nB7D7J7BWT1rBqwVS/Qpyaem0o9f3g2blm4LxS02B1iJectnIrjvp46rXK4rS2RLt\n43QgzwbvlA+FI9KWDq0q6X8X28v+jzuWqcmXReZ8kyyStm0Tnn/1tJ1FF7SXYR1a\nNhQCMs1xvOKNYXJ9D9eF09EzliKrcNslkOQnCkY4nQQV9zoSzK6rZ6b9Vv9oi0vV\nIW55QTnKJ0B1QvF4XHFvd7CWROdZ5whxyzLbIdhqtAbJnVouitzagCKTHM3PwcUC\npAFaXT8i3gVhKoNKZlwDiYhU7GYKxj630z9WqkS7XqthUSlYvKc63lYii0Ca6tqr\n0O5RfH9bgifIdl2rMwvdjBXNBGlvEO2QaL5VLwgLJOZqQa8ze/dn13KkDGP/V3ny\nDJMiVEEDlQIuGBDmY+6JDoZT2rgvNrTBBMZ7dBHaUDytn8BIv1g=\n=0908\n-----END PGP SIGNATURE-----",
        "payload": "tree 04e1cb9e22d872a64b15c9fe2a7a099c48357b6f\nparent 89dfadc5890a4af30fd829b5620659c276c50ba4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592292693 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395750 +0300\n\nrefactor: Prevent double lock in CTxMemPool::size()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1eab65372089837dc78f9447e58681dde5c292f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1eab65372089837dc78f9447e58681dde5c292f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1eab65372089837dc78f9447e58681dde5c292f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89dfadc5890a4af30fd829b5620659c276c50ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89dfadc5890a4af30fd829b5620659c276c50ba4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89dfadc5890a4af30fd829b5620659c276c50ba4"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "21887ee28143a2152f196a9df34a4ffbd7724777",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1eab65372089837dc78f9447e58681dde5c292f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1eab65372089837dc78f9447e58681dde5c292f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e1eab65372089837dc78f9447e58681dde5c292f",
        "patch": "@@ -1411,7 +1411,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     LOCK(pool.cs);\n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"loaded\", pool.IsLoadedNonLockHelper());\n-    ret.pushKV(\"size\", (int64_t)pool.size());\n+    ret.pushKV(\"size\", (int64_t)pool.sizeNonLockHelper());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;"
      },
      {
        "sha": "f605ccd53494c18d5ae10ffd0d2525c48ae3f742",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1eab65372089837dc78f9447e58681dde5c292f/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1eab65372089837dc78f9447e58681dde5c292f/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=e1eab65372089837dc78f9447e58681dde5c292f",
        "patch": "@@ -80,9 +80,9 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n \n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n-        size_t poolSize = pool.size();\n+        size_t poolSize = pool.sizeNonLockHelper();\n         pool.removeRecursive(*block.vtx[2], MemPoolRemovalReason::REPLACED);\n-        BOOST_CHECK_EQUAL(pool.size(), poolSize - 1);\n+        BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), poolSize - 1);\n \n         CBlock block2;\n         {"
      },
      {
        "sha": "278630a202dc2d82cc67fa810919bd454b4fda5d",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1eab65372089837dc78f9447e58681dde5c292f/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1eab65372089837dc78f9447e58681dde5c292f/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=e1eab65372089837dc78f9447e58681dde5c292f",
        "patch": "@@ -60,15 +60,15 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     LOCK2(cs_main, testPool.cs);\n \n     // Nothing in pool, remove should do nothing:\n-    unsigned int poolSize = testPool.size();\n+    unsigned int poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize);\n \n     // Just the parent:\n     testPool.addUnchecked(entry.FromTx(txParent));\n-    poolSize = testPool.size();\n+    poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize - 1);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize - 1);\n \n     // Parent, children, grandchildren:\n     testPool.addUnchecked(entry.FromTx(txParent));\n@@ -78,21 +78,21 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         testPool.addUnchecked(entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n-    poolSize = testPool.size();\n+    poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txChild[0]), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize - 2);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize - 2);\n     // ... make sure grandchild and child are gone:\n-    poolSize = testPool.size();\n+    poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txGrandChild[0]), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n-    poolSize = testPool.size();\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize);\n+    poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txChild[0]), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize);\n     // Remove parent, all children/grandchildren should go:\n-    poolSize = testPool.size();\n+    poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize - 5);\n-    BOOST_CHECK_EQUAL(testPool.size(), 0U);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize - 5);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), 0U);\n \n     // Add children and grandchildren, but NOT the parent (simulate the parent being in a block)\n     for (int i = 0; i < 3; i++)\n@@ -102,16 +102,16 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n-    poolSize = testPool.size();\n+    poolSize = testPool.sizeNonLockHelper();\n     testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n-    BOOST_CHECK_EQUAL(testPool.size(), poolSize - 6);\n-    BOOST_CHECK_EQUAL(testPool.size(), 0U);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), poolSize - 6);\n+    BOOST_CHECK_EQUAL(testPool.sizeNonLockHelper(), 0U);\n }\n \n template<typename name>\n static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n-    BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), sortedOrder.size());\n     typename CTxMemPool::indexed_transaction_set::index<name>::type::iterator it = pool.mapTx.get<name>().begin();\n     int count=0;\n     for (; it != pool.mapTx.get<name>().end(); ++it, ++count) {\n@@ -160,7 +160,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx5.vout[0].nValue = 11 * COIN;\n     entry.nTime = 1;\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tx5));\n-    BOOST_CHECK_EQUAL(pool.size(), 5U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 5U);\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n@@ -178,7 +178,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n     pool.addUnchecked(entry.Fee(0LL).FromTx(tx6));\n-    BOOST_CHECK_EQUAL(pool.size(), 6U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 6U);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n     CheckSort<descendant_score>(pool, sortedOrder);\n@@ -201,7 +201,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n     pool.addUnchecked(entry.FromTx(tx7), setAncestors);\n-    BOOST_CHECK_EQUAL(pool.size(), 7U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 7U);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n     sortedOrder.erase(sortedOrder.begin());\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n \n     // tx9 should be sorted low\n-    BOOST_CHECK_EQUAL(pool.size(), 9U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 9U);\n     sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n@@ -282,7 +282,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n-    BOOST_CHECK_EQUAL(pool.size(), 10U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 10U);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n     pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n@@ -333,7 +333,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tx5));\n-    BOOST_CHECK_EQUAL(pool.size(), 5U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 5U);\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     uint64_t tx6Size = GetVirtualTransactionSize(CTransaction(tx6));\n \n     pool.addUnchecked(entry.Fee(0LL).FromTx(tx6));\n-    BOOST_CHECK_EQUAL(pool.size(), 6U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 6U);\n     // Ties are broken by hash\n     if (tx3.GetHash() < tx6.GetHash())\n         sortedOrder.push_back(tx6.GetHash().ToString());\n@@ -384,7 +384,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n \n     pool.addUnchecked(entry.Fee(fee).FromTx(tx7));\n-    BOOST_CHECK_EQUAL(pool.size(), 7U);\n+    BOOST_CHECK_EQUAL(pool.sizeNonLockHelper(), 7U);\n     sortedOrder.insert(sortedOrder.begin()+1, tx7.GetHash().ToString());\n     CheckSort<ancestor_score>(pool, sortedOrder);\n "
      },
      {
        "sha": "5fc1b54eeb889137c0ede8f32f4c5784800ef4c3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1eab65372089837dc78f9447e58681dde5c292f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1eab65372089837dc78f9447e58681dde5c292f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e1eab65372089837dc78f9447e58681dde5c292f",
        "patch": "@@ -741,12 +741,18 @@ class CTxMemPool\n     /** Sets the current loaded state */\n     void SetIsLoaded(bool loaded) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n \n-    unsigned long size() const\n+    unsigned long sizeNonLockHelper() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n-        LOCK(cs);\n         return mapTx.size();\n     }\n \n+    unsigned long size() const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return sizeNonLockHelper();\n+    }\n+\n     uint64_t GetTotalTxSize() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n         AssertLockHeld(cs);"
      }
    ]
  },
  {
    "sha": "ae480146808ebfe4c32f42b46f922d5621c0a107",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTQ4MDE0NjgwOGViZmU0YzMyZjQyYjQ2ZjkyMmQ1NjIxYzBhMTA3",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T08:38:12Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:51Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::exists()",
      "tree": {
        "sha": "946184b607fcbd38bd8ccdb75f21eb9101be5235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/946184b607fcbd38bd8ccdb75f21eb9101be5235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae480146808ebfe4c32f42b46f922d5621c0a107",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16cACgkQQQEIES5+\nqB/kRw//fbRe2e6GOazN+O7ySEIOD5zOF5edHi1eiAs6sSxMX+fl9wXFYFPuB4QB\nFj8LtKxY/zM1rH2qWwSfHVkc/6Pudu2d0bJj+xQCSX0z0abmUPNadH1xIEoPfigI\nJWU9hHdU17NqNwhzbtPkgdk6yz9BfqcbrLr7DEe/JiTsEq/dLjWaZpvGHkXxwPUT\n8zZ/A4TQ7Fa1pLwZIsKKbm5f48fXHuGc3eL2JQbMGhG80mmoV56wvKScfxLqFgCK\nacALugRFPEZZPEskoCTlM+vqVEV91PSGAhJcGnSddLebyeAp+EECAyUEqNMyPr4v\nMxiLN2GnmdZEMj/ls0hFRbo115/HnvZ9QqGzxsBrJSR/QRtU5lly7acPjKxVdgqj\nt3X5fhR0OSJ+lyVmRPqwo9jStgRVydKqJ947x86MIaRi9OXsnFrLnoJMvd+wuF/p\nq7Q3LpbCGqhb8UOlsVVGPOZ3rsNX7U4kmEqW6opK7ZRSuZYCZ1MsFfMNt4SDVewN\nDutyihpnj210+rRp/vDwOFgAXK94141g4sUeJTdTUbsbh+JtodB/KO+E5lEDevTB\n5x/vRRxtu9Pr15FGrCkyWebqEd2rcWSTVFWg5wDJuKhuYFGDEDoHcR6UfIV2p0Jl\n1Csf1yxCOjvoo1EmjKuE8mA6CWubaMH+OA+s39lGmeKOykuJQ9M=\n=JFoN\n-----END PGP SIGNATURE-----",
        "payload": "tree 946184b607fcbd38bd8ccdb75f21eb9101be5235\nparent e1eab65372089837dc78f9447e58681dde5c292f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592296692 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395751 +0300\n\nrefactor: Prevent double lock in CTxMemPool::exists()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae480146808ebfe4c32f42b46f922d5621c0a107",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae480146808ebfe4c32f42b46f922d5621c0a107",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae480146808ebfe4c32f42b46f922d5621c0a107/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1eab65372089837dc78f9447e58681dde5c292f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1eab65372089837dc78f9447e58681dde5c292f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1eab65372089837dc78f9447e58681dde5c292f"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 47,
      "deletions": 30
    },
    "files": [
      {
        "sha": "2c27c844f6ea36b67ef56e4ca2d1346bd5a43aa4",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae480146808ebfe4c32f42b46f922d5621c0a107/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae480146808ebfe4c32f42b46f922d5621c0a107/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=ae480146808ebfe4c32f42b46f922d5621c0a107",
        "patch": "@@ -18,7 +18,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n \n     // If this transaction is not in our mempool, then we can't be sure\n     // we will know about all its inputs.\n-    if (!pool.exists(tx.GetHash())) {\n+    if (!pool.existsNonLockHelper(tx.GetHash())) {\n         return RBFTransactionState::UNKNOWN;\n     }\n "
      },
      {
        "sha": "de45056a121227862d9846a8ffce12ca17d0d7d6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae480146808ebfe4c32f42b46f922d5621c0a107/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae480146808ebfe4c32f42b46f922d5621c0a107/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ae480146808ebfe4c32f42b46f922d5621c0a107",
        "patch": "@@ -449,7 +449,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n     {\n-        if (pool.exists(txin.prevout.hash))\n+        if (pool.existsNonLockHelper(txin.prevout.hash))\n             setDepends.insert(txin.prevout.hash.ToString());\n     }\n "
      },
      {
        "sha": "9f95dbb4336c505f17ee6e0d39a98ab8b84ebb02",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae480146808ebfe4c32f42b46f922d5621c0a107/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae480146808ebfe4c32f42b46f922d5621c0a107/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=ae480146808ebfe4c32f42b46f922d5621c0a107",
        "patch": "@@ -444,12 +444,12 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(entry.Fee(5000LL).FromTx(tx2));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n-    BOOST_CHECK(pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx1.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx2.GetHash()));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n-    BOOST_CHECK(pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx1.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx2.GetHash()));\n \n     pool.addUnchecked(entry.FromTx(tx2));\n     CMutableTransaction tx3 = CMutableTransaction();\n@@ -462,14 +462,14 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(entry.Fee(20000LL).FromTx(tx3));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n-    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(pool.exists(tx2.GetHash()));\n-    BOOST_CHECK(pool.exists(tx3.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx1.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx2.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx3.GetHash()));\n \n     pool.TrimToSize(GetVirtualTransactionSize(CTransaction(tx1))); // mempool is limited to tx1's size in memory usage, so nothing fits\n-    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx3.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx1.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx2.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx3.GetHash()));\n \n     CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(CTransaction(tx3)) + GetVirtualTransactionSize(CTransaction(tx2)));\n     BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n@@ -529,19 +529,19 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n-    BOOST_CHECK(pool.exists(tx4.GetHash()));\n-    BOOST_CHECK(pool.exists(tx6.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx4.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx6.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx7.GetHash()));\n \n-    if (!pool.exists(tx5.GetHash()))\n+    if (!pool.existsNonLockHelper(tx5.GetHash()))\n         pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n-    BOOST_CHECK(pool.exists(tx4.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx5.GetHash()));\n-    BOOST_CHECK(pool.exists(tx6.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx4.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx5.GetHash()));\n+    BOOST_CHECK(pool.existsNonLockHelper(tx6.GetHash()));\n+    BOOST_CHECK(!pool.existsNonLockHelper(tx7.GetHash()));\n \n     pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));"
      },
      {
        "sha": "d9ec0773df42c646570bbb4fc534c77b056cf1cd",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae480146808ebfe4c32f42b46f922d5621c0a107/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae480146808ebfe4c32f42b46f922d5621c0a107/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ae480146808ebfe4c32f42b46f922d5621c0a107",
        "patch": "@@ -889,7 +889,7 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n {\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        if (exists(tx.vin[i].prevout.hash))\n+        if (existsNonLockHelper(tx.vin[i].prevout.hash))\n             return false;\n     return true;\n }\n@@ -1062,7 +1062,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         if (pvNoSpendsRemaining) {\n             for (const CTransaction& tx : txn) {\n                 for (const CTxIn& txin : tx.vin) {\n-                    if (exists(txin.prevout.hash)) continue;\n+                    if (existsNonLockHelper(txin.prevout.hash)) continue;\n                     pvNoSpendsRemaining->push_back(txin.prevout);\n                 }\n             }"
      },
      {
        "sha": "7b78fc9d272b13586ea8260141294c559a625074",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae480146808ebfe4c32f42b46f922d5621c0a107/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae480146808ebfe4c32f42b46f922d5621c0a107/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ae480146808ebfe4c32f42b46f922d5621c0a107",
        "patch": "@@ -759,15 +759,32 @@ class CTxMemPool\n         return totalTxSize;\n     }\n \n-    bool exists(const GenTxid& gtxid) const\n+    bool existsNonLockHelper(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n-        LOCK(cs);\n         if (gtxid.IsWtxid()) {\n             return (mapTx.get<index_by_wtxid>().count(gtxid.GetHash()) != 0);\n         }\n         return (mapTx.count(gtxid.GetHash()) != 0);\n     }\n-    bool exists(const uint256& txid) const { return exists(GenTxid{false, txid}); }\n+\n+    bool exists(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return existsNonLockHelper(gtxid);\n+    }\n+\n+    bool existsNonLockHelper(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        return existsNonLockHelper(GenTxid{false, txid});\n+    }\n+\n+    bool exists(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return existsNonLockHelper(txid);\n+    }\n \n     CTransactionRef get(const uint256& hash) const;\n     txiter get_iter_from_wtxid(const uint256& wtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n@@ -787,7 +804,7 @@ class CTxMemPool\n         AssertLockNotHeld(cs);\n         LOCK(cs);\n         // Sanity Check: the transaction should also be in the mempool\n-        if (exists(txid)) {\n+        if (existsNonLockHelper(txid)) {\n             m_unbroadcast_txids[txid] = wtxid;\n         }\n     }"
      },
      {
        "sha": "06825455d77a23aa80c78322d8011fee02ee036b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae480146808ebfe4c32f42b46f922d5621c0a107/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae480146808ebfe4c32f42b46f922d5621c0a107/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ae480146808ebfe4c32f42b46f922d5621c0a107",
        "patch": "@@ -391,7 +391,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (mempool.exists((*it)->GetHash())) {\n+        } else if (mempool.existsNonLockHelper((*it)->GetHash())) {\n             vHashUpdate.push_back((*it)->GetHash());\n         }\n         ++it;\n@@ -600,7 +600,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n     // is it already in the memory pool?\n-    if (m_pool.exists(hash)) {\n+    if (m_pool.existsNonLockHelper(hash)) {\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n     }\n \n@@ -889,7 +889,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                 // Rather than check the UTXO set - potentially expensive -\n                 // it's cheaper to just check if the new input refers to a\n                 // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n+                if (m_pool.existsNonLockHelper(tx.vin[j].prevout.hash)) {\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n                             strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                 hash.ToString(), j));\n@@ -1022,7 +1022,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n         LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n-        if (!m_pool.exists(hash))\n+        if (!m_pool.existsNonLockHelper(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "ce19fb90d43b975602b4ceed6e2d71a772cfb637",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTE5ZmI5MGQ0M2I5NzU2MDJiNGNlZWQ2ZTJkNzFhNzcyY2ZiNjM3",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T14:30:16Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:51Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::get()",
      "tree": {
        "sha": "ee00093a7e83af0c57d16c09e6f3020e0eaf00f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee00093a7e83af0c57d16c09e6f3020e0eaf00f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce19fb90d43b975602b4ceed6e2d71a772cfb637",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16cACgkQQQEIES5+\nqB8lghAAnyQur5DPS1KS7G0wJHN23go+1fabnZ14Z3Zzz5Tl1tVsNvTBpLEBj0uB\n7BoUvDhRxSrZdgFn4tXS5GzFOTnOGmxNglgd5NWIsA6vGWlgdHA+U9HPKWqwsRPH\nHUkWg7w8OOSJHxC2EmgKxOWC7t0eMniejPAwL+/nZn5tFtKzKGF7TjWAeD/lbLl+\nWfFGLqEXXBGNKIGNSTLAEm66DhyG0ElwamAETUSsXy50hoGdfH5bodcLRCQyPxvb\nYHPR1hSidSclounLshvNq7AKrrL/11mT4gKp03rdeSKeKaESxhDl0uIGcVTOQya0\nzaKT1KM75hmHgBbWHn25nE0qrTvR3mBGfo34JjAmuSM5XbfvZC7U7kzjcwO0BhzL\nC/uxt8o66MxDJ95mJELwayZxuk81p/AToqqEnrs5WkNefZabVPQ09IfT4a48Ff+1\nQ4R7SyyCHqTUnY8URrgqaeP7ixgmB6qWFbVmcOIstZFR4H8otKXAtDtPiJz6fY2T\nLRTv5Pl6ONGUxuC+Q6W1HYi3/v/A1R/yBH6Jong8AAHKXXKasg0tlDta8y4QuZuQ\nbY3HpbjPTHVPqua3J9kqU9P/5bKMCMKCKcXQ1tyZxOgBQ9tm2kMcS7CKD9BAB+JA\n9M7tgbV2KR4n14lCMvwspNexBa3Ehh7wQZt0UVI3gy17qRjzxI4=\n=dKtb\n-----END PGP SIGNATURE-----",
        "payload": "tree ee00093a7e83af0c57d16c09e6f3020e0eaf00f2\nparent ae480146808ebfe4c32f42b46f922d5621c0a107\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592317816 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395751 +0300\n\nrefactor: Prevent double lock in CTxMemPool::get()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce19fb90d43b975602b4ceed6e2d71a772cfb637",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce19fb90d43b975602b4ceed6e2d71a772cfb637",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce19fb90d43b975602b4ceed6e2d71a772cfb637/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae480146808ebfe4c32f42b46f922d5621c0a107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae480146808ebfe4c32f42b46f922d5621c0a107",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae480146808ebfe4c32f42b46f922d5621c0a107"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a2927f75d59759cc6477c7dca6a27d1a489ab0fb",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=ce19fb90d43b975602b4ceed6e2d71a772cfb637",
        "patch": "@@ -68,7 +68,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             // 9/10 blocks add 2nd highest and so on until ...\n             // 1/10 blocks add lowest fee transactions\n             while (txHashes[9-h].size()) {\n-                CTransactionRef ptx = mpool.get(txHashes[9-h].back());\n+                CTransactionRef ptx = mpool.getNonLockHelper(txHashes[9-h].back());\n                 if (ptx)\n                     block.push_back(ptx);\n                 txHashes[9-h].pop_back();\n@@ -144,7 +144,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Estimates should still not be below original\n     for (int j = 0; j < 10; j++) {\n         while(txHashes[j].size()) {\n-            CTransactionRef ptx = mpool.get(txHashes[j].back());\n+            CTransactionRef ptx = mpool.getNonLockHelper(txHashes[j].back());\n             if (ptx)\n                 block.push_back(ptx);\n             txHashes[j].pop_back();\n@@ -165,7 +165,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n                 mpool.addUnchecked(entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n-                CTransactionRef ptx = mpool.get(hash);\n+                CTransactionRef ptx = mpool.getNonLockHelper(hash);\n                 if (ptx)\n                     block.push_back(ptx);\n "
      },
      {
        "sha": "5bc53abf99174f037197d85bcdb596cb306aad7f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ce19fb90d43b975602b4ceed6e2d71a772cfb637",
        "patch": "@@ -795,9 +795,8 @@ std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n     return ret;\n }\n \n-CTransactionRef CTxMemPool::get(const uint256& hash) const\n+CTransactionRef CTxMemPool::getNonLockHelper(const uint256& hash) const\n {\n-    LOCK(cs);\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n         return nullptr;\n@@ -896,11 +895,12 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n \n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n-bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const NO_THREAD_SAFETY_ANALYSIS\n+{\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n     // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n-    CTransactionRef ptx = mempool.get(outpoint.hash);\n+    CTransactionRef ptx = mempool.getNonLockHelper(outpoint.hash);\n     if (ptx) {\n         if (outpoint.n < ptx->vout.size()) {\n             coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);"
      },
      {
        "sha": "70c93b3a4cc140b513f9fc57b09d10f725a04b5e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ce19fb90d43b975602b4ceed6e2d71a772cfb637",
        "patch": "@@ -786,12 +786,19 @@ class CTxMemPool\n         return existsNonLockHelper(txid);\n     }\n \n-    CTransactionRef get(const uint256& hash) const;\n+    CTransactionRef getNonLockHelper(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CTransactionRef get(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return getNonLockHelper(hash);\n+    }\n     txiter get_iter_from_wtxid(const uint256& wtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n         AssertLockHeld(cs);\n         return mapTx.project<0>(mapTx.get<index_by_wtxid>().find(wtxid));\n     }\n+\n     TxMempoolInfo info(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     TxMempoolInfo info(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     std::vector<TxMempoolInfo> infoAll() const;"
      },
      {
        "sha": "abcccf98fbbed6d06b359550bd6b5556d4e7f0ba",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce19fb90d43b975602b4ceed6e2d71a772cfb637/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ce19fb90d43b975602b4ceed6e2d71a772cfb637",
        "patch": "@@ -431,7 +431,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n         if (coin.IsSpent()) return false;\n \n         // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n+        const CTransactionRef& txFrom = pool.getNonLockHelper(txin.prevout.hash);\n         if (txFrom) {\n             assert(txFrom->GetHash() == txin.prevout.hash);\n             assert(txFrom->vout.size() > txin.prevout.n);"
      }
    ]
  },
  {
    "sha": "5eac81656b5a90685dda21a45b71f13a09dd69dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWFjODE2NTZiNWE5MDY4NWRkYTIxYTQ1YjcxZjEzYTA5ZGQ2OWRj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T14:32:26Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:51Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::infoAll()",
      "tree": {
        "sha": "097358ec4063d84b40f23cb2c715060312cb679b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/097358ec4063d84b40f23cb2c715060312cb679b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eac81656b5a90685dda21a45b71f13a09dd69dc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16cACgkQQQEIES5+\nqB+35xAAlT9lARVk959ya0V0n8cx8IYegQG536IInt0ezN69JD+PVDq2TFmGlAQ3\ne7fK9/NPCRrpYxl/2jUcZre7D7aEZJuNE2QRX6J9pUkogzAojYtzJGH8BR6HQupo\nwU0RqgUgk7bcfQeI8hVDQbNjsjFfzY+yyfwWRiSBQ9wAjwhKeXkgVRl+g0MF+qrm\n4AEhu780Nub2mYR1B8LCV83AeoTWturfekrZ2lIjx7IgYCob63ytdMUa6SKmgcuR\n9nDUQNPS7dC6Fa9Z29qgJoSjKS63lYQv3PuE6RsNFjZy7Bd1ytwUQsppa+VGEr8q\nQnH4VtECmKN9lhirNB/0M7aeCRWhPYJLM0W6SJzIE4+WOOlHTyEsMafSTbhBUKlm\nnJvHNqSEeTfg2SyCft7I5ghCPaZqv6x3MH21Vmso4bewRov8aTdOWjEVCCwhJDoC\nHj7UyyLhHH+m9+0jSQCI26OK1MgTxdkt4CIdL2YJp8/90NE13F05DqIIHVo3Bv0j\nzyA87jB77LZz3p83rjDgyQtlmQgNflDMb/7MdIEyQE7rE+KfI7M5RhI1t1KhAcke\n/ZagD/exrM+DAcdnujXsB6c3/WsGkBEbpWDFUKr1sUKzROP85JVM8g2NcwW6IIca\nr7j1+20z46agcE3yR52fo1I+29tbwgiFlNAoznE2NGJCB3kLiOk=\n=KT04\n-----END PGP SIGNATURE-----",
        "payload": "tree 097358ec4063d84b40f23cb2c715060312cb679b\nparent ce19fb90d43b975602b4ceed6e2d71a772cfb637\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592317946 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395751 +0300\n\nrefactor: Prevent double lock in CTxMemPool::infoAll()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eac81656b5a90685dda21a45b71f13a09dd69dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eac81656b5a90685dda21a45b71f13a09dd69dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eac81656b5a90685dda21a45b71f13a09dd69dc/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce19fb90d43b975602b4ceed6e2d71a772cfb637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce19fb90d43b975602b4ceed6e2d71a772cfb637",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce19fb90d43b975602b4ceed6e2d71a772cfb637"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "979ee935aa048c626bcab8f6ed5faabd638dda93",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eac81656b5a90685dda21a45b71f13a09dd69dc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eac81656b5a90685dda21a45b71f13a09dd69dc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5eac81656b5a90685dda21a45b71f13a09dd69dc",
        "patch": "@@ -4392,7 +4392,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                 // Respond to BIP35 mempool requests\n                 if (fSendTrickle && pto->m_tx_relay->fSendMempool) {\n-                    auto vtxinfo = m_mempool.infoAll();\n+                    auto vtxinfo = WITH_LOCK(m_mempool.cs, return m_mempool.infoAll());\n                     pto->m_tx_relay->fSendMempool = false;\n                     CFeeRate filterrate;\n                     {"
      },
      {
        "sha": "f3aeb42432ba0392f9b33573055d179550a8d9ff",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eac81656b5a90685dda21a45b71f13a09dd69dc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eac81656b5a90685dda21a45b71f13a09dd69dc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5eac81656b5a90685dda21a45b71f13a09dd69dc",
        "patch": "@@ -783,7 +783,6 @@ static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator\n \n std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n {\n-    LOCK(cs);\n     auto iters = GetSortedDepthAndScore();\n \n     std::vector<TxMempoolInfo> ret;"
      },
      {
        "sha": "357457c1dab7cfccd076a78d0492a3d7802f657c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eac81656b5a90685dda21a45b71f13a09dd69dc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eac81656b5a90685dda21a45b71f13a09dd69dc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5eac81656b5a90685dda21a45b71f13a09dd69dc",
        "patch": "@@ -801,7 +801,7 @@ class CTxMemPool\n \n     TxMempoolInfo info(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     TxMempoolInfo info(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n-    std::vector<TxMempoolInfo> infoAll() const;\n+    std::vector<TxMempoolInfo> infoAll() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     size_t DynamicMemoryUsage() const;\n "
      }
    ]
  },
  {
    "sha": "1b68b744853e96d51f7e482458c2dc374ecb787c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjY4Yjc0NDg1M2U5NmQ1MWY3ZTQ4MjQ1OGMyZGMzNzRlY2I3ODdj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-04T17:28:30Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:52Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::DynamicMemoryUsage()",
      "tree": {
        "sha": "6d284bce1a04bed9100d88cc4866a1e4d22b27a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d284bce1a04bed9100d88cc4866a1e4d22b27a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b68b744853e96d51f7e482458c2dc374ecb787c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16gACgkQQQEIES5+\nqB8LEg/+J4KRGHNm75JGbSCcV3cILbgsPkK2gg846V0SYXbFH+ppI858Jgp5fAOj\ncOxt8Z2vY95Iy4ruNAPo7DG22MO0yqx9wnZV9Dhy0hDJ4HKIl48lQk9l+8AAyurx\nqvWz2VbXcLFuUxJ4rA8yrqL2coOPGRxRjvEAYe1k9+APO8wjpzcvAhkpRUb1o91M\n73tyhWKB/vNaAj+NrhEHNDxSKSfmdenzNM93l+gVbgMMpvd/YraTHJmzja2Zkx0r\n4sz1vo8yxdomcrjjF+9P6n/2CiPZ4waH2SERsZEimkMSnWzmaMvkZNTx8mzk6VYV\nd1jReTgKXeeE7Rjdnsj+hB2xmxzXf4ZK+5hKUFHYCANQN5sTyh3gp6jySoQjXMkJ\nm9Hr3zdwGvibbXGmQ2b1ddtHgEml3I7q1pv5pCxNijzTyjH8TIccAJrwJ9UKOaDC\n9oljaBhKAmO0uluouWIZJOkyJx+kTBXd0Xe4RadQwLyU5HAUWqH8EmJ8hNG/7zLi\nJIIAG/lVA0Ia7k7fBtCehbLoYQWR5Rb9le5EAr4F+OtTuO4DZmus8FMu7ywJ0EVf\nOHLv6i/1hY4YsfyEW6PP6IydrxYepbn2xdZL/0rGkWKfsqME8rloM9uNbGupU/2s\nWa+8vwCYCPEVWLglxfEg3SnX3dUi06A0+JaNjWuoHGh6QAaXPL4=\n=qRAC\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d284bce1a04bed9100d88cc4866a1e4d22b27a1\nparent 5eac81656b5a90685dda21a45b71f13a09dd69dc\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599240510 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395752 +0300\n\nrefactor: Prevent double lock in CTxMemPool::DynamicMemoryUsage()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b68b744853e96d51f7e482458c2dc374ecb787c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b68b744853e96d51f7e482458c2dc374ecb787c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b68b744853e96d51f7e482458c2dc374ecb787c/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5eac81656b5a90685dda21a45b71f13a09dd69dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eac81656b5a90685dda21a45b71f13a09dd69dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eac81656b5a90685dda21a45b71f13a09dd69dc"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 57,
      "deletions": 40
    },
    "files": [
      {
        "sha": "4e086d99b563548919c0ba4315da4147d46ca8d3",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -133,7 +133,7 @@ static void MempoolEviction(benchmark::Bench& bench)\n         AddTx(tx5_r, 1000LL, pool);\n         AddTx(tx6_r, 1100LL, pool);\n         AddTx(tx7_r, 9000LL, pool);\n-        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper() * 3 / 4);\n         pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n     });\n }"
      },
      {
        "sha": "5f7dacaec5257152aa0f6c6a0e91abd1f9cf9260",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -86,7 +86,7 @@ static void ComplexMemPool(benchmark::Bench& bench)\n         for (auto& tx : ordered_coins) {\n             AddTx(tx, pool);\n         }\n-        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper() * 3 / 4);\n         pool.TrimToSize(GetVirtualTransactionSize(*ordered_coins.front()));\n     });\n }"
      },
      {
        "sha": "225fc27221fd240495c01d8599a259bfadb16798",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -1413,7 +1413,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"loaded\", pool.IsLoadedNonLockHelper());\n     ret.pushKV(\"size\", (int64_t)pool.sizeNonLockHelper());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n-    ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n+    ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsageNonLockHelper());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFeeNonLockHelper(maxmempool), ::minRelayTxFee).GetFeePerK()));"
      },
      {
        "sha": "84fa68ead10b4ed9965710f9edf877f80758fa58",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -443,11 +443,11 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx2.vout[0].nValue = 10 * COIN;\n     pool.addUnchecked(entry.Fee(5000LL).FromTx(tx2));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n+    pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper()); // should do nothing\n     BOOST_CHECK(pool.existsNonLockHelper(tx1.GetHash()));\n     BOOST_CHECK(pool.existsNonLockHelper(tx2.GetHash()));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n+    pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper() * 3 / 4); // should remove the lower-feerate transaction\n     BOOST_CHECK(pool.existsNonLockHelper(tx1.GetHash()));\n     BOOST_CHECK(!pool.existsNonLockHelper(tx2.GetHash()));\n \n@@ -461,7 +461,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx3.vout[0].nValue = 10 * COIN;\n     pool.addUnchecked(entry.Fee(20000LL).FromTx(tx3));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n+    pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.existsNonLockHelper(tx1.GetHash()));\n     BOOST_CHECK(pool.existsNonLockHelper(tx2.GetHash()));\n     BOOST_CHECK(pool.existsNonLockHelper(tx3.GetHash()));\n@@ -528,7 +528,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n-    pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+    pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper() - 1);\n     BOOST_CHECK(pool.existsNonLockHelper(tx4.GetHash()));\n     BOOST_CHECK(pool.existsNonLockHelper(tx6.GetHash()));\n     BOOST_CHECK(!pool.existsNonLockHelper(tx7.GetHash()));\n@@ -537,7 +537,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n         pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n+    pool.TrimToSize(pool.DynamicMemoryUsageNonLockHelper() / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.existsNonLockHelper(tx4.GetHash()));\n     BOOST_CHECK(!pool.existsNonLockHelper(tx5.GetHash()));\n     BOOST_CHECK(pool.existsNonLockHelper(tx6.GetHash()));\n@@ -557,11 +557,11 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(pool.DynamicMemoryUsageNonLockHelper() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeNonLockHelper(pool.DynamicMemoryUsageNonLockHelper() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);"
      },
      {
        "sha": "a0f39f5781636ef849c6e543d86fc3656c045751",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n \n     // Without any coins in the cache, we shouldn't need to flush.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::OK);\n \n     // If the initial memory allocations of cacheCoins don't match these common\n@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         }\n \n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::CRITICAL);\n \n         BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n@@ -93,34 +93,34 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Adding some additional coins will push us over the edge to CRITICAL.\n     for (int i{0}; i < 4; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n-        if (chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n+        if (chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n             CoinsCacheSizeState::CRITICAL) {\n             break;\n         }\n     }\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     // Passing non-zero max mempool usage should allow us more headroom.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n         CoinsCacheSizeState::OK);\n \n     for (int i{0}; i < 3; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n             CoinsCacheSizeState::OK);\n     }\n \n@@ -136,31 +136,31 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         BOOST_CHECK(usage_percentage >= 0.9);\n         BOOST_CHECK(usage_percentage < 1);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n             CoinsCacheSizeState::LARGE);\n     }\n \n     // Using the default max_* values permits way more coins to be added.\n     for (int i{0}; i < 1000; ++i) {\n         add_coin(view);\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool),\n+            chainstate.GetCoinsCacheSizeState(tx_pool.DynamicMemoryUsage()),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Flushing the view doesn't take us back to OK because cacheCoins has\n     // preallocated memory that doesn't get reclaimed even after flush.\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     view.SetBestBlock(InsecureRand256());\n     BOOST_CHECK(view.Flush());\n     print_view_mem_usage(view);\n \n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n }\n "
      },
      {
        "sha": "4cea87ea86a97449be6d98dee88224fc68be483d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -911,8 +911,8 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const NO_\n     return base->GetCoin(outpoint, coin);\n }\n \n-size_t CTxMemPool::DynamicMemoryUsage() const {\n-    LOCK(cs);\n+size_t CTxMemPool::DynamicMemoryUsageNonLockHelper() const\n+{\n     // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n@@ -1006,9 +1006,9 @@ CFeeRate CTxMemPool::GetMinFeeNonLockHelper(size_t sizelimit) const\n     int64_t time = GetTime();\n     if (time > lastRollingFeeUpdate + 10) {\n         double halflife = ROLLING_FEE_HALFLIFE;\n-        if (DynamicMemoryUsage() < sizelimit / 4)\n+        if (DynamicMemoryUsageNonLockHelper() < sizelimit / 4)\n             halflife /= 4;\n-        else if (DynamicMemoryUsage() < sizelimit / 2)\n+        else if (DynamicMemoryUsageNonLockHelper() < sizelimit / 2)\n             halflife /= 2;\n \n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n@@ -1035,7 +1035,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty() && DynamicMemoryUsageNonLockHelper() > sizelimit) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n         // We set the new mempool min fee to the feerate of the removed set, plus the"
      },
      {
        "sha": "acc2b74f0ed210ddcc7a9189576744dec8b443f1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -803,7 +803,13 @@ class CTxMemPool\n     TxMempoolInfo info(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n     std::vector<TxMempoolInfo> infoAll() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    size_t DynamicMemoryUsage() const;\n+    size_t DynamicMemoryUsageNonLockHelper() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    size_t DynamicMemoryUsage() const EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        return DynamicMemoryUsageNonLockHelper();\n+    }\n \n     /** Adds a transaction to the unbroadcast set */\n     void AddUnbroadcastTx(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!cs)"
      },
      {
        "sha": "fae59196eebf9df37f10a59adee1e8954fb73f26",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -2257,23 +2257,22 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n-CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(int64_t mempool_usage)\n {\n     return this->GetCoinsCacheSizeState(\n-        tx_pool,\n+        mempool_usage,\n         m_coinstip_cache_size_bytes,\n         gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n-    const CTxMemPool* tx_pool,\n+    int64_t mempool_usage,\n     size_t max_coins_cache_size_bytes,\n     size_t max_mempool_size_bytes)\n {\n-    const int64_t nMempoolUsage = tx_pool ? tx_pool->DynamicMemoryUsage() : 0;\n     int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n     int64_t nTotalSpace =\n-        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - mempool_usage, 0);\n \n     //! No need to periodic flush if at least this much space still available.\n     static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n@@ -2289,6 +2288,17 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n     return CoinsCacheSizeState::OK;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    size_t max_mempool_size_bytes)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool.DynamicMemoryUsage(),\n+        max_coins_cache_size_bytes,\n+        max_mempool_size_bytes);\n+}\n+\n bool CChainState::FlushStateToDiskHelper(\n     const CChainParams& chainparams,\n     BlockValidationState &state,"
      },
      {
        "sha": "7f8e3b43fb8a6915a10172d9a589449efce607ed",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b68b744853e96d51f7e482458c2dc374ecb787c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b68b744853e96d51f7e482458c2dc374ecb787c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1b68b744853e96d51f7e482458c2dc374ecb787c",
        "patch": "@@ -628,7 +628,7 @@ class CChainState {\n     {\n         LOCK(cs_main);\n         AssertLockHeld(::mempool.cs);\n-        const CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&::mempool);\n+        const CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(::mempool.DynamicMemoryUsageNonLockHelper());\n         return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight, cache_state);\n     }\n \n@@ -640,11 +640,7 @@ class CChainState {\n     {\n         LOCK(cs_main);\n         AssertLockNotHeld(::mempool.cs);\n-        CoinsCacheSizeState cache_state;\n-        {\n-            LOCK(::mempool.cs);\n-            cache_state = GetCoinsCacheSizeState(&::mempool);\n-        }\n+        const CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(::mempool.DynamicMemoryUsage());\n         return FlushStateToDiskHelper(chainparams, state, mode, nManualPruneHeight, cache_state);\n     }\n \n@@ -714,14 +710,19 @@ class CChainState {\n     //! Dictates whether we need to flush the cache to disk or not.\n     //!\n     //! @return the state of the size of the coins cache.\n-    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+    CoinsCacheSizeState GetCoinsCacheSizeState(int64_t mempool_usage)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     CoinsCacheSizeState GetCoinsCacheSizeState(\n-        const CTxMemPool* tx_pool,\n+        int64_t mempool_usage,\n         size_t max_coins_cache_size_bytes,\n         size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    CoinsCacheSizeState GetCoinsCacheSizeState(\n+        const CTxMemPool& tx_pool,\n+        size_t max_coins_cache_size_bytes,\n+        size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, !tx_pool.cs);\n+\n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:"
      }
    ]
  },
  {
    "sha": "a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmViMzZjYjk4MjY5ZWU1NmRjMDU0MWFhODE0MGE5ODhmYmUwNmVl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T15:55:13Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:52Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::RemoveUnbroadcastTx()",
      "tree": {
        "sha": "7ec2b50bd2beff7da2fa74ad99b7e7276e0285b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec2b50bd2beff7da2fa74ad99b7e7276e0285b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16gACgkQQQEIES5+\nqB9oRA//Vpofxdnyb6WA/twZubpTDC7VcNHof3OruK9TQE39EtI3+5lU1PzfAepg\nvUbo488uMnxb6hKe0ovXuiAYEHln96SNvfRGKf5YVA2wx9iDBYc/CHVcSsuWV7gZ\n3OzLe4hCPVCD1POVcdP3oPSCM50mcevoV59UcCjrPy2dF5hHXRdeDvzFbdFj/TVn\nhrFD+frxq33kNq519OusNN8Qv0o/b9VztSszUL2Ol9YGEaTe2Vs5+7JU/oM+vMjZ\nHajSDAG5Fk+eHsH6sRgC+8L+aNI1yNmiBL1nS6HFI7v6e2x/7YBNW2IXPhJdIMms\nGrxf0vCL7sPAMs5YARNQXi2gRGIJC7OI6nKZyOm0+N2n5EYLTJFoxi8iGGQfiyu+\ntGzrJTlFvanjGAocqhNE3HR8cTTOcxFePOgTn+t5MLtW0aSTNK/cgPC2fqDgmx+K\nBS81U3egXXB4u7u30Kq1qfbdaX8lTTcus1UtjUF8L3MFIjJCnhwUZd7oiyeOF8S1\nFTS5fdcosKsnaGovQnaVz9hjJnMdBjqWtmvus3Dd/B8WkZzYgyfCSp5s55xbg7qK\njoCQcE7KhsQ2Xmt8Gr+DeWQ0H1601szn9t9kKGsdOVwixdQdfGuGx9YtZNm+h/nK\nKBOJirmVwp1Nyj6OI4QntOfn/WRtpLVUAbc/SoCj7OGrApveLdM=\n=JGh6\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ec2b50bd2beff7da2fa74ad99b7e7276e0285b9\nparent 1b68b744853e96d51f7e482458c2dc374ecb787c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592322913 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395752 +0300\n\nrefactor: Prevent double lock in CTxMemPool::RemoveUnbroadcastTx()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2eb36cb98269ee56dc0541aa8140a988fbe06ee/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b68b744853e96d51f7e482458c2dc374ecb787c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b68b744853e96d51f7e482458c2dc374ecb787c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b68b744853e96d51f7e482458c2dc374ecb787c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a7698daa0dad63bfb791c2eb8eb5d1c7fac6048f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2eb36cb98269ee56dc0541aa8140a988fbe06ee/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2eb36cb98269ee56dc0541aa8140a988fbe06ee/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
        "patch": "@@ -417,7 +417,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n-    RemoveUnbroadcastTx(hash, true /* add logging because unchecked */ );\n+    RemoveUnbroadcastTxNonLockHelper(hash, true /* add logging because unchecked */ );\n \n     if (vTxHashes.size() > 1) {\n         vTxHashes[it->vTxHashesIdx] = std::move(vTxHashes.back());\n@@ -917,11 +917,8 @@ size_t CTxMemPool::DynamicMemoryUsageNonLockHelper() const\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveUnbroadcastTx(const uint256& txid, const bool unchecked) {\n-    LOCK(cs);\n-\n-    if (m_unbroadcast_txids.erase(txid))\n-    {\n+void CTxMemPool::RemoveUnbroadcastTxNonLockHelper(const uint256& txid, const bool unchecked) {\n+    if (m_unbroadcast_txids.erase(txid)) {\n         LogPrint(BCLog::MEMPOOL, \"Removed %i from set of unbroadcast txns%s\\n\", txid.GetHex(), (unchecked ? \" before confirmation that txn was sent out\" : \"\"));\n     }\n }"
      },
      {
        "sha": "40c545bc2afff93e4d7c9060aa53a4a5ea8e378c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2eb36cb98269ee56dc0541aa8140a988fbe06ee/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2eb36cb98269ee56dc0541aa8140a988fbe06ee/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
        "patch": "@@ -823,7 +823,13 @@ class CTxMemPool\n     }\n \n     /** Removes a transaction from the unbroadcast set */\n-    void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false);\n+    void RemoveUnbroadcastTxNonLockHelper(const uint256& txid, const bool unchecked) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false) EXCLUSIVE_LOCKS_REQUIRED(!cs)\n+    {\n+        AssertLockNotHeld(cs);\n+        LOCK(cs);\n+        RemoveUnbroadcastTxNonLockHelper(txid, unchecked);\n+    }\n \n     /** Returns transactions in unbroadcast set */\n     std::map<uint256, uint256> GetUnbroadcastTxs() const {"
      }
    ]
  },
  {
    "sha": "cbcdf19e49365d7b9845ecf3483d036a9b915502",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmNkZjE5ZTQ5MzY1ZDdiOTg0NWVjZjM0ODNkMDM2YTliOTE1NTAy",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T16:00:21Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:52Z"
      },
      "message": "refactor: Prevent double lock in CTxMemPool::GetUnbroadcastTxs()",
      "tree": {
        "sha": "544b3298edcd11242fdbc0df4b0d233a65e00f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/544b3298edcd11242fdbc0df4b0d233a65e00f70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbcdf19e49365d7b9845ecf3483d036a9b915502",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16gACgkQQQEIES5+\nqB/U1A//XNAFu3bSswh4aalUtEQsrUA+t5L9ppGCCj/84XXRmDpWiZb5oLstDFnQ\nKCq7pWYaSc3PGNLVgVu3/LtRJX+sqCSV3lNejXUyKkKuo+gZjLDJ0t/MjkTPIFdj\nOd+rDed0Hd2iG88MLMLBfBTtcRGMoy0vrc3oMjaUtrRAlE6NCpHf15KVe9pSX+G7\nZGmCI3C6Iwkn+CaL7UAl/dK6BUw/qGt8lXiLwrFY04p96uq2oF7Jg6GhBWv+n2CK\ngN+MF4NZKRac6jOk4vz0qCIKNxIZoxd5DUKUOcjwmTjlT4f5E1Y8Rhq7dU5krFGz\ndFQaWgUWjCzjQh+xvhgBzizXtFYBRY5RgbLNkktjt9zUdvQrmgB0TN4oy+YVRD8+\n//aAImPkJAyyp5J+abkGIrTRD3IYYE8VgCqiG+h3jHscJ1LLYm7rzScliOFpQRsO\nu3Jnsw3vZVlbjVklgjNjYxwu1s6E4WAxjFjk454eYtxGcGubZp2l9/H8HxtCt1K/\n8qjJ9eHzum5tzbw0XsJ1FSFnkMoR/C6wEIS8RDNQdQAdnk3xPvrbQRKgmoCdcsnh\nV6E0jUnVA+ncNJtBbQo0ObIhwmpmvWxKGWQ7kvjDhYnhV8W6PS1s9/V1cK4+Snta\ndftTyTUnUx6mD+VoTp87Y24hUqb00ZFNlQzc8mN6+i4czl3XOXQ=\n=aKYX\n-----END PGP SIGNATURE-----",
        "payload": "tree 544b3298edcd11242fdbc0df4b0d233a65e00f70\nparent a2eb36cb98269ee56dc0541aa8140a988fbe06ee\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592323221 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395752 +0300\n\nrefactor: Prevent double lock in CTxMemPool::GetUnbroadcastTxs()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbcdf19e49365d7b9845ecf3483d036a9b915502",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbcdf19e49365d7b9845ecf3483d036a9b915502",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbcdf19e49365d7b9845ecf3483d036a9b915502/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2eb36cb98269ee56dc0541aa8140a988fbe06ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2eb36cb98269ee56dc0541aa8140a988fbe06ee"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5299869b49c5491122b8ed933e80a22fe0cdb100",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbcdf19e49365d7b9845ecf3483d036a9b915502/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbcdf19e49365d7b9845ecf3483d036a9b915502/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cbcdf19e49365d7b9845ecf3483d036a9b915502",
        "patch": "@@ -889,7 +889,7 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n \n void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n {\n-    std::map<uint256, uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+    std::map<uint256, uint256> unbroadcast_txids = WITH_LOCK(m_mempool.cs, return m_mempool.GetUnbroadcastTxs());\n \n     for (const auto& elem : unbroadcast_txids) {\n         // Sanity check: all unbroadcast txns should exist in the mempool"
      },
      {
        "sha": "196aad938ce887283b023c9579767833a9c8c7a7",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbcdf19e49365d7b9845ecf3483d036a9b915502/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbcdf19e49365d7b9845ecf3483d036a9b915502/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cbcdf19e49365d7b9845ecf3483d036a9b915502",
        "patch": "@@ -832,8 +832,8 @@ class CTxMemPool\n     }\n \n     /** Returns transactions in unbroadcast set */\n-    std::map<uint256, uint256> GetUnbroadcastTxs() const {\n-        LOCK(cs);\n+    std::map<uint256, uint256> GetUnbroadcastTxs() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n         return m_unbroadcast_txids;\n     }\n "
      }
    ]
  },
  {
    "sha": "5639ecbb7d2bd19003294eceffdf5a80535d7633",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjM5ZWNiYjdkMmJkMTkwMDMyOTRlY2VmZmRmNWE4MDUzNWQ3NjMz",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T16:56:07Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:53Z"
      },
      "message": "refactor: Prevent double lock in PartiallyDownloadedBlock::InitData()",
      "tree": {
        "sha": "c2b9f002f148dbd0fb434faa89c41dfe98369b7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2b9f002f148dbd0fb434faa89c41dfe98369b7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5639ecbb7d2bd19003294eceffdf5a80535d7633",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16kACgkQQQEIES5+\nqB/LxhAAl2eOYV42IVDr+gU2ycwvg+08GQLn93N7fdaiAiGntMndl+bbwfZHdfA6\nCydRt3z14eezN9jl3A493h6VmTIt36iAoaTCCSXhGxlounBon+GIoXwJ53yPXHEj\niwEKwfvs+LJG9KQGbjg99y1Uk28UW+O4utcm8F8VpQXMj59dzFQekNVsC8rUJL8B\nfG9cubh0e/LLMNuBF2qo8jvP4QKdd74Paxje/HMJCv3LjpbpnFajzMEUEqt7zoRU\nieSF26JX5VyLzJkBSEJp2shYVHOQDHQ+ZpHBW6DiRZf5piuJJhMhJqz7fmIoFW72\n81sOuq4WwK6l9tze+VuTw9h412WPCMWNuCB2RWvcdC1ZA10Nj6IQwnb4JPMuibNO\nNju5r8CwX1T2gK3LElyEL6ilk3S5Q/DvrMPtGSc9uN1IbRGM8w0bp4rW0QVvCD2h\nh8fJIBnd7b6RnzAhDalwiAx1ozFzabvO/aRzma1n8IqYw62BzD4LJdvWN8q6ia4I\n/+a5PKFbC6FraLSxiFnBM97lmXQ1kwi2K4Ixl3Oldyzq3swkjv+2Hq298ClDSb1K\nhy2Efvcu0nHt65r7HOnCrb9atuKMM/U5RSSvVGpXqK/h+yiIPxQc2zVr6yD/bZmB\nI/ghJWBU3sHiz71H6dF4/uVhdsbe9ABYA9K/ZdfV/hbp8HRwWlo=\n=xm5A\n-----END PGP SIGNATURE-----",
        "payload": "tree c2b9f002f148dbd0fb434faa89c41dfe98369b7e\nparent cbcdf19e49365d7b9845ecf3483d036a9b915502\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592326567 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395753 +0300\n\nrefactor: Prevent double lock in PartiallyDownloadedBlock::InitData()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5639ecbb7d2bd19003294eceffdf5a80535d7633",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5639ecbb7d2bd19003294eceffdf5a80535d7633",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5639ecbb7d2bd19003294eceffdf5a80535d7633/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbcdf19e49365d7b9845ecf3483d036a9b915502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbcdf19e49365d7b9845ecf3483d036a9b915502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbcdf19e49365d7b9845ecf3483d036a9b915502"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "14ff2d84692eb5fa6cfcc7a1a16fc5128fb5c5df",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5639ecbb7d2bd19003294eceffdf5a80535d7633/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5639ecbb7d2bd19003294eceffdf5a80535d7633/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=5639ecbb7d2bd19003294eceffdf5a80535d7633",
        "patch": "@@ -46,7 +46,9 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n \n \n \n-ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n+ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn, const bool mempool_locked)\n+    NO_THREAD_SAFETY_ANALYSIS\n+{\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n     if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZABLE_TRANSACTION_WEIGHT)\n@@ -103,8 +105,12 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         return READ_STATUS_FAILED; // Short ID collision\n \n     std::vector<bool> have_txn(txn_available.size());\n-    {\n-    LOCK(pool->cs);\n+    if (mempool_locked) {\n+        AssertLockHeld(pool->cs);\n+    } else {\n+        AssertLockNotHeld(pool->cs);\n+        ENTER_CRITICAL_SECTION(pool->cs);\n+    }\n     for (size_t i = 0; i < pool->vTxHashes.size(); i++) {\n         uint64_t shortid = cmpctblock.GetShortID(pool->vTxHashes[i].first);\n         std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n@@ -129,6 +135,10 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         if (mempool_count == shorttxids.size())\n             break;\n     }\n+\n+    if (!mempool_locked) {\n+        LEAVE_CRITICAL_SECTION(pool->cs);\n+        AssertLockNotHeld(pool->cs);\n     }\n \n     for (size_t i = 0; i < extra_txn.size(); i++) {"
      },
      {
        "sha": "70cd4b9fe8dcc5c05257ce21200dd119669770ed",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5639ecbb7d2bd19003294eceffdf5a80535d7633/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5639ecbb7d2bd19003294eceffdf5a80535d7633/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=5639ecbb7d2bd19003294eceffdf5a80535d7633",
        "patch": "@@ -132,7 +132,7 @@ class PartiallyDownloadedBlock {\n     explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}\n \n     // extra_txn is a list of extra transactions to look at, in <witness hash, reference> form\n-    ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn);\n+    ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn, bool mempool_locked = false);\n     bool IsTxAvailable(size_t index) const;\n     ReadStatus FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing);\n };"
      },
      {
        "sha": "a33f4d532407691244a1ea1de471230b0eae407f",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5639ecbb7d2bd19003294eceffdf5a80535d7633/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5639ecbb7d2bd19003294eceffdf5a80535d7633/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=5639ecbb7d2bd19003294eceffdf5a80535d7633",
        "patch": "@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn, true) == READ_STATUS_OK);\n         BOOST_CHECK( partialBlock.IsTxAvailable(0));\n         BOOST_CHECK(!partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn, true) == READ_STATUS_OK);\n         BOOST_CHECK(!partialBlock.IsTxAvailable(0));\n         BOOST_CHECK( partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));\n@@ -233,7 +233,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn, true) == READ_STATUS_OK);\n         BOOST_CHECK( partialBlock.IsTxAvailable(0));\n         BOOST_CHECK( partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));"
      }
    ]
  },
  {
    "sha": "c37916a81b9cd4582ca3bee07156896efc84148c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzc5MTZhODFiOWNkNDU4MmNhM2JlZTA3MTU2ODk2ZWZjODQxNDhj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-16T17:17:03Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:53Z"
      },
      "message": "refactor: Prevent double lock in BlockAssembler::CreateNewBlock(()",
      "tree": {
        "sha": "e2b98f4ed10bd89fa02f0661258bc7707d5bfdf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2b98f4ed10bd89fa02f0661258bc7707d5bfdf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c37916a81b9cd4582ca3bee07156896efc84148c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16kACgkQQQEIES5+\nqB/gPQ//QVvhLA21GqbkbDazIm5yg6CmdmB+5xSO8bxeQNKSSLaQuDM2kFx4Wp3g\nDdP6JAjHV+wXFo/QjxUyOqJ8V2f+nOa0/EMQmrLQEXkan0bl7XT/XcnOmw4CzEnV\njVpYs4oPvM+cv5B+u6dc0YqbQKf4TJYa9oGAo/5z2F7jofNdLRbBX5crwWK1Ze61\nXX9/wtU6NyvN4SXsXWZ6qcNOSgz7d6yL9nRAzsme8HjsEGC8WToIBiMibIsBnjdg\nRydMeHupSb/U7a+FQwrDsAixDEnZlYhQj8SK/EhhEv/H2GAfZF+DEAO0ky/uIoS+\n2wJVtI0x8vfwDKzd3XrCRfu3Ahk+2XGnZCyD+P/61x5VVYtStcLxR4INf7X40xVZ\ntXaI+x/U0MdASPMTNdyx/Grr8rrODzF92mllpJtmBiugtk9y28uU/HM+vieu7Atm\nk8bbce7K12Cs6rXocdjG75JndUGXTbLl6nO1EvjYh3+yuMvPwUnb6YIXflwvwNDP\nelbbKYfiUQry3K+pCmK3uDU02xjPVTFvLKbLjT33fQTHZzBpN6zJenZvDnLFjMlr\nt4dOTGSOpHf7L6VeD+RqCUO1Zf90s12DUpUiqin8otAytU1g6OeXU78vJcfFjKjp\nXENuHB/+sh1Pys3c36PPJrM0DJyGKuANPTaKkP0+x5Bea7tt/0c=\n=JZtF\n-----END PGP SIGNATURE-----",
        "payload": "tree e2b98f4ed10bd89fa02f0661258bc7707d5bfdf6\nparent 5639ecbb7d2bd19003294eceffdf5a80535d7633\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592327823 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395753 +0300\n\nrefactor: Prevent double lock in BlockAssembler::CreateNewBlock(()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37916a81b9cd4582ca3bee07156896efc84148c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c37916a81b9cd4582ca3bee07156896efc84148c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37916a81b9cd4582ca3bee07156896efc84148c/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5639ecbb7d2bd19003294eceffdf5a80535d7633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5639ecbb7d2bd19003294eceffdf5a80535d7633",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5639ecbb7d2bd19003294eceffdf5a80535d7633"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 33,
      "deletions": 21
    },
    "files": [
      {
        "sha": "3c895e47a7f362847ed729bc6ffaca5c948ec0de",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37916a81b9cd4582ca3bee07156896efc84148c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37916a81b9cd4582ca3bee07156896efc84148c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c37916a81b9cd4582ca3bee07156896efc84148c",
        "patch": "@@ -99,7 +99,8 @@ void BlockAssembler::resetBlock()\n Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, const bool mempool_locked)\n+    NO_THREAD_SAFETY_ANALYSIS\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n@@ -116,7 +117,13 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n-    LOCK2(cs_main, m_mempool.cs);\n+    LOCK(cs_main);\n+    if (mempool_locked) {\n+        AssertLockHeld(m_mempool.cs);\n+    } else {\n+        AssertLockNotHeld(m_mempool.cs);\n+        ENTER_CRITICAL_SECTION(m_mempool.cs);\n+    }\n     CBlockIndex* pindexPrev = ::ChainActive().Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n@@ -183,6 +190,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     LogPrint(BCLog::BENCH, \"CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\\n\", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));\n \n+    if (!mempool_locked) {\n+        LEAVE_CRITICAL_SECTION(m_mempool.cs);\n+        AssertLockNotHeld(m_mempool.cs);\n+    }\n+\n     return std::move(pblocktemplate);\n }\n "
      },
      {
        "sha": "ba3ba4469b46546d4782912d6b4bcb7ce427acff",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37916a81b9cd4582ca3bee07156896efc84148c/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37916a81b9cd4582ca3bee07156896efc84148c/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=c37916a81b9cd4582ca3bee07156896efc84148c",
        "patch": "@@ -158,7 +158,7 @@ class BlockAssembler\n     explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, bool mempool_locked = false);\n \n     static Optional<int64_t> m_last_block_num_txs;\n     static Optional<int64_t> m_last_block_weight;"
      },
      {
        "sha": "3e8933a471d84b826abb9c334cb4effd6bce1e1e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c37916a81b9cd4582ca3bee07156896efc84148c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c37916a81b9cd4582ca3bee07156896efc84148c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c37916a81b9cd4582ca3bee07156896efc84148c",
        "patch": "@@ -133,7 +133,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     uint256 hashHighFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n@@ -153,7 +153,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n         BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeTx);\n@@ -167,7 +167,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n \n@@ -188,7 +188,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true);\n \n     // Verify that this tx isn't selected.\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -201,7 +201,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     m_node.mempool->addUnchecked(entry.Fee(10000).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n \n@@ -261,7 +261,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     LOCK(m_node.mempool->cs);\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n \n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n     m_node.mempool->clearNonLockHelper();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -300,7 +300,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n     m_node.mempool->clearNonLockHelper();\n \n     // block size > limit\n@@ -320,13 +320,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n     m_node.mempool->clearNonLockHelper();\n \n     // orphan in *m_node.mempool, template creation fails\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clearNonLockHelper();\n \n     // child with higher feerate than parent\n@@ -343,7 +343,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n     m_node.mempool->clearNonLockHelper();\n \n     // coinbase in *m_node.mempool, template creation fails\n@@ -355,7 +355,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // give it a fee so it'll get mined\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n     m_node.mempool->clearNonLockHelper();\n \n     // double spend txn pair in *m_node.mempool, template creation fails\n@@ -368,7 +368,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clearNonLockHelper();\n \n     // subsidy changing\n@@ -384,7 +384,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         ::ChainActive().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n     // Extend to a 210000-long block chain.\n     while (::ChainActive().Tip()->nHeight < 210000) {\n         CBlockIndex* prev = ::ChainActive().Tip();\n@@ -396,7 +396,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         ::ChainActive().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n \n     // invalid p2sh txn in *m_node.mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -413,7 +413,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error, HasReason(\"block-validation-failed\"));\n     m_node.mempool->clearNonLockHelper();\n \n     // Delete the dummy blocks again.\n@@ -501,7 +501,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n \n     // None of the of the absolute height/time locked tx should have made\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n@@ -514,7 +514,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     ::ChainActive().Tip()->nHeight++;\n     SetMockTime(::ChainActive().Tip()->GetMedianTimePast() + 1);\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey, true));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5U);\n \n     ::ChainActive().Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "e6a02790633ce34b4250d8972b44688946e913cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmEwMjc5MDYzM2NlMzRiNDI1MGQ4OTcyYjQ0Njg4OTQ2ZTkxM2Nk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-17T07:27:21Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:53Z"
      },
      "message": "refactor: Prevent double lock in CheckInputsFromMempoolAndCache()",
      "tree": {
        "sha": "181baf8f03e13977e37c71d18136f1dab310e285",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/181baf8f03e13977e37c71d18136f1dab310e285"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6a02790633ce34b4250d8972b44688946e913cd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16kACgkQQQEIES5+\nqB/IWw/7B8u4/w9LX1IDCVjRxn+6ICLMVqvO7Ys/lsf0L5t84FlRU1hc0mu8dIPC\nHGvE4mAJbSQuSQSugXdRu2vYNriU/eiq0nMVI4JNlPXNTYGjCeTlPNFb8gNo96fS\nYhx/NWqDukJz2lKD24erDfKJY7wvBBnsc3p34g5TBOsArMIYwxz/XSYJxQTwfobv\ntwxBs6zyHDjwZSAHApUcERG5xR1Fb85U8+RoYA2+lgzsA0ub/4a7U1SjIVIB9jkE\n1yvasNHO7ZXxhaNl1vEwv63EmezYEXE0HU2+LjoaxwXxkka02C2/2A0V1UGM4c5Y\nxQpqHbSawGnHP3nMe/Xri1RkSBL2hk85MOZ7mMctqa9TKHeuzVcgbswM50E+yLZK\nuNhOXo9nnI7tMwcLZ9VT6SQzkPK1i2R/pAEesXkoxdlbkS1XhZDOhSXv/PjE3ETO\nmpzCb1IqGbqo5BG1NsELv6B6DKrk034ncfwgLvJRmHU7aTOS2TFXqBfSAo3itx4/\nO7qt8VMXCqpneCa4037LdMLnxVOBeLXTPmPCfJycmN/d+7z1pmpKEZ4V4eDUxxdM\nPFjajkapFcT5f3Q8QiXUawV8RhdMimsjQ4zzvypjOry4xbDtHlrPNY94Zj03FVJ6\nfBQv8QW+vPPoAhXce/pZwEOnh4zhMXNHubYqMnfXG6VWynggpMc=\n=D9bs\n-----END PGP SIGNATURE-----",
        "payload": "tree 181baf8f03e13977e37c71d18136f1dab310e285\nparent c37916a81b9cd4582ca3bee07156896efc84148c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592378841 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395753 +0300\n\nrefactor: Prevent double lock in CheckInputsFromMempoolAndCache()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a02790633ce34b4250d8972b44688946e913cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a02790633ce34b4250d8972b44688946e913cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a02790633ce34b4250d8972b44688946e913cd/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c37916a81b9cd4582ca3bee07156896efc84148c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c37916a81b9cd4582ca3bee07156896efc84148c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c37916a81b9cd4582ca3bee07156896efc84148c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a1d314c6f215ad18833ff4156a0ebee802360d51",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a02790633ce34b4250d8972b44688946e913cd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a02790633ce34b4250d8972b44688946e913cd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e6a02790633ce34b4250d8972b44688946e913cd",
        "patch": "@@ -413,13 +413,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n@@ -514,7 +510,7 @@ class MemPoolAccept\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size"
      }
    ]
  },
  {
    "sha": "a887d73dcb05d59067635aff91baf85e0c7c7396",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODg3ZDczZGNiMDVkNTkwNjc2MzVhZmY5MWJhZjg1ZTBjN2M3Mzk2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-17T08:32:17Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T12:35:54Z"
      },
      "message": "refactor: Replace RecursiveMutex with Mutex in CTxMemPool",
      "tree": {
        "sha": "52c61690c1f4b5f1d09bbfb1a0c75f2cebe1e7f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52c61690c1f4b5f1d09bbfb1a0c75f2cebe1e7f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a887d73dcb05d59067635aff91baf85e0c7c7396",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U16oACgkQQQEIES5+\nqB9KcQ/9Hu/TRHrEtLueXrESsBx1KUp+L/tWdycFywcVMnnCV8/ErMWVRjPZ/hd9\nRXuP9XsCdl9li9mAH3jUYJnp1+llvVl2WLMavU8V9hTcir68JTD8KJrXIPyIJafU\ne3TbcQ1+IO/Ix2D/xpm494N0TiaEpCDrbRN0kJgFm5SFLQIDT1lqw6htqAt7gUm6\nYWSzPvCAoedUflBPqhocoktrSAN/G3bBfoT7X3jf2FANccpJo0/QiIcpNkWUs5ws\nrI8gVOMS3SN4G3GHzls6+3oukpV0M+oPu9vqZRsBAFnPma01ZzwQchsWJa2naJRr\nrVMZgefQc/WIG8L+c6pLTBtWaehIEAlD6U9N14PVnsKSxKkz9Zf6KzjNgpQtJm7P\n/0o5iNjmURZKBcJCWMAA0UItejjKWscqoaNuMh2I+Jh3JweswS3wb6f+u0Wja5hK\nXq0mXGImGEdiWBKfhhcJ79fHAcII6+aKiuxHNEzKLUsx7soGhBccfF2jbFxWUat4\ntGEAD/w+2aNz1afjE0gdcmsmWxucdtS03pEV22vkf1nn9WRdOOCj2xlv03nUuZsq\nYNR5R6m+p0ErCa8+5c/h2EFAl4MgVtoiyG1ResFd2Hx2sL/2/I2JHdma7x/M64xS\nneMVl/bpbTecoKAAPxkpn8DRwufiLfCj4bVV3Vobc4rljXo/rQ8=\n=Xary\n-----END PGP SIGNATURE-----",
        "payload": "tree 52c61690c1f4b5f1d09bbfb1a0c75f2cebe1e7f8\nparent e6a02790633ce34b4250d8972b44688946e913cd\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1592382737 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599395754 +0300\n\nrefactor: Replace RecursiveMutex with Mutex in CTxMemPool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a887d73dcb05d59067635aff91baf85e0c7c7396",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a887d73dcb05d59067635aff91baf85e0c7c7396",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a887d73dcb05d59067635aff91baf85e0c7c7396/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6a02790633ce34b4250d8972b44688946e913cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a02790633ce34b4250d8972b44688946e913cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a02790633ce34b4250d8972b44688946e913cd"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 43,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8fa05bb97fa956fbd0ca2e1af5165b594560d44b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a887d73dcb05d59067635aff91baf85e0c7c7396/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a887d73dcb05d59067635aff91baf85e0c7c7396/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a887d73dcb05d59067635aff91baf85e0c7c7396",
        "patch": "@@ -59,6 +59,7 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // descendants.\n void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n {\n+    AssertLockHeld(cs);\n     setEntries stageEntries, setAllDescendants;\n     stageEntries = GetMemPoolChildren(updateIt);\n \n@@ -151,6 +152,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n+    AssertLockHeld(cs);\n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n \n@@ -213,6 +215,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n \n void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n {\n+    AssertLockHeld(cs);\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n     for (txiter piter : parentIters) {\n@@ -228,6 +231,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n \n void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)\n {\n+    AssertLockHeld(cs);\n     int64_t updateCount = setAncestors.size();\n     int64_t updateSize = 0;\n     CAmount updateFee = 0;\n@@ -242,6 +246,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n \n void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n {\n+    AssertLockHeld(cs);\n     const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n     for (txiter updateIt : setMemPoolChildren) {\n         UpdateParent(updateIt, it, false);\n@@ -250,6 +255,7 @@ void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n \n void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)\n {\n+    AssertLockHeld(cs);\n     // For each entry, walk back all ancestors and decrement size associated with this\n     // transaction\n     const uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n@@ -355,6 +361,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n \n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n+    AssertLockHeld(cs);\n     // Add to memory pool without checking anything.\n     // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n@@ -405,6 +412,7 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n+    AssertLockHeld(cs);\n     if (reason != MemPoolRemovalReason::BLOCK) {\n         // Notify clients that a transaction has been removed from the mempool\n         // for any reason except being included in a block. Clients interested\n@@ -445,6 +453,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // can save time by not iterating over those entries.\n void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const\n {\n+    AssertLockHeld(cs);\n     setEntries stage;\n     if (setDescendants.count(entryit) == 0) {\n         stage.insert(entryit);\n@@ -584,6 +593,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n \n void CTxMemPool::clearInternal()\n {\n+    // No AssertLockHeld(cs) as this method should be used in CTxMemPool constructors only.\n     mapLinks.clear();\n     mapTx.clear();\n     mapNextTx.clear();\n@@ -606,6 +616,7 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n \n void CTxMemPool::checkNonLockHelper(const CCoinsViewCache* pcoins) const\n {\n+    AssertLockHeld(cs);\n     if (nCheckFrequency == 0)\n         return;\n \n@@ -767,6 +778,7 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n \n void CTxMemPool::queryHashes(std::vector<uint256>& vtxid) const\n {\n+    AssertLockHeld(cs);\n     auto iters = GetSortedDepthAndScore();\n \n     vtxid.clear();\n@@ -783,6 +795,7 @@ static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator\n \n std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n {\n+    AssertLockHeld(cs);\n     auto iters = GetSortedDepthAndScore();\n \n     std::vector<TxMempoolInfo> ret;\n@@ -796,6 +809,7 @@ std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n \n CTransactionRef CTxMemPool::getNonLockHelper(const uint256& hash) const\n {\n+    AssertLockHeld(cs);\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n         return nullptr;\n@@ -863,19 +877,22 @@ void CTxMemPool::ClearPrioritisation(const uint256& hash)\n \n const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const\n {\n+    AssertLockHeld(cs);\n     const auto it = mapNextTx.find(prevout);\n     return it == mapNextTx.end() ? nullptr : it->second;\n }\n \n Optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n+    AssertLockHeld(cs);\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n     return Optional<txiter>{};\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const\n {\n+    AssertLockHeld(cs);\n     CTxMemPool::setEntries ret;\n     for (const auto& h : hashes) {\n         const auto mi = GetIter(h);\n@@ -886,6 +903,7 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n \n bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n {\n+    AssertLockHeld(cs);\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         if (existsNonLockHelper(tx.vin[i].prevout.hash))\n             return false;\n@@ -913,11 +931,14 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const NO_\n \n size_t CTxMemPool::DynamicMemoryUsageNonLockHelper() const\n {\n+    AssertLockHeld(cs);\n     // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveUnbroadcastTxNonLockHelper(const uint256& txid, const bool unchecked) {\n+void CTxMemPool::RemoveUnbroadcastTxNonLockHelper(const uint256& txid, const bool unchecked)\n+{\n+    AssertLockHeld(cs);\n     if (m_unbroadcast_txids.erase(txid)) {\n         LogPrint(BCLog::MEMPOOL, \"Removed %i from set of unbroadcast txns%s\\n\", txid.GetHex(), (unchecked ? \" before confirmation that txn was sent out\" : \"\"));\n     }\n@@ -950,6 +971,7 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n \n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n+    AssertLockHeld(cs);\n     setEntries setAncestors;\n     uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n@@ -981,6 +1003,7 @@ void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)\n \n const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const\n {\n+    AssertLockHeld(cs);\n     assert (entry != mapTx.end());\n     txlinksMap::const_iterator it = mapLinks.find(entry);\n     assert(it != mapLinks.end());\n@@ -989,6 +1012,7 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const\n \n const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const\n {\n+    AssertLockHeld(cs);\n     assert (entry != mapTx.end());\n     txlinksMap::const_iterator it = mapLinks.find(entry);\n     assert(it != mapLinks.end());\n@@ -997,6 +1021,7 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n \n CFeeRate CTxMemPool::GetMinFeeNonLockHelper(size_t sizelimit) const\n {\n+    AssertLockHeld(cs);\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n         return CFeeRate(llround(rollingMinimumFeeRate));\n \n@@ -1070,7 +1095,9 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n     }\n }\n \n-uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {\n+uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const\n+{\n+    AssertLockHeld(cs);\n     // find parent with highest descendant count\n     std::vector<txiter> candidates;\n     setEntries counted;\n@@ -1094,6 +1121,7 @@ uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {\n \n void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const\n {\n+    AssertLockHeld(cs);\n     auto it = mapTx.find(txid);\n     ancestors = descendants = 0;\n     if (it != mapTx.end()) {\n@@ -1104,6 +1132,7 @@ void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors,\n \n bool CTxMemPool::IsLoadedNonLockHelper() const\n {\n+    AssertLockHeld(cs);\n     return m_is_loaded;\n }\n \n@@ -1117,6 +1146,7 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n \n CTxMemPool::EpochGuard CTxMemPool::GetFreshEpoch() const\n {\n+    AssertLockHeld(cs);\n     return EpochGuard(*this);\n }\n CTxMemPool::EpochGuard::EpochGuard(const CTxMemPool& in) : pool(in)"
      },
      {
        "sha": "00a3b2d3d02c138bbdd659c0f48f80c651323f19",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a887d73dcb05d59067635aff91baf85e0c7c7396/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a887d73dcb05d59067635aff91baf85e0c7c7396/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a887d73dcb05d59067635aff91baf85e0c7c7396",
        "patch": "@@ -541,7 +541,7 @@ class CTxMemPool\n      * changing the chain tip. It's necessary to keep both mutexes locked until\n      * the mempool is consistent with the new chain tip and fully populated.\n      */\n-    mutable RecursiveMutex cs;\n+    mutable Mutex cs;\n     indexed_transaction_set mapTx GUARDED_BY(cs);\n \n     using txiter = indexed_transaction_set::nth_index<0>::type::const_iterator;\n@@ -743,6 +743,7 @@ class CTxMemPool\n \n     unsigned long sizeNonLockHelper() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n+        AssertLockHeld(cs);\n         return mapTx.size();\n     }\n \n@@ -761,6 +762,7 @@ class CTxMemPool\n \n     bool existsNonLockHelper(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n+        AssertLockHeld(cs);\n         if (gtxid.IsWtxid()) {\n             return (mapTx.get<index_by_wtxid>().count(gtxid.GetHash()) != 0);\n         }\n@@ -776,6 +778,7 @@ class CTxMemPool\n \n     bool existsNonLockHelper(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n+        AssertLockHeld(cs);\n         return existsNonLockHelper(GenTxid{false, txid});\n     }\n \n@@ -834,6 +837,7 @@ class CTxMemPool\n     /** Returns transactions in unbroadcast set */\n     std::map<uint256, uint256> GetUnbroadcastTxs() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n+        AssertLockHeld(cs);\n         return m_unbroadcast_txids;\n     }\n \n@@ -919,14 +923,18 @@ class CTxMemPool\n      * triggered.\n      *\n      */\n-    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n         assert(m_has_epoch_guard);\n         bool ret = it->m_epoch >= m_epoch;\n         it->m_epoch = std::max(it->m_epoch, m_epoch);\n         return ret;\n     }\n \n-    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n         assert(m_has_epoch_guard);\n         return !it || visited(*it);\n     }"
      }
    ]
  }
]