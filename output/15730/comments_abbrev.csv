DrahtBot,2019-04-03T17:07:01Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14942](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14942.html) (wallet: Make scan / abort status private to",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-479576617,479576617,
promag,2019-04-14T09:54:57Z,"Thanks @meshcollider, updated.",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-482939525,482939525,
meshcollider,2019-04-14T20:13:07Z,utACK https://github.com/bitcoin/bitcoin/pull/15730/commits/3ae04b283453b669bcb0809380e973aa7e7adac0,https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-483054036,483054036,
jonasschnelli,2019-04-16T07:46:35Z,"Nice addition!\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-483549734,483549734,
MarcoFalke,2019-04-22T14:13:18Z,"Needs rebase, I think this is ready",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-485428966,485428966,
promag,2019-04-23T00:17:23Z,@MarcoFalke rebased.,https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-485596306,485596306,
MarcoFalke,2019-04-23T11:52:58Z,utACK c8664bb0c76f0c6a1eedaa253a03640b5dba7d38,https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-485770791,485770791,
promag,2019-04-28T10:22:00Z,Rebased due to #15901.,https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-487365842,487365842,
jonatack,2019-05-01T12:34:23Z,"Partial tACK https://github.com/bitcoin/bitcoin/pull/15730/commits/008896693c0336b27d54833939fc9c65b544a362 using testnet. The explicitness of `""scanning"": false` seems to me an improvement over returning null when no rescan is in progress. Interesting that no tests need be updated and might be good to add coverage in this PR or a follow-up. I've written functional test coverage for this as an exe",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488271323,488271323,
jonasschnelli,2019-05-02T08:53:20Z,"Currently testing...\nIs it intended to output the progress as scientific notation representation?\nMainnet Example:\n```\n""scanning"": {\n    ""duration"": 2,\n    ""progress"": 8.107329471549215e-07\n  }\n```\n\nWould it make sense to round it to a certain precision level?",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488596355,488596355,
practicalswift,2019-05-02T09:11:57Z,@jonasschnelli That would absolutely make sense from a usability perspective -- we should do that :-),https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488601434,488601434,
luke-jr,2019-05-02T09:19:29Z,"Nah, JSON-RPC is intended for software, not humans.",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488606543,488606543,
jonatack,2019-05-02T09:21:07Z,"@jonasschnelli I'm not seeing that notation on Linux Debian with mainnet and testnet, is it perhaps implementation-dependent?\n\nThere was a discussion about precision above: https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275852684",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488606976,488606976,
jonasschnelli,2019-05-02T09:25:02Z,"Oh. I missed that comment.\nYeah, @MarcoFalke is right, we use the same in `getblockchaininfo` `verificationprogress` which is (in both cases) a `double` converted to the JSON internal string with `std::setprecision(16)`",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488607994,488607994,
jonasschnelli,2019-05-02T09:25:45Z,Tested ACK 008896693c0336b27d54833939fc9c65b544a362,https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488608180,488608180,
jonatack,2019-05-02T09:26:16Z,"> Mainnet Example:\n> \n> ```\n> ""scanning"": {\n>     ""duration"": 2,\n>     ""progress"": 8.107329471549215e-07\n>   }\n> ```\n\n@jonasschnelli IIUC progress rshould return a value between 0 and 1?",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488608319,488608319,
jonasschnelli,2019-05-02T09:28:08Z,"> @jonasschnelli IIUC progress rshould return a value between 0 and 1?\n\nWhat do you mean with that?\n8.107329471549215e-07 is between 0 and 1 (its ~== 0.000000810732947).",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488608743,488608743,
practicalswift,2019-05-02T09:29:13Z,[Quod erat demonstrandum](https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488601434) 😁,https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488609018,488609018,
jonatack,2019-05-02T09:29:23Z,"> > @jonasschnelli IIUC progress rshould return a value between 0 and 1?\n> \n> What do you mean with that?\n> 8.107329471549215e-07 is between 0 and 1 (its ~== 0.000000810732947).\n\nRight. Never mind :)",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488609060,488609060,
promag,2019-05-02T10:41:43Z,"Sorry for the force push, had to fix @luke-jr comment https://github.com/bitcoin/bitcoin/pull/15730#discussion_r280365879. No changes since 0088966, should be easy to re-ACK.",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488627155,488627155,
MarcoFalke,2019-05-02T20:43:38Z,"re-utACK b6c748f849 (Only change since my last review is rebase, adding release notes, and returning false instead of null)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-utACK b6c748f849 (Only change since my last review is rebase, adding release notes, and returning false instead of null)\n-----B",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-488825502,488825502,
promag,2019-05-06T00:15:17Z,"@jonatack thanks for your review, will take into account if more changes are necessary.",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-489475837,489475837,
laanwj,2019-05-06T11:37:16Z,"utACK b6c748f84909212dce73e4b77aa125ed1e108a10\n\ngoing to merge b6c748f84909212dce73e4b77aa125ed1e108a10, looks like this is ready (or at least ready enough for this early in merging for 0.19) and has been re-ACKed enough times",https://github.com/bitcoin/bitcoin/pull/15730#issuecomment-489590128,489590128,
promag,2019-04-03T16:12:10Z,not boolean..,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r271820890,271820890,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-03T16:13:58Z,"Could make it\n\n`scanning: None`\nor\n```\nscanning: {\n 'duration': (num),\n 'progress': (num),\n}\n```",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r271821695,271821695,src/wallet/rpcwallet.cpp
promag,2019-04-03T16:15:08Z,"Yap, I'm fine either way.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r271822157,271822157,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-03T16:17:24Z,"Indeed, just a style-preference. Though, json provides structure, so might as well use it instead of returning a single huge dict",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r271823166,271823166,src/wallet/rpcwallet.cpp
promag,2019-04-04T09:17:37Z,Done.,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r272088675,272088675,src/wallet/rpcwallet.cpp
meshcollider,2019-04-14T03:07:39Z,Can we ensure `progress_end - progress_begin != 0` at this point? ,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275138993,275138993,src/wallet/wallet.cpp
meshcollider,2019-04-14T03:10:00Z,nit: `objects` -> `object`,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275139023,275139023,src/wallet/rpcwallet.cpp
meshcollider,2019-04-14T03:46:20Z,nit: indentation is wrong here,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275139512,275139512,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-15T19:15:51Z,This should probably be seconds. I doubt that a user is interested in knowing the exact milliseconds,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275506527,275506527,src/wallet/rpcwallet.cpp
promag,2019-04-15T21:02:59Z,"Yeah but I thought `""duration"": 1.23` seconds is worst because of the decimal part. Happy to change though.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275543567,275543567,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-15T21:08:29Z,"Heh, could truncate",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275545372,275545372,src/wallet/rpcwallet.cpp
promag,2019-04-15T21:47:46Z,"Changed to seconds, only integral part.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275557694,275557694,src/wallet/rpcwallet.cpp
jonasschnelli,2019-04-16T07:45:57Z,shouldn't this (in theory) lock `mutexScanning` to avoid the risk of an out-of-sync `fScanningWallet`/`m_scanning_start` combination (same for line below and wallet.cpp:L1795)?,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275667897,275667897,src/wallet/wallet.h
MarcoFalke,2019-04-16T11:52:22Z,"```suggestion\n        obj.pushKV(""scanning"", UniValue());\n```\n\nhttps://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275758188,275758188,src/wallet/rpcwallet.cpp
promag,2019-04-16T13:35:46Z,"`m_scanning_start` is constant right before `fScanningWallet` is set to `true` so in this case I don't think it's necessary.\n\nThe atomic `m_scanning_progress` is only read when `fScanningWallet` is `true`. Also, `m_scanning_progress` is only changed in `ScanForWalletTransactions`, and we ensure there's only one scan in progress. ",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275799830,275799830,src/wallet/wallet.h
promag,2019-04-16T14:22:19Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275823886,275823886,src/wallet/rpcwallet.cpp
jonatack,2019-04-16T14:33:21Z,"Nice! Am indeed seeing (in testnet):\n```\n""scanning"": {\n    ""duration"": 168,\n    ""progress"": 0.265890921329112\n  }\n```\nHowever, after running `abortrescan`, this is output:\n```\n""scanning"": null\n```\nIs this the desired behavior?\n\nNote that in these 2 cases, the field is absent. EDIT: No scanning key returned in those cases during my manual testnet testing.\n- before rescan",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275829771,275829771,src/wallet/rpcwallet.cpp
jonatack,2019-04-16T14:38:28Z,"(Might be good to add a test that defines the desired behavior, and describe it in the commit message).",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275832735,275832735,src/wallet/rpcwallet.cpp
promag,2019-04-16T14:40:35Z,"> Is this the desired behavior?\n\nYes, this was suggested by @MarcoFalke. `scanning` key is also present right?\n\nBTW, `""progress"": 0.265890921329112` maybe should limit precision?",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275833896,275833896,src/wallet/rpcwallet.cpp
promag,2019-04-16T14:42:07Z,"> (Might be good to add a test that defines the desired behavior, and describe it in the commit message).\n\nI can test the key is there, but I don't think there's a reliable way to test while rescanning.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275834665,275834665,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-16T15:17:19Z,"Precision is fine. We use the same for `  ""verificationprogress"": 0.9831896495042335,`",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275852684,275852684,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-16T15:18:44Z,"> No scanning key returned in those cases during my manual testnet testing.\n\nAre you sure you are running the right binary? All code paths should push back a ""scanning"" key?",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275853389,275853389,src/wallet/rpcwallet.cpp
jonatack,2019-04-16T15:38:45Z,"> Are you sure you are running the right binary? All code paths should push back a ""scanning"" key?\n\nArgh, you are right about the binary. Now seeing `""scanning"": null` in the cases above. Makes sense given `src/wallet/rpcwallet.cpp:2458`. Apologies.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r275863599,275863599,src/wallet/rpcwallet.cpp
luke-jr,2019-04-18T06:19:41Z,Seems better to just omit it?,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r276529475,276529475,src/wallet/rpcwallet.cpp
promag,2019-04-18T06:38:21Z,Yeah I could do that.,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r276533166,276533166,src/wallet/rpcwallet.cpp
luke-jr,2019-04-20T20:31:01Z,"Just one object, right?",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r277145445,277145445,src/wallet/rpcwallet.cpp
promag,2019-04-20T20:35:31Z,Right!,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r277145556,277145556,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-22T14:12:35Z,Then the result would look the same as in the previous version and you couldn't tell (without looking at the bitcoin core version) whether a rescan is happening or not.,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r277301997,277301997,src/wallet/rpcwallet.cpp
promag,2019-04-26T14:07:31Z,"Yeap, that's true if the client is human.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r278964041,278964041,src/wallet/rpcwallet.cpp
luke-jr,2019-04-26T17:11:25Z,"IIRC `null` is the same as omitted in JSON-RPC, so maybe in that case we should put `false` here?",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r279032416,279032416,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-26T17:15:26Z,"yeah, the value is omitted, but not the key.\n\nThough, I am also fine with ""false"", maybe it is more clear even",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r279033772,279033772,src/wallet/rpcwallet.cpp
promag,2019-04-28T10:05:15Z,Changed `null` to `false`.,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r279187028,279187028,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-28T13:19:24Z,"```suggestion\n        m_scanning_progress = (progress_current - progress_begin) / (progress_end - progress_begin);\n```",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r279194538,279194538,src/wallet/wallet.cpp
luke-jr,2019-05-01T09:07:35Z,Semicolon is still missing from this commit.,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r280030617,280030617,src/wallet/wallet.cpp
promag,2019-05-02T10:41:06Z,"Thanks, bad fixup :/",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r280365879,280365879,src/wallet/wallet.cpp
jonatack,2019-05-05T11:34:08Z,s/scanning/scan/,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r281017284,281017284,doc/release-notes-15730.md
jonatack,2019-05-05T11:36:37Z,Perhaps divide by 1000 in src/wallet/wallet.h:L825 instead of here?,https://github.com/bitcoin/bitcoin/pull/15730#discussion_r281017356,281017356,src/wallet/rpcwallet.cpp
jonatack,2019-05-05T11:36:50Z,"The noun is ""scan"", so it could be shorter to name these `ScanDuration` and `ScanProgress`.",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r281017364,281017364,src/wallet/rpcwallet.cpp
jonatack,2019-05-05T11:41:26Z,"better yet: ""if a scan is in progress,""",https://github.com/bitcoin/bitcoin/pull/15730#discussion_r281017496,281017496,doc/release-notes-15730.md
