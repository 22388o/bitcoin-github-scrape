[
  {
    "sha": "dc5a35a5072b273ce2be5b2110bacf298150a725",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzVhMzVhNTA3MmIyNzNjZTJiZTViMjExMGJhY2YyOTgxNTBhNzI1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-18T12:39:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-18T12:52:38Z"
      },
      "message": "doc: clean out release notes post branch-off",
      "tree": {
        "sha": "17f9b354215a24a61af0233b542e865c9fabe2a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17f9b354215a24a61af0233b542e865c9fabe2a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc5a35a5072b273ce2be5b2110bacf298150a725",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl+1GRgACgkQLuufXMCV\nJsERtxAAs+ROcbh7w7khIrLKWPGv8vTq10oqhntUogA985rlu0VHY3wH8kA9XHJq\n+Y3jOmcCcnLVaTj35WR4gKLDma1U/Ov5lQ4kJbeUcYr6WQnziIxmZZAhK61hliMa\nASr1Cb1yc6bjYDfQmCsHE8kIFCXrVeT9ghIHn+FOTWuGvac5FQM9C+jYGfBcDY2T\nf/m+2gXZGbZixnPdIn56S0iCA8FOzfJQmcTngG/uxYjtjjK8SAUANEEiH1mZorQF\nW+HX1L8UhrRezN7+9//UtldRTDS+W2jj3MeIv17kck168u5HdLZv4HstiOTF5lFX\nmiNoOp5vliJMDsNNpoBMXohRaFCzzTmmyrBy0Gk/ug+b/IErDJjdXPAKZQFvwv+y\nkGJPnws1oXZFl+Xo96EeDQZo8HXuel5X5Fw3qbncXJWP0Mo9xSOMsDwkE5Ud3Sh2\neqO0ysk/jNBUHmMdeQ4xybDXxboOejaehEL8HZMussu/plU0N1sz+we8qRuK2inY\n3LLMR6NOZTKVoC52b0M2q7Abf1mUAm4pQ5O66OfOzBD2hE1Yy26JceFqdP1PDmxH\nuQbQU6Lj5RYV25V+k6UjWeIpdy28cjMz5snzAGzJCLpWss8Gyn3SjeHGLKklP/Y1\nLWku+9ueUfRwE6laXBB6dwbfb2xpCoyGWl4qGlYKatMB/quAGsg=\n=VQBC\n-----END PGP SIGNATURE-----",
        "payload": "tree 17f9b354215a24a61af0233b542e865c9fabe2a7\nparent 5bcae7967f73353aff5e6d2f696bbf47ec6fdbb3\nauthor fanquake <fanquake@gmail.com> 1605703159 +0800\ncommitter fanquake <fanquake@gmail.com> 1605703958 +0800\n\ndoc: clean out release notes post branch-off\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5a35a5072b273ce2be5b2110bacf298150a725",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5a35a5072b273ce2be5b2110bacf298150a725",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5a35a5072b273ce2be5b2110bacf298150a725/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bcae7967f73353aff5e6d2f696bbf47ec6fdbb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bcae7967f73353aff5e6d2f696bbf47ec6fdbb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bcae7967f73353aff5e6d2f696bbf47ec6fdbb3"
      }
    ],
    "stats": {
      "total": 386,
      "additions": 4,
      "deletions": 382
    },
    "files": [
      {
        "sha": "57067138b0df728220121580c7468fb3c7daa08c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 382,
        "changes": 386,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc5a35a5072b273ce2be5b2110bacf298150a725/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc5a35a5072b273ce2be5b2110bacf298150a725/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=dc5a35a5072b273ce2be5b2110bacf298150a725",
        "patch": "@@ -45,11 +45,6 @@ wallet versions of Bitcoin Core are generally supported.\n Compatibility\n ==============\n \n-During this release cycle, work has been done to ensure that the codebase is fully\n-compatible with C++17. The intention is to begin using C++17 features starting\n-with the 0.22.0 release. This means that a compiler that supports C++17 will be\n-required to compile 0.22.0.\n-\n Bitcoin Core is supported and extensively tested on operating systems\n using the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\n Core should also work on most other Unix-like systems but is not as\n@@ -60,422 +55,49 @@ From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n longer supported. Additionally, Bitcoin Core does not yet change appearance\n when macOS \"dark mode\" is activated.\n \n-The node's known peers are persisted to disk in a file called `peers.dat`. The\n-format of this file has been changed in a backwards-incompatible way in order to\n-accommodate the storage of Tor v3 and other BIP155 addresses. This means that if\n-the file is modified by 0.21.0 or newer then older versions will not be able to\n-read it. Those old versions, in the event of a downgrade, will log an error\n-message \"Incorrect keysize in addrman deserialization\" and will continue normal\n-operation as if the file was missing, creating a new empty one. (#19954)\n-\n Notable changes\n ===============\n \n P2P and network changes\n -----------------------\n \n-- The mempool now tracks whether transactions submitted via the wallet or RPCs\n-  have been successfully broadcast. Every 10-15 minutes, the node will try to\n-  announce unbroadcast transactions until a peer requests it via a `getdata`\n-  message or the transaction is removed from the mempool for other reasons.\n-  The node will not track the broadcast status of transactions submitted to the\n-  node using P2P relay. This version reduces the initial broadcast guarantees\n-  for wallet transactions submitted via P2P to a node running the wallet. (#18038)\n-\n-- The size of the set of transactions that peers have announced and we consider\n-  for requests has been reduced from 100000 to 5000 (per peer), and further\n-  announcements will be ignored when that limit is reached. If you need to dump\n-  (very) large batches of transactions, exceptions can be made for trusted\n-  peers using the \"relay\" network permission. For localhost for example it can\n-  be enabled using the command line option `-whitelist=relay@127.0.0.1`.\n-  (#19988)\n-\n-- The Tor onion service that is automatically created by setting the\n-  `-listenonion` configuration parameter will now be created as a Tor v3 service\n-  instead of Tor v2. The private key that was used for Tor v2 (if any) will be\n-  left untouched in the `onion_private_key` file in the data directory (see\n-  `-datadir`) and can be removed if not needed. Bitcoin Core will no longer\n-  attempt to read it. The private key for the Tor v3 service will be saved in a\n-  file named `onion_v3_private_key`. To use the deprecated Tor v2 service (not\n-  recommended), then `onion_private_key` can be copied over\n-  `onion_v3_private_key`, e.g.\n-  `cp -f onion_private_key onion_v3_private_key`. (#19954)\n-\n Updated RPCs\n ------------\n \n-- The `getpeerinfo` RPC now has additional `last_block` and `last_transaction`\n-  fields that return the UNIX epoch time of the last block and the last valid\n-  transaction received from each peer. (#19731)\n-\n-- `getnetworkinfo` now returns two new fields, `connections_in` and\n-  `connections_out`, that provide the number of inbound and outbound peer\n-  connections. These new fields are in addition to the existing `connections`\n-  field, which returns the total number of peer connections. (#19405)\n-\n-- Exposed transaction version numbers are now treated as unsigned 32-bit\n-  integers instead of signed 32-bit integers. This matches their treatment in\n-  consensus logic. Versions greater than 2 continue to be non-standard\n-  (matching previous behavior of smaller than 1 or greater than 2 being\n-  non-standard). Note that this includes the joinpsbt command, which combines\n-  partially-signed transactions by selecting the highest version number.\n-  (#16525)\n-\n-- `getmempoolinfo` now returns an additional `unbroadcastcount` field. The\n-  mempool tracks locally submitted transactions until their initial broadcast\n-  is acknowledged by a peer. This field returns the count of transactions\n-  waiting for acknowledgement.\n-\n-- Mempool RPCs such as `getmempoolentry` and `getrawmempool` with\n-  `verbose=true` now return an additional `unbroadcast` field. This indicates\n-  whether initial broadcast of the transaction has been acknowledged by a\n-  peer. `getmempoolancestors` and `getmempooldescendants` are also updated.\n-\n-- The `bumpfee`, `fundrawtransaction`, `sendmany`, `sendtoaddress`, and `walletcreatefundedpsbt`\n-RPC commands have been updated to include two new fee estimation methods \"BTC/kB\" and \"sat/B\".\n-The target is the fee expressed explicitly in the given form. Note that use of this feature\n-will trigger BIP 125 (replace-by-fee) opt-in. (#11413)\n-\n-- In addition, the `estimate_mode` parameter is now case insensitive for all of\n-  the above RPC commands. (#11413)\n-\n-- The `bumpfee` command now uses `conf_target` rather than `confTarget` in the\n-  options. (#11413)\n-\n-- The `getpeerinfo` RPC no longer returns the `banscore` field unless the configuration\n-  option `-deprecatedrpc=banscore` is used. The `banscore` field will be fully\n-  removed in the next major release. (#19469)\n-\n-- The `testmempoolaccept` RPC returns `vsize` and a `fees` object with the `base` fee\n-  if the transaction would pass validation. (#19940)\n-\n-- The `getpeerinfo` RPC now returns a `connection_type` field. This indicates\n-  the type of connection established with the peer. It will return one of six\n-  options. For more information, see the `getpeerinfo` help documentation.\n-  (#19725)\n-\n-- The `getpeerinfo` RPC no longer returns the `addnode` field by default. This\n-  field will be fully removed in the next major release.  It can be accessed\n-  with the configuration option `-deprecatedrpc=getpeerinfo_addnode`. However,\n-  it is recommended to instead use the `connection_type` field (it will return\n-  `manual` when addnode is true). (#19725)\n-\n-- The `walletcreatefundedpsbt` RPC call will now fail with\n-  `Insufficient funds` when inputs are manually selected but are not enough to cover\n-  the outputs and fee. Additional inputs can automatically be added through the\n-  new `add_inputs` option. (#16377)\n-\n-- The `fundrawtransaction` RPC now supports `add_inputs` option that when `false`\n-  prevents adding more inputs if necessary and consequently the RPC fails.\n-\n Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n New RPCs\n --------\n \n-- The `getindexinfo` RPC returns the actively running indices of the node,\n-  including their current sync status and height. It also accepts an `index_name`\n-  to specify returning only the status of that index. (#19550)\n-\n Build System\n ------------\n \n+New settings\n+------------\n+\n Updated settings\n ----------------\n \n-- The same ZeroMQ notification (e.g. `-zmqpubhashtx=address`) can now be\n-  specified multiple times to publish the same notification to different ZeroMQ\n-  sockets. (#18309)\n-\n-- The `-banscore` configuration option, which modified the default threshold for\n-  disconnecting and discouraging misbehaving peers, has been removed as part of\n-  changes in 0.20.1 and in this release to the handling of misbehaving peers.\n-  Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release notes for\n-  details. (#19464)\n-\n-- The `-debug=db` logging category, which was deprecated in 0.20 and replaced by\n-  `-debug=walletdb` to distinguish it from `coindb`, has been removed. (#19202)\n-\n-- A `download` permission has been extracted from the `noban` permission. For\n-  compatibility, `noban` implies the `download` permission, but this may change\n-  in future releases. Refer to the help of the affected settings `-whitebind`\n-  and `-whitelist` for more details. (#19191)\n-\n-- Netmasks that contain 1-bits after 0-bits (the 1-bits are not contiguous on\n-  the left side, e.g. 255.0.255.255) are no longer accepted. They are invalid\n-  according to RFC 4632. Netmasks are used in the `-rpcallowip` and `-whitelist`\n-  configuration options and in the `setban` RPC. (#19628)\n-\n-Changes to Wallet or GUI related settings can be found in the GUI or Wallet  section below.\n+Changes to Wallet or GUI related settings can be found in the GUI or Wallet section below.\n \n Tools and Utilities\n -------------------\n \n-- The `connections` field of `bitcoin-cli -getinfo` is expanded to return a JSON\n-  object with `in`, `out` and `total` numbers of peer connections. It previously\n-  returned a single integer value for the total number of peer connections. (#19405)\n-\n-- A new `bitcoin-cli -generate` command, equivalent to RPC `generatenewaddress`\n-  followed by `generatetoaddress`, can generate blocks for command line testing\n-  purposes. This is a client-side version of the\n-  former `generate` RPC. See the help for details. (#19133)\n-\n-- The `bitcoin-cli -getinfo` command now displays the wallet name and balance for\n-  each of the loaded wallets when more than one is loaded (e.g. in multiwallet\n-  mode) and a wallet is not specified with `-rpcwallet`. (#18594)\n-\n-New settings\n-------------\n-\n-- The `startupnotify` option is used to specify a command to\n-  execute when Bitcoin Core has finished with its startup\n-  sequence. (#15367)\n-\n Wallet\n ------\n \n-- Backwards compatibility has been dropped for two `getaddressinfo` RPC\n-  deprecations, as notified in the 0.20 release notes. The deprecated `label`\n-  field has been removed as well as the deprecated `labels` behavior of\n-  returning a JSON object containing `name` and `purpose` key-value pairs. Since\n-  0.20, the `labels` field returns a JSON array of label names. (#19200)\n-\n-- To improve wallet privacy, the frequency of wallet rebroadcast attempts is\n-  reduced from approximately once every 15 minutes to once every 12-36 hours.\n-  To maintain a similar level of guarantee for initial broadcast of wallet\n-  transactions, the mempool tracks these transactions as a part of the newly\n-  introduced unbroadcast set. See the \"P2P and network changes\" section for\n-  more information on the unbroadcast set. (#18038)\n-\n-- The `sendtoaddress` and `sendmany` RPCs accept an optional `verbose=True`\n-  argument to also return the fee reason about the sent tx. (#19501)\n-\n-- The wallet can create a transaction without change even when the keypool is\n-  empty. Previously it failed. (#17219)\n-\n-- The `-salvagewallet` startup option has been removed. A new `salvage` command\n-  has been added to the `bitcoin-wallet` tool which performs the salvage\n-  operations that `-salvagewallet` did. (#18918)\n-\n-- A new configuration flag `-maxapsfee` has been added, which sets the max\n-  allowed avoid partial spends (APS) fee. It defaults to 0 (i.e. fee is the\n-  same with and without APS). Setting it to -1 will disable APS, unless\n-  `-avoidpartialspends` is set. (#14582)\n-\n-- The wallet will now avoid partial spends (APS) by default, if this does not\n-  result in a difference in fees compared to the non-APS variant. The allowed\n-  fee threshold can be adjusted using the new `-maxapsfee` configuration\n-  option. (#14582)\n-\n-- The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n-  `load_on_startup` options to modify the settings list. Unless these options\n-  are explicitly set to true or false, the list is not modified, so the RPC\n-  methods remain backwards compatible. (#15937)\n-\n-- A new `send` RPC with similar syntax to `walletcreatefundedpsbt`, including\n-  support for coin selection and a custom fee rate. The `send` RPC is\n-  experimental and may change in subsequent releases. Using it is encouraged\n-  once it's no longer experimental: `sendmany` and `sendtoaddress` may be\n-  deprecated in a future release. (#16378)\n-\n-- `fundrawtransaction` and `walletcreatefundedpsbt` when used with the\n-  `lockUnspents` argument now lock manually selected coins, in addition to\n-  automatically selected coins. Note that locked coins are never used in\n-  automatic coin selection, but can still be manually selected. (#18244)\n-\n-- The `-zapwallettxes` startup option has been removed and its functionality\n-  removed from the wallet.  This option was originally intended to allow for\n-  the fee bumping of transactions that did not signal RBF. This functionality\n-  has been superseded with the abandon transaction feature. (#19671)\n-\n-- The error code when no wallet is loaded, but a wallet RPC is called, has been\n-  changed from `-32601` (method not found) to `-18` (wallet not found).\n-  (#20101)\n-\n-### Automatic wallet creation removed\n-\n-Bitcoin Core will no longer automatically create new wallets on startup. It will\n-load existing wallets specified by `-wallet` options on the command line or in\n-`bitcoin.conf` or `settings.json` files. And by default it will also load a\n-top-level unnamed (\"\") wallet. However, if specified wallets don't exist,\n-Bitcoin Core will now just log warnings instead of creating new wallets with\n-new keys and addresses like previous releases did.\n-\n-New wallets can be created through the GUI (which has a more prominent create\n-wallet option), through the `bitcoin-cli createwallet` or `bitcoin-wallet\n-create` commands, or the `createwallet` RPC. (#15454)\n-\n-### Experimental Descriptor Wallets\n-\n-Please note that Descriptor Wallets are still experimental and not all expected functionality\n-is available. Additionally there may be some bugs and current functions may change in the future.\n-Bugs and missing functionality can be reported to the [issue tracker](https://github.com/bitcoin/bitcoin/issues).\n-\n-0.21 introduces a new type of wallet - Descriptor Wallets. Descriptor Wallets store\n-scriptPubKey information using descriptors. This is in contrast to the Legacy Wallet\n-structure where keys are used to generate scriptPubKeys and addresses. Because of this\n-shift to being script based instead of key based, many of the confusing things that Legacy\n-Wallets do are not possible with Descriptor Wallets. Descriptor Wallets use a definition\n-of \"mine\" for scripts which is simpler and more intuitive than that used by Legacy Wallets.\n-Descriptor Wallets also uses different semantics for watch-only things and imports.\n-\n-As Descriptor Wallets are a new type of wallet, their introduction does not affect existing wallets.\n-Users who already have a Bitcoin Core wallet can continue to use it as they did before without\n-any change in behavior. Newly created Legacy Wallets (which is the default type of wallet) will\n-behave as they did in previous versions of Bitcoin Core.\n-\n-The differences between Descriptor Wallets and Legacy Wallets are largely limited to non user facing\n-things. They are intended to behave similarly except for the import/export and watchonly functionality\n-as described below.\n-\n-#### Creating Descriptor Wallets\n-\n-Descriptor Wallets are not created by default. They must be explicitly created using the\n-`createwallet` RPC or via the GUI. A `descriptors` option has been added to `createwallet`.\n-Setting `descriptors` to `true` will create a Descriptor Wallet instead of a Legacy Wallet.\n-\n-In the GUI, a checkbox has been added to the Create Wallet Dialog to indicate that a\n-Descriptor Wallet should be created.\n-\n-Without those options being set, a Legacy Wallet will be created instead. Additionally the\n-Default Wallet created upon first startup of Bitcoin Core will be a Legacy Wallet.\n-\n-#### `IsMine` Semantics\n-\n-`IsMine` refers to the function used to determine whether a script belongs to the wallet.\n-This is used to determine whether an output belongs to the wallet. `IsMine` in Legacy Wallets\n-returns true if the wallet would be able to sign an input that spends an output with that script.\n-Since keys can be involved in a variety of different scripts, this definition for `IsMine` can\n-lead to many unexpected scripts being considered part of the wallet.\n-\n-With Descriptor Wallets, descriptors explicitly specify the set of scripts that are owned by\n-the wallet. Since descriptors are deterministic and easily enumerable, users will know exactly\n-what scripts the wallet will consider to belong to it. Additionally the implementation of `IsMine`\n-in Descriptor Wallets is far simpler than for Legacy Wallets. Notably, in Legacy Wallets, `IsMine`\n-allowed for users to take one type of address (e.g. P2PKH), mutate it into another address type\n-(e.g. P2WPKH), and the wallet would still detect outputs sending to the new address type\n-even without that address being requested from the wallet. Descriptor Wallets does not\n-allow for this and will only watch for the addresses that were explicitly requested from the wallet.\n-\n-These changes to `IsMine` will make it easier to reason about what scripts the wallet will\n-actually be watching for in outputs. However for the vast majority of users, this change is\n-largely transparent and will not have noticeable effect.\n-\n-#### Imports and Exports\n-\n-In Legacy Wallets, raw scripts and keys could be imported to the wallet. Those imported scripts\n-and keys are treated separately from the keys generated by the wallet. This complicates the `IsMine`\n-logic as it has to distinguish between spendable and watchonly.\n-\n-Descriptor Wallets handle importing scripts and keys differently. Only complete descriptors can be\n-imported. These descriptors are then added to the wallet as if it were a descriptor generated by\n-the wallet itself. This simplifies the `IsMine` logic so that it no longer has to distinguish\n-between spendable and watchonly. As such, the watchonly model for Descriptor Wallets is also\n-different and described in more detail in the next section.\n-\n-To import into a Descriptor Wallet, a new `importdescriptors` RPC has been added that uses a syntax\n-similar to that of `importmulti`.\n-\n-As Legacy Wallets and Descriptor Wallets use different mechanisms for storing and importing scripts and keys\n-the existing import RPCs have been disabled for descriptor wallets.\n-New export RPCs for Descriptor Wallets have not yet been added.\n-\n-The following RPCs are disabled for Descriptor Wallets:\n-\n-* importprivkey\n-* importpubkey\n-* importaddress\n-* importwallet\n-* dumpprivkey\n-* dumpwallet\n-* importmulti\n-* addmultisigaddress\n-* sethdseed\n-\n-#### Watchonly Wallets\n-\n-A Legacy Wallet contains both private keys and scripts that were being watched.\n-Those watched scripts would not contribute to your normal balance. In order to see the watchonly\n-balance and to use watchonly things in transactions, an `include_watchonly` option was added\n-to many RPCs that would allow users to do that. However it is easy to forget to include this option.\n-\n-Descriptor Wallets move to a per-wallet watchonly model. Instead an entire wallet is considered to be\n-watchonly depending on whether it was created with private keys disabled. This eliminates the need\n-to distinguish between things that are watchonly and things that are not within a wallet itself.\n-\n-This change does have a caveat. If a Descriptor Wallet with private keys *enabled* has\n-a multiple key descriptor without all of the private keys (e.g. `multi(...)` with only one private key),\n-then the wallet will fail to sign and broadcast transactions. Such wallets would need to use the PSBT\n-workflow but the typical GUI Send, `sendtoaddress`, etc. workflows would still be available, just\n-non-functional.\n-\n-This issue is worsened if the wallet contains both single key (e.g. `wpkh(...)`) descriptors and such\n-multiple key descriptors as some transactions could be signed and broadast and others not. This is\n-due to some transactions containing only single key inputs, while others would contain both single\n-key and multiple key inputs, depending on which are available and how the coin selection algorithm\n-selects inputs. However this is not considered to be a supported use case; multisigs\n-should be in their own wallets which do not already have descriptors. Although users cannot export\n-descriptors with private keys for now as explained earlier.\n-\n-#### BIP 44/49/84 Support\n-\n-The change to using descriptors changes the default derivation paths used by Bitcoin Core\n-to adhere to BIP 44/49/84. Descriptors with different derivation paths can be imported without\n-issue.\n-\n-### Wallet RPC changes\n-\n-- The `upgradewallet` RPC replaces the `-upgradewallet` command line option.\n-  (#15761)\n-- The `settxfee` RPC will fail if the fee was set higher than the `-maxtxfee`\n-  command line setting. The wallet will already fail to create transactions\n-  with fees higher than `-maxtxfee`. (#18467)\n-\n GUI changes\n -----------\n \n-- Wallets created or loaded in the GUI will now be automatically loaded on\n-  startup, so they don't need to be manually reloaded next time Bitcoin Core is\n-  started. The list of wallets to load on startup is stored in\n-  `\\<datadir\\>/settings.json` and augments any command line or `bitcoin.conf`\n-  `-wallet=` settings that specify more wallets to load. Wallets that are\n-  unloaded in the GUI get removed from the settings list so they won't load\n-  again automatically next startup. (#19754)\n-\n-- The GUI Peers window no longer displays a \"Ban Score\" field. This is part of\n-  changes in 0.20.1 and in this release to the handling of misbehaving\n-  peers. Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release\n-  notes for details. (#19512)\n-\n Low-level changes\n =================\n \n RPC\n ---\n \n-- To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n-    `sendtoaddress` codes were changed from `-4` to `-6`:\n-  - Insufficient funds\n-  - Fee estimation failed\n-  - Transaction has too long of a mempool chain\n-\n-- The `sendrawtransaction` error code for exceeding `maxfeerate` has been changed from\n-  `-26` to `-25`. The error string has been changed from \"absurdly-high-fee\" to\n-  \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate).\" The\n-  `testmempoolaccept` RPC returns `max-fee-exceeded` rather than `absurdly-high-fee`\n-  as the `reject-reason`. (#19339)\n-\n-- To make wallet and rawtransaction RPCs more consistent, the error message for\n-  exceeding maximum feerate has been changed to \"Fee exceeds maximum configured by user\n-  (e.g. -maxtxfee, maxfeerate).\" (#19339)\n-\n Tests\n -----\n \n-- The BIP 325 default signet can be enabled by the `-chain=signet` or `-signet`\n-  setting. The settings `-signetchallenge` and `-signetseednode` allow\n-  enabling a custom signet.\n-\n Credits\n =======\n "
      }
    ]
  },
  {
    "sha": "8a715a6b17a8c10369dcfad735b4362bef0c326c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTcxNWE2YjE3YThjMTAzNjlkY2ZhZDczNWI0MzYyYmVmMGMzMjZj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-18T12:49:28Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-18T12:52:44Z"
      },
      "message": "build: Bump gitian descriptors to 0.22",
      "tree": {
        "sha": "b400bac35ba7c13b37321298943120ee8a3f863e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b400bac35ba7c13b37321298943120ee8a3f863e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a715a6b17a8c10369dcfad735b4362bef0c326c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl+1GRwACgkQLuufXMCV\nJsGDlw/9FJF1tyPGiGmMDT1WRfSnszB18YjtZwA4DqTpsO0Fh/nn97gX7S2AfmIZ\nni1Y5HIJZM04f1F2OqTW50adxdx6KyktZbY6y68XGYGiUhhRsGGe7GzaoqNs5HP1\nv+UkWwUTHk0OREtN6gXCQB3WDKHh4ezdRD+9qmYSMJdHIKr00QurNB7DQuF9fLxb\nePf+dkHjthcOs3J9xMNZLb/EGAGErb7OGYCLX9ftiREN18e322CEZO+fyspYoxvZ\n/VsAWhN8LmAWKl9uMdzoooH+CILET2lYLKAelj53+z8+MXs63Xo0tIWoDGT8lOLU\nnKzKWJaLhxFMPQao8ZBBuKRPPeJjUdDP8U08v+WFQwkVt7RGWMzOOXfGkcJoCZE0\n2qbpsLokNyd3VwovpKBxGKsgOyE9JRlgt4K+L6FUhZFxncFqC2FFeXIxc3ChiXJi\nDVXD2BhEmRH0xslN8DPJNczRJP5KUUOEibaATlIYC+sDJn6YikOkAXwOw9wktYW0\naxoZVK02+POi+p76Ei4fIHEykDf0rbeDRi7CYsdPrqXuMTql3GzoCv/x9f+jiRxX\nLP9uaF3XePepDoUMLDxETD1dpXOTnpJyXAewvC134k4WORSrLGe1z1FHkdMmaJzs\ndXgEzxCoqUGaQB45knbL8xw2296MtD/1qJDmjaswsAPmbXNcNwA=\n=TOVU\n-----END PGP SIGNATURE-----",
        "payload": "tree b400bac35ba7c13b37321298943120ee8a3f863e\nparent dc5a35a5072b273ce2be5b2110bacf298150a725\nauthor fanquake <fanquake@gmail.com> 1605703768 +0800\ncommitter fanquake <fanquake@gmail.com> 1605703964 +0800\n\nbuild: Bump gitian descriptors to 0.22\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a715a6b17a8c10369dcfad735b4362bef0c326c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a715a6b17a8c10369dcfad735b4362bef0c326c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a715a6b17a8c10369dcfad735b4362bef0c326c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc5a35a5072b273ce2be5b2110bacf298150a725",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5a35a5072b273ce2be5b2110bacf298150a725",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5a35a5072b273ce2be5b2110bacf298150a725"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f873742a6dddb113425b8f1b58cf0e17d5fc86b0",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a715a6b17a8c10369dcfad735b4362bef0c326c/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a715a6b17a8c10369dcfad735b4362bef0c326c/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=8a715a6b17a8c10369dcfad735b4362bef0c326c",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-linux-0.21\"\n+name: \"bitcoin-core-linux-0.22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:"
      },
      {
        "sha": "0479a49514454846c871aa91b967bf01d632d2ed",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a715a6b17a8c10369dcfad735b4362bef0c326c/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a715a6b17a8c10369dcfad735b4362bef0c326c/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=8a715a6b17a8c10369dcfad735b4362bef0c326c",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-osx-0.21\"\n+name: \"bitcoin-core-osx-0.22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:"
      },
      {
        "sha": "7900c7e07e0043ce9ddf06ad56b57fa621df9d14",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a715a6b17a8c10369dcfad735b4362bef0c326c/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a715a6b17a8c10369dcfad735b4362bef0c326c/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=8a715a6b17a8c10369dcfad735b4362bef0c326c",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-win-0.21\"\n+name: \"bitcoin-core-win-0.22\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:"
      }
    ]
  }
]