laanwj,2012-11-11T09:00:38Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-10264474,10264474,
sipa,2012-11-11T11:12:14Z,"Regarding Begin/End/AbortMessage, wouldn't it be cleaner to introduce a CMessageBuilder class, which holds a scoped lock of a referenced CNode::cs_vSend, and forwards operator<< to the respective vSend? For example CNode::PushMessage(pszCommand, a1) could then become simply { CMessageBuilder m(this, pszCommand); m << a1; m.Send(); }.\n",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-10265277,10265277,
jgarzik,2012-11-16T02:22:30Z,"How about just building unlocked, then copying the message into vSend.\n\nThat adds a memory copy (potentially large for ""block"" messages), but it eliminates the locking mess, and also eliminates the whole nHeaderStart-then-back-out-if-we-abort stuff.  Clean and simple, if the memory copy burden is OK.\n",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-10434403,10434403,
BitcoinPullTester,2012-11-23T10:19:34Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/25511af4a57816c4f9bb960527f090a9719c9010 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-10655317,10655317,
laanwj,2012-12-06T07:44:23Z,"I like @jgarzik's idea. Shared-nothing passing messages is a safe and elegant default, if it turns out to be a performance burden, which I don't believe so, it can always be optimized again **without** the locking mess.\n",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11075710,11075710,
alexanderkjeldaas,2012-12-06T17:22:14Z,"Hi, sorry I have not had time to follow up on these locking changes, but..\n\nActually locking and synchronous shared-nothing message passing are very\nsimilar from a theoretical point of view.\n\nTo build an intuition for this, imagine that you create a thread for every\nset of locks that can be held in the program at the same time, by some\nthread.  What does this mean? It means that you create ",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11094855,11094855,
laanwj,2012-12-06T18:58:34Z,"Indeed, theoretically they are equivalent (still, in practice it is harder to mess up as subtly with message passing, as you can see in one glance what is passed instead of having to spend a lot of time carefully analyzing locks).\n\nBut I think jgarzik was talking about one specific case, building a message that's going to go over a socket anyway to get rid of a TRY_LOCK, not rewriting the entire",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11098676,11098676,
alexanderkjeldaas,2012-12-06T19:31:08Z,"Aha. Mea culpa.  That does indeed seem like a good plan.\n\nOn 6 December 2012 15:58, Wladimir J. van der Laan <notifications@github.com\n\n> wrote:\n> \n> Indeed, theoretically they are equivalent.\n> But I think jgarzik was talking about one specific case, building a\n> message that's going to go over a socket anyway to get rid of a TRY_LOCK,\n> not rewriting the entire application.\n> \n> â€”\n> ",https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11100068,11100068,
gavinandresen,2012-12-12T17:27:32Z,Merging; I'm excited about using clang to help us make sure locking is correct and efficient.\n,https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11298939,11298939,
