[
  {
    "sha": "e8640849c775efcf202dbd34736fed8d61379c49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODY0MDg0OWM3NzVlZmNmMjAyZGJkMzQ3MzZmZWQ4ZDYxMzc5YzQ5",
    "commit": {
      "author": {
        "name": "Sawyer Billings",
        "email": "sawpaw19@gmail.com",
        "date": "2020-12-31T02:49:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-01-04T04:23:16Z"
      },
      "message": "doc: Use https URLs where possible",
      "tree": {
        "sha": "61f54fc033bdd157d33e6afd89a96c929592beb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61f54fc033bdd157d33e6afd89a96c929592beb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8640849c775efcf202dbd34736fed8d61379c49",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ymDQACgkQLuufXMCV\nJsGjcw/+IA5diaeF0fb3UwYs4oBIDaLl1FvbxCJec2Kp0rn7GPy6toS1c7FWWKqQ\nxeNNWZn8AACBiDovZvnhI7GAjoAbM3vRmUp5Dvx+jYXMUXzQYzDSTtR9eNMB0KZo\nDTrESbBGSLPs0Oej/SEmLyG0Sv9a7LEMovGAfxm6lujOPXvo5k7b+ZE4vKpe20Gf\n6a3tlLL8LkxG8cob6f0iTqz6Fo7VPVKOWg/uSIW1C/nAFRYRNGREVKCqhrOt+8BL\ndmo28kFvcnezI+kYhDmFFsK/jW9z96uMwQT5iaHoIyi77+ESYVs07dWzJFQt0Zgl\nEHzfYRFslHGIzhetgq0EQ/phc8C3KBHwSPvyDuuQSMdcf+nqwnCn+HQZ5ysLTBjb\nyaL8erdVMIByTlj1we2wrXUwUzSxWq2q54pIenkCg4iuolstoL+srXh5PEqGBqwU\nZg1hL2pfeHp73RIdoRaY7EwEb7T6eVGCeZdAHKCd1Fr6kBjKlkEwpTBtXjFlCCXG\nk+gVG16BDNvw8/tI/n2nb6rLxJM7zDDfi7ceAfP/+TiVeKo7rWpHv8UqVsVGeumT\nhR8VRI9s9kMQSwsFfbfKE3ClpJJAvNrZtaseRAAR9aaQ6pA6871RnkEMN2aFlP1l\nkfkY5O2YAP0iac2W8zC30hE1IQ5Xlic6rFM5qhU3WShlPtFvxrE=\n=w8qY\n-----END PGP SIGNATURE-----",
        "payload": "tree 61f54fc033bdd157d33e6afd89a96c929592beb3\nparent f52f427b8eece858844c395e47c378864acc242d\nauthor Sawyer Billings <sawpaw19@gmail.com> 1609382952 -0500\ncommitter fanquake <fanquake@gmail.com> 1609734196 +0800\n\ndoc: Use https URLs where possible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8640849c775efcf202dbd34736fed8d61379c49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8640849c775efcf202dbd34736fed8d61379c49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8640849c775efcf202dbd34736fed8d61379c49/comments",
    "author": {
      "login": "sbilling",
      "id": 15135737,
      "node_id": "MDQ6VXNlcjE1MTM1NzM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15135737?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sbilling",
      "html_url": "https://github.com/sbilling",
      "followers_url": "https://api.github.com/users/sbilling/followers",
      "following_url": "https://api.github.com/users/sbilling/following{/other_user}",
      "gists_url": "https://api.github.com/users/sbilling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sbilling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sbilling/subscriptions",
      "organizations_url": "https://api.github.com/users/sbilling/orgs",
      "repos_url": "https://api.github.com/users/sbilling/repos",
      "events_url": "https://api.github.com/users/sbilling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sbilling/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f52f427b8eece858844c395e47c378864acc242d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f52f427b8eece858844c395e47c378864acc242d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f52f427b8eece858844c395e47c378864acc242d"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "596f65cf102e239104dee22b27d61a835de7e778",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -135,7 +135,7 @@ Refer to [/test/functional/README.md#style-guidelines](/test/functional/README.m\n Coding Style (Doxygen-compatible comments)\n ------------------------------------------\n \n-Bitcoin Core uses [Doxygen](http://www.doxygen.nl/) to generate its official documentation.\n+Bitcoin Core uses [Doxygen](https://www.doxygen.nl/) to generate its official documentation.\n \n Use Doxygen-compatible comment blocks for functions, methods, and fields.\n \n@@ -156,7 +156,7 @@ For example, to describe a function use:\n bool function(int arg1, const char *arg2, std::string& arg3)\n ```\n \n-A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n+A complete list of `@xxx` commands can be found at https://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n@@ -203,7 +203,7 @@ Also not picked up by Doxygen:\n  */\n ```\n \n-A full list of comment syntaxes picked up by Doxygen can be found at http://www.doxygen.nl/manual/docblocks.html,\n+A full list of comment syntaxes picked up by Doxygen can be found at https://www.doxygen.nl/manual/docblocks.html,\n but the above styles are favored.\n \n Recommendations:\n@@ -216,7 +216,7 @@ Recommendations:\n \n - Backticks aren't required when referring to functions Doxygen already knows\n   about; it will build hyperlinks for these automatically. See\n-  http://www.doxygen.nl/manual/autolink.html for complete info.\n+  https://www.doxygen.nl/manual/autolink.html for complete info.\n \n - Avoid linking to external documentation; links can break.\n "
      },
      {
        "sha": "0afe8fcc145780798d154c6296f856b4df8b80e9",
        "filename": "src/crypto/chacha_poly_aead.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/crypto/chacha_poly_aead.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/crypto/chacha_poly_aead.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.h?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -17,12 +17,12 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n /* A AEAD class for ChaCha20-Poly1305@bitcoin.\n  *\n  * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n- * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * <ref>[https://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n  * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n  * bit counter into 64 bytes of output. This output is used as a keystream, with\n  * any unused bytes simply discarded.\n  *\n- * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * Poly1305 <ref>[https://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n  * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n  * integrity tag given a message and a single-use 256 bit secret key.\n  *"
      },
      {
        "sha": "143752c7cf999cf1ce8bac5ada4b6926615d0b25",
        "filename": "src/crypto/sha256_sse4.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/crypto/sha256_sse4.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/crypto/sha256_sse4.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_sse4.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -1001,7 +1001,7 @@ void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n ; This code is described in an Intel White-Paper:\n ; \"Fast SHA-256 Implementations on Intel Architecture Processors\"\n ;\n-; To find it, surf to http://www.intel.com/p/en_US/embedded \n+; To find it, surf to https://www.intel.com/p/en_US/embedded\n ; and search for that title.\n ; The paper is expected to be released roughly at the end of April, 2012\n ;"
      },
      {
        "sha": "1166466771ed9c1dbf52388dab2e0c0afd649722",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -225,7 +225,7 @@ class cache\n      *  [0, 1) and simply multiply it by the size. Then we just shift the result down by\n      *  32-bits to get our bucket number. The result has non-uniformity the same as a\n      *  mod, but it is much faster to compute. More about this technique can be found at\n-     *  http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/ .\n+     *  https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/ .\n      *\n      * The resulting non-uniformity is also more equally distributed which would be\n      *  advantageous for something like linear probing, though it shouldn't matter"
      },
      {
        "sha": "cc46043c2bf747bca1959b5662fbf90a380c6a79",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -15,7 +15,7 @@ inline uint32_t ROTL32(uint32_t x, int8_t r)\n \n unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vDataToHash)\n {\n-    // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n+    // The following is MurmurHash3 (x86_32), see https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;\n     const uint32_t c1 = 0xcc9e2d51;\n     const uint32_t c2 = 0x1b873593;"
      },
      {
        "sha": "1e59b301cb2bfee75c258f32d86b940fd4c910d3",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -18,7 +18,7 @@ static secp256k1_context* secp256k1_context_sign = nullptr;\n \n /**\n  * This parses a format loosely based on a DER encoding of the ECPrivateKey type from\n- * section C.4 of SEC 1 <http://www.secg.org/sec1-v2.pdf>, with the following caveats:\n+ * section C.4 of SEC 1 <https://www.secg.org/sec1-v2.pdf>, with the following caveats:\n  *\n  * * The octet-length of the SEQUENCE must be encoded as 1 or 2 octets. It is not\n  *   required to be encoded as one octet if it is less than 256, as DER would require.\n@@ -80,7 +80,7 @@ int ec_seckey_import_der(const secp256k1_context* ctx, unsigned char *out32, con\n \n /**\n  * This serializes to a DER encoding of the ECPrivateKey type from section C.4 of SEC 1\n- * <http://www.secg.org/sec1-v2.pdf>. The optional parameters and publicKey fields are\n+ * <https://www.secg.org/sec1-v2.pdf>. The optional parameters and publicKey fields are\n  * included.\n  *\n  * seckey must point to an output buffer of length at least CKey::SIZE bytes."
      },
      {
        "sha": "8efb0e35d00018d158c3947538674174c0377362",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -77,7 +77,7 @@ static void RegisterMetaTypes()\n   #ifdef ENABLE_WALLET\n     qRegisterMetaType<WalletModel*>();\n   #endif\n-    // Register typedefs (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n+    // Register typedefs (see https://doc.qt.io/qt-5/qmetatype.html#qRegisterMetaType)\n     // IMPORTANT: if CAmount is no longer a typedef use the normal variant above (see https://doc.qt.io/qt-5/qmetatype.html#qRegisterMetaType-1)\n     qRegisterMetaType<CAmount>(\"CAmount\");\n     qRegisterMetaType<size_t>(\"size_t\");"
      },
      {
        "sha": "8205b0506cd1d2201100dbf64b21abda451c9486",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -655,7 +655,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n #elif defined(Q_OS_LINUX)\n \n // Follow the Desktop Application Autostart Spec:\n-// http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n+// https://specifications.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n fs::path static GetAutostartDir()\n {"
      },
      {
        "sha": "b097ef080c8f90bc787717b7849e67087f483071",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -66,7 +66,7 @@ Notificator::~Notificator()\n \n #ifdef USE_DBUS\n \n-// Loosely based on http://www.qtcentre.org/archive/index.php/t-25879.html\n+// Loosely based on https://www.qtcentre.org/archive/index.php/t-25879.html\n class FreedesktopImage\n {\n public:"
      },
      {
        "sha": "6965f402536ab36f61eb62425f8051a6c9473201",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -65,7 +65,7 @@ void* Arena::alloc(size_t size)\n \n     // Pick a large enough free-chunk. Returns an iterator pointing to the first element that is not less than key.\n     // This allocation strategy is best-fit. According to \"Dynamic Storage Allocation: A Survey and Critical Review\",\n-    // Wilson et. al. 1995, http://www.scs.stanford.edu/14wi-cs140/sched/readings/wilson.pdf, best-fit and first-fit\n+    // Wilson et. al. 1995, https://www.scs.stanford.edu/14wi-cs140/sched/readings/wilson.pdf, best-fit and first-fit\n     // policies seem to work well in practice.\n     auto size_ptr_it = size_to_free_chunk.lower_bound(size);\n     if (size_ptr_it == size_to_free_chunk.end())"
      },
      {
        "sha": "b4a61202ef79bffe4d0f1c9289cc8951aa7ac47f",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -166,7 +166,7 @@ bool TimingResistantEqual(const T& a, const T& b)\n }\n \n /** Parse number as fixed point according to JSON number syntax.\n- * See http://json.org/number.gif\n+ * See https://json.org/number.gif\n  * @returns true on success, false on error.\n  * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n  */"
      },
      {
        "sha": "202804c9ffdc281ac0494bf436a382b3fa85a8b5",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -453,7 +453,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n-        // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n+        // run the 'mtgox' test (see https://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n         empty_wallet();\n         for (int j = 0; j < 20; j++)"
      },
      {
        "sha": "e0cbab45ce43806a93a818c688efe70703c42b0f",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -27,7 +27,7 @@ def xor_bytes(b0, b1):\n def jacobi_symbol(n, k):\n     \"\"\"Compute the Jacobi symbol of n modulo k\n \n-    See http://en.wikipedia.org/wiki/Jacobi_symbol\n+    See https://en.wikipedia.org/wiki/Jacobi_symbol\n \n     For our application k is always prime, so this is the same as the Legendre symbol.\"\"\"\n     assert k > 0 and k & 1, \"jacobi symbol is only defined for positive odd k\""
      },
      {
        "sha": "e047e7fa140e05da8626072c98fceb067f7d522c",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8640849c775efcf202dbd34736fed8d61379c49/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8640849c775efcf202dbd34736fed8d61379c49/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=e8640849c775efcf202dbd34736fed8d61379c49",
        "patch": "@@ -84,7 +84,7 @@ def get_bind_addrs(pid):\n             bind_addrs.append(conn[1])\n     return bind_addrs\n \n-# from: http://code.activestate.com/recipes/439093/\n+# from: https://code.activestate.com/recipes/439093/\n def all_interfaces():\n     '''\n     Return all interfaces that are up"
      }
    ]
  },
  {
    "sha": "1112035d32ffe73a4522226c8cb2f6a5878d3ada",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTEyMDM1ZDMyZmZlNzNhNDUyMjIyNmM4Y2IyZjZhNTg3OGQzYWRh",
    "commit": {
      "author": {
        "name": "Ikko Ashimine",
        "email": "eltociear@gmail.com",
        "date": "2020-12-24T13:37:17Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-01-04T04:31:31Z"
      },
      "message": "doc: fix various typos\n\nCo-authored-by: Peter Yordanov <ppyordanov@yahoo.com>",
      "tree": {
        "sha": "7f5021ab6d285213918da66a9aaefa873ae4a5bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f5021ab6d285213918da66a9aaefa873ae4a5bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1112035d32ffe73a4522226c8cb2f6a5878d3ada",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/ymiMACgkQLuufXMCV\nJsGmQQ//XKKhbqcuqgcxo9xNQ6hcwdtbxU3BcwrmKiUceFFs6iPpxFfm85YLV4Wy\nb6WgptfebICkAOFp0FXieta19wnk+CkE1BMOBewsNbTXOqcgBB9dUt/tSFhHI1p+\n9H0pUr+/ezzI/fgNXREXtvzldvfdENZvTnuWtFu2sZ4eFuxnqhinKtvzObFrLsM1\nne8tm+CaGc1IpWXZAOJjsr2ejANOyDsbAib7SZpBVwv1cEu5aP+pVfWVpDU761bu\nA9xN1IvH9ThwmKTu93qbTBFl10XsjR7s1TB3X4Jk7YGffKpy3lwlVxeCsN/Z7lLJ\nxNGa7+/i2Co4MrUQd53FidFkCLbCV5WB32iJDrJFaLLDCUMmy1Rf0zdTT4fLwKan\nT5i+/0wBIpZcN/dKxkdCLceH0NjHi63FAKAAunkOooymNfyLQfXdgRH92o0bikeD\nmgBes+OsGyln217dy7bJyWTk5tkTqJjv06N6iQ9NFh32pKoU5JlPuGSoVo0IJVEy\nPl0d6rXVqZaLB37xqsoy+suF/IFNsGaNxuQl58+dfYgaZ4aykqZo1EopyP3ZI7j7\nSN7AFLa7NQsKiX3/BrD9urD1epHuAd4qeyl1gUaL2EPn5JUTyHej8nuUbvDOrUvW\nefkAZACzklpKMM8I7NTsEyQ3lGTedM2sSNIDGvN77LNkje6IBDk=\n=9jJ7\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f5021ab6d285213918da66a9aaefa873ae4a5bc\nparent e8640849c775efcf202dbd34736fed8d61379c49\nauthor Ikko Ashimine <eltociear@gmail.com> 1608817037 +0900\ncommitter fanquake <fanquake@gmail.com> 1609734691 +0800\n\ndoc: fix various typos\n\nCo-authored-by: Peter Yordanov <ppyordanov@yahoo.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1112035d32ffe73a4522226c8cb2f6a5878d3ada",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1112035d32ffe73a4522226c8cb2f6a5878d3ada",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1112035d32ffe73a4522226c8cb2f6a5878d3ada/comments",
    "author": {
      "login": "eltociear",
      "id": 22633385,
      "node_id": "MDQ6VXNlcjIyNjMzMzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/22633385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eltociear",
      "html_url": "https://github.com/eltociear",
      "followers_url": "https://api.github.com/users/eltociear/followers",
      "following_url": "https://api.github.com/users/eltociear/following{/other_user}",
      "gists_url": "https://api.github.com/users/eltociear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eltociear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eltociear/subscriptions",
      "organizations_url": "https://api.github.com/users/eltociear/orgs",
      "repos_url": "https://api.github.com/users/eltociear/repos",
      "events_url": "https://api.github.com/users/eltociear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eltociear/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8640849c775efcf202dbd34736fed8d61379c49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8640849c775efcf202dbd34736fed8d61379c49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8640849c775efcf202dbd34736fed8d61379c49"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "7d122ea5f97255b27e0f2f5dc7d218a57372be36",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -217,7 +217,7 @@ endef\n #\n # 7. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n #\n-# 8. Adjust a regex in toolchain.prf, to accomodate Guix's usage of\n+# 8. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n # CROSS_LIBRARY_PATH. See #15277.\n define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/freetype_back_compat.patch && \\"
      },
      {
        "sha": "3ffd1674e03bcf0da2995aa465908679bc5840e1",
        "filename": "depends/patches/fontconfig/gperf_header_regen.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/patches/fontconfig/gperf_header_regen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/patches/fontconfig/gperf_header_regen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/gperf_header_regen.patch?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -2,7 +2,7 @@ commit 7b6eb33ecd88768b28c67ce5d2d68a7eed5936b6\n Author: fanquake <fanquake@gmail.com>\n Date:   Tue Aug 25 14:34:53 2020 +0800\n \n-    Remove rule that causes inadvertant header regeneration\n+    Remove rule that causes inadvertent header regeneration\n \n     Otherwise the makefile will needlessly attempt to re-generate the\n     headers with gperf. This can be dropped once the upstream build is fixed."
      },
      {
        "sha": "2de6874cd4eb84f279a19fb0e71b7ede034bfd3a",
        "filename": "depends/patches/native_cctools/ld64_disable_threading.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/patches/native_cctools/ld64_disable_threading.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/patches/native_cctools/ld64_disable_threading.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cctools/ld64_disable_threading.patch?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -8,7 +8,7 @@ Date:   Tue Aug 18 01:20:24 2020 +0000\n     differently based on which files have already been parsed. This is more\n     likely to occur on systems with more CPUs.\n \n-    Just disable threading for now. There is no noticable slowdown.\n+    Just disable threading for now. There is no noticeable slowdown.\n \n     See #9891.\n "
      },
      {
        "sha": "1ca55f1ce32bd11f7dd4b737c8b792341b2ca7e0",
        "filename": "depends/patches/qt/freetype_back_compat.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/patches/qt/freetype_back_compat.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/depends/patches/qt/freetype_back_compat.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/freetype_back_compat.patch?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -9,7 +9,7 @@ Date:   Tue Aug 18 15:15:08 2020 +0800\n     backwards-compatibility.\n \n     Qt 5.9 introduced a call to FT_Get_Font_Format(). Replace it with FT_Get_X11_Font_Format()\n-    in order to remain compatibile with older freetype, which is still used by e.g. Ubuntu Trusty.\n+    in order to remain compatible with older freetype, which is still used by e.g. Ubuntu Trusty.\n \n     See #14348.\n "
      },
      {
        "sha": "e3f6b35a7db53e7f9e1f33a7dc435cd6720de614",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -24,7 +24,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n     const int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n     const int witnessversion = 0;\n \n-    // Keypair.\n+    // Key pair.\n     CKey key;\n     static const std::array<unsigned char, 32> vchKey = {\n         {"
      },
      {
        "sha": "5469a760eec250388c991744a10ef8e21540c7e5",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -30,7 +30,7 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n /**\n  * Parse a hex string into 256 bits\n  * @param[in] strHex a hex-formatted, 64-character string\n- * @param[out] result the result of the parasing\n+ * @param[out] result the result of the parsing\n  * @returns true if successful, false if not\n  *\n  * @see ParseHashV for an RPC-oriented version of this"
      },
      {
        "sha": "b5fc93886df774da20e156e0bdd98e6046243227",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -128,7 +128,7 @@ static bool DecodeTx(CMutableTransaction& tx, const std::vector<unsigned char>&\n {\n     // General strategy:\n     // - Decode both with extended serialization (which interprets the 0x0001 tag as a marker for\n-    //   the presense of witnesses) and with legacy serialization (which interprets the tag as a\n+    //   the presence of witnesses) and with legacy serialization (which interprets the tag as a\n     //   0-input 1-output incomplete transaction).\n     //   - Restricted by try_no_witness (which disables legacy if false) and try_witness (which\n     //     disables extended if false)."
      },
      {
        "sha": "3ffe1465da5982449b04402fa02fc59720e6f54d",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -59,7 +59,7 @@ uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::ve\n     //if we do not have this assert, we can hit a memory access violation when indexing into vTxid\n     assert(vTxid.size() != 0);\n     if (height == 0) {\n-        // hash at height 0 is the txids themself\n+        // hash at height 0 is the txids themselves\n         return vTxid[pos];\n     } else {\n         // calculate left hash"
      },
      {
        "sha": "322fabbe1150916a2ab0fbebf83d71c429f6cf55",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -64,7 +64,7 @@ struct Peer {\n \n     /** Protects block inventory data members */\n     Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n+    /** List of blocks that we'll announce via an `inv` message.\n      * There is no final sorting before sending, as they are always sent\n      * immediately and in the order requested. */\n     std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);"
      },
      {
        "sha": "cf878fe3748982d01fbad7e078dfc63edbbdffd2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -483,7 +483,7 @@ class CSubNet\n             READWRITE(obj.network);\n             if (obj.network.IsIPv4()) {\n                 // Before commit 102867c587f5f7954232fb8ed8e85cda78bb4d32, CSubNet used the last 4 bytes of netmask\n-                // to store the relevant bytes for an IPv4 mask. For compatiblity reasons, keep doing so in\n+                // to store the relevant bytes for an IPv4 mask. For compatibility reasons, keep doing so in\n                 // serialized form.\n                 unsigned char dummy[12] = {0};\n                 READWRITE(dummy);"
      },
      {
        "sha": "24d7735447c35c48811d67d08cd033634632cb82",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -127,10 +127,10 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n     (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n-    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()()()\")); //tolerate non command brackets\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tolerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tolerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tolerate empty arguments when using ,\n }"
      },
      {
        "sha": "7a89325ddf44b0fc7508ced1a4d6f34797aad7f5",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -152,7 +152,7 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n \n     connect(wallet_model, &WalletModel::unload, this, [this, wallet_model] {\n         // Defer removeAndDeleteWallet when no modal widget is active.\n-        // TODO: remove this workaround by removing usage of QDiallog::exec.\n+        // TODO: remove this workaround by removing usage of QDialog::exec.\n         if (QApplication::activeModalWidget()) {\n             connect(qApp, &QApplication::focusWindowChanged, wallet_model, [this, wallet_model]() {\n                 if (!QApplication::activeModalWidget()) {"
      },
      {
        "sha": "9e37f14921492d0d456d6e634f2c7bb4ea698c83",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(signet_parse_tests)\n     CMutableTransaction cb;\n     cb.vout.emplace_back(0, CScript{});\n     block.vtx.push_back(MakeTransactionRef(cb));\n-    block.vtx.push_back(MakeTransactionRef(cb)); // Add dummy tx to excercise merkle root code\n+    block.vtx.push_back(MakeTransactionRef(cb)); // Add dummy tx to exercise merkle root code\n     BOOST_CHECK(!SignetTxs::Create(block, challenge));\n     BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n "
      },
      {
        "sha": "70ab4f797a720a603290a4ccf144f456d1d5d989",
        "filename": "src/wallet/sqlite.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/wallet/sqlite.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/wallet/sqlite.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.h?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -37,7 +37,7 @@ class SQLiteBatch : public DatabaseBatch\n     explicit SQLiteBatch(SQLiteDatabase& database);\n     ~SQLiteBatch() override { Close(); }\n \n-    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    /* No-op. See comment on SQLiteDatabase::Flush */\n     void Flush() override {}\n \n     void Close() override;"
      },
      {
        "sha": "4e6270220e0b9656b6e3f34926ff7cdbe563f90b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -426,7 +426,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 uint256 checksum;\n                 ssValue >> checksum;\n                 if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Crypted key corrupt\";\n+                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n                     return false;\n                 }\n             }"
      },
      {
        "sha": "bdbfa5aed1161e26bdafb58df4d9bf5924d2581d",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -60,7 +60,7 @@ def run_test(self):\n         self.wit_address = w0.getnewaddress(address_type='p2sh-segwit')\n         self.wit_ms_address = wmulti.addmultisigaddress(1, [self.pubkey], '', 'p2sh-segwit')['address']\n         if not self.options.descriptors:\n-            # Legacy wallets need to import these so that they are watched by the wallet. This is unnecssary (and does not need to be tested) for descriptor wallets\n+            # Legacy wallets need to import these so that they are watched by the wallet. This is unnecessary (and does not need to be tested) for descriptor wallets\n             wmulti.importaddress(self.ms_address)\n             wmulti.importaddress(self.wit_ms_address)\n "
      },
      {
        "sha": "cca7390ae38a2377b25a92a7cc44bbad3a065ddc",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -143,7 +143,7 @@ def run_test(self):\n         }\n         # Transactions that do not end up in the mempool\n         # tx_orphan_no_fee, because it has too low fee (p2ps[0] is not disconnected for relaying that tx)\n-        # tx_orphan_invaid, because it has negative fee (p2ps[1] is disconnected for relaying that tx)\n+        # tx_orphan_invalid, because it has negative fee (p2ps[1] is disconnected for relaying that tx)\n \n         self.wait_until(lambda: 1 == len(node.getpeerinfo()), timeout=12)  # p2ps[1] is no longer connected\n         assert_equal(expected_mempool, set(node.getrawmempool()))"
      },
      {
        "sha": "0d702e44f6e4bf5fe8fc5ccb4f026df4952103c5",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1112035d32ffe73a4522226c8cb2f6a5878d3ada/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1112035d32ffe73a4522226c8cb2f6a5878d3ada/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=1112035d32ffe73a4522226c8cb2f6a5878d3ada",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n         MAX_VALUE = 100000000\n         expected_time = int(time.time()) + MAX_VALUE - 600\n         self.nodes[0].walletpassphrase(passphrase2, MAX_VALUE - 600)\n-        # give buffer for walletpassphrase, since it iterates over all crypted keys\n+        # give buffer for walletpassphrase, since it iterates over all encrypted keys\n         expected_time_with_buffer = time.time() + MAX_VALUE - 600\n         actual_time = self.nodes[0].getwalletinfo()['unlocked_until']\n         assert_greater_than_or_equal(actual_time, expected_time)"
      }
    ]
  }
]