[
  {
    "sha": "03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2ZiZDc5MDQ5MDM5MjhiMGQxYzg1NDJhM2Q1OTdhYWY1YmRkMzFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-05T14:42:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-17T10:07:59Z"
      },
      "message": "get rid of mapPubKeys\n\nMake CKeyStore's interface work on uint160's instead of pubkeys, so\nno separate global mapPubKeys is necessary anymore.",
      "tree": {
        "sha": "562344a9b651ea1b2cc3f7ffd348377e5bed6090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/562344a9b651ea1b2cc3f7ffd348377e5bed6090"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133ccbe4087514501dec1f7496c62489437f0db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133ccbe4087514501dec1f7496c62489437f0db8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133ccbe4087514501dec1f7496c62489437f0db8"
      }
    ],
    "stats": {
      "total": 207,
      "additions": 97,
      "deletions": 110
    },
    "files": [
      {
        "sha": "266c9920288a16b84fefff5ddd454aa6de3b8036",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -425,7 +425,6 @@ bool AppInit2(int argc, char* argv[])\n         printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n         printf(\"nBestHeight = %d\\n\",            nBestHeight);\n         printf(\"setKeyPool.size() = %d\\n\",      pwalletMain->setKeyPool.size());\n-        printf(\"mapPubKeys.size() = %d\\n\",      mapPubKeys.size());\n         printf(\"mapWallet.size() = %d\\n\",       pwalletMain->mapWallet.size());\n         printf(\"mapAddressBook.size() = %d\\n\",  pwalletMain->mapAddressBook.size());\n "
      },
      {
        "sha": "9e1dab65fd4ce07362cbdfb60ddaeac94c6f0768",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 18,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -16,14 +16,19 @@ std::vector<unsigned char> CKeyStore::GenerateNewKey()\n     return key.GetPubKey();\n }\n \n+bool CKeyStore::GetPubKey(const uint160 &hashAddress, std::vector<unsigned char> &vchPubKeyOut) const\n+{\n+    CKey key;\n+    if (!GetKey(hashAddress, key))\n+        return false;\n+    vchPubKeyOut = key.GetPubKey();\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddKey(const CKey& key)\n {\n-    CRITICAL_BLOCK(cs_mapPubKeys)\n     CRITICAL_BLOCK(cs_KeyStore)\n-    {\n-        mapKeys[key.GetPubKey()] = key.GetPrivKey();\n-        mapPubKeys[Hash160(key.GetPubKey())] = key.GetPubKey();\n-    }\n+        mapKeys[Hash160(key.GetPubKey())] = key.GetSecret();\n     return true;\n }\n \n@@ -44,11 +49,11 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         if (!SetCrypted())\n             return false;\n \n-        std::map<std::vector<unsigned char>, std::vector<unsigned char> >::const_iterator mi = mapCryptedKeys.begin();\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)\n         {\n-            const std::vector<unsigned char> &vchPubKey = (*mi).first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second;\n+            const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CSecret vchSecret;\n             if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n                 return false;\n@@ -88,31 +93,30 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n \n bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    CRITICAL_BLOCK(cs_mapPubKeys)\n     CRITICAL_BLOCK(cs_KeyStore)\n     {\n         if (!SetCrypted())\n             return false;\n \n-        mapCryptedKeys[vchPubKey] = vchCryptedSecret;\n-        mapPubKeys[Hash160(vchPubKey)] = vchPubKey;\n+        mapCryptedKeys[Hash160(vchPubKey)] = make_pair(vchPubKey, vchCryptedSecret);\n     }\n     return true;\n }\n \n-bool CCryptoKeyStore::GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const\n+bool CCryptoKeyStore::GetKey(const uint160 &hashAddress, CKey& keyOut) const\n {\n     CRITICAL_BLOCK(cs_vMasterKey)\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::GetPrivKey(vchPubKey, keyOut);\n+            return CBasicKeyStore::GetKey(hashAddress, keyOut);\n \n-        std::map<std::vector<unsigned char>, std::vector<unsigned char> >::const_iterator mi = mapCryptedKeys.find(vchPubKey);\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(hashAddress);\n         if (mi != mapCryptedKeys.end())\n         {\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second;\n+            const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CSecret vchSecret;\n-            if (!DecryptSecret(vMasterKey, (*mi).second, Hash((*mi).first.begin(), (*mi).first.end()), vchSecret))\n+            if (!DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n                 return false;\n             keyOut.SetSecret(vchSecret);\n             return true;\n@@ -121,6 +125,23 @@ bool CCryptoKeyStore::GetPrivKey(const std::vector<unsigned char> &vchPubKey, CK\n     return false;\n }\n \n+bool CCryptoKeyStore::GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>& vchPubKeyOut) const\n+{\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!IsCrypted())\n+            return CKeyStore::GetPubKey(hashAddress, vchPubKeyOut);\n+\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(hashAddress);\n+        if (mi != mapCryptedKeys.end())\n+        {\n+            vchPubKeyOut = (*mi).second.first;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n@@ -135,10 +156,11 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n         {\n             if (!key.SetPrivKey(mKey.second))\n                 return false;\n+            const std::vector<unsigned char> vchPubKey = key.GetPubKey();\n             std::vector<unsigned char> vchCryptedSecret;\n-            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(), Hash(mKey.first.begin(), mKey.first.end()), vchCryptedSecret))\n+            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n                 return false;\n-            if (!AddCryptedKey(mKey.first, vchCryptedSecret))\n+            if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n                 return false;\n         }\n         mapKeys.clear();"
      },
      {
        "sha": "976c095335d2e9d1ef484a579ab80417ebb21445",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -12,12 +12,13 @@ class CKeyStore\n     mutable CCriticalSection cs_KeyStore;\n \n     virtual bool AddKey(const CKey& key) =0;\n-    virtual bool HaveKey(const std::vector<unsigned char> &vchPubKey) const =0;\n-    virtual bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const =0;\n+    virtual bool HaveKey(const uint160 &hashAddress) const =0;\n+    virtual bool GetKey(const uint160 &hashAddress, CKey& keyOut) const =0;\n+    virtual bool GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>& vchPubKeyOut) const;\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n-typedef std::map<std::vector<unsigned char>, CPrivKey> KeyMap;\n+typedef std::map<uint160, CSecret> KeyMap;\n \n class CBasicKeyStore : public CKeyStore\n {\n@@ -26,26 +27,28 @@ class CBasicKeyStore : public CKeyStore\n \n public:\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const std::vector<unsigned char> &vchPubKey) const\n+    bool HaveKey(const uint160 &hashAddress) const\n     {\n-        return (mapKeys.count(vchPubKey) > 0);\n+        return (mapKeys.count(hashAddress) > 0);\n     }\n-    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const\n+    bool GetKey(const uint160 &hashAddress, CKey& keyOut) const\n     {\n-        std::map<std::vector<unsigned char>, CPrivKey>::const_iterator mi = mapKeys.find(vchPubKey);\n+        KeyMap::const_iterator mi = mapKeys.find(hashAddress);\n         if (mi != mapKeys.end())\n         {\n-            keyOut.SetPrivKey((*mi).second);\n+            keyOut.SetSecret((*mi).second);\n             return true;\n         }\n         return false;\n     }\n };\n \n+typedef std::map<uint160, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;\n+\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char> > mapCryptedKeys;\n+    CryptedKeyMap mapCryptedKeys;\n \n     CKeyingMaterial vMasterKey;\n \n@@ -103,13 +106,14 @@ class CCryptoKeyStore : public CBasicKeyStore\n     virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     std::vector<unsigned char> GenerateNewKey();\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const std::vector<unsigned char> &vchPubKey) const\n+    bool HaveKey(const uint160 &hashAddress) const\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::HaveKey(vchPubKey);\n-        return mapCryptedKeys.count(vchPubKey) > 0;\n+            return CBasicKeyStore::HaveKey(hashAddress);\n+        return mapCryptedKeys.count(hashAddress) > 0;\n     }\n-    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const;\n+    bool GetKey(const uint160 &hashAddress, CKey& keyOut) const;\n+    bool GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>& vchPubKeyOut) const;\n };\n \n #endif"
      },
      {
        "sha": "fa893e5936c0e71ae4f6d6ffbf667dbd1503564d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -21,9 +21,6 @@ set<CWallet*> setpwalletRegistered;\n \n CCriticalSection cs_main;\n \n-CCriticalSection cs_mapPubKeys;\n-map<uint160, vector<unsigned char> > mapPubKeys;\n-\n map<uint256, CTransaction> mapTransactions;\n CCriticalSection cs_mapTransactions;\n unsigned int nTransactionsUpdated = 0;"
      },
      {
        "sha": "9d6de52fa429716a5e5457c381bbf22be8c1760e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -1568,7 +1568,5 @@ class CAlert : public CUnsignedAlert\n \n \n extern std::map<uint256, CTransaction> mapTransactions;\n-extern std::map<uint160, std::vector<unsigned char> > mapPubKeys;\n-extern CCriticalSection cs_mapPubKeys;\n \n #endif"
      },
      {
        "sha": "469805827790f6742eee4fb4e8416b5635c2795e",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -967,7 +967,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             {\n                 // Only counting our own bitcoin addresses and not ip addresses\n                 uint160 hash160 = txout.scriptPubKey.GetBitcoinAddressHash160();\n-                if (hash160 == 0 || !mapPubKeys.count(hash160)) // IsMine\n+                if (hash160 == 0 || !pwalletMain->HaveKey(hash160)) // IsMine\n                     continue;\n \n                 tallyitem& item = mapTally[hash160];\n@@ -1242,7 +1242,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     {\n         BOOST_FOREACH(const PAIRTYPE(string, string)& entry, pwalletMain->mapAddressBook) {\n             uint160 hash160;\n-            if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me\n+            if(AddressToHash160(entry.first, hash160) && pwalletMain->HaveKey(hash160)) // This address belongs to me\n                 mapAccountBalances[entry.second] = 0;\n         }\n \n@@ -1564,7 +1564,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         // version of the address:\n         string currentAddress = Hash160ToAddress(hash160);\n         ret.push_back(Pair(\"address\", currentAddress));\n-        ret.push_back(Pair(\"ismine\", (mapPubKeys.count(hash160) > 0)));\n+        ret.push_back(Pair(\"ismine\", (pwalletMain->HaveKey(hash160) > 0)));\n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n         {\n             if (pwalletMain->mapAddressBook.count(currentAddress))"
      },
      {
        "sha": "b92f7b08b62e8c4dd999b1549ac4c29df5fb4e71",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 47,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -1041,7 +1041,9 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n                 // Sign\n                 const valtype& vchPubKey = item.second;\n                 CKey key;\n-                if (!keystore.GetPrivKey(vchPubKey, key))\n+                if (!keystore.GetKey(Hash160(vchPubKey), key))\n+                    return false;\n+                if (key.GetPubKey() != vchPubKey)\n                     return false;\n                 if (hash != 0)\n                 {\n@@ -1055,20 +1057,16 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n             else if (item.first == OP_PUBKEYHASH)\n             {\n                 // Sign and give pubkey\n-                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n-                if (mi == mapPubKeys.end())\n-                    return false;\n-                const vector<unsigned char>& vchPubKey = (*mi).second;\n                 CKey key;\n-                if (!keystore.GetPrivKey(vchPubKey, key))\n+                if (!keystore.GetKey(uint160(item.second), key))\n                     return false;\n                 if (hash != 0)\n                 {\n                     vector<unsigned char> vchSig;\n                     if (!key.Sign(hash, vchSig))\n                         return false;\n                     vchSig.push_back((unsigned char)nHashType);\n-                    scriptSigRet << vchSig << vchPubKey;\n+                    scriptSigRet << vchSig << key.GetPubKey();\n                 }\n             }\n             else\n@@ -1102,19 +1100,16 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         {\n             if (item.first == OP_PUBKEY)\n             {\n-                // Sign\n                 const valtype& vchPubKey = item.second;\n-                if (!keystore.HaveKey(vchPubKey))\n+                vector<unsigned char> vchPubKeyFound;\n+                if (!keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound))\n+                    return false;\n+                if (vchPubKeyFound != vchPubKey)\n                     return false;\n             }\n             else if (item.first == OP_PUBKEYHASH)\n             {\n-                // Sign and give pubkey\n-                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n-                if (mi == mapPubKeys.end())\n-                    return false;\n-                const vector<unsigned char>& vchPubKey = (*mi).second;\n-                if (!keystore.HaveKey(vchPubKey))\n+                if (!keystore.HaveKey(uint160(item.second)))\n                     return false;\n             }\n             else\n@@ -1128,33 +1123,28 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n }\n \n \n-bool ExtractPubKey(const CScript& scriptPubKey, const CKeyStore* keystore, vector<unsigned char>& vchPubKeyRet)\n+bool ExtractHash160(const CScript& scriptPubKey, const CKeyStore* keystore, uint160& hash160Ret)\n {\n-    vchPubKeyRet.clear();\n-\n     vector<pair<opcodetype, valtype> > vSolution;\n     if (!Solver(scriptPubKey, vSolution))\n         return false;\n \n-    CRITICAL_BLOCK(cs_mapPubKeys)\n+    CRITICAL_BLOCK(keystore->cs_KeyStore)\n     {\n         BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n         {\n-            valtype vchPubKey;\n+            uint160 hash160;\n             if (item.first == OP_PUBKEY)\n             {\n-                vchPubKey = item.second;\n+                hash160 = Hash160(item.second);\n             }\n             else if (item.first == OP_PUBKEYHASH)\n             {\n-                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n-                if (mi == mapPubKeys.end())\n-                    continue;\n-                vchPubKey = (*mi).second;\n+                hash160 = uint160(item.second);\n             }\n-            if (keystore == NULL || keystore->HaveKey(vchPubKey))\n+            if (keystore == NULL || keystore->HaveKey(hash160))\n             {\n-                vchPubKeyRet = vchPubKey;\n+                hash160Ret = hash160;\n                 return true;\n             }\n         }\n@@ -1163,26 +1153,6 @@ bool ExtractPubKey(const CScript& scriptPubKey, const CKeyStore* keystore, vecto\n }\n \n \n-bool ExtractHash160(const CScript& scriptPubKey, uint160& hash160Ret)\n-{\n-    hash160Ret = 0;\n-\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n-        return false;\n-\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n-    {\n-        if (item.first == OP_PUBKEYHASH)\n-        {\n-            hash160Ret = uint160(item.second);\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     vector<vector<unsigned char> > stack;"
      },
      {
        "sha": "be950f30065d1902b94f05fa19dec278eeab72e3",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -710,8 +710,7 @@ class CScript : public std::vector<unsigned char>\n \n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool ExtractPubKey(const CScript& scriptPubKey, const CKeyStore* pkeystore, std::vector<unsigned char>& vchPubKeyRet);\n-bool ExtractHash160(const CScript& scriptPubKey, uint160& hash160Ret);\n+bool ExtractHash160(const CScript& scriptPubKey, const CKeyStore* pkeystore, uint160& hash160Ret);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType=0);\n "
      },
      {
        "sha": "fba8ed8061dc161d614a6882f4397394ed694402",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -238,9 +238,10 @@ void SetDefaultReceivingAddress(const string& strAddress)\n         uint160 hash160;\n         if (!AddressToHash160(strAddress, hash160))\n             return;\n-        if (!mapPubKeys.count(hash160))\n+        vector<unsigned char> vchPubKey;\n+        if (!pwalletMain->GetPubKey(hash160, vchPubKey))\n             return;\n-        pwalletMain->SetDefaultKey(mapPubKeys[hash160]);\n+        pwalletMain->SetDefaultKey(vchPubKey);\n         pframeMain->m_textCtrlAddress->SetValue(strAddress);\n     }\n }\n@@ -703,15 +704,15 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             {\n                 if (pwalletMain->IsMine(txout))\n                 {\n-                    vector<unsigned char> vchPubKey;\n-                    if (ExtractPubKey(txout.scriptPubKey, pwalletMain, vchPubKey))\n+                    uint160 hash160;\n+                    if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n                     {\n                         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n                         {\n                             //strDescription += _(\"Received payment to \");\n                             //strDescription += _(\"Received with address \");\n                             strDescription += _(\"Received with: \");\n-                            string strAddress = PubKeyToAddress(vchPubKey);\n+                            string strAddress = Hash160ToAddress(hash160);\n                             map<string, string>::iterator mi = pwalletMain->mapAddressBook.find(strAddress);\n                             if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n                             {\n@@ -786,7 +787,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                 {\n                     // Sent to Bitcoin Address\n                     uint160 hash160;\n-                    if (ExtractHash160(txout.scriptPubKey, hash160))\n+                    if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n                         strAddress = Hash160ToAddress(hash160);\n                 }\n \n@@ -1502,10 +1503,10 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                 {\n                     if (pwalletMain->IsMine(txout))\n                     {\n-                        vector<unsigned char> vchPubKey;\n-                        if (ExtractPubKey(txout.scriptPubKey, pwalletMain, vchPubKey))\n+                        uint160 hash160;\n+                        if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n                         {\n-                            string strAddress = PubKeyToAddress(vchPubKey);\n+                            string strAddress = Hash160ToAddress(hash160);\n                             if (pwalletMain->mapAddressBook.count(strAddress))\n                             {\n                                 strHTML += string() + _(\"<b>From:</b> \") + _(\"unknown\") + \"<br>\";\n@@ -1589,7 +1590,7 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                     {\n                         // Offline transaction\n                         uint160 hash160;\n-                        if (ExtractHash160(txout.scriptPubKey, hash160))\n+                        if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n                         {\n                             string strAddress = Hash160ToAddress(hash160);\n                             strHTML += _(\"<b>To:</b> \");\n@@ -2630,7 +2631,7 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit\n             string strAddress = item.first;\n             string strName = item.second;\n             uint160 hash160;\n-            bool fMine = (AddressToHash160(strAddress, hash160) && mapPubKeys.count(hash160));\n+            bool fMine = (AddressToHash160(strAddress, hash160) && pwalletMain->HaveKey(hash160));\n             wxListCtrl* plistCtrl = fMine ? m_listCtrlReceiving : m_listCtrlSending;\n             int nIndex = InsertLine(plistCtrl, strName, strAddress);\n             if (strAddress == (fMine ? strDefaultReceiving : string(strInitSelected)))\n@@ -2741,7 +2742,7 @@ void CAddressBookDialog::OnButtonCopy(wxCommandEvent& event)\n bool CAddressBookDialog::CheckIfMine(const string& strAddress, const string& strTitle)\n {\n     uint160 hash160;\n-    bool fMine = (AddressToHash160(strAddress, hash160) && mapPubKeys.count(hash160));\n+    bool fMine = (AddressToHash160(strAddress, hash160) && pwalletMain->HaveKey(hash160));\n     if (fMine)\n         wxMessageBox(_(\"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"), strTitle);\n     return fMine;"
      },
      {
        "sha": "ba5018639a36ee00c7cd6d8b0b767d85ae302bb3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -124,7 +124,6 @@ class CCorruptAddress\n \n bool CWallet::EncryptWallet(const string& strWalletPassphrase)\n {\n-    CRITICAL_BLOCK(cs_mapPubKeys)\n     CRITICAL_BLOCK(cs_KeyStore)\n     CRITICAL_BLOCK(cs_vMasterKey)\n     CRITICAL_BLOCK(cs_pwalletdbEncryption)\n@@ -439,10 +438,8 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n         string address;\n         uint160 hash160;\n         vector<unsigned char> vchPubKey;\n-        if (ExtractHash160(txout.scriptPubKey, hash160))\n+        if (ExtractHash160(txout.scriptPubKey, pwallet, hash160))\n             address = Hash160ToAddress(hash160);\n-        else if (ExtractPubKey(txout.scriptPubKey, NULL, vchPubKey))\n-            address = PubKeyToAddress(vchPubKey);\n         else\n         {\n             printf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n@@ -1136,7 +1133,7 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n         return nLoadWalletRet;\n     fFirstRunRet = vchDefaultKey.empty();\n \n-    if (!HaveKey(vchDefaultKey))\n+    if (!HaveKey(Hash160(vchDefaultKey)))\n     {\n         // Create new keyUser and set as default key\n         RandAddSeedPerfmon();\n@@ -1263,7 +1260,7 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n-        if (!HaveKey(keypool.vchPubKey))\n+        if (!HaveKey(Hash160(keypool.vchPubKey)))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n         assert(!keypool.vchPubKey.empty());\n         printf(\"keypool reserve %\"PRI64d\"\\n\", nIndex);"
      },
      {
        "sha": "277d0b1e791191763d09bdf6ecd67f15643dd3fe",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fbd7904903928b0d1c8542a3d597aaf5bdd31b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "patch": "@@ -104,10 +104,10 @@ class CWallet : public CCryptoKeyStore\n     }\n     bool IsChange(const CTxOut& txout) const\n     {\n-        std::vector<unsigned char> vchPubKey;\n-        if (ExtractPubKey(txout.scriptPubKey, this, vchPubKey))\n+        uint160 hash160;\n+        if (ExtractHash160(txout.scriptPubKey, this, hash160))\n             CRITICAL_BLOCK(cs_mapAddressBook)\n-                if (!mapAddressBook.count(PubKeyToAddress(vchPubKey)))\n+                if (!mapAddressBook.count(Hash160ToAddress(hash160)))\n                     return true;\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "2ffba736e9102d016b96c2e5de2ce7757e612667",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmZiYTczNmU5MTAyZDAxNmI5NmMyZTVkZTJjZTc3NTdlNjEyNjY3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-05T18:53:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-17T10:09:14Z"
      },
      "message": "Use CBitcoinAddress instead of string/uint160\n\nInstead of conversion functions between pubkey/uint160/address in\nbase58.h, have a fully fledged class CBitcoinAddress (CAddress was\nalready taken) to represent addresses.",
      "tree": {
        "sha": "fb96acfec05aa767cb3ba2df9b93569f2a6c04db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb96acfec05aa767cb3ba2df9b93569f2a6c04db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ffba736e9102d016b96c2e5de2ce7757e612667",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ffba736e9102d016b96c2e5de2ce7757e612667",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ffba736e9102d016b96c2e5de2ce7757e612667",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ffba736e9102d016b96c2e5de2ce7757e612667/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03fbd7904903928b0d1c8542a3d597aaf5bdd31b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03fbd7904903928b0d1c8542a3d597aaf5bdd31b"
      }
    ],
    "stats": {
      "total": 528,
      "additions": 278,
      "deletions": 250
    },
    "files": [
      {
        "sha": "816193eaebc129cf67977ccf7790db6efa7330c6",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 107,
        "deletions": 38,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -159,52 +159,121 @@ inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>\n \n \n \n-#define ADDRESSVERSION   ((unsigned char)(fTestNet ? 111 : 0))\n-\n-inline std::string Hash160ToAddress(uint160 hash160)\n+class CBitcoinAddress\n {\n-    // add 1-byte version number to the front\n-    std::vector<unsigned char> vch(1, ADDRESSVERSION);\n-    vch.insert(vch.end(), UBEGIN(hash160), UEND(hash160));\n-    return EncodeBase58Check(vch);\n-}\n+protected:\n+    unsigned char nVersion;\n+    std::vector<unsigned char> vchData;\n \n-inline bool AddressToHash160(const char* psz, uint160& hash160Ret)\n-{\n-    std::vector<unsigned char> vch;\n-    if (!DecodeBase58Check(psz, vch))\n-        return false;\n-    if (vch.empty())\n-        return false;\n-    unsigned char nVersion = vch[0];\n-    if (vch.size() != sizeof(hash160Ret) + 1)\n-        return false;\n-    memcpy(&hash160Ret, &vch[1], sizeof(hash160Ret));\n-    return (nVersion <= ADDRESSVERSION);\n-}\n+public:\n+    bool SetAddress(const uint160& hash160)\n+    {\n+        nVersion = fTestNet ? 111 : 0;\n+        vchData.resize(20);\n+        memcpy(&vchData[0], &hash160, 20);\n+        return true;\n+    }\n \n-inline bool AddressToHash160(const std::string& str, uint160& hash160Ret)\n-{\n-    return AddressToHash160(str.c_str(), hash160Ret);\n-}\n+    bool SetAddress(const char* pszAddress)\n+    {\n+        std::vector<unsigned char> vchTemp;\n+        DecodeBase58Check(pszAddress, vchTemp);\n+        if (vchTemp.empty())\n+        {\n+            vchData.clear();\n+            nVersion = 0;\n+            return false;\n+        }\n+        nVersion = vchTemp[0];\n+        vchData.resize(vchTemp.size() - 1);\n+        memcpy(&vchData[0], &vchTemp[1], vchData.size());\n+        return true;\n+    }\n \n-inline bool IsValidBitcoinAddress(const char* psz)\n-{\n-    uint160 hash160;\n-    return AddressToHash160(psz, hash160);\n-}\n+    bool SetAddress(const std::string& strAddress)\n+    {\n+        return SetAddress(strAddress.c_str());\n+    }\n \n-inline bool IsValidBitcoinAddress(const std::string& str)\n-{\n-    return IsValidBitcoinAddress(str.c_str());\n-}\n+    bool SetAddress(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        return SetAddress(Hash160(vchPubKey));\n+    }\n+\n+    bool IsValid() const\n+    {\n+        int nExpectedSize = 20;\n+        bool fExpectTestNet = false;\n+        switch(nVersion)\n+        {\n+            case 0:\n+                break;\n+\n+            case 111:\n+                fExpectTestNet = true;\n+                break;\n \n+            default:\n+                return false;\n+        }\n+        return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n+    }\n \n+    CBitcoinAddress()\n+    {\n+        nVersion = 0;\n+        vchData.clear();\n+    }\n+\n+    CBitcoinAddress(uint160 hash160In)\n+    {\n+        SetAddress(hash160In);\n+    }\n \n+    CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        SetAddress(vchPubKey);\n+    }\n \n-inline std::string PubKeyToAddress(const std::vector<unsigned char>& vchPubKey)\n-{\n-    return Hash160ToAddress(Hash160(vchPubKey));\n-}\n+    CBitcoinAddress(const std::string& strAddress)\n+    {\n+        SetAddress(strAddress);\n+    }\n+\n+    CBitcoinAddress(const char* pszAddress)\n+    {\n+        SetAddress(pszAddress);\n+    }\n+\n+    std::string ToString() const\n+    {\n+        std::vector<unsigned char> vch(1, nVersion);\n+        vch.insert(vch.end(), vchData.begin(), vchData.end());\n+        return EncodeBase58Check(vch);\n+    }\n+\n+    uint160 GetHash160() const\n+    {\n+        assert(vchData.size() == 20);\n+        uint160 hash160;\n+        memcpy(&hash160, &vchData[0], 20);\n+        return hash160;\n+    }\n+\n+    int CompareTo(const CBitcoinAddress& address) const\n+    {\n+        if (nVersion < address.nVersion) return -1;\n+        if (nVersion < address.nVersion) return  1;\n+        if (vchData < address.vchData)   return -1;\n+        if (vchData > address.vchData)   return  1;\n+        return 0;\n+    }\n+\n+    bool operator==(const CBitcoinAddress& address) const { return CompareTo(address) == 0; }\n+    bool operator<=(const CBitcoinAddress& address) const { return CompareTo(address) <= 0; }\n+    bool operator>=(const CBitcoinAddress& address) const { return CompareTo(address) >= 0; }\n+    bool operator< (const CBitcoinAddress& address) const { return CompareTo(address) <  0; }\n+    bool operator> (const CBitcoinAddress& address) const { return CompareTo(address) >  0; }\n+};\n \n #endif"
      },
      {
        "sha": "3c14cfedd51801fc44bd67105e64bb4643c7715e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -220,6 +220,11 @@ class CKey\n             return false;\n         return true;\n     }\n+\n+    CBitcoinAddress GetAddress() const\n+    {\n+        return CBitcoinAddress(GetPubKey());\n+    }\n };\n \n #endif"
      },
      {
        "sha": "2125d8472a9377f34d2b459d836787dc6540c3a4",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -16,10 +16,10 @@ std::vector<unsigned char> CKeyStore::GenerateNewKey()\n     return key.GetPubKey();\n }\n \n-bool CKeyStore::GetPubKey(const uint160 &hashAddress, std::vector<unsigned char> &vchPubKeyOut) const\n+bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const\n {\n     CKey key;\n-    if (!GetKey(hashAddress, key))\n+    if (!GetKey(address, key))\n         return false;\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n@@ -28,7 +28,7 @@ bool CKeyStore::GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>\n bool CBasicKeyStore::AddKey(const CKey& key)\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n-        mapKeys[Hash160(key.GetPubKey())] = key.GetSecret();\n+        mapKeys[key.GetAddress()] = key.GetSecret();\n     return true;\n }\n \n@@ -98,19 +98,19 @@ bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey,\n         if (!SetCrypted())\n             return false;\n \n-        mapCryptedKeys[Hash160(vchPubKey)] = make_pair(vchPubKey, vchCryptedSecret);\n+        mapCryptedKeys[CBitcoinAddress(vchPubKey)] = make_pair(vchPubKey, vchCryptedSecret);\n     }\n     return true;\n }\n \n-bool CCryptoKeyStore::GetKey(const uint160 &hashAddress, CKey& keyOut) const\n+bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n {\n     CRITICAL_BLOCK(cs_vMasterKey)\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::GetKey(hashAddress, keyOut);\n+            return CBasicKeyStore::GetKey(address, keyOut);\n \n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(hashAddress);\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n@@ -125,14 +125,14 @@ bool CCryptoKeyStore::GetKey(const uint160 &hashAddress, CKey& keyOut) const\n     return false;\n }\n \n-bool CCryptoKeyStore::GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>& vchPubKeyOut) const\n+bool CCryptoKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const\n {\n     CRITICAL_BLOCK(cs_vMasterKey)\n     {\n         if (!IsCrypted())\n-            return CKeyStore::GetPubKey(hashAddress, vchPubKeyOut);\n+            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n \n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(hashAddress);\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             vchPubKeyOut = (*mi).second.first;"
      },
      {
        "sha": "436053a9e3fa9c9147980c159d488e2cf5a8d739",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -12,13 +12,13 @@ class CKeyStore\n     mutable CCriticalSection cs_KeyStore;\n \n     virtual bool AddKey(const CKey& key) =0;\n-    virtual bool HaveKey(const uint160 &hashAddress) const =0;\n-    virtual bool GetKey(const uint160 &hashAddress, CKey& keyOut) const =0;\n-    virtual bool GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>& vchPubKeyOut) const;\n+    virtual bool HaveKey(const CBitcoinAddress &address) const =0;\n+    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const =0;\n+    virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n-typedef std::map<uint160, CSecret> KeyMap;\n+typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n \n class CBasicKeyStore : public CKeyStore\n {\n@@ -27,13 +27,13 @@ class CBasicKeyStore : public CKeyStore\n \n public:\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const uint160 &hashAddress) const\n+    bool HaveKey(const CBitcoinAddress &address) const\n     {\n-        return (mapKeys.count(hashAddress) > 0);\n+        return (mapKeys.count(address) > 0);\n     }\n-    bool GetKey(const uint160 &hashAddress, CKey& keyOut) const\n+    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n     {\n-        KeyMap::const_iterator mi = mapKeys.find(hashAddress);\n+        KeyMap::const_iterator mi = mapKeys.find(address);\n         if (mi != mapKeys.end())\n         {\n             keyOut.SetSecret((*mi).second);\n@@ -43,7 +43,7 @@ class CBasicKeyStore : public CKeyStore\n     }\n };\n \n-typedef std::map<uint160, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;\n+typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;\n \n class CCryptoKeyStore : public CBasicKeyStore\n {\n@@ -106,14 +106,14 @@ class CCryptoKeyStore : public CBasicKeyStore\n     virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     std::vector<unsigned char> GenerateNewKey();\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const uint160 &hashAddress) const\n+    bool HaveKey(const CBitcoinAddress &address) const\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::HaveKey(hashAddress);\n-        return mapCryptedKeys.count(hashAddress) > 0;\n+            return CBasicKeyStore::HaveKey(address);\n+        return mapCryptedKeys.count(address) > 0;\n     }\n-    bool GetKey(const uint160 &hashAddress, CKey& keyOut) const;\n-    bool GetPubKey(const uint160 &hashAddress, std::vector<unsigned char>& vchPubKeyOut) const;\n+    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const;\n+    bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n };\n \n #endif"
      },
      {
        "sha": "92096b460f7d76dee64445b6a07a785c6bda89fc",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 80,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -342,7 +342,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[0]);\n \n     // Generate a new key that is added to wallet\n-    string strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+    string strAddress = CBitcoinAddress(pwalletMain->GetOrReuseKeyFromPool()).ToString();\n \n     // This could be done in the same main CS as GetKeyFromKeyPool.\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n@@ -353,7 +353,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n \n \n // requires cs_main, cs_mapWallet, cs_mapAddressBook locks\n-string GetAccountAddress(string strAccount, bool bForceNew=false)\n+CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n {\n     string strAddress;\n \n@@ -393,16 +393,14 @@ string GetAccountAddress(string strAccount, bool bForceNew=false)\n             else\n             {\n                 account.vchPubKey = pwalletMain->GetOrReuseKeyFromPool();\n-                string strAddress = PubKeyToAddress(account.vchPubKey);\n+                string strAddress = CBitcoinAddress(account.vchPubKey).ToString();\n                 pwalletMain->SetAddressBookName(strAddress, strAccount);\n                 walletdb.WriteAccount(strAccount, account);\n             }\n         }\n     }\n \n-    strAddress = PubKeyToAddress(account.vchPubKey);\n-\n-    return strAddress;\n+    return CBitcoinAddress(account.vchPubKey);\n }\n \n Value getaccountaddress(const Array& params, bool fHelp)\n@@ -421,7 +419,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        ret = GetAccountAddress(strAccount);\n+        ret = GetAccountAddress(strAccount).ToString();\n     }\n \n     return ret;\n@@ -437,9 +435,8 @@ Value setaccount(const Array& params, bool fHelp)\n             \"Sets the account associated with the given address.\");\n \n     string strAddress = params[0].get_str();\n-    uint160 hash160;\n-    bool isValid = AddressToHash160(strAddress, hash160);\n-    if (!isValid)\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n \n \n@@ -452,10 +449,10 @@ Value setaccount(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        if (pwalletMain->mapAddressBook.count(strAddress))\n+        if (pwalletMain->mapAddressBook.count(address))\n         {\n-            string strOldAccount = pwalletMain->mapAddressBook[strAddress];\n-            if (strAddress == GetAccountAddress(strOldAccount))\n+            string strOldAccount = pwalletMain->mapAddressBook[address];\n+            if (address == GetAccountAddress(strOldAccount))\n                 GetAccountAddress(strOldAccount, true);\n         }\n \n@@ -474,11 +471,12 @@ Value getaccount(const Array& params, bool fHelp)\n             \"Returns the account associated with the given address.\");\n \n     string strAddress = params[0].get_str();\n+    CBitcoinAddress address(strAddress);\n \n     string strAccount;\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        map<string, string>::iterator mi = pwalletMain->mapAddressBook.find(strAddress);\n+        map<CBitcoinAddress, string>::iterator mi = pwalletMain->mapAddressBook.find(address);\n         if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n             strAccount = (*mi).second;\n     }\n@@ -499,17 +497,12 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     Array ret;\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            const string& strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             const string& strName = item.second;\n             if (strName == strAccount)\n-            {\n-                // We're only adding valid bitcoin addresses and not ip addresses\n-                CScript scriptPubKey;\n-                if (scriptPubKey.SetBitcoinAddress(strAddress))\n-                    ret.push_back(strAddress);\n-            }\n+                ret.push_back(address.ToString());\n         }\n     }\n     return ret;\n@@ -578,10 +571,11 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             \"Returns the total amount received by <bitcoinaddress> in transactions with at least [minconf] confirmations.\");\n \n     // Bitcoin address\n-    string strAddress = params[0].get_str();\n+    CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     CScript scriptPubKey;\n-    if (!scriptPubKey.SetBitcoinAddress(strAddress))\n+    if (!address.IsValid())\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+    scriptPubKey.SetBitcoinAddress(address);\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -611,22 +605,16 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-void GetAccountPubKeys(string strAccount, set<CScript>& setPubKey)\n+void GetAccountAddresses(string strAccount, set<CBitcoinAddress>& setAddress)\n {\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            const string& strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             const string& strName = item.second;\n             if (strName == strAccount)\n-            {\n-                // We're only counting our own valid bitcoin addresses and not ip addresses\n-                CScript scriptPubKey;\n-                if (scriptPubKey.SetBitcoinAddress(strAddress))\n-                    if (IsMine(*pwalletMain,scriptPubKey))\n-                        setPubKey.insert(scriptPubKey);\n-            }\n+                setAddress.insert(address);\n         }\n     }\n }\n@@ -646,8 +634,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n     // Get the set of pub keys that have the label\n     string strAccount = AccountFromValue(params[0]);\n-    set<CScript> setPubKey;\n-    GetAccountPubKeys(strAccount, setPubKey);\n+    set<CBitcoinAddress> setAddress;\n+    GetAccountAddresses(strAccount, setAddress);\n \n     // Tally\n     int64 nAmount = 0;\n@@ -660,9 +648,12 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n                 continue;\n \n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                if (setPubKey.count(txout.scriptPubKey))\n+            {\n+                CBitcoinAddress address;\n+                if (ExtractAddress(txout.scriptPubKey, pwalletMain, address) && setAddress.count(address))\n                     if (wtx.GetDepthInMainChain() >= nMinDepth)\n                         nAmount += txout.nValue;\n+            }\n         }\n     }\n \n@@ -733,13 +724,13 @@ Value getbalance(const Array& params, bool fHelp)\n             int64 allGeneratedImmature, allGeneratedMature, allFee;\n             allGeneratedImmature = allGeneratedMature = allFee = 0;\n             string strSentAccount;\n-            list<pair<string, int64> > listReceived;\n-            list<pair<string, int64> > listSent;\n+            list<pair<CBitcoinAddress, int64> > listReceived;\n+            list<pair<CBitcoinAddress, int64> > listSent;\n             wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n                     nBalance += r.second;\n-            BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n             nBalance += allGeneratedMature;\n@@ -874,22 +865,22 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n-    set<string> setAddress;\n+    set<CBitcoinAddress> setAddress;\n     vector<pair<CScript, int64> > vecSend;\n \n     int64 totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n-        uint160 hash160;\n-        string strAddress = s.name_;\n+        CBitcoinAddress address(s.name_);\n+        if (!address.IsValid())\n+            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+s.name_);\n \n-        if (setAddress.count(strAddress))\n-            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+strAddress);\n-        setAddress.insert(strAddress);\n+        if (setAddress.count(address))\n+            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+        setAddress.insert(address);\n \n         CScript scriptPubKey;\n-        if (!scriptPubKey.SetBitcoinAddress(strAddress))\n-            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+strAddress);\n+        scriptPubKey.SetBitcoinAddress(address);\n         int64 nAmount = AmountFromValue(s.value_); \n         totalAmount += nAmount;\n \n@@ -950,7 +941,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         fIncludeEmpty = params[1].get_bool();\n \n     // Tally\n-    map<uint160, tallyitem> mapTally;\n+    map<CBitcoinAddress, tallyitem> mapTally;\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     {\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -965,12 +956,11 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             {\n-                // Only counting our own bitcoin addresses and not ip addresses\n-                uint160 hash160 = txout.scriptPubKey.GetBitcoinAddressHash160();\n-                if (hash160 == 0 || !pwalletMain->HaveKey(hash160)) // IsMine\n+                CBitcoinAddress address;\n+                if (!ExtractAddress(txout.scriptPubKey, pwalletMain, address) || !address.IsValid())\n                     continue;\n \n-                tallyitem& item = mapTally[hash160];\n+                tallyitem& item = mapTally[address];\n                 item.nAmount += txout.nValue;\n                 item.nConf = min(item.nConf, nDepth);\n             }\n@@ -982,14 +972,11 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     map<string, tallyitem> mapAccountTally;\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            const string& strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             const string& strAccount = item.second;\n-            uint160 hash160;\n-            if (!AddressToHash160(strAddress, hash160))\n-                continue;\n-            map<uint160, tallyitem>::iterator it = mapTally.find(hash160);\n+            map<CBitcoinAddress, tallyitem>::iterator it = mapTally.find(address);\n             if (it == mapTally.end() && !fIncludeEmpty)\n                 continue;\n \n@@ -1010,7 +997,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             else\n             {\n                 Object obj;\n-                obj.push_back(Pair(\"address\",       strAddress));\n+                obj.push_back(Pair(\"address\",       address.ToString()));\n                 obj.push_back(Pair(\"account\",       strAccount));\n                 obj.push_back(Pair(\"label\",         strAccount)); // deprecated\n                 obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n@@ -1073,8 +1060,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n {\n     int64 nGeneratedImmature, nGeneratedMature, nFee;\n     string strSentAccount;\n-    list<pair<string, int64> > listReceived;\n-    list<pair<string, int64> > listSent;\n+    list<pair<CBitcoinAddress, int64> > listReceived;\n+    list<pair<CBitcoinAddress, int64> > listSent;\n     wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n@@ -1102,11 +1089,11 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n-            entry.push_back(Pair(\"address\", s.first));\n+            entry.push_back(Pair(\"address\", s.first.ToString()));\n             entry.push_back(Pair(\"category\", \"send\"));\n             entry.push_back(Pair(\"amount\", ValueFromAmount(-s.second)));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n@@ -1120,7 +1107,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n         {\n-            BOOST_FOREACH(const PAIRTYPE(string, int64)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n             {\n                 string account;\n                 if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1129,7 +1116,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                 {\n                     Object entry;\n                     entry.push_back(Pair(\"account\", account));\n-                    entry.push_back(Pair(\"address\", r.first));\n+                    entry.push_back(Pair(\"address\", r.first.ToString()));\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                     entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n                     if (fLong)\n@@ -1240,9 +1227,8 @@ Value listaccounts(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& entry, pwalletMain->mapAddressBook) {\n-            uint160 hash160;\n-            if(AddressToHash160(entry.first, hash160) && pwalletMain->HaveKey(hash160)) // This address belongs to me\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& entry, pwalletMain->mapAddressBook) {\n+            if (pwalletMain->HaveKey(entry.first)) // This address belongs to me\n                 mapAccountBalances[entry.second] = 0;\n         }\n \n@@ -1251,16 +1237,16 @@ Value listaccounts(const Array& params, bool fHelp)\n             const CWalletTx& wtx = (*it).second;\n             int64 nGeneratedImmature, nGeneratedMature, nFee;\n             string strSentAccount;\n-            list<pair<string, int64> > listReceived;\n-            list<pair<string, int64> > listSent;\n+            list<pair<CBitcoinAddress, int64> > listReceived;\n+            list<pair<CBitcoinAddress, int64> > listSent;\n             wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n             mapAccountBalances[strSentAccount] -= nFee;\n-            BOOST_FOREACH(const PAIRTYPE(string, int64)& s, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n                 mapAccountBalances[strSentAccount] -= s.second;\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 mapAccountBalances[\"\"] += nGeneratedMature;\n-                BOOST_FOREACH(const PAIRTYPE(string, int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n                     if (pwalletMain->mapAddressBook.count(r.first))\n                         mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n                     else\n@@ -1553,22 +1539,22 @@ Value validateaddress(const Array& params, bool fHelp)\n             \"Return information about <bitcoinaddress>.\");\n \n     string strAddress = params[0].get_str();\n-    uint160 hash160;\n-    bool isValid = AddressToHash160(strAddress, hash160);\n+    CBitcoinAddress address(strAddress);\n+    bool isValid = address.IsValid();\n \n     Object ret;\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n         // Call Hash160ToAddress() so we always return current ADDRESSVERSION\n         // version of the address:\n-        string currentAddress = Hash160ToAddress(hash160);\n+        string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        ret.push_back(Pair(\"ismine\", (pwalletMain->HaveKey(hash160) > 0)));\n+        ret.push_back(Pair(\"ismine\", (pwalletMain->HaveKey(address) > 0)));\n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n         {\n-            if (pwalletMain->mapAddressBook.count(currentAddress))\n-                ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[currentAddress]));\n+            if (pwalletMain->mapAddressBook.count(address))\n+                ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address]));\n         }\n     }\n     return ret;"
      },
      {
        "sha": "f91760084824b008cae7d88330bf76aa61e41b73",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -1123,7 +1123,7 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n }\n \n \n-bool ExtractHash160(const CScript& scriptPubKey, const CKeyStore* keystore, uint160& hash160Ret)\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n     vector<pair<opcodetype, valtype> > vSolution;\n     if (!Solver(scriptPubKey, vSolution))\n@@ -1135,18 +1135,11 @@ bool ExtractHash160(const CScript& scriptPubKey, const CKeyStore* keystore, uint\n         {\n             uint160 hash160;\n             if (item.first == OP_PUBKEY)\n-            {\n-                hash160 = Hash160(item.second);\n-            }\n+                addressRet.SetAddress(item.second);\n             else if (item.first == OP_PUBKEYHASH)\n-            {\n-                hash160 = uint160(item.second);\n-            }\n-            if (keystore == NULL || keystore->HaveKey(hash160))\n-            {\n-                hash160Ret = hash160;\n+                addressRet.SetAddress(uint160(item.second));\n+            if (keystore == NULL || keystore->HaveKey(addressRet))\n                 return true;\n-            }\n         }\n     }\n     return false;"
      },
      {
        "sha": "9d94e3f5c83994151af525bee346f36bcac8f19f",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 6,
        "deletions": 24,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -622,7 +622,7 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    uint160 GetBitcoinAddressHash160() const\n+    CBitcoinAddress GetBitcoinAddress() const\n     {\n         opcodetype opcode;\n         std::vector<unsigned char> vch;\n@@ -634,36 +634,18 @@ class CScript : public std::vector<unsigned char>\n         if (!GetOp(pc, opcode, vch) || opcode != OP_EQUALVERIFY) return 0;\n         if (!GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG) return 0;\n         if (pc != end()) return 0;\n-        return hash160;\n+        return CBitcoinAddress(hash160);\n     }\n \n-    std::string GetBitcoinAddress() const\n-    {\n-        uint160 hash160 = GetBitcoinAddressHash160();\n-        if (hash160 == 0)\n-            return \"\";\n-        return Hash160ToAddress(hash160);\n-    }\n-\n-    void SetBitcoinAddress(const uint160& hash160)\n+    void SetBitcoinAddress(const CBitcoinAddress& address)\n     {\n         this->clear();\n-        *this << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n+        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n     }\n \n     void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n     {\n-        SetBitcoinAddress(Hash160(vchPubKey));\n-    }\n-\n-    bool SetBitcoinAddress(const std::string& strAddress)\n-    {\n-        this->clear();\n-        uint160 hash160;\n-        if (!AddressToHash160(strAddress, hash160))\n-            return false;\n-        SetBitcoinAddress(hash160);\n-        return true;\n+        SetBitcoinAddress(CBitcoinAddress(vchPubKey));\n     }\n \n \n@@ -710,7 +692,7 @@ class CScript : public std::vector<unsigned char>\n \n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool ExtractHash160(const CScript& scriptPubKey, const CKeyStore* pkeystore, uint160& hash160Ret);\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* pkeystore, CBitcoinAddress& addressRet);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType=0);\n "
      },
      {
        "sha": "7d06caaec4b0bad356e525b6458c1b848e2019ae",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 40,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -235,11 +235,11 @@ void SetDefaultReceivingAddress(const string& strAddress)\n         return;\n     if (strAddress != pframeMain->m_textCtrlAddress->GetValue())\n     {\n-        uint160 hash160;\n-        if (!AddressToHash160(strAddress, hash160))\n+        CBitcoinAddress address(strAddress);\n+        if (!address.IsValid())\n             return;\n         vector<unsigned char> vchPubKey;\n-        if (!pwalletMain->GetPubKey(hash160, vchPubKey))\n+        if (!pwalletMain->GetPubKey(address, vchPubKey))\n             return;\n         pwalletMain->SetDefaultKey(vchPubKey);\n         pframeMain->m_textCtrlAddress->SetValue(strAddress);\n@@ -367,7 +367,7 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     // Fill your address text box\n     vector<unsigned char> vchPubKey;\n     if (CWalletDB(pwalletMain->strWalletFile,\"r\").ReadDefaultKey(vchPubKey))\n-        m_textCtrlAddress->SetValue(PubKeyToAddress(vchPubKey));\n+        m_textCtrlAddress->SetValue(CBitcoinAddress(vchPubKey).ToString());\n \n     if (pwalletMain->IsCrypted())\n         m_menuOptions->Remove(m_menuOptionsEncryptWallet);\n@@ -704,24 +704,23 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             {\n                 if (pwalletMain->IsMine(txout))\n                 {\n-                    uint160 hash160;\n-                    if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n+                    CBitcoinAddress address;\n+                    if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n                     {\n                         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n                         {\n                             //strDescription += _(\"Received payment to \");\n                             //strDescription += _(\"Received with address \");\n                             strDescription += _(\"Received with: \");\n-                            string strAddress = Hash160ToAddress(hash160);\n-                            map<string, string>::iterator mi = pwalletMain->mapAddressBook.find(strAddress);\n+                            map<CBitcoinAddress, string>::iterator mi = pwalletMain->mapAddressBook.find(address);\n                             if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n                             {\n                                 string strLabel = (*mi).second;\n-                                strDescription += strAddress.substr(0,12) + \"... \";\n+                                strDescription += address.ToString().substr(0,12) + \"... \";\n                                 strDescription += \"(\" + strLabel + \")\";\n                             }\n                             else\n-                                strDescription += strAddress;\n+                                strDescription += address.ToString();\n                         }\n                     }\n                     break;\n@@ -786,9 +785,9 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                 else\n                 {\n                     // Sent to Bitcoin Address\n-                    uint160 hash160;\n-                    if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n-                        strAddress = Hash160ToAddress(hash160);\n+                    CBitcoinAddress address;\n+                    if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n+                        strAddress = address.ToString();\n                 }\n \n                 string strDescription = _(\"To: \");\n@@ -1115,7 +1114,7 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)\n     m_statusBar->SetStatusText(strStatus, 2);\n \n     // Update receiving address\n-    string strDefaultAddress = PubKeyToAddress(pwalletMain->vchDefaultKey);\n+    string strDefaultAddress = CBitcoinAddress(pwalletMain->vchDefaultKey).ToString();\n     if (m_textCtrlAddress->GetValue() != strDefaultAddress)\n         m_textCtrlAddress->SetValue(strDefaultAddress);\n }\n@@ -1394,7 +1393,7 @@ void CMainFrame::OnButtonNew(wxCommandEvent& event)\n             return;\n \n         // Generate new key\n-        strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+        strAddress = CBitcoinAddress(pwalletMain->GetOrReuseKeyFromPool()).ToString();\n \n         if (fWasLocked)\n             pwalletMain->Lock();\n@@ -1503,17 +1502,16 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                 {\n                     if (pwalletMain->IsMine(txout))\n                     {\n-                        uint160 hash160;\n-                        if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n+                        CBitcoinAddress address;\n+                        if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n                         {\n-                            string strAddress = Hash160ToAddress(hash160);\n-                            if (pwalletMain->mapAddressBook.count(strAddress))\n+                            if (pwalletMain->mapAddressBook.count(address))\n                             {\n                                 strHTML += string() + _(\"<b>From:</b> \") + _(\"unknown\") + \"<br>\";\n                                 strHTML += _(\"<b>To:</b> \");\n-                                strHTML += HtmlEscape(strAddress);\n-                                if (!pwalletMain->mapAddressBook[strAddress].empty())\n-                                    strHTML += _(\" (yours, label: \") + pwalletMain->mapAddressBook[strAddress] + \")\";\n+                                strHTML += HtmlEscape(address.ToString());\n+                                if (!pwalletMain->mapAddressBook[address].empty())\n+                                    strHTML += _(\" (yours, label: \") + pwalletMain->mapAddressBook[address] + \")\";\n                                 else\n                                     strHTML += _(\" (yours)\");\n                                 strHTML += \"<br>\";\n@@ -1589,13 +1587,13 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                     if (wtx.mapValue[\"to\"].empty())\n                     {\n                         // Offline transaction\n-                        uint160 hash160;\n-                        if (ExtractHash160(txout.scriptPubKey, pwalletMain, hash160))\n+                        CBitcoinAddress address;\n+                        if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n                         {\n-                            string strAddress = Hash160ToAddress(hash160);\n+                            string strAddress = address.ToString();\n                             strHTML += _(\"<b>To:</b> \");\n-                            if (pwalletMain->mapAddressBook.count(strAddress) && !pwalletMain->mapAddressBook[strAddress].empty())\n-                                strHTML += pwalletMain->mapAddressBook[strAddress] + \" \";\n+                            if (pwalletMain->mapAddressBook.count(address) && !pwalletMain->mapAddressBook[address].empty())\n+                                strHTML += pwalletMain->mapAddressBook[address] + \" \";\n                             strHTML += strAddress;\n                             strHTML += \"<br>\";\n                         }\n@@ -2156,8 +2154,8 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n         }\n \n         // Parse bitcoin address\n-        uint160 hash160;\n-        bool fBitcoinAddress = AddressToHash160(strAddress, hash160);\n+        CBitcoinAddress address(strAddress);\n+        bool fBitcoinAddress = address.IsValid();\n \n         if (fBitcoinAddress)\n         {\n@@ -2170,7 +2168,7 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n \n                 // Send to bitcoin address\n                 CScript scriptPubKey;\n-                scriptPubKey << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n+                scriptPubKey.SetBitcoinAddress(address);\n \n                 string strError = pwalletMain->SendMoney(scriptPubKey, nValue, wtx, true);\n                 if (strError == \"\")\n@@ -2214,7 +2212,7 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n         }\n \n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n-            if (!pwalletMain->mapAddressBook.count(strAddress))\n+            if (!pwalletMain->mapAddressBook.count(address))\n                 pwalletMain->SetAddressBookName(strAddress, \"\");\n \n         EndModal(true);\n@@ -2626,15 +2624,14 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n         string strDefaultReceiving = (string)pframeMain->m_textCtrlAddress->GetValue();\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            string strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             string strName = item.second;\n-            uint160 hash160;\n-            bool fMine = (AddressToHash160(strAddress, hash160) && pwalletMain->HaveKey(hash160));\n+            bool fMine = pwalletMain->HaveKey(address);\n             wxListCtrl* plistCtrl = fMine ? m_listCtrlReceiving : m_listCtrlSending;\n-            int nIndex = InsertLine(plistCtrl, strName, strAddress);\n-            if (strAddress == (fMine ? strDefaultReceiving : string(strInitSelected)))\n+            int nIndex = InsertLine(plistCtrl, strName, address.ToString());\n+            if (address.ToString() == (fMine ? strDefaultReceiving : string(strInitSelected)))\n                 plistCtrl->SetItemState(nIndex, wxLIST_STATE_SELECTED|wxLIST_STATE_FOCUSED, wxLIST_STATE_SELECTED|wxLIST_STATE_FOCUSED);\n         }\n     }\n@@ -2741,8 +2738,8 @@ void CAddressBookDialog::OnButtonCopy(wxCommandEvent& event)\n \n bool CAddressBookDialog::CheckIfMine(const string& strAddress, const string& strTitle)\n {\n-    uint160 hash160;\n-    bool fMine = (AddressToHash160(strAddress, hash160) && pwalletMain->HaveKey(hash160));\n+    CBitcoinAddress address(strAddress);\n+    bool fMine = address.IsValid() && pwalletMain->HaveKey(address);\n     if (fMine)\n         wxMessageBox(_(\"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"), strTitle);\n     return fMine;\n@@ -2828,7 +2825,7 @@ void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)\n                 return;\n \n             // Generate new key\n-            strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+            strAddress = CBitcoinAddress(pwalletMain->GetOrReuseKeyFromPool()).ToString();\n \n             if (fWasLocked)\n                 pwalletMain->Lock();"
      },
      {
        "sha": "74f8b9f67e3cbcfe8eb6fcc76a2643d05810cae2",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 24,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -270,7 +270,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n             if (txout.scriptPubKey == scriptDefaultKey)\n             {\n                 SetDefaultKey(GetOrReuseKeyFromPool());\n-                SetAddressBookName(PubKeyToAddress(vchDefaultKey), \"\");\n+                SetAddressBookName(CBitcoinAddress(vchDefaultKey), \"\");\n             }\n         }\n \n@@ -406,8 +406,8 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<string, int64> >& listReceived,\n-                           list<pair<string, int64> >& listSent, int64& nFee, string& strSentAccount) const\n+void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CBitcoinAddress, int64> >& listReceived,\n+                           list<pair<CBitcoinAddress, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n     nGeneratedImmature = nGeneratedMature = nFee = 0;\n     listReceived.clear();\n@@ -435,12 +435,9 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n     // but non-standard clients might (so return a list of address/amount pairs)\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        string address;\n-        uint160 hash160;\n+        CBitcoinAddress address;\n         vector<unsigned char> vchPubKey;\n-        if (ExtractHash160(txout.scriptPubKey, pwallet, hash160))\n-            address = Hash160ToAddress(hash160);\n-        else\n+        if (!ExtractAddress(txout.scriptPubKey, pwallet, address))\n         {\n             printf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                    this->GetHash().ToString().c_str());\n@@ -468,25 +465,25 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, i\n     int64 allGeneratedImmature, allGeneratedMature, allFee;\n     allGeneratedImmature = allGeneratedMature = allFee = 0;\n     string strSentAccount;\n-    list<pair<string, int64> > listReceived;\n-    list<pair<string, int64> > listSent;\n+    list<pair<CBitcoinAddress, int64> > listReceived;\n+    list<pair<CBitcoinAddress, int64> > listSent;\n     GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == \"\")\n         nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string,int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     CRITICAL_BLOCK(pwallet->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n-                map<string, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n+                map<CBitcoinAddress, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n                 if (mi != pwallet->mapAddressBook.end() && (*mi).second == strAccount)\n                     nReceived += r.second;\n             }\n@@ -955,7 +952,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n \n                     // Fill a vout to ourself, using same address type as the payment\n                     CScript scriptChange;\n-                    if (vecSend[0].first.GetBitcoinAddressHash160() != 0)\n+                    if (vecSend[0].first.GetBitcoinAddress().IsValid())\n                         scriptChange.SetBitcoinAddress(vchPubKey);\n                     else\n                         scriptChange << vchPubKey << OP_CHECKSIG;\n@@ -1104,7 +1101,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n // requires cs_main lock\n-string CWallet::SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1114,8 +1111,7 @@ string CWallet::SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWall\n \n     // Parse bitcoin address\n     CScript scriptPubKey;\n-    if (!scriptPubKey.SetBitcoinAddress(strAddress))\n-        return _(\"Invalid bitcoin address\");\n+    scriptPubKey.SetBitcoinAddress(address);\n \n     return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n }\n@@ -1139,7 +1135,7 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n         RandAddSeedPerfmon();\n \n         SetDefaultKey(GetOrReuseKeyFromPool());\n-        if (!SetAddressBookName(PubKeyToAddress(vchDefaultKey), \"\"))\n+        if (!SetAddressBookName(CBitcoinAddress(vchDefaultKey), \"\"))\n             return DB_LOAD_FAIL;\n     }\n \n@@ -1148,20 +1144,20 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n-bool CWallet::SetAddressBookName(const string& strAddress, const string& strName)\n+bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& strName)\n {\n-    mapAddressBook[strAddress] = strName;\n+    mapAddressBook[address] = strName;\n     if (!fFileBacked)\n         return false;\n-    return CWalletDB(strWalletFile).WriteName(strAddress, strName);\n+    return CWalletDB(strWalletFile).WriteName(address.ToString(), strName);\n }\n \n-bool CWallet::DelAddressBookName(const string& strAddress)\n+bool CWallet::DelAddressBookName(const CBitcoinAddress& address)\n {\n-    mapAddressBook.erase(strAddress);\n+    mapAddressBook.erase(address);\n     if (!fFileBacked)\n         return false;\n-    return CWalletDB(strWalletFile).EraseName(strAddress);\n+    return CWalletDB(strWalletFile).EraseName(address.ToString());\n }\n \n "
      },
      {
        "sha": "51dfa5df5b9e3b7c62fdf8a24c9a2e023be10e8e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ffba736e9102d016b96c2e5de2ce7757e612667/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ffba736e9102d016b96c2e5de2ce7757e612667/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=2ffba736e9102d016b96c2e5de2ce7757e612667",
        "patch": "@@ -53,7 +53,7 @@ class CWallet : public CCryptoKeyStore\n     std::map<uint256, int> mapRequestCount;\n     mutable CCriticalSection cs_mapRequestCount;\n \n-    std::map<std::string, std::string> mapAddressBook;\n+    std::map<CBitcoinAddress, std::string> mapAddressBook;\n     mutable CCriticalSection cs_mapAddressBook;\n \n     std::vector<unsigned char> vchDefaultKey;\n@@ -81,7 +81,7 @@ class CWallet : public CCryptoKeyStore\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     bool BroadcastTransaction(CWalletTx& wtxNew);\n     std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n \n     bool TopUpKeyPool();\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n@@ -104,10 +104,10 @@ class CWallet : public CCryptoKeyStore\n     }\n     bool IsChange(const CTxOut& txout) const\n     {\n-        uint160 hash160;\n-        if (ExtractHash160(txout.scriptPubKey, this, hash160))\n+        CBitcoinAddress address;\n+        if (ExtractAddress(txout.scriptPubKey, this, address))\n             CRITICAL_BLOCK(cs_mapAddressBook)\n-                if (!mapAddressBook.count(Hash160ToAddress(hash160)))\n+                if (!mapAddressBook.count(address))\n                     return true;\n         return false;\n     }\n@@ -171,10 +171,10 @@ class CWallet : public CCryptoKeyStore\n //    bool BackupWallet(const std::string& strDest);\n \n     // requires cs_mapAddressBook lock\n-    bool SetAddressBookName(const std::string& strAddress, const std::string& strName);\n+    bool SetAddressBookName(const CBitcoinAddress& address, const std::string& strName);\n \n     // requires cs_mapAddressBook lock\n-    bool DelAddressBookName(const std::string& strAddress);\n+    bool DelAddressBookName(const CBitcoinAddress& address);\n \n     void UpdatedTransaction(const uint256 &hashTx)\n     {\n@@ -464,8 +464,8 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<std::string /* address */, int64> >& listReceived,\n-                    std::list<std::pair<std::string /* address */, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n+    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CBitcoinAddress, int64> >& listReceived,\n+                    std::list<std::pair<CBitcoinAddress, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n                            int64& nSent, int64& nFee) const;"
      }
    ]
  },
  {
    "sha": "cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjYxYjhkYzRjZTJmMjQzMzJmZGZlOWI0N2U1Zjg3OTA1YTlkYTcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-11T09:09:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-17T10:09:17Z"
      },
      "message": "split off CBase58Data from CBitcoinAddress\n\nSplit off features unrelated to addresses from CBitcoinAddress to\nCBase58Data, so they can be reused.",
      "tree": {
        "sha": "8cfd84e0d55adf7590a8273e11c12c60b0dcfc4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cfd84e0d55adf7590a8273e11c12c60b0dcfc4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ffba736e9102d016b96c2e5de2ce7757e612667",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ffba736e9102d016b96c2e5de2ce7757e612667",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ffba736e9102d016b96c2e5de2ce7757e612667"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 67,
      "deletions": 43
    },
    "files": [
      {
        "sha": "985b0447c07a867fc80976c75e6fbb463c39b4d5",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 65,
        "deletions": 41,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
        "patch": "@@ -159,25 +159,40 @@ inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>\n \n \n \n-class CBitcoinAddress\n+class CBase58Data\n {\n protected:\n     unsigned char nVersion;\n     std::vector<unsigned char> vchData;\n \n-public:\n-    bool SetAddress(const uint160& hash160)\n+    CBase58Data()\n     {\n-        nVersion = fTestNet ? 111 : 0;\n-        vchData.resize(20);\n-        memcpy(&vchData[0], &hash160, 20);\n-        return true;\n+        nVersion = 0;\n+        vchData.clear();\n+    }\n+\n+    ~CBase58Data()\n+    {\n+        memset(&vchData[0], 0, vchData.size());\n+    }\n+\n+    void SetData(int nVersionIn, const void* pdata, size_t nSize)\n+    {\n+        nVersion = nVersionIn;\n+        vchData.resize(nSize);\n+        memcpy(&vchData[0], pdata, nSize);\n+    }\n+\n+    void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n+    {\n+        SetData(nVersionIn, (void*)pbegin, pend - pbegin);\n     }\n \n-    bool SetAddress(const char* pszAddress)\n+public:\n+    bool SetString(const char* psz)\n     {\n         std::vector<unsigned char> vchTemp;\n-        DecodeBase58Check(pszAddress, vchTemp);\n+        DecodeBase58Check(psz, vchTemp);\n         if (vchTemp.empty())\n         {\n             vchData.clear();\n@@ -187,17 +202,50 @@ class CBitcoinAddress\n         nVersion = vchTemp[0];\n         vchData.resize(vchTemp.size() - 1);\n         memcpy(&vchData[0], &vchTemp[1], vchData.size());\n+        memset(&vchTemp[0], 0, vchTemp.size());\n         return true;\n     }\n \n-    bool SetAddress(const std::string& strAddress)\n+    bool SetString(const std::string& str)\n+    {\n+        return SetString(str.c_str());\n+    }\n+\n+    std::string ToString() const\n     {\n-        return SetAddress(strAddress.c_str());\n+        std::vector<unsigned char> vch(1, nVersion);\n+        vch.insert(vch.end(), vchData.begin(), vchData.end());\n+        return EncodeBase58Check(vch);\n     }\n \n-    bool SetAddress(const std::vector<unsigned char>& vchPubKey)\n+    int CompareTo(const CBase58Data& b58) const\n     {\n-        return SetAddress(Hash160(vchPubKey));\n+        if (nVersion < b58.nVersion) return -1;\n+        if (nVersion < b58.nVersion) return  1;\n+        if (vchData < b58.vchData)   return -1;\n+        if (vchData > b58.vchData)   return  1;\n+        return 0;\n+    }\n+\n+    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n+    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n+    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }\n+    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }\n+    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n+};\n+\n+\n+class CBitcoinAddress : public CBase58Data\n+{\n+public:\n+    bool SetHash160(const uint160& hash160)\n+    {\n+        SetData(fTestNet ? 111 : 0, &hash160, 20);\n+    }\n+\n+    bool SetPubKey(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        return SetHash160(Hash160(vchPubKey));\n     }\n \n     bool IsValid() const\n@@ -221,35 +269,26 @@ class CBitcoinAddress\n \n     CBitcoinAddress()\n     {\n-        nVersion = 0;\n-        vchData.clear();\n     }\n \n     CBitcoinAddress(uint160 hash160In)\n     {\n-        SetAddress(hash160In);\n+        SetHash160(hash160In);\n     }\n \n     CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n     {\n-        SetAddress(vchPubKey);\n+        SetPubKey(vchPubKey);\n     }\n \n     CBitcoinAddress(const std::string& strAddress)\n     {\n-        SetAddress(strAddress);\n+        SetString(strAddress);\n     }\n \n     CBitcoinAddress(const char* pszAddress)\n     {\n-        SetAddress(pszAddress);\n-    }\n-\n-    std::string ToString() const\n-    {\n-        std::vector<unsigned char> vch(1, nVersion);\n-        vch.insert(vch.end(), vchData.begin(), vchData.end());\n-        return EncodeBase58Check(vch);\n+        SetString(pszAddress);\n     }\n \n     uint160 GetHash160() const\n@@ -259,21 +298,6 @@ class CBitcoinAddress\n         memcpy(&hash160, &vchData[0], 20);\n         return hash160;\n     }\n-\n-    int CompareTo(const CBitcoinAddress& address) const\n-    {\n-        if (nVersion < address.nVersion) return -1;\n-        if (nVersion < address.nVersion) return  1;\n-        if (vchData < address.vchData)   return -1;\n-        if (vchData > address.vchData)   return  1;\n-        return 0;\n-    }\n-\n-    bool operator==(const CBitcoinAddress& address) const { return CompareTo(address) == 0; }\n-    bool operator<=(const CBitcoinAddress& address) const { return CompareTo(address) <= 0; }\n-    bool operator>=(const CBitcoinAddress& address) const { return CompareTo(address) >= 0; }\n-    bool operator< (const CBitcoinAddress& address) const { return CompareTo(address) <  0; }\n-    bool operator> (const CBitcoinAddress& address) const { return CompareTo(address) >  0; }\n };\n \n #endif"
      },
      {
        "sha": "652240f6863b47a8b027edb157225ed0738ac803",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
        "patch": "@@ -1135,9 +1135,9 @@ bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBit\n         {\n             uint160 hash160;\n             if (item.first == OP_PUBKEY)\n-                addressRet.SetAddress(item.second);\n+                addressRet.SetPubKey(item.second);\n             else if (item.first == OP_PUBKEYHASH)\n-                addressRet.SetAddress(uint160(item.second));\n+                addressRet.SetHash160((uint160)item.second);\n             if (keystore == NULL || keystore->HaveKey(addressRet))\n                 return true;\n         }"
      }
    ]
  },
  {
    "sha": "03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2Y4YjU0NTY1NWJkMWE2ZWU2ZGI3ZTJlNmQxNDU4NjkwMGNhY2Ix",
    "commit": {
      "author": {
        "name": "Abraham Jewowich",
        "email": "abuse@loljews.com",
        "date": "2011-07-18T13:26:54Z"
      },
      "committer": {
        "name": "Abraham Jewowich",
        "email": "abuse@loljews.com",
        "date": "2011-07-18T13:26:54Z"
      },
      "message": "Fix bug with accessing vchData[0] when vchData is empty.\r\nFix typo in CBase58Data::CompareTo",
      "tree": {
        "sha": "7e37fb19ab0b2c01024d6824103aa4d383147691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e37fb19ab0b2c01024d6824103aa4d383147691"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03f8b545655bd1a6ee6db7e2e6d14586900cacb1/comments",
    "author": {
      "login": "AbrahamJewowich",
      "id": 452157,
      "node_id": "MDQ6VXNlcjQ1MjE1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/452157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AbrahamJewowich",
      "html_url": "https://github.com/AbrahamJewowich",
      "followers_url": "https://api.github.com/users/AbrahamJewowich/followers",
      "following_url": "https://api.github.com/users/AbrahamJewowich/following{/other_user}",
      "gists_url": "https://api.github.com/users/AbrahamJewowich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AbrahamJewowich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AbrahamJewowich/subscriptions",
      "organizations_url": "https://api.github.com/users/AbrahamJewowich/orgs",
      "repos_url": "https://api.github.com/users/AbrahamJewowich/repos",
      "events_url": "https://api.github.com/users/AbrahamJewowich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AbrahamJewowich/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AbrahamJewowich",
      "id": 452157,
      "node_id": "MDQ6VXNlcjQ1MjE1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/452157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AbrahamJewowich",
      "html_url": "https://github.com/AbrahamJewowich",
      "followers_url": "https://api.github.com/users/AbrahamJewowich/followers",
      "following_url": "https://api.github.com/users/AbrahamJewowich/following{/other_user}",
      "gists_url": "https://api.github.com/users/AbrahamJewowich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AbrahamJewowich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AbrahamJewowich/subscriptions",
      "organizations_url": "https://api.github.com/users/AbrahamJewowich/orgs",
      "repos_url": "https://api.github.com/users/AbrahamJewowich/repos",
      "events_url": "https://api.github.com/users/AbrahamJewowich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AbrahamJewowich/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "266412c861c952870b3c85b189acb6a08e38e865",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03f8b545655bd1a6ee6db7e2e6d14586900cacb1/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03f8b545655bd1a6ee6db7e2e6d14586900cacb1/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
        "patch": "@@ -173,14 +173,16 @@ class CBase58Data\n \n     ~CBase58Data()\n     {\n-        memset(&vchData[0], 0, vchData.size());\n+        if (!vchData.empty())\n+            memset(&vchData[0], 0, vchData.size());\n     }\n \n     void SetData(int nVersionIn, const void* pdata, size_t nSize)\n     {\n         nVersion = nVersionIn;\n         vchData.resize(nSize);\n-        memcpy(&vchData[0], pdata, nSize);\n+        if (!vchData.empty())\n+            memcpy(&vchData[0], pdata, nSize);\n     }\n \n     void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n@@ -201,7 +203,8 @@ class CBase58Data\n         }\n         nVersion = vchTemp[0];\n         vchData.resize(vchTemp.size() - 1);\n-        memcpy(&vchData[0], &vchTemp[1], vchData.size());\n+        if (!vchData.empty())\n+            memcpy(&vchData[0], &vchTemp[1], vchData.size());\n         memset(&vchTemp[0], 0, vchTemp.size());\n         return true;\n     }\n@@ -221,7 +224,7 @@ class CBase58Data\n     int CompareTo(const CBase58Data& b58) const\n     {\n         if (nVersion < b58.nVersion) return -1;\n-        if (nVersion < b58.nVersion) return  1;\n+        if (nVersion > b58.nVersion) return  1;\n         if (vchData < b58.vchData)   return -1;\n         if (vchData > b58.vchData)   return  1;\n         return 0;"
      }
    ]
  },
  {
    "sha": "ca40e581ebcdc85dba15c1e873f5e5aedda45b77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTQwZTU4MWViY2RjODVkYmExNWMxZTg3M2Y1ZTVhZWRkYTQ1Yjc3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-18T13:38:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-18T13:38:54Z"
      },
      "message": "Merge pull request #1 from AbrahamJewowich/cbitcoinaddress\n\nCbitcoinaddress",
      "tree": {
        "sha": "7e37fb19ab0b2c01024d6824103aa4d383147691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e37fb19ab0b2c01024d6824103aa4d383147691"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca40e581ebcdc85dba15c1e873f5e5aedda45b77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca40e581ebcdc85dba15c1e873f5e5aedda45b77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca40e581ebcdc85dba15c1e873f5e5aedda45b77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca40e581ebcdc85dba15c1e873f5e5aedda45b77/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb61b8dc4ce2f24332fdfe9b47e5f87905a9da71"
      },
      {
        "sha": "03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03f8b545655bd1a6ee6db7e2e6d14586900cacb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03f8b545655bd1a6ee6db7e2e6d14586900cacb1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "266412c861c952870b3c85b189acb6a08e38e865",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca40e581ebcdc85dba15c1e873f5e5aedda45b77/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca40e581ebcdc85dba15c1e873f5e5aedda45b77/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=ca40e581ebcdc85dba15c1e873f5e5aedda45b77",
        "patch": "@@ -173,14 +173,16 @@ class CBase58Data\n \n     ~CBase58Data()\n     {\n-        memset(&vchData[0], 0, vchData.size());\n+        if (!vchData.empty())\n+            memset(&vchData[0], 0, vchData.size());\n     }\n \n     void SetData(int nVersionIn, const void* pdata, size_t nSize)\n     {\n         nVersion = nVersionIn;\n         vchData.resize(nSize);\n-        memcpy(&vchData[0], pdata, nSize);\n+        if (!vchData.empty())\n+            memcpy(&vchData[0], pdata, nSize);\n     }\n \n     void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n@@ -201,7 +203,8 @@ class CBase58Data\n         }\n         nVersion = vchTemp[0];\n         vchData.resize(vchTemp.size() - 1);\n-        memcpy(&vchData[0], &vchTemp[1], vchData.size());\n+        if (!vchData.empty())\n+            memcpy(&vchData[0], &vchTemp[1], vchData.size());\n         memset(&vchTemp[0], 0, vchTemp.size());\n         return true;\n     }\n@@ -221,7 +224,7 @@ class CBase58Data\n     int CompareTo(const CBase58Data& b58) const\n     {\n         if (nVersion < b58.nVersion) return -1;\n-        if (nVersion < b58.nVersion) return  1;\n+        if (nVersion > b58.nVersion) return  1;\n         if (vchData < b58.vchData)   return -1;\n         if (vchData > b58.vchData)   return  1;\n         return 0;"
      }
    ]
  }
]