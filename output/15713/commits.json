[
  {
    "sha": "8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzhhYTE5YjRiNGZhNTZjZDM1OTA5MmVmMDk5YmNmYzdiMjZjMzM0",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-11T14:37:30Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-08-01T17:43:26Z"
      },
      "message": "Add BroadcastTransaction utility usage in Chain interface\n\nAccess through a broadcastTransaction method.\nAdd a wait_callback flag to turn off race protection when wallet\nalready track its tx being in mempool\n\nStandardise highfee, absurdfee variable name to max_tx_fee\n\nWe drop the P2P check in BroadcastTransaction as g_connman is only\ncalled by RPCs and the wallet scheduler, both of which are initialized\nafter g_connman is assigned and stopped before g_connman is reset.",
      "tree": {
        "sha": "e534b3c295f52f3ab25e122256ebb753716a5850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e534b3c295f52f3ab25e122256ebb753716a5850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7821821a23b68cc9ec49d69829ad4c939cb762e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821821a23b68cc9ec49d69829ad4c939cb762e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7821821a23b68cc9ec49d69829ad4c939cb762e8"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 34,
      "deletions": 19
    },
    "files": [
      {
        "sha": "10cf82acdcbd27789eed9bc034bbf54fbbeacc69",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "patch": "@@ -11,6 +11,7 @@\n #include <net.h>\n #include <net_processing.h>\n #include <node/coin.h>\n+#include <node/transaction.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -295,6 +296,14 @@ class ChainImpl : public Chain\n     {\n         RelayTransaction(txid, *g_connman);\n     }\n+    bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n+    {\n+        const TransactionError err = BroadcastTransaction(tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n+        // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n+        // Note: this will need to be updated if BroadcastTransactions() is updated to return other non-mempool failures\n+        // that Chain clients do not need to know about.\n+        return TransactionError::OK == err;\n+    }\n     void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n     {\n         ::mempool.GetTransactionAncestry(txid, ancestors, descendants);"
      },
      {
        "sha": "23415068540012e309af6dfa96ebdcd762f8ec74",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "patch": "@@ -167,6 +167,11 @@ class Chain\n     //! Relay transaction.\n     virtual void relayTransaction(const uint256& txid) = 0;\n \n+    //! Transaction is added to memory pool, if the transaction fee is below the\n+    //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.\n+    //! Return false if the transaction could not be added due to the fee or for another reason.\n+    virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) = 0;\n+\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n "
      },
      {
        "sha": "0cbf645984727ff6cf8cbed21337cf32306decbe",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "patch": "@@ -14,10 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n+    assert(g_connman);\n     std::promise<void> promise;\n-    hashTx = tx->GetHash();\n+    uint256 hashTx = tx->GetHash();\n+    bool callback_set = false;\n \n     { // cs_main scope\n     LOCK(cs_main);\n@@ -33,7 +35,7 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx,\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee)) {\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_REJECTED;\n@@ -44,7 +46,7 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx,\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_ERROR;\n             }\n-        } else {\n+        } else if (wait_callback) {\n             // If wallet is enabled, ensure that the wallet has been made aware\n             // of the new transaction prior to returning. This prevents a race\n             // where a user might call sendrawtransaction with a transaction\n@@ -53,24 +55,21 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx,\n             CallFunctionInValidationInterfaceQueue([&promise] {\n                 promise.set_value();\n             });\n+            callback_set = true;\n         }\n     } else if (fHaveChain) {\n         return TransactionError::ALREADY_IN_CHAIN;\n-    } else {\n-        // Make sure we don't block forever if re-sending\n-        // a transaction already in mempool.\n-        promise.set_value();\n     }\n \n     } // cs_main\n \n-    promise.get_future().wait();\n-\n-    if (!g_connman) {\n-        return TransactionError::P2P_DISABLED;\n+    if (callback_set) {\n+        promise.get_future().wait();\n     }\n \n-    RelayTransaction(hashTx, *g_connman);\n+    if (relay) {\n+        RelayTransaction(hashTx, *g_connman);\n+    }\n \n     return TransactionError::OK;\n }"
      },
      {
        "sha": "08ceace7f8ea5c1b238603535ed7e825c4aa9d0e",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "patch": "@@ -14,11 +14,13 @@\n  * Broadcast a transaction\n  *\n  * @param[in]  tx the transaction to broadcast\n- * @param[out] &txid the txid of the transaction, if successfully broadcast\n  * @param[out] &err_string reference to std::string to fill with error string if available\n- * @param[in]  highfee Reject txs with fees higher than this (if 0, accept any fee)\n+ * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n+ * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n+ * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n+ * It MUST NOT be set while cs_main, cs_mempool or cs_wallet are held to avoid deadlock\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, uint256& txid, std::string& err_string, const CAmount& highfee);\n+NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "b8ec2178d2f1d8777ffba3a0cc24e436ef5cd7af",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "patch": "@@ -810,14 +810,14 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n         max_raw_tx_fee = fr.GetFee((weight+3)/4);\n     }\n \n-    uint256 txid;\n     std::string err_string;\n-    const TransactionError err = BroadcastTransaction(tx, txid, err_string, max_raw_tx_fee);\n+    AssertLockNotHeld(cs_main);\n+    const TransactionError err = BroadcastTransaction(tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n \n-    return txid.GetHex();\n+    return tx->GetHash().GetHex();\n }\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTEyOTFjMTk4ZWIyYmU5YmYxYWVhMWJmOWIyMTg3YjE4YmRiM2Fh",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-11T15:58:53Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-08-01T17:43:29Z"
      },
      "message": "Introduce CWalletTx::SubmitMemoryPoolAndRelay\n\nHigher wallet-tx method combining RelayWalletTransactions and\nAcceptToMemoryPool, using new Chain::broadcastTransaction",
      "tree": {
        "sha": "e6038506c0e541ea5538375cbc8aec80fc21b43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6038506c0e541ea5538375cbc8aec80fc21b43a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c8aa19b4b4fa56cd359092ef099bcfc7b26c334"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 28,
      "deletions": 41
    },
    "files": [
      {
        "sha": "9ab347dc8e0aad4c16659b749f5e1ac799a6b9f4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 36,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
        "patch": "@@ -2134,8 +2134,7 @@ void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n-    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n-    {\n+    for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n         assert(wtx.GetHash() == wtxid);\n@@ -2150,12 +2149,12 @@ void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n     // Try to add wallet transactions to memory pool\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n-        CValidationState state;\n-        wtx.AcceptToMemoryPool(locked_chain, state);\n+        std::string unused_err_string;\n+        wtx.SubmitMemoryPoolAndRelay(unused_err_string, false, locked_chain);\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n+bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, interfaces::Chain::Lock& locked_chain)\n {\n     // Can't relay if wallet is not broadcasting\n     if (!pwallet->GetBroadcastTransactions()) return false;\n@@ -2165,17 +2164,21 @@ bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n     if (isAbandoned()) return false;\n     // Don't relay conflicted or already confirmed transactions\n     if (GetDepthInMainChain(locked_chain) != 0) return false;\n-    // Don't relay transactions that aren't accepted to the mempool\n-    CValidationState unused_state;\n-    if (!InMempool() && !AcceptToMemoryPool(locked_chain, unused_state)) return false;\n-    // Don't try to relay if the node is not connected to the p2p network\n-    if (!pwallet->chain().p2pEnabled()) return false;\n-\n-    // Try to relay the transaction\n-    pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-    pwallet->chain().relayTransaction(GetHash());\n \n-    return true;\n+    // Submit transaction to mempool for relay\n+    pwallet->WalletLogPrintf(\"Submitting wtx %s to mempool for relay\\n\", GetHash().ToString());\n+    // We must set fInMempool here - while it will be re-set to true by the\n+    // entered-mempool callback, if we did not there would be a race where a\n+    // user could call sendmoney in a loop and hit spurious out of funds errors\n+    // because we think that this newly generated transaction's change is\n+    // unavailable as we're not yet aware that it is in the mempool.\n+    //\n+    // Irrespective of the failure reason, un-marking fInMempool\n+    // out-of-order is incorrect - it should be unmarked when\n+    // TransactionRemovedFromMempool fires.\n+    bool ret = pwallet->chain().broadcastTransaction(tx, err_string, pwallet->m_default_max_tx_fee, relay);\n+    fInMempool |= ret;\n+    return ret;\n }\n \n std::set<uint256> CWalletTx::GetConflicts() const\n@@ -2366,7 +2369,7 @@ void CWallet::ResendWalletTransactions()\n     if (m_best_block_time < nLastResend) return;\n     nLastResend = GetTime();\n \n-    int relayed_tx_count = 0;\n+    int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n@@ -2378,12 +2381,13 @@ void CWallet::ResendWalletTransactions()\n             // only rebroadcast unconfirmed txes older than 5 minutes before the\n             // last block was found\n             if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n-            if (wtx.RelayWalletTransaction(*locked_chain)) ++relayed_tx_count;\n+            std::string unused_err_string;\n+            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true, *locked_chain)) ++submitted_tx_count;\n         }\n     } // locked_chain and cs_wallet\n \n-    if (relayed_tx_count > 0) {\n-        WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed_tx_count);\n+    if (submitted_tx_count > 0) {\n+        WalletLogPrintf(\"%s: resubmit %u unconfirmed transactions\\n\", __func__, submitted_tx_count);\n     }\n }\n \n@@ -3322,12 +3326,10 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n \n         if (fBroadcastTransactions)\n         {\n-            // Broadcast\n-            if (!wtx.AcceptToMemoryPool(*locked_chain, state)) {\n-                WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n+            std::string err_string;\n+            if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n+                WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n-            } else {\n-                wtx.RelayWalletTransaction(*locked_chain);\n             }\n         }\n     }\n@@ -4662,18 +4664,6 @@ bool CWalletTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n     return GetBlocksToMaturity(locked_chain) > 0;\n }\n \n-bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state)\n-{\n-    // We must set fInMempool here - while it will be re-set to true by the\n-    // entered-mempool callback, if we did not there would be a race where a\n-    // user could call sendmoney in a loop and hit spurious out of funds errors\n-    // because we think that this newly generated transaction's change is\n-    // unavailable as we're not yet aware that it is in the mempool.\n-    bool ret = locked_chain.submitToMemoryPool(tx, pwallet->m_default_max_tx_fee, state);\n-    fInMempool |= ret;\n-    return ret;\n-}\n-\n void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n {\n     if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {"
      },
      {
        "sha": "167096d472f58c3dcc5736505e9754a2589ad16e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
        "patch": "@@ -579,11 +579,8 @@ class CWalletTx\n \n     int64_t GetTxTime() const;\n \n-    // Pass this transaction to the node to relay to its peers\n-    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain);\n-\n-    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state);\n+    // Pass this transaction to node for mempool insertion and relay to peers if flag set to true\n+    bool SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, interfaces::Chain::Lock& locked_chain);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation"
      }
    ]
  },
  {
    "sha": "8753f5652b4710e66b50ce87788bf6f33619b75a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzUzZjU2NTJiNDcxMGU2NmI1MGNlODc3ODhiZjZmMzM2MTliNzVh",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-11T16:01:58Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-08-01T17:43:29Z"
      },
      "message": "Remove duplicate checks in SubmitMemoryPoolAndRelay\n\nIsCoinBase check is already performed early by\nAcceptToMemoryPoolWorker\nGetDepthInMainChain check is already perfomed by\nBroadcastTransaction\n\nTo avoid deadlock we MUST keep lock order in\nResendWalletTransactions and CommitTransaction,\neven if we lock cs_main again further.\nin BroadcastTransaction. Lock order will need\nto be clean at once in a future refactoring",
      "tree": {
        "sha": "b77ff172b501051256b3e29cdc30155b9bcf005c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b77ff172b501051256b3e29cdc30155b9bcf005c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8753f5652b4710e66b50ce87788bf6f33619b75a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8753f5652b4710e66b50ce87788bf6f33619b75a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8753f5652b4710e66b50ce87788bf6f33619b75a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8753f5652b4710e66b50ce87788bf6f33619b75a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/611291c198eb2be9bf1aea1bf9b2187b18bdb3aa"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b3269083ec01286dd7e9877f5e1f4bda30896cac",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8753f5652b4710e66b50ce87788bf6f33619b75a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8753f5652b4710e66b50ce87788bf6f33619b75a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8753f5652b4710e66b50ce87788bf6f33619b75a",
        "patch": "@@ -2150,20 +2150,16 @@ void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         std::string unused_err_string;\n-        wtx.SubmitMemoryPoolAndRelay(unused_err_string, false, locked_chain);\n+        wtx.SubmitMemoryPoolAndRelay(unused_err_string, false);\n     }\n }\n \n-bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, interfaces::Chain::Lock& locked_chain)\n+bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay)\n {\n     // Can't relay if wallet is not broadcasting\n     if (!pwallet->GetBroadcastTransactions()) return false;\n-    // Don't relay coinbase transactions outside blocks\n-    if (IsCoinBase()) return false;\n     // Don't relay abandoned transactions\n     if (isAbandoned()) return false;\n-    // Don't relay conflicted or already confirmed transactions\n-    if (GetDepthInMainChain(locked_chain) != 0) return false;\n \n     // Submit transaction to mempool for relay\n     pwallet->WalletLogPrintf(\"Submitting wtx %s to mempool for relay\\n\", GetHash().ToString());\n@@ -2382,7 +2378,7 @@ void CWallet::ResendWalletTransactions()\n             // last block was found\n             if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true, *locked_chain)) ++submitted_tx_count;\n+            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;\n         }\n     } // locked_chain and cs_wallet\n \n@@ -3327,7 +3323,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         if (fBroadcastTransactions)\n         {\n             std::string err_string;\n-            if (!wtx.SubmitMemoryPoolAndRelay(err_string, true, *locked_chain)) {\n+            if (!wtx.SubmitMemoryPoolAndRelay(err_string, true)) {\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", err_string);\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             }"
      },
      {
        "sha": "d06d5179371e7df31e39aacf23daf5f5cdd15fce",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8753f5652b4710e66b50ce87788bf6f33619b75a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8753f5652b4710e66b50ce87788bf6f33619b75a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8753f5652b4710e66b50ce87788bf6f33619b75a",
        "patch": "@@ -580,7 +580,7 @@ class CWalletTx\n     int64_t GetTxTime() const;\n \n     // Pass this transaction to node for mempool insertion and relay to peers if flag set to true\n-    bool SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, interfaces::Chain::Lock& locked_chain);\n+    bool SubmitMemoryPoolAndRelay(std::string& err_string, bool relay);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation"
      }
    ]
  },
  {
    "sha": "b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGVlY2Y4ZTc5ZGFkOTJmZjA3Yjg1MWIxYjI5YzJhNjY1NDZiYmMx",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-04-11T16:04:37Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-08-01T17:43:29Z"
      },
      "message": "Remove unused submitToMemoryPool and relayTransactions Chain interfaces",
      "tree": {
        "sha": "4f1b59b00db9d865dc40807a3893536ffe2edbae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f1b59b00db9d865dc40807a3893536ffe2edbae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8753f5652b4710e66b50ce87788bf6f33619b75a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8753f5652b4710e66b50ce87788bf6f33619b75a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8753f5652b4710e66b50ce87788bf6f33619b75a"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 0,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1ad4308f29cfc8652ce084c36831c5e8cf07834e",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
        "patch": "@@ -151,12 +151,6 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n         LockAssertion lock(::cs_main);\n         return CheckFinalTx(tx);\n     }\n-    bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n-            false /* bypass limits */, absurd_fee);\n-    }\n \n     using UniqueLock::UniqueLock;\n };\n@@ -292,10 +286,6 @@ class ChainImpl : public Chain\n         auto it = ::mempool.GetIter(txid);\n         return it && (*it)->GetCountWithDescendants() > 1;\n     }\n-    void relayTransaction(const uint256& txid) override\n-    {\n-        RelayTransaction(txid, *g_connman);\n-    }\n     bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n     {\n         const TransactionError err = BroadcastTransaction(tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);"
      },
      {
        "sha": "1d6ed05522ae625e24c452e67b60eee82954c61c",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
        "patch": "@@ -43,10 +43,6 @@ class Wallet;\n //!   asynchronously\n //!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n //!\n-//! * The relayTransactions() and submitToMemoryPool() methods could be replaced\n-//!   with a higher-level broadcastTransaction method\n-//!   (https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984).\n-//!\n //! * The initMessages() and loadWallet() methods which the wallet uses to send\n //!   notifications to the GUI should go away when GUI and wallet can directly\n //!   communicate with each other without going through the node\n@@ -127,11 +123,6 @@ class Chain\n \n         //! Check if transaction will be final given chain height current time.\n         virtual bool checkFinalTx(const CTransaction& tx) = 0;\n-\n-        //! Add transaction to memory pool if the transaction fee is below the\n-        //! amount specified by absurd_fee. Returns false if the transaction\n-        //! could not be added due to the fee or for another reason.\n-        virtual bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and\n@@ -164,9 +155,6 @@ class Chain\n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n \n-    //! Relay transaction.\n-    virtual void relayTransaction(const uint256& txid) = 0;\n-\n     //! Transaction is added to memory pool, if the transaction fee is below the\n     //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.\n     //! Return false if the transaction could not be added due to the fee or for another reason."
      }
    ]
  },
  {
    "sha": "fb62f128bbfd8c6cd72ea8e23331a4bae23883ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjYyZjEyOGJiZmQ4YzZjZDcyZWE4ZTIzMzMxYTRiYWUyMzg4M2Fi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-23T15:49:53Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-08-01T17:43:29Z"
      },
      "message": "Tidy up BroadcastTransaction()",
      "tree": {
        "sha": "55008efc4536f40f59177f33e5faa6d886a40a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55008efc4536f40f59177f33e5faa6d886a40a27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eecf8e79dad92ff07b851b1b29c2a66546bbc1"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 30,
      "deletions": 16
    },
    "files": [
      {
        "sha": "8e564963585f16a3d031e3d2ca652e39efc8d355",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 14,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=fb62f128bbfd8c6cd72ea8e23331a4bae23883ab",
        "patch": "@@ -23,15 +23,17 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err\n \n     { // cs_main scope\n     LOCK(cs_main);\n+    // If the transaction is already confirmed in the chain, don't do anything\n+    // and return early.\n     CCoinsViewCache &view = *pcoinsTip;\n-    bool fHaveChain = false;\n-    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n+    for (size_t o = 0; o < tx->vout.size(); o++) {\n         const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n-        fHaveChain = !existingCoin.IsSpent();\n+        // IsSpent doesnt mean the coin is spent, it means the output doesnt' exist.\n+        // So if the output does exist, then this transaction exists in the chain.\n+        if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    bool fHaveMempool = mempool.exists(hashTx);\n-    if (!fHaveMempool && !fHaveChain) {\n-        // push to local node and sync with wallets\n+    if (!mempool.exists(hashTx)) {\n+        // Transaction is not already in the mempool. Submit it.\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n@@ -46,24 +48,31 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_ERROR;\n             }\n-        } else if (wait_callback) {\n-            // If wallet is enabled, ensure that the wallet has been made aware\n-            // of the new transaction prior to returning. This prevents a race\n-            // where a user might call sendrawtransaction with a transaction\n-            // to/from their wallet, immediately call some wallet RPC, and get\n-            // a stale result because callbacks have not yet been processed.\n+        }\n+\n+        // Transaction was accepted to the mempool.\n+\n+        if (wait_callback) {\n+            // For transactions broadcast from outside the wallet, make sure\n+            // that the wallet has been notified of the transaction before\n+            // continuing.\n+            //\n+            // This prevents a race where a user might call sendrawtransaction\n+            // with a transaction to/from their wallet, immediately call some\n+            // wallet RPC, and get a stale result because callbacks have not\n+            // yet been processed.\n             CallFunctionInValidationInterfaceQueue([&promise] {\n                 promise.set_value();\n             });\n             callback_set = true;\n         }\n-    } else if (fHaveChain) {\n-        return TransactionError::ALREADY_IN_CHAIN;\n     }\n \n     } // cs_main\n \n     if (callback_set) {\n+        // Wait until Validation Interface clients have been notified of the\n+        // transaction entering the mempool.\n         promise.get_future().wait();\n     }\n "
      },
      {
        "sha": "cf64fc28d913974fa3d07544f2507463add4268c",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb62f128bbfd8c6cd72ea8e23331a4bae23883ab/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=fb62f128bbfd8c6cd72ea8e23331a4bae23883ab",
        "patch": "@@ -11,14 +11,19 @@\n #include <util/error.h>\n \n /**\n- * Broadcast a transaction\n+ * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.\n+ *\n+ * Mempool submission can be synchronous (will await mempool entry notification\n+ * over the CValidationInterface) or asynchronous (will submit and not wait for\n+ * notification), depending on the value of wait_callback. wait_callback MUST\n+ * NOT be set while cs_main, cs_mempool or cs_wallet are held to avoid\n+ * deadlock.\n  *\n  * @param[in]  tx the transaction to broadcast\n  * @param[out] &err_string reference to std::string to fill with error string if available\n  * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n  * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n  * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n- * It MUST NOT be set while cs_main, cs_mempool or cs_wallet are held to avoid deadlock\n  * return error\n  */\n NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);"
      }
    ]
  }
]