DrahtBot,2019-04-01T02:38:14Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16528](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16528.html) ([WIP] Native Descriptor Wallets (take 2) by",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-478415987,478415987,
jnewbery,2019-04-03T20:32:36Z,"Thanks for looking at this @ariard. My view is different from @ryanofsky's. I think rather than trying to maintain existing behaviour, we should use this interface tidyup to better define the relationship between the wallet and the node, ie to answer the question ""What services should the node offer to the wallet?"" Currently, the node exposes two methods to the wallet for sending a transaction:\n",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-479647663,479647663,
ryanofsky,2019-04-03T20:45:49Z,"John are you just saying that this PR does not go far enough, or that it does something bad or makes things more complicated?\n\nI haven't looked closely enough at this yet but if it exposes one node method node instead of two, and reduces the amount of code without changing behavior, it would seem like a strict improvement. Is your rebroadcast proposal harder to implement after this PR?",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-479652022,479652022,
jnewbery,2019-04-03T21:24:23Z,"> I haven't looked closely enough at this yet but if it exposes one node method node instead of two, and reduces the amount of code without changing behavior, it would seem like a strict improvement.\n\nIt does reduce the number of node methods exposed, but does so by adding a flag to one of them which toggles the behaviour. I'm not sure if that counts as a simplification, or it's just moving th",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-479664520,479664520,
ariard,2019-04-03T23:55:15Z,"I kinda agree with @jnewbery here, wallet shouldn't have access to relay, because if so it may add complexity of proper tx rebroadcasting tracking, notably in privacy-enhancing context in referenced discussions ?\nHave taken GetDepthInMainChain and IsCoinbase out, because seems it's cleaner to let the mempool do the checks, in AcceptToMemoryPoolWorker if I understand it well. And not multiply spu",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-479699376,479699376,
ryanofsky,2019-04-09T14:48:05Z,"Ariard or John, what are next steps? Should this PR be closed and revisited in the future if rebroadcasting is improved? Should the current code comment about this be removed or clarified?\n\nhttps://github.com/bitcoin/bitcoin/blob/f3ecf3025f82f84d42ec463990ff787647cc7bf5/src/interfaces/chain.h#L52-L54",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-481283974,481283974,
jnewbery,2019-04-09T15:06:08Z,"I don't want to discourage @ariard from making this change if you both think it's an improvement over the existing code. It certainly doesn't preclude us from makeing the changes that I proposed in https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-479647663 at a later time. @ariard - if you think this should still go in, can you perhaps break up the PR into commits and justify any changes",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-481291686,481291686,
ariard,2019-04-09T22:30:46Z,"Okay will keep working on it by breaking up the PR and justify changes. Had a look on #15728, IMO conflicts should be solved smoothly once yours get into it.\n@jnewbery  I've taken notes of your proposed changes of preventing wallet access to relay functionality but as far as I understand it would need first implementation of relay responsibility  in mempool, something not submit yet ? Once that ",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-481464427,481464427,
ariard,2019-04-11T16:22:50Z,"Rebased, splitted the commits, added justifications. Note that I removed relay flag in BroadcastTransaction, if I get John opinion submitting tx to memory pool should imply relay if it's a valid one.",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-482185015,482185015,
ariard,2019-04-13T15:32:23Z,Thanks @jnewbery for the review and sorry for the ugly commit split. I think I've addressed all your points except this one : https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274955618 ?,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-482822062,482822062,
jnewbery,2019-04-15T14:17:04Z,Still a couple of minor issues to fix up.,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-483270158,483270158,
ariard,2019-04-17T13:11:16Z,"a00303c updated with @jnewbery last review comments, specially removing unused uint256 from BroadcastTransaction interface\n\nAnd ""Initial build successful, but not enough time remains to run later build stages and tests. Please manually re-run this job by using the travis restart button or asking a bitcoin maintainer to restart. The next run should not time out because the build cache has been ",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-484077995,484077995,
ryanofsky,2019-04-17T16:48:45Z,"Looks like this might also help a little bit with #14912, since right now it's adding another broadcastTransaction method (a7678372bd8b4ef4ce33a406559a0ea860ce1abf).",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-484171393,484171393,
jnewbery,2019-04-17T17:10:01Z,"Looks good. utACK e5b0fe904a9c6186b8273c61e93ee1538418b245\n\n(I was only suggesting to remove the uint256 from the interface `broadcastTransaction()` method, not the `BroadcastTransaction()` function in node/transaction, but removing it there is also fine I think.)",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-484179422,484179422,
ariard,2019-05-02T15:58:07Z,@Sjors you mean erasing errors which seems to be used by no one right now (like TransactionError::MEMPOOL_ERROR) and just return a generic error for these cases ? Or returning errors from `broadcastTransactions` instead of a boolean and let caller to filter ?,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-488730104,488730104,
Sjors,2019-05-12T13:11:26Z,"@ariard I think it should return a `TransactionError`. You can filter it before returning, based on what you don't want callers to see. But not based on what's ""used by no one right now"".",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-491594719,491594719,
jnewbery,2019-05-16T15:35:22Z,"> You can filter it before returning, based on what you don't want callers to see. But not based on what's ""used by no one right now"".\n\nI think it's fine to have the `broadcastTransaction` interface return what's most useful to our wallet right now. This interface is meant to be private, so having it customized to our needs is ok, and if future changes to the wallet require the interface metho",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-493118627,493118627,
ariard,2019-05-17T04:03:52Z,"Okay, well let it as of `0a1f4d9` with `broadcastTransaction` returning a boolean. But I checked failures, and seems like #15696 is causing functional test failures even locally..",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-493311594,493311594,
Sjors,2019-05-17T14:46:53Z,Boolean is fine for my purposes as well.,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-493480749,493480749,
ariard,2019-05-18T01:29:03Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-493638023,493638023,
jnewbery,2019-07-23T23:01:56Z,utACK 67c7db7a22e18cee5364652b9a1ab102c9fb1858,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-514414547,514414547,
amitiuttarwar,2019-07-24T19:08:27Z,"utACK 67c7db7a22e18cee5364652b9a1ab102c9fb1858. Carefully read the code, built & ran all tests.",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-514761226,514761226,
ariard,2019-07-24T20:21:57Z,New tip at c1351e2 with @jnewbery BroadcastTransaction cleaning commit,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-514785253,514785253,
jnewbery,2019-07-24T20:27:15Z,"ACK c1351e28fd2e38a928b322456038198aa0e847bd\n\n(but I don't think it's necessary to take that commit and invalidate @amitiuttarwar and @jonatack reviews)",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-514787009,514787009,
jonatack,2019-07-25T15:10:05Z,"ACK 976d1e4858df00c031ef2c07790862948dbc04cf, all tests pass, local git range-diff shows no change in previously-ACKed commits.\n\nNew commit makes doc-only changes in `src/node/transaction.h` and cleans up the BroadcastTransaction logic in `src/node/transaction.cpp` + improves code documentation.\n\nI found https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307917040 helpful in reviewi",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-515083797,515083797,
jnewbery,2019-07-25T15:32:30Z,ACK 976d1e485,https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-515092624,515092624,
mzumsande,2019-07-26T20:31:29Z,"I'm not sure if `broadcastTransaction` should suppress `TransactionError::P2P_DISABLED`. \nFrom the old discussion with @jnewbery above I gather that this is the case because the old `relayTransaction()` didn't have a return code, and so that we can update `fInMempool` conveniently.\n\nHowever, the old `CWalletTx::RelayWalletTransaction()`  had an explicite check for P2P (`if (!pwallet->chain()",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-515589990,515589990,
ariard,2019-07-26T23:41:14Z,"Thanks for review @mzumsande, I agree that's a light change in behavior even it was only logs. IMO `p2pEnabled` is just there when wallet is init before `g_connman`, and a quick look at `init.cpp` I'm not even sure that's something possible. In future works, I'm thinking to remove `p2pEnabled` once we have the wallet registering its current height with Chain interface at `handleNotifications`. Wal",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-515629909,515629909,
MarcoFalke,2019-07-31T13:10:52Z,"See a patch (on top of master and this pull) for what I was thinking:\n\n[0001-Check-utxo-db-early-only-when-requested-in-Broadcast.patch.txt](https://github.com/bitcoin/bitcoin/files/3451955/0001-Check-utxo-db-early-only-when-requested-in-Broadcast.patch.txt)\n",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-516842095,516842095,
ariard,2019-07-31T14:50:09Z,"Okay pushed with your patch amended to invert comment on 4441ba6c. \n\nMore I looking at `BroadcastTransaction`, more I think it needs a PR of its own, maybe I can take your commit here and try to simplify more things?",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-516883030,516883030,
jnewbery,2019-07-31T14:53:41Z,"I don't like Marco's suggested change. It's leaking implementation detail to the caller and complicating the function interface. I also don't understand the problem it's supposed to be solving - is it just a performance optimization so that we don't do the UTXO check for wallet-submitted transactions?\n\nThis PR had a bunch of ACKs without that change. Does it need to be included before this PR ",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-516884570,516884570,
MarcoFalke,2019-07-31T14:57:33Z,"> This PR had a bunch of ACKs without that change. Does it need to be included before this PR can be merged?\n\nNo, but I'd like to hear other's opinion on it.\n\nAlso, you have just requested the conflicting pull to be merged, so this needs re-ACK anyway:\n\n* https://github.com/bitcoin/bitcoin/pull/16452#issuecomment-516871453",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-516886341,516886341,
ariard,2019-07-31T16:55:34Z,"Rebased at  5922315 with https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308697103, https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308796603, https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308798753, https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307831700, https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307813745 addressed. Shouldn't have funct",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-516932537,516932537,
jnewbery,2019-08-01T16:07:35Z,"You seem to have lost the `if (relay)` conditional in `BroadcastTransaction()`. I think that's a rebase error.\n\nYou've also lost the `g_connman` error checking block:\n\n```\n        if (!g_connman) {\n            return TransactionError::P2P_DISABLED;\n        }\n```\n\nAlternatively, you could assert that `g_connman` is non-null at the top of this function. It's only called by RPCs a",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-517353407,517353407,
ariard,2019-08-01T17:47:39Z,"Oooops, thanks to pointing me the error, remove the check to be replaced by an assertion as it's less checks in BroadcastTransaction at fb62f12.\n\nNote : currently P2P_DISABLED error is still there even if it's not used. It can be clean in a later commit if we agree that disabling P2P is not a thing.",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-517390401,517390401,
MarcoFalke,2019-08-01T17:53:22Z,"re-ACK fb62f128bbfd8c6cd72ea8e23331a4bae23883ab\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK fb62f128bbfd8c6cd72ea8e23331a4bae23883ab\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgBCAv/bnyyRCCqUH8PSxg2lces1K5Z5M/Nb+eT5O2JQhQb1EfY+Nck",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-517392513,517392513,
MarcoFalke,2019-08-02T13:12:50Z,"This (seemingly simple) change has already 132 comments. I am going to merge it now, because I believe it is a step in the right direction. We can fix up typos and other stuff later, if needed.\n\n",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-517695513,517695513,
jnewbery,2019-08-06T17:09:53Z,"I was wrong about this: https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309244186. Apparently removing that check causes log spam, particularly for test nodes.",https://github.com/bitcoin/bitcoin/pull/15713#issuecomment-518760150,518760150,
ryanofsky,2019-04-02T22:47:36Z,"Thanks for consolidating the code from `relayTransaction` and `submitToMemoryPool` in `interfaces/chain.cpp` and from `BroadcastTransaction` in `node/transaction.cpp`.\n\nI do think the right place for all this code to live is in `node/transaction.cpp`, though. `interfaces/chain.cpp` is really just meant to be a simple glue file with lines like:\n\n```c++\nbool broadcastTransaction(...) overr",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271524444,271524444,src/interfaces/chain.cpp
ariard,2019-04-03T03:04:24Z,"Okay was thinking than ```node/transaction.cpp``` was temporary and long term goal was to aggregate it to ```interfaces/node.cpp```.\nDidn't want to change wallet behavior, fixed it by adding options in the existing BroadcastTransaction (but still not sure of ReacceptWalletTransactions, should we broadcast txn there ?), functional tests should be good now. Also rebased",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271564894,271564894,src/interfaces/chain.cpp
ryanofsky,2019-04-03T03:43:00Z,"re: https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271524444\n\nThanks! This looks good and now net removes code (+63/-83).\n\n> Okay was thinking than node/transaction.cpp was temporary\n\nYeah, that may have been the original thought. But I think it could be a reasonable long term location if more things are moved around it. In any case it's where the BroadcastTransaction functi",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271569776,271569776,src/interfaces/chain.cpp
ryanofsky,2019-04-03T03:44:48Z,Can drop this whole comment since assumeLocked call is removed.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271570034,271570034,src/interfaces/chain.cpp
ryanofsky,2019-04-03T03:55:13Z,Should be no need to lock again because locked_chain is passed as an argument above. Guessing this is a rebase issue after 0440481c6bf5683eff669c789bdf6a306d99adc5 (#15652),https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271571388,271571388,src/wallet/wallet.cpp
ariard,2019-04-03T23:22:35Z,Done,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271969421,271969421,src/interfaces/chain.cpp
ariard,2019-04-04T00:24:54Z,"Yes on my own, should be corrected!",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r271980722,271980722,src/wallet/wallet.cpp
jnewbery,2019-04-11T17:08:47Z,This interface function doesn't need to expose the `wait_callback` bool since it's only ever called with `wait_callback` set to `false`.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274531705,274531705,src/interfaces/chain.cpp
jnewbery,2019-04-11T17:09:23Z,nit: `return TransactionError::OK == err;`,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274532313,274532313,src/interfaces/chain.cpp
ariard,2019-04-11T17:28:15Z,"I still have a doubt on BroadcastTransaction HaveChain check behavior. ```HaveChain = !existingCoin.IsSpent()``` doesn't mean if tx is in chain, but all of its outputs has been spent, we accept it again to mempool/relay ?",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274543462,274543462,src/wallet/wallet.cpp
jnewbery,2019-04-11T17:32:52Z,"I think you can make this slightly clearer by adding a local variable `callback_set{false}`, setting it to `true` in the first `else if (wait_callback)` block, removing the second `else if (wait_callback)` block, and then testing for it here.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274545185,274545185,src/node/transaction.cpp
jnewbery,2019-04-11T17:34:37Z,"nit: I'd prefer to standardise on the name `max_tx_fee` (rather than `max_tx_fee`, `highfee`, `absurdfee`, etc)",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274545864,274545864,src/interfaces/chain.h
ariard,2019-04-12T13:52:40Z,"Ah yes, thanks done",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274915099,274915099,src/interfaces/chain.cpp
ariard,2019-04-12T13:52:49Z,Yes,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274915158,274915158,src/interfaces/chain.cpp
ariard,2019-04-12T13:53:25Z,"Okay, also add params comments on it in.h",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274915414,274915414,src/node/transaction.cpp
jnewbery,2019-04-12T15:09:53Z,no tabs please :),https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274949378,274949378,src/interfaces/chain.cpp
jnewbery,2019-04-12T15:10:42Z,s/broadcast to all nodes/broadcast to all peers if relay is set to true/,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274949818,274949818,src/interfaces/chain.h
jnewbery,2019-04-12T15:12:01Z,tab,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274950390,274950390,src/node/transaction.cpp
jnewbery,2019-04-12T15:12:34Z,you can remove the `else` block in LL60-64,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274950634,274950634,src/node/transaction.cpp
jnewbery,2019-04-12T15:13:09Z,nit: two spaces,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274950864,274950864,src/node/transaction.h
jnewbery,2019-04-12T15:14:01Z,nit: don't include unnecessary whitespace changes,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274951244,274951244,src/rpc/rawtransaction.cpp
jnewbery,2019-04-12T15:15:32Z,You've added the `relay` bool but you're not using it.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274951887,274951887,src/node/transaction.cpp
jnewbery,2019-04-12T15:17:05Z,"This comment is incorrect. The function will just return immediately if `fBroadcastTransactions` is set to false.\n\n(I think this is from a bad rebase. The comment was changed to `Pass this transaction to the node to relay to its peers` in a more recent version.)",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274952597,274952597,src/wallet/wallet.h
jnewbery,2019-04-12T15:18:17Z,This is a behaviour change. You're relaying the transaction instead of just adding it to the mempool.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274953029,274953029,src/wallet/wallet.cpp
jnewbery,2019-04-12T15:24:40Z,Review note: This is a minor behaviour change. `chain().broadcastTransaction()` could return false if `BroadcastTransaction()` returned `TransactionError::P2P_DISABLED` (ie the transaction is added to the mempool but not relayed).,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274955618,274955618,src/wallet/wallet.cpp
jnewbery,2019-04-12T15:27:08Z,Consider naming thuis `unused_err_string` to indicate that we throw it away without using it.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274956702,274956702,src/wallet/wallet.cpp
jnewbery,2019-04-12T15:27:15Z,Consider naming thuis `unused_err_string` to indicate that we throw it away without using it.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274956745,274956745,src/wallet/wallet.cpp
jnewbery,2019-04-12T17:01:25Z,"This is also a behaviour change because previously, `AcceptToMemoryPool()` would return `false` if `submitToMemoryPool()` returned `false`. Now, if `fInMempool` is set to `true` but `broadcastTransaction()` returns `false`, then it'll return `true`.\n\nI think it makes sense to stick with the structure of the old `AcceptToMemoryPool()` function.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274989316,274989316,src/wallet/wallet.cpp
jnewbery,2019-04-12T17:08:51Z,"Thanks for adding comments. I'd add to the description of the `wait_callback` param that this **must not** be set while cs_main, cs_mempool or cs_wallet is being held or there'll be a deadlock.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r274991614,274991614,src/node/transaction.h
ariard,2019-04-13T15:26:08Z,"Thanks, configured my editor accordingly!",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275122038,275122038,src/interfaces/chain.cpp
ariard,2019-04-13T15:28:45Z,Corrected but was to align with other descriptions?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275122126,275122126,src/node/transaction.h
ariard,2019-04-13T15:30:01Z,What's your take on returning a pair of boolean from chain().broadcastTransaction() to encode both mempool/relay results ?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275122154,275122154,src/wallet/wallet.cpp
ariard,2019-04-13T15:30:33Z,Okay back to AcceptToMemoryPool structure,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275122174,275122174,src/wallet/wallet.cpp
practicalswift,2019-04-15T14:00:17Z,"Nit: Should be ""transaction"" :-)",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275374247,275374247,src/interfaces/chain.h
jnewbery,2019-04-15T14:09:18Z,"sorry, I meant the two spaces between `relay` and `are`. I think two spaces at the front to align with the other params is fine.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275378505,275378505,src/node/transaction.h
jnewbery,2019-04-15T14:15:42Z,"In the existing code there's not a return code for `chain::relayTransaction()`. I think it's fine for the new `broadcastTransaction` interface method to only return `false` if the transaction failed to get into the mempool, and treat `TransactionError::P2P_DISABLED` as success. That way, `fInMempool` will get updated in exactly the same way as the existing code.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275381581,275381581,src/wallet/wallet.cpp
jnewbery,2019-04-15T14:16:23Z,"You now have `locked_chain` as a parameter, even though it's unused in this function in the final commit.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275381858,275381858,src/wallet/wallet.cpp
ariard,2019-04-16T13:30:34Z,"Good, added ```TransactionError::P2P_DISABLED == err``` check in broadcastTransaction interface",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275797359,275797359,src/wallet/wallet.cpp
ariard,2019-04-16T13:30:49Z,"Thanks, good catch!",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275797481,275797481,src/interfaces/chain.h
ariard,2019-04-16T13:31:14Z,"Yes rebase issue, should be solved",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275797688,275797688,src/wallet/wallet.cpp
jnewbery,2019-04-16T15:40:51Z,nit: sort includes,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275864733,275864733,src/interfaces/chain.cpp
jnewbery,2019-04-16T15:42:52Z,"nit: could include an inline comment for the last parameter:\n\n```c++\nconst TransactionError err = BroadcastTransaction(tx, txid, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n```",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275865799,275865799,src/interfaces/chain.cpp
jnewbery,2019-04-16T15:45:02Z,Should this also be within the `if (relay)` block? Returning a `TransactionError::P2P_DISABLED` error when the caller hasn't asked for the transaction to be relayed seems wrong.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275866879,275866879,src/node/transaction.cpp
jnewbery,2019-04-16T15:51:40Z,See comment in interface/chain.h. I recommend you remove the unused uint256 from the interface method.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275870210,275870210,src/wallet/wallet.cpp
jnewbery,2019-04-16T15:53:37Z,You could remove the `hashTx` parameter from this interface method. The only caller of the method supplies an unused uint256 and then throws it away.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275871197,275871197,src/node/transaction.cpp
jnewbery,2019-04-16T15:56:36Z,"This is exactly right, but I think it could do with a comment. Something like:\n\n```\n// Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures\n// Note: this will need to be updated if BroadcastTransaction() is updated to return other non-mempool failures\n// that Chain clients do not need to know about.\n```",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r275872607,275872607,src/interfaces/chain.cpp
ajtowns,2019-07-23T04:20:06Z,"Might be better to do:\n\n```\nswitch(err) {\n    case TransactionError::OK:\n    case TransactionError::P2P_DISABLED:\n        return true;\n    case TransactionError::MISSING_INPUTS:\n    case TransactionError::ALREADY_IN_CHAIN:\n    case TransactionError::MEMPOOL_REJECTED:\n    case TransactionError::MEMPOOL_ERROR:\n    case TransactionError::INVALID_PSBT:\n    case TransactionError",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r306122680,306122680,src/interfaces/chain.cpp
jnewbery,2019-07-23T15:52:28Z,"I don't think it really matters too much. If new TransactionError values are added that the wallet needs to handle, this interface can be updated.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r306398323,306398323,src/interfaces/chain.cpp
amitiuttarwar,2019-07-23T23:14:37Z,could this use the relay txn method in [net_processing](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L1308)? ,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r306571420,306571420,src/node/transaction.cpp
ariard,2019-07-24T17:35:47Z,"why not, see #16452 because it can go on its own",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r306934366,306934366,src/node/transaction.cpp
promag,2019-07-26T16:15:24Z,"87cca293d5b127e43e35d866167893454658eacd\n\nnit, could add a comment on the last 2 args.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307813745,307813745,src/rpc/rawtransaction.cpp
promag,2019-07-26T16:17:07Z,"87cca293d5b127e43e35d866167893454658eacd\n\njust noting that this must be changed in #16452 to `RelayTransaction`.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307814364,307814364,src/node/transaction.cpp
promag,2019-07-26T16:18:14Z,"87cca293d5b127e43e35d866167893454658eacd\n\nI think a better description/use-case is needed here.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307814764,307814764,src/node/transaction.h
Sjors,2019-07-26T17:03:11Z,"@ariard wrote:\n\n> I still have a doubt on BroadcastTransaction HaveChain check behavior. `HaveChain = !existingCoin.IsSpent()` doesn't mean if tx is in chain, but all of its outputs has been spent, we accept it again to mempool/relay ?\n\n`IsSpent()` is ""misleadingly"" named. Because we use `AccessCoin`: `Return a reference to Coin in the cache, or a pruned one if not found.`. Pruned in this ",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307830440,307830440,src/wallet/wallet.cpp
Sjors,2019-07-26T17:07:09Z,"Nit: add comment explaining `IsSpent()` doesn't mean the coin is spent; it means the output doesn't exist. So if the output does exist, then this transaction exists in the chain, i.e. it's already confirmed.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307831700,307831700,src/node/transaction.cpp
jnewbery,2019-07-26T17:24:52Z,I think that the comments here: https://github.com/bitcoin/bitcoin/pull/15713/files#diff-3f841b5d557d579ef74c43ff582b16ebR16 and here: https://github.com/bitcoin/bitcoin/pull/15713/files#diff-bf669d26afe05f397f3f01bad0c1ff0eR52 are sufficient.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307837903,307837903,src/node/transaction.h
jnewbery,2019-07-26T21:34:21Z,"Thanks @Sjors . I agree with you that `IsSpent()` is a misleading name. A more accurate name would be `DoesNotExist()`. Negating the function here determines whether the coin exists in the current UTXO set.\n\nThe check in `BroadcastTransaction()` is an optimization: if any of the outputs from the tx still exist in the UTXO set then the tx must be confirmed. If the coin has been confirmed but it",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307917040,307917040,src/wallet/wallet.cpp
jnewbery,2019-07-26T21:34:45Z,Agree that a comment here would be helpful in a follow-up commit.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307917133,307917133,src/node/transaction.cpp
ariard,2019-07-26T23:49:46Z,Yes agree better documentation and refactoring of BroadcastTransaction can be pushed further in latter work.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307941112,307941112,src/node/transaction.cpp
jonatack,2019-07-27T10:09:21Z,"> Thanks @Sjors . I agree with you that `IsSpent()` is a misleading name. A more accurate name would be `DoesNotExist()`. Negating the function here determines whether the coin exists in the current UTXO set.\n> \n> The check in `BroadcastTransaction()` is an optimization: if any of the outputs from the tx still exist in the UTXO set then the tx must be confirmed. If the coin has been confirmed ",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r307960658,307960658,src/wallet/wallet.cpp
MarcoFalke,2019-07-30T12:41:51Z,Why not assert this with an `AssertLockNotHeld`?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308697103,308697103,src/node/transaction.h
MarcoFalke,2019-07-30T15:39:40Z,This counts txs even if p2p is disabled? Previously we wouldn't.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308796603,308796603,src/wallet/wallet.cpp
MarcoFalke,2019-07-30T15:43:51Z,"Would be nice to update the comment here. This has been forgotten in 6ef86c92e7fcba866160d7a346fb260d7e4ab5bb\n\nI guess you can just copy the commit body or something.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308798753,308798753,src/wallet/wallet.cpp
MarcoFalke,2019-07-30T15:48:48Z,"Why is this trivial check removed? It avoids a lookup in the utxo database, no?",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308801356,308801356,src/wallet/wallet.cpp
MarcoFalke,2019-07-30T15:56:04Z,Looks like you are replacing a map lookup (`LookupBlockIndex`) with an utxo lookup. So going from memory to disk. Is this going to have a performance penalty?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308805488,308805488,src/wallet/wallet.cpp
ariard,2019-07-30T20:37:31Z,"Yes, we should do that in `sendrawtransaction`, which is out of scope for this PR (but glad to address it in another PR if you think that's relevant)",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308930876,308930876,src/node/transaction.h
ariard,2019-07-30T20:48:56Z,I guess we should recall it `submitted_count`  ? Wallet is just submitting to mempool and that's mempool job to pass it to P2P. We don't dissociate errors here anyways,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308935636,308935636,src/wallet/wallet.cpp
ariard,2019-07-30T20:57:11Z,You mean compare to the one at beginning of ATMP ?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308939116,308939116,src/wallet/wallet.cpp
ariard,2019-07-30T21:01:20Z,"Noted if I have to rebase, or if I can throw it in one of my other PR touching this code",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308940852,308940852,src/wallet/wallet.cpp
MarcoFalke,2019-07-30T21:10:36Z,"`BroadcastTransaction` does a convenience check that is only used in the sendrawtransaction (to notify a user of a transaction that is already confirmed). This is done by looking up if at least one of the outputs is in the utxo set. For the purpose of the wallet, this check is completely useless. Previously we wouldn't call it and now we do (even for coinbase txs), where it can be trivially avoide",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308944420,308944420,src/wallet/wallet.cpp
ariard,2019-07-30T21:11:57Z,You mean relying on `AccessCoin` in `BroadcastTransaction`. Isn't `CCoinsViewCache` a in-memory cache? Is the wallet broadcasting that much transactions so it can be a performance penalty ? `GetDepthInMainChain` is also currently locking the chain via `getBlockHeight`,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308944940,308944940,src/wallet/wallet.cpp
MarcoFalke,2019-07-30T21:12:03Z,"I don't care. It is only a log print, so can be done later. Though, I wanted to point out the change in behavior, since you tagged this with ""refactor"".",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308944970,308944970,src/wallet/wallet.cpp
ariard,2019-07-30T22:47:44Z,"Yes sorry for that, I modified the PR a bit since opening, so it's no more a refactor I guess..",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308975881,308975881,src/wallet/wallet.cpp
ariard,2019-07-30T22:54:11Z,"Ah yes, should the wallet try to check as much as confirmation rules it can, like the coinbase one ? It's a layer violation, but that's trivial as you said. ",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r308977611,308977611,src/wallet/wallet.cpp
MarcoFalke,2019-07-31T01:06:39Z,Why is it a layer violation of the wallet to call a [pure method](https://en.wikipedia.org/wiki/Pure_function) on one of it's txs?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309003567,309003567,src/wallet/wallet.cpp
ariard,2019-07-31T01:36:18Z,"Really IMO, it's a layer violation because the wallet is doing the job of the node to check consensus rules instead of relying on what the node says.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309008274,309008274,src/wallet/wallet.cpp
ariard,2019-07-31T01:37:53Z,Do you want I update to get back the check ? Wallet are not going to broadcast thousands of coinbase transactions to this be real performance issue.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309008529,309008529,src/wallet/wallet.cpp
jnewbery,2019-07-31T14:14:41Z,"I agree with Marco that this isn't a layer violation. `IsCoinBase()` is a pure utility function and can be called anywhere.\n\nBut I also agree with ariard that this isn't a big deal. Calling `IsCoinBase()` here is an optimization that affects a tiny number of transactions for a tiny number of users.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309244186,309244186,src/wallet/wallet.cpp
MarcoFalke,2019-07-31T14:43:27Z,"Sorry, I think I got this wrong in my patch\n\n```suggestion\n        const TransactionError err = BroadcastTransaction(tx, err_string, max_tx_fee, relay, /*check_chain*/ false, /*wait_callback*/ false);\n```",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309260746,309260746,src/interfaces/chain.cpp
MarcoFalke,2019-07-31T14:45:24Z,"Ok, lets do this in a follow-up",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309261871,309261871,src/node/transaction.h
MarcoFalke,2019-07-31T14:45:54Z,"Lets do this in a follow-up, if important enough",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309262153,309262153,src/wallet/wallet.cpp
MarcoFalke,2019-07-31T14:46:09Z,Lets do this in a follow up,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309262310,309262310,src/wallet/wallet.cpp
ariard,2019-07-31T15:53:39Z,@MarcoFalke should I include headers for mempool and wallet to `AssertLockNotHeld` these locks too ?,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r309299431,309299431,src/node/transaction.h
Sjors,2019-08-02T10:04:48Z,"`CCoinsViewCache` hits disk if the in memory cache doesn't contain the coin we're looking for. I doubt the performance matters for the wallet, unlike e.g. peer to peer mempool relay.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r310067101,310067101,src/wallet/wallet.cpp
Sjors,2019-08-02T10:19:57Z,"This check was added by @theuni in 53347f0cb99e514815e44a56439a4a10012238f8. Why wasn't this an assert in the first place?\n\nNit: this change could use its own commit.",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r310072067,310072067,src/node/transaction.cpp
Sjors,2019-08-02T10:24:47Z,Nit: misspelled `doesn't` twice.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r310073491,310073491,src/node/transaction.cpp
jnewbery,2019-08-02T13:42:21Z,I think this line can be removed now. The only failures that `BroadcastTransaction()` can return are mempool-related failures.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r310136775,310136775,src/interfaces/chain.cpp
jnewbery,2019-08-02T13:43:25Z,nit: I'd prefer to see a comment next to this assert to explain why `g_connman` must always be assigned here.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r310137209,310137209,src/node/transaction.cpp
MarcoFalke,2019-08-02T13:48:29Z,"Should be part of #16503, maybe",https://github.com/bitcoin/bitcoin/pull/15713#discussion_r310139306,310139306,src/node/transaction.cpp
promag,2019-08-07T00:37:00Z,Reverted in #16557.,https://github.com/bitcoin/bitcoin/pull/15713#discussion_r311328647,311328647,src/wallet/wallet.cpp
