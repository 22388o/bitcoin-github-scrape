jgarzik,2012-04-14T00:14:53Z,"It is unfortunate that AlreadyHave() is called in a loop, implying a lot of lock/release in a row (even if it is likely cached and uncontended).\n\nIf LOCK() is moved outside AlreadyHave() and above its callers' loops, that reduces lock/release to one, but holds the lock for MSG_BLOCK in addition to MSG_TX.\n",https://github.com/bitcoin/bitcoin/pull/1094#issuecomment-5127347,5127347,
laanwj,2012-04-14T05:53:43Z,"How long do the loops run on average/worst-case? Is the runtime of the loops that enclose AlreadyHave dependent on I/O such as network/database?\n\nIt looks like AlreadyHave runs very fast (just some hash lookups), however the enclosing loops contains network calls such as PushMessage. I suppose it is undesirable to hold the lock during those?\n\nIn that case the current solution is best. It is al",https://github.com/bitcoin/bitcoin/pull/1094#issuecomment-5129131,5129131,
sipa,2012-04-17T16:17:54Z,"ACK. If there is a performance problem arises for the processing of ""inv"" messages, we can always move the lock to a pre-processing step that filters the received inv list before further processing.\n",https://github.com/bitcoin/bitcoin/pull/1094#issuecomment-5179288,5179288,
laanwj,2012-04-17T16:19:22Z,"ACK, agreed, safety comes first\n\nEdit: Btw, what's the reason that mapBlockIndex / mapOrphanBlocks don't require a mutex?  Are they only ever accessed from one thread?\n",https://github.com/bitcoin/bitcoin/pull/1094#issuecomment-5179319,5179319,
sipa,2012-04-17T16:23:37Z,"Actually, I'd prefer the txdb.ContainsTx() call to be outside of the lock, as the db lookup could be slow.\n",https://github.com/bitcoin/bitcoin/pull/1094#issuecomment-5179425,5179425,
jgarzik,2012-04-17T16:32:36Z,updated\n,https://github.com/bitcoin/bitcoin/pull/1094#issuecomment-5179643,5179643,
