jgarzik,2015-04-02T18:44:15Z,"concept ACK\nCScheduler ACK\n- Yes, DumpAddresses thread is a prime candidate for this\n- Ditto ThreadFlushWalletDB\n- Disagree on ThreadImport -- ThreadImport is a prime candidate for something to be executed in a long running thread of its own.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89005975,89005975,
sipa,2015-04-02T18:54:56Z,"Agree with @jgarzik; threadimport should not run in the scheduler, as it is expected to take up to hours - blocking several other operations. Wallet flushing is a good candidate.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89008405,89008405,
gavinandresen,2015-04-03T15:55:05Z,"Fixed @sipa's nits, including running scheduler.cpp/.h through clang-format.\n\nAnd reverted the ThreadImport change, so it is it's own thread again.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89336206,89336206,
theuni,2015-04-04T00:52:47Z,"`boost::condition_variable::wait_until` and `boost::cv_status` didn't show up until 1.50. Can they be worked around?\n\nOtherwise, we'll need to enforce >= 1.50 as a build requirement.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89475724,89475724,
sipa,2015-04-04T01:06:47Z,"They're easy to work with using timed_wait, I think.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89476358,89476358,
jgarzik,2015-04-05T05:15:59Z,ut ACK latest rev\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-89718333,89718333,
gavinandresen,2015-04-07T20:08:32Z,"Three changes:\n1. I decided I didn't like the the asymmetry of CScheduler creating the thread, but the caller managing it. So I replaced CScheduler::run() with CScheduler::ServiceQueue, which the caller thread-ifys. And added code and a destructor that asserts if thread management isn't done correctly. That made it easy to wrap the scheduler trhead in util.h's TraceThread, to get debug.log tracin",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90716311,90716311,
sipa,2015-04-07T21:54:34Z,extremely-lightly-tested ACK (as in: does not crash).\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90743665,90743665,
gavinandresen,2015-04-08T15:56:34Z,"Final (?) nits picked (got rid of the obsolete run from the .h, added belt&suspenders checks for empty queue, ran through clang-format again), this should be ready for merge.\n\nI also did some more testing, writing a stress-test that created 4,000 tasks serviced by 100 threads over a couple of milliseconds ( https://github.com/gavinandresen/scheduler/blob/master/main.cpp ), and all is well, inclu",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90958815,90958815,
jgarzik,2015-04-08T16:01:51Z,lightly tested ACK\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-90959928,90959928,
theuni,2015-04-10T00:24:23Z,"@gavinandresen See the top 2 commits here: https://github.com/theuni/bitcoin/tree/5964\n\nWithout the timer fix, using your test program I was flooded with ""Repeat!"" and everything else returned immediately. With the change from https://github.com/theuni/bitcoin/commit/4d0819394249be25c34db28e4c3648a71ab238fa I get:\n\n```\nMicrotask counts: 190 198 199 197 196 197 205 201 217 200 \nSum: 2000\nWai",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-91387465,91387465,
gavinandresen,2015-04-10T12:45:11Z,"@theuni : thanks for testing, I'll pull in those commits and I'll create a unit test with the microtask test -- does it fail without your fixes?\n\nI don't want to create a unit test that takes 20 seconds to run.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-91544068,91544068,
gavinandresen,2015-04-10T14:43:31Z,"Pulled in fixes from @theuni, and added a new unit test. I measured run-time and memory usage before and after the new unit test, no significant difference on my 64-bit OSX machine:\n\nbefore:\n\n```\n/usr/bin/time -l test/test_bitcoin\nRunning 148 test cases...\n\n*** No errors detected\n        6.57 real         4.29 user         0.47 sys\n 197120000  maximum resident set size\n         0  avera",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-91579997,91579997,
sipa,2015-04-11T09:26:14Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-91798785,91798785,
pstratem,2015-04-24T19:57:16Z,There should be a mechanism for the scheduled Function to specify the next time it's called.\n\nThis is necessary for high precision random intervals.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-96046354,96046354,
gavinandresen,2015-04-25T00:24:13Z,Functions can reschedule themselves-- pass a reference to the CScheduler object to the function (via boost::bind and boost::ref). See the CScheduler unit tests for examples.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-96108304,96108304,
sipa,2015-04-27T13:56:21Z,Tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-96662763,96662763,
gavinandresen,2015-05-12T14:10:57Z,Rebased to fix a trivial merge conflict (#include removed from src/bitcoind.cpp). I think this should be merged for 0.11.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-101296253,101296253,
luke-jr,2015-05-13T18:29:51Z,Debian 7:\n\n```\ntest/scheduler_tests.cpp: In member function ‘void scheduler_tests::manythreads::test_method()’:\ntest/scheduler_tests.cpp:68:5: error: ‘sleep_for’ is not a member of ‘boost::this_thread’\ntest/scheduler_tests.cpp:84:5: error: ‘sleep_for’ is not a member of ‘boost::this_thread’\n```\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-101768744,101768744,
gavinandresen,2015-05-13T19:22:31Z,"@luke-jr : fixed. I'd fixed that before, I think it got lost in a rebase / shuffle between working on home/work trees.\n\nThe fix is in the unit test commit, and is:\n\n```\nstatic void MicroSleep(uint64_t n)\n{\n#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n    boost::this_thread::sleep_for(boost::chrono::microseconds(n));\n#elif defined(HAVE_WORKING_BOOST_SLEEP)\n    boost::this_thread::sleep(boost",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-101782417,101782417,
laanwj,2015-05-14T13:33:16Z,ACK apart from the nit\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102037374,102037374,
gavinandresen,2015-05-14T14:58:25Z,"Nits picked, will merge as soon as Travis gives the green light.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102063190,102063190,
gavinandresen,2015-05-14T16:56:52Z,"Travis was unhappy-- one of the builds was taking more than 50 minutes to complete.\n\nI toned down the unit test by a factor of ten, in case that is what was causing the problem (it now services hundreds of tasks using 10 threads, instead of thousands using 100 threads).... if the builds STILL take longer than normal I'll have to recruit @theuni to help debug.\n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102102130,102102130,
laanwj,2015-05-14T17:00:32Z,@gavinandresen It initially failed; so I merged #6136 and tried again. It's expected to take somewhat longer but should at least succeed.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102103060,102103060,
theuni,2015-05-14T17:01:17Z,@gavinandresen I think it's partially bad timing. https://github.com/bitcoin/bitcoin/pull/6136 forced travis to rebuild all dependencies and build up a new cache. Should be back to normal in an hour or so.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102103220,102103220,
luke-jr,2015-05-14T19:30:42Z,Build and unit tests pass on Debian 7: ACK\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102145002,102145002,
theuni,2015-05-15T02:50:19Z,"@gavinandresen I got this earlier on an unrelated PR, looks very related/suspicious: https://travis-ci.org/bitcoin/bitcoin/jobs/62615004#L1344 . \n",https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102233825,102233825,
gavinandresen,2015-05-15T03:22:34Z,Hmmm... Looks like the threads were interrupted before finishing (slow VM maybe). I'll try to rework the test tomorrow so it doesn't interrupt the threads.\n,https://github.com/bitcoin/bitcoin/pull/5964#issuecomment-102241928,102241928,
sipa,2015-04-02T18:40:32Z,Does this work when the timestamp of the first item in the queue is in the past?\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27684977,27684977,src/scheduler.cpp
sipa,2015-04-02T18:41:32Z,Nit: coding style (braces on the same line).\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685089,27685089,src/scheduler.cpp
sipa,2015-04-02T18:42:08Z,"Nit: notify_one should be enough (and slightly more efficient, if we'd ever have multiple runner threads).\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685145,27685145,src/scheduler.cpp
sipa,2015-04-02T18:45:16Z,".wait() may wake spuriously, so it's better to turn the surrounding if into a while loop. I believe that means you also won't have to deal with the queue-empty case in the loop below.\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685407,27685407,src/scheduler.cpp
sipa,2015-04-02T18:50:14Z,"Unsure about this, but leaving the thread running forever may cause destruction order issues if a task is running exactly at shutdown. A destructor that sets an 'exit' bool flag (which the scheduler thread checks), and waits for all scheduler threads to exit may be needed. \n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27685862,27685862,src/scheduler.h
gavinandresen,2015-04-03T15:52:29Z,"Thread lifetime managment is up to the caller. For Bitcoin, the thread is added to the main thread group, and all the threads are interrupted and joined before shutdown (see WaitForShutdown() in bitcoind.cpp or BitcoinCore::shutdown() in qt/bitcoin.cpp).\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27736643,27736643,src/scheduler.h
sipa,2015-04-07T20:26:52Z,"I was wrong earlier. If you want to support multiple runner threads, you need to do this check inside the while loops above, as the item can disappear while they wait.\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27916587,27916587,src/scheduler.cpp
sipa,2015-04-07T20:30:43Z,This doesn't seem to exist anymore.\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27916984,27916984,src/scheduler.h
sipa,2015-04-07T20:32:53Z,Do you want the loop to exit if the user function throws an exception?\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27917184,27917184,src/scheduler.cpp
gavinandresen,2015-04-07T20:35:22Z,"Mmm. I convinced myself an empty check isn't necessary there, but belt&suspenders says I should just put it back.\n\n(not needed because: if the queue is emptied during timeout, then the wait loop is timed out and exited and the empty queue is caught here. And since there is no unschedule-task, the only other way the wait can exit is if a new task is added to the queue, which wakes up only one thr",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27917404,27917404,src/scheduler.cpp
sipa,2015-04-07T20:43:50Z,"Ok, you convinced me... but indeed, belt & suspenders.\n\nYou could even combine the two loops: while (taskQueue.empty() || wait_until(taskQueue.begin()->first)) ?\n\nEDIT: nevermind. Sorry, ignore my nits here, I'm not thinking clearly.\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27918253,27918253,src/scheduler.cpp
gavinandresen,2015-04-07T20:46:29Z,"If it is a thread_interrupted exception, definitely want to exit.\n\nAny other exception, it seems best to leave it up to the calling code what to do.\n\nFor Bitcoin, the TraceThread will print any exceptions (other than thread_interrupted) to debug.log and exit the scheduler thread. I think that is the behavior we want -- tasks should catch their own exceptions, if they don't that is a bug.\n\nI ",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27918514,27918514,src/scheduler.cpp
sipa,2015-04-07T21:09:05Z,"Fair enough. I mostly commented because it may make debugging a bit harder, but I agree: tasks should not throw exceptions (except thread_interrupted, perhaps).\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r27920705,27920705,src/scheduler.cpp
sipa,2015-04-25T22:16:34Z,This line doesn't compile for me.\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r29104630,29104630,src/test/scheduler_tests.cpp
gavinandresen,2015-04-26T18:11:46Z,I'll implement a similar fix to utiltime.cpp's MilliSleep to workaround broken versions of boost.\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r29112267,29112267,src/test/scheduler_tests.cpp
laanwj,2015-05-14T13:20:06Z,Happy to see that this gets rid of the awful `LoopForever()` in util.h.\n,https://github.com/bitcoin/bitcoin/pull/5964#discussion_r30319359,30319359,src/util.h
laanwj,2015-05-14T13:24:59Z,"For repeating tasks, there are two options:\n1. Schedule the new run deltaSeconds after completion of the task, every time\n2. Schedule every deltaSeconds, no matter how long the task takes (unless the task takes longer than the interval, then something special has to be done)\n\nSo 1 schedules from the end time of the task, 2 schedules from the beginning time of the task,.\n\nThis appears to impl",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r30319766,30319766,src/scheduler.cpp
laanwj,2015-05-14T13:26:38Z,"As long as run-away exceptions are logged, any solution here is fine with me. It is indeed a bug if it happens.\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r30319892,30319892,src/scheduler.cpp
laanwj,2015-05-14T13:32:10Z,"nit: please leave out the `== true`, booleans already make good truth values\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r30320290,30320290,src/scheduler.cpp
btcdrak,2015-05-14T17:51:36Z,"tiny nit, is the indenting here off?\n",https://github.com/bitcoin/bitcoin/pull/5964#discussion_r30344137,30344137,src/scheduler.cpp
