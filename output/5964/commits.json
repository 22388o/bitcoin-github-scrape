[
  {
    "sha": "e656560edb287171b754a9a9c569a3f1cb1a7853",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjU2NTYwZWRiMjg3MTcxYjc1NGE5YTljNTY5YTNmMWNiMWE3ODUz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-03-18T10:27:30Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T14:37:19Z"
      },
      "message": "[Qt] add defaultConfirmTarget constant to sendcoinsdialog\n\n- replaces some hard-coded values for the default confirmation target\n- also simplify code that is using the new constant",
      "tree": {
        "sha": "3a4581bd060e839980d0527595ab97ba8c950d77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a4581bd060e839980d0527595ab97ba8c950d77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e656560edb287171b754a9a9c569a3f1cb1a7853",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVUsx8ACgkQdYgkL74406i2pACfRqPcAVqvNNLfh7S747BMWlFL\nyp8AmwX2GmJ76/1Tm9vzkeNimmde5JyW\n=pk4d\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a4581bd060e839980d0527595ab97ba8c950d77\nparent 7e0e7f823f87e93cc6b2de9779961dc2a5119472\nauthor Philip Kaufmann <phil.kaufmann@t-online.de> 1426674450 +0100\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431614239 -0400\n\n[Qt] add defaultConfirmTarget constant to sendcoinsdialog\n\n- replaces some hard-coded values for the default confirmation target\n- also simplify code that is using the new constant\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e656560edb287171b754a9a9c569a3f1cb1a7853",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e656560edb287171b754a9a9c569a3f1cb1a7853",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e656560edb287171b754a9a9c569a3f1cb1a7853/comments",
    "author": null,
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e0e7f823f87e93cc6b2de9779961dc2a5119472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0e7f823f87e93cc6b2de9779961dc2a5119472",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e0e7f823f87e93cc6b2de9779961dc2a5119472"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3d57711568ae823fed9627377c4ec4f35cbf296d",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e656560edb287171b754a9a9c569a3f1cb1a7853/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e656560edb287171b754a9a9c569a3f1cb1a7853/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e656560edb287171b754a9a9c569a3f1cb1a7853",
        "patch": "@@ -590,12 +590,12 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n {\n     if (ui->radioSmartFee->isChecked())\n     {\n-        nTxConfirmTarget = (int)25 - (int)std::max(0, std::min(24, ui->sliderSmartFee->value()));\n+        nTxConfirmTarget = defaultConfirmTarget - ui->sliderSmartFee->value();\n         payTxFee = CFeeRate(0);\n     }\n     else\n     {\n-        nTxConfirmTarget = 25;\n+        nTxConfirmTarget = defaultConfirmTarget;\n         payTxFee = CFeeRate(ui->customFee->value());\n         fPayAtLeastCustomFee = ui->radioCustomAtLeast->isChecked();\n     }\n@@ -629,7 +629,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     if(!model || !model->getOptionsModel())\n         return;\n \n-    int nBlocksToConfirm = (int)25 - (int)std::max(0, std::min(24, ui->sliderSmartFee->value()));\n+    int nBlocksToConfirm = defaultConfirmTarget - ui->sliderSmartFee->value();\n     CFeeRate feeRate = mempool.estimateFee(nBlocksToConfirm);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {"
      },
      {
        "sha": "fc513bf2ba5cbb899f86b0300e36f4cd9983a65f",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e656560edb287171b754a9a9c569a3f1cb1a7853/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e656560edb287171b754a9a9c569a3f1cb1a7853/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=e656560edb287171b754a9a9c569a3f1cb1a7853",
        "patch": "@@ -23,6 +23,8 @@ QT_BEGIN_NAMESPACE\n class QUrl;\n QT_END_NAMESPACE\n \n+const int defaultConfirmTarget = 25;\n+\n /** Dialog for sending bitcoins */\n class SendCoinsDialog : public QDialog\n {"
      }
    ]
  },
  {
    "sha": "928b950e3b0622cca48a9eb2106dc7c006fbe520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjhiOTUwZTNiMDYyMmNjYTQ4YTllYjIxMDZkYzdjMDA2ZmJlNTIw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-02T14:33:45Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T14:37:19Z"
      },
      "message": "CScheduler class for lightweight task scheduling\n\nSimple class to manage a task queue that is serviced by one or\nmore threads.",
      "tree": {
        "sha": "9abb734c3b47545af14db7ccaa91aa66b4318e3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9abb734c3b47545af14db7ccaa91aa66b4318e3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/928b950e3b0622cca48a9eb2106dc7c006fbe520",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVUsx8ACgkQdYgkL74406gxCwCgpvhee5X3YP4b7sBWuSnjPCvO\nwfAAn2ETMqZ4xNpYkCtEmoTo/od7vF92\n=K0KP\n-----END PGP SIGNATURE-----",
        "payload": "tree 9abb734c3b47545af14db7ccaa91aa66b4318e3b\nparent e656560edb287171b754a9a9c569a3f1cb1a7853\nauthor Gavin Andresen <gavinandresen@gmail.com> 1427985225 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431614239 -0400\n\nCScheduler class for lightweight task scheduling\n\nSimple class to manage a task queue that is serviced by one or\nmore threads.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928b950e3b0622cca48a9eb2106dc7c006fbe520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/928b950e3b0622cca48a9eb2106dc7c006fbe520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928b950e3b0622cca48a9eb2106dc7c006fbe520/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e656560edb287171b754a9a9c569a3f1cb1a7853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e656560edb287171b754a9a9c569a3f1cb1a7853",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e656560edb287171b754a9a9c569a3f1cb1a7853"
      }
    ],
    "stats": {
      "total": 174,
      "additions": 174,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5349e18fc1f849f76b2d8bca14f4295150889dbd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928b950e3b0622cca48a9eb2106dc7c006fbe520/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928b950e3b0622cca48a9eb2106dc7c006fbe520/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=928b950e3b0622cca48a9eb2106dc7c006fbe520",
        "patch": "@@ -115,6 +115,7 @@ BITCOIN_CORE_H = \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n+  scheduler.h \\\n   script/interpreter.h \\\n   script/script_error.h \\\n   script/script.h \\\n@@ -257,6 +258,7 @@ libbitcoin_common_a_SOURCES = \\\n   netbase.cpp \\\n   protocol.cpp \\\n   pubkey.cpp \\\n+  scheduler.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n   script/sign.cpp \\"
      },
      {
        "sha": "ff223c231dfaf5490f51053e63de738948202809",
        "filename": "src/scheduler.cpp",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928b950e3b0622cca48a9eb2106dc7c006fbe520/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928b950e3b0622cca48a9eb2106dc7c006fbe520/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=928b950e3b0622cca48a9eb2106dc7c006fbe520",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"scheduler.h\"\n+\n+#include <assert.h>\n+#include <boost/bind.hpp>\n+#include <utility>\n+\n+CScheduler::CScheduler() : nThreadsServicingQueue(0)\n+{\n+}\n+\n+CScheduler::~CScheduler()\n+{\n+    assert(nThreadsServicingQueue == 0);\n+}\n+\n+\n+#if BOOST_VERSION < 105000\n+static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n+{\n+    boost::chrono::system_clock::duration d = t.time_since_epoch();\n+    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n+    boost::system_time result = boost::posix_time::from_time_t(0) +\n+                                boost::posix_time::microseconds(usecs.count());\n+    return result;\n+}\n+#endif\n+\n+void CScheduler::serviceQueue()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    ++nThreadsServicingQueue;\n+\n+    // newTaskMutex is locked throughout this loop EXCEPT\n+    // when the thread is waiting or when the user's function\n+    // is called.\n+    while (1) {\n+        try {\n+            while (taskQueue.empty()) {\n+                // Wait until there is something to do.\n+                newTaskScheduled.wait(lock);\n+            }\n+// Wait until either there is a new task, or until\n+// the time of the first item on the queue:\n+\n+// wait_until needs boost 1.50 or later; older versions have timed_wait:\n+#if BOOST_VERSION < 105000\n+            while (!taskQueue.empty() && newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first))) {\n+                // Keep waiting until timeout\n+            }\n+#else\n+            while (!taskQueue.empty() && newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                // Keep waiting until timeout\n+            }\n+#endif\n+            // If there are multiple threads, the queue can empty while we're waiting (another\n+            // thread may service the task we were waiting on).\n+            if (taskQueue.empty())\n+                continue;\n+\n+            Function f = taskQueue.begin()->second;\n+            taskQueue.erase(taskQueue.begin());\n+\n+            // Unlock before calling f, so it can reschedule itself or another task\n+            // without deadlocking:\n+            lock.unlock();\n+            f();\n+            lock.lock();\n+        } catch (...) {\n+            --nThreadsServicingQueue;\n+            throw;\n+        }\n+    }\n+}\n+\n+void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)\n+{\n+    {\n+        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        taskQueue.insert(std::make_pair(t, f));\n+    }\n+    newTaskScheduled.notify_one();\n+}\n+\n+void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaSeconds)\n+{\n+    schedule(f, boost::chrono::system_clock::now() + boost::chrono::seconds(deltaSeconds));\n+}\n+\n+static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaSeconds)\n+{\n+    f();\n+    s->scheduleFromNow(boost::bind(&Repeat, s, f, deltaSeconds), deltaSeconds);\n+}\n+\n+void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaSeconds)\n+{\n+    scheduleFromNow(boost::bind(&Repeat, this, f, deltaSeconds), deltaSeconds);\n+}"
      },
      {
        "sha": "bb383ab9f9576ddfa306b5fdd7138c742d302a3d",
        "filename": "src/scheduler.h",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928b950e3b0622cca48a9eb2106dc7c006fbe520/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928b950e3b0622cca48a9eb2106dc7c006fbe520/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=928b950e3b0622cca48a9eb2106dc7c006fbe520",
        "patch": "@@ -0,0 +1,70 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCHEDULER_H\n+#define BITCOIN_SCHEDULER_H\n+\n+//\n+// NOTE:\n+// boost::thread / boost::function / boost::chrono should be ported to\n+// std::thread / std::function / std::chrono when we support C++11.\n+//\n+#include <boost/function.hpp>\n+#include <boost/chrono/chrono.hpp>\n+#include <boost/thread.hpp>\n+#include <map>\n+\n+//\n+// Simple class for background tasks that should be run\n+// periodically or once \"after a while\"\n+//\n+// Usage:\n+//\n+// CScheduler* s = new CScheduler();\n+// s->scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n+// s->scheduleFromNow(boost::bind(Class::func, this, argument), 3);\n+// boost::thread* t = new boost::thread(boost::bind(CScheduler::serviceQueue, s));\n+//\n+// ... then at program shutdown, clean up the thread running serviceQueue:\n+// t->interrupt();\n+// t->join();\n+// delete t;\n+// delete s; // Must be done after thread is interrupted/joined.\n+//\n+\n+class CScheduler\n+{\n+public:\n+    CScheduler();\n+    ~CScheduler();\n+\n+    typedef boost::function<void(void)> Function;\n+\n+    // Call func at/after time t\n+    void schedule(Function f, boost::chrono::system_clock::time_point t);\n+\n+    // Convenience method: call f once deltaSeconds from now\n+    void scheduleFromNow(Function f, int64_t deltaSeconds);\n+\n+    // Another convenience method: call f approximately\n+    // every deltaSeconds forever, starting deltaSeconds from now.\n+    // To be more precise: every time f is finished, it\n+    // is rescheduled to run deltaSeconds later. If you\n+    // need more accurate scheduling, don't use this method.\n+    void scheduleEvery(Function f, int64_t deltaSeconds);\n+\n+    // To keep things as simple as possible, there is no unschedule.\n+\n+    // Services the queue 'forever'. Should be run in a thread,\n+    // and interrupted using boost::interrupt_thread\n+    void serviceQueue();\n+\n+private:\n+    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;\n+    boost::condition_variable newTaskScheduled;\n+    boost::mutex newTaskMutex;\n+    int nThreadsServicingQueue;\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "ca66717d89d78f4b5e82d23964d5ae18620832f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTY2NzE3ZDg5ZDc4ZjRiNWU4MmQyMzk2NGQ1YWUxODYyMDgzMmYz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-09T22:34:44Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T14:37:19Z"
      },
      "message": "build: make libboost_chrono mandatory\n\npreviously it was only used with certain boost versions. Now all versions\nrequire it.",
      "tree": {
        "sha": "c4ed38439a76b489ad3599eafab563553554bcc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4ed38439a76b489ad3599eafab563553554bcc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca66717d89d78f4b5e82d23964d5ae18620832f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVUsx8ACgkQdYgkL74406iMXQCgoKc/IGQaG5ZuxZ+WvP3ZuiEj\nOnwAoLtcSOBHGnu0f6hV9UwZ21q/KXYI\n=61C0\n-----END PGP SIGNATURE-----",
        "payload": "tree c4ed38439a76b489ad3599eafab563553554bcc7\nparent 928b950e3b0622cca48a9eb2106dc7c006fbe520\nauthor Cory Fields <cory-nospam-@coryfields.com> 1428618884 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431614239 -0400\n\nbuild: make libboost_chrono mandatory\n\npreviously it was only used with certain boost versions. Now all versions\nrequire it.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca66717d89d78f4b5e82d23964d5ae18620832f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca66717d89d78f4b5e82d23964d5ae18620832f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca66717d89d78f4b5e82d23964d5ae18620832f3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "928b950e3b0622cca48a9eb2106dc7c006fbe520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928b950e3b0622cca48a9eb2106dc7c006fbe520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/928b950e3b0622cca48a9eb2106dc7c006fbe520"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c5d08a02854dc7e30bc8866187feb30b1b145576",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca66717d89d78f4b5e82d23964d5ae18620832f3/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca66717d89d78f4b5e82d23964d5ae18620832f3/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ca66717d89d78f4b5e82d23964d5ae18620832f3",
        "patch": "@@ -590,17 +590,15 @@ fi\n \n if test x$use_boost = xyes; then\n \n-BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n \n dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n dnl a working version is available, else fall back to sleep. sleep was removed\n dnl after 1.56.\n dnl If neither is available, abort.\n-dnl If sleep_for is used, boost_chrono becomes a requirement.\n-if test x$ax_cv_boost_chrono = xyes; then\n TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB $LIBS\"\n+LIBS=\"$BOOST_LIBS $LIBS\"\n TEMP_CPPFLAGS=\"$CPPFLAGS\"\n CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n@@ -613,12 +611,11 @@ AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n    choke me\n   #endif\n   ]])],\n-  [boost_sleep=yes; BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\";\n+  [boost_sleep=yes;\n      AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n   [boost_sleep=no])\n LIBS=\"$TEMP_LIBS\"\n CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n \n if test x$boost_sleep != xyes; then\n TEMP_LIBS=\"$LIBS\""
      }
    ]
  },
  {
    "sha": "cfefe5b88c57c08759492647b360c17126acb826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmVmZTViODhjNTdjMDg3NTk0OTI2NDdiMzYwYzE3MTI2YWNiODI2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-10T00:11:14Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T14:37:19Z"
      },
      "message": "scheduler: fix with boost <= 1.50",
      "tree": {
        "sha": "1c44f027e795cbbcba129183bc62ff9c12232c63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c44f027e795cbbcba129183bc62ff9c12232c63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfefe5b88c57c08759492647b360c17126acb826",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVUsx8ACgkQdYgkL74406h8cgCfTNbopfvZcP+g43XCCfYDSvYo\nkcoAoNeatp5Pmdesg14NIQEs+9Oh4Dzu\n=2+PL\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c44f027e795cbbcba129183bc62ff9c12232c63\nparent ca66717d89d78f4b5e82d23964d5ae18620832f3\nauthor Cory Fields <cory-nospam-@coryfields.com> 1428624674 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431614239 -0400\n\nscheduler: fix with boost <= 1.50\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfefe5b88c57c08759492647b360c17126acb826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfefe5b88c57c08759492647b360c17126acb826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfefe5b88c57c08759492647b360c17126acb826/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca66717d89d78f4b5e82d23964d5ae18620832f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca66717d89d78f4b5e82d23964d5ae18620832f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca66717d89d78f4b5e82d23964d5ae18620832f3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8b55888ae851cf144aecbf90aece7e16736208d5",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfefe5b88c57c08759492647b360c17126acb826/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfefe5b88c57c08759492647b360c17126acb826/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=cfefe5b88c57c08759492647b360c17126acb826",
        "patch": "@@ -21,11 +21,7 @@ CScheduler::~CScheduler()\n #if BOOST_VERSION < 105000\n static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n {\n-    boost::chrono::system_clock::duration d = t.time_since_epoch();\n-    boost::chrono::microseconds usecs = boost::chrono::duration_cast<boost::chrono::microseconds>(d);\n-    boost::system_time result = boost::posix_time::from_time_t(0) +\n-                                boost::posix_time::microseconds(usecs.count());\n-    return result;\n+    return boost::posix_time::from_time_t(boost::chrono::system_clock::to_time_t(t));\n }\n #endif\n "
      }
    ]
  },
  {
    "sha": "68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGQzNzBiZWM0NGRkNmMwYjliZGM3NjMwOGRlMWE5NmZlMzRlNWI4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-10T14:31:02Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T16:50:41Z"
      },
      "message": "CScheduler unit test",
      "tree": {
        "sha": "5c1afe95dcf1d8a47ae88e6f4faf1a6aac18a5d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1afe95dcf1d8a47ae88e6f4faf1a6aac18a5d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVU0mEACgkQdYgkL74406j1uQCgvD0vxOaho9YKEvWPgRUHx3mX\nxXoAn34o8uN+pYV+YJn67FhUk//zpN0T\n=1hfK\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c1afe95dcf1d8a47ae88e6f4faf1a6aac18a5d5\nparent cfefe5b88c57c08759492647b360c17126acb826\nauthor Gavin Andresen <gavinandresen@gmail.com> 1428676262 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431622241 -0400\n\nCScheduler unit test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfefe5b88c57c08759492647b360c17126acb826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfefe5b88c57c08759492647b360c17126acb826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfefe5b88c57c08759492647b360c17126acb826"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 111,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3fba198d99da36f7f372581dcfa39310dfee4eac",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
        "patch": "@@ -60,6 +60,7 @@ BITCOIN_TESTS =\\\n   test/pow_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n+  test/scheduler_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/scriptnum_tests.cpp \\"
      },
      {
        "sha": "a26d0afaed8dbb9ae44182bc9ab99ebbb40f1710",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
        "patch": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"random.h\"\n+#include \"scheduler.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/bind.hpp>\n+#include <boost/random/mersenne_twister.hpp>\n+#include <boost/random/uniform_int_distribution.hpp>\n+#include <boost/thread.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(scheduler_tests)\n+\n+static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)\n+{\n+    {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        counter += delta;\n+    }\n+    boost::chrono::system_clock::time_point noTime = boost::chrono::system_clock::time_point::min();\n+    if (rescheduleTime != noTime) {\n+        CScheduler::Function f = boost::bind(&microTask, boost::ref(s), boost::ref(mutex), boost::ref(counter), -delta + 1, noTime);\n+        s.schedule(f, rescheduleTime);\n+    }\n+}\n+\n+static void MicroSleep(uint64_t n)\n+{\n+#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n+    boost::this_thread::sleep_for(boost::chrono::microseconds(n));\n+#elif defined(HAVE_WORKING_BOOST_SLEEP)\n+    boost::this_thread::sleep(boost::posix_time::microseconds(n));\n+#else\n+    //should never get here\n+    #error missing boost sleep implementation\n+#endif\n+}\n+\n+BOOST_AUTO_TEST_CASE(manythreads)\n+{\n+    // Stress test: hundreds of microsecond-scheduled tasks,\n+    // serviced by 10 threads.\n+    //\n+    // So... ten shared counters, which if all the tasks execute\n+    // properly will sum to the number of tasks done.\n+    // Each task adds or subtracts from one of the counters a\n+    // random amount, and then schedules another task 0-1000\n+    // microseconds in the future to subtract or add from\n+    // the counter -random_amount+1, so in the end the shared\n+    // counters should sum to the number of initial tasks performed.\n+    CScheduler microTasks;\n+\n+    boost::thread_group microThreads;\n+    for (int i = 0; i < 5; i++)\n+        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+\n+    boost::mutex counterMutex[10];\n+    int counter[10] = { 0 };\n+    boost::random::mt19937 rng(insecure_rand());\n+    boost::random::uniform_int_distribution<> zeroToNine(0, 9);\n+    boost::random::uniform_int_distribution<> randomMsec(-11, 1000);\n+    boost::random::uniform_int_distribution<> randomDelta(-1000, 1000);\n+\n+    boost::chrono::system_clock::time_point start = boost::chrono::system_clock::now();\n+    boost::chrono::system_clock::time_point now = start;\n+\n+    for (int i = 0; i < 100; i++) {\n+        boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n+        boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n+        int whichCounter = zeroToNine(rng);\n+        CScheduler::Function f = boost::bind(&microTask, boost::ref(microTasks),\n+                                             boost::ref(counterMutex[whichCounter]), boost::ref(counter[whichCounter]),\n+                                             randomDelta(rng), tReschedule);\n+        microTasks.schedule(f, t);\n+    }\n+\n+    MicroSleep(600);\n+    now = boost::chrono::system_clock::now();\n+    // More threads and more tasks:\n+    for (int i = 0; i < 5; i++)\n+        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+    for (int i = 0; i < 100; i++) {\n+        boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n+        boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n+        int whichCounter = zeroToNine(rng);\n+        CScheduler::Function f = boost::bind(&microTask, boost::ref(microTasks),\n+                                             boost::ref(counterMutex[whichCounter]), boost::ref(counter[whichCounter]),\n+                                             randomDelta(rng), tReschedule);\n+        microTasks.schedule(f, t);\n+    }\n+\n+    // All 2,000 tasks should be finished within 2 milliseconds. Sleep a bit longer.\n+    MicroSleep(2100);\n+\n+    microThreads.interrupt_all();\n+    microThreads.join_all();\n+\n+    int counterSum = 0;\n+    for (int i = 0; i < 10; i++) {\n+        BOOST_CHECK(counter[i] != 0);\n+        counterSum += counter[i];\n+    }\n+    BOOST_CHECK_EQUAL(counterSum, 200);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGQwYWNkM2RiYmJmM2UxOWQyMzc5ZmM5YjI0ZTdlZjVjMmE4YWRi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-03T15:50:06Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T16:50:41Z"
      },
      "message": "Create a scheduler thread for lightweight tasks",
      "tree": {
        "sha": "53c830bfbbd12bd272c99d4f38f56bb109ce761d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53c830bfbbd12bd272c99d4f38f56bb109ce761d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVU0mEACgkQdYgkL74406gF4QCfaZfCjtnoDGRstAV4AA/CBK+X\nzCQAoIBTOuMGRSBQISbsPqL1UOfJ2uSN\n=hQjw\n-----END PGP SIGNATURE-----",
        "payload": "tree 53c830bfbbd12bd272c99d4f38f56bb109ce761d\nparent 68d370bec44dd6c0b9bdc76308de1a96fe34e5b8\nauthor Gavin Andresen <gavinandresen@gmail.com> 1428076206 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431622241 -0400\n\nCreate a scheduler thread for lightweight tasks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68d370bec44dd6c0b9bdc76308de1a96fe34e5b8"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cce687ac98cb0a1eedfbd22bae852322f029840d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
        "patch": "@@ -8,6 +8,7 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"noui.h\"\n+#include \"scheduler.h\"\n #include \"util.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n@@ -55,6 +56,7 @@ void WaitForShutdown(boost::thread_group* threadGroup)\n bool AppInit(int argc, char* argv[])\n {\n     boost::thread_group threadGroup;\n+    CScheduler scheduler;\n \n     bool fRet = false;\n \n@@ -142,7 +144,7 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n-        fRet = AppInit2(threadGroup);\n+        fRet = AppInit2(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      },
      {
        "sha": "51f3671c1d263b3348a00ba1a65fa06c15b2d0b5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
        "patch": "@@ -19,6 +19,7 @@\n #include \"net.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n+#include \"scheduler.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -564,7 +565,7 @@ bool InitSanityCheck(void)\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n-bool AppInit2(boost::thread_group& threadGroup)\n+bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -890,6 +891,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n             threadGroup.create_thread(&ThreadScriptCheck);\n     }\n \n+    // Start the lightweight task scheduler thread\n+    CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n+    threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+\n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n      * that the server is there and will be ready later).  Warmup mode will"
      },
      {
        "sha": "dcb2b293608c8d7771bd9396fadaabd0f5bf250d",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <string>\n \n+class CScheduler;\n class CWallet;\n \n namespace boost\n@@ -20,7 +21,7 @@ extern CWallet* pwalletMain;\n void StartShutdown();\n bool ShutdownRequested();\n void Shutdown();\n-bool AppInit2(boost::thread_group& threadGroup);\n+bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */\n enum HelpMessageMode {"
      },
      {
        "sha": "8740b98b70cb1a7625ab0e295e7d4e12b3bb7578",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
        "patch": "@@ -26,6 +26,7 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"rpcserver.h\"\n+#include \"scheduler.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n@@ -178,6 +179,7 @@ public slots:\n \n private:\n     boost::thread_group threadGroup;\n+    CScheduler scheduler;\n \n     /// Pass fatal exception message to UI thread\n     void handleRunawayException(const std::exception *e);\n@@ -258,7 +260,7 @@ void BitcoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n-        int rv = AppInit2(threadGroup);\n+        int rv = AppInit2(threadGroup, scheduler);\n         if(rv)\n         {\n             /* Start a dummy RPC thread if no RPC thread is active yet"
      }
    ]
  },
  {
    "sha": "9a1dcea2df2a6a89acf79bc41972e937d783a080",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTFkY2VhMmRmMmE2YTg5YWNmNzliYzQxOTcyZTkzN2Q3ODNhMDgw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-02T16:04:59Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-14T16:50:42Z"
      },
      "message": "Use CScheduler for net's DumpAddresses\n\nInstead of starting Yet Another Thread to dump addresses,\nuse CScheduler to do it.",
      "tree": {
        "sha": "a442b42c60df35d3e95d313ba08a47a2a793af8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a442b42c60df35d3e95d313ba08a47a2a793af8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a1dcea2df2a6a89acf79bc41972e937d783a080",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVU0mIACgkQdYgkL74406hpJACgnYRdlA6bkFlvqkAQMowrndG5\nBz0AoJ4+2HFHhaAdJVy8P6nEZG1EqsLA\n=Ls79\n-----END PGP SIGNATURE-----",
        "payload": "tree a442b42c60df35d3e95d313ba08a47a2a793af8d\nparent ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb\nauthor Gavin Andresen <gavinandresen@gmail.com> 1427990699 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431622242 -0400\n\nUse CScheduler for net's DumpAddresses\n\nInstead of starting Yet Another Thread to dump addresses,\nuse CScheduler to do it.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a1dcea2df2a6a89acf79bc41972e937d783a080",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a1dcea2df2a6a89acf79bc41972e937d783a080",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a1dcea2df2a6a89acf79bc41972e937d783a080/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd0acd3dbbbf3e19d2379fc9b24e7ef5c2a8adb"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 6,
      "deletions": 41
    },
    "files": [
      {
        "sha": "94ed25fe7b5b91fedc067b7a4cd5214f4d2b8203",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9a1dcea2df2a6a89acf79bc41972e937d783a080",
        "patch": "@@ -1378,7 +1378,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n-    StartNode(threadGroup);\n+    StartNode(threadGroup, scheduler);\n \n #ifdef ENABLE_WALLET\n     // Generate coins in the background"
      },
      {
        "sha": "6849d792633c8ff95042eba82ed63273aa6096c0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9a1dcea2df2a6a89acf79bc41972e937d783a080",
        "patch": "@@ -13,6 +13,7 @@\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n+#include \"scheduler.h\"\n #include \"ui_interface.h\"\n #include \"crypto/common.h\"\n \n@@ -1590,7 +1591,7 @@ void static Discover(boost::thread_group& threadGroup)\n #endif\n }\n \n-void StartNode(boost::thread_group& threadGroup)\n+void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses for peers.dat\n@@ -1640,7 +1641,7 @@ void StartNode(boost::thread_group& threadGroup)\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    threadGroup.create_thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, DUMP_ADDRESSES_INTERVAL * 1000));\n+    scheduler.scheduleEvery(&DumpAddresses, DUMP_ADDRESSES_INTERVAL);\n }\n \n bool StopNode()"
      },
      {
        "sha": "17502b97ebead019c0482fa6ee7008c0a05fce7b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9a1dcea2df2a6a89acf79bc41972e937d783a080",
        "patch": "@@ -32,6 +32,7 @@\n \n class CAddrMan;\n class CBlockIndex;\n+class CScheduler;\n class CNode;\n \n namespace boost {\n@@ -72,7 +73,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-void StartNode(boost::thread_group& threadGroup);\n+void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n "
      },
      {
        "sha": "4cc0faf4d7afc04df60f541785404ef7e0cfd796",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a1dcea2df2a6a89acf79bc41972e937d783a080/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=9a1dcea2df2a6a89acf79bc41972e937d783a080",
        "patch": "@@ -202,43 +202,6 @@ std::string HelpMessageOpt(const std::string& option, const std::string& message\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n \n-/**\n- * Standard wrapper for do-something-forever thread functions.\n- * \"Forever\" really means until the thread is interrupted.\n- * Use it like:\n- *   new boost::thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 900000));\n- * or maybe:\n- *    boost::function<void()> f = boost::bind(&FunctionWithArg, argument);\n- *    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"nothing\", f, milliseconds));\n- */\n-template <typename Callable> void LoopForever(const char* name,  Callable func, int64_t msecs)\n-{\n-    std::string s = strprintf(\"bitcoin-%s\", name);\n-    RenameThread(s.c_str());\n-    LogPrintf(\"%s thread start\\n\", name);\n-    try\n-    {\n-        while (1)\n-        {\n-            MilliSleep(msecs);\n-            func();\n-        }\n-    }\n-    catch (const boost::thread_interrupted&)\n-    {\n-        LogPrintf(\"%s thread stop\\n\", name);\n-        throw;\n-    }\n-    catch (const std::exception& e) {\n-        PrintExceptionContinue(&e, name);\n-        throw;\n-    }\n-    catch (...) {\n-        PrintExceptionContinue(NULL, name);\n-        throw;\n-    }\n-}\n-\n /**\n  * .. and a wrapper that just calls func once\n  */"
      }
    ]
  }
]