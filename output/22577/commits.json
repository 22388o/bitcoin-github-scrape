[
  {
    "sha": "703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDNiMWU2MTJhNGJkNDUyMWUyMGFlMjFlYjhmYjdjMTlmNGVmOTQy",
    "commit": {
      "author": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-07-28T22:18:53Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-07-30T22:34:09Z"
      },
      "message": "Close minor startup race between main and scheduler threads\n\nDon't schedule class PeerManagerImpl's background tasks from its\nconstructor, but instead do that from a separate method,\nStartScheduledTasks(), that can be called later at the end of startup,\nafter other things, such as the active chain, are initialzed.",
      "tree": {
        "sha": "b51b0648990daf22ce59322f9b6abcf64619d6e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b51b0648990daf22ce59322f9b6abcf64619d6e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/comments",
    "author": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b1fb50def0dea0cd320bc43c12d9a12edde0390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1fb50def0dea0cd320bc43c12d9a12edde0390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1fb50def0dea0cd320bc43c12d9a12edde0390"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a0f318b8bc59facd05e06e8c6f890e62bce2cc67",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
        "patch": "@@ -1180,7 +1180,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     assert(!node.peerman);\n     node.peerman = PeerManager::make(chainparams, *node.connman, *node.addrman, node.banman.get(),\n-                                     *node.scheduler, chainman, *node.mempool, ignores_incoming_txs);\n+                                     chainman, *node.mempool, ignores_incoming_txs);\n     RegisterValidationInterface(node.peerman.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n@@ -1789,6 +1789,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL);\n \n+    if (node.peerman) node.peerman->StartScheduledTasks(*node.scheduler);\n+\n #if HAVE_SYSTEM\n     StartupNotify(args);\n #endif"
      },
      {
        "sha": "6cc99d39f7b59c9594cdc2740216a6a0871a8e93",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
        "patch": "@@ -271,7 +271,7 @@ class PeerManagerImpl final : public PeerManager\n {\n public:\n     PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n-                    BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                    BanMan* banman, ChainstateManager& chainman,\n                     CTxMemPool& pool, bool ignore_incoming_txs);\n \n     /** Overridden from CValidationInterface. */\n@@ -288,6 +288,7 @@ class PeerManagerImpl final : public PeerManager\n     bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n     /** Implement PeerManager */\n+    void StartScheduledTasks(CScheduler& scheduler) override;\n     void CheckForStaleTipAndEvictPeers() override;\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const override;\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n@@ -1396,14 +1397,14 @@ bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex)\n }\n \n std::unique_ptr<PeerManager> PeerManager::make(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n-                                               BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                                               BanMan* banman, ChainstateManager& chainman,\n                                                CTxMemPool& pool, bool ignore_incoming_txs)\n {\n-    return std::make_unique<PeerManagerImpl>(chainparams, connman, addrman, banman, scheduler, chainman, pool, ignore_incoming_txs);\n+    return std::make_unique<PeerManagerImpl>(chainparams, connman, addrman, banman, chainman, pool, ignore_incoming_txs);\n }\n \n PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n-                                 BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                                 BanMan* banman, ChainstateManager& chainman,\n                                  CTxMemPool& pool, bool ignore_incoming_txs)\n     : m_chainparams(chainparams),\n       m_connman(connman),\n@@ -1412,6 +1413,10 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_chainman(chainman),\n       m_mempool(pool),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n+{\n+}\n+\n+void PeerManagerImpl::StartScheduledTasks(CScheduler& scheduler)\n {\n     // Stale tip checking and peer eviction are on two different timers, but we\n     // don't want them to get out of sync due to drift in the scheduler, so we"
      },
      {
        "sha": "66492899ee9da25fa17b9a66fe4fcb41182c99e7",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
        "patch": "@@ -37,10 +37,13 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n {\n public:\n     static std::unique_ptr<PeerManager> make(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n-                                             BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                                             BanMan* banman, ChainstateManager& chainman,\n                                              CTxMemPool& pool, bool ignore_incoming_txs);\n     virtual ~PeerManager() { }\n \n+    /** Begin running background tasks, should only be called once */\n+    virtual void StartScheduledTasks(CScheduler& scheduler) = 0;\n+\n     /** Get statistics from node state */\n     virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) const = 0;\n "
      },
      {
        "sha": "0bfe6eecd9b2bdbeb6c8a4414429712c317e9b87",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
        "patch": "@@ -53,7 +53,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.chainman, *m_node.mempool, false);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.chainman, *m_node.mempool, false);\n \n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n     CConnman::Options options;\n@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.chainman, *m_node.mempool, false);\n \n     CNetAddr tor_netaddr;\n     BOOST_REQUIRE(\n@@ -288,7 +288,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.chainman, *m_node.mempool, false);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "2d044af184552574d0aa4f10031e0f9b31cb7619",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703b1e612a4bd4521e20ae21eb8fb7c19f4ef942/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=703b1e612a4bd4521e20ae21eb8fb7c19f4ef942",
        "patch": "@@ -197,7 +197,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n-                                       m_node.banman.get(), *m_node.scheduler, *m_node.chainman,\n+                                       m_node.banman.get(), *m_node.chainman,\n                                        *m_node.mempool, false);\n     {\n         CConnman::Options options;"
      }
    ]
  }
]