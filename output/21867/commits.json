[
  {
    "sha": "9f767e84381d678ed24e3f7f981976f9da34971e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Zjc2N2U4NDM4MWQ2NzhlZDI0ZTNmN2Y5ODE5NzZmOWRhMzQ5NzFl",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-06T00:22:53Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-06T00:30:05Z"
      },
      "message": "test: use MiniWallet for p2p_blocksonly.py\n\nThis test can now be run even with the Bitcoin Core wallet disabled.",
      "tree": {
        "sha": "a5b3bb4ffe00f68783361ccef80906cc58a6e5cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5b3bb4ffe00f68783361ccef80906cc58a6e5cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f767e84381d678ed24e3f7f981976f9da34971e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f767e84381d678ed24e3f7f981976f9da34971e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f767e84381d678ed24e3f7f981976f9da34971e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f767e84381d678ed24e3f7f981976f9da34971e/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "779aaa7f03b2c19dc4f635467046c3ab5bfd4334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/779aaa7f03b2c19dc4f635467046c3ab5bfd4334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/779aaa7f03b2c19dc4f635467046c3ab5bfd4334"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ab2556cd7251bc54b64bc653b20849e78801f1e2",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f767e84381d678ed24e3f7f981976f9da34971e/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f767e84381d678ed24e3f7f981976f9da34971e/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=9f767e84381d678ed24e3f7f981976f9da34971e",
        "patch": "@@ -6,22 +6,25 @@\n \n import time\n \n-from test_framework.blocktools import create_transaction\n from test_framework.messages import msg_tx\n from test_framework.p2p import P2PInterface, P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class P2PBlocksOnly(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-blocksonly\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n+        self.miniwallet = MiniWallet(self.nodes[0])\n+        # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n+        self.miniwallet.generate(2)\n+        self.nodes[0].generate(100)\n+\n         self.blocksonly_mode_tests()\n         self.blocks_relay_conn_tests()\n \n@@ -30,14 +33,14 @@ def blocksonly_mode_tests(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n \n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        tx, txid, tx_hex = self.check_p2p_tx_violation()\n+        tx, txid, wtxid, tx_hex = self.check_p2p_tx_violation()\n \n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         tx_relay_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n \n         assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n-        with self.nodes[0].assert_debug_log(['received getdata for: wtx {} peer=1'.format(txid)]):\n+        with self.nodes[0].assert_debug_log(['received getdata for: wtx {} peer=1'.format(wtxid)]):\n             self.nodes[0].sendrawtransaction(tx_hex)\n             tx_relay_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n@@ -79,7 +82,7 @@ def blocks_relay_conn_tests(self):\n         # Ensure we disconnect if a block-relay-only connection sends us a transaction\n         self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"block-relay-only\")\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n-        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+        _, txid, _, tx_hex = self.check_p2p_tx_violation(index=2)\n \n         self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n         conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), p2p_idx=1, connection_type=\"block-relay-only\")\n@@ -95,19 +98,18 @@ def blocks_relay_conn_tests(self):\n     def check_p2p_tx_violation(self, index=1):\n         self.log.info('Check that txs from P2P are rejected and result in disconnect')\n         input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n-        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=(50 - 0.001))\n-        txid = tx.rehash()\n-        tx_hex = tx.serialize().hex()\n+        utxo_to_spend = self.miniwallet.get_utxo(txid=input_txid)\n+        spendtx = self.miniwallet.create_self_transfer(from_node=self.nodes[0], utxo_to_spend=utxo_to_spend)\n \n         with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n-            self.nodes[0].p2ps[0].send_message(msg_tx(tx))\n+            self.nodes[0].p2ps[0].send_message(msg_tx(spendtx['tx']))\n             self.nodes[0].p2ps[0].wait_for_disconnect()\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n \n         # Remove the disconnected peer\n         del self.nodes[0].p2ps[0]\n \n-        return tx, txid, tx_hex\n+        return spendtx['tx'], spendtx['txid'], spendtx['wtxid'], spendtx['hex']\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]