[
  {
    "sha": "85973bcc44f60fe3bbc952557ebf578dd4c475d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTk3M2JjYzQ0ZjYwZmUzYmJjOTUyNTU3ZWJmNTc4ZGQ0YzQ3NWQy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-11T07:37:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-30T15:31:58Z"
      },
      "message": "When BIP70 is disabled, get PaymentRequest merchant using string search\n\nThe merchant name is stored in the X.509 certificate embedded in a\nPaymentRequest. Use some string searching to locate it so that it\ncan be shown to the user in the transaction details when BIP70 support\nwas not configured.",
      "tree": {
        "sha": "606320f5872fe5a5f8774ac81a6c983d3b962fee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/606320f5872fe5a5f8774ac81a6c983d3b962fee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85973bcc44f60fe3bbc952557ebf578dd4c475d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85973bcc44f60fe3bbc952557ebf578dd4c475d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85973bcc44f60fe3bbc952557ebf578dd4c475d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85973bcc44f60fe3bbc952557ebf578dd4c475d2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1985c4efda56b48f6f9c04f39d69268ee8f0b40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1985c4efda56b48f6f9c04f39d69268ee8f0b40a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1985c4efda56b48f6f9c04f39d69268ee8f0b40a"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 48,
      "deletions": 10
    },
    "files": [
      {
        "sha": "648fdb76739d8cd871cb7ce18ca5862421e39d87",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 10,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85973bcc44f60fe3bbc952557ebf578dd4c475d2/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85973bcc44f60fe3bbc952557ebf578dd4c475d2/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=85973bcc44f60fe3bbc952557ebf578dd4c475d2",
        "patch": "@@ -49,6 +49,36 @@ QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const i\n     }\n }\n \n+#ifndef ENABLE_BIP70\n+// Takes an encoded PaymentRequest as a string and tries to find the Common Name of the X.509 certificate\n+// used to sign the PaymentRequest.\n+bool GetPaymentRequestMerchant(const std::string& pr, QString& merchant)\n+{\n+    // Search for the supported pki type strings\n+    if (pr.find(std::string({0x12, 0x0b}) + \"x509+sha256\") != std::string::npos || pr.find(std::string({0x12, 0x09}) + \"x509+sha1\") != std::string::npos) {\n+        // We want the common name of the Subject of the cert. This should be the second occurrence\n+        // of the bytes 0x0603550403. The first occurrence of those is the common name of the issuer.\n+        // After those bytes will be either 0x13 or 0x0C, then length, then either the ascii or utf8\n+        // string with the common name which is the merchant name\n+        size_t cn_pos = pr.find({0x06, 0x03, 0x55, 0x04, 0x03});\n+        if (cn_pos != std::string::npos) {\n+            cn_pos = pr.find({0x06, 0x03, 0x55, 0x04, 0x03}, cn_pos + 5);\n+            if (cn_pos != std::string::npos) {\n+                cn_pos += 5;\n+                if (pr[cn_pos] == 0x13 || pr[cn_pos] == 0x0c) {\n+                    cn_pos++; // Consume the type\n+                    int str_len = pr[cn_pos];\n+                    cn_pos++; // Consume the string length\n+                    merchant = QString::fromUtf8(pr.data() + cn_pos, str_len);\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+#endif\n+\n QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)\n {\n     int numBlocks;\n@@ -255,26 +285,34 @@ QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wall\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    for (const std::pair<std::string, std::string>& r : orderForm)\n+    for (const std::pair<std::string, std::string>& r : orderForm) {\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n-#ifdef ENABLE_BIP70\n-    //\n-    // PaymentRequest info:\n-    //\n-    for (const std::pair<std::string, std::string>& r : orderForm)\n-    {\n+        //\n+        // PaymentRequest info:\n+        //\n         if (r.first == \"PaymentRequest\")\n         {\n+            QString merchant;\n+#ifdef ENABLE_BIP70\n             PaymentRequestPlus req;\n             req.parse(QByteArray::fromRawData(r.second.data(), r.second.size()));\n-            QString merchant;\n-            if (req.getMerchant(PaymentServer::getCertStore(), merchant))\n+            if (!req.getMerchant(PaymentServer::getCertStore(), merchant)) {\n+                merchant.clear();\n+            }\n+#else\n+            if (!GetPaymentRequestMerchant(r.second, merchant)) {\n+                merchant.clear();\n+            } else {\n+                merchant += tr(\" (Certificate was not verified)\");\n+            }\n+#endif\n+            if (!merchant.isNull()) {\n                 strHTML += \"<b>\" + tr(\"Merchant\") + \":</b> \" + GUIUtil::HtmlEscape(merchant) + \"<br>\";\n+            }\n         }\n     }\n-#endif\n \n     if (wtx.is_coinbase)\n     {"
      }
    ]
  }
]