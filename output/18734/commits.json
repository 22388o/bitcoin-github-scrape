[
  {
    "sha": "57b449dc254f253222e71ada11a36d469a059f01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2I0NDlkYzI1NGYyNTMyMjJlNzFhZGExMWEzNmQ0NjlhMDU5ZjAx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-04-22T13:50:59Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-04-22T13:51:50Z"
      },
      "message": "Allow simple multiwallet rpc calls",
      "tree": {
        "sha": "8f8df01b1843390eafa9a7d82a4efe1b2019a0b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f8df01b1843390eafa9a7d82a4efe1b2019a0b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57b449dc254f253222e71ada11a36d469a059f01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b449dc254f253222e71ada11a36d469a059f01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57b449dc254f253222e71ada11a36d469a059f01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b449dc254f253222e71ada11a36d469a059f01/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dcb0615898216c503e965a01d855a5999a586b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dcb0615898216c503e965a01d855a5999a586b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dcb0615898216c503e965a01d855a5999a586b5"
      }
    ],
    "stats": {
      "total": 224,
      "additions": 223,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fba9516abd6cc1ac606a3290ca2e6cd3b3d0adca",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b449dc254f253222e71ada11a36d469a059f01/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b449dc254f253222e71ada11a36d469a059f01/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=57b449dc254f253222e71ada11a36d469a059f01",
        "patch": "@@ -92,6 +92,10 @@ static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver,\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &importprivkey);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -224,6 +228,10 @@ UniValue abortrescan(const JSONRPCRequest& request)\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &importaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -328,6 +336,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &importprunedfunds);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -388,6 +400,10 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &removeprunedfunds);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -428,6 +444,10 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &importpubkey);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -517,6 +537,10 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &importwallet);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -676,6 +700,10 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &dumpprivkey);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n@@ -1266,6 +1294,10 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n+    if (IsMultiwalletJSONRPCRequest(mainRequest)) {\n+        return ExecForeachWalletJSONRPCRequest(mainRequest, &importmulti);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n     CWallet* const pwallet = wallet.get();\n     if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {"
      },
      {
        "sha": "75630ae1f86d84b6efa8f3b5fce8dc9f334e758f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 1,
        "changes": 188,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b449dc254f253222e71ada11a36d469a059f01/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b449dc254f253222e71ada11a36d469a059f01/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=57b449dc254f253222e71ada11a36d469a059f01",
        "patch": "@@ -101,6 +101,50 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n     return wallets.size() == 1 || (request.fHelp && wallets.size() > 0) ? wallets[0] : nullptr;\n }\n \n+bool IsMultiwalletJSONRPCRequest(const JSONRPCRequest& request)\n+{\n+    // check for an asterisk in string\n+    if (URL_DECODE && request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n+        const std::string decoded = URL_DECODE(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n+        if (decoded.size() >= 1 && decoded.back() == '*') {\n+            // currently only allow last character wildcart pattern\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue ExecForeachWalletJSONRPCRequest(JSONRPCRequest mutable_request, const rpcfn_type& func) {\n+    std::string search_string = URL_DECODE(mutable_request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n+    const size_t pos = search_string.find('*');\n+    assert(pos != std::string::npos); // we must have checked earlier for an asterisk\n+    search_string = search_string.substr(0, pos);\n+    UniValue response_array(UniValue::VARR);\n+    for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n+        const std::string wallet_name = wallet.get()->GetName();\n+        if (wallet_name.find('*') != std::string::npos || wallet_name.size() < search_string.size() || wallet_name.find(search_string) == std::string::npos) {\n+            // skip in case the wallet contains an asterisk to avoid an endless loop\n+            continue;\n+        }\n+\n+        // no need to urlencode since this only passes internally and a second urldecode won't hurt\n+        mutable_request.URI = WALLET_ENDPOINT_BASE+wallet.get()->GetName();\n+\n+        // form and append a per wallet response\n+        UniValue per_wallet_response(UniValue::VOBJ);\n+        per_wallet_response.pushKV(\"walletname\", wallet.get()->GetName());\n+        try {\n+            per_wallet_response.pushKV(\"result\", func(mutable_request));\n+        } catch (const UniValue& obj_err) {\n+            per_wallet_response.pushKV(\"error\", obj_err);\n+        } catch (const std::exception& e) {\n+            per_wallet_response.pushKV(\"error\", JSONRPCError(RPC_PARSE_ERROR, e.what()));\n+        }\n+        response_array.push_back(per_wallet_response);\n+    }\n+    return response_array;\n+}\n+\n bool EnsureWalletIsAvailable(const CWallet* pwallet, bool avoidException)\n {\n     if (pwallet) return true;\n@@ -184,6 +228,10 @@ static std::string LabelFromValue(const UniValue& value)\n \n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getnewaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -237,6 +285,10 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n \n static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getrawchangeaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -283,6 +335,10 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n static UniValue setlabel(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &setlabel);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -355,6 +411,10 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &sendtoaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -451,6 +511,10 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listaddressgroupings);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -514,6 +578,10 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n static UniValue signmessage(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &signmessage);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -620,6 +688,10 @@ static CAmount GetReceived(interfaces::Chain::Lock& locked_chain, const CWallet&\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getreceivedbyaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -661,6 +733,10 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getreceivedbylabel);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -702,6 +778,10 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n static UniValue getbalance(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getbalance);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -760,6 +840,10 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getunconfirmedbalance);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -787,6 +871,10 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n static UniValue sendmany(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &sendmany);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -922,6 +1010,10 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n static UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &addmultisigaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -1165,6 +1257,10 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, const CWalle\n \n static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listreceivedbyaddress);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -1217,6 +1313,10 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listreceivedbylabel);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -1379,6 +1479,10 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listtransactions);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -1493,6 +1597,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listsinceblock);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -1635,6 +1743,10 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n static UniValue gettransaction(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &gettransaction);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -1749,6 +1861,10 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n static UniValue abandontransaction(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &abandontransaction);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -1831,6 +1947,10 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n \n static UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &keypoolrefill);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -1879,6 +1999,10 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n \n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &walletpassphrase);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -2022,6 +2146,10 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n static UniValue walletlock(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &walletlock);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -2124,6 +2252,10 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n \n static UniValue lockunspent(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &lockunspent);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -2251,6 +2383,10 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n \n static UniValue listlockunspent(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listlockunspent);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -2351,6 +2487,10 @@ static UniValue settxfee(const JSONRPCRequest& request)\n \n static UniValue getbalances(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getbalances);\n+    }\n+\n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(rpc_wallet.get(), request.fHelp)) {\n         return NullUniValue;\n@@ -2419,6 +2559,9 @@ static UniValue getbalances(const JSONRPCRequest& request)\n \n static UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getwalletinfo);\n+    }\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -2624,6 +2767,10 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue setwalletflag(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &setwalletflag);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -2801,6 +2948,10 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n \n static UniValue listunspent(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listunspent);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -3135,6 +3286,10 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n static UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &fundrawtransaction);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -3235,6 +3390,10 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &signrawtransactionwithwallet);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -3330,10 +3489,13 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &bumpfee);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n@@ -3704,6 +3866,10 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n \n UniValue getaddressinfo(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getaddressinfo);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -3847,6 +4013,10 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &getaddressesbylabel);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -3907,6 +4077,10 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n \n static UniValue listlabels(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &listlabels);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -3963,6 +4137,10 @@ static UniValue listlabels(const JSONRPCRequest& request)\n \n UniValue sethdseed(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &sethdseed);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n@@ -4041,6 +4219,10 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n UniValue walletprocesspsbt(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &walletprocesspsbt);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n \n@@ -4108,6 +4290,10 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n \n UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n {\n+    if (IsMultiwalletJSONRPCRequest(request)) {\n+        return ExecForeachWalletJSONRPCRequest(request, &walletcreatefundedpsbt);\n+    }\n+\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n "
      },
      {
        "sha": "5dd51266b3e53b502799e09e5bda559a77f859a8",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b449dc254f253222e71ada11a36d469a059f01/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b449dc254f253222e71ada11a36d469a059f01/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=57b449dc254f253222e71ada11a36d469a059f01",
        "patch": "@@ -38,6 +38,10 @@ void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique\n  */\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n+bool IsMultiwalletJSONRPCRequest(const JSONRPCRequest& request);\n+typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n+UniValue ExecForeachWalletJSONRPCRequest(JSONRPCRequest mutable_request, const rpcfn_type& func);\n+\n void EnsureWalletIsUnlocked(const CWallet*);\n bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);"
      }
    ]
  }
]