[
  {
    "sha": "612f746a8ffa265b6877bedbbe21fcbb392f1516",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTJmNzQ2YThmZmEyNjViNjg3N2JlZGJiZTIxZmNiYjM5MmYxNTE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-01-26T18:36:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-03-04T17:24:00Z"
      },
      "message": "util: Add RAII TokenPipe",
      "tree": {
        "sha": "0d9f1e994cd718b698ee03bd63be422d268129cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d9f1e994cd718b698ee03bd63be422d268129cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/612f746a8ffa265b6877bedbbe21fcbb392f1516",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/612f746a8ffa265b6877bedbbe21fcbb392f1516",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/612f746a8ffa265b6877bedbbe21fcbb392f1516",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/612f746a8ffa265b6877bedbbe21fcbb392f1516/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e8116149ca45316e7cdd8ed25ea9a130afd0130",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e8116149ca45316e7cdd8ed25ea9a130afd0130",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e8116149ca45316e7cdd8ed25ea9a130afd0130"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 237,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6a7a49f012ff2a6a7965568013b8937028f5ea68",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/612f746a8ffa265b6877bedbbe21fcbb392f1516/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/612f746a8ffa265b6877bedbbe21fcbb392f1516/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=612f746a8ffa265b6877bedbbe21fcbb392f1516",
        "patch": "@@ -249,6 +249,7 @@ BITCOIN_CORE_H = \\\n   util/system.h \\\n   util/threadnames.h \\\n   util/time.h \\\n+  util/tokenpipe.h \\\n   util/trace.h \\\n   util/translation.h \\\n   util/ui_change_type.h \\\n@@ -577,6 +578,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/strencodings.cpp \\\n   util/string.cpp \\\n   util/time.cpp \\\n+  util/tokenpipe.cpp \\\n   $(BITCOIN_CORE_H)\n \n if USE_LIBEVENT"
      },
      {
        "sha": "79465dd430bdd5e93707f53585110ca6661deb6d",
        "filename": "src/util/tokenpipe.cpp",
        "status": "added",
        "additions": 108,
        "deletions": 0,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/612f746a8ffa265b6877bedbbe21fcbb392f1516/src/util/tokenpipe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/612f746a8ffa265b6877bedbbe21fcbb392f1516/src/util/tokenpipe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/tokenpipe.cpp?ref=612f746a8ffa265b6877bedbbe21fcbb392f1516",
        "patch": "@@ -0,0 +1,108 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <util/tokenpipe.h>\n+\n+#include <config/bitcoin-config.h>\n+\n+#ifndef WIN32\n+\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+\n+TokenPipeEnd TokenPipe::TakeReadEnd()\n+{\n+    TokenPipeEnd res(m_fds[0]);\n+    m_fds[0] = -1;\n+    return res;\n+}\n+\n+TokenPipeEnd TokenPipe::TakeWriteEnd()\n+{\n+    TokenPipeEnd res(m_fds[1]);\n+    m_fds[1] = -1;\n+    return res;\n+}\n+\n+TokenPipeEnd::TokenPipeEnd(int fd) : m_fd(fd)\n+{\n+}\n+\n+TokenPipeEnd::~TokenPipeEnd()\n+{\n+    Close();\n+}\n+\n+int TokenPipeEnd::TokenWrite(uint8_t token)\n+{\n+    while (true) {\n+        ssize_t result = write(m_fd, &token, 1);\n+        if (result < 0) {\n+            // Failure. It's possible that the write was interrupted by a signal,\n+            // in that case retry.\n+            if (errno != EINTR) {\n+                return TS_ERR;\n+            }\n+        } else if (result == 0) {\n+            return TS_EOS;\n+        } else { // ==1\n+            return 0;\n+        }\n+    }\n+}\n+\n+int TokenPipeEnd::TokenRead()\n+{\n+    uint8_t token;\n+    while (true) {\n+        ssize_t result = read(m_fd, &token, 1);\n+        if (result < 0) {\n+            // Failure. Check if the read was interrupted by a signal,\n+            // in that case retry.\n+            if (errno != EINTR) {\n+                return TS_ERR;\n+            }\n+        } else if (result == 0) {\n+            return TS_EOS;\n+        } else { // ==1\n+            return token;\n+        }\n+    }\n+    return token;\n+}\n+\n+void TokenPipeEnd::Close()\n+{\n+    if (m_fd != -1) close(m_fd);\n+    m_fd = -1;\n+}\n+\n+std::optional<TokenPipe> TokenPipe::Make()\n+{\n+    int fds[2] = {-1, -1};\n+#if HAVE_O_CLOEXEC && HAVE_DECL_PIPE2\n+    if (pipe2(fds, O_CLOEXEC) != 0) {\n+        return std::nullopt;\n+    }\n+#else\n+    if (pipe(fds) != 0) {\n+        return std::nullopt;\n+    }\n+#endif\n+    return TokenPipe(fds);\n+}\n+\n+TokenPipe::~TokenPipe()\n+{\n+    Close();\n+}\n+\n+void TokenPipe::Close()\n+{\n+    if (m_fds[0] != -1) close(m_fds[0]);\n+    if (m_fds[1] != -1) close(m_fds[1]);\n+    m_fds[0] = m_fds[1] = -1;\n+}\n+\n+#endif // WIN32"
      },
      {
        "sha": "f56be93a38c93875ba4ca2dcb5ba0234a402b8b8",
        "filename": "src/util/tokenpipe.h",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/612f746a8ffa265b6877bedbbe21fcbb392f1516/src/util/tokenpipe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/612f746a8ffa265b6877bedbbe21fcbb392f1516/src/util/tokenpipe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/tokenpipe.h?ref=612f746a8ffa265b6877bedbbe21fcbb392f1516",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_TOKENPIPE_H\n+#define BITCOIN_UTIL_TOKENPIPE_H\n+\n+#ifndef WIN32\n+\n+#include <cstdint>\n+#include <optional>\n+\n+/** One end of a token pipe. */\n+class TokenPipeEnd\n+{\n+private:\n+    int m_fd = -1;\n+\n+public:\n+    TokenPipeEnd(int fd = -1);\n+    ~TokenPipeEnd();\n+\n+    /** Return value constants for TokenWrite and TokenRead. */\n+    enum Status {\n+        TS_ERR = -1, //!< I/O error\n+        TS_EOS = -2, //!< Unexpected end of stream\n+    };\n+\n+    /** Write token to endpoint.\n+     *\n+     * @returns 0       If successful.\n+     *          <0 if error:\n+     *            TS_ERR  If an error happened.\n+     *            TS_EOS  If end of stream happened.\n+     */\n+    int TokenWrite(uint8_t token);\n+\n+    /** Read token from endpoint.\n+     *\n+     * @returns >=0     Token value, if successful.\n+     *          <0 if error:\n+     *            TS_ERR  If an error happened.\n+     *            TS_EOS  If end of stream happened.\n+     */\n+    int TokenRead();\n+\n+    /** Explicit close function.\n+     */\n+    void Close();\n+\n+    /** Return whether endpoint is open.\n+     */\n+    bool IsOpen() { return m_fd != -1; }\n+\n+    // Move-only class.\n+    TokenPipeEnd(TokenPipeEnd&& other)\n+    {\n+        m_fd = other.m_fd;\n+        other.m_fd = -1;\n+    }\n+    TokenPipeEnd& operator=(TokenPipeEnd&& other)\n+    {\n+        Close();\n+        m_fd = other.m_fd;\n+        other.m_fd = -1;\n+        return *this;\n+    }\n+    TokenPipeEnd(const TokenPipeEnd&) = delete;\n+    TokenPipeEnd& operator=(const TokenPipeEnd&) = delete;\n+};\n+\n+/** An interprocess or interthread pipe for sending tokens (one-byte values)\n+ * over.\n+ */\n+class TokenPipe\n+{\n+private:\n+    int m_fds[2] = {-1, -1};\n+\n+    TokenPipe(int fds[2]) : m_fds{fds[0], fds[1]} {}\n+\n+public:\n+    ~TokenPipe();\n+\n+    /** Create a new pipe.\n+     * @returns The created TokenPipe, or an empty std::nullopt in case of error.\n+     */\n+    static std::optional<TokenPipe> Make();\n+\n+    /** Take the read end of this pipe. This can only be called once,\n+     * as the object will be moved out.\n+     */\n+    TokenPipeEnd TakeReadEnd();\n+\n+    /** Take the write end of this pipe. This should only be called once,\n+     * as the object will be moved out.\n+     */\n+    TokenPipeEnd TakeWriteEnd();\n+\n+    /** Close and end of the pipe that hasn't been moved out.\n+     */\n+    void Close();\n+\n+    // Move-only class.\n+    TokenPipe(TokenPipe&& other)\n+    {\n+        for (int i = 0; i < 2; ++i) {\n+            m_fds[i] = other.m_fds[i];\n+            other.m_fds[i] = -1;\n+        }\n+    }\n+    TokenPipe& operator=(TokenPipe&& other)\n+    {\n+        Close();\n+        for (int i = 0; i < 2; ++i) {\n+            m_fds[i] = other.m_fds[i];\n+            other.m_fds[i] = -1;\n+        }\n+        return *this;\n+    }\n+    TokenPipe(const TokenPipe&) = delete;\n+    TokenPipe& operator=(const TokenPipe&) = delete;\n+};\n+\n+#endif // WIN32\n+\n+#endif // BITCOIN_UTIL_TOKENPIPE_H"
      }
    ]
  },
  {
    "sha": "c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2U2ZmRlZTZkMzlkM2Y1MmRlYzQyMWI0OGEwYWM4YmFkNTAwNmY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-01-26T18:34:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-03-04T17:24:00Z"
      },
      "message": "shutdown: Use RAII TokenPipe in shutdown",
      "tree": {
        "sha": "1662d3f5e07cc9d044834cdc8528e42d67ecc907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1662d3f5e07cc9d044834cdc8528e42d67ecc907"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "612f746a8ffa265b6877bedbbe21fcbb392f1516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/612f746a8ffa265b6877bedbbe21fcbb392f1516",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/612f746a8ffa265b6877bedbbe21fcbb392f1516"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 17,
      "deletions": 39
    },
    "files": [
      {
        "sha": "2fc195e2d16d0f9866c708d521393a454c34e197",
        "filename": "src/shutdown.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 39,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7/src/shutdown.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7/src/shutdown.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/shutdown.cpp?ref=c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
        "patch": "@@ -5,16 +5,15 @@\n \n #include <shutdown.h>\n \n+#include <logging.h>\n+#include <util/tokenpipe.h>\n+\n #include <config/bitcoin-config.h>\n \n #include <assert.h>\n #include <atomic>\n #ifdef WIN32\n #include <condition_variable>\n-#else\n-#include <errno.h>\n-#include <fcntl.h>\n-#include <unistd.h>\n #endif\n \n static std::atomic<bool> fRequestShutdown(false);\n@@ -24,25 +23,18 @@ std::mutex g_shutdown_mutex;\n std::condition_variable g_shutdown_cv;\n #else\n /** On UNIX-like operating systems use the self-pipe trick.\n- * Index 0 will be the read end of the pipe, index 1 the write end.\n  */\n-static int g_shutdown_pipe[2] = {-1, -1};\n+static TokenPipeEnd g_shutdown_r;\n+static TokenPipeEnd g_shutdown_w;\n #endif\n \n bool InitShutdownState()\n {\n #ifndef WIN32\n-#if HAVE_O_CLOEXEC && HAVE_DECL_PIPE2\n-    // If we can, make sure that the file descriptors are closed on exec()\n-    // to prevent interference.\n-    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n-        return false;\n-    }\n-#else\n-    if (pipe(g_shutdown_pipe) != 0) {\n-        return false;\n-    }\n-#endif\n+    std::optional<TokenPipe> pipe = TokenPipe::Make();\n+    if (!pipe) return false;\n+    g_shutdown_r = pipe->TakeReadEnd();\n+    g_shutdown_w = pipe->TakeWriteEnd();\n #endif\n     return true;\n }\n@@ -59,17 +51,10 @@ void StartShutdown()\n     // case of a reentrant signal.\n     if (!fRequestShutdown.exchange(true)) {\n         // Write an arbitrary byte to the write end of the shutdown pipe.\n-        const char token = 'x';\n-        while (true) {\n-            int result = write(g_shutdown_pipe[1], &token, 1);\n-            if (result < 0) {\n-                // Failure. It's possible that the write was interrupted by another signal.\n-                // Other errors are unexpected here.\n-                assert(errno == EINTR);\n-            } else {\n-                assert(result == 1);\n-                break;\n-            }\n+        int res = g_shutdown_w.TokenWrite('x');\n+        if (res != 0) {\n+            LogPrintf(\"Sending shutdown token failed\\n\");\n+            assert(0);\n         }\n     }\n #endif\n@@ -96,17 +81,10 @@ void WaitForShutdown()\n     std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     g_shutdown_cv.wait(lk, [] { return fRequestShutdown.load(); });\n #else\n-    char token;\n-    while (true) {\n-        int result = read(g_shutdown_pipe[0], &token, 1);\n-        if (result < 0) {\n-            // Failure. Check if the read was interrupted by a signal.\n-            // Other errors are unexpected here.\n-            assert(errno == EINTR);\n-        } else {\n-            assert(result == 1);\n-            break;\n-        }\n+    int res = g_shutdown_r.TokenRead();\n+    if (res != 'x') {\n+        LogPrintf(\"Reading shutdown token failed\\n\");\n+        assert(0);\n     }\n #endif\n }"
      }
    ]
  },
  {
    "sha": "e017a913d0d78ef0766cf73586fe7a38488e1a26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDE3YTkxM2QwZDc4ZWYwNzY2Y2Y3MzU4NmZlN2EzODQ4OGUxYTI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-01-25T21:45:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-03-04T17:24:00Z"
      },
      "message": "bitcoind: Add -daemonwait option to wait for initialization\n\nThis adds a `-daemonwait` flag that does the same as `-daemon` except\nit, from a user perspective, backgrounds the process only after\ninitialization is complete.\n\nThis can be useful when the process launching bitcoind wants to\nguarantee that either the RPC server is running, or that initialization\nfailed, before continuing. The exit code indicates the initialization\nresult.\n\nThis replaces the use of the libc function `daemon()` by a custom\nimplementation which is inspired by the glibc implementation, but also\ncreates a pipe from the child to the parent process for communication.\n\nAn additional advantage of having our own `daemon()` implementation is\nthat no MACOS-specific pragmas are needed anymore to silence a\ndeprecation warning.",
      "tree": {
        "sha": "f5d47c98db9c0c32c59a0f08aaeb6aaed75dbe70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5d47c98db9c0c32c59a0f08aaeb6aaed75dbe70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e017a913d0d78ef0766cf73586fe7a38488e1a26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e017a913d0d78ef0766cf73586fe7a38488e1a26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e017a913d0d78ef0766cf73586fe7a38488e1a26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e017a913d0d78ef0766cf73586fe7a38488e1a26/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3e6fdee6d39d3f52dec421b48a0ac8bad5006f7"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 128,
      "deletions": 18
    },
    "files": [
      {
        "sha": "dd01cb29eb361cdb7aa35f0e907aa1d0aa8a7efd",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e017a913d0d78ef0766cf73586fe7a38488e1a26/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e017a913d0d78ef0766cf73586fe7a38488e1a26/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=e017a913d0d78ef0766cf73586fe7a38488e1a26",
        "patch": "@@ -92,9 +92,9 @@\n    don't. */\n #define HAVE_DECL_BSWAP_64 0\n \n-/* Define to 1 if you have the declaration of `daemon', and to 0 if you don't.\n+/* Define to 1 if you have the declaration of `fork', and to 0 if you don't.\n    */\n-#define HAVE_DECL_DAEMON 0\n+#define HAVE_DECL_FORK 0\n \n /* Define to 1 if you have the declaration of `htobe16', and to 0 if you\n    don't. */\n@@ -132,6 +132,10 @@\n    don't. */\n #define HAVE_DECL_LE64TOH 0\n \n+/* Define to 1 if you have the declaration of `setsid', and to 0 if you don't.\n+   */\n+#define HAVE_DECL_SETSID 0\n+\n /* Define to 1 if you have the declaration of `strerror_r', and to 0 if you\n    don't. */\n #define HAVE_DECL_STRERROR_R 0"
      },
      {
        "sha": "3b318cb2dfefcc5c3e0690b2d0ce017ee007eb45",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e017a913d0d78ef0766cf73586fe7a38488e1a26/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e017a913d0d78ef0766cf73586fe7a38488e1a26/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e017a913d0d78ef0766cf73586fe7a38488e1a26",
        "patch": "@@ -922,8 +922,9 @@ AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n )\n AC_CHECK_DECLS([strnlen])\n \n-dnl Check for daemon(3), unrelated to --with-daemon (although used by it)\n-AC_CHECK_DECLS([daemon])\n+dnl These are used for daemonization in bitcoind\n+AC_CHECK_DECLS([fork])\n+AC_CHECK_DECLS([setsid])\n \n AC_CHECK_DECLS([pipe2])\n "
      },
      {
        "sha": "32f06aec2c19f4843f87885b2c1048bc9e8675e3",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 12,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e017a913d0d78ef0766cf73586fe7a38488e1a26/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e017a913d0d78ef0766cf73586fe7a38488e1a26/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=e017a913d0d78ef0766cf73586fe7a38488e1a26",
        "patch": "@@ -20,6 +20,7 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n+#include <util/tokenpipe.h>\n #include <util/translation.h>\n #include <util/url.h>\n \n@@ -28,6 +29,79 @@\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = urlDecode;\n \n+#if HAVE_DECL_FORK\n+\n+/** Custom implementation of daemon(). This implements the same order of operations as glibc.\n+ * Opens a pipe to the child process to be able to wait for an event to occur.\n+ *\n+ * @returns 0 if successful, and in child process.\n+ *          >0 if successful, and in parent process.\n+ *          -1 in case of error (in parent process).\n+ *\n+ *          In case of success, endpoint will be one end of a pipe from the child to parent process,\n+ *          which can be used with TokenWrite (in the child) or TokenRead (in the parent).\n+ */\n+int fork_daemon(bool nochdir, bool noclose, TokenPipeEnd& endpoint)\n+{\n+    // communication pipe with child process\n+    std::optional<TokenPipe> umbilical = TokenPipe::Make();\n+    if (!umbilical) {\n+        return -1; // pipe or pipe2 failed.\n+    }\n+\n+    int pid = fork();\n+    if (pid < 0) {\n+        return -1; // fork failed.\n+    }\n+    if (pid != 0) {\n+        // Parent process gets read end, closes write end.\n+        endpoint = umbilical->TakeReadEnd();\n+        umbilical->TakeWriteEnd().Close();\n+\n+        int status = endpoint.TokenRead();\n+        if (status != 0) { // Something went wrong while setting up child process.\n+            endpoint.Close();\n+            return -1;\n+        }\n+\n+        return pid;\n+    }\n+    // Child process gets write end, closes read end.\n+    endpoint = umbilical->TakeWriteEnd();\n+    umbilical->TakeReadEnd().Close();\n+\n+#if HAVE_DECL_SETSID\n+    if (setsid() < 0) {\n+        exit(1); // setsid failed.\n+    }\n+#endif\n+\n+    if (!nochdir) {\n+        if (chdir(\"/\") != 0) {\n+            exit(1); // chdir failed.\n+        }\n+    }\n+    if (!noclose) {\n+        // Open /dev/null, and clone it into STDIN, STDOUT and STDERR to detach\n+        // from terminal.\n+        int fd = open(\"/dev/null\", O_RDWR);\n+        if (fd >= 0) {\n+            bool err = dup2(fd, STDIN_FILENO) < 0 || dup2(fd, STDOUT_FILENO) < 0 || dup2(fd, STDERR_FILENO) < 0;\n+            // Don't close if fd<=2 to try to handle the case where the program was invoked without any file descriptors open.\n+            if (fd > 2) close(fd);\n+            if (err) {\n+                exit(1); // dup2 failed.\n+            }\n+        } else {\n+            exit(1); // open /dev/null failed.\n+        }\n+    }\n+    endpoint.TokenWrite(0); // Success\n+    return 0;\n+}\n+\n+#endif\n+\n static bool AppInit(int argc, char* argv[])\n {\n     NodeContext node;\n@@ -59,6 +133,14 @@ static bool AppInit(int argc, char* argv[])\n         return true;\n     }\n \n+#if HAVE_DECL_FORK\n+    // Communication with parent after daemonizing. This is used for signalling in the following ways:\n+    // - a boolean token is sent when the initialization process (all the Init* functions) have finished to indicate\n+    // that the parent process can quit, and whether it was successful/unsuccessful.\n+    // - an unexpected shutdown of the child process creates an unexpected end of stream at the parent\n+    // end, which is interpreted as failure to start.\n+    TokenPipeEnd daemon_ep;\n+#endif\n     util::Ref context{node};\n     try\n     {\n@@ -105,24 +187,34 @@ static bool AppInit(int argc, char* argv[])\n             // InitError will have been called with detailed error, which ends up on console\n             return false;\n         }\n-        if (args.GetBoolArg(\"-daemon\", false)) {\n-#if HAVE_DECL_DAEMON\n-#if defined(MAC_OSX)\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n-#endif\n+        if (args.GetBoolArg(\"-daemon\", DEFAULT_DAEMON) || args.GetBoolArg(\"-daemonwait\", DEFAULT_DAEMONWAIT)) {\n+#if HAVE_DECL_FORK\n             tfm::format(std::cout, PACKAGE_NAME \" starting\\n\");\n \n             // Daemonize\n-            if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                return InitError(Untranslated(strprintf(\"daemon() failed: %s\\n\", strerror(errno))));\n+            switch (fork_daemon(1, 0, daemon_ep)) { // don't chdir (1), do close FDs (0)\n+            case 0: // Child: continue.\n+                // If -daemonwait is not enabled, immediately send a success token the parent.\n+                if (!args.GetBoolArg(\"-daemonwait\", DEFAULT_DAEMONWAIT)) {\n+                    daemon_ep.TokenWrite(1);\n+                    daemon_ep.Close();\n+                }\n+                break;\n+            case -1: // Error happened.\n+                return InitError(Untranslated(strprintf(\"fork_daemon() failed: %s\\n\", strerror(errno))));\n+            default: { // Parent: wait and exit.\n+                int token = daemon_ep.TokenRead();\n+                if (token) { // Success\n+                    exit(EXIT_SUCCESS);\n+                } else { // fRet = false or token read error (premature exit).\n+                    tfm::format(std::cerr, \"Error during initializaton - check debug.log for details\\n\");\n+                    exit(EXIT_FAILURE);\n+                }\n+            }\n             }\n-#if defined(MAC_OSX)\n-#pragma GCC diagnostic pop\n-#endif\n #else\n             return InitError(Untranslated(\"-daemon is not supported on this operating system\\n\"));\n-#endif // HAVE_DECL_DAEMON\n+#endif // HAVE_DECL_FORK\n         }\n         // Lock data directory after daemonization\n         if (!AppInitLockDataDirectory())\n@@ -138,6 +230,13 @@ static bool AppInit(int argc, char* argv[])\n         PrintExceptionContinue(nullptr, \"AppInit()\");\n     }\n \n+#if HAVE_DECL_FORK\n+    if (daemon_ep.IsOpen()) {\n+        // Signal initialization status to parent, then close pipe.\n+        daemon_ep.TokenWrite(fRet);\n+        daemon_ep.Close();\n+    }\n+#endif\n     if (fRet) {\n         WaitForShutdown();\n     }"
      },
      {
        "sha": "8adb637d6e8a7c63a37667d1cb8a49536451f58e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e017a913d0d78ef0766cf73586fe7a38488e1a26/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e017a913d0d78ef0766cf73586fe7a38488e1a26/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e017a913d0d78ef0766cf73586fe7a38488e1a26",
        "patch": "@@ -577,8 +577,9 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n-#if HAVE_DECL_DAEMON\n-    argsman.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#if HAVE_DECL_FORK\n+    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n #endif"
      },
      {
        "sha": "34bca09dd155a3d9f94ed04fb9762d3b2da5c846",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e017a913d0d78ef0766cf73586fe7a38488e1a26/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e017a913d0d78ef0766cf73586fe7a38488e1a26/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=e017a913d0d78ef0766cf73586fe7a38488e1a26",
        "patch": "@@ -9,6 +9,11 @@\n #include <memory>\n #include <string>\n \n+//! Default value for -daemon option\n+static constexpr bool DEFAULT_DAEMON = false;\n+//! Default value for -daemonwait option\n+static constexpr bool DEFAULT_DAEMONWAIT = false;\n+\n class ArgsManager;\n struct NodeContext;\n namespace interfaces {"
      }
    ]
  }
]