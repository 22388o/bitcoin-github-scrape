hebasto,2021-01-25 22:29:47,"> This can be useful when the process launching bitcoind wants to guarantee that either the RPC server is running, or that initialization failed, before continuing. The exit code indicates the initialization result.\n\nWhy such behavior couldn't be the default?",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-767155783,767155783,
laanwj,2021-01-25 22:33:10,"> Why such behavior couldn't be the default?\n\nI didn't do that to avoid that discussion for now :slightly_smiling_face: . It could always be made default at some point in the future if that's what people want.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-767157237,767157237,
hebasto,2021-01-25 22:34:36,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-767157806,767157806,
DrahtBot,2021-01-26 02:08:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21366 (refactor: replace util::Ref with std::any (C++17) by theStack)\n* #19471 (util: Make default arg values more speci",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-767235287,767235287,
practicalswift,2021-01-26 09:37:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-767421905,767421905,
theStack,2021-01-26 18:57:30,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-767756333,767756333,
laanwj,2021-01-27 13:57:32,"Thanks for testing! FWIW what I use to force a failure in `AppInitMain` is\n```\nsrc/bitcoind -regtest -daemonwait -pid=/invalid/path\n```\n(pid is, by definition, only written in the daemon process)\nBut that works too :smile: ",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768302433,768302433,
hebasto,2021-01-27 14:01:26,"> (pid is, by definition, only written in the daemon process)\n\nNot sure if this is true in the master branch.\n",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768305065,768305065,
laanwj,2021-01-27 14:11:04,"> Not sure if this is true in the master branch.\n\nI am sure of this. I did not change this at all, and besides, it would be a bug otherwise. After all, what use is the temporary parent process' PID.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768311235,768311235,
hebasto,2021-01-27 14:17:39,"> ... it would be a bug otherwise.\n\n```\nsrc/bitcoind -daemon=0\n```\ncreates `bitcoind.pid`",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768315306,768315306,
laanwj,2021-01-27 14:24:04,"> creates bitcoind.pid\n\nThat's not my point. My point is that it creates the PID file *after* daemonizing (when daemon is enabled). Sure, it also creates the PID file otherwise, that's okay. The only thing I was trying to say is that the option can be used for testing `-daemonwait` because it fails after daemonizing, nothing more.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768319284,768319284,
laanwj,2021-01-27 18:13:08,"Thanks for testing @jonatack ,\n\n> (this particular case does not log anything to the debug log)\n\nThat it doesn't log anything is peculiar ! (but unrelated to this PR, I guess, the same problem would happen with `-daemon`, it would just mysteriously exit in the background).\n\n> Ctrl-C works with a second or two of delay; it seems to not take effect until the wait is released but I'm not ",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768474737,768474737,
jonatack,2021-01-27 20:23:43,"Tested with testnet, which is much slower than signet for me (95 sec vs 3)\n```\n$ time ./src/bitcoind -testnet -daemonwait=1 && ./src/bitcoin-cli -testnet stop\nBitcoin Core starting\n\nreal	1m35.265s\nuser	0m0.137s\nsys	0m0.015s\nBitcoin Core stopping\n$\n```\n\nCtrl-C right after launching interrupts successfully after the same time period elapses \n```\n$ time ./src/bitcoind -tes",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-768553517,768553517,
laanwj,2021-01-28 12:01:54,"I've looked into this a bit.\n\nIt looks like that until the parent process exits, the child process is still attached to the terminal (or at least, shell session), so it still gets the `SIGINT` from Ctrl-C directly. Even though it did `dup2` `stdin/stdout/stderr` to `/dev/null` already.\n\nSo there appears to be no need to do explicit signal propagation. That's neat. I'll remove that TODO and",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-769007341,769007341,
laanwj,2021-02-16 19:06:19,"Addressed @theStack's comments:\n- Added `TokenPipe::create()` that returns an optional (and make `TokenPipe` movable, and its constructor private), instead of the awkward incomplete construction.\n- Call `Close()` in destructor instead of duplicating code.\n- Consistently pass int to `TokenWrite`.\n- Fixed typos in comments.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-780054109,780054109,
laanwj,2021-02-18 12:18:10,"Thanks again for the review @theStack \nPushed https://github.com/bitcoin/bitcoin/compare/48858432bc7ef3e02685b693954173e722bae4e5..652d4e4382e8964db3e1ba6e4bb8247daad7ae64",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-781303729,781303729,
laanwj,2021-02-22 12:40:02,"Thanks for testing!\n\n> Should disallow conflict options like -daemon=false -daemonwait=true?\n\nI'm not sure they're really conflicting (""enable wait-for-daemon, but don't daemonize""), though pointless, I see no reason to add a special error message for this.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-783345611,783345611,
promag,2021-02-22 12:51:46,My point is with `-daemon=false -daemonwait=true` it will daemonize.,https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-783351622,783351622,
laanwj,2021-02-22 13:12:27,"> My point is with -daemon=false -daemonwait=true it will daemonize.\n\nOh that's intentional, it means that you can just write `bitcoind -daemonwait` and it will work instead of having to do `bitcoind -daemon -daemonwait`.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-783363821,783363821,
laanwj,2021-02-23 18:07:48,Rebased for  #21250.,https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-784396850,784396850,
laanwj,2021-03-03 12:58:37,"@hebasto @jonatack @ajtowns\nThanks for the reviews. I have addressed your comments.",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-789696470,789696470,
laanwj,2021-03-04 14:14:04,"Thanks @jonatack, have addressed the comments and re-pushed\n[b83b386c6e03a57f93110dfefdbbf515e62b5753..9a09a494e59b61d7a185da44f9c6736cb536c0c1](https://github.com/bitcoin/bitcoin/compare/b83b386c6e03a57f93110dfefdbbf515e62b5753..9a09a494e59b61d7a185da44f9c6736cb536c0c1)",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-790647321,790647321,
jonatack,2021-03-04 16:09:36,re-ACK 9a09a494e59b61d7a185da44f9c6736cb536c0c1,https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-790731440,790731440,
laanwj,2021-03-04 17:27:31,"Repushed for an ordering issue in `tokenpipe.cpp` reported out-of-band, the implementation file now has same class order as the header\n[9a09a494e59b61d7a185da44f9c6736cb536c0c1..e017a913d0d78ef0766cf73586fe7a38488e1a26](https://github.com/bitcoin/bitcoin/compare/9a09a494e59b61d7a185da44f9c6736cb536c0c1..e017a913d0d78ef0766cf73586fe7a38488e1a26)\n\n",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-790790596,790790596,
jonatack,2021-03-04 18:23:29,"Tested ACK e017a913d0d78ef0766cf73586fe7a38488e1a26 checked change since previous review is move-only\n\n```\n$ time ./src/bitcoind -testnet -daemonwait=1 && ./src/bitcoin-cli -testnet stop\nBitcoin Core starting\n\nreal	1m4.095s\nuser	0m0.132s\nsys	0m0.027s\nBitcoin Core stopping\n\n$ time ./src/bitcoind -testnet -daemonwait=1\nBitcoin Core starting\n^C \nreal	1m5.311s\nuser	0m0.04",https://github.com/bitcoin/bitcoin/pull/21007#issuecomment-790828126,790828126,
hebasto,2021-01-25 22:32:46,s/`ALLOW_ANY`/`ALLOW_BOOL`/ in both lines?,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r564088898,564088898,src/init.cpp
laanwj,2021-01-26 07:28:09,"Good idea!\nI'm also surprised there are no DEFAULT_XXX constants here.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r564296569,564296569,src/init.cpp
theStack,2021-02-02 22:44:16,"Hm, it's always a bit frustrating to see that within a C++ ctor it's impossible to directly signal to the caller that the construction failed (I had to think about this article: https://250bpm.com/blog:4/). Since we can't do anything immediately anyways if there was a failure, I guess the pipe{2} return value checks could simply be dropped?",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r568983015,568983015,src/util/tokenpipe.cpp
theStack,2021-02-02 22:50:21,Could simply call the `Close()` method here to deduplicate? (Only drawback: it unnecessarily sets m_fd to -1 before destroying the object.),https://github.com/bitcoin/bitcoin/pull/21007#discussion_r568985945,568985945,src/util/tokenpipe.cpp
theStack,2021-02-02 22:59:43,"```suggestion\n    /** Return value constants for TokenWrite and TokenRead. */\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r568990330,568990330,src/util/tokenpipe.h
theStack,2021-02-02 23:01:06,"```suggestion\n    /** Write token to file descriptor.\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r568990947,568990947,src/util/tokenpipe.h
theStack,2021-02-02 23:17:20,"nit, feel free to ignore: maybe avoid implicit casting from bool to uint8_t and use literal 1 (or some character literal) as success token instead? I think as it is this could be potentially confusing for readers (also the counterpart `TokenRead` call below). As a drawback though, `-daemonwait` code gets longer: `daemon_ep.TokenWrite(fRet ? 1 : 0)`.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r568997766,568997766,src/bitcoind.cpp
laanwj,2021-02-03 20:14:41,"~~Agree, it's probably better to pass some constant.~~\n~~Or even just fRet as-is? It's an integer after all.~~\nNever mind, i was already doing that, just turned this into a value.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r569717901,569717901,src/bitcoind.cpp
laanwj,2021-02-03 20:20:25,"I was first thinking of using the rust trick: to have a private constructor, and a static public factory function on the class that returns a `std::optional<Pipe>`. But it would complicate some things. E.g. currently this type is not movable at all, it felt like overkill to implement that just for initialization, but maybe it's worth it if we can make it a standard idiom.\n\nHaving to check `com",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r569721308,569721308,src/util/tokenpipe.cpp
laanwj,2021-02-03 20:26:05,"Yes, why not. It seemed like so little code that it wouldn't really be worth deduplicating. I agree the redundant set to `-1` doesn't matter, this is not a performance critical function.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r569724510,569724510,src/util/tokenpipe.cpp
theStack,2021-02-17 23:05:37,"The error-check after TokenPipe creation is missing here, e.g. `if (!pipe) return false;`",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578007134,578007134,src/shutdown.cpp
theStack,2021-02-17 23:06:19,"```suggestion\n        return -1; // pipe or pipe2 failed.\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578007441,578007441,src/bitcoind.cpp
theStack,2021-02-17 23:19:26,"nit:\n```suggestion\n                        if (token == 1) { // fRet == 1, Success\n```\n(probably the token variable could be eliminated by calling `TokenRead` directly in the if condition.)",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578013255,578013255,src/bitcoind.cpp
theStack,2021-02-17 23:21:57,"typos:\n```suggestion\n    // that the parent process can quit, and whether it was successful/unsuccessful.\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578014248,578014248,src/bitcoind.cpp
theStack,2021-02-17 23:29:08,"I didn't know the word before (nice name for a parent-child-pipe 😄), but according to the dictionary the spelling is slightly different:\n```suggestion\n        endpoint = umbilical->ReadEnd();\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578017192,578017192,src/bitcoind.cpp
laanwj,2021-02-18 08:52:18,"~~Good point, will re-add an assertion.~~\n~~All the error handling in `shutdown` consists of assertions but skipping it is a bad idea.~~\nNo, returning false is the right thing to do here.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578235280,578235280,src/shutdown.cpp
laanwj,2021-02-18 08:53:52,"I prefer having a variable here. Having a read as a side effect of an if() clause is kind of meh.\nWill change the `true`.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r578236272,578236272,src/bitcoind.cpp
ajtowns,2021-03-01 10:56:14,Why are you calling `close(fd)` twice? Shouldn't it be a single `if (fd > 2) close(fd);` as per glibc?,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584617352,584617352,src/bitcoind.cpp
ajtowns,2021-03-01 11:07:48,"Calling `umbilical->ReadEnd()` to create the `TokenPipeEnd` then immediately destroy it, which then closes the underlying fd seems a bit clunky. A comment might be worthwhile at least.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584624966,584624966,src/bitcoind.cpp
ajtowns,2021-03-01 11:19:09,"I think this would be incorrect if you had code like: `{ TokenPipe tp; a(); tp.Close(); b(); }` in particular -- the fds would be closed when `Close()` is called, but may be reallocated to different files during `b()` which would then be incorrectly closed when `tp` is destructed.\n\nCould explicitly set `m_fds = {-1,-1}`, or could drop `Close()` entirely and move the code into the destructor --",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584631946,584631946,src/util/tokenpipe.cpp
ajtowns,2021-03-01 11:29:35,"Doesn't matter, but net_processing uses `make` as the name for PeerManager's nearly-but-not-quite-a-constructor.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584638097,584638097,src/util/tokenpipe.cpp
jonatack,2021-03-01 11:35:13,"nit, sort",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584641206,584641206,src/Makefile.am
jonatack,2021-03-01 11:52:59,"`write` seems to be returning ssize_t / long, same for `read` line 86\n```suggestion\n        const long result{write(m_fd, &token, 1)};\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584651551,584651551,src/util/tokenpipe.cpp
jonatack,2021-03-01 11:53:42,these two can be `constexpr`,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584651985,584651985,src/init.h
jonatack,2021-03-01 11:54:46,`fd` and `err` can be const,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584652550,584652550,src/bitcoind.cpp
jonatack,2021-03-01 11:55:41,`res` here and line 54 can be const,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584653087,584653087,src/shutdown.cpp
hebasto,2021-03-01 18:09:18,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\nTokenPipeEnd::TokenPipeEnd(int fd)\n    : m_fd(fd)\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584938135,584938135,src/util/tokenpipe.cpp
hebasto,2021-03-01 18:10:58,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\nclass TokenPipeEnd\n{\nprivate:\n    int m_fd = -1;\n\npublic:\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584939246,584939246,src/util/tokenpipe.h
hebasto,2021-03-01 18:11:56,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\n    TokenPipeEnd(const TokenPipeEnd&) = delete;\n    TokenPipeEnd& operator=(const TokenPipeEnd&) = delete;\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584939998,584939998,src/util/tokenpipe.h
hebasto,2021-03-01 18:12:25,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\nclass TokenPipe\n{\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584940313,584940313,src/util/tokenpipe.h
hebasto,2021-03-01 18:13:16,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\n    TokenPipe(int fds[2]) : m_fds{fds[0], fds[1]} {}\n\npublic:\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584940905,584940905,src/util/tokenpipe.h
hebasto,2021-03-01 18:13:48,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\n        for (int i = 0; i < 2; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584941276,584941276,src/util/tokenpipe.h
hebasto,2021-03-01 18:14:01,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\n        for (int i = 0; i < 2; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584941408,584941408,src/util/tokenpipe.h
hebasto,2021-03-01 18:14:28,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\n    TokenPipe(const TokenPipe&) = delete;\n    TokenPipe& operator=(const TokenPipe&) = delete;\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584941710,584941710,src/util/tokenpipe.h
hebasto,2021-03-01 18:16:13,"style-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\nint fork_daemon(bool nochdir, bool noclose, TokenPipeEnd& endpoint)\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584942855,584942855,src/bitcoind.cpp
hebasto,2021-03-01 18:22:18,"indentation-nit, suggested by [clang-format-diff.py](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy):\n```suggestion\n            switch (fork_daemon(1, 0, daemon_ep)) { // don't chdir (1), do close FDs (0)\n            case 0: // Child: continue.\n                // If -daemonwait is not enabled, immediately send a success token the parent.\n             ",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584947020,584947020,src/bitcoind.cpp
hebasto,2021-03-01 18:24:01,"Capitalize function name as others?\n```suggestion\n    static std::optional<TokenPipe> Create();\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584948106,584948106,src/util/tokenpipe.h
hebasto,2021-03-01 18:24:35,"```suggestion\n#endif // WIN32\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r584948457,584948457,src/util/tokenpipe.h
laanwj,2021-03-01 21:27:09,I thought about adding an explicit `CloseReadEnd` `CloseWriteEnd` function but as it'd essentially be the same I didn't do so. Will add a comment.,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585061306,585061306,src/bitcoind.cpp
laanwj,2021-03-01 21:28:54,"Will take a look. Agree the fds should be se to -1 after closing them to prevent 'use fd after close' problems, seems I forgot that. I made it like this to be symmetric with `TokenPipeEnd::Close`. Sure, I could move the code around if minimalism was the goal, but I like a consistent API more.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585062353,585062353,src/util/tokenpipe.cpp
laanwj,2021-03-01 21:29:30,"Thanks, I'm fine with a different name, `create` is the convention in rust but Make is fine with me too.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585062645,585062645,src/util/tokenpipe.cpp
laanwj,2021-03-01 21:33:41,What if I call the functions `TakeReadEnd` `TakeWriteEnd` would that make it clearer that a move is happening?,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585065011,585065011,src/bitcoind.cpp
laanwj,2021-03-01 21:37:49,"Uhm, good catch, it should only be closed once. I don't think there's a need to compare it to 2.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585067416,585067416,src/bitcoind.cpp
laanwj,2021-03-01 21:51:45,"Thanks. FWIW it's fine to just mark one of these and say to run `clang-format-diff`, no need to open a review item for every little indentation/style mismatch :smile:  (as this makes it harder to find the more serious comments)",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585075652,585075652,src/util/tokenpipe.h
laanwj,2021-03-01 21:59:09,"good catch with the type, not sure though i like the `{}` initialization style more here, `=` seems to express intent clearer",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585080051,585080051,src/util/tokenpipe.cpp
ajtowns,2021-03-02 04:11:12,Could also write `umbilical->ReadEnd().Close();` (relying on the destructor's second call to Close then being a no-op). I don't really have a preference.,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585234399,585234399,src/bitcoind.cpp
ajtowns,2021-03-02 04:22:46,"The standard reason to compare it to 2 is in case you start the executable with stdin/stdout/stderr already closed -- in that case `fd` will be assigned to 0/1/2 because that's the first free fd, `dup2(fd,stdin)` (or out or err) will evaluate to `dup2(0,0)` and be a no-op, and you'll then call `close(0)` which will leave you without a dummied stdin (or out or err) which will mean some later fd you",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585240397,585240397,src/bitcoind.cpp
ajtowns,2021-03-02 04:24:42,"Yeah, either way. PeerManager could change too; it was just copied from some stackoverflow link or something.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r585241828,585241828,src/util/tokenpipe.cpp
laanwj,2021-03-03 12:06:43,"Ah yea! I think I'll do both.\n```\numbilical->TakeReadEnd().Close();\n```\nFully self-documenting then.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586362501,586362501,src/bitcoind.cpp
laanwj,2021-03-03 12:12:27,Hmm good point. I did not think about that case. It's really unconventional to start binaries with stdin/stdout/stderr closed (the graceful way would be to redirect them to `/dev/null` and I'm not sure we handle this in other places.,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586366126,586366126,src/bitcoind.cpp
laanwj,2021-03-03 12:37:45,"Strange, I guess I had this module named differently at first :smile: ",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586381946,586381946,src/Makefile.am
laanwj,2021-03-03 12:41:02,"I'm not really sure what the common thing is to do for internal variables, do we have a const-unless-required-otherwise recommendation?",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586383949,586383949,src/bitcoind.cpp
jonatack,2021-03-03 12:58:07,"Yes, I don't think it's explicitly stated, other than maybe via the C++ Code Guidelines linked to in the developer notes, but it's what I've been doing/reviewing, and seeing others say and do.",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586394972,586394972,src/bitcoind.cpp
jonatack,2021-03-03 16:28:23,b83b386 s/cout/cerr/?,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586564996,586564996,src/bitcoind.cpp
jonatack,2021-03-03 16:31:33,"0b9994ac\n```suggestion\n#endif // WIN32\n```",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586567883,586567883,src/util/tokenpipe.cpp
jonatack,2021-03-03 16:33:57,b83b386c lines 37 and 38: s/succesful/successful/,https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586569854,586569854,src/bitcoind.cpp
laanwj,2021-03-03 17:02:55,"Yes, why not",https://github.com/bitcoin/bitcoin/pull/21007#discussion_r586606199,586606199,src/bitcoind.cpp
