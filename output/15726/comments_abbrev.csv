ajtowns,2019-04-03T09:47:32Z,"\nExamples:\n\n    $ ./bitcoin-cli -yaml getmempoolinfo\n    size:            54_616\n    bytes:       38_839_175\n    usage:      129_049_712\n    maxmempool: 500_000_000\n    mempoolminfee:        0.000_000_50\n    minrelaytxfee:        0.000_000_50\n\n    $ ./bitcoin-cli -yaml getblockchaininfo\n    chain: ""main""\n    blocks:  570_003\n    headers: 570_003\n    bestblockhash: ""00",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-479419044,479419044,
practicalswift,2019-04-03T09:56:53Z,"Concept ACK\n\nVery nice usability improvement! Thanks!",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-479422229,479422229,
DrahtBot,2019-04-03T11:42:16Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13716](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13716.html) (bitcoin-cli: -stdinwalletpassphrase and non",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-479453585,479453585,
promag,2019-04-03T13:49:32Z,"JSON output is already non minified, which helps readability. Compared to JSON, YAML doesn't reduce the ""syntax"" that much IMO. But if you really prefer yaml then you can pipe the json to a converter:\n```\n./src/bitcoin-cli -regtest getblockchaininfo | json-yaml\nchain: regtest\nblocks: 0\nheaders: 0\nbestblockhash: 0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\ndifficul",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-479497518,479497518,
lucayepa,2019-04-03T20:30:27Z,"I think that the underscore notation for integers is not part of the last YAML specification. It is part of the [YAML version 1.1 specification](https://yaml.org/type/int.html), but there is no mention of it in the [YAML version 1.2 specification](https://yaml.org/spec/1.2/spec.html).",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-479646949,479646949,
jgarzik,2019-04-07T17:29:53Z,"utACK -- main comment is that this is not bitcoin-specific, and makes the most sense as part of https://github.com/jgarzik/univalue\n\nThere, the integration would be as a compiled module, moving code out of the header file and into an optionally-linked separate module.",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-480612421,480612421,
jonasschnelli,2019-04-08T07:05:10Z,I don't see a reason to add another output format to the codebase. Isn't that something that can be handled on shell level (JSON to YAML conversion via pipe) or in the consuming app directly?,https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-480709788,480709788,
ajtowns,2019-04-10T13:30:09Z,"> I think that the underscore notation for integers is not part of the last YAML specification. It is part of the [YAML version 1.1 specification](https://yaml.org/type/int.html), but there is no mention of it in the [YAML version 1.2 specification](https://yaml.org/spec/1.2/spec.html).\n\nI read it that way too, but looking at other implementations and validators, it seems to be at least treate",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-481691440,481691440,
ajtowns,2019-06-06T08:11:28Z,"Closing this -- doesn't seem like YAML will keep supporting this syntax, and TOML doesn't seem enough of a win.",https://github.com/bitcoin/bitcoin/pull/15726#issuecomment-499394449,499394449,
practicalswift,2019-04-07T15:18:29Z,"On systems where `char` is `signed` we're making a sign-changing implicit conversion here by doing `outS += ch;` (from `unsigned char` to `char`).\n\nFrom what I can tell it is benign in this case but it would be nice if we ran Travis tests under both unsigned and signed char systems. See PR #15134 for context and suggested solution.",https://github.com/bitcoin/bitcoin/pull/15726#discussion_r272839041,272839041,src/univalue_write_yaml.h
