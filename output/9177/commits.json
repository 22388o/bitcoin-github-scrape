[
  {
    "sha": "ebdd4aa76c345d13bc01a01feb078c6101378000",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmRkNGFhNzZjMzQ1ZDEzYmMwMWEwMWZlYjA3OGM2MTAxMzc4MDAw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-22T01:50:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T21:38:54Z"
      },
      "message": "Chainparams: Use a regular factory for creating chainparams",
      "tree": {
        "sha": "50562aa36f8a152e66d39f2346ebbd20a740f033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50562aa36f8a152e66d39f2346ebbd20a740f033"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebdd4aa76c345d13bc01a01feb078c6101378000",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh8lyAAoJEIhmwY6hyUSi7V4QAOweetOJe8aV3n1Z5Xy8Q9M3\nqn9XjdNZqZ3f8zo99LScryYbJHPCpgYYraB7ref2pS8dDsWqKBJVPOeTTVpe9rBc\nsTYITgrrX6pMBN0x/fo9EYPeVk7EMm+AF0of2nu/aYHgYm17SRmbHx+EU5HhRjHb\nfH0F8kLg3qkYHwpFiv0cvYb9bAFklTlLBu0DAdwFeDh6aL+Avq9CY6+q4Oj9UG2W\nV2WhTeRdoS4UFWZgLmUozu30MNqbzhEuJ/YV65OOUZQ4gJW1ItOI+ySIJiREq7MC\nhLBquIHQFxhqGJD3iIleVuM7snfosN5IVAHzZ6AexoVJ4ez4XEVvewg8+DUmC99B\nEuXPdQpOZNMWau5fD3ymuwe6pzgtQ0QnRwFkGukqlxSmKYIzmsL/VoJGKON+WpHT\n/MI98AhZp0jnJmyee2MAKbJ5YsHX4uKxc4Wc03bOl2OUmPqhp2dUehvfjc8vSLA9\nH1KVQCUup2UPUetMfpC6h31914gCEEUx2PAGT/4YQjvBy/gjxBve+V1O5Byx1SoN\nu55TsETtjuM3lUKZ/x2asw7ZHqbTVNgqwpsbmhyFWL3uKeqIWnngodZtctdAkrjG\nGsyPwvsXFkktYSOtmohqJKiUMa1MB6DXxx/1WCDEQGw0x7MLEyzCXdFaIjvfU2gU\nIu4Ib0xqz6fETFw4Dkw/\n=nLhb\n-----END PGP SIGNATURE-----",
        "payload": "tree 50562aa36f8a152e66d39f2346ebbd20a740f033\nparent 71148b8947fe8b4d756822420a7f31c380159425\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1432259401 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485293934 +0100\n\nChainparams: Use a regular factory for creating chainparams\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebdd4aa76c345d13bc01a01feb078c6101378000",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebdd4aa76c345d13bc01a01feb078c6101378000",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebdd4aa76c345d13bc01a01feb078c6101378000/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71148b8947fe8b4d756822420a7f31c380159425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 59,
      "deletions": 40
    },
    "files": [
      {
        "sha": "5ee14e6da9e8e100678b267d47691c2367efabc6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdd4aa76c345d13bc01a01feb078c6101378000/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdd4aa76c345d13bc01a01feb078c6101378000/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=ebdd4aa76c345d13bc01a01feb078c6101378000",
        "patch": "@@ -30,6 +30,8 @@ static const int CONTINUE_EXECUTION=-1;\n \n std::string HelpMessageCli()\n {\n+    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n+    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     std::string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n@@ -38,7 +40,7 @@ std::string HelpMessageCli()\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));"
      },
      {
        "sha": "d8b328a78abcda60898cf82b1a38ef33c62fb556",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 21,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ebdd4aa76c345d13bc01a01feb078c6101378000",
        "patch": "@@ -55,6 +55,12 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n+void CChainParams::UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    consensus.vDeployments[d].nStartTime = nStartTime;\n+    consensus.vDeployments[d].nTimeout = nTimeout;\n+}\n+\n /**\n  * Main network\n  */\n@@ -166,7 +172,6 @@ class CMainParams : public CChainParams {\n         };\n     }\n };\n-static CMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -255,7 +260,6 @@ class CTestNetParams : public CChainParams {\n \n     }\n };\n-static CTestNetParams testNetParams;\n \n /**\n  * Regression test\n@@ -329,42 +333,41 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n-\n-    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-    {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n-    }\n };\n-static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = 0;\n+static std::unique_ptr<CChainParams> globalChainParams;\n+static std::unique_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n-    assert(pCurrentParams);\n-    return *pCurrentParams;\n+    assert(globalChainParams);\n+    return *globalChainParams;\n }\n \n-CChainParams& Params(const std::string& chain)\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-            return mainParams;\n+        return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n-            return testNetParams;\n+        return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-            return regTestParams;\n-    else\n-        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+        return std::unique_ptr<CChainParams>(new CRegTestParams());\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+}\n+\n+const CChainParams& Params(const std::string& chain)\n+{\n+    globalSwitchingChainParams = CreateChainParams(chain);\n+    return *globalSwitchingChainParams;\n }\n \n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    pCurrentParams = &Params(network);\n+    globalChainParams = CreateChainParams(network);\n }\n \n-void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n {\n-    regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n+    globalChainParams->UpdateBIP9Parameters(d, nStartTime, nTimeout);\n }\n  "
      },
      {
        "sha": "25573bbdd92ea41699779b139f79acb6a086bd63",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ebdd4aa76c345d13bc01a01feb078c6101378000",
        "patch": "@@ -11,6 +11,7 @@\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n \n+#include <memory>\n #include <vector>\n \n struct CDNSSeedData {\n@@ -77,6 +78,7 @@ class CChainParams\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n+    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n protected:\n     CChainParams() {}\n \n@@ -97,6 +99,13 @@ class CChainParams\n     ChainTxData chainTxData;\n };\n \n+/**\n+ * Creates and returns a std::unique_ptr<CChainParams> of the chosen chain.\n+ * @returns a CChainParams* of the chosen chain.\n+ * @throws a std::runtime_error if the chain is not supported.\n+ */\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n@@ -106,7 +115,7 @@ const CChainParams &Params();\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */\n-CChainParams& Params(const std::string& chain);\n+const CChainParams& Params(const std::string& chain);\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n@@ -117,6 +126,6 @@ void SelectParams(const std::string& chain);\n /**\n  * Allows modifying the BIP9 regtest parameters.\n  */\n-void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "879cca2f0adb4c2dad990edcf07c95246d44be5e",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=ebdd4aa76c345d13bc01a01feb078c6101378000",
        "patch": "@@ -35,7 +35,6 @@ class CBaseMainParams : public CBaseChainParams\n         nRPCPort = 8332;\n     }\n };\n-static CBaseMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -49,7 +48,6 @@ class CBaseTestNetParams : public CBaseChainParams\n         strDataDir = \"testnet3\";\n     }\n };\n-static CBaseTestNetParams testNetParams;\n \n /*\n  * Regression test\n@@ -63,31 +61,30 @@ class CBaseRegTestParams : public CBaseChainParams\n         strDataDir = \"regtest\";\n     }\n };\n-static CBaseRegTestParams regTestParams;\n \n-static CBaseChainParams* pCurrentBaseParams = 0;\n+static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n-    assert(pCurrentBaseParams);\n-    return *pCurrentBaseParams;\n+    assert(globalChainBaseParams);\n+    return *globalChainBaseParams;\n }\n \n-CBaseChainParams& BaseParams(const std::string& chain)\n+std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return mainParams;\n+        return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n-        return testNetParams;\n+        return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-        return regTestParams;\n+        return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)\n {\n-    pCurrentBaseParams = &BaseParams(chain);\n+    globalChainBaseParams = CreateBaseChainParams(chain);\n }\n \n std::string ChainNameFromCommandLine()\n@@ -106,5 +103,5 @@ std::string ChainNameFromCommandLine()\n \n bool AreBaseParamsConfigured()\n {\n-    return pCurrentBaseParams != NULL;\n+    return globalChainBaseParams.get();\n }"
      },
      {
        "sha": "60fedb335c4714fae06a13a397cdb07febf6c0b4",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdd4aa76c345d13bc01a01feb078c6101378000/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=ebdd4aa76c345d13bc01a01feb078c6101378000",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_CHAINPARAMSBASE_H\n #define BITCOIN_CHAINPARAMSBASE_H\n \n+#include <memory>\n #include <string>\n #include <vector>\n \n@@ -30,6 +31,13 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Creates and returns a std::unique_ptr<CBaseChainParams> of the chosen chain.\n+ * @returns a CBaseChainParams* of the chosen chain.\n+ * @throws a std::runtime_error if the chain is not supported.\n+ */\n+std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n+\n /**\n  * Append the help messages for the chainparams options to the\n  * parameter string.\n@@ -42,8 +50,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n  */\n const CBaseChainParams& BaseParams();\n \n-CBaseChainParams& BaseParams(const std::string& chain);\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(const std::string& chain);\n "
      },
      {
        "sha": "94fefc039dc61f6a54c62d47c1da75b9e8281a7c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdd4aa76c345d13bc01a01feb078c6101378000/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdd4aa76c345d13bc01a01feb078c6101378000/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ebdd4aa76c345d13bc01a01feb078c6101378000",
        "patch": "@@ -318,6 +318,8 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n+    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -495,7 +497,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n     if (showDebug) {\n@@ -1081,7 +1083,7 @@ bool AppInitParameterInteraction()\n             for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n             {\n                 if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n-                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                    UpdateBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n                     found = true;\n                     LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n                     break;"
      }
    ]
  },
  {
    "sha": "626210172b963961eda482c07d4295c46a6ffdd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjYyMTAxNzJiOTYzOTYxZWRhNDgyYzA3ZDQyOTVjNDZhNmZmZGQy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-28T14:04:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T21:50:48Z"
      },
      "message": "Chainparams: Get rid of CChainParams& Params(std::string)",
      "tree": {
        "sha": "06221e88c42f33a9d0ab296e386874fc28f062e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06221e88c42f33a9d0ab296e386874fc28f062e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/626210172b963961eda482c07d4295c46a6ffdd2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh8w8AAoJEIhmwY6hyUSieMAQAMZiLTPtZLp5uYkMEYoTwwlr\nJzB7zsuOm9V4lVrRqMbZgw5czOPw6iOwAGsjNQiPw1lIhMi14oJGw3Rrn380JFYw\ncNbkRnq1T+mJqN3KevdfV5SIjiH25lkuguTvtCRz6zI29sXiYnfAj0bZDnYQfFfp\nEycmgd/NEwzmGGRmRGAfYnsuWb40HwJVYvYziRj8EWlNW+X5fzl66fo6dcLnQABE\nvFrrETgEG1cVraOMP7WTGSiEjpREymiHRhSwFy5gmoMY8NKijGfCxQajL2g9Hyh0\n42Ug8iCmioRlJAD+Tdf3yNd66TUTwPECMl1lTkXz+tMXZi9MYcvb6TjJ0Ghp5/f7\n998+2cA0++CulMPfIcaDPxlh4FmXEaXVwADgaRJxgXODJZsBpbj1+CAD0gutNaQW\n5uB81BKzlggNZShgipsO0pJx77at93cGBftHu4KqGXoTvj00w7RpD2x/T2FwxIs3\nVMmsE3u3VQg0tNFpJwswqgav6MNYhhxG/x6yF7rwaVtrTRLSIbzTA7L0FAsn98Od\nR0Pv//5+g0J0T6a2Kmo9LVV0d93U1ssdher6aywx/INYEi0sc3jnBGi+JoQpdhwf\nEn2SgFz5xdS77aqGOm3ihxSVAfPIpcaJaOX6q9lYcW0RCspzWPhfFXTUOZBgCGV6\nQGTAfCt2dfA1YA86o+6v\n=gdRx\n-----END PGP SIGNATURE-----",
        "payload": "tree 06221e88c42f33a9d0ab296e386874fc28f062e6\nparent ebdd4aa76c345d13bc01a01feb078c6101378000\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1448719475 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485294648 +0100\n\nChainparams: Get rid of CChainParams& Params(std::string)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/626210172b963961eda482c07d4295c46a6ffdd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/626210172b963961eda482c07d4295c46a6ffdd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/626210172b963961eda482c07d4295c46a6ffdd2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebdd4aa76c345d13bc01a01feb078c6101378000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebdd4aa76c345d13bc01a01feb078c6101378000",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebdd4aa76c345d13bc01a01feb078c6101378000"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 25,
      "deletions": 29
    },
    "files": [
      {
        "sha": "1c1d47a2cf0feee014cea0d1275c720aa53ce49e",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -40,15 +40,15 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n     char a;\n     stream.write(&a, 1); // Prevent compaction\n \n-    Consensus::Params params = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n \n     while (state.KeepRunning()) {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here\n         stream >> block;\n         assert(stream.Rewind(sizeof(block_bench::block413567)));\n \n         CValidationState validationState;\n-        assert(CheckBlock(block, validationState, params));\n+        assert(CheckBlock(block, validationState, chainParams->GetConsensus()));\n     }\n }\n "
      },
      {
        "sha": "33159f77b94f0a45f92c49e0f7095c94511ea2d8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -336,7 +336,6 @@ class CRegTestParams : public CChainParams {\n };\n \n static std::unique_ptr<CChainParams> globalChainParams;\n-static std::unique_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams);\n@@ -354,12 +353,6 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-const CChainParams& Params(const std::string& chain)\n-{\n-    globalSwitchingChainParams = CreateChainParams(chain);\n-    return *globalSwitchingChainParams;\n-}\n-\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);"
      },
      {
        "sha": "2b6b99804281b19db216564cf15ec50783511c5d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -112,11 +112,6 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n  */\n const CChainParams &Params();\n \n-/**\n- * @returns CChainParams for the given BIP70 chain name.\n- */\n-const CChainParams& Params(const std::string& chain);\n-\n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n  * @throws std::runtime_error when the chain is not supported."
      },
      {
        "sha": "3eb613db9b0a47f480238686c8dec10a6759953e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -320,6 +320,8 @@ std::string HelpMessage(HelpMessageMode mode)\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n+    const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -331,7 +333,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), Params(CBaseChainParams::MAIN).GetConsensus().defaultAssumeValid.GetHex(), Params(CBaseChainParams::TESTNET).GetConsensus().defaultAssumeValid.GetHex()));\n+    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -384,7 +386,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n     strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n@@ -424,8 +426,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n         strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n+        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n+        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n@@ -472,7 +474,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n+        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", defaultChainParams->RequireStandard()));\n         strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n         strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost about 1/3 of its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n     }"
      },
      {
        "sha": "058a3ae848c56e765de405328502cd9d135d5803",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -221,14 +221,16 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n                 CBitcoinAddress address(r.address.toStdString());\n+                auto tempChainParams = CreateChainParams(CBaseChainParams::MAIN);\n \n-                if (address.IsValid(Params(CBaseChainParams::MAIN)))\n+                if (address.IsValid(*tempChainParams))\n                 {\n                     SelectParams(CBaseChainParams::MAIN);\n                 }\n-                else if (address.IsValid(Params(CBaseChainParams::TESTNET)))\n-                {\n-                    SelectParams(CBaseChainParams::TESTNET);\n+                else {\n+                    tempChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+                    if (address.IsValid(*tempChainParams))\n+                        SelectParams(CBaseChainParams::TESTNET);\n                 }\n             }\n         }"
      },
      {
        "sha": "656aec606b6c2cc30a9211418960a3d1f186da85",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -39,17 +39,18 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    TestBlockSubsidyHalvings(Params(CBaseChainParams::MAIN).GetConsensus()); // As in main\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    TestBlockSubsidyHalvings(chainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, chainParams->GetConsensus());\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "34bf41887aa1c171f2bfec8a7f82ef7b717c3bc8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -183,7 +183,8 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     // Note that by default, these tests run with size accounting enabled.\n-    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = *chainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     std::unique_ptr<CBlockTemplate> pblocktemplate;\n     CMutableTransaction tx,tx2;"
      },
      {
        "sha": "90ba0bc31dba6b3058b0c9220f48923ede33698b",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/626210172b963961eda482c07d4295c46a6ffdd2/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/626210172b963961eda482c07d4295c46a6ffdd2/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=626210172b963961eda482c07d4295c46a6ffdd2",
        "patch": "@@ -209,7 +209,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n \n     // Sanity checks of version bit deployments\n-    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n         uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n         // Make sure that no deployment tries to set an invalid bit.\n@@ -235,7 +236,8 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n     // on mainnet.\n-    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes.\n     int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;"
      }
    ]
  },
  {
    "sha": "75ebe97f0779869df36018da146a631e91116b64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWViZTk3ZjA3Nzk4NjlkZjM2MDE4ZGExNDZhNjMxZTkxMTE2YjY0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-20T23:33:08Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T21:50:53Z"
      },
      "message": "Chainparams: Use the factory for pow tests",
      "tree": {
        "sha": "00c83b31a451c1088ace5d5de1876fe2a8fd5f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00c83b31a451c1088ace5d5de1876fe2a8fd5f24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75ebe97f0779869df36018da146a631e91116b64",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh8w9AAoJEIhmwY6hyUSi6VkQAMSMlDZTD0vXhJWX+EZ0HvZ0\na/kPbtGIGuL9SGpC2G7eDx5KSnce8a4iJ5DOIXn9i75AJaLezQcL1UMduqlLE9Jn\nbTM6BsYcCyil36D2Z91QAUhzDnFfNjnytuWGELJK7Bqtylrm320k68hLkiBkxXTR\nmllRBAsK06ljLFJHQzhtEnyThkGUNSNd/ziiyC7aAjiL5DqnrQ/amcvNLOhp9kSL\nS/2tIpJkvLkrPwweMleBKAH7Iy9sAplvR22DPQ7j+ubdW6LL75LztlSGS3M4FjBW\nF1kfrtVlvG82E+ErwO0xzUcBioTqDCElgg2GH4a/MB8GkSiAmsqLMCOuCcz5zrdl\n60ipiLyODqG3y0aOtC/tcJXiFxQxigX/ARdi5e5VG2pygCyPgydd8CjRPWbnqAri\nRm2lv6ySrLoAWV9D/Q6rBW5zAauBOCzxc46tIZ74U8UYu2T4+YhaX7RKrsbnReNo\nBlj2ROl+8oU/Elxojj50qEkstDXyUguKtaFPvfT1Oi6aGRKpmwrlrnNZx25HL/u2\n0EXikyCMlv9b8zdvrhrxj2HqQ8JH/GVYR+nYUNo7nZJ0jeRJJs3BF6XsSza/45H9\nCpylLtyNS2TLdiqhAnm6fUP/178KDi19bK2dUlwOa2fkypiWMWS5F5vBOFrMoLu5\nQckZeGcOamCmPdjx/ER4\n=8Nfp\n-----END PGP SIGNATURE-----",
        "payload": "tree 00c83b31a451c1088ace5d5de1876fe2a8fd5f24\nparent 626210172b963961eda482c07d4295c46a6ffdd2\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1477006388 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485294653 +0100\n\nChainparams: Use the factory for pow tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75ebe97f0779869df36018da146a631e91116b64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75ebe97f0779869df36018da146a631e91116b64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75ebe97f0779869df36018da146a631e91116b64/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "626210172b963961eda482c07d4295c46a6ffdd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/626210172b963961eda482c07d4295c46a6ffdd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/626210172b963961eda482c07d4295c46a6ffdd2"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 11,
      "deletions": 21
    },
    "files": [
      {
        "sha": "3b79f8000d3419c41a6736d6c1cf6b1f5086b37e",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75ebe97f0779869df36018da146a631e91116b64/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75ebe97f0779869df36018da146a631e91116b64/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=75ebe97f0779869df36018da146a631e91116b64",
        "patch": "@@ -16,69 +16,59 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     std::vector<CBlockIndex> blocks(10000);\n     for (int i = 0; i < 10000; i++) {\n         blocks[i].pprev = i ? &blocks[i - 1] : NULL;\n         blocks[i].nHeight = i;\n-        blocks[i].nTime = 1269211443 + i * params.nPowTargetSpacing;\n+        blocks[i].nTime = 1269211443 + i * chainParams->GetConsensus().nPowTargetSpacing;\n         blocks[i].nBits = 0x207fffff; /* target 0x7fffff000... */\n         blocks[i].nChainWork = i ? blocks[i - 1].nChainWork + GetBlockProof(blocks[i - 1]) : arith_uint256(0);\n     }\n@@ -88,7 +78,7 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n         CBlockIndex *p2 = &blocks[GetRand(10000)];\n         CBlockIndex *p3 = &blocks[GetRand(10000)];\n \n-        int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, params);\n+        int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, chainParams->GetConsensus());\n         BOOST_CHECK_EQUAL(tdiff, p1->GetBlockTime() - p2->GetBlockTime());\n     }\n }"
      }
    ]
  },
  {
    "sha": "c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTgyOGM1MjBiMWY3NGM4NDE0ZmExMmUzMWE0MmMzYjNhMzNmYzYy",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-11-07T19:03:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T21:55:01Z"
      },
      "message": "Really don't validate genesis block",
      "tree": {
        "sha": "2027553f286caf2eecbd179e5f2abab5291bb703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2027553f286caf2eecbd179e5f2abab5291bb703"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh801AAoJEIhmwY6hyUSivfMP/146jr8UbBbSs0IjkwOKLM8z\niIGrN9bxO6+z5JyOz9W8BWu9fcPYCDls6RnAzeEBAAFSLT8nEwI/2abHniq3mMKj\n0BT8vwyLvr55RPkf7f2H4RjQg8FSMydhIGUTSGIrTtRi7rHy2B8Z/dRPwJMDhA+k\nbGuW9OohPg3mSR7HjNtP/p1hDpJnZr6cnZyEzeX5B6/7k0te5qs0Xi1nabqwf5V6\nz5rM20ah2NJPLD2pYJwFq/M2yocBJaL1ByzaZOS8CV2XyclFvfzT/fHQsQQXS+Bv\nezxrk+9g+Go1vvlJtmiOZqSUuEcK2U+YNQ9lQ+BcgKz4XtFGQV3pRtRNpvSGzIBx\nEWSrFhSWikwJ/hY8kEuBqQcSYcHa6TbgqL+7cL1ORRNpr/ehWyXpeoUYxLDSV0+E\nDgkoM7BcPqlcZZzx+sbiHpjDbRq6SzYOeSx+hsXHVKK0iOIgTEBeDQFJtLDiqjnK\noU6VqMv+HBmDJzHNdWBk/LvdXVy2ElgKMvXWCGmpOXrqfeMUiPzzehC07yziThQ2\nQLePW9BRKr643SRfTHL4v7MqOFJF3EyqYH+/sWD/02ynpzubqnI2SEL3X/gb8Kty\ndIzLvueG0Dr99tCtJKK9RvqPDwLW7vXIbxwGbLZt34ZKyk06dLfWndMuGFdb+5YY\n+3JogePsHQDBlNIwhHMd\n=Sraz\n-----END PGP SIGNATURE-----",
        "payload": "tree 2027553f286caf2eecbd179e5f2abab5291bb703\nparent 75ebe97f0779869df36018da146a631e91116b64\nauthor Gregory Sanders <gsanders87@gmail.com> 1478545422 -0500\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485294901 +0100\n\nReally don't validate genesis block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1828c520b1f74c8414fa12e31a42c3b3a33fc62/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75ebe97f0779869df36018da146a631e91116b64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75ebe97f0779869df36018da146a631e91116b64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75ebe97f0779869df36018da146a631e91116b64"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "48e2420849f63255967815a0a504d46506c6f1e7",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1828c520b1f74c8414fa12e31a42c3b3a33fc62/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1828c520b1f74c8414fa12e31a42c3b3a33fc62/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
        "patch": "@@ -199,7 +199,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()) && pindexNew->GetBlockHash() != Params().GetConsensus().hashGenesisBlock)\n                     return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      },
      {
        "sha": "05dbba32d1f355c9e9280eb1cb97e4c770831b21",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1828c520b1f74c8414fa12e31a42c3b3a33fc62/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1828c520b1f74c8414fa12e31a42c3b3a33fc62/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
        "patch": "@@ -1114,7 +1114,8 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams) &&\n+        block.GetHash() != consensusParams.hashGenesisBlock)\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n@@ -1709,10 +1710,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     int64_t nTimeStart = GetTimeMicros();\n \n-    // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n-        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n-\n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n@@ -1725,6 +1722,10 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n+    // Check it again in case a previous version let a bad block in\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n+\n     bool fScriptChecks = true;\n     if (!hashAssumeValid.IsNull()) {\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n@@ -3142,8 +3143,9 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+    if ((block.GetHash() != chainparams.GetConsensus().hashGenesisBlock) &&\n+        (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev))) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);"
      }
    ]
  },
  {
    "sha": "23d873dbd253b9b63c4747a24c9b06d9c9812a66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2Q4NzNkYmQyNTNiOWI2M2M0NzQ3YTI0YzliMDZkOWM5ODEyYTY2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-13T20:38:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T21:57:41Z"
      },
      "message": "Testchains: Generic selection with -chain=<str> in addition of -testnet and -regtest",
      "tree": {
        "sha": "e5594ca99b0ea50a489ce55ad6e077a85f165cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5594ca99b0ea50a489ce55ad6e077a85f165cf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23d873dbd253b9b63c4747a24c9b06d9c9812a66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh83VAAoJEIhmwY6hyUSi0FIQALgU8todYqeGreoBTnbM360G\nlsTu9aWcdrgWjb+/uKp2hBSMDAZA7PdZP5HXpeO/CYAh9JDlfjRiEspLMjsOLYG3\n3VT/tblLYJTIxzypn5s+U9MOz0kuSi94bdnqIyIWvMu0gJqtsZF+tUrf6nyBhE1b\nqAgEiNqzbximd6T+l3qNuAXQkoKbHOkhWpEEle0ARFTNX3p8wuiQjdnzrFsZT9sF\nmyFHXYfMworm/rVMWLWoBrX7uSQ+KpZH1S1aB1H6fLaUaOybSdB9ozsZtzw3OIyT\n5celtSCbA9Qa7SvZVCesh0065fZPU0xtMnuXLiE0IQwxILiuD2zQfr9nwu0tyLLd\n3Bv86MEXW9FrLbfdiKwTwwfdkLsjIzyZdV8cdxQwHI93/0vL1VyylTW1QnfHYqkL\nGj0+TJAp4D4FF1O0LGfi/izDgzXbQLn8JIhZYpyHRpnG7CUMBIQEzPOmQZLvmnDR\nTZt9Ew0Pj9LD8NxkJczEMZN5KpB1gKlnre9V0iCEG7v+nK7/9kHPHWPQT4vox58T\nkpkCyAzqa29AppL7LV7pm9fPtCdTk4owxogBLcIYDIxYUOrX6ARpIewvR3w2chEq\nCBoKaw9l1+vM2j73hXOSBJjmnEsUkvblNJyIZ6f62i0ozYVT02I6wNOhRBykgy4L\nM8EZR3bOpoyA/gSEoiHv\n=8GkR\n-----END PGP SIGNATURE-----",
        "payload": "tree e5594ca99b0ea50a489ce55ad6e077a85f165cf3\nparent c1828c520b1f74c8414fa12e31a42c3b3a33fc62\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476391090 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485295061 +0100\n\nTestchains: Generic selection with -chain=<str> in addition of -testnet and -regtest\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d873dbd253b9b63c4747a24c9b06d9c9812a66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23d873dbd253b9b63c4747a24c9b06d9c9812a66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d873dbd253b9b63c4747a24c9b06d9c9812a66/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1828c520b1f74c8414fa12e31a42c3b3a33fc62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1828c520b1f74c8414fa12e31a42c3b3a33fc62"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0971af60cfa2b1e1233395d4a8f6dedc8775a00b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "patch": "@@ -108,7 +108,7 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n-    // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "62c0993351c7fa8d74310a81b935f838a44d6991",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "patch": "@@ -41,7 +41,7 @@ static int AppInitRawTx(int argc, char* argv[])\n     //\n     ParseParameters(argc, argv);\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "e0a711c04ec1d78418be65a9505d8b43ece3a045",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "patch": "@@ -109,7 +109,7 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;\n         }\n-        // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+        // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(ChainNameFromCommandLine());\n         } catch (const std::exception& e) {"
      },
      {
        "sha": "80c5663da791177a17f84c0765df3c6c2ea02d0d",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "patch": "@@ -17,6 +17,7 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n@@ -98,7 +99,7 @@ std::string ChainNameFromCommandLine()\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n-    return CBaseChainParams::MAIN;\n+    return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n \n bool AreBaseParamsConfigured()"
      },
      {
        "sha": "a28cc76948ba192302eba52f3b3b3509adfa73df",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "patch": "@@ -623,7 +623,7 @@ int main(int argc, char *argv[])\n     // - QSettings() will use the new application name after this, resulting in network-specific settings\n     // - Needs to be done before createOptionsModel\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {"
      },
      {
        "sha": "59a4ee4592d3106aeb442c2ff48b3fcc08eb14d4",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d873dbd253b9b63c4747a24c9b06d9c9812a66/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "patch": "@@ -641,7 +641,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             // Start client minimized\n             QString strArgs = \"-min\";\n             // Set -testnet /-regtest options\n-            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+            strArgs += QString::fromStdString(strprintf(\" -chain=%s\", ChainNameFromCommandLine()));\n \n #ifdef UNICODE\n             boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n@@ -752,7 +752,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             optionFile << \"Name=Bitcoin\\n\";\n         else\n             optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n-        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -chain=%s\\n\", chain);\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      }
    ]
  },
  {
    "sha": "c7de527ed29f054c2de2325daf132186449b0247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2RlNTI3ZWQyOWYwNTRjMmRlMjMyNWRhZjEzMjE4NjQ0OWIwMjQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-21T17:15:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T22:22:25Z"
      },
      "message": "Testchains: Introduce custom chain whose constructor...\n\n...reads params from regular arguments or the general conf file",
      "tree": {
        "sha": "b1412cfb02aafe23fdaa4906230d82297af4808c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1412cfb02aafe23fdaa4906230d82297af4808c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7de527ed29f054c2de2325daf132186449b0247",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh9OhAAoJEIhmwY6hyUSi1c4QAKuhCpzmNZALYI5cky7xT/b2\nHPJcCB4HwfsrN4dJegBzYIRS00vxVxmvjLIGbfpWrK8xxJd8ze8WWTf5KbbUfkT3\nRz7U0A94Mvj8TN4zGkowlp7tc0dGCpzzR0HsanEDUMT48NPrHsTr1j+t43/ojAXe\njYr0x0paz4dvGS4O4KIu7gBMglBG7yKxpfISpTUTRyBNCyQUaQFMGZcxh5FYne3I\n/jy2CT8uU/oTbAMB2l17OYRHRqeirJTervkZIlPmD5rKWqUgNsaFFC5/8fMew7Ev\nI0bVHednHxigiatH0aPQtoCzzNCJO/RgiSZtqut/4SpnswrTAJAK2MlAxk1YRCr1\n28u8bNBwNo1oM2INxzi/wD1ybNEyPfB9txjPX9fFLxnMMIEMIftDrJDzEADhZXj/\nQrXg3FDIPemBfU34A2Uf5FwL8EhlLnl5x4pAkgtbkJprWzFIEG3NJxTFoaRTOYoX\n3x66x+N8orpRXaFKuOIZynfSxKY3eKgdio1zpEShyY9FQgOYNPwsSx+7WhpSZGB5\nXMauz0j4/s5RAN8P2A8i19awnldrB/ngTi+1Qn3nPYEi8CUcxKTXFg50KbT1mPZN\nziUbr09Zcu5v/+RtDFuxUYJ3JYhkmXTp+vMOmHYC63t2OYuMIu/FxfLzyRW1TgCn\nIoq4h1IX++Ns67Md7092\n=Jkcs\n-----END PGP SIGNATURE-----",
        "payload": "tree b1412cfb02aafe23fdaa4906230d82297af4808c\nparent 23d873dbd253b9b63c4747a24c9b06d9c9812a66\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1477070126 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485296545 +0100\n\nTestchains: Introduce custom chain whose constructor...\n\n...reads params from regular arguments or the general conf file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7de527ed29f054c2de2325daf132186449b0247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7de527ed29f054c2de2325daf132186449b0247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7de527ed29f054c2de2325daf132186449b0247/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d873dbd253b9b63c4747a24c9b06d9c9812a66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23d873dbd253b9b63c4747a24c9b06d9c9812a66"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 93,
      "deletions": 2
    },
    "files": [
      {
        "sha": "60cfb13d8ce5fc16908233f19f7eb1aaadc437c6",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7de527ed29f054c2de2325daf132186449b0247/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7de527ed29f054c2de2325daf132186449b0247/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=c7de527ed29f054c2de2325daf132186449b0247",
        "patch": "@@ -21,7 +21,7 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-con_fpowallowmindifficultyblocks', '-con_fpownoretargeting', '-con_nsubsidyhalvinginterval', '-con_bip34height', '-con_bip65height', '-con_bip66height', '-con_npowtargettimespan', '-con_npowtargetspacing', '-con_nrulechangeactivationthreshold', '-con_nminerconfirmationwindow', '-con_powlimit', '-con_bip34hash', '-con_nminimumchainwork', '-ndefaultport', '-npruneafterheight', '-fminingrequirespeers', '-fdefaultconsistencychecks', '-frequirestandard', '-fmineblocksondemand'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "4d9f7b80c7653180f072626928daec71987efac5",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7de527ed29f054c2de2325daf132186449b0247/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7de527ed29f054c2de2325daf132186449b0247/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c7de527ed29f054c2de2325daf132186449b0247",
        "patch": "@@ -335,6 +335,73 @@ class CRegTestParams : public CChainParams {\n     }\n };\n \n+/**\n+ * Regression test\n+ */\n+class CCustomParams : public CChainParams {\n+\n+    void UpdateFromArgs()\n+    {\n+        strNetworkID = GetArg(\"-chainpetname\", \"custom\");\n+\n+        consensus.fPowAllowMinDifficultyBlocks = GetBoolArg(\"-con_fpowallowmindifficultyblocks\", true);\n+        consensus.fPowNoRetargeting = GetBoolArg(\"-con_fpownoretargeting\", true);\n+        consensus.nSubsidyHalvingInterval = GetArg(\"-con_nsubsidyhalvinginterval\", 150);\n+        consensus.BIP34Height = GetArg(\"-con_bip34height\", 100000000);\n+        consensus.BIP65Height = GetArg(\"-con_bip65height\", 1351);\n+        consensus.BIP66Height = GetArg(\"-con_bip66height\", 1251);\n+        consensus.nPowTargetTimespan = GetArg(\"-con_npowtargettimespan\", 14 * 24 * 60 * 60); // two weeks\n+        consensus.nPowTargetSpacing = GetArg(\"-con_npowtargetspacing\", 10 * 60);\n+        consensus.nRuleChangeActivationThreshold = GetArg(\"-con_nrulechangeactivationthreshold\", 108); // 75% for testchains\n+        consensus.nMinerConfirmationWindow = GetArg(\"-con_nminerconfirmationwindow\", 144); // Faster than normal for custom (144 instead of 2016)\n+        consensus.powLimit = uint256S(GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+        consensus.BIP34Hash = uint256S(GetArg(\"-con_bip34hash\", \"0x0\"));\n+        consensus.nMinimumChainWork = uint256S(GetArg(\"-con_nminimumchainwork\", \"0x0\"));\n+\n+        nDefaultPort = GetArg(\"-ndefaultport\", 18444);\n+        nPruneAfterHeight = GetArg(\"-npruneafterheight\", 1000);\n+        fMiningRequiresPeers = GetBoolArg(\"-fminingrequirespeers\", false);\n+        fDefaultConsistencyChecks = GetBoolArg(\"-fdefaultconsistencychecks\", true);\n+        fRequireStandard = GetBoolArg(\"-frequirestandard\", false);\n+        fMineBlocksOnDemand = GetBoolArg(\"-fmineblocksondemand\", true);\n+    }\n+\n+public:\n+    CCustomParams()\n+    {\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n+\n+        pchMessageStart[0] = 0xfa;\n+        pchMessageStart[1] = 0xbf;\n+        pchMessageStart[2] = 0xb5;\n+        pchMessageStart[3] = 0xda;\n+        vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n+        vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n+        chainTxData = ChainTxData{\n+            0,\n+            0,\n+            0\n+        };\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+\n+        UpdateFromArgs();\n+        genesis = CreateGenesisBlock(strNetworkID.c_str(), CScript(OP_TRUE), 1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+    }\n+};\n+\n static std::unique_ptr<CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n@@ -350,6 +417,9 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CChainParams>(new CRegTestParams());\n+    else if (chain == CBaseChainParams::CUSTOM) {\n+        return std::unique_ptr<CChainParams>(new CCustomParams());\n+    }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n "
      },
      {
        "sha": "aa4fc6cd758a866b6494a3750fc76277f7967053",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7de527ed29f054c2de2325daf132186449b0247/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7de527ed29f054c2de2325daf132186449b0247/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=c7de527ed29f054c2de2325daf132186449b0247",
        "patch": "@@ -13,15 +13,18 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::CUSTOM = \"custom\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n-    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest\"));\n+    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest, custom\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n+        strUsage += HelpMessageGroup(_(\"Custom chain selection options (only for -chain=custom):\"));\n+        strUsage += HelpMessageOpt(\"-chainpetname=<name>\", _(\"Alternative name for custom chain (default: custom). This changes the genesis block.\"));\n     }\n }\n \n@@ -63,6 +66,19 @@ class CBaseRegTestParams : public CBaseChainParams\n     }\n };\n \n+/*\n+ * Regression test\n+ */\n+class CBaseCustomParams : public CBaseChainParams\n+{\n+public:\n+    CBaseCustomParams()\n+    {\n+        nRPCPort = 18332;\n+        strDataDir = \"custom\";\n+    }\n+};\n+\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -79,6 +95,8 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n         return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n+    else if (chain == CBaseChainParams::CUSTOM)\n+        return std::unique_ptr<CBaseChainParams>(new CBaseCustomParams());\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "2cfe75a3665d1db1bc77cd141a20395074213f1d",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7de527ed29f054c2de2325daf132186449b0247/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7de527ed29f054c2de2325daf132186449b0247/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=c7de527ed29f054c2de2325daf132186449b0247",
        "patch": "@@ -9,6 +9,8 @@\n #include <string>\n #include <vector>\n \n+#define CHAINPARAMS_CONF_FILENAME \"chainparams.conf\"\n+\n /**\n  * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)\n  * of a given instance of the Bitcoin system.\n@@ -20,6 +22,7 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n+    static const std::string CUSTOM;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      }
    ]
  },
  {
    "sha": "3469474405a3cd5d6bea25f431af1ddaa360cddd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDY5NDc0NDA1YTNjZDVkNmJlYTI1ZjQzMWFmMWRkYWEzNjBjZGRk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-13T21:24:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T22:22:27Z"
      },
      "message": "Testchains: Qt: Simplify network/chain styles and add a default purple\n\n...for unkown chains",
      "tree": {
        "sha": "6b60a201aef28120abd573cc75b3c19f11304910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b60a201aef28120abd573cc75b3c19f11304910"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3469474405a3cd5d6bea25f431af1ddaa360cddd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh9OjAAoJEIhmwY6hyUSizXkQAOwIfHAD3z6jrsZnQjUKdCF/\nGS82vULGUl24hbXoIF4dj0Fo3H89OaO8KUuzenG77eTkkqPKrdAcP728gPLaektO\nHGE4QhX1SRtjSRVZNDsQz19pR7CqBvpbjrVskqiQz24MjTzsxDH8beyuAg/SWmZD\nfYHpW3G3T7XDmp2/Pi0v5Ki+wt2Tzw7DkoMdhMpJtIqJSWifNaUO2ebiRA/ktBKP\n+G4QcidJLRPGxcQ7zusC4iwTJUznsY2lPecH4EZXIQkrdcdZcUsIkuEtjky25QYi\nP1BO+97bDzMIx3qtYqwe+xrcN+Qwbt2+92PIa8skzv0/9ICJvNKX8GghAKNMAqaB\nGaiqCiUYkiZO0tQvY6EK7VSb3ms3/d9bseP9ncjT7HdGevMhg2hpjbC0XHMDevYj\nCBsqBek0M5y/0BNoA/cJG3irlCioqC+k28CQS6ggeV/beFW5n2kDorUGPfKmoFzU\nOXjdr5fgbj1Jnhh8Tx78NHd2W0po27Je0A+NHe4PxhBqHcv/dnUfYrA7ErmnhMR1\nK36hsXW0nDJaDtPG3/0/TqXSVpBZQmzyjTJKBDQULXBOO49mo0Vkho8GROosT4KF\nafN8p7X7y2ck0jFqlIDS/MYJ0MuVJpzz9JujmxqOMiY6vXVYvMVLGq2/yTFp9ucH\nIV42dg/6lyUInea/3k5M\n=t82g\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b60a201aef28120abd573cc75b3c19f11304910\nparent c7de527ed29f054c2de2325daf132186449b0247\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476393861 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485296547 +0100\n\nTestchains: Qt: Simplify network/chain styles and add a default purple\n\n...for unkown chains\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3469474405a3cd5d6bea25f431af1ddaa360cddd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3469474405a3cd5d6bea25f431af1ddaa360cddd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3469474405a3cd5d6bea25f431af1ddaa360cddd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7de527ed29f054c2de2325daf132186449b0247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7de527ed29f054c2de2325daf132186449b0247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7de527ed29f054c2de2325daf132186449b0247"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "948c7b6647bb2449b1514d2859c06da9889c8f11",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3469474405a3cd5d6bea25f431af1ddaa360cddd/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3469474405a3cd5d6bea25f431af1ddaa360cddd/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3469474405a3cd5d6bea25f431af1ddaa360cddd",
        "patch": "@@ -635,7 +635,7 @@ int main(int argc, char *argv[])\n     PaymentServer::ipcParseCommandLine(argc, argv);\n #endif\n \n-    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(Params().NetworkIDString()));\n     assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n     QApplication::setApplicationName(networkStyle->getAppName());"
      },
      {
        "sha": "26caa4049c93568f0505b530b0e103dcb5d5a790",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3469474405a3cd5d6bea25f431af1ddaa360cddd/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3469474405a3cd5d6bea25f431af1ddaa360cddd/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=3469474405a3cd5d6bea25f431af1ddaa360cddd",
        "patch": "@@ -6,6 +6,9 @@\n \n #include \"guiconstants.h\"\n \n+#include \"chainparamsbase.h\"\n+#include \"tinyformat.h\"\n+\n #include <QApplication>\n \n static const struct {\n@@ -15,9 +18,9 @@ static const struct {\n     const int iconColorSaturationReduction;\n     const char *titleAddText;\n } network_styles[] = {\n-    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n-    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n+    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n+    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n+    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n \n@@ -79,8 +82,9 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n     trayAndWindowIcon   = QIcon(pixmap.scaled(QSize(256,256)));\n }\n \n-const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+const NetworkStyle *NetworkStyle::instantiate(const std::string &networkId)\n {\n+    std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n     for (unsigned x=0; x<network_styles_count; ++x)\n     {\n         if (networkId == network_styles[x].networkId)\n@@ -89,8 +93,8 @@ const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n                     network_styles[x].appName,\n                     network_styles[x].iconColorHueShift,\n                     network_styles[x].iconColorSaturationReduction,\n-                    network_styles[x].titleAddText);\n+                    titleAddText.c_str());\n         }\n     }\n-    return 0;\n+    return new NetworkStyle(strprintf(\"%s-%s\", QAPP_APP_NAME_DEFAULT, networkId).c_str(), 250, 30, titleAddText.c_str());\n }"
      },
      {
        "sha": "03dcf94d9b0f37be9cb1587b592089dc8e7c8bae",
        "filename": "src/qt/networkstyle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3469474405a3cd5d6bea25f431af1ddaa360cddd/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3469474405a3cd5d6bea25f431af1ddaa360cddd/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=3469474405a3cd5d6bea25f431af1ddaa360cddd",
        "patch": "@@ -14,7 +14,7 @@ class NetworkStyle\n {\n public:\n     /** Get style associated with provided BIP70 network id, or 0 if not known */\n-    static const NetworkStyle *instantiate(const QString &networkId);\n+    static const NetworkStyle *instantiate(const std::string &networkId);\n \n     const QString &getAppName() const { return appName; }\n     const QIcon &getAppIcon() const { return appIcon; }"
      }
    ]
  },
  {
    "sha": "ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2FjOWY0NmVlOWRiOGRlYWVkNDE4OGIwOTdhZTFiZmE2N2FiMDI0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-10T23:06:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T22:22:28Z"
      },
      "message": "QA: Adapt BitcoinTestFramework for chains other than \"regtest\"",
      "tree": {
        "sha": "f412d037266bead550662b37940e160edc5a86ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f412d037266bead550662b37940e160edc5a86ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh9OkAAoJEIhmwY6hyUSi4oEQAMo9DEuCS1GivX5gvrE93kyl\n9oaN1x09DwYinzr2szPDDXzeUgJMoHS2SCIe8c6kBMdqxNUbIyUDYDBUln3sxEei\nNN6K1XHxsk6s4/dD6HbtY2pLcorMNqW7tC2G7RqOlhKixTjLYJP8qGWOFb4WKMNF\nx86V8Yi5Nbid+stSov3giXJgEmu5rqjwkijzro05FyZe25/7ZgctS7/RDHHRQRY/\nc0OcFmcGeUxIBe468je+88Hr78Ey8AFhVba9z084JVYec8c9zOrDnNQbqTZhzX/j\nvGpcf6bF0tRO6Ipz9nGoHjJE24ABpIxb4uCHDiWOMTCRObTx873BS9DKw7a5e1VB\n4CKQOG2TD5FxfB/8y4iNmGWVSs6n0W9oua9Kx4MddtSPfM3EfWONHTUmwpozFFVN\nHqR3Zzotis3GfKM1c8o6YYHPVceKMBTWnDmdtGs8JrKIl6GKgW+j+nv4cm1vkQnV\nUUyDznp/JcxletTYj3BZ9dzdgwsqW7Rynm7CNvB1EieeNi0UZ2KBQK4mKNporzal\nBFNsSpWOX8VndQV4RPD6pRIF8nrbI+Ws+7sTZmObHd+OAgDFLeBCKlA/arAeF3WR\nWMxeBURLzam/mVwvitG4/v2D90X8hwn1i70B6YVHSe4zPpcK5HXC4UP0O7rinA7T\nE95On5kCDQ8aJLl5i19p\n=f+f1\n-----END PGP SIGNATURE-----",
        "payload": "tree f412d037266bead550662b37940e160edc5a86ec\nparent 3469474405a3cd5d6bea25f431af1ddaa360cddd\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1478819204 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485296548 +0100\n\nQA: Adapt BitcoinTestFramework for chains other than \"regtest\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3469474405a3cd5d6bea25f431af1ddaa360cddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3469474405a3cd5d6bea25f431af1ddaa360cddd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3469474405a3cd5d6bea25f431af1ddaa360cddd"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 29,
      "deletions": 28
    },
    "files": [
      {
        "sha": "cc1e33123e096fd1ddf933c1272e7ced4351cc45",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "patch": "@@ -43,7 +43,7 @@ def setup_network(self):\n \n         # Create node 2 to test pruning\n         self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=900))\n-        self.prunedir = self.options.tmpdir+\"/node2/regtest/blocks/\"\n+        self.prunedir = self.options.tmpdir + \"/node2/\" + self.chain + \"/blocks/\"\n \n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         self.nodes.append(start_node(3, self.options.tmpdir, [\"-debug=0\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))"
      },
      {
        "sha": "42d19088a106c00ef55ef5237487875537f3894e",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "patch": "@@ -32,6 +32,7 @@\n class BitcoinTestFramework(object):\n \n     def __init__(self):\n+        self.chain = \"regtest\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None\n@@ -45,9 +46,9 @@ def add_options(self, parser):\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         if self.setup_clean_chain:\n-            initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+            initialize_chain_clean(self.options.tmpdir, self.num_nodes, self.chain)\n         else:\n-            initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n+            initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir, self.chain)\n \n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)"
      },
      {
        "sha": "27d1f3cf5bbc449f7693c228972495461e9e19e1",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "patch": "@@ -177,13 +177,13 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n \n bitcoind_processes = {}\n \n-def initialize_datadir(dirname, n):\n+def initialize_datadir(dirname, n, chain):\n     datadir = os.path.join(dirname, \"node\"+str(n))\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     rpc_u, rpc_p = rpc_auth_pair(n)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n-        f.write(\"regtest=1\\n\")\n+        f.write(\"chain=%s\\n\" % chain)\n         f.write(\"rpcuser=\" + rpc_u + \"\\n\")\n         f.write(\"rpcpassword=\" + rpc_p + \"\\n\")\n         f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n@@ -226,7 +226,7 @@ def wait_for_bitcoind_start(process, url, i):\n                 raise # unknown JSON RPC exception\n         time.sleep(0.25)\n \n-def initialize_chain(test_dir, num_nodes, cachedir):\n+def initialize_chain(test_dir, num_nodes, cachedir, chain):\n     \"\"\"\n     Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n     Afterward, create num_nodes copies from the cache\n@@ -248,7 +248,7 @@ def initialize_chain(test_dir, num_nodes, cachedir):\n \n         # Create cache directories, run bitcoinds:\n         for i in range(MAX_NODES):\n-            datadir=initialize_datadir(cachedir, i)\n+            datadir=initialize_datadir(cachedir, i, chain)\n             args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n             if i > 0:\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n@@ -289,24 +289,24 @@ def initialize_chain(test_dir, num_nodes, cachedir):\n         stop_nodes(rpcs)\n         disable_mocktime()\n         for i in range(MAX_NODES):\n-            os.remove(log_filename(cachedir, i, \"debug.log\"))\n-            os.remove(log_filename(cachedir, i, \"db.log\"))\n-            os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-            os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n+            os.remove(log_filename(cachedir, i, chain, \"debug.log\"))\n+            os.remove(log_filename(cachedir, i, chain, \"db.log\"))\n+            os.remove(log_filename(cachedir, i, chain, \"peers.dat\"))\n+            os.remove(log_filename(cachedir, i, chain, \"fee_estimates.dat\"))\n \n     for i in range(num_nodes):\n         from_dir = os.path.join(cachedir, \"node\"+str(i))\n         to_dir = os.path.join(test_dir,  \"node\"+str(i))\n         shutil.copytree(from_dir, to_dir)\n-        initialize_datadir(test_dir, i) # Overwrite port/rpcport in bitcoin.conf\n+        initialize_datadir(test_dir, i, chain) # Overwrite port/rpcport in bitcoin.conf\n \n-def initialize_chain_clean(test_dir, num_nodes):\n+def initialize_chain_clean(test_dir, num_nodes, chain):\n     \"\"\"\n     Create an empty blockchain and num_nodes wallets.\n     Useful if a test case wants complete control over initialization.\n     \"\"\"\n     for i in range(num_nodes):\n-        datadir=initialize_datadir(test_dir, i)\n+        datadir=initialize_datadir(test_dir, i, chain)\n \n \n def _rpchost_to_args(rpchost):\n@@ -367,8 +367,8 @@ def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None\n         raise\n     return rpcs\n \n-def log_filename(dirname, n_node, logname):\n-    return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n+def log_filename(dirname, n_node, chain, logname):\n+    return os.path.join(dirname, \"node\"+str(n_node), chain, logname)\n \n def stop_node(node, i):\n     try:"
      },
      {
        "sha": "6360603a86c45f876e846eb0d37ff8b726eaa180",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "patch": "@@ -62,8 +62,8 @@ def run_test (self):\n \n         print(\"Restore backup ...\")\n         self.stop_node(1)\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n         self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "e71869ec90f463b28aec0b46d63d0445e96301b7",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccac9f46ee9db8deaed4188b097ae1bfa67ab024/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "patch": "@@ -97,9 +97,9 @@ def stop_three(self):\n         stop_node(self.nodes[2], 2)\n \n     def erase_three(self):\n-        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node0/\" + self.chain + \"/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node2/\" + self.chain + \"/wallet.dat\")\n \n     def run_test(self):\n         logging.info(\"Generating initial blockchain\")\n@@ -157,13 +157,13 @@ def run_test(self):\n         self.erase_three()\n \n         # Start node2 with no chain\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/blocks\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/chainstate\")\n \n         # Restore wallets from backup\n-        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/\" + self.chain + \"/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/\" + self.chain + \"/wallet.dat\")\n \n         logging.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -178,8 +178,8 @@ def run_test(self):\n         self.erase_three()\n \n         #start node2 with no chain\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/blocks\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/chainstate\")\n \n         self.start_three()\n "
      }
    ]
  },
  {
    "sha": "a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWE3ZTcwMGEzYjY0NjJkYzE4ZjdmYTNkZDNlY2FjM2NhN2ViZDc3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-10T18:51:54Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T22:22:29Z"
      },
      "message": "QA: Use custom chain instead of regtest for rpc tests (except segwit.py)",
      "tree": {
        "sha": "00c7f650baec84e12015022f426f7c1eed4ad437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00c7f650baec84e12015022f426f7c1eed4ad437"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYh9OlAAoJEIhmwY6hyUSiNB8P/0JheFS/4XLlTkxP9O5UgGwq\n44mtWo5blA+DPyi/cmUnWT7zAf3c80uHzQS4okvp+ay4+tVc1yKDOtsgUynJJwQz\nDFJoWZXbMRvaqpMq+mgr5G7QtBzJEiwS9rVuduz+DoYii3HRfgqveBrTJqvKxuU+\nnjWGGd7Wxo/FOKKT7F75C5QmN8KnztD57i9UZZJvMMxy+nsBu3SXcvipAwJgRoP1\nSS9DLW6y26nyvAfnz68S2IUMnRGVJ6Y7X1jzSrDK1wBIoKWRgNkC0RludgUSUMbX\nR7L8CvEJByDC2fdPxpiRRP7f1fSl6oX9bWKdSWae0LLoB0C6ZmKIML99YauQGW0R\nBoRElZVmLXMMDknTpvbcM+KVBO/EpaXXvq7QsY72TvMLaurowdoy3RWbiJiC03nX\n1pR0A7VWvnACwZo5F/pj717shsTnJicU+jfBz4lQGR+QOE01mrzg3XECdcDFTbcC\nUtWv0mVs4pZBpNisCj6XuwkR0I7ar3Mo7gAUI7bnM2/nC3oioG/zs+jSB1BZIOpp\nQTQpohF5Zv+/DBOxs6vorfWR2T3jnqWRcHSQs0ydDRENMOKf6sxyTtzkzJDfe3RE\nqwc/NuEiENjgSCrRiojX/oZozyrUSpqsSjkmMAGRik1SLgOFe8yNZC4ceo3aOjg1\nv9mZxFeIMlVCoS4nyMz1\n=+i4k\n-----END PGP SIGNATURE-----",
        "payload": "tree 00c7f650baec84e12015022f426f7c1eed4ad437\nparent ccac9f46ee9db8deaed4188b097ae1bfa67ab024\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1478803914 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485296549 +0100\n\nQA: Use custom chain instead of regtest for rpc tests (except segwit.py)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccac9f46ee9db8deaed4188b097ae1bfa67ab024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccac9f46ee9db8deaed4188b097ae1bfa67ab024"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d52548fdf448541845fbf1956ef489d45753f957",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
        "patch": "@@ -80,6 +80,7 @@ class SegWitTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n+        self.chain = \"regtest\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "ad588d4447bc482fc3f0715021b31ce41eb7aaf9",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
        "patch": "@@ -32,7 +32,7 @@\n class BitcoinTestFramework(object):\n \n     def __init__(self):\n-        self.chain = \"regtest\"\n+        self.chain = \"custom\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None"
      }
    ]
  },
  {
    "sha": "875a4e998ae87281576db306547e711666902be7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzVhNGU5OThhZTg3MjgxNTc2ZGIzMDY1NDdlNzExNjY2OTAyYmU3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T06:09:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T06:09:49Z"
      },
      "message": "fixup! introduce custom chain",
      "tree": {
        "sha": "14c346a63128e5a6c3eac678f7a32590bf5961b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14c346a63128e5a6c3eac678f7a32590bf5961b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/875a4e998ae87281576db306547e711666902be7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlB6tAAoJEIhmwY6hyUSi1dsP/236scpkFUb7fBeLO7cM1DW3\ncTLaF5JNN+XDSQg66rttaLHvg00UeSFVZqwKJxdT20x49CD82fBatd0n8BepqXdP\ngDYhV1Y4xj7TZtsLVZFmGDoeUSWMvLo7tMBbFj1uYh9OawhMz14mqo+WsYnMpHbh\n6TH8uwebs8jte1+CCvv027vHBXsUY2BownYqasHG1xjKO3cSEupvTXNIZ0lmbzYM\ngmxFEVmEgluC8MzofMDkj8yFHw6WE8ioUCiP9oA6O8p7khJCNcLDqXmPp4zh6fSx\nh7pw5NrUq3hU/xoFISIUysmH+mekMZTm/hxxq79vS1txpHa7hYP/DAd3OlfJ2xSK\ntoMfb+VF4XTftjPbv+uQB1MDqw/jWaeB/qYNcl3DoeMc/atVNlA47bqfJ+XHOPX7\niul6vtxP0TjzBGRii3S+ulCz6Hv+QhD1Qf5osCd/B5+GRUIqei0cVqtFDPuvNbnR\nfbJbTJX7mxZKA/s9DMCwmdQtP4gJhATID8AvRAZiT8IabPTkPyJfqX/zrOZF08I0\nqaGmHo0vNDJcc6/ydcmLjCcStdXfSFEEbnHLxSNOAoGVRCO/rCSLXsakL4elRHkw\nWepc+O7aRCuVI60XuD2H2QhBHtjhSD3dO0jvG2HVJqNiHv1yB6CfQPdbJaSuwKHf\njn8Ltms4LsTOTtL1MB27\n=68zx\n-----END PGP SIGNATURE-----",
        "payload": "tree 14c346a63128e5a6c3eac678f7a32590bf5961b9\nparent a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486102189 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486102189 +0100\n\nfixup! introduce custom chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/875a4e998ae87281576db306547e711666902be7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/875a4e998ae87281576db306547e711666902be7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/875a4e998ae87281576db306547e711666902be7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5a7e700a3b6462dc18f7fa3dd3ecac3ca7ebd77"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e27b41032160a1f496b4277aa7e375cdff875a02",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/875a4e998ae87281576db306547e711666902be7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/875a4e998ae87281576db306547e711666902be7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=875a4e998ae87281576db306547e711666902be7",
        "patch": "@@ -336,7 +336,7 @@ class CRegTestParams : public CChainParams {\n };\n \n /**\n- * Regression test\n+ * Custom params for testing.\n  */\n class CCustomParams : public CChainParams {\n "
      }
    ]
  },
  {
    "sha": "0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDhmOGMxOGJlMWFhZjE5MzUzNGIzZDNhMTJjN2ZjZmZhM2NlZjk3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-18T16:36:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:07Z"
      },
      "message": "Blocksign: Encapsulate pow.h behind an additional proof layer",
      "tree": {
        "sha": "3bc12d5e0255a62205128a001a57535eca3fea2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc12d5e0255a62205128a001a57535eca3fea2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDIzAAoJEIhmwY6hyUSiQYsP/j2+42KhOKdcQZnsNPF9+/6P\nkDTtPf255EY+udP2j14/OZrmq8B2Id+GCrSk8uVzdCZwU5UAJ7yg3egsKI3WJ6Kq\nYtdQazau8xweRmgNwInmV3MXgoE2b1EbfJt0AF5t2AgXvPkbLA2SFv29UjSIPPPy\nrtGBxvHVkeYgxmQhalHCi4MA7DDNZRIekEufxngzk8bIaPKm5kAJD6AH8IWqkAYb\nvODv5EYDuAGilirB2CvoCcEcDWlLDiY96+HjNcSKlb8alhS1MCMj04+4EqC8nL3+\nJMbon2QAqMrwT92JVdtFYssa5lig9P+llp0j+4dV60Mpg1i+5L2+tP+7ZRRK4fS/\nhFJ2bNDO3H98QJaPNKNWny7xsNz16PUmXF1M7WPlUBm8PXTDoRhMLUpalvsAEzF0\nSmrkqZ5T2Xlc2ARdsW07IiQkk6J3EVqLiN7u/rKd07EB93WiG1iBTN7PM57k8P8L\nWYKmraIbZX+BxBffjD5OswEFqbiVgJlhESDoRjCLAN8p5DvECoMh/Dtu1qWcqVhd\nVLkT1sE8+00CED0N/jg7wiVcqYdhO2P6x9/aefZNreU8P15LjFuHRYyJNEVEFlmd\nS53MpMobwz0uAw17/4K9bq3cqw87USrl/H8qY5L28kFdvC62zmzRzYWsgbrfImIv\nxOj1aOE1EhwwjvGY8OEm\n=Dj36\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bc12d5e0255a62205128a001a57535eca3fea2c\nparent 875a4e998ae87281576db306547e711666902be7\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476808586 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107187 +0100\n\nBlocksign: Encapsulate pow.h behind an additional proof layer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "875a4e998ae87281576db306547e711666902be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/875a4e998ae87281576db306547e711666902be7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/875a4e998ae87281576db306547e711666902be7"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 109,
      "deletions": 33
    },
    "files": [
      {
        "sha": "3f63cb45d658e0e286d8acd83cd3b7ff585d4235",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -95,6 +95,7 @@ BITCOIN_CORE_H = \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n+  consensus/header_verify.h \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n@@ -181,6 +182,7 @@ libbitcoin_server_a_SOURCES = \\\n   blockencodings.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/header_verify.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "b563af75d2fc3ce512cf7d9085c9fa64aff8094a",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -7,8 +7,8 @@\n #define BITCOIN_CHAIN_H\n \n #include \"arith_uint256.h\"\n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n-#include \"pow.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "67f9f2df6cd571ffec0ced35b2ef755d58d28f1e",
        "filename": "src/consensus/header_verify.cpp",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/consensus/header_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/consensus/header_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/header_verify.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2016-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"header_verify.h\"\n+\n+#include \"params.h\"\n+#include \"pow.h\"\n+#include \"primitives/block.h\"\n+#include \"validation.h\"\n+\n+bool CheckProof(const Consensus::Params& consensusParams, const CBlockHeader& block)\n+{\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, uint64_t& nTries)\n+{\n+    const int nInnerLoopCount = 0x10000;\n+    while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, consensusParams)) {\n+        ++pblock->nNonce;\n+        --nTries;\n+    }\n+    return CheckProofOfWork(pblock->GetHash(), pblock->nBits, consensusParams);\n+}\n+\n+bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock)\n+{\n+    uint64_t nTries = 10000;\n+    return MaybeGenerateProof(consensusParams, pblock, nTries);\n+}\n+\n+void ResetProof(const Consensus::Params& consensusParams, CBlockHeader* pblock)\n+{\n+    pblock->nNonce = 0;\n+}\n+\n+bool CheckChallenge(const Consensus::Params& consensusParams, CValidationState& state, const CBlockHeader *pblock, const CBlockIndex* pindexPrev)\n+{\n+    if (pblock->nBits != GetNextWorkRequired(pindexPrev, pblock, consensusParams))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n+\n+    return true;\n+}\n+\n+void ResetChallenge(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n+{\n+    pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+}"
      },
      {
        "sha": "1d666cd54713f3eb491e3932b108a8471973f841",
        "filename": "src/consensus/header_verify.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/consensus/header_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/consensus/header_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/header_verify.h?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2016-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADER_VERIFY_H\n+#define BITCOIN_HEADER_VERIFY_H\n+\n+#include \"consensus/params.h\"\n+\n+class CBlockHeader;\n+class CBlockIndex;\n+class CValidationState;\n+namespace Consensus { struct Params; };\n+\n+bool CheckProof(const Consensus::Params& consensusParams, const CBlockHeader& pblock);\n+bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, uint64_t& nTries);\n+/** More convenient by hiding ref var nTries for testing */\n+bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock);\n+void ResetProof(const Consensus::Params& consensusParams, CBlockHeader* pblock);\n+\n+bool CheckChallenge(const Consensus::Params& consensusParams, CValidationState& state, const CBlockHeader *pblock, const CBlockIndex* pindexPrev);\n+void ResetChallenge(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CBlockIndex* pindexPrev);\n+\n+#endif // BITCOIN_HEADER_VERIFY_H"
      },
      {
        "sha": "1d71f1a69f4327f88c46f27807e74d2d3a3e6b05",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -10,13 +10,13 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/header_verify.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"validation.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n-#include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"script/standard.h\"\n #include \"timedata.h\"\n@@ -69,7 +69,7 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+        ResetChallenge(consensusParams, pblock, pindexPrev);\n \n     return nNewTime - nOldTime;\n }\n@@ -194,8 +194,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n     UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n-    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n-    pblock->nNonce         = 0;\n+    ResetChallenge(chainparams.GetConsensus(), pblock, pindexPrev);\n+    ResetProof(chainparams.GetConsensus(), pblock);\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;"
      },
      {
        "sha": "337cc369231f29f145e004756e7d810465c3d683",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -8,14 +8,14 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/header_verify.h\"\n #include \"consensus/params.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"rpc/server.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n@@ -98,7 +98,6 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n \n UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n-    static const int nInnerLoopCount = 0x10000;\n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n@@ -121,15 +120,11 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n-            ++pblock->nNonce;\n-            --nMaxTries;\n-        }\n-        if (nMaxTries == 0) {\n-            break;\n-        }\n-        if (pblock->nNonce == nInnerLoopCount) {\n-            continue;\n+        if (!MaybeGenerateProof(Params().GetConsensus(), pblock, nMaxTries)) {\n+            if (nMaxTries == 0)\n+                break;\n+            else\n+                continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         if (!ProcessNewBlock(Params(), shared_pblock, true, NULL))\n@@ -548,7 +543,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n     // Update nTime\n     UpdateTime(pblock, consensusParams, pindexPrev);\n-    pblock->nNonce = 0;\n+    ResetProof(consensusParams, pblock);\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n     const bool fPreSegWit = (THRESHOLD_ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));"
      },
      {
        "sha": "931feb7d7b4e897e7cfdd6cf5931010aaf9efdd4",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -8,7 +8,6 @@\n #include \"keystore.h\"\n #include \"net.h\"\n #include \"net_processing.h\"\n-#include \"pow.h\"\n #include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "f501c8dbe7468d2b35b5e5f6d09194ef1c278524",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"blockencodings.h\"\n+#include \"consensus/header_verify.h\"\n #include \"consensus/merkle.h\"\n #include \"chainparams.h\"\n #include \"random.h\"\n@@ -47,7 +48,7 @@ static CBlock BuildBlockTestCase() {\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n+    while (!GenerateProof(Params().GetConsensus(), &block));\n     return block;\n }\n \n@@ -289,7 +290,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n+    while (!GenerateProof(Params().GetConsensus(), &block));\n \n     // Test simple header round-trip with only coinbase\n     {"
      },
      {
        "sha": "b7dc5e5e897a3b8ea5a2f921d218a1d3cb066d29",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/header_verify.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"validation.h\"\n@@ -127,7 +128,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+    while (!GenerateProof(Params().GetConsensus(), &block));\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     ProcessNewBlock(chainparams, shared_pblock, true, NULL);"
      },
      {
        "sha": "51ca97ea7433d4fea613fb625440b0cdb49fc40f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -6,8 +6,8 @@\n #include \"txdb.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/header_verify.h\"\n #include \"hash.h\"\n-#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>\n@@ -174,6 +174,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n \n@@ -199,8 +200,9 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()) && pindexNew->GetBlockHash() != Params().GetConsensus().hashGenesisBlock)\n-                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                if (!CheckProof(consensusParams, pindexNew->GetBlockHeader()) &&\n+                    pindexNew->GetBlockHash() != consensusParams.hashGenesisBlock)\n+                    return error(\"%s: CheckProof failed: %s\", __func__, pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {"
      },
      {
        "sha": "5ca6b340e30999ec4d51b85173c95c0064d553dc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -10,13 +10,13 @@\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/header_verify.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"init.h\"\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n-#include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n@@ -1114,9 +1114,9 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams) &&\n+    if (!CheckProof(consensusParams, block) &&\n         block.GetHash() != consensusParams.hashGenesisBlock)\n-        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+        return error(\"%s: CheckProof: Errors in block header at %s\", __func__, pos.ToString());\n \n     return true;\n }\n@@ -2781,10 +2781,10 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW)\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (!CheckProof(consensusParams, block))\n         return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     return true;\n@@ -2799,7 +2799,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n+    if (fCheckPOW && !CheckBlockHeader(block, state, consensusParams))\n         return false;\n \n     // Check the merkle root.\n@@ -2931,8 +2931,8 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n+    if (!CheckChallenge(consensusParams, state, &block, pindexPrev))\n+        return false;\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())"
      },
      {
        "sha": "a1a1854ee76d29f523e49529e5bed125d6b0e5b2",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "patch": "@@ -471,7 +471,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams);\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks."
      }
    ]
  },
  {
    "sha": "5b343362631f62e84fb40d46708374a91ca5034c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjM0MzM2MjYzMWY2MmU4NGZiNDBkNDY3MDgzNzRhOTFjYTUwMzRj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-18T22:14:07Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:09Z"
      },
      "message": "Blocksign: Replace nBits and nNonce with UnionProof",
      "tree": {
        "sha": "9e7fc85dcc207a8df47e4c03a447e4eff47f8c3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e7fc85dcc207a8df47e4c03a447e4eff47f8c3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b343362631f62e84fb40d46708374a91ca5034c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI1AAoJEIhmwY6hyUSiBngP/10NInO3zDH0Z7BzHNdXPCEB\nmuk77JtqzRHiR1JCeRE6al9lQXKejNng+vJNNCkPeNBnhxrblO2P2mnqSldlullo\nUEG2+z/9XRxaFFkKt78nCqdM09m137um+RTc2+CVgOqAfh6/068Gz455a/rXv140\nF81WVTao5r/w+UWPtyvv47kHfFGkmg4XfAQecmCXJhJ6wF9CPIgYOw/VDygLHWOB\nH7TFRD0PjG4krXAkRGk1L60dY3dj+FUB1VIsyF1Isa5DXbAE/2yRo/G9QpF63KB+\nzdv9HrtYKCRGFlZz0z7gF+jZ46OVuGpN3usiRuIwv25IU11VZYD455cG+NDZQXRH\nXkXbR3hhffW6LiE9knSBHLyotG0fA5Yp17Qo2PcVNanEOF6YFVE5qY+Z19I0C/ZK\ndJMLkK+Xs9mciUa3ybMAL0AMpSIhvNMfFuh4NKy6R3mot2I18n6hfiPTyZz0FvyN\nzL23grEghxbrXETgYNH4weJlDn0YQ1wdxRJ0s80LA0/ANgLA/coWFxfbc4+beAnS\nhY7PoRmphVmLjledMfTvTQbYi1OQZPM+F01ekbSQplGEKWkdSPwE3NCk9BhWIDKZ\nskzytS0STE9mKq5QbCIYXGnV3kV3OB3dpN8lSLJ6XrxwgIx4eEsimNQuBCNm0UXI\nAvrSgQRRCLV60NBz+JMB\n=to6A\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e7fc85dcc207a8df47e4c03a447e4eff47f8c3b\nparent 0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476828847 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107189 +0100\n\nBlocksign: Replace nBits and nNonce with UnionProof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b343362631f62e84fb40d46708374a91ca5034c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b343362631f62e84fb40d46708374a91ca5034c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b343362631f62e84fb40d46708374a91ca5034c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d8f8c18be1aaf193534b3d3a12c7fcffa3cef97"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 88,
      "deletions": 56
    },
    "files": [
      {
        "sha": "60e388b813a166a2212739c799345c1a9bb08669",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -124,7 +124,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     arith_uint256 bnTarget;\n     bool fNegative;\n     bool fOverflow;\n-    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n+    bnTarget.SetCompact(block.proof.pow.nBits, &fNegative, &fOverflow);\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256"
      },
      {
        "sha": "e3cce2df020666e39c5d29a3bdeb0a4f40f6c506",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 20,
        "deletions": 12,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -196,8 +196,7 @@ class CBlockIndex\n     int nVersion;\n     uint256 hashMerkleRoot;\n     unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n+    union UnionProof proof;\n \n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     int32_t nSequenceId;\n@@ -224,8 +223,8 @@ class CBlockIndex\n         nVersion       = 0;\n         hashMerkleRoot = uint256();\n         nTime          = 0;\n-        nBits          = 0;\n-        nNonce         = 0;\n+        proof.pow.nBits = 0;\n+        proof.pow.nNonce = 0;\n     }\n \n     CBlockIndex()\n@@ -240,8 +239,13 @@ class CBlockIndex\n         nVersion       = block.nVersion;\n         hashMerkleRoot = block.hashMerkleRoot;\n         nTime          = block.nTime;\n-        nBits          = block.nBits;\n-        nNonce         = block.nNonce;\n+        proof          = block.proof;\n+    }\n+\n+    ~CBlockIndex()\n+    {\n+        if (fSignBlocksGlobal)\n+            delete(proof.script);\n     }\n \n     CDiskBlockPos GetBlockPos() const {\n@@ -270,8 +274,7 @@ class CBlockIndex\n             block.hashPrevBlock = pprev->GetBlockHash();\n         block.hashMerkleRoot = hashMerkleRoot;\n         block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n+        block.proof          = proof;\n         return block;\n     }\n \n@@ -386,8 +389,14 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(hashPrev);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        if (fSignBlocksGlobal) {\n+            // Don't try to sign the signature\n+            if (!(s.GetType() & SER_GETHASH))\n+                READWRITE(*(CScriptBase*)proof.script);\n+        } else {\n+            READWRITE(proof.pow.nBits);\n+            READWRITE(proof.pow.nNonce);\n+        }\n     }\n \n     uint256 GetBlockHash() const\n@@ -397,8 +406,7 @@ class CDiskBlockIndex : public CBlockIndex\n         block.hashPrevBlock   = hashPrev;\n         block.hashMerkleRoot  = hashMerkleRoot;\n         block.nTime           = nTime;\n-        block.nBits           = nBits;\n-        block.nNonce          = nNonce;\n+        block.proof           = proof;\n         return block.GetHash();\n     }\n "
      },
      {
        "sha": "bb352978c54f8d44dbdd64a7c5ea38127538b533",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -28,8 +28,8 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n \n     CBlock genesis;\n     genesis.nTime    = nTime;\n-    genesis.nBits    = nBits;\n-    genesis.nNonce   = nNonce;\n+    genesis.proof.pow.nBits    = nBits;\n+    genesis.proof.pow.nNonce   = nNonce;\n     genesis.nVersion = nVersion;\n     genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));\n     genesis.hashPrevBlock.SetNull();"
      },
      {
        "sha": "c2f00ec142df13af011cfa1adf2835abbe2412c7",
        "filename": "src/consensus/header_verify.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/consensus/header_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/consensus/header_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/header_verify.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -11,7 +11,7 @@\n \n bool CheckProof(const Consensus::Params& consensusParams, const CBlockHeader& block)\n {\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (!CheckProofOfWork(block.GetHash(), block.proof.pow.nBits, consensusParams))\n         return false;\n \n     return true;\n@@ -20,11 +20,11 @@ bool CheckProof(const Consensus::Params& consensusParams, const CBlockHeader& bl\n bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, uint64_t& nTries)\n {\n     const int nInnerLoopCount = 0x10000;\n-    while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, consensusParams)) {\n-        ++pblock->nNonce;\n+    while (nTries > 0 && pblock->proof.pow.nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->proof.pow.nBits, consensusParams)) {\n+        ++pblock->proof.pow.nNonce;\n         --nTries;\n     }\n-    return CheckProofOfWork(pblock->GetHash(), pblock->nBits, consensusParams);\n+    return CheckProofOfWork(pblock->GetHash(), pblock->proof.pow.nBits, consensusParams);\n }\n \n bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock)\n@@ -35,18 +35,18 @@ bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pbloc\n \n void ResetProof(const Consensus::Params& consensusParams, CBlockHeader* pblock)\n {\n-    pblock->nNonce = 0;\n+    pblock->proof.pow.nNonce = 0;\n }\n \n bool CheckChallenge(const Consensus::Params& consensusParams, CValidationState& state, const CBlockHeader *pblock, const CBlockIndex* pindexPrev)\n {\n-    if (pblock->nBits != GetNextWorkRequired(pindexPrev, pblock, consensusParams))\n+    if (pblock->proof.pow.nBits != GetNextWorkRequired(pindexPrev, pblock, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n \n     return true;\n }\n \n void ResetChallenge(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n {\n-    pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+    pblock->proof.pow.nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n }"
      },
      {
        "sha": "d6b9e0eb5f4301622dd39698c6f856c914559be8",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -32,12 +32,12 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->proof.pow.nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n-                return pindex->nBits;\n+                return pindex->proof.pow.nBits;\n             }\n         }\n-        return pindexLast->nBits;\n+        return pindexLast->proof.pow.nBits;\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n@@ -52,7 +52,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     if (params.fPowNoRetargeting)\n-        return pindexLast->nBits;\n+        return pindexLast->proof.pow.nBits;\n \n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n@@ -64,7 +64,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     // Retarget\n     const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n     arith_uint256 bnNew;\n-    bnNew.SetCompact(pindexLast->nBits);\n+    bnNew.SetCompact(pindexLast->proof.pow.nBits);\n     bnNew *= nActualTimespan;\n     bnNew /= params.nPowTargetTimespan;\n "
      },
      {
        "sha": "4896c8c37618623c7a6e11147ace2f3540b3b29a",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -18,12 +18,14 @@ uint256 CBlockHeader::GetHash() const\n std::string CBlock::ToString() const\n {\n     std::stringstream s;\n-    s << strprintf(\"CBlock(hash=%s, ver=0x%08x, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n+    std::string proofString = strprintf(\"PowProof(nBits=%08x, nNonce=%u)\", proof.pow.nBits, proof.pow.nNonce);\n+    s << strprintf(\"CBlock(hash=%s, ver=0x%08x, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, proof=%s, vtx=%u)\\n\",\n         GetHash().ToString(),\n         nVersion,\n         hashPrevBlock.ToString(),\n         hashMerkleRoot.ToString(),\n-        nTime, nBits, nNonce,\n+        nTime,\n+        proofString,\n         vtx.size());\n     for (unsigned int i = 0; i < vtx.size(); i++)\n     {"
      },
      {
        "sha": "43e69007d3e00a10cf54368809670bf615b8d2ca",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 31,
        "deletions": 9,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -10,6 +10,18 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n+static bool fSignBlocksGlobal = false;\n+\n+struct PowProof {\n+    uint32_t nBits;\n+    uint32_t nNonce;\n+};\n+\n+union UnionProof {\n+    PowProof pow;\n+    CScript* script;\n+};\n+\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block\n@@ -25,14 +37,19 @@ class CBlockHeader\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n     uint32_t nTime;\n-    uint32_t nBits;\n-    uint32_t nNonce;\n+    union UnionProof proof;\n \n     CBlockHeader()\n     {\n         SetNull();\n     }\n \n+    ~CBlockHeader()\n+    {\n+        if (fSignBlocksGlobal)\n+            delete(proof.script);\n+    }\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -41,8 +58,14 @@ class CBlockHeader\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        if (fSignBlocksGlobal) {\n+            // Don't try to sign the signature\n+            if (!(s.GetType() & SER_GETHASH))\n+                READWRITE(*(CScriptBase*)proof.script);\n+        } else {\n+            READWRITE(proof.pow.nBits);\n+            READWRITE(proof.pow.nNonce);\n+        }\n     }\n \n     void SetNull()\n@@ -51,13 +74,13 @@ class CBlockHeader\n         hashPrevBlock.SetNull();\n         hashMerkleRoot.SetNull();\n         nTime = 0;\n-        nBits = 0;\n-        nNonce = 0;\n+        proof.pow.nBits = 0;\n+        proof.pow.nNonce = 0;\n     }\n \n     bool IsNull() const\n     {\n-        return (nBits == 0);\n+        return proof.pow.nBits == 0;\n     }\n \n     uint256 GetHash() const;\n@@ -111,8 +134,7 @@ class CBlock : public CBlockHeader\n         block.hashPrevBlock  = hashPrevBlock;\n         block.hashMerkleRoot = hashMerkleRoot;\n         block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n+        block.proof          = proof;\n         return block;\n     }\n "
      },
      {
        "sha": "e9e624cb7652ff787872eb69ee8a7a2e11e57bb7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -55,10 +55,10 @@ double GetDifficulty(const CBlockIndex* blockindex)\n             blockindex = chainActive.Tip();\n     }\n \n-    int nShift = (blockindex->nBits >> 24) & 0xff;\n+    int nShift = (blockindex->proof.pow.nBits >> 24) & 0xff;\n \n     double dDiff =\n-        (double)0x0000ffff / (double)(blockindex->nBits & 0x00ffffff);\n+        (double)0x0000ffff / (double)(blockindex->proof.pow.nBits & 0x00ffffff);\n \n     while (nShift < 29)\n     {\n@@ -89,8 +89,8 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n     result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n     result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n+    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->proof.pow.nNonce));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->proof.pow.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n \n@@ -133,8 +133,8 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"tx\", txs));\n     result.push_back(Pair(\"time\", block.GetBlockTime()));\n     result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n+    result.push_back(Pair(\"nonce\", (uint64_t)block.proof.pow.nNonce));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.proof.pow.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n "
      },
      {
        "sha": "d6c2ab8d1e69d8af87f7470c406590651d85b255",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -591,7 +591,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     UniValue aux(UniValue::VOBJ);\n     aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n \n-    arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n+    arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->proof.pow.nBits);\n \n     UniValue aMutable(UniValue::VARR);\n     aMutable.push_back(\"time\");\n@@ -674,7 +674,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n     result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->proof.pow.nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n     const struct BIP9DeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];"
      },
      {
        "sha": "deb3fb6e5824b9fd1022ec33e863919a1f0bb6c7",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -32,7 +32,7 @@ static CBlock BuildBlockTestCase() {\n     block.vtx[0] = MakeTransactionRef(tx);\n     block.nVersion = 42;\n     block.hashPrevBlock = GetRandHash();\n-    block.nBits = 0x207fffff;\n+    block.proof.pow.nBits = 0x207fffff;\n \n     tx.vin[0].prevout.hash = GetRandHash();\n     tx.vin[0].prevout.n = 0;\n@@ -285,7 +285,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     block.vtx[0] = MakeTransactionRef(std::move(coinbase));\n     block.nVersion = 42;\n     block.hashPrevBlock = GetRandHash();\n-    block.nBits = 0x207fffff;\n+    block.proof.pow.nBits = 0x207fffff;\n \n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);"
      },
      {
        "sha": "b38dc78632e24357a0b467c933ad310b7d6a82d4",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         if (txFirst.size() < 4)\n             txFirst.push_back(pblock->vtx[0]);\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-        pblock->nNonce = blockinfo[i].nonce;\n+        pblock->proof.pow.nNonce = blockinfo[i].nonce;\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, NULL));\n         pblock->hashPrevBlock = pblock->GetHash();"
      },
      {
        "sha": "d37f870e0c93ba0be9ca867840c845de3d387445",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -21,7 +21,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n-    pindexLast.nBits = 0x1d00ffff;\n+    pindexLast.proof.pow.nBits = 0x1d00ffff;\n     BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00d86a);\n }\n \n@@ -33,7 +33,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n-    pindexLast.nBits = 0x1d00ffff;\n+    pindexLast.proof.pow.nBits = 0x1d00ffff;\n     BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00ffff);\n }\n \n@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n-    pindexLast.nBits = 0x1c05a3f4;\n+    pindexLast.proof.pow.nBits = 0x1c05a3f4;\n     BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1c0168fd);\n }\n \n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n-    pindexLast.nBits = 0x1c387f6f;\n+    pindexLast.proof.pow.nBits = 0x1c387f6f;\n     BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00e1fd);\n }\n \n@@ -69,7 +69,7 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n         blocks[i].pprev = i ? &blocks[i - 1] : NULL;\n         blocks[i].nHeight = i;\n         blocks[i].nTime = 1269211443 + i * chainParams->GetConsensus().nPowTargetSpacing;\n-        blocks[i].nBits = 0x207fffff; /* target 0x7fffff000... */\n+        blocks[i].proof.pow.nBits = 0x207fffff; /* target 0x7fffff000... */\n         blocks[i].nChainWork = i ? blocks[i - 1].nChainWork + GetBlockProof(blocks[i - 1]) : arith_uint256(0);\n     }\n "
      },
      {
        "sha": "f35e598af9e8727dd1c76816f59a05bda0230eed",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b343362631f62e84fb40d46708374a91ca5034c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b343362631f62e84fb40d46708374a91ca5034c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5b343362631f62e84fb40d46708374a91ca5034c",
        "patch": "@@ -195,8 +195,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n                 pindexNew->nVersion       = diskindex.nVersion;\n                 pindexNew->hashMerkleRoot = diskindex.hashMerkleRoot;\n                 pindexNew->nTime          = diskindex.nTime;\n-                pindexNew->nBits          = diskindex.nBits;\n-                pindexNew->nNonce         = diskindex.nNonce;\n+                pindexNew->proof.pow.nBits = diskindex.proof.pow.nBits;\n+                pindexNew->proof.pow.nNonce = diskindex.proof.pow.nNonce;\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n "
      }
    ]
  },
  {
    "sha": "c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDIzZGQ0OWQwMDA3NGEwMTRmZDBmMzVlYzA3Yjc3NmQwYThkY2Yy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-04T17:31:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:10Z"
      },
      "message": "Base58: allow CBitcoinSecret to get CChainParams explicitly",
      "tree": {
        "sha": "f5e81d4816c8c1ebdbca805fb997cd40d29e9acc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5e81d4816c8c1ebdbca805fb997cd40d29e9acc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI2AAoJEIhmwY6hyUSi3rkP/3Nlrm5+C9L9/sDbFP2U5nRv\nguVmRRlH5WILVrh/LCE/1R5R4FVjkDyFSDGX4/84+plogN/URecQEO7fAtriwiyi\nNluYSvjdKaTGEtXjbJZ2xhZP553QeCN9tUAFLW8KyEjCYUPIZmbwmgDGFhdimg9N\nFSCVe4GmHvylbWU7Bmi7r2HXe3sTSSoxwATCUvLOIO7/d329sE5Fx2sXW/uUdfTx\nPGfD7YaPEzrY8Je0PVS0Ca7eje5k6CQJ6pnLnj5u/UZSgWDiAIrWIx+HTaY4VODT\ns8i6m4s9zqt2pPX7LcKb4lFZPqPHyFaBOpovL92KO3m1p1MV9Pj2GZ9I7qK6X/P8\nQWaXesI144eB6v3+FOscGkAR3E5xI+R+koyrwDHKWd90JOolF46/tGU+JCMI3KzI\nF1sBa57mN4Ul8th8ddzS4WoawiabGDNDwX5lDsd+h4qMA4LKYCdGipNEL+YNojOg\nYPWjD6rsxGfRofplWu99NWzLUoIQN4P1qZPZg6UkF82CdJhNdD7TgTn9VR0YuFWM\ng2BzBsfooZDVki9zzC7xRUDtkETDJH47RS2JJq7y2HCklZx6xEh/LIiSnsNziOmW\nrTwKXlcfEAfLPCN9yDTVa0FsSs5HXsnyZlnytmhTf58w/eq8CnScEX0m5fsZUSno\nKFc+Y87XagT8BXlEC9TD\n=1pzv\n-----END PGP SIGNATURE-----",
        "payload": "tree f5e81d4816c8c1ebdbca805fb997cd40d29e9acc\nparent 5b343362631f62e84fb40d46708374a91ca5034c\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1478280697 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107190 +0100\n\nBase58: allow CBitcoinSecret to get CChainParams explicitly\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c023dd49d00074a014fd0f35ec07b776d0a8dcf2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b343362631f62e84fb40d46708374a91ca5034c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b343362631f62e84fb40d46708374a91ca5034c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b343362631f62e84fb40d46708374a91ca5034c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "98c7cd9805e4da9f409ecc227a75240bc6daa419",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c023dd49d00074a014fd0f35ec07b776d0a8dcf2/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c023dd49d00074a014fd0f35ec07b776d0a8dcf2/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
        "patch": "@@ -287,9 +287,14 @@ bool CBitcoinAddress::IsScript() const\n }\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n+{\n+    SetKey(vchSecret, Params());\n+}\n+\n+void CBitcoinSecret::SetKey(const CKey& vchSecret, const CChainParams& chainparams)\n {\n     assert(vchSecret.IsValid());\n-    SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n+    SetData(chainparams.Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n     if (vchSecret.IsCompressed())\n         vchData.push_back(1);\n }"
      },
      {
        "sha": "3929b072f49889454ec73ac729af9ce013da5a22",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c023dd49d00074a014fd0f35ec07b776d0a8dcf2/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c023dd49d00074a014fd0f35ec07b776d0a8dcf2/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
        "patch": "@@ -125,13 +125,15 @@ class CBitcoinAddress : public CBase58Data {\n class CBitcoinSecret : public CBase58Data\n {\n public:\n+    void SetKey(const CKey& vchSecret, const CChainParams& chainparams);\n     void SetKey(const CKey& vchSecret);\n     CKey GetKey();\n     bool IsValid() const;\n     bool SetString(const char* pszSecret);\n     bool SetString(const std::string& strSecret);\n \n     CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }\n+    CBitcoinSecret(const CKey& vchSecret, const CChainParams& chainparams) { SetKey(vchSecret, chainparams); }\n     CBitcoinSecret() {}\n };\n "
      }
    ]
  },
  {
    "sha": "e43c65a392be4310e930840043396f0b7ce3cd1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDNjNjVhMzkyYmU0MzEwZTkzMDg0MDA0MzM5NmYwYjdjZTNjZDFk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T14:09:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:11Z"
      },
      "message": "Util: Create ArgsManager class",
      "tree": {
        "sha": "b6287f5c668509f9c1abbac8edc1e24d29e98223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6287f5c668509f9c1abbac8edc1e24d29e98223"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e43c65a392be4310e930840043396f0b7ce3cd1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI3AAoJEIhmwY6hyUSisj8P/1+F5EDwQxO3dKWECI+1tqHZ\n53aEKQMLmsvRqfZARvcgohMDzf8Ig/DrtfxO6OtDQXSv9k6OiB7fRFQZwVpSe37c\ny25Z+xD6rZTebSANEiUe46vI+CRGM+T9cv92bSJ5h3XwH99cFV+nx/HBguPqiH96\nri1PIQCiWOJCy6CW/aXo3GJLzOerp0lifN50iIArehZt93Iuccu4+3KJ4HCtPVWY\n5YFl/CGo0Iti7I+haktPdkhrWwJ1VB5My1lriuyhgZc4E95I6jWu/nv8IdX3Ta7k\nTDgcNvxBrPcGKsVGxh9FAPGtlMTHGrnIid6Ofcf57hum/a5tLfS73sOuFd6c47b5\nyamK3TjwSvaPrTJlly083YcqWSYGbDhPTJkjfVbagF6+XjICDJBOkHIcvoCrW55n\n6bOZRufWO5xeAlZdqffDBN/bR2nPWnEwVH1Cn4l39M/RiPCrxR5XUnmTsxhJ6S3m\naFYaJg8D4bPl1BwjzJmretHroze6AKCqadiVWBC8LizZuiBRhS1vb/g4buh0pxXb\na5TypLbesExpx4dqA1+k8LAkAaaiqhvYFwYuS5VBEQb9cPCxCNY/3LA2/bQdvJqJ\nFDp1+Cix/Wwq4WiJk0+6y8FNJBu1JAybx6KcPZq/BJLDTEOdyGR3pnpwXjIrsGZW\n01A9sC2oRrosI52lNrcx\n=VHMy\n-----END PGP SIGNATURE-----",
        "payload": "tree b6287f5c668509f9c1abbac8edc1e24d29e98223\nparent c023dd49d00074a014fd0f35ec07b776d0a8dcf2\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483970941 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107191 +0100\n\nUtil: Create ArgsManager class\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43c65a392be4310e930840043396f0b7ce3cd1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e43c65a392be4310e930840043396f0b7ce3cd1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43c65a392be4310e930840043396f0b7ce3cd1d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c023dd49d00074a014fd0f35ec07b776d0a8dcf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c023dd49d00074a014fd0f35ec07b776d0a8dcf2"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 114,
      "deletions": 42
    },
    "files": [
      {
        "sha": "ab60ad9bb00d5f22038ba56c8dfe26af3c53b47a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 28,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e43c65a392be4310e930840043396f0b7ce3cd1d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e43c65a392be4310e930840043396f0b7ce3cd1d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e43c65a392be4310e930840043396f0b7ce3cd1d",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern std::map<std::string, std::string> mapArgs;\n-\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -100,52 +98,63 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n+class TestArgsManager : public ArgsManager\n+{\n+public:\n+    std::map<std::string, std::string>& GetMapArgs()\n+    {\n+        return mapArgs;\n+    };\n+};\n+\n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n+    TestArgsManager testArgs;\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n-    ParseParameters(0, (char**)argv_test);\n-    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+    testArgs.ParseParameters(0, (char**)argv_test);\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n \n-    ParseParameters(1, (char**)argv_test);\n-    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n \n-    ParseParameters(5, (char**)argv_test);\n+    testArgs.ParseParameters(5, (char**)argv_test);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(mapArgs.size() == 3 && mapMultiArgs.size() == 3);\n-    BOOST_CHECK(IsArgSet(\"-a\") && IsArgSet(\"-b\") && IsArgSet(\"-ccc\")\n-                && !IsArgSet(\"f\") && !IsArgSet(\"-d\"));\n+    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && mapMultiArgs.size() == 3);\n+    BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n+                && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n     BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\")\n                 && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n \n-    BOOST_CHECK(mapArgs[\"-a\"] == \"\" && mapArgs[\"-ccc\"] == \"multiple\");\n+    BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n     BOOST_CHECK(mapMultiArgs.at(\"-ccc\").size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n-    mapArgs.clear();\n-    mapArgs[\"strtest1\"] = \"string...\";\n+    TestArgsManager testArgs;\n+    testArgs.GetMapArgs().clear();\n+    testArgs.GetMapArgs()[\"strtest1\"] = \"string...\";\n     // strtest2 undefined on purpose\n-    mapArgs[\"inttest1\"] = \"12345\";\n-    mapArgs[\"inttest2\"] = \"81985529216486895\";\n+    testArgs.GetMapArgs()[\"inttest1\"] = \"12345\";\n+    testArgs.GetMapArgs()[\"inttest2\"] = \"81985529216486895\";\n     // inttest3 undefined on purpose\n-    mapArgs[\"booltest1\"] = \"\";\n+    testArgs.GetMapArgs()[\"booltest1\"] = \"\";\n     // booltest2 undefined on purpose\n-    mapArgs[\"booltest3\"] = \"0\";\n-    mapArgs[\"booltest4\"] = \"1\";\n-\n-    BOOST_CHECK_EQUAL(GetArg(\"strtest1\", \"default\"), \"string...\");\n-    BOOST_CHECK_EQUAL(GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest3\", -1), -1);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest1\", false), true);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest2\", false), false);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest3\", false), false);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest4\", false), true);\n+    testArgs.GetMapArgs()[\"booltest3\"] = \"0\";\n+    testArgs.GetMapArgs()[\"booltest4\"] = \"1\";\n+\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest4\", false), true);\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      },
      {
        "sha": "7a6dc44a0a94936a1dca9ae6f0f4a4c8e82018ae",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 12,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e43c65a392be4310e930840043396f0b7ce3cd1d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e43c65a392be4310e930840043396f0b7ce3cd1d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e43c65a392be4310e930840043396f0b7ce3cd1d",
        "patch": "@@ -12,7 +12,6 @@\n #include \"chainparamsbase.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n-#include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n \n@@ -102,8 +101,7 @@ using namespace std;\n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n-CCriticalSection cs_args;\n-map<string, string> mapArgs;\n+ArgsManager argsGlobal;\n static map<string, vector<string> > _mapMultiArgs;\n const map<string, vector<string> >& mapMultiArgs = _mapMultiArgs;\n bool fDebug = false;\n@@ -345,7 +343,7 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n-void ParseParameters(int argc, const char* const argv[])\n+void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     mapArgs.clear();\n@@ -381,37 +379,37 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-bool IsArgSet(const std::string& strArg)\n+bool ArgsManager::IsArgSet(const std::string& strArg)\n {\n     LOCK(cs_args);\n     return mapArgs.count(strArg);\n }\n \n-std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return mapArgs[strArg];\n     return strDefault;\n }\n \n-int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);\n     return nDefault;\n }\n \n-bool GetBoolArg(const std::string& strArg, bool fDefault)\n+bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n-bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n@@ -420,20 +418,64 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n     return true;\n }\n \n-bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n+bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n     if (fValue)\n         return SoftSetArg(strArg, std::string(\"1\"));\n     else\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n-void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n }\n \n+void ParseParameters(int argc, const char* const argv[])\n+{\n+    argsGlobal.ParseParameters(argc, argv);\n+}\n+\n+void ReadConfigFile(const std::string& confPath)\n+{\n+    argsGlobal.ReadConfigFile(confPath);\n+}\n+\n+bool IsArgSet(const std::string& strArg)\n+{\n+    return argsGlobal.IsArgSet(strArg);\n+}\n+\n+std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+{\n+    return argsGlobal.GetArg(strArg, strDefault);\n+}\n+\n+int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+{\n+    return argsGlobal.GetArg(strArg, nDefault);\n+}\n+\n+bool GetBoolArg(const std::string& strArg, bool fDefault)\n+{\n+    return argsGlobal.GetBoolArg(strArg, fDefault);\n+}\n+\n+bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    return argsGlobal.SoftSetArg(strArg, strValue);\n+}\n+\n+bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n+{\n+    return argsGlobal.SoftSetBoolArg(strArg, fValue);\n+}\n+\n+void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    return argsGlobal.ForceSetArg(strArg, strValue);\n+}\n \n \n static const int screenWidth = 79;\n@@ -552,7 +594,7 @@ boost::filesystem::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n-void ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n     boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())"
      },
      {
        "sha": "bf1375e50f45576aa3dc123c55d8a89d9e11461a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e43c65a392be4310e930840043396f0b7ce3cd1d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e43c65a392be4310e930840043396f0b7ce3cd1d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e43c65a392be4310e930840043396f0b7ce3cd1d",
        "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include \"compat.h\"\n+#include \"sync.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n \n@@ -91,7 +92,6 @@ bool error(const char* fmt, const Args&... args)\n }\n \n void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n-void ParseParameters(int argc, const char*const argv[]);\n void FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n@@ -106,7 +106,6 @@ boost::filesystem::path GetConfigFile(const std::string& confPath);\n boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n #endif\n-void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n@@ -123,6 +122,14 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n+class ArgsManager\n+{\n+protected:\n+    CCriticalSection cs_args;\n+    std::map<std::string, std::string> mapArgs;\n+public:\n+    void ParseParameters(int argc, const char*const argv[]);\n+    void ReadConfigFile(const std::string& confPath);\n /**\n  * Return true if the given argument has been manually set\n  *\n@@ -178,6 +185,20 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n // Forces a arg setting, used only in testing\n void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+};\n+\n+extern ArgsManager argsGlobal;\n+\n+// wrappers using the global ArgsManager:\n+void ParseParameters(int argc, const char*const argv[]);\n+void ReadConfigFile(const std::string& confPath);\n+bool IsArgSet(const std::string& strArg);\n+std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+bool GetBoolArg(const std::string& strArg, bool fDefault);\n+bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n+bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n+void ForceSetArg(const std::string& strArg, const std::string& strValue);\n \n /**\n  * Format a string to be used as group of options in help messages"
      }
    ]
  },
  {
    "sha": "df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjBkZDE4MTNhYjdhOTE5NTA4MDJkYWRmOTU1YTlmYzY4ZGQ2ZWQ5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T15:14:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:12Z"
      },
      "message": "Util: s/mapMultiArgs.count(/argsGlobal.IsArgSet(/",
      "tree": {
        "sha": "9165518236bdcf1fd9b293cb0c9f07f968d93102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9165518236bdcf1fd9b293cb0c9f07f968d93102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI4AAoJEIhmwY6hyUSiTygQANE86QvPjSfnBPjmk2fPzn+j\nBJbjSC1M1yuxXKH91Eay20tyIC3iLl+gapJw5F387n23w9DxMbyOjEFBnn8PDA6E\nZzDNv5mkFWv+CTU0IPsGLQzXX1xrlVZpaDlSrYGl1fQm599mFDNJ8CIQGSSpFGr5\nh1+Udiqilos7428l+KbxpC9au6RPlA6RvqZJzCuDQQHgGe4PB+lR4GyfIWFLTE4s\n7oMUsU+JxedJQ9w16jeaoTuh1h/YEXNMI5kpMsQjtm37FT74R4fA7wEXhEkl93oM\n650xZyVSpw+HryWTGC0zxboHjxCYH3OWhKLBRlQXI/u992BLD/zfpCJg/d11iHcB\nPJ9vgQD82K6dLgiu16boXdcu8lMEmXuuwc0RU2OJVashyUOrlJFtFXHrJbWt+lth\nYl7lH5dGwuAfKAvvDTKFOJkgwtxL+UgxYQqWTIScYGOceyonZbJM0zx+jUQwrjIP\ny9Hmg87KrTnQwcuCwaGJZhL8RZWhwk+Fs3s8U8BZDauNt2LkcaajFTOlWkpnQT16\nfzniyXH54PX8jb+AK0xBz7kziPEmO0tQKizFNliU8FMOOZ+BHsB6t2tEFdyEd9xc\naMq4Myb6iNxwye+1/c0mMCgIq5ZB+AfsUb/4K7S6BcfFDczMsl4UOL4scfX+IvSx\nmzb/LIBSpvOtMDb/WA3s\n=w3vu\n-----END PGP SIGNATURE-----",
        "payload": "tree 9165518236bdcf1fd9b293cb0c9f07f968d93102\nparent e43c65a392be4310e930840043396f0b7ce3cd1d\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483974846 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107192 +0100\n\nUtil: s/mapMultiArgs.count(/argsGlobal.IsArgSet(/\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e43c65a392be4310e930840043396f0b7ce3cd1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43c65a392be4310e930840043396f0b7ce3cd1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e43c65a392be4310e930840043396f0b7ce3cd1d"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "0f7f3321340ca5dacddb304eb7902a45c7cb7f6a",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "patch": "@@ -93,7 +93,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+    if (argsGlobal.IsArgSet(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n         BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n         {"
      },
      {
        "sha": "822f039c5a8f7001f5a485cc317f0246122c750d",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "patch": "@@ -203,7 +203,7 @@ static bool InitHTTPAllowList()\n     LookupHost(\"::1\", localv6, false);\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n-    if (mapMultiArgs.count(\"-rpcallowip\")) {\n+    if (argsGlobal.IsArgSet(\"-rpcallowip\")) {\n         const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n         for (std::string strAllow : vAllow) {\n             CSubNet subnet;\n@@ -328,7 +328,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         if (IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n-    } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address\n+    } else if (argsGlobal.IsArgSet(\"-rpcbind\")) { // Specific bind address\n         const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             int port = defaultPort;"
      },
      {
        "sha": "f734abcd61b3990199582a5a3b52d61aa149252a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "patch": "@@ -732,7 +732,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n+    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -878,8 +878,8 @@ bool AppInitParameterInteraction()\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(\n-                (mapMultiArgs.count(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n-                (mapMultiArgs.count(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n+                (argsGlobal.IsArgSet(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n+                (argsGlobal.IsArgSet(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n     nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n@@ -895,7 +895,7 @@ bool AppInitParameterInteraction()\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n-    fDebug = mapMultiArgs.count(\"-debug\");\n+    fDebug = argsGlobal.IsArgSet(\"-debug\");\n     // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n     if (fDebug) {\n         const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n@@ -1062,7 +1062,7 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n-    if (mapMultiArgs.count(\"-bip9params\")) {\n+    if (argsGlobal.IsArgSet(\"-bip9params\")) {\n         // Allow overriding BIP9 parameters for testing\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n@@ -1213,7 +1213,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<string> uacomments;\n-    if (mapMultiArgs.count(\"-uacomment\")) {\n+    if (argsGlobal.IsArgSet(\"-uacomment\")) {\n         BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n@@ -1227,7 +1227,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n-    if (mapMultiArgs.count(\"-onlynet\")) {\n+    if (argsGlobal.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n@@ -1242,7 +1242,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-whitelist\")) {\n+    if (argsGlobal.IsArgSet(\"-whitelist\")) {\n         BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n@@ -1295,15 +1295,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (fListen) {\n         bool fBound = false;\n-        if (mapMultiArgs.count(\"-bind\")) {\n+        if (argsGlobal.IsArgSet(\"-bind\")) {\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n-        if (mapMultiArgs.count(\"-whitebind\")) {\n+        if (argsGlobal.IsArgSet(\"-whitebind\")) {\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n@@ -1313,7 +1313,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n             }\n         }\n-        if (!mapMultiArgs.count(\"-bind\") && !mapMultiArgs.count(\"-whitebind\")) {\n+        if (!argsGlobal.IsArgSet(\"-bind\") && !argsGlobal.IsArgSet(\"-whitebind\")) {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n             fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n@@ -1323,7 +1323,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n     }\n \n-    if (mapMultiArgs.count(\"-externalip\")) {\n+    if (argsGlobal.IsArgSet(\"-externalip\")) {\n         BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n@@ -1333,7 +1333,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-seednode\")) {\n+    if (argsGlobal.IsArgSet(\"-seednode\")) {\n         BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n             connman.AddOneShot(strDest);\n     }\n@@ -1585,7 +1585,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<boost::filesystem::path> vImportFiles;\n-    if (mapMultiArgs.count(\"-loadblock\"))\n+    if (argsGlobal.IsArgSet(\"-loadblock\"))\n     {\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n             vImportFiles.push_back(strFile);"
      },
      {
        "sha": "c11cfcaa606f08f375bf673056f422063f3f3e5c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "patch": "@@ -1570,7 +1570,7 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n+    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n@@ -1776,7 +1776,7 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        if (mapMultiArgs.count(\"-addnode\"))\n+        if (argsGlobal.IsArgSet(\"-addnode\"))\n             vAddedNodes = mapMultiArgs.at(\"-addnode\");\n     }\n \n@@ -2183,7 +2183,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n-    if (!mapMultiArgs.count(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n+    if (!argsGlobal.IsArgSet(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n         threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages"
      },
      {
        "sha": "47a082c8dfe953ec4e86805ddc6a384e85ff1018",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0dd1813ab7a91950802dadf955a9fc68dd6ed9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "patch": "@@ -238,7 +238,7 @@ bool LogAcceptCategory(const char* category)\n         static boost::thread_specific_ptr<set<string> > ptrCategory;\n         if (ptrCategory.get() == NULL)\n         {\n-            if (mapMultiArgs.count(\"-debug\")) {\n+            if (argsGlobal.IsArgSet(\"-debug\")) {\n                 const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n                 ptrCategory.reset(new set<string>(categories.begin(), categories.end()));\n                 // thread_specific_ptr automatically deletes the set when the thread ends."
      }
    ]
  },
  {
    "sha": "c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2MxNWI0NzIxN2JkMWMyMmZiNjIyMWY2MzNiMTFmY2QyNGI4Y2Ez",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T15:30:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:13Z"
      },
      "message": "Util: Introduce ArgsManager::ArgsAt()",
      "tree": {
        "sha": "1c335775fef925f6d7aadf02ccdfe3949494fc04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c335775fef925f6d7aadf02ccdfe3949494fc04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI5AAoJEIhmwY6hyUSi7rsP/05UBY+xFY71gNPfzCL8Ptnq\no0PMNx5nF8Bmzx6m/KEXNqYBCy6UfI9blMHRmFa9SYlud7AevVcgHSFJ5h6nkRuB\nbwSajLRbWcJWir7+NF9IcPVtaEK+hqa4GYFKuVTWh6EtHHYVmDXok9ejCBjjj4zP\nFWSSBqeD25qUhMTByQYUs/XygIA7VO9IIFMBWLsZahrVdjSYn0we/NdQ/i3uklMr\n1DgVtoH/dRrvAWk7DOWbeUkwioIKJLTb045TjlHTrQYdjibqKdDd15+hzzL9DVr2\nLYbfX1BdZpiq7cMIR9zG+1IJO3Z/E9peeoJbCBqsxiDJQISlyL73Hhi+8kLL7Kou\ngfP9Gcl+55ufCSmxF5mXz9XwSz8vbhLhDMoEb7a1KqzE2HQ8mgIcifKqXXXyLyCB\n+7b9dvybAKN4OPjkajryxAh5k+L85aAnG+RtprKt4ykl6F2joUXmMcMvRyvoRN20\nV1sf+xKC3ip/e75duOcevwL6YXSvy4uI1joJrYws6H0mv0bmi1JBLmdaH0/1IAfB\nKhDguBUVg722T6xXUQ9iw9mIIui/YIc7OzYJ9bS93gC/eOGvH+bI6REZkSmJa9Yi\nJ1HJwYoBihggmBGYFHXYAaFvXSS4A3PfJtsxXgC2V90RoUumi6ExeP56WZ8q5ajq\n7sE3jaHZi0CO7NZ62g8Q\n=vuJi\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c335775fef925f6d7aadf02ccdfe3949494fc04\nparent df0dd1813ab7a91950802dadf955a9fc68dd6ed9\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483975822 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107193 +0100\n\nUtil: Introduce ArgsManager::ArgsAt()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0dd1813ab7a91950802dadf955a9fc68dd6ed9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df0dd1813ab7a91950802dadf955a9fc68dd6ed9"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 28,
      "deletions": 22
    },
    "files": [
      {
        "sha": "b0442bcb1d0f54896b82ee28e4b0891b0f09629c",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -95,7 +95,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (argsGlobal.IsArgSet(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n+        BOOST_FOREACH(std::string strRPCAuth, argsGlobal.ArgsAt(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));"
      },
      {
        "sha": "de9c8a58a9d66ac69da70ceeb29aab9ffe9712c0",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -204,7 +204,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     if (argsGlobal.IsArgSet(\"-rpcallowip\")) {\n-        const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n+        const std::vector<std::string>& vAllow = argsGlobal.ArgsAt(\"-rpcallowip\");\n         for (std::string strAllow : vAllow) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n@@ -329,7 +329,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (argsGlobal.IsArgSet(\"-rpcbind\")) { // Specific bind address\n-        const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n+        const std::vector<std::string>& vbind = argsGlobal.ArgsAt(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             int port = defaultPort;\n             std::string host;"
      },
      {
        "sha": "f2ccd0c436ecbce79755052a0c926d3e2b43122f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -732,7 +732,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n+    if (argsGlobal.IsArgSet(\"-connect\") && argsGlobal.ArgsAt(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -878,8 +878,8 @@ bool AppInitParameterInteraction()\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(\n-                (argsGlobal.IsArgSet(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n-                (argsGlobal.IsArgSet(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n+                (argsGlobal.IsArgSet(\"-bind\") ? argsGlobal.ArgsAt(\"-bind\").size() : 0) +\n+                (argsGlobal.IsArgSet(\"-whitebind\") ? argsGlobal.ArgsAt(\"-whitebind\").size() : 0), size_t(1));\n     nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n@@ -898,7 +898,7 @@ bool AppInitParameterInteraction()\n     fDebug = argsGlobal.IsArgSet(\"-debug\");\n     // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n     if (fDebug) {\n-        const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n+        const vector<string>& categories = argsGlobal.ArgsAt(\"-debug\");\n         if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), string(\"0\")) != categories.end())\n             fDebug = false;\n     }\n@@ -1067,7 +1067,7 @@ bool AppInitParameterInteraction()\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const vector<string>& deployments = mapMultiArgs.at(\"-bip9params\");\n+        const vector<string>& deployments = argsGlobal.ArgsAt(\"-bip9params\");\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n             boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n@@ -1214,7 +1214,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<string> uacomments;\n     if (argsGlobal.IsArgSet(\"-uacomment\")) {\n-        BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        BOOST_FOREACH(string cmt, argsGlobal.ArgsAt(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n@@ -1229,7 +1229,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (argsGlobal.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n+        BOOST_FOREACH(const std::string& snet, argsGlobal.ArgsAt(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1243,7 +1243,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (argsGlobal.IsArgSet(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n+        BOOST_FOREACH(const std::string& net, argsGlobal.ArgsAt(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1296,15 +1296,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fListen) {\n         bool fBound = false;\n         if (argsGlobal.IsArgSet(\"-bind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n+            BOOST_FOREACH(const std::string& strBind, argsGlobal.ArgsAt(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n         if (argsGlobal.IsArgSet(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n+            BOOST_FOREACH(const std::string& strBind, argsGlobal.ArgsAt(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1324,7 +1324,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (argsGlobal.IsArgSet(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n+        BOOST_FOREACH(const std::string& strAddr, argsGlobal.ArgsAt(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1334,7 +1334,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (argsGlobal.IsArgSet(\"-seednode\")) {\n-        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n+        BOOST_FOREACH(const std::string& strDest, argsGlobal.ArgsAt(\"-seednode\"))\n             connman.AddOneShot(strDest);\n     }\n \n@@ -1587,7 +1587,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (argsGlobal.IsArgSet(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n+        BOOST_FOREACH(const std::string& strFile, argsGlobal.ArgsAt(\"-loadblock\"))\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "925c0e5462c723430911a55c1c5025ddca3635a8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -1570,12 +1570,12 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (argsGlobal.IsArgSet(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n+    if (argsGlobal.IsArgSet(\"-connect\") && argsGlobal.ArgsAt(\"-connect\").size() > 0)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-connect\"))\n+            BOOST_FOREACH(const std::string& strAddr, argsGlobal.ArgsAt(\"-connect\"))\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1777,7 +1777,7 @@ void CConnman::ThreadOpenAddedConnections()\n     {\n         LOCK(cs_vAddedNodes);\n         if (argsGlobal.IsArgSet(\"-addnode\"))\n-            vAddedNodes = mapMultiArgs.at(\"-addnode\");\n+            vAddedNodes = argsGlobal.ArgsAt(\"-addnode\");\n     }\n \n     while (true)\n@@ -2183,7 +2183,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n-    if (!argsGlobal.IsArgSet(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n+    if (!argsGlobal.IsArgSet(\"-connect\") || argsGlobal.ArgsAt(\"-connect\").size() != 1 || argsGlobal.ArgsAt(\"-connect\")[0] != \"0\")\n         threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages"
      },
      {
        "sha": "9e39ff9f3d0c7a215a5a461498cf5c4a946e8761",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n                 && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n \n     BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n-    BOOST_CHECK(mapMultiArgs.at(\"-ccc\").size() == 2);\n+    BOOST_CHECK(testArgs.ArgsAt(\"-ccc\").size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)"
      },
      {
        "sha": "c8529363783e68820227b1d938f6ebfba02222f2",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -239,7 +239,7 @@ bool LogAcceptCategory(const char* category)\n         if (ptrCategory.get() == NULL)\n         {\n             if (argsGlobal.IsArgSet(\"-debug\")) {\n-                const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n+                const vector<string>& categories = argsGlobal.ArgsAt(\"-debug\");\n                 ptrCategory.reset(new set<string>(categories.begin(), categories.end()));\n                 // thread_specific_ptr automatically deletes the set when the thread ends.\n             } else\n@@ -379,6 +379,11 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n+const std::vector<std::string>& ArgsManager::ArgsAt(const std::string& strArg) const\n+{\n+    return mapMultiArgs.at(strArg);\n+}\n+\n bool ArgsManager::IsArgSet(const std::string& strArg)\n {\n     LOCK(cs_args);"
      },
      {
        "sha": "257246490f09594ec86261bafe579d50bae8f404",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "patch": "@@ -130,6 +130,7 @@ class ArgsManager\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n+    const std::vector<std::string>& ArgsAt(const std::string& strArg) const;\n /**\n  * Return true if the given argument has been manually set\n  *"
      }
    ]
  },
  {
    "sha": "f884893822c051b47fa60ea349652705c6bc7d7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODg0ODkzODIyYzA1MWI0N2ZhNjBlYTM0OTY1MjcwNWM2YmM3ZDdi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-09T15:44:28Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:14Z"
      },
      "message": "Util: Put mapMultiArgs inside ArgsManager",
      "tree": {
        "sha": "0df0ed3917a71618dd0a925ac6c832a8284f3763",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df0ed3917a71618dd0a925ac6c832a8284f3763"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f884893822c051b47fa60ea349652705c6bc7d7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI6AAoJEIhmwY6hyUSi9ZYQAIPWRj3vOT8PFmrsKa98OCge\n3Chc13rIxtnm9nsE3EYq3A6/DeKR6Nrjp0Wwy/TOuP7ONJ8nriWsseDUj/68C9Be\ncWjQ090mhDQ3Px4LiqCVocdz6vw4bsheBNnqybCFfMMP1EFceBQHxYVKs1rGg7yN\nDR3Y7IVY4jx/JmXI3L6qZjHo6kLYHjB1J7WfyglrROlyWzCeEDDbQuATd51EMF4V\npuxeyHaxq3LncWbkGGksriu/5SNCHkfkAV8QqROnBBoUD672ia/FFcjfh9f9Y7Jh\nRvjs21ztM38sWe9NOO00aK6sef3qS3gAI4FrjxiyfKq4GDlvuAJNYKCWEI/bDos/\n5ilqfCuwPDEmgIrmhmhA6MhHoy582VnXRPCFPsy7fKpDXfwKzTbKjK9Dth3FxGl2\nbIbG+sGPsXxpIEhhGfdxlEcl5Z/k/9Eci3vJImsLeRGWgIQK+kuZiggQFikAQWyS\nm3vjFxu3HAVs8P7c++hGkosrSjGdgUAGnfLF+66m7ylu9lUnpwPVpCMNes5e5K2e\ncCea8Ml4gYGQaVwwY7I7yV//7twjpu56n17GSrpeFskKnkIl++fD+EO4Pgae6XHk\n+0vBe9ijyx4RzLyS5kHc9rTThNV4FpYlA2wkHFvOSMn2SOrTTVMPAqriCuOAimae\nC0vQy78i0tkCD7Tu0C2k\n=4u34\n-----END PGP SIGNATURE-----",
        "payload": "tree 0df0ed3917a71618dd0a925ac6c832a8284f3763\nparent c7c15b47217bd1c22fb6221f633b11fcd24b8ca3\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1483976668 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107194 +0100\n\nUtil: Put mapMultiArgs inside ArgsManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f884893822c051b47fa60ea349652705c6bc7d7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f884893822c051b47fa60ea349652705c6bc7d7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f884893822c051b47fa60ea349652705c6bc7d7b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c15b47217bd1c22fb6221f633b11fcd24b8ca3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6930c1b417b971d317ccf57772e0608df67d7d0e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f884893822c051b47fa60ea349652705c6bc7d7b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f884893822c051b47fa60ea349652705c6bc7d7b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f884893822c051b47fa60ea349652705c6bc7d7b",
        "patch": "@@ -105,6 +105,10 @@ class TestArgsManager : public ArgsManager\n     {\n         return mapArgs;\n     };\n+    std::map<std::string, std::vector<std::string> >& GetMapMultiArgs()\n+    {\n+        return mapMultiArgs;\n+    };\n };\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n@@ -113,20 +117,20 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n     testArgs.ParseParameters(0, (char**)argv_test);\n-    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n \n     testArgs.ParseParameters(1, (char**)argv_test);\n-    BOOST_CHECK(testArgs.GetMapArgs().empty() && mapMultiArgs.empty());\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n \n     testArgs.ParseParameters(5, (char**)argv_test);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && mapMultiArgs.size() == 3);\n+    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && testArgs.GetMapMultiArgs().size() == 3);\n     BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n                 && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n-    BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\")\n-                && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n+    BOOST_CHECK(testArgs.GetMapMultiArgs().count(\"-a\") && testArgs.GetMapMultiArgs().count(\"-b\") && testArgs.GetMapMultiArgs().count(\"-ccc\")\n+                && !testArgs.GetMapMultiArgs().count(\"f\") && !testArgs.GetMapMultiArgs().count(\"-d\"));\n \n     BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n     BOOST_CHECK(testArgs.ArgsAt(\"-ccc\").size() == 2);"
      },
      {
        "sha": "0ef41132794c5407db614f5112c9ed9a8871e7a8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f884893822c051b47fa60ea349652705c6bc7d7b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f884893822c051b47fa60ea349652705c6bc7d7b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f884893822c051b47fa60ea349652705c6bc7d7b",
        "patch": "@@ -102,8 +102,6 @@ const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager argsGlobal;\n-static map<string, vector<string> > _mapMultiArgs;\n-const map<string, vector<string> >& mapMultiArgs = _mapMultiArgs;\n bool fDebug = false;\n bool fPrintToConsole = false;\n bool fPrintToDebugLog = true;\n@@ -347,7 +345,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     mapArgs.clear();\n-    _mapMultiArgs.clear();\n+    mapMultiArgs.clear();\n \n     for (int i = 1; i < argc; i++)\n     {\n@@ -375,7 +373,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n-        _mapMultiArgs[str].push_back(strValue);\n+        mapMultiArgs[str].push_back(strValue);\n     }\n }\n \n@@ -618,7 +616,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n             InterpretNegativeSetting(strKey, strValue);\n             if (mapArgs.count(strKey) == 0)\n                 mapArgs[strKey] = strValue;\n-            _mapMultiArgs[strKey].push_back(strValue);\n+            mapMultiArgs[strKey].push_back(strValue);\n         }\n     }\n     // If datadir is changed in .conf file:"
      },
      {
        "sha": "a0da7ea0d1468cb2da9a3fef505d4de17e35d021",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f884893822c051b47fa60ea349652705c6bc7d7b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f884893822c051b47fa60ea349652705c6bc7d7b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f884893822c051b47fa60ea349652705c6bc7d7b",
        "patch": "@@ -42,7 +42,6 @@ class CTranslationInterface\n     boost::signals2::signal<std::string (const char* psz)> Translate;\n };\n \n-extern const std::map<std::string, std::vector<std::string> >& mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugLog;\n@@ -127,6 +126,7 @@ class ArgsManager\n protected:\n     CCriticalSection cs_args;\n     std::map<std::string, std::string> mapArgs;\n+    std::map<std::string, std::vector<std::string> > mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);"
      }
    ]
  },
  {
    "sha": "08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGE5YjZmZWM5NzdkNDkzYzJmMDRiYjVhMTE5ZjI5ZTU4Y2JmYzcz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-11T14:19:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:15Z"
      },
      "message": "Testchains: Load custom chainparams config from a different file",
      "tree": {
        "sha": "becdbedce36b8f1b780e88f590ee3500a7d052c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/becdbedce36b8f1b780e88f590ee3500a7d052c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI7AAoJEIhmwY6hyUSiggEQAIOyJHaDkHK3eYQv7A01xb/4\nup05z3SuLDE0ifdiicEHr4IW5w096sgd+rFYh6faAMjB0BLbXsmXvKkh8DR+fBe7\n049bSZo/2uxcQewvu45tCZlykd8VSOUNLp77u7NV3/dhf/uhplOv52hqs7w+yj5v\nHDC0b+8xSMPjii/VP7n6N3lh9tZRP3pLhAW5I4GF0pc3BgSYbezLHE9cHDqk+8Z5\nVD3Sb0Zlj96c86qux7zua/GtLeGbHTcBg0ImaN4kPInmoOd5ysjbuaBFIAYrBfnD\noo9sesClWL1QhsB35464pr8KY6/C5SqOZTyoTnSzGrI0wkOQqG4QsNcEIc1lM1I0\nlUPcZSbZBlZ3GI2tWN3S8gX2TwtnhPpmkggKjcf3RdJ0vCz3/8WZ03PomL3PQqqd\niy/wtV+zVcaT1GW0Go0uPp+q2t62YLoG8SFnH67IN1FxFgBV6dOiBtp55ctMD6rw\nE77an/Eqmyku3hyaMdqF1eGmUPU0KL6xYGjSqg8UDm2sb/OMPnVhEj92xs7coaCO\nz1AR4Fa1gH/TMexzie9d9lnbWz2ii0yQGc473xJG5e8fVEghRwS4n115vNDGMwIU\n9jMJRiUdYc8RtXPxzwVWWQxuVd4MLP6Mfvs50NYgMpbNQ6webUjFlAWUwxrK7fV8\nd9eFLWp0JEYIQpGwA6KD\n=zlQn\n-----END PGP SIGNATURE-----",
        "payload": "tree becdbedce36b8f1b780e88f590ee3500a7d052c0\nparent f884893822c051b47fa60ea349652705c6bc7d7b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1484144356 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107195 +0100\n\nTestchains: Load custom chainparams config from a different file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08a9b6fec977d493c2f04bb5a119f29e58cbfc73/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f884893822c051b47fa60ea349652705c6bc7d7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f884893822c051b47fa60ea349652705c6bc7d7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f884893822c051b47fa60ea349652705c6bc7d7b"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 37,
      "deletions": 28
    },
    "files": [
      {
        "sha": "54e20a463f4518f21bed94458f4de58baeabd854",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 28,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08a9b6fec977d493c2f04bb5a119f29e58cbfc73/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08a9b6fec977d493c2f04bb5a119f29e58cbfc73/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
        "patch": "@@ -340,34 +340,34 @@ class CRegTestParams : public CChainParams {\n  */\n class CCustomParams : public CChainParams {\n \n-    void UpdateFromArgs()\n+    void UpdateFromArgs(ArgsManager& argsMan)\n     {\n-        strNetworkID = GetArg(\"-chainpetname\", \"custom\");\n-\n-        consensus.fPowAllowMinDifficultyBlocks = GetBoolArg(\"-con_fpowallowmindifficultyblocks\", true);\n-        consensus.fPowNoRetargeting = GetBoolArg(\"-con_fpownoretargeting\", true);\n-        consensus.nSubsidyHalvingInterval = GetArg(\"-con_nsubsidyhalvinginterval\", 150);\n-        consensus.BIP34Height = GetArg(\"-con_bip34height\", 100000000);\n-        consensus.BIP65Height = GetArg(\"-con_bip65height\", 1351);\n-        consensus.BIP66Height = GetArg(\"-con_bip66height\", 1251);\n-        consensus.nPowTargetTimespan = GetArg(\"-con_npowtargettimespan\", 14 * 24 * 60 * 60); // two weeks\n-        consensus.nPowTargetSpacing = GetArg(\"-con_npowtargetspacing\", 10 * 60);\n-        consensus.nRuleChangeActivationThreshold = GetArg(\"-con_nrulechangeactivationthreshold\", 108); // 75% for testchains\n-        consensus.nMinerConfirmationWindow = GetArg(\"-con_nminerconfirmationwindow\", 144); // Faster than normal for custom (144 instead of 2016)\n-        consensus.powLimit = uint256S(GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n-        consensus.BIP34Hash = uint256S(GetArg(\"-con_bip34hash\", \"0x0\"));\n-        consensus.nMinimumChainWork = uint256S(GetArg(\"-con_nminimumchainwork\", \"0x0\"));\n-\n-        nDefaultPort = GetArg(\"-ndefaultport\", 18444);\n-        nPruneAfterHeight = GetArg(\"-npruneafterheight\", 1000);\n-        fMiningRequiresPeers = GetBoolArg(\"-fminingrequirespeers\", false);\n-        fDefaultConsistencyChecks = GetBoolArg(\"-fdefaultconsistencychecks\", true);\n-        fRequireStandard = GetBoolArg(\"-frequirestandard\", false);\n-        fMineBlocksOnDemand = GetBoolArg(\"-fmineblocksondemand\", true);\n+        strNetworkID = argsMan.GetArg(\"-chainpetname\", \"custom\");\n+\n+        consensus.fPowAllowMinDifficultyBlocks = argsMan.GetBoolArg(\"-con_fpowallowmindifficultyblocks\", true);\n+        consensus.fPowNoRetargeting = argsMan.GetBoolArg(\"-con_fpownoretargeting\", true);\n+        consensus.nSubsidyHalvingInterval = argsMan.GetArg(\"-con_nsubsidyhalvinginterval\", 150);\n+        consensus.BIP34Height = argsMan.GetArg(\"-con_bip34height\", 100000000);\n+        consensus.BIP65Height = argsMan.GetArg(\"-con_bip65height\", 1351);\n+        consensus.BIP66Height = argsMan.GetArg(\"-con_bip66height\", 1251);\n+        consensus.nPowTargetTimespan = argsMan.GetArg(\"-con_npowtargettimespan\", 14 * 24 * 60 * 60); // two weeks\n+        consensus.nPowTargetSpacing = argsMan.GetArg(\"-con_npowtargetspacing\", 10 * 60);\n+        consensus.nRuleChangeActivationThreshold = argsMan.GetArg(\"-con_nrulechangeactivationthreshold\", 108); // 75% for testchains\n+        consensus.nMinerConfirmationWindow = argsMan.GetArg(\"-con_nminerconfirmationwindow\", 144); // Faster than normal for custom (144 instead of 2016)\n+        consensus.powLimit = uint256S(argsMan.GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+        consensus.BIP34Hash = uint256S(argsMan.GetArg(\"-con_bip34hash\", \"0x0\"));\n+        consensus.nMinimumChainWork = uint256S(argsMan.GetArg(\"-con_nminimumchainwork\", \"0x0\"));\n+\n+        nDefaultPort = argsMan.GetArg(\"-ndefaultport\", 18444);\n+        nPruneAfterHeight = argsMan.GetArg(\"-npruneafterheight\", 1000);\n+        fMiningRequiresPeers = argsMan.GetBoolArg(\"-fminingrequirespeers\", false);\n+        fDefaultConsistencyChecks = argsMan.GetBoolArg(\"-fdefaultconsistencychecks\", true);\n+        fRequireStandard = argsMan.GetBoolArg(\"-frequirestandard\", false);\n+        fMineBlocksOnDemand = argsMan.GetBoolArg(\"-fmineblocksondemand\", true);\n     }\n \n public:\n-    CCustomParams()\n+    CCustomParams(ArgsManager& argsMan)\n     {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n@@ -396,7 +396,7 @@ class CCustomParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n-        UpdateFromArgs();\n+        UpdateFromArgs(argsMan);\n         genesis = CreateGenesisBlock(strNetworkID.c_str(), CScript(OP_TRUE), 1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n     }\n@@ -409,7 +409,7 @@ const CChainParams &Params() {\n     return *globalChainParams;\n }\n \n-std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain, ArgsManager& chainArgsMan)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n@@ -418,15 +418,23 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CChainParams>(new CRegTestParams());\n     else if (chain == CBaseChainParams::CUSTOM) {\n-        return std::unique_ptr<CChainParams>(new CCustomParams());\n+        return std::unique_ptr<CChainParams>(new CCustomParams(chainArgsMan));\n     }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n+{\n+    ArgsManager chainArgsMan;\n+    return CreateChainParams(chain, chainArgsMan);\n+}\n+\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    globalChainParams = CreateChainParams(network);\n+    ArgsManager chainArgsMan;\n+    chainArgsMan.ReadConfigFile(argsGlobal.GetArg(\"-chainconf\", CHAINPARAMS_CONF_FILENAME));\n+    globalChainParams = CreateChainParams(network, chainArgsMan);\n }\n \n void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)"
      },
      {
        "sha": "f953335730633200f0f7fb6aaffbd099e0167634",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08a9b6fec977d493c2f04bb5a119f29e58cbfc73/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08a9b6fec977d493c2f04bb5a119f29e58cbfc73/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
        "patch": "@@ -24,6 +24,7 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n         strUsage += HelpMessageGroup(_(\"Custom chain selection options (only for -chain=custom):\"));\n+        strUsage += HelpMessageOpt(\"-chainconf=<file>\", strprintf(_(\"Specify configuration file for chain parameters (default: %s). All custom chain arguments except this one must be configured using this file.\"), CHAINPARAMS_CONF_FILENAME));\n         strUsage += HelpMessageOpt(\"-chainpetname=<name>\", _(\"Alternative name for custom chain (default: custom). This changes the genesis block.\"));\n     }\n }"
      }
    ]
  },
  {
    "sha": "f83e1615d7d5057cab34a27d61085749c5e0eee6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODNlMTYxNWQ3ZDUwNTdjYWIzNGEyN2Q2MTA4NTc0OWM1ZTBlZWU2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-14T20:46:04Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T07:33:16Z"
      },
      "message": "Blocksign: WIP: Sign custom chain blocks\n\nIntroduce -con_fsignblockchain and -con_signblockscript new options to configure the custom chain\nSet fSignBlocksGlobal on CCustomParams::UpdateFromArgs()\nAdds an Additional CreateChainParams() that takes args",
      "tree": {
        "sha": "b855f471edcbdb0af92c153da5bba673fcea5f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b855f471edcbdb0af92c153da5bba673fcea5f56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f83e1615d7d5057cab34a27d61085749c5e0eee6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYlDI8AAoJEIhmwY6hyUSi7BkP/04H2orYbWIWUqnBNxPXy854\ndaDFs/0QuOHDsfbSZhR4K9nM9suVYbE0lnTDEpjWacMKq1PRFrteMdV5ubJOok3A\nOAOdGWWFx7YE5n2ysZSC9gg1hDlYjH5p1PaMbJRZp9n966AMZukCjICxVaZ4pTSj\nQgXaUzKYiShLVxE2BqSrUyxGKukQTX/WhmE+5k+gTE0r1RIFMKLmPwepq9r0b6w8\nNhLsMLbh59ZHzH6wancnThU1EeXcCuErIQRjEBeEIdfeSzhtD6IVlrQs6Hq8LawK\nXAQbSdQ+eK9IHEivvnemeVxXaU2SSvs3Ulyg7VBYpFanzTTVedxTnXa6uGLnEDdF\n/uR41iT5L9d69JVl/OQ32QawvvZpvQHQM0YKxW5VBsiKfb7vo4glpL64UBDKatHX\nFv/hF6wdXOloS6csfJXGJMgqIy1uxQ4vTplGfghx3VGW4t+z+tVF558QPw9Qb2JQ\nvhnZjOqlYgfc1/wDn8T9O+gf7CDbir/z1+X/2y7yhFG0kZ0AZlaiEM8NeAnp5o6W\n2Wyk+IyZ2TlLfkCZgwx+cAwM68fKxmd5y7KW9IEw5CRqFAHzPMvm+QijCU9NWJnZ\nT4Ugg1ntkIsa1pTbHzqyGrFn2/e3415uTK0Mr1NFh32qdahPwlavwrymeH9K75U4\nrfVULJ3oC20bZB8ZKy/G\n=sKJp\n-----END PGP SIGNATURE-----",
        "payload": "tree b855f471edcbdb0af92c153da5bba673fcea5f56\nparent 08a9b6fec977d493c2f04bb5a119f29e58cbfc73\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1479156364 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486107196 +0100\n\nBlocksign: WIP: Sign custom chain blocks\n\nIntroduce -con_fsignblockchain and -con_signblockscript new options to configure the custom chain\nSet fSignBlocksGlobal on CCustomParams::UpdateFromArgs()\nAdds an Additional CreateChainParams() that takes args\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f83e1615d7d5057cab34a27d61085749c5e0eee6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f83e1615d7d5057cab34a27d61085749c5e0eee6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f83e1615d7d5057cab34a27d61085749c5e0eee6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08a9b6fec977d493c2f04bb5a119f29e58cbfc73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08a9b6fec977d493c2f04bb5a119f29e58cbfc73"
      }
    ],
    "stats": {
      "total": 382,
      "additions": 350,
      "deletions": 32
    },
    "files": [
      {
        "sha": "bb082be9f12e368862848fd3d096cc4b7a4a2cc9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -128,6 +128,7 @@ BITCOIN_CORE_H = \\\n   rpc/server.h \\\n   rpc/register.h \\\n   scheduler.h \\\n+  script/generic.hpp \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\"
      },
      {
        "sha": "5fe283f0e18eaa540fe0dbebc7c80e828ae373ed",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -120,6 +120,7 @@ BITCOIN_TESTS =\\\n   test/scriptnum_tests.cpp \\\n   test/serialize_tests.cpp \\\n   test/sighash_tests.cpp \\\n+  test/signedblocks_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\"
      },
      {
        "sha": "a8ead1b13dd3545d259e06ff4d7ce63ee2004e4a",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -223,8 +223,12 @@ class CBlockIndex\n         nVersion       = 0;\n         hashMerkleRoot = uint256();\n         nTime          = 0;\n-        proof.pow.nBits = 0;\n-        proof.pow.nNonce = 0;\n+        if (fSignBlocksGlobal) {\n+            proof.script = new CScript();\n+        } else {\n+            proof.pow.nBits = 0;\n+            proof.pow.nNonce = 0;\n+        }\n     }\n \n     CBlockIndex()"
      },
      {
        "sha": "b4ac1b7c435f42711c48acf0c8eb09626f3fd537",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 5,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -16,7 +16,7 @@\n \n #include \"chainparamsseeds.h\"\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward, bool fSignBlock)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n@@ -28,9 +28,13 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n \n     CBlock genesis;\n     genesis.nTime    = nTime;\n-    genesis.proof.pow.nBits    = nBits;\n-    genesis.proof.pow.nNonce   = nNonce;\n     genesis.nVersion = nVersion;\n+    if (fSignBlock) {\n+        genesis.proof.script = new CScript();\n+    } else {\n+        genesis.proof.pow.nBits = nBits;\n+        genesis.proof.pow.nNonce = nNonce;\n+    }\n     genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));\n     genesis.hashPrevBlock.SetNull();\n     genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n@@ -52,7 +56,7 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward, false);\n }\n \n void CChainParams::UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n@@ -86,6 +90,7 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.fSignBlockChain = false;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -190,6 +195,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.fSignBlockChain = false;\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -278,6 +284,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.fSignBlockChain = false;\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -335,6 +342,15 @@ class CRegTestParams : public CChainParams {\n     }\n };\n \n+static CScript StrHexToScript(std::string strScript)\n+{\n+    if (!strScript.empty()) {\n+        const std::vector<unsigned char> scriptData = ParseHex(strScript);\n+        return CScript(scriptData.begin(), scriptData.end());\n+    }\n+    return CScript(OP_TRUE);\n+}\n+\n /**\n  * Custom params for testing.\n  */\n@@ -357,6 +373,9 @@ class CCustomParams : public CChainParams {\n         consensus.powLimit = uint256S(argsMan.GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n         consensus.BIP34Hash = uint256S(argsMan.GetArg(\"-con_bip34hash\", \"0x0\"));\n         consensus.nMinimumChainWork = uint256S(argsMan.GetArg(\"-con_nminimumchainwork\", \"0x0\"));\n+        consensus.fSignBlockChain = argsMan.GetBoolArg(\"-con_fsignblockchain\", false);\n+        fSignBlocksGlobal = consensus.fSignBlockChain;\n+        consensus.blocksignScript = StrHexToScript(argsMan.GetArg(\"-con_signblockscript\", \"51\")); // OP_TRUE == 51\n \n         nDefaultPort = argsMan.GetArg(\"-ndefaultport\", 18444);\n         nPruneAfterHeight = argsMan.GetArg(\"-npruneafterheight\", 1000);\n@@ -397,7 +416,8 @@ class CCustomParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         UpdateFromArgs(argsMan);\n-        genesis = CreateGenesisBlock(strNetworkID.c_str(), CScript(OP_TRUE), 1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        const std::string timestampStr = std::string(strNetworkID + argsMan.GetArg(\"-con_signblockscript\", \"\"));\n+        genesis = CreateGenesisBlock(timestampStr.c_str(), CScript(OP_TRUE), 1296688602, 2, 0x207fffff, 1, 50 * COIN, consensus.fSignBlockChain);\n         consensus.hashGenesisBlock = genesis.GetHash();\n     }\n };"
      },
      {
        "sha": "8326c304a25550d633b9662008f178c9c70ca8ff",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -14,6 +14,8 @@\n #include <memory>\n #include <vector>\n \n+class ArgsManager;\n+\n struct CDNSSeedData {\n     std::string name, host;\n     bool supportsServiceBitsFiltering;\n@@ -105,6 +107,7 @@ class CChainParams\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain, ArgsManager& chainArgsMan);\n \n /**\n  * Return the currently selected parameters. This won't change after app"
      },
      {
        "sha": "f581bc3ccf6a6fb322448b0bfc5c437c77f18300",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -26,6 +26,8 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n         strUsage += HelpMessageGroup(_(\"Custom chain selection options (only for -chain=custom):\"));\n         strUsage += HelpMessageOpt(\"-chainconf=<file>\", strprintf(_(\"Specify configuration file for chain parameters (default: %s). All custom chain arguments except this one must be configured using this file.\"), CHAINPARAMS_CONF_FILENAME));\n         strUsage += HelpMessageOpt(\"-chainpetname=<name>\", _(\"Alternative name for custom chain (default: custom). This changes the genesis block.\"));\n+        strUsage += HelpMessageOpt(\"-con_fsignblockchain\", _(\"Use signed blocks instead of pow: (default: true))\"));\n+        strUsage += HelpMessageOpt(\"-con_signblockscript=<hexScript>\", _(\"Specify the scriptPubKey for block signing: (default: OP_TRUE))\"));\n     }\n }\n "
      },
      {
        "sha": "2a70b77058ebcaaecab65206a8938b8ac8577d07",
        "filename": "src/consensus/header_verify.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 7,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/consensus/header_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/consensus/header_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/header_verify.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -7,18 +7,38 @@\n #include \"params.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n+#include \"script/generic.hpp\"\n+#include \"script/interpreter.h\"\n #include \"validation.h\"\n \n+#define BLOCK_SIGN_SCRIPT_FLAGS SCRIPT_VERIFY_NONE // TODO signblocks: complete\n+\n bool CheckProof(const Consensus::Params& consensusParams, const CBlockHeader& block)\n {\n-    if (!CheckProofOfWork(block.GetHash(), block.proof.pow.nBits, consensusParams))\n+    if (consensusParams.fSignBlockChain) {\n+        if (!block.proof.script ||\n+            !GenericVerifyScript(*block.proof.script, consensusParams.blocksignScript, BLOCK_SIGN_SCRIPT_FLAGS, block)) {\n+            return false;\n+        }\n+    } else if (!CheckProofOfWork(block.GetHash(), block.proof.pow.nBits, consensusParams))\n         return false;\n \n     return true;\n }\n \n-bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, uint64_t& nTries)\n+bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CKeyStore* pkeystore, uint64_t& nTries)\n {\n+    if (consensusParams.fSignBlockChain) {\n+        if (!pkeystore)\n+            return false;\n+        SignatureData solution(*pblock->proof.script);\n+        nTries = 0;\n+        if (!GenericSignScript(*pkeystore, *pblock, consensusParams.blocksignScript, solution))\n+            return false;\n+        pblock->proof.script = new CScript(solution.scriptSig);\n+        return CheckProof(consensusParams, *pblock);\n+    }\n+\n     const int nInnerLoopCount = 0x10000;\n     while (nTries > 0 && pblock->proof.pow.nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->proof.pow.nBits, consensusParams)) {\n         ++pblock->proof.pow.nNonce;\n@@ -27,26 +47,33 @@ bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader*\n     return CheckProofOfWork(pblock->GetHash(), pblock->proof.pow.nBits, consensusParams);\n }\n \n-bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock)\n+bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CKeyStore* pkeystore)\n {\n     uint64_t nTries = 10000;\n-    return MaybeGenerateProof(consensusParams, pblock, nTries);\n+    return MaybeGenerateProof(consensusParams, pblock, pkeystore, nTries);\n }\n \n void ResetProof(const Consensus::Params& consensusParams, CBlockHeader* pblock)\n {\n-    pblock->proof.pow.nNonce = 0;\n+    if (consensusParams.fSignBlockChain) \n+        *pblock->proof.script = CScript();\n+    else\n+        pblock->proof.pow.nNonce = 0;\n }\n \n bool CheckChallenge(const Consensus::Params& consensusParams, CValidationState& state, const CBlockHeader *pblock, const CBlockIndex* pindexPrev)\n {\n-    if (pblock->proof.pow.nBits != GetNextWorkRequired(pindexPrev, pblock, consensusParams))\n+    if (consensusParams.fSignBlockChain)\n+        return true; // The scriptPubKey for blocksigning is constant in consensusParams\n+    else if (pblock->proof.pow.nBits != GetNextWorkRequired(pindexPrev, pblock, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n \n     return true;\n }\n \n void ResetChallenge(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n {\n-    pblock->proof.pow.nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+    // The scriptPubKey for blocksigning is constant in consensusParams\n+    if (!consensusParams.fSignBlockChain)\n+        pblock->proof.pow.nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n }"
      },
      {
        "sha": "e170fd1bd5eb15b8127704adfb206688c98a3fc0",
        "filename": "src/consensus/header_verify.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/consensus/header_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/consensus/header_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/header_verify.h?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -9,13 +9,14 @@\n \n class CBlockHeader;\n class CBlockIndex;\n+class CKeyStore;\n class CValidationState;\n namespace Consensus { struct Params; };\n \n bool CheckProof(const Consensus::Params& consensusParams, const CBlockHeader& pblock);\n-bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, uint64_t& nTries);\n+bool MaybeGenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CKeyStore* pkeystore, uint64_t& nTries);\n /** More convenient by hiding ref var nTries for testing */\n-bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock);\n+bool GenerateProof(const Consensus::Params& consensusParams, CBlockHeader* pblock, const CKeyStore* pkeystore);\n void ResetProof(const Consensus::Params& consensusParams, CBlockHeader* pblock);\n \n bool CheckChallenge(const Consensus::Params& consensusParams, CValidationState& state, const CBlockHeader *pblock, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "a570af9b85a1e6ed033b38b6fee5dfb66f412abb",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CONSENSUS_PARAMS_H\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n+#include \"script/script.h\"\n #include \"uint256.h\"\n #include <map>\n #include <string>\n@@ -63,6 +64,9 @@ struct Params {\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n     uint256 defaultAssumeValid;\n+    /** Signed blocks parameters */\n+    bool fSignBlockChain;\n+    CScript blocksignScript;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "4c1304ed5e092efdf3d58c04ad833789cade8cf7",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -74,8 +74,12 @@ class CBlockHeader\n         hashPrevBlock.SetNull();\n         hashMerkleRoot.SetNull();\n         nTime = 0;\n-        proof.pow.nBits = 0;\n-        proof.pow.nNonce = 0;\n+        if (fSignBlocksGlobal) {\n+            proof.script = new CScript();\n+        } else {\n+            proof.pow.nBits = 0;\n+            proof.pow.nNonce = 0;\n+        }\n     }\n \n     bool IsNull() const"
      },
      {
        "sha": "12a556868488083f7638f7e39121b4e308d38735",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -55,10 +55,11 @@ double GetDifficulty(const CBlockIndex* blockindex)\n             blockindex = chainActive.Tip();\n     }\n \n-    int nShift = (blockindex->proof.pow.nBits >> 24) & 0xff;\n+    const uint32_t nBits = Params().GetConsensus().fSignBlockChain ? 0 : blockindex->proof.pow.nBits;\n+    int nShift = (nBits >> 24) & 0xff;\n \n     double dDiff =\n-        (double)0x0000ffff / (double)(blockindex->proof.pow.nBits & 0x00ffffff);\n+        (double)0x0000ffff / (double)(nBits & 0x00ffffff);\n \n     while (nShift < 29)\n     {\n@@ -89,8 +90,8 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n     result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n     result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->proof.pow.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->proof.pow.nBits)));\n+    result.push_back(Pair(\"nonce\", (uint64_t)(Params().GetConsensus().fSignBlockChain ? 0 : blockindex->proof.pow.nNonce)));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", Params().GetConsensus().fSignBlockChain ? 0 : blockindex->proof.pow.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n \n@@ -133,8 +134,8 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"tx\", txs));\n     result.push_back(Pair(\"time\", block.GetBlockTime()));\n     result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.proof.pow.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.proof.pow.nBits)));\n+    result.push_back(Pair(\"nonce\", (uint64_t)(Params().GetConsensus().fSignBlockChain ? 0 : block.proof.pow.nNonce)));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", Params().GetConsensus().fSignBlockChain ? 0 : block.proof.pow.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n "
      },
      {
        "sha": "f9344b592f94bb932888e8a6fe55ba2f8d293461",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -13,6 +13,7 @@\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n+#include \"keystore.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n #include \"net.h\"\n@@ -21,6 +22,9 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n+#ifdef ENABLE_WALLET\n+#include \"wallet/wallet.h\"\n+#endif\n \n #include <memory>\n #include <stdint.h>\n@@ -98,6 +102,11 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n \n UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n+    CKeyStore* blockSignKeystore = NULL;\n+#ifdef ENABLE_WALLET\n+    blockSignKeystore = pwalletMain;\n+#endif\n+  \n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n@@ -120,7 +129,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        if (!MaybeGenerateProof(Params().GetConsensus(), pblock, nMaxTries)) {\n+        if (!MaybeGenerateProof(Params().GetConsensus(), pblock, blockSignKeystore, nMaxTries)) {\n             if (nMaxTries == 0)\n                 break;\n             else\n@@ -591,8 +600,6 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     UniValue aux(UniValue::VOBJ);\n     aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n \n-    arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->proof.pow.nBits);\n-\n     UniValue aMutable(UniValue::VARR);\n     aMutable.push_back(\"time\");\n     aMutable.push_back(\"transactions\");\n@@ -661,6 +668,8 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n+    const uint32_t nBits = Params().GetConsensus().fSignBlockChain ? 0 : pblock->proof.pow.nBits;\n+    const arith_uint256 hashTarget = arith_uint256().SetCompact(nBits);\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n@@ -674,7 +683,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n     result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->proof.pow.nBits)));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n     const struct BIP9DeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];"
      },
      {
        "sha": "c7cec1a74899469d9559819b22fa270e2c9e3e1c",
        "filename": "src/script/generic.hpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/script/generic.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/script/generic.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/generic.hpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_GENERIC\n+#define H_BITCOIN_SCRIPT_GENERIC\n+\n+#include \"hash.h\"\n+#include \"interpreter.h\"\n+#include \"keystore.h\"\n+#include \"pubkey.h\"\n+#include \"sign.h\"\n+\n+class SimpleSignatureChecker : public BaseSignatureChecker\n+{\n+public:\n+    uint256 hash;\n+\n+    SimpleSignatureChecker(const uint256& hashIn) : hash(hashIn) {};\n+    bool CheckSig(const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    {\n+        CPubKey pubkey(vchPubKey);\n+        if (!pubkey.IsValid())\n+            return false;\n+        if (vchSig.empty())\n+            return false;\n+        return pubkey.Verify(hash, vchSig);\n+    }\n+};\n+\n+class SimpleSignatureCreator : public BaseSignatureCreator\n+{\n+    SimpleSignatureChecker checker;\n+\n+public:\n+    SimpleSignatureCreator(const CKeyStore* keystoreIn, const uint256& hashIn) : BaseSignatureCreator(keystoreIn), checker(hashIn) {};\n+    virtual ~SimpleSignatureCreator() {};\n+    virtual const BaseSignatureChecker& Checker() const { return checker; }\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n+    {\n+        CKey key;\n+        if (!keystore->GetKey(keyid, key))\n+            return false;\n+        return key.Sign(checker.hash, vchSig);\n+    }\n+};\n+\n+template<typename T>\n+bool GenericVerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const T& data)\n+{\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, flags, SimpleSignatureChecker(SerializeHash(data)));\n+}\n+\n+template<typename T>\n+bool GenericSignScript(const CKeyStore& keystore, const T& data, const CScript& scriptPubKey, SignatureData& scriptSig)\n+{\n+    return ProduceSignature(SimpleSignatureCreator(&keystore, SerializeHash(data)), scriptPubKey, scriptSig);\n+}\n+\n+template<typename T>\n+SignatureData GenericCombineSignatures(const CScript& scriptPubKey, const T& data, const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n+{\n+    return CombineSignatures(scriptPubKey, SimpleSignatureChecker(SerializeHash(data)), scriptSig1, scriptSig2);\n+}\n+\n+#endif // H_BITCOIN_SCRIPT_GENERIC"
      },
      {
        "sha": "000520085ee4525a3b2f0667b832362ba77ed5aa",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -186,7 +186,8 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     sigdata.scriptSig = PushAll(result);\n \n     // Test solution\n-    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    // TODO signblocks pass custom flags instead of STANDARD_SCRIPT_VERIFY_FLAGS ?\n+    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, SCRIPT_VERIFY_NONE, creator.Checker());\n }\n \n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)"
      },
      {
        "sha": "17ec33898552fecce2ac84bea1bebbbddbb239ad",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -6,6 +6,7 @@\n #include \"consensus/header_verify.h\"\n #include \"consensus/merkle.h\"\n #include \"chainparams.h\"\n+#include \"keystore.h\"\n #include \"random.h\"\n \n #include \"test/test_bitcoin.h\"\n@@ -48,7 +49,8 @@ static CBlock BuildBlockTestCase() {\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!GenerateProof(Params().GetConsensus(), &block));\n+    CBasicKeyStore dummyKeystore;\n+    while (!GenerateProof(Params().GetConsensus(), &block, &dummyKeystore));\n     return block;\n }\n \n@@ -290,7 +292,8 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!GenerateProof(Params().GetConsensus(), &block));\n+    CBasicKeyStore dummyKeystore;\n+    while (!GenerateProof(Params().GetConsensus(), &block, &dummyKeystore));\n \n     // Test simple header round-trip with only coinbase\n     {"
      },
      {
        "sha": "2cf3305e18fc70eb415b88ec472130e2f0decaff",
        "filename": "src/test/signedblocks_tests.cpp",
        "status": "added",
        "additions": 168,
        "deletions": 0,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/test/signedblocks_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/test/signedblocks_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/signedblocks_tests.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -0,0 +1,168 @@\n+// Copyright (c) 2016-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\" // For CBitcoinSecret\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"consensus/header_verify.h\"\n+#include \"consensus/validation.h\"\n+#include \"keystore.h\"\n+#include \"primitives/block.h\"\n+#include \"script/generic.hpp\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static bool fSignBlocksGlobalRestore = fSignBlocksGlobal;\n+\n+static void start_blocksing_test()\n+{\n+    ECC_Start();\n+    fSignBlocksGlobalRestore = fSignBlocksGlobal; // TODO signblocks: This is ugly\n+    fSignBlocksGlobal = true; // Set global from primitives/block to true for these tests\n+}\n+\n+static void stop_blocksing_test()\n+{\n+    fSignBlocksGlobal = fSignBlocksGlobalRestore; // Restore global\n+    ECC_Stop();\n+}\n+\n+static std::string SingleSignerScriptStrFromKey(const CKey& key)\n+{\n+    std::string strPubkey = HexStr(key.GetPubKey());\n+    CScript scriptPubKey = CScript() << ParseHex(strPubkey) << OP_CHECKSIG;\n+    std::string strScript = HexStr(scriptPubKey);\n+    // TOOLING: Uncomment to create params for a private chain with a single signer\n+    // BOOST_CHECK_EQUAL(\"-con_signblockscript\", strScript);\n+    // std::unique_ptr<CChainParams> chainparams = CChainParams::Factory(CBaseChainParams::CUSTOM);\n+    // BOOST_CHECK_EQUAL(\"importprivkey\", CBitcoinSecret(key, *chainparams).ToString());\n+    // BOOST_CHECK_EQUAL(\"pubkey_for_multisig\", strPubkey);\n+\n+    return strScript;\n+}\n+\n+static std::string MultiSignerScriptStrFromPubKeys(const CPubKey* pubkeys, uint32_t min, uint32_t max)\n+{\n+    BOOST_CHECK(min <= max);\n+    CScript multisigScriptPubKey = CScript() << OP_2; // TODO Replace 2 with min\n+\n+    for (unsigned i = 0; i < max; ++i) {\n+        multisigScriptPubKey << ParseHex(HexStr(pubkeys[i]));\n+    }\n+    multisigScriptPubKey << OP_3 << OP_CHECKMULTISIG; // TODO Replace 3 with max\n+    return HexStr(multisigScriptPubKey);\n+}\n+\n+BOOST_AUTO_TEST_CASE(GenericSignWithRegularBlocks)\n+{\n+    ECC_Start();\n+\n+    CBlockHeader block;\n+    CScript scriptSig;\n+    CScript scriptPubKey;\n+    unsigned int flags = SCRIPT_VERIFY_NONE;\n+    CBasicKeyStore keystore;\n+    SignatureData scriptSigData;\n+    SignatureData scriptSig1;\n+    SignatureData scriptSig2;\n+\n+    // Make sure that the generic templates compile for CBlockHeader\n+    SignatureData scriptExpected = GenericCombineSignatures(scriptPubKey, block, scriptSig1, scriptSig2);\n+    BOOST_CHECK(!GenericSignScript(keystore, block, scriptPubKey, scriptSigData));\n+    BOOST_CHECK(!GenericVerifyScript(scriptSig, scriptPubKey, flags, block));\n+\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+    keystore.AddKeyPubKey(key, pubkey);\n+    const CScript scriptCode;\n+    SigVersion sigversion = SIGVERSION_WITNESS_V0;\n+    const std::vector<unsigned char> vchPubKey = ToByteVector(pubkey);\n+    std::vector<unsigned char> vchScriptSig;\n+    SimpleSignatureCreator simpleSignatureCreator(&keystore, SerializeHash(block));\n+\n+    BOOST_CHECK(simpleSignatureCreator.CreateSig(vchScriptSig, pubkey.GetID(), scriptCode, sigversion));\n+    BOOST_CHECK(simpleSignatureCreator.Checker().CheckSig(vchScriptSig, vchPubKey, scriptCode, sigversion));\n+\n+    scriptPubKey << ParseHex(HexStr(pubkey)) << OP_CHECKSIG;\n+    BOOST_CHECK(ProduceSignature(simpleSignatureCreator, scriptPubKey, scriptSigData));\n+    BOOST_CHECK(VerifyScript(scriptSigData.scriptSig, scriptPubKey, NULL, flags, simpleSignatureCreator.Checker()));\n+\n+    BOOST_CHECK(GenericSignScript(keystore, block, scriptPubKey, scriptSigData));\n+    BOOST_CHECK(GenericVerifyScript(scriptSigData.scriptSig, scriptPubKey, flags, block));\n+\n+    ECC_Stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(BasicSignBlock)\n+{\n+    start_blocksing_test();\n+    fSignBlocksGlobal = true;\n+    BOOST_CHECK(fSignBlocksGlobal);\n+\n+    // Generate and check proofs on custom blocksigned chains\n+    CBasicKeyStore keystore;\n+    CBlockHeader block;\n+    CBlockIndex indexPrev;\n+    CValidationState state;\n+    ArgsManager testArgs;\n+    testArgs.ForceSetArg(\"-con_signblockscript\", \"1\");\n+    BOOST_CHECK(testArgs.IsArgSet(\"-con_signblockscript\"));\n+    BOOST_CHECK(testArgs.GetBoolArg(\"-con_signblockscript\", false));\n+    std::unique_ptr<CChainParams> chainparams = CreateChainParams(CBaseChainParams::CUSTOM, testArgs);\n+\n+    // TODO signblocks: Make sure BasicSignBlock is independent from GenericSignWithRegularBlocks\n+\n+    // Default -con_signblockscript with -con_fsignblockchain=1 is OP_TRUE\n+\n+    // BOOST_CHECK(CheckChallenge(chainparams->GetConsensus(), state, &block, &indexPrev)); // Should pass always for signed blocks\n+    ResetChallenge(chainparams->GetConsensus(), &block, &indexPrev); // Shouldn't do anything\n+    BOOST_CHECK(CheckChallenge(chainparams->GetConsensus(), state, &block, &indexPrev)); // Should pass always for signed blocks\n+\n+    ResetProof(chainparams->GetConsensus(), &block);\n+    // BOOST_CHECK(CheckProof(chainparams->GetConsensus(), block)); // Should pass with an empty script for scriptpubKey=OP_TRUE\n+    BOOST_CHECK(!GenerateProof(chainparams->GetConsensus(), &block, &keystore)); // But OP_TRUE is not a standard output type\n+\n+    // Also OP_TRUE-chain from custom -con_signblockscript\n+\n+    testArgs.ForceSetArg(\"-con_signblockscript\", HexStr(CScript(OP_TRUE)));\n+    // chainparams = CreateChainParams(CBaseChainParams::CUSTOM, testArgs);\n+    ResetProof(chainparams->GetConsensus(), &block);\n+    // BOOST_CHECK(CheckProof(chainparams->GetConsensus(), block)); // Should pass with an empty script for scriptpubKey=OP_TRUE\n+    BOOST_CHECK(!GenerateProof(chainparams->GetConsensus(), &block, &keystore)); // But OP_TRUE is not a standard output type\n+\n+    // Also Choose one signing key\n+\n+    CKey key;\n+    key.MakeNewKey(true);\n+    testArgs.ForceSetArg(\"-con_signblockscript\", SingleSignerScriptStrFromKey(key));\n+    // chainparams = CreateChainParams(CBaseChainParams::CUSTOM, testArgs);\n+\n+    ResetProof(chainparams->GetConsensus(), &block);\n+    // BOOST_CHECK(!CheckProof(chainparams->GetConsensus(), block)); // Should not pass without generating the proof\n+    BOOST_CHECK(!GenerateProof(chainparams->GetConsensus(), &block, &keystore)); // Should not be able to generate the proof without the key\n+    keystore.AddKey(key); // Should pass after adding the key\n+    // TODO signblocks: These 2 seems to be dependent on GenericSignWithRegularBlocks\n+    // BOOST_CHECK(GenerateProof(chainparams->GetConsensus(), &block, &keystore));\n+    // BOOST_CHECK(CheckProof(chainparams->GetConsensus(), block));\n+\n+    // Also test multisig scripts\n+\n+    const unsigned MAX_MULTISIG_AGENTS = 5;\n+    CKey keys[MAX_MULTISIG_AGENTS];\n+    CPubKey pubkeys[MAX_MULTISIG_AGENTS];\n+    for (unsigned i = 0; i < MAX_MULTISIG_AGENTS; ++i) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+        keystore.AddKey(keys[i]);\n+    }\n+    testArgs.ForceSetArg(\"-con_signblockscript\", MultiSignerScriptStrFromPubKeys(pubkeys, 2, 3));\n+    // chainparams = CreateChainParams(CBaseChainParams::CUSTOM, testArgs);\n+\n+    // TODO signblocks: tests for multisig\n+    \n+    stop_blocksing_test();\n+}"
      },
      {
        "sha": "2eaf6509896de44e0ba77f3a8508e78dacbcd387",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f83e1615d7d5057cab34a27d61085749c5e0eee6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f83e1615d7d5057cab34a27d61085749c5e0eee6",
        "patch": "@@ -11,6 +11,7 @@\n #include \"consensus/header_verify.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n #include \"net_processing.h\"\n@@ -128,7 +129,8 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!GenerateProof(Params().GetConsensus(), &block));\n+    CBasicKeyStore dummyKeystore;\n+    while (!GenerateProof(Params().GetConsensus(), &block, &dummyKeystore));\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     ProcessNewBlock(chainparams, shared_pblock, true, NULL);"
      }
    ]
  }
]