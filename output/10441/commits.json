[
  {
    "sha": "b6fbfc228236947eaea5c14dda299f5a01810e92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmZiZmMyMjgyMzY5NDdlYWVhNWMxNGRkYTI5OWY1YTAxODEwZTky",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-24T21:00:27Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-28T14:20:07Z"
      },
      "message": "net: only enforce the services required to connect\n\nalso once half of all outgoing nodes have our preferred flags, require only\nminimal flags from the rest.",
      "tree": {
        "sha": "64ba495187ab1c660463eb3441357e1399747880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64ba495187ab1c660463eb3441357e1399747880"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6fbfc228236947eaea5c14dda299f5a01810e92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fbfc228236947eaea5c14dda299f5a01810e92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fbfc228236947eaea5c14dda299f5a01810e92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fbfc228236947eaea5c14dda299f5a01810e92/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "217b416c727aaaaad939203b845a96fd638ded1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/217b416c727aaaaad939203b845a96fd638ded1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/217b416c727aaaaad939203b845a96fd638ded1e"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 20,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a0e5364e6660ab56392ae56cfc30e6ecefb9633b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fbfc228236947eaea5c14dda299f5a01810e92/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fbfc228236947eaea5c14dda299f5a01810e92/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b6fbfc228236947eaea5c14dda299f5a01810e92",
        "patch": "@@ -1721,11 +1721,17 @@ void CConnman::ThreadOpenConnections()\n         // Only connect out to one peer per network group (/16 for IPv4).\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n+        int nOutboundRelevant = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes) {\n                 if (!pnode->fInbound && !pnode->fAddnode) {\n+\n+                    // Count the peers that have all relevant services\n+                    if (pnode->fSuccessfullyConnected && !pnode->fFeeler && ((pnode->nServices & nRelevantServices) == nRelevantServices)) {\n+                        nOutboundRelevant++;\n+                    }\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1789,14 +1795,27 @@ void CConnman::ThreadOpenConnections()\n                 continue;\n \n             // only consider nodes missing relevant services after 40 failed attempts and only if less than half the outbound are up.\n-            if ((addr.nServices & nRelevantServices) != nRelevantServices && (nTries < 40 || nOutbound >= (nMaxOutbound >> 1)))\n+            ServiceFlags nRequiredServices = nRelevantServices;\n+            if (nTries >= 40 && nOutbound < (nMaxOutbound >> 1)) {\n+                nRequiredServices = REQUIRED_SERVICES;\n+            }\n+\n+            if ((addr.nServices & nRequiredServices) != nRequiredServices) {\n                 continue;\n+            }\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n             if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n                 continue;\n \n             addrConnect = addr;\n+\n+            // regardless of the services assumed to be available, only require the minimum if half or more outbound have relevant services\n+            if (nOutboundRelevant >= (nMaxOutbound >> 1)) {\n+                addrConnect.nServices = REQUIRED_SERVICES;\n+            } else {\n+                addrConnect.nServices = nRequiredServices;\n+            }\n             break;\n         }\n "
      }
    ]
  }
]