BitcoinPullTester,2012-10-05T12:14:43Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/cac6b389d101999d98c3137b17812cce062f924d for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9173452,9173452,
jgarzik,2012-10-08T22:09:55Z,"Yeah, it just seems terribly odd and possibly error-prone to allocate a lock... in a racy fashion.\n\nJust make the lock global and put it early in main, to make sure it is instantiated/initialized before anything else in the program.\n\nAs it stands now, either this your change or without, the first-use occurs very late in the program, and that seems like a root cause (or at least contributing fa",https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9242045,9242045,
gavinandresen,2012-10-08T23:09:01Z,"@jgarzik making it global and putting it early in main won't fix the problem; the order of global destructors is undefined in C++.\n\nAs long as there is a printf/OutputDebugStringF before we start creating threads (and there is, early in AppInit2()) there is no race.\n\nReworking logging should be done... someday...  For now, I think this little change is the right thing to do.\n",https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9243705,9243705,
jgarzik,2012-10-08T23:41:04Z,"gcc has long followed the now defined C++0x order described here: http://cpp0x.centaur.ath.cx/basic.start.term.html\n\n_""If the completion of the constructor or dynamic initialization of an object with static storage duration is sequenced before that of another, the completion of the destructor of the second is sequenced before the initiation of the destructor of the first. If an object is initial",https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9244380,9244380,
laanwj,2012-10-09T06:01:34Z,"I already acked this for 0.7.1 (assuming we want this out of the door soon), but it does need more thinking.\n\nIf you make the pointer global (i.s.o static) and explicitly initialize it in an InitLogging() (called directly at the beginning of AppInit2) function you avoid the destructor trouble, plus you don't make the safety of initialization dependent on who-calls-first. Then add an assert() to ",https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9249891,9249891,
gavinandresen,2012-10-09T16:10:05Z,Ok.  I pinky-swear promise I'll rewrite this The Right Way for 0.8.\n,https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9267676,9267676,
sipa,2012-10-10T16:12:11Z,Maybe The Right Way means using http://www.boost.org/doc/libs/1_32_0/doc/html/call_once.html ?\n,https://github.com/bitcoin/bitcoin/pull/1909#issuecomment-9309099,9309099,
sipa,2012-10-04T21:02:38Z,"What if OutputDebugStringF is being called twice simultaneously? This doesn't solve anything, unless you have a guaranteed call of this function while still in single-thread modus. That's almost certainly the case, but if it is, why not make it obvious, and have an InitLogging() function, called in init?\n\nI'm nitpicking. ACK.\n",https://github.com/bitcoin/bitcoin/pull/1909#discussion_r1766996,1766996,src/util.cpp
laanwj,2012-10-05T05:27:37Z,"@sipa I also proposed that in #1832. I'm for explicitly constructing and destructing the global objects, such as logging and db, enforced by assertions. This makes thiings more predictable and maintainable than armoring against all possible non-determinism (which is pretty much impossible, you will forget something).\n\nThen again, it's good to have a fix in for 0.7.1. ACK.\n",https://github.com/bitcoin/bitcoin/pull/1909#discussion_r1769855,1769855,src/util.cpp
