[
  {
    "sha": "71c63e3636295b39b3b9c1274cd14ada0cdf4265",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWM2M2UzNjM2Mjk1YjM5YjNiOWMxMjc0Y2QxNGFkYTBjZGY0MjY1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-21T13:34:23Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T12:13:56Z"
      },
      "message": "Added multiple wallet support\n=============================\n\nA new global structure called pWalletMap has been added. Upon initialization, multiple wallets can be loaded.\n\nA new CWallet* parameter has been added to the RPC functions. Functions which do not use a wallet simply ignore it. In addition, a new field has been added to CRPCCommand that tells us whether or not the function uses a wallet.\n\nTwo new RPC methods have been added:\n  1) listwallets - Returns an array containing wallet names.\n  2) usewallet - Prefix existing wallet RPC calls with usewallet <walletname> to use a particular wallet. If no wallet is specified, the default wallet is used.\n    example: bitcoind usewallet foo listreceivedbyaddress 0 true\n\nTODO:\n  1) Get wallet names from bitcoin.conf in init.cpp.\n  2) Change help RPC so that the message does not depend on wallet state (i.e. walletpassphrase RPC call)",
      "tree": {
        "sha": "ce577dec6a6a0f8b2142417e51ddd7977be2c0db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce577dec6a6a0f8b2142417e51ddd7977be2c0db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71c63e3636295b39b3b9c1274cd14ada0cdf4265",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c63e3636295b39b3b9c1274cd14ada0cdf4265",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71c63e3636295b39b3b9c1274cd14ada0cdf4265",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c63e3636295b39b3b9c1274cd14ada0cdf4265/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23826f1b7fd070894cfabdbf49b0a3840e6f33a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23826f1b7fd070894cfabdbf49b0a3840e6f33a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23826f1b7fd070894cfabdbf49b0a3840e6f33a6"
      }
    ],
    "stats": {
      "total": 964,
      "additions": 541,
      "deletions": 423
    },
    "files": [
      {
        "sha": "a4ad22937cb6adf4126418ca21a8ea2520eaea88",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 69,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -136,12 +136,13 @@ string CRPCTable::help(string strCommand) const\n             continue;\n         if (strCommand != \"\" && strMethod != strCommand)\n             continue;\n+        \n         try\n         {\n             Array params;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n-                (*pfn)(params, true);\n+                (*pfn)(NULL, params, true);\n         }\n         catch (std::exception& e)\n         {\n@@ -159,7 +160,7 @@ string CRPCTable::help(string strCommand) const\n     return strRet;\n }\n \n-Value help(const Array& params, bool fHelp)\n+Value help(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -174,7 +175,7 @@ Value help(const Array& params, bool fHelp)\n }\n \n \n-Value stop(const Array& params, bool fHelp)\n+Value stop(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     // Accept the deprecated and ignored 'detach\u00b4 boolean argument\n     if (fHelp || params.size() > 1)\n@@ -194,68 +195,70 @@ Value stop(const Array& params, bool fHelp)\n \n \n static const CRPCCommand vRPCCommands[] =\n-{ //  name                      function                 safemd  unlocked\n-  //  ------------------------  -----------------------  ------  --------\n-    { \"help\",                   &help,                   true,   true },\n-    { \"stop\",                   &stop,                   true,   true },\n-    { \"getblockcount\",          &getblockcount,          true,   false },\n-    { \"getconnectioncount\",     &getconnectioncount,     true,   false },\n-    { \"getpeerinfo\",            &getpeerinfo,            true,   false },\n-    { \"getdifficulty\",          &getdifficulty,          true,   false },\n-    { \"getgenerate\",            &getgenerate,            true,   false },\n-    { \"setgenerate\",            &setgenerate,            true,   false },\n-    { \"gethashespersec\",        &gethashespersec,        true,   false },\n-    { \"getinfo\",                &getinfo,                true,   false },\n-    { \"getmininginfo\",          &getmininginfo,          true,   false },\n-    { \"getnewaddress\",          &getnewaddress,          true,   false },\n-    { \"getaccountaddress\",      &getaccountaddress,      true,   false },\n-    { \"setaccount\",             &setaccount,             true,   false },\n-    { \"getaccount\",             &getaccount,             false,  false },\n-    { \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,   false },\n-    { \"sendtoaddress\",          &sendtoaddress,          false,  false },\n-    { \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,  false },\n-    { \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,  false },\n-    { \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,  false },\n-    { \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,  false },\n-    { \"backupwallet\",           &backupwallet,           true,   false },\n-    { \"keypoolrefill\",          &keypoolrefill,          true,   false },\n-    { \"walletpassphrase\",       &walletpassphrase,       true,   false },\n-    { \"walletpassphrasechange\", &walletpassphrasechange, false,  false },\n-    { \"walletlock\",             &walletlock,             true,   false },\n-    { \"encryptwallet\",          &encryptwallet,          false,  false },\n-    { \"validateaddress\",        &validateaddress,        true,   false },\n-    { \"getbalance\",             &getbalance,             false,  false },\n-    { \"move\",                   &movecmd,                false,  false },\n-    { \"sendfrom\",               &sendfrom,               false,  false },\n-    { \"sendmany\",               &sendmany,               false,  false },\n-    { \"addmultisigaddress\",     &addmultisigaddress,     false,  false },\n-    { \"createmultisig\",         &createmultisig,         true,   true  },\n-    { \"getrawmempool\",          &getrawmempool,          true,   false },\n-    { \"getblock\",               &getblock,               false,  false },\n-    { \"getblockhash\",           &getblockhash,           false,  false },\n-    { \"gettransaction\",         &gettransaction,         false,  false },\n-    { \"listtransactions\",       &listtransactions,       false,  false },\n-    { \"listaddressgroupings\",   &listaddressgroupings,   false,  false },\n-    { \"signmessage\",            &signmessage,            false,  false },\n-    { \"verifymessage\",          &verifymessage,          false,  false },\n-    { \"getwork\",                &getwork,                true,   false },\n-    { \"listaccounts\",           &listaccounts,           false,  false },\n-    { \"settxfee\",               &settxfee,               false,  false },\n-    { \"getblocktemplate\",       &getblocktemplate,       true,   false },\n-    { \"submitblock\",            &submitblock,            false,  false },\n-    { \"listsinceblock\",         &listsinceblock,         false,  false },\n-    { \"dumpprivkey\",            &dumpprivkey,            false,  false },\n-    { \"importprivkey\",          &importprivkey,          false,  false },\n-    { \"listunspent\",            &listunspent,            false,  false },\n-    { \"getrawtransaction\",      &getrawtransaction,      false,  false },\n-    { \"createrawtransaction\",   &createrawtransaction,   false,  false },\n-    { \"decoderawtransaction\",   &decoderawtransaction,   false,  false },\n-    { \"signrawtransaction\",     &signrawtransaction,     false,  false },\n-    { \"sendrawtransaction\",     &sendrawtransaction,     false,  false },\n-    { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,   false },\n-    { \"gettxout\",               &gettxout,               true,   false },\n-    { \"lockunspent\",            &lockunspent,            false,  false },\n-    { \"listlockunspent\",        &listlockunspent,        false,  false },\n+{ //  name                      function                 safemd  unlocked  isWalletFn\n+  //  ------------------------  -----------------------  ------  --------  ----------\n+    { \"help\",                   &help,                   true,   true,     false },\n+    { \"stop\",                   &stop,                   true,   true,     false },\n+    { \"getblockcount\",          &getblockcount,          true,   false,    false },\n+    { \"getconnectioncount\",     &getconnectioncount,     true,   false,    false },\n+    { \"getpeerinfo\",            &getpeerinfo,            true,   false,    false },\n+    { \"getdifficulty\",          &getdifficulty,          true,   false,    false },\n+    { \"getgenerate\",            &getgenerate,            true,   false,    false },\n+    { \"setgenerate\",            &setgenerate,            true,   false,    false },\n+    { \"gethashespersec\",        &gethashespersec,        true,   false,    false },\n+    { \"getinfo\",                &getinfo,                true,   false,    true  },\n+    { \"getmininginfo\",          &getmininginfo,          true,   false,    false },\n+    { \"getnewaddress\",          &getnewaddress,          true,   false,    true  },\n+    { \"getaccountaddress\",      &getaccountaddress,      true,   false,    true  },\n+    { \"setaccount\",             &setaccount,             true,   false,    true  },\n+    { \"getaccount\",             &getaccount,             false,  false,    true  },\n+    { \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,   false,    true  },\n+    { \"sendtoaddress\",          &sendtoaddress,          false,  false,    true  },\n+    { \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,  false,    true  },\n+    { \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,  false,    true  },\n+    { \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,  false,    true  },\n+    { \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,  false,    true  },\n+    { \"backupwallet\",           &backupwallet,           true,   false,    true  },\n+    { \"keypoolrefill\",          &keypoolrefill,          true,   false,    true  },\n+    { \"walletpassphrase\",       &walletpassphrase,       true,   false,    true  },\n+    { \"walletpassphrasechange\", &walletpassphrasechange, false,  false,    true  },\n+    { \"walletlock\",             &walletlock,             true,   false,    true  },\n+    { \"encryptwallet\",          &encryptwallet,          false,  false,    true  },\n+    { \"validateaddress\",        &validateaddress,        true,   false,    true  },\n+    { \"getbalance\",             &getbalance,             false,  false,    true  },\n+    { \"move\",                   &movecmd,                false,  false,    true  },\n+    { \"sendfrom\",               &sendfrom,               false,  false,    true  },\n+    { \"sendmany\",               &sendmany,               false,  false,    true  },\n+    { \"addmultisigaddress\",     &addmultisigaddress,     false,  false,    true  },\n+    { \"createmultisig\",         &createmultisig,         true,   true,     true  },\n+    { \"getrawmempool\",          &getrawmempool,          true,   false,    false },\n+    { \"getblock\",               &getblock,               false,  false,    false },\n+    { \"getblockhash\",           &getblockhash,           false,  false,    false },\n+    { \"gettransaction\",         &gettransaction,         false,  false,    true  },\n+    { \"listtransactions\",       &listtransactions,       false,  false,    true  },\n+    { \"listaddressgroupings\",   &listaddressgroupings,   false,  false,    true  },\n+    { \"signmessage\",            &signmessage,            false,  false,    true  },\n+    { \"verifymessage\",          &verifymessage,          false,  false,    false },\n+    { \"getwork\",                &getwork,                true,   false,    true  },\n+    { \"listaccounts\",           &listaccounts,           false,  false,    false },\n+    { \"settxfee\",               &settxfee,               false,  false,    false },\n+    { \"getblocktemplate\",       &getblocktemplate,       true,   false,    false },\n+    { \"submitblock\",            &submitblock,            false,  false,    false },\n+    { \"listsinceblock\",         &listsinceblock,         false,  false,    true  },\n+    { \"dumpprivkey\",            &dumpprivkey,            false,  false,    true  },\n+    { \"importprivkey\",          &importprivkey,          false,  false,    true  },\n+    { \"listunspent\",            &listunspent,            false,  false,    true  },\n+    { \"getrawtransaction\",      &getrawtransaction,      false,  false,    false },\n+    { \"createrawtransaction\",   &createrawtransaction,   false,  false,    false },\n+    { \"decoderawtransaction\",   &decoderawtransaction,   false,  false,    false },\n+    { \"signrawtransaction\",     &signrawtransaction,     false,  false,    true  },\n+    { \"sendrawtransaction\",     &sendrawtransaction,     false,  false,    false },\n+    { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,   false,    false },\n+    { \"gettxout\",               &gettxout,               true,   false,    false },\n+    { \"lockunspent\",            &lockunspent,            false,  false,    true  },\n+    { \"listlockunspent\",        &listlockunspent,        false,  false,    true  },\n+    { \"listwallets\",            &listwallets,            true,   true,     false },\n+    { \"usewallet\",              &usewallet,              true,   true,     false }\n };\n \n CRPCTable::CRPCTable()\n@@ -1052,7 +1055,7 @@ void ThreadRPCServer3(void* parg)\n     }\n }\n \n-json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const\n+json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params, CWallet* pWallet) const\n {\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n@@ -1065,16 +1068,19 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         !pcmd->okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n \n+    if (!pWallet) pWallet = pwalletMain;\n+    \n     try\n     {\n         // Execute\n         Value result;\n         {\n-            if (pcmd->unlocked)\n-                result = pcmd->actor(params, false);\n+            if (pcmd->unlocked) {\n+                result = pcmd->actor(pWallet, params, false);\n+            }\n             else {\n                 LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n+                result = pcmd->actor(pWallet, params, false);\n             }\n         }\n         return result;"
      },
      {
        "sha": "7739c94dc4af927fc15f5223dee593f4d334e510",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 71,
        "deletions": 67,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -87,7 +87,8 @@ void RPCTypeCheck(const json_spirit::Array& params,\n void RPCTypeCheck(const json_spirit::Object& o,\n                   const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n \n-typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n+class CWallet;\n+typedef json_spirit::Value(*rpcfn_type)(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n \n class CRPCCommand\n {\n@@ -96,6 +97,7 @@ class CRPCCommand\n     rpcfn_type actor;\n     bool okSafeMode;\n     bool unlocked;\n+    bool isWalletFn;\n };\n \n /**\n@@ -117,7 +119,7 @@ class CRPCTable\n      * @returns Result of the call.\n      * @throws an exception (json_spirit::Value) when an error happens.\n      */\n-    json_spirit::Value execute(const std::string &method, const json_spirit::Array &params) const;\n+    json_spirit::Value execute(const std::string &method, const json_spirit::Array &params, CWallet* pWallet = NULL) const;\n };\n \n extern const CRPCTable tableRPC;\n@@ -127,70 +129,72 @@ extern int64 AmountFromValue(const json_spirit::Value& value);\n extern json_spirit::Value ValueFromAmount(int64 amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n-extern std::string HelpRequiringPassphrase();\n-extern void EnsureWalletIsUnlocked();\n-\n-extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n-extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n-extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n-extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getwork(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getnewaddress(const json_spirit::Array& params, bool fHelp); // in rpcwallet.cpp\n-extern json_spirit::Value getaccountaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value setaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaddressesbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendtoaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value signmessage(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value verifymessage(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getbalance(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value movecmd(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendfrom(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendmany(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value addmultisigaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value createmultisig(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listtransactions(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listaddressgroupings(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listaccounts(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listsinceblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value backupwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value keypoolrefill(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrase(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrasechange(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n-extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getblockcount(const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n-extern json_spirit::Value getdifficulty(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value settxfee(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getrawmempool(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblockhash(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n+extern std::string HelpRequiringPassphrase(CWallet* pWallet = NULL);\n+extern void EnsureWalletIsUnlocked(CWallet* pWallet = NULL);\n+\n+extern json_spirit::Value getconnectioncount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n+extern json_spirit::Value getpeerinfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value dumpprivkey(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n+extern json_spirit::Value importprivkey(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getgenerate(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n+extern json_spirit::Value setgenerate(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gethashespersec(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getmininginfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getwork(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getblocktemplate(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value submitblock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getnewaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcwallet.cpp\n+extern json_spirit::Value getaccountaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value setaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getaddressesbyaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendtoaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value signmessage(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value verifymessage(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getreceivedbyaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getreceivedbyaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getbalance(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value movecmd(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendfrom(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendmany(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value addmultisigaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value createmultisig(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listreceivedbyaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listreceivedbyaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listtransactions(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listaddressgroupings(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listaccounts(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listsinceblock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value backupwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value keypoolrefill(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listwallets(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value usewallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value walletpassphrase(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value walletpassphrasechange(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value walletlock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value encryptwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value validateaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getinfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n+extern json_spirit::Value listunspent(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value lockunspent(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listlockunspent(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value createrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value decoderawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value signrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getblockcount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n+extern json_spirit::Value getdifficulty(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value settxfee(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getrawmempool(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getblockhash(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getblock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettxoutsetinfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettxout(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n \n #endif"
      },
      {
        "sha": "c3eafd4515ff0873ad4ef3368c64669c2a6ac6e5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 88,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -25,6 +25,7 @@\n using namespace std;\n using namespace boost;\n \n+CWalletMap* pWalletMap;\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n@@ -97,8 +98,8 @@ void Shutdown(void* parg)\n         }\n         bitdb.Flush(true);\n         boost::filesystem::remove(GetPidFile());\n-        UnregisterWallet(pwalletMain);\n-        delete pwalletMain;\n+        UnregisterAllWallets();\n+        delete pWalletMap;\n         NewThread(ExitTimeout, NULL);\n         Sleep(50);\n         printf(\"Bitcoin exited\\n\\n\");\n@@ -392,6 +393,94 @@ void ThreadImport(void *data) {\n     vnThreadsRunning[THREAD_IMPORT]--;\n }\n \n+bool LoadWallet(const string& strName, const string& strFile, std::ostringstream& strErrors, int64 nStart)\n+{\n+    printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n+    bool fFirstRun = true;\n+    CWallet* pwallet = new CWallet(strFile);\n+    pWalletMap->wallets[strName] = pwallet;\n+    // TODO: get rid of pwalletMain\n+    if (strName == \"default\") pwalletMain = pwallet;\n+    DBErrors nLoadWalletRet = pwallet->LoadWallet(fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT)\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            string msg(_(\"Warning: error reading \"));\n+            msg += strFile + _(\"! All keys read correctly, but transaction data\"\n+                               \" or address book entries might be missing or incorrect.\");\n+            InitWarning(msg);\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n+            printf(\"%s\", strErrors.str().c_str());\n+            return InitError(strErrors.str());\n+        }\n+        else\n+            strErrors << _(\"Error loading \") << strFile << \"\\n\";\n+    }\n+    \n+    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    {\n+        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            pwallet->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < pwallet->GetVersion())\n+            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+        pwallet->SetMaxVersion(nMaxVersion);\n+    }\n+    \n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+        \n+        CPubKey newDefaultKey;\n+        if (!pwallet->GetKeyFromPool(newDefaultKey, false))\n+            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n+        pwallet->SetDefaultKey(newDefaultKey);\n+        if (!pwallet->SetAddressBookName(pwallet->vchDefaultKey.GetID(), \"\"))\n+            strErrors << _(\"Cannot write default address\") << \"\\n\";\n+    }\n+    \n+    printf(\"%s\", strErrors.str().c_str());\n+    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    \n+    RegisterWallet(pwallet);\n+    \n+    CBlockIndex *pindexRescan = pindexBest;\n+    if (GetBoolArg(\"-rescan\"))\n+        pindexRescan = pindexGenesisBlock;\n+    else\n+    {\n+        CWalletDB walletdb(strFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = locator.GetBlockIndex();\n+    }\n+    if (pindexBest && pindexBest != pindexRescan)\n+    {\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        pwallet->ScanForWalletTransactions(pindexRescan, true);\n+        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    }\n+\n+    return true;\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -793,89 +882,23 @@ bool AppInit2()\n         return false;\n     }\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 8: load wallets\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n-    printf(\"Loading wallet...\\n\");\n+    // TODO: Encapsulate wallet better\n+    uiInterface.InitMessage(_(\"Loading wallets...\"));\n+    printf(\"Loading wallets...\\n\");\n     nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    pwalletMain = new CWallet(\"wallet.dat\");\n-    DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-    {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-        {\n-            string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                         \" or address book entries might be missing or incorrect.\"));\n-            InitWarning(msg);\n-        }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n-        {\n-            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n-            printf(\"%s\", strErrors.str().c_str());\n-            return InitError(strErrors.str());\n-        }\n-        else\n-            strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-    }\n-\n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < pwalletMain->GetVersion())\n-            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-        pwalletMain->SetMaxVersion(nMaxVersion);\n-    }\n-\n-    if (fFirstRun)\n-    {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n-        CPubKey newDefaultKey;\n-        if (!pwalletMain->GetKeyFromPool(newDefaultKey, false))\n-            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n-        pwalletMain->SetDefaultKey(newDefaultKey);\n-        if (!pwalletMain->SetAddressBookName(pwalletMain->vchDefaultKey.GetID(), \"\"))\n-            strErrors << _(\"Cannot write default address\") << \"\\n\";\n-    }\n-\n-    printf(\"%s\", strErrors.str().c_str());\n-    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-\n-    RegisterWallet(pwalletMain);\n-\n-    CBlockIndex *pindexRescan = pindexBest;\n-    if (GetBoolArg(\"-rescan\"))\n-        pindexRescan = pindexGenesisBlock;\n-    else\n-    {\n-        CWalletDB walletdb(\"wallet.dat\");\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = locator.GetBlockIndex();\n-    }\n-    if (pindexBest && pindexBest != pindexRescan)\n-    {\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-    }\n-\n+    // TODO: Load wallet names and file names from config file.\n+    typedef map<string, string> string_map;\n+    string_map mapWalletFiles;\n+    mapWalletFiles[\"default\"] = \"wallet.dat\";\n+    mapWalletFiles[\"custom\"] = \"wallet2.dat\";\n+    // TODO: Make the wallet loads more tolerant. Load all wallets possible.\n+    pWalletMap = new CWalletMap();\n+    BOOST_FOREACH(const string_map::value_type& mapWalletFile, mapWalletFiles)\n+    if (!LoadWallet(mapWalletFile.first, mapWalletFile.second, strErrors, nStart))\n+        return false;\n+    \n     // ********************************************************* Step 9: import blocks\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n@@ -916,10 +939,15 @@ bool AppInit2()\n     //// debug print\n     printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n     printf(\"nBestHeight = %d\\n\",                   nBestHeight);\n-    printf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain->setKeyPool.size());\n-    printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n-    printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());\n-\n+    \n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+    {\n+        printf(\"Setting properties for wallet \\\"%s\\\"...\\n\", item.first.c_str());\n+        printf(\"  setKeyPool.size() = %\"PRIszu\"\\n\",      item.second->setKeyPool.size());\n+        printf(\"  mapWallet.size() = %\"PRIszu\"\\n\",       item.second->mapWallet.size());\n+        printf(\"  mapAddressBook.size() = %\"PRIszu\"\\n\",  item.second->mapAddressBook.size());\n+    }\n+    \n     if (!NewThread(StartNode, NULL))\n         InitError(_(\"Error: could not start node\"));\n \n@@ -935,7 +963,8 @@ bool AppInit2()\n         return InitError(strErrors.str());\n \n      // Add wallet transactions that aren't already in a block to mapTransactions\n-    pwalletMain->ReacceptWalletTransactions();\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+        item.second->ReacceptWalletTransactions();\n \n #if !defined(QT_GUI)\n     // Loop until process is exit()ed from shutdown() function,"
      },
      {
        "sha": "b980098b72799c8a1ff38a018566f5419fd328b8",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"wallet.h\"\n \n+extern CWalletMap* pWalletMap;\n extern CWallet* pwalletMain;\n \n void StartShutdown();"
      },
      {
        "sha": "66b00ac4765174521f9635804a507244fab17226",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -90,6 +90,14 @@ void UnregisterWallet(CWallet* pwalletIn)\n     }\n }\n \n+void UnregisterAllWallets()\n+{\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        setpwalletRegistered.clear();\n+    }\n+}\n+\n // check whether the passed transaction is from us\n bool static IsFromMe(CTransaction& tx)\n {"
      },
      {
        "sha": "0cbda68ea30780cf54f56836d8958a241767670a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -112,6 +112,8 @@ class CCoinsViewCache;\n void RegisterWallet(CWallet* pwalletIn);\n /** Unregister a wallet from core */\n void UnregisterWallet(CWallet* pwalletIn);\n+/** Unregister all wallets from core */\n+void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n /** Process an incoming block */"
      },
      {
        "sha": "4de04da2c2162491caa3d203d56f4cd78e5f1f53",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -69,7 +69,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n }\n \n \n-Value getblockcount(const Array& params, bool fHelp)\n+Value getblockcount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -80,7 +80,7 @@ Value getblockcount(const Array& params, bool fHelp)\n }\n \n \n-Value getdifficulty(const Array& params, bool fHelp)\n+Value getdifficulty(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -91,7 +91,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n }\n \n \n-Value settxfee(const Array& params, bool fHelp)\n+Value settxfee(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n@@ -107,7 +107,7 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n-Value getrawmempool(const Array& params, bool fHelp)\n+Value getrawmempool(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -124,7 +124,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n     return a;\n }\n \n-Value getblockhash(const Array& params, bool fHelp)\n+Value getblockhash(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -139,7 +139,7 @@ Value getblockhash(const Array& params, bool fHelp)\n     return pblockindex->phashBlock->GetHex();\n }\n \n-Value getblock(const Array& params, bool fHelp)\n+Value getblock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -159,7 +159,7 @@ Value getblock(const Array& params, bool fHelp)\n     return blockToJSON(block, pblockindex);\n }\n \n-Value gettxoutsetinfo(const Array& params, bool fHelp)\n+Value gettxoutsetinfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -178,7 +178,7 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettxout(const Array& params, bool fHelp)\n+Value gettxout(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error("
      },
      {
        "sha": "8c667d217112677b48f52596314a5241528d4814",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -32,7 +32,7 @@ class CTxDump\n     }\n };\n \n-Value importprivkey(const Array& params, bool fHelp)\n+Value importprivkey(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n@@ -60,24 +60,24 @@ Value importprivkey(const Array& params, bool fHelp)\n     key.SetSecret(secret, fCompressed);\n     CKeyID vchAddress = key.GetPubKey().GetID();\n     {\n-        LOCK2(cs_main, pwalletMain->cs_wallet);\n+        LOCK2(cs_main, pWallet->cs_wallet);\n \n-        pwalletMain->MarkDirty();\n-        pwalletMain->SetAddressBookName(vchAddress, strLabel);\n+        pWallet->MarkDirty();\n+        pWallet->SetAddressBookName(vchAddress, strLabel);\n \n-        if (!pwalletMain->AddKey(key))\n+        if (!pWallet->AddKey(key))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \t\n         if (fRescan) {\n-            pwalletMain->ScanForWalletTransactions(pindexGenesisBlock, true);\n-            pwalletMain->ReacceptWalletTransactions();\n+            pWallet->ScanForWalletTransactions(pindexGenesisBlock, true);\n+            pWallet->ReacceptWalletTransactions();\n         }\n     }\n \n     return Value::null;\n }\n \n-Value dumpprivkey(const Array& params, bool fHelp)\n+Value dumpprivkey(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -93,7 +93,7 @@ Value dumpprivkey(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     CSecret vchSecret;\n     bool fCompressed;\n-    if (!pwalletMain->GetSecret(keyID, vchSecret, fCompressed))\n+    if (!pWallet->GetSecret(keyID, vchSecret, fCompressed))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret, fCompressed).ToString();\n }"
      },
      {
        "sha": "26efcd101d633a386f51359099d8c0280d716550",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -11,7 +11,7 @@\n using namespace json_spirit;\n using namespace std;\n \n-Value getgenerate(const Array& params, bool fHelp)\n+Value getgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -22,7 +22,7 @@ Value getgenerate(const Array& params, bool fHelp)\n }\n \n \n-Value setgenerate(const Array& params, bool fHelp)\n+Value setgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -48,7 +48,7 @@ Value setgenerate(const Array& params, bool fHelp)\n }\n \n \n-Value gethashespersec(const Array& params, bool fHelp)\n+Value gethashespersec(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -61,7 +61,7 @@ Value gethashespersec(const Array& params, bool fHelp)\n }\n \n \n-Value getmininginfo(const Array& params, bool fHelp)\n+Value getmininginfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -76,14 +76,14 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"generate\",      GetBoolArg(\"-gen\")));\n     obj.push_back(Pair(\"genproclimit\",  (int)GetArg(\"-genproclimit\", -1)));\n-    obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n+    obj.push_back(Pair(\"hashespersec\",  gethashespersec(NULL, params, false)));\n     obj.push_back(Pair(\"pooledtx\",      (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n     return obj;\n }\n \n \n-Value getwork(const Array& params, bool fHelp)\n+Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -196,7 +196,7 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getblocktemplate(const Array& params, bool fHelp)\n+Value getblocktemplate(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -349,7 +349,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value submitblock(const Array& params, bool fHelp)\n+Value submitblock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error("
      },
      {
        "sha": "715172194a46f711cd740e929d1a059e691e6ed7",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -8,7 +8,7 @@\n using namespace json_spirit;\n using namespace std;\n \n-Value getconnectioncount(const Array& params, bool fHelp)\n+Value getconnectioncount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -32,7 +32,7 @@ static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-Value getpeerinfo(const Array& params, bool fHelp)\n+Value getpeerinfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error("
      },
      {
        "sha": "83c52ded11ccef1a4d1e183f70493976b2a35764",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -132,7 +132,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n }\n \n-Value getrawtransaction(const Array& params, bool fHelp)\n+Value getrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -166,7 +166,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value listunspent(const Array& params, bool fHelp)\n+Value listunspent(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -204,7 +204,7 @@ Value listunspent(const Array& params, bool fHelp)\n \n     Array results;\n     vector<COutput> vecOutputs;\n-    pwalletMain->AvailableCoins(vecOutputs, false);\n+    pWallet->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs)\n     {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -233,7 +233,7 @@ Value listunspent(const Array& params, bool fHelp)\n             {\n                 const CScriptID& hash = boost::get<const CScriptID&>(address);\n                 CScript redeemScript;\n-                if (pwalletMain->GetCScript(hash, redeemScript))\n+                if (pWallet->GetCScript(hash, redeemScript))\n                     entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n             }\n         }\n@@ -245,7 +245,7 @@ Value listunspent(const Array& params, bool fHelp)\n     return results;\n }\n \n-Value createrawtransaction(const Array& params, bool fHelp)\n+Value createrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n@@ -305,7 +305,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     return HexStr(ss.begin(), ss.end());\n }\n \n-Value decoderawtransaction(const Array& params, bool fHelp)\n+Value decoderawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -328,7 +328,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value signrawtransaction(const Array& params, bool fHelp)\n+Value signrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n@@ -343,7 +343,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             \"Returns json object with keys:\\n\"\n             \"  hex : raw transaction with signature(s) (hex-encoded string)\\n\"\n             \"  complete : 1 if transaction has a complete set of signature (0 if not)\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n \n@@ -408,7 +408,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n     else\n-        EnsureWalletIsUnlocked();\n+        EnsureWalletIsUnlocked(pWallet);\n \n     // Add previous txouts given in the RPC call:\n     if (params.size() > 1 && params[1].type() != null_type)\n@@ -460,7 +460,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n \n-    const CKeyStore& keystore = (fGivenKeys ? tempKeystore : *pwalletMain);\n+    const CKeyStore& keystore = (fGivenKeys ? tempKeystore : *pWallet);\n \n     int nHashType = SIGHASH_ALL;\n     if (params.size() > 3 && params[3].type() != null_type)\n@@ -518,7 +518,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value sendrawtransaction(const Array& params, bool fHelp)\n+Value sendrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error("
      },
      {
        "sha": "de65d328dd371ac3cb1d248f0b48fcde1700120a",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 214,
        "deletions": 161,
        "changes": 375,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -19,16 +19,16 @@ using namespace json_spirit;\n int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n-std::string HelpRequiringPassphrase()\n+std::string HelpRequiringPassphrase(CWallet* pWallet)\n {\n-    return pwalletMain->IsCrypted()\n+    return (pWallet && pWallet->IsCrypted())\n         ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n         : \"\";\n }\n \n-void EnsureWalletIsUnlocked()\n+void EnsureWalletIsUnlocked(CWallet* pWallet)\n {\n-    if (pwalletMain->IsLocked())\n+    if (pWallet || pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n@@ -59,7 +59,7 @@ string AccountFromValue(const Value& value)\n     return strAccount;\n }\n \n-Value getinfo(const Array& params, bool fHelp)\n+Value getinfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -69,28 +69,29 @@ Value getinfo(const Array& params, bool fHelp)\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n+    // TODO: List each wallet\n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+    obj.push_back(Pair(\"balance\",       ValueFromAmount(pWallet->GetBalance())));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n-    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n+    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pWallet->GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"keypoolsize\",   pWallet->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-    if (pwalletMain->IsCrypted())\n+    if (pWallet->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }\n \n \n \n-Value getnewaddress(const Array& params, bool fHelp)\n+Value getnewaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -104,24 +105,24 @@ Value getnewaddress(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         strAccount = AccountFromValue(params[0]);\n \n-    if (!pwalletMain->IsLocked())\n-        pwalletMain->TopUpKeyPool();\n+    if (!pWallet->IsLocked())\n+        pWallet->TopUpKeyPool();\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwalletMain->GetKeyFromPool(newKey, false))\n+    if (!pWallet->GetKeyFromPool(newKey, false))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n \n-    pwalletMain->SetAddressBookName(keyID, strAccount);\n+    pWallet->SetAddressBookName(keyID, strAccount);\n \n     return CBitcoinAddress(keyID).ToString();\n }\n \n \n-CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n+CBitcoinAddress GetAccountAddress(CWallet* pWallet, string strAccount, bool bForceNew=false)\n {\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    CWalletDB walletdb(pWallet->strWalletFile);\n \n     CAccount account;\n     walletdb.ReadAccount(strAccount, account);\n@@ -133,8 +134,8 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     {\n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(account.vchPubKey.GetID());\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n-             it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n+        for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin();\n+             it != pWallet->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n@@ -147,17 +148,17 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     // Generate a new key\n     if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n-        if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n+        if (!pWallet->GetKeyFromPool(account.vchPubKey, false))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n-        pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n+        pWallet->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n     }\n \n     return CBitcoinAddress(account.vchPubKey.GetID());\n }\n \n-Value getaccountaddress(const Array& params, bool fHelp)\n+Value getaccountaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -169,14 +170,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n     Value ret;\n \n-    ret = GetAccountAddress(strAccount).ToString();\n+    ret = GetAccountAddress(pWallet, strAccount).ToString();\n \n     return ret;\n }\n \n \n \n-Value setaccount(const Array& params, bool fHelp)\n+Value setaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -193,20 +194,20 @@ Value setaccount(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[1]);\n \n     // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    if (pwalletMain->mapAddressBook.count(address.Get()))\n+    if (pWallet->mapAddressBook.count(address.Get()))\n     {\n-        string strOldAccount = pwalletMain->mapAddressBook[address.Get()];\n-        if (address == GetAccountAddress(strOldAccount))\n-            GetAccountAddress(strOldAccount, true);\n+        string strOldAccount = pWallet->mapAddressBook[address.Get()];\n+        if (address == GetAccountAddress(pWallet, strOldAccount))\n+            GetAccountAddress(pWallet, strOldAccount, true);\n     }\n \n-    pwalletMain->SetAddressBookName(address.Get(), strAccount);\n+    pWallet->SetAddressBookName(address.Get(), strAccount);\n \n     return Value::null;\n }\n \n \n-Value getaccount(const Array& params, bool fHelp)\n+Value getaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -218,14 +219,14 @@ Value getaccount(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n-    if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n+    map<CTxDestination, string>::iterator mi = pWallet->mapAddressBook.find(address.Get());\n+    if (mi != pWallet->mapAddressBook.end() && !(*mi).second.empty())\n         strAccount = (*mi).second;\n     return strAccount;\n }\n \n \n-Value getaddressesbyaccount(const Array& params, bool fHelp)\n+Value getaddressesbyaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -236,7 +237,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     Array ret;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pWallet->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second;\n@@ -246,13 +247,13 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value sendtoaddress(const Array& params, bool fHelp)\n+Value sendtoaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n@@ -268,17 +269,17 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n-    if (pwalletMain->IsLocked())\n+    if (pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    string strError = pWallet->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n     return wtx.GetHash().GetHex();\n }\n \n-Value listaddressgroupings(const Array& params, bool fHelp)\n+Value listaddressgroupings(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n@@ -288,8 +289,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             \"in past transactions\");\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n+    map<CTxDestination, int64> balances = pWallet->GetAddressBalances();\n+    BOOST_FOREACH(set<CTxDestination> grouping, pWallet->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n         BOOST_FOREACH(CTxDestination address, grouping)\n@@ -298,9 +299,9 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                LOCK(pwalletMain->cs_wallet);\n-                if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n-                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n+                LOCK(pWallet->cs_wallet);\n+                if (pWallet->mapAddressBook.find(CBitcoinAddress(address).Get()) != pWallet->mapAddressBook.end())\n+                    addressInfo.push_back(pWallet->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n             }\n             jsonGrouping.push_back(addressInfo);\n         }\n@@ -309,14 +310,14 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n     return jsonGroupings;\n }\n \n-Value signmessage(const Array& params, bool fHelp)\n+Value signmessage(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"signmessage <bitcoinaddress> <message>\\n\"\n             \"Sign a message with the private key of an address\");\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n     string strAddress = params[0].get_str();\n     string strMessage = params[1].get_str();\n@@ -330,7 +331,7 @@ Value signmessage(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n \n     CKey key;\n-    if (!pwalletMain->GetKey(keyID, key))\n+    if (!pWallet->GetKey(keyID, key))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n \n     CHashWriter ss(SER_GETHASH, 0);\n@@ -344,7 +345,7 @@ Value signmessage(const Array& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-Value verifymessage(const Array& params, bool fHelp)\n+Value verifymessage(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -381,7 +382,7 @@ Value verifymessage(const Array& params, bool fHelp)\n }\n \n \n-Value getreceivedbyaddress(const Array& params, bool fHelp)\n+Value getreceivedbyaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -394,7 +395,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     scriptPubKey.SetDestination(address.Get());\n-    if (!IsMine(*pwalletMain,scriptPubKey))\n+    if (!IsMine(*pWallet,scriptPubKey))\n         return (double)0.0;\n \n     // Minimum confirmations\n@@ -404,7 +405,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Tally\n     int64 nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !wtx.IsFinal())\n@@ -420,9 +421,9 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n+void GetAccountAddresses(CWallet* pWallet, string strAccount, set<CTxDestination>& setAddress)\n {\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pWallet->mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const string& strName = item.second;\n@@ -431,7 +432,7 @@ void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n     }\n }\n \n-Value getreceivedbyaccount(const Array& params, bool fHelp)\n+Value getreceivedbyaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -446,11 +447,11 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n     set<CTxDestination> setAddress;\n-    GetAccountAddresses(strAccount, setAddress);\n+    GetAccountAddresses(pWallet, strAccount, setAddress);\n \n     // Tally\n     int64 nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !wtx.IsFinal())\n@@ -459,7 +460,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n+            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pWallet, address) && setAddress.count(address))\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n         }\n@@ -469,12 +470,12 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n+int64 GetAccountBalance(CWallet* pWallet, CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n {\n     int64 nBalance = 0;\n \n     // Tally wallet transactions\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (!wtx.IsFinal())\n@@ -494,14 +495,14 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n     return nBalance;\n }\n \n-int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n+int64 GetAccountBalance(CWallet* pWallet, const string& strAccount, int nMinDepth)\n {\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-    return GetAccountBalance(walletdb, strAccount, nMinDepth);\n+    CWalletDB walletdb(pWallet->strWalletFile);\n+    return GetAccountBalance(pWallet, walletdb, strAccount, nMinDepth);\n }\n \n \n-Value getbalance(const Array& params, bool fHelp)\n+Value getbalance(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -510,7 +511,7 @@ Value getbalance(const Array& params, bool fHelp)\n             \"If [account] is specified, returns the balance in the account.\");\n \n     if (params.size() == 0)\n-        return  ValueFromAmount(pwalletMain->GetBalance());\n+        return  ValueFromAmount(pWallet->GetBalance());\n \n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -521,7 +522,7 @@ Value getbalance(const Array& params, bool fHelp)\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' should always return the same number.\n         int64 nBalance = 0;\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+        for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsFinal())\n@@ -546,13 +547,13 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = GetAccountBalance(pWallet, strAccount, nMinDepth);\n \n     return ValueFromAmount(nBalance);\n }\n \n \n-Value movecmd(const Array& params, bool fHelp)\n+Value movecmd(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n@@ -569,15 +570,15 @@ Value movecmd(const Array& params, bool fHelp)\n     if (params.size() > 4)\n         strComment = params[4].get_str();\n \n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    CWalletDB walletdb(pWallet->strWalletFile);\n     if (!walletdb.TxnBegin())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n     int64 nNow = GetAdjustedTime();\n \n     // Debit\n     CAccountingEntry debit;\n-    debit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n+    debit.nOrderPos = pWallet->IncOrderPosNext(&walletdb);\n     debit.strAccount = strFrom;\n     debit.nCreditDebit = -nAmount;\n     debit.nTime = nNow;\n@@ -587,7 +588,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Credit\n     CAccountingEntry credit;\n-    credit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n+    credit.nOrderPos = pWallet->IncOrderPosNext(&walletdb);\n     credit.strAccount = strTo;\n     credit.nCreditDebit = nAmount;\n     credit.nTime = nNow;\n@@ -602,13 +603,13 @@ Value movecmd(const Array& params, bool fHelp)\n }\n \n \n-Value sendfrom(const Array& params, bool fHelp)\n+Value sendfrom(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n             \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n@@ -626,29 +627,29 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[5].get_str();\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = GetAccountBalance(pWallet, strAccount, nMinDepth);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    string strError = pWallet->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n-Value sendmany(const Array& params, bool fHelp)\n+Value sendmany(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n             \"amounts are double-precision floating point numbers\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n@@ -683,24 +684,24 @@ Value sendmany(const Array& params, bool fHelp)\n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n     }\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = GetAccountBalance(pWallet, strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    CReserveKey keyChange(pwalletMain);\n+    CReserveKey keyChange(pWallet);\n     int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+    bool fCreated = pWallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n     if (!fCreated)\n     {\n-        if (totalAmount + nFeeRequired > pwalletMain->GetBalance())\n+        if (totalAmount + nFeeRequired > pWallet->GetBalance())\n             throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction creation failed\");\n     }\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange))\n+    if (!pWallet->CommitTransaction(wtx, keyChange))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n \n     return wtx.GetHash().GetHex();\n@@ -709,7 +710,7 @@ Value sendmany(const Array& params, bool fHelp)\n //\n // Used by addmultisigaddress / createmultisig:\n //\n-static CScript _createmultisig(const Array& params)\n+static CScript _createmultisig(CWallet* pWallet, const Array& params)\n {\n     int nRequired = params[0].get_int();\n     const Array& keys = params[1].get_array();\n@@ -736,7 +737,7 @@ static CScript _createmultisig(const Array& params)\n                 throw runtime_error(\n                     strprintf(\"%s does not refer to a key\",ks.c_str()));\n             CPubKey vchPubKey;\n-            if (!pwalletMain->GetPubKey(keyID, vchPubKey))\n+            if (!pWallet->GetPubKey(keyID, vchPubKey))\n                 throw runtime_error(\n                     strprintf(\"no full public key for address %s\",ks.c_str()));\n             if (!vchPubKey.IsValid() || !pubkeys[i].SetPubKey(vchPubKey))\n@@ -760,7 +761,7 @@ static CScript _createmultisig(const Array& params)\n     return result;\n }\n \n-Value addmultisigaddress(const Array& params, bool fHelp)\n+Value addmultisigaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n@@ -776,15 +777,15 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig(params);\n+    CScript inner = _createmultisig(pWallet, params);\n     CScriptID innerID = inner.GetID();\n-    pwalletMain->AddCScript(inner);\n+    pWallet->AddCScript(inner);\n \n-    pwalletMain->SetAddressBookName(innerID, strAccount);\n+    pWallet->SetAddressBookName(innerID, strAccount);\n     return CBitcoinAddress(innerID).ToString();\n }\n \n-Value createmultisig(const Array& params, bool fHelp)\n+Value createmultisig(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 2)\n     {\n@@ -797,7 +798,7 @@ Value createmultisig(const Array& params, bool fHelp)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig(params);\n+    CScript inner = _createmultisig(pWallet, params);\n     CScriptID innerID = inner.GetID();\n     CBitcoinAddress address(innerID);\n \n@@ -820,7 +821,7 @@ struct tallyitem\n     }\n };\n \n-Value ListReceived(const Array& params, bool fByAccounts)\n+Value ListReceived(CWallet* pWallet, const Array& params, bool fByAccounts)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -834,7 +835,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n@@ -848,7 +849,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pwalletMain, address))\n+            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pWallet, address))\n                 continue;\n \n             tallyitem& item = mapTally[address];\n@@ -860,7 +861,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     // Reply\n     Array ret;\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pWallet->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second;\n@@ -910,7 +911,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     return ret;\n }\n \n-Value listreceivedbyaddress(const Array& params, bool fHelp)\n+Value listreceivedbyaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -923,10 +924,10 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             \"  \\\"amount\\\" : total amount received by the address\\n\"\n             \"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");\n \n-    return ListReceived(params, false);\n+    return ListReceived(pWallet, params, false);\n }\n \n-Value listreceivedbyaccount(const Array& params, bool fHelp)\n+Value listreceivedbyaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -938,10 +939,10 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             \"  \\\"amount\\\" : total amount received by addresses with this account\\n\"\n             \"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");\n \n-    return ListReceived(params, true);\n+    return ListReceived(pWallet, params, true);\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n+void ListTransactions(CWallet* pWallet, const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n     int64 nFee;\n     string strSentAccount;\n@@ -975,8 +976,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n         {\n             string account;\n-            if (pwalletMain->mapAddressBook.count(r.first))\n-                account = pwalletMain->mapAddressBook[r.first];\n+            if (pWallet->mapAddressBook.count(r.first))\n+                account = pWallet->mapAddressBook[r.first];\n             if (fAllAccounts || (account == strAccount))\n             {\n                 Object entry;\n@@ -1019,7 +1020,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n     }\n }\n \n-Value listtransactions(const Array& params, bool fHelp)\n+Value listtransactions(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -1044,14 +1045,14 @@ Value listtransactions(const Array& params, bool fHelp)\n     Array ret;\n \n     std::list<CAccountingEntry> acentries;\n-    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n+    CWallet::TxItems txOrdered = pWallet->OrderedTxItems(acentries, strAccount);\n \n     // iterate backwards until we have nCount items to return:\n     for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n-            ListTransactions(*pwtx, strAccount, 0, true, ret);\n+            ListTransactions(pWallet, *pwtx, strAccount, 0, true, ret);\n         CAccountingEntry *const pacentry = (*it).second.second;\n         if (pacentry != 0)\n             AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1077,7 +1078,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listaccounts(const Array& params, bool fHelp)\n+Value listaccounts(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -1089,12 +1090,12 @@ Value listaccounts(const Array& params, bool fHelp)\n         nMinDepth = params[0].get_int();\n \n     map<string, int64> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n-        if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pWallet->mapAddressBook) {\n+        if (IsMine(*pWallet, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n     }\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         int64 nFee;\n@@ -1108,15 +1109,15 @@ Value listaccounts(const Array& params, bool fHelp)\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n-                if (pwalletMain->mapAddressBook.count(r.first))\n-                    mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n+                if (pWallet->mapAddressBook.count(r.first))\n+                    mapAccountBalances[pWallet->mapAddressBook[r.first]] += r.second;\n                 else\n                     mapAccountBalances[\"\"] += r.second;\n         }\n     }\n \n     list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n+    CWalletDB(pWallet->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n@@ -1127,7 +1128,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listsinceblock(const Array& params, bool fHelp)\n+Value listsinceblock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n@@ -1157,12 +1158,12 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     Array transactions;\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions);\n+            ListTransactions(pWallet, tx, \"*\", 0, true, transactions);\n     }\n \n     uint256 lastblock;\n@@ -1190,7 +1191,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettransaction(const Array& params, bool fHelp)\n+Value gettransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1201,9 +1202,9 @@ Value gettransaction(const Array& params, bool fHelp)\n     hash.SetHex(params[0].get_str());\n \n     Object entry;\n-    if (!pwalletMain->mapWallet.count(hash))\n+    if (!pWallet->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+    const CWalletTx& wtx = pWallet->mapWallet[hash];\n \n     int64 nCredit = wtx.GetCredit();\n     int64 nDebit = wtx.GetDebit();\n@@ -1217,41 +1218,41 @@ Value gettransaction(const Array& params, bool fHelp)\n     WalletTxToJSON(wtx, entry);\n \n     Array details;\n-    ListTransactions(wtx, \"*\", 0, false, details);\n+    ListTransactions(pWallet, wtx, \"*\", 0, false, details);\n     entry.push_back(Pair(\"details\", details));\n \n     return entry;\n }\n \n \n-Value backupwallet(const Array& params, bool fHelp)\n+Value backupwallet(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"backupwallet <destination>\\n\"\n             \"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");\n \n     string strDest = params[0].get_str();\n-    if (!BackupWallet(*pwalletMain, strDest))\n+    if (!BackupWallet(*pWallet, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return Value::null;\n }\n \n \n-Value keypoolrefill(const Array& params, bool fHelp)\n+Value keypoolrefill(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"keypoolrefill\\n\"\n             \"Fills the keypool.\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n-    pwalletMain->TopUpKeyPool();\n+    pWallet->TopUpKeyPool();\n \n-    if (pwalletMain->GetKeyPoolSize() < GetArg(\"-keypool\", 100))\n+    if (pWallet->GetKeyPoolSize() < GetArg(\"-keypool\", 100))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n     return Value::null;\n@@ -1263,15 +1264,26 @@ void ThreadTopUpKeyPool(void* parg)\n     // Make this thread recognisable as the key-topping-up thread\n     RenameThread(\"bitcoin-key-top\");\n \n-    pwalletMain->TopUpKeyPool();\n+    CWallet* pWallet = (CWallet*)parg;\n+    pWallet->TopUpKeyPool();\n }\n \n+struct CleanWalletPassphraseParams\n+{\n+    CWallet* pWallet;\n+    int64* pnSleepTime;\n+    \n+    CleanWalletPassphraseParams(CWallet* _pWallet, int64* _pnSleepTime) :\n+        pWallet(_pWallet), pnSleepTime(_pnSleepTime) { }\n+};\n+\n void ThreadCleanWalletPassphrase(void* parg)\n {\n     // Make this thread recognisable as the wallet relocking thread\n     RenameThread(\"bitcoin-lock-wa\");\n \n-    int64 nMyWakeTime = GetTimeMillis() + *((int64*)parg) * 1000;\n+    CleanWalletPassphraseParams* pParams = (CleanWalletPassphraseParams*)parg;\n+    int64 nMyWakeTime = GetTimeMillis() + *(pParams->pnSleepTime) * 1000;\n \n     ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n \n@@ -1296,7 +1308,7 @@ void ThreadCleanWalletPassphrase(void* parg)\n         if (nWalletUnlockTime)\n         {\n             nWalletUnlockTime = 0;\n-            pwalletMain->Lock();\n+            pParams->pWallet->Lock();\n         }\n     }\n     else\n@@ -1307,21 +1319,22 @@ void ThreadCleanWalletPassphrase(void* parg)\n \n     LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n \n-    delete (int64*)parg;\n+    delete pParams->pnSleepTime;\n+    delete pParams;\n }\n \n-Value walletpassphrase(const Array& params, bool fHelp)\n+Value walletpassphrase(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if ((!pWallet || pWallet->IsCrypted()) && (fHelp || params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n     if (fHelp)\n         return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    if (!pwalletMain->IsLocked())\n+    if (!pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked.\");\n \n     // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n@@ -1333,31 +1346,32 @@ Value walletpassphrase(const Array& params, bool fHelp)\n \n     if (strWalletPass.length() > 0)\n     {\n-        if (!pwalletMain->Unlock(strWalletPass))\n+        if (!pWallet->Unlock(strWalletPass))\n             throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n     }\n     else\n         throw runtime_error(\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n-    NewThread(ThreadTopUpKeyPool, NULL);\n+    NewThread(ThreadTopUpKeyPool, pWallet);\n     int64* pnSleepTime = new int64(params[1].get_int64());\n-    NewThread(ThreadCleanWalletPassphrase, pnSleepTime);\n+    CleanWalletPassphraseParams* pcwpp = new CleanWalletPassphraseParams(pWallet, pnSleepTime);\n+    NewThread(ThreadCleanWalletPassphrase, pcwpp);\n \n     return Value::null;\n }\n \n \n-Value walletpassphrasechange(const Array& params, bool fHelp)\n+Value walletpassphrasechange(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if ((!pWallet || pWallet->IsCrypted()) && (fHelp || params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n     if (fHelp)\n         return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n@@ -1375,45 +1389,45 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n-    if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n+    if (!pWallet->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n \n     return Value::null;\n }\n \n \n-Value walletlock(const Array& params, bool fHelp)\n+Value walletlock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n+    if ((!pWallet || pWallet->IsCrypted()) && (fHelp || params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"Removes the wallet encryption key from memory, locking the wallet.\\n\"\n             \"After calling this method, you will need to call walletpassphrase again\\n\"\n             \"before being able to call any methods which require the wallet to be unlocked.\");\n     if (fHelp)\n         return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n     {\n         LOCK(cs_nWalletUnlockTime);\n-        pwalletMain->Lock();\n+        pWallet->Lock();\n         nWalletUnlockTime = 0;\n     }\n \n     return Value::null;\n }\n \n \n-Value encryptwallet(const Array& params, bool fHelp)\n+Value encryptwallet(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n+    if ((!pWallet || !pWallet->IsCrypted()) && (fHelp || params.size() != 1))\n         throw runtime_error(\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n     if (fHelp)\n         return true;\n-    if (pwalletMain->IsCrypted())\n+    if (pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n@@ -1427,7 +1441,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n \n-    if (!pwalletMain->EncryptWallet(strWalletPass))\n+    if (!pWallet->EncryptWallet(strWalletPass))\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n \n     // BDB seems to have a bad habit of writing old data into\n@@ -1439,13 +1453,18 @@ Value encryptwallet(const Array& params, bool fHelp)\n \n class DescribeAddressVisitor : public boost::static_visitor<Object>\n {\n+private:\n+    CWallet* pWallet;\n+    \n public:\n+    DescribeAddressVisitor(CWallet* _pWallet) : pWallet(_pWallet) { }\n+    \n     Object operator()(const CNoDestination &dest) const { return Object(); }\n \n     Object operator()(const CKeyID &keyID) const {\n         Object obj;\n         CPubKey vchPubKey;\n-        pwalletMain->GetPubKey(keyID, vchPubKey);\n+        pWallet->GetPubKey(keyID, vchPubKey);\n         obj.push_back(Pair(\"isscript\", false));\n         obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey.Raw())));\n         obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n@@ -1456,7 +1475,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n         CScript subscript;\n-        pwalletMain->GetCScript(scriptID, subscript);\n+        pWallet->GetCScript(scriptID, subscript);\n         std::vector<CTxDestination> addresses;\n         txnouttype whichType;\n         int nRequired;\n@@ -1472,7 +1491,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n     }\n };\n \n-Value validateaddress(const Array& params, bool fHelp)\n+Value validateaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1489,19 +1508,19 @@ Value validateaddress(const Array& params, bool fHelp)\n         CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = IsMine(*pwalletMain, dest);\n+        bool fMine = IsMine(*pWallet, dest);\n         ret.push_back(Pair(\"ismine\", fMine));\n         if (fMine) {\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(pWallet), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n-        if (pwalletMain->mapAddressBook.count(dest))\n-            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));\n+        if (pWallet->mapAddressBook.count(dest))\n+            ret.push_back(Pair(\"account\", pWallet->mapAddressBook[dest]));\n     }\n     return ret;\n }\n \n-Value lockunspent(const Array& params, bool fHelp)\n+Value lockunspent(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -1517,7 +1536,7 @@ Value lockunspent(const Array& params, bool fHelp)\n \n     if (params.size() == 1) {\n         if (fUnlock)\n-            pwalletMain->UnlockAllCoins();\n+            pWallet->UnlockAllCoins();\n         return true;\n     }\n \n@@ -1541,23 +1560,23 @@ Value lockunspent(const Array& params, bool fHelp)\n         COutPoint outpt(uint256(txid), nOutput);\n \n         if (fUnlock)\n-            pwalletMain->UnlockCoin(outpt);\n+            pWallet->UnlockCoin(outpt);\n         else\n-            pwalletMain->LockCoin(outpt);\n+            pWallet->LockCoin(outpt);\n     }\n \n     return true;\n }\n \n-Value listlockunspent(const Array& params, bool fHelp)\n+Value listlockunspent(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n             \"Returns list of temporarily unspendable outputs.\");\n \n     vector<COutPoint> vOutpts;\n-    pwalletMain->ListLockedCoins(vOutpts);\n+    pWallet->ListLockedCoins(vOutpts);\n \n     Array ret;\n \n@@ -1572,3 +1591,37 @@ Value listlockunspent(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 0)\n+        throw runtime_error(\n+            \"listwallets\\n\"\n+            \"Returns list of wallets.\");\n+    \n+    Array ret;\n+    \n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+        ret.push_back(item.first);\n+    \n+    return ret;\n+}\n+\n+Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2)\n+        throw runtime_error(\n+            \"usewallet <walletname> <method> [params]\\n\"\n+            \"Selects which wallet to use.\");\n+    \n+    string strWalletName = params[0].get_str();\n+    wallet_map::iterator it = pWalletMap->wallets.find(strWalletName);\n+    if (it == pWalletMap->wallets.end())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, wallet not found.\");\n+    \n+    string strMethod = params[1].get_str();\n+    vector<string> vstrParams;\n+    for (unsigned int i = 2; i < params.size(); i++)\n+        vstrParams.push_back(params[i].get_str());\n+\n+    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), it->second);\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "39b9835b9e80ae0afd83baf847eecad156f694d1",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63e3636295b39b3b9c1274cd14ada0cdf4265/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "patch": "@@ -311,6 +311,21 @@ class CWallet : public CCryptoKeyStore\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n };\n \n+/** A CWalletMap associates wallets with names and automatically deallocates them upon destruction.\n+ */\n+typedef std::map<std::string, CWallet*> wallet_map;\n+class CWalletMap\n+{\n+public:\n+    wallet_map wallets;\n+\n+    ~CWalletMap()\n+    {\n+        BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n+            delete item.second;\n+    }\n+};\n+\n /** A key allocated from the key pool. */\n class CReserveKey\n {"
      }
    ]
  },
  {
    "sha": "4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTZiMGUyOTBiZDliNzhjY2IwMTBmYzhmMjI0NTUwYWI0NzM4YTNm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T00:37:13Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T12:13:56Z"
      },
      "message": "Added CWallet* parameter to RPC test suite and a CWalletMap instance to test_bitcoin.cpp",
      "tree": {
        "sha": "eb757b2e98b8e1bcab88d0f3b4ba3c6d8bc35eff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb757b2e98b8e1bcab88d0f3b4ba3c6d8bc35eff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c63e3636295b39b3b9c1274cd14ada0cdf4265",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71c63e3636295b39b3b9c1274cd14ada0cdf4265"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "52d25100c7407bdf7ab2b26c73609d97319f270b",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
        "patch": "@@ -2,6 +2,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n+#include \"init.h\" // for pwalletMain\n #include \"base58.h\"\n #include \"util.h\"\n #include \"bitcoinrpc.h\"\n@@ -34,30 +35,30 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n \n     Value v;\n     CBitcoinAddress address;\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(1, address1Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(1, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(2, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(2, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_THROW(addmultisig(createArgs(0), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, address1Hex), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(0), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, address1Hex), false), runtime_error);\n \n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1, \"\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n \n     string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, short1.c_str()), false), runtime_error);\n \n     string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n static Value CallRPC(string args)\n@@ -70,7 +71,7 @@ static Value CallRPC(string args)\n \n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        Value result = (*method)(params, false);\n+        Value result = (*method)(pwalletMain, params, false);\n         return result;\n     }\n     catch (Object& objError)"
      },
      {
        "sha": "ae5eaa6799e96d2ef70db932906051a587d9225b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
        "patch": "@@ -8,6 +8,7 @@\n #include \"wallet.h\"\n #include \"util.h\"\n \n+CWalletMap* pWalletMap;\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n@@ -32,12 +33,15 @@ struct TestingSetup {\n         bool fFirstRun;\n         pwalletMain = new CWallet(\"wallet.dat\");\n         pwalletMain->LoadWallet(fFirstRun);\n+        pWalletMap = new CWalletMap();\n+        pWalletMap->wallets[\"default\"] = pwalletMain;\n         RegisterWallet(pwalletMain);\n     }\n     ~TestingSetup()\n     {\n-        delete pwalletMain;\n+        delete pWalletMap;\n         pwalletMain = NULL;\n+        pWalletMap = NULL;\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;"
      }
    ]
  },
  {
    "sha": "158ce39274ab7736b50d2f4566420f9443b38914",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNThjZTM5Mjc0YWI3NzM2YjUwZDJmNDU2NjQyMGY5NDQzYjM4OTE0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T01:43:58Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T12:13:56Z"
      },
      "message": "Fixed RPC issues detected by test suite.",
      "tree": {
        "sha": "41f2e866fbbe5fb1d5a299a6928c45a07e3dc806",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41f2e866fbbe5fb1d5a299a6928c45a07e3dc806"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/158ce39274ab7736b50d2f4566420f9443b38914",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158ce39274ab7736b50d2f4566420f9443b38914",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/158ce39274ab7736b50d2f4566420f9443b38914",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158ce39274ab7736b50d2f4566420f9443b38914/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a6b0e290bd9b78ccb010fc8f224550ab4738a3f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5b631a768226ec21cf625c69c4e2ccdbb2e94c91",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/158ce39274ab7736b50d2f4566420f9443b38914/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/158ce39274ab7736b50d2f4566420f9443b38914/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=158ce39274ab7736b50d2f4566420f9443b38914",
        "patch": "@@ -28,7 +28,7 @@ std::string HelpRequiringPassphrase(CWallet* pWallet)\n \n void EnsureWalletIsUnlocked(CWallet* pWallet)\n {\n-    if (pWallet || pWallet->IsLocked())\n+    if (pWallet && pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n "
      }
    ]
  },
  {
    "sha": "1b640c143f8d4624e210f8d9fa07cf0dd963f791",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjY0MGMxNDNmOGQ0NjI0ZTIxMGY4ZDlmYTA3Y2YwZGQ5NjNmNzkx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T03:36:08Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T12:13:56Z"
      },
      "message": "Added loading of wallet names and files from -usewallet arguments\n=================================================================\n\nYou can now specify additional wallets in the config file or via command line arguments:\n\n\tusewallet=foo\n\nor\n\n\tbitcoind -usewallet=foo\n\nA default wallet called \"default\" in the RPC and using file \"wallet.dat\" is always loaded, as to not break compatibility with the master branch. Therefore, additional wallets should neither be called \"default\" nor \"wallet\" nor anything else that might conflict with other filenames in the .bitcoin directory.\n\nThe wallet will be stored in a file called foo.dat. If the wallet doesn't yet exist, it will be created the first time bitcoind is run.\n\nTODO: Ensure filename collisions cannot occur. Perhaps allow the wallet files to be arbitrarily named rather than tied to their identifier.",
      "tree": {
        "sha": "6a1327dffc3837a407cbef447cf5286efdb230e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a1327dffc3837a407cbef447cf5286efdb230e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b640c143f8d4624e210f8d9fa07cf0dd963f791",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b640c143f8d4624e210f8d9fa07cf0dd963f791",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b640c143f8d4624e210f8d9fa07cf0dd963f791",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b640c143f8d4624e210f8d9fa07cf0dd963f791/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "158ce39274ab7736b50d2f4566420f9443b38914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158ce39274ab7736b50d2f4566420f9443b38914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/158ce39274ab7736b50d2f4566420f9443b38914"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8237401fd13730be448a5237ab68e52d94cf1e99",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b640c143f8d4624e210f8d9fa07cf0dd963f791/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b640c143f8d4624e210f8d9fa07cf0dd963f791/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b640c143f8d4624e210f8d9fa07cf0dd963f791",
        "patch": "@@ -619,7 +619,7 @@ bool AppInit2()\n         if (nTransactionFee > 0.25 * COIN)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n     }\n-\n+    \n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();\n@@ -884,15 +884,18 @@ bool AppInit2()\n \n     // ********************************************************* Step 8: load wallets\n \n+    // Get wallet names\n+    typedef map<string, string> string_map;\n+    string_map mapWalletFiles;\n+    mapWalletFiles[\"default\"] = \"wallet.dat\";\n+    BOOST_FOREACH(const string& strWalletName, mapMultiArgs[\"-usewallet\"])\n+        mapWalletFiles[strWalletName] = strWalletName + \".dat\";    \n+    \n     // TODO: Encapsulate wallet better\n     uiInterface.InitMessage(_(\"Loading wallets...\"));\n     printf(\"Loading wallets...\\n\");\n     nStart = GetTimeMillis();\n-    // TODO: Load wallet names and file names from config file.\n-    typedef map<string, string> string_map;\n-    string_map mapWalletFiles;\n-    mapWalletFiles[\"default\"] = \"wallet.dat\";\n-    mapWalletFiles[\"custom\"] = \"wallet2.dat\";\n+        \n     // TODO: Make the wallet loads more tolerant. Load all wallets possible.\n     pWalletMap = new CWalletMap();\n     BOOST_FOREACH(const string_map::value_type& mapWalletFile, mapWalletFiles)"
      }
    ]
  },
  {
    "sha": "1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2RmMThiODViM2JjOGUxZDE3OTAzMzIxMzEyZWJmZGZlNTRkNjAx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T05:27:14Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T12:26:16Z"
      },
      "message": "TxMemPool::accept() calls SyncWithWallets(), so all mempool transactions are synched automatically without having to call SyncWithWallets() explicitly. This is important when sending between two wallets in a single bitcoind instance so that the receiving wallet is alerted of the transaction immediately.\n\nRemoved calls to SyncWithWallets() in ProcessMessage() since SyncWithWallets() is already called by tx.AcceptToMemoryPool().\n\nSyncWithWallets() is still called explicitly from CBlock::ConnectBlock() since the transaction never goes through the mempool in this case.",
      "tree": {
        "sha": "98c9b4608fbb0de172fcf67257c6aebf8c60e68f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98c9b4608fbb0de172fcf67257c6aebf8c60e68f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cdf18b85b3bc8e1d17903321312ebfdfe54d601/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b640c143f8d4624e210f8d9fa07cf0dd963f791",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b640c143f8d4624e210f8d9fa07cf0dd963f791",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b640c143f8d4624e210f8d9fa07cf0dd963f791"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "eb6a44edd6c4da2b2842cc58452bc2f262dece4e",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cdf18b85b3bc8e1d17903321312ebfdfe54d601/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cdf18b85b3bc8e1d17903321312ebfdfe54d601/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
        "patch": "@@ -136,7 +136,6 @@ string CRPCTable::help(string strCommand) const\n             continue;\n         if (strCommand != \"\" && strMethod != strCommand)\n             continue;\n-        \n         try\n         {\n             Array params;"
      },
      {
        "sha": "19c05f9625504b11d6ba9fed769a1ecf86c64a4c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cdf18b85b3bc8e1d17903321312ebfdfe54d601/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cdf18b85b3bc8e1d17903321312ebfdfe54d601/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
        "patch": "@@ -805,6 +805,9 @@ bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs,\n     printf(\"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n            hash.ToString().substr(0,10).c_str(),\n            mapTx.size());\n+    \n+    SyncWithWallets(hash, tx, NULL, true);\n+    \n     return true;\n }\n \n@@ -3156,7 +3159,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         bool fMissingInputs = false;\n         if (tx.AcceptToMemoryPool(true, &fMissingInputs))\n         {\n-            SyncWithWallets(inv.hash, tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n@@ -3179,7 +3181,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     if (tx.AcceptToMemoryPool(true, &fMissingInputs2))\n                     {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n-                        SyncWithWallets(inv.hash, tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);"
      }
    ]
  },
  {
    "sha": "27fa196cb890cfd2f2206fe8940db80ea394d523",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2ZhMTk2Y2I4OTBjZmQyZjIyMDZmZTg5NDBkYjgwZWEzOTRkNTIz",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T15:55:26Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T16:01:02Z"
      },
      "message": "Modified getinfo RPC call to return an array of wallets",
      "tree": {
        "sha": "de62c4f5466434dcb6b6d15b8e5c2d9c8c55ad32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de62c4f5466434dcb6b6d15b8e5c2d9c8c55ad32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27fa196cb890cfd2f2206fe8940db80ea394d523",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fa196cb890cfd2f2206fe8940db80ea394d523",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27fa196cb890cfd2f2206fe8940db80ea394d523",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fa196cb890cfd2f2206fe8940db80ea394d523/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cdf18b85b3bc8e1d17903321312ebfdfe54d601",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cdf18b85b3bc8e1d17903321312ebfdfe54d601"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "beeec85809bdf32249cdb33d9bb49ca651df1419",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27fa196cb890cfd2f2206fe8940db80ea394d523/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27fa196cb890cfd2f2206fe8940db80ea394d523/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=27fa196cb890cfd2f2206fe8940db80ea394d523",
        "patch": "@@ -69,23 +69,34 @@ Value getinfo(CWallet* pWallet, const Array& params, bool fHelp)\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n-    // TODO: List each wallet\n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n-    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pWallet->GetBalance())));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n-    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pWallet->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\",   pWallet->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-    if (pWallet->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n+    \n+    // List wallets\n+    Array arrayWallets;\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+    {\n+        Object objWallet;\n+        objWallet.push_back(Pair(\"name\",          item.first));\n+        objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n+        objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n+        objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));\n+        objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n+        if (item.second->IsCrypted())\n+            objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n+        \n+        arrayWallets.push_back(objWallet);\n+    }\n+    \n+    obj.push_back(Pair(\"wallets\", arrayWallets));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "93e6b809eba836ac28eba107284560e6b26b954e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2U2YjgwOWViYTgzNmFjMjhlYmExMDcyODQ1NjBlNmIyNmI5NTRl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T16:16:14Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T16:16:14Z"
      },
      "message": "Removed dependency on wallet encryption state for getting help on RPC methods. Help always returns usage info now.",
      "tree": {
        "sha": "f7ffb8442a9fa1111134fbe4b25da8a6a87c430a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7ffb8442a9fa1111134fbe4b25da8a6a87c430a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93e6b809eba836ac28eba107284560e6b26b954e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e6b809eba836ac28eba107284560e6b26b954e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93e6b809eba836ac28eba107284560e6b26b954e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e6b809eba836ac28eba107284560e6b26b954e/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27fa196cb890cfd2f2206fe8940db80ea394d523",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fa196cb890cfd2f2206fe8940db80ea394d523",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27fa196cb890cfd2f2206fe8940db80ea394d523"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "755696603828ecbeebe8ffd4699455302eef5aef",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e6b809eba836ac28eba107284560e6b26b954e/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e6b809eba836ac28eba107284560e6b26b954e/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=93e6b809eba836ac28eba107284560e6b26b954e",
        "patch": "@@ -1336,12 +1336,10 @@ void ThreadCleanWalletPassphrase(void* parg)\n \n Value walletpassphrase(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if ((!pWallet || pWallet->IsCrypted()) && (fHelp || params.size() != 2))\n+    if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n-    if (fHelp)\n-        return true;\n     if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n@@ -1376,12 +1374,10 @@ Value walletpassphrase(CWallet* pWallet, const Array& params, bool fHelp)\n \n Value walletpassphrasechange(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if ((!pWallet || pWallet->IsCrypted()) && (fHelp || params.size() != 2))\n+    if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n-    if (fHelp)\n-        return true;\n     if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n@@ -1409,14 +1405,12 @@ Value walletpassphrasechange(CWallet* pWallet, const Array& params, bool fHelp)\n \n Value walletlock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if ((!pWallet || pWallet->IsCrypted()) && (fHelp || params.size() != 0))\n+    if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"Removes the wallet encryption key from memory, locking the wallet.\\n\"\n             \"After calling this method, you will need to call walletpassphrase again\\n\"\n             \"before being able to call any methods which require the wallet to be unlocked.\");\n-    if (fHelp)\n-        return true;\n     if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n@@ -1432,12 +1426,10 @@ Value walletlock(CWallet* pWallet, const Array& params, bool fHelp)\n \n Value encryptwallet(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if ((!pWallet || !pWallet->IsCrypted()) && (fHelp || params.size() != 1))\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n-    if (fHelp)\n-        return true;\n     if (pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n "
      }
    ]
  },
  {
    "sha": "0f815bf90941e38122af5b4da2095b01b776ce27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjgxNWJmOTA5NDFlMzgxMjJhZjViNGRhMjA5NWIwMWI3NzZjZTI3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T16:31:43Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-24T16:46:03Z"
      },
      "message": "usewallet now checks whether method is valid.",
      "tree": {
        "sha": "8131c5e62b505b3698d1cd47b4bc26d9583c6b2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8131c5e62b505b3698d1cd47b4bc26d9583c6b2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f815bf90941e38122af5b4da2095b01b776ce27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f815bf90941e38122af5b4da2095b01b776ce27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f815bf90941e38122af5b4da2095b01b776ce27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f815bf90941e38122af5b4da2095b01b776ce27/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e6b809eba836ac28eba107284560e6b26b954e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e6b809eba836ac28eba107284560e6b26b954e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e6b809eba836ac28eba107284560e6b26b954e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7e2d32a12858bf2e0871fd87f896e4e9b1f762df",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f815bf90941e38122af5b4da2095b01b776ce27/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f815bf90941e38122af5b4da2095b01b776ce27/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=0f815bf90941e38122af5b4da2095b01b776ce27",
        "patch": "@@ -205,7 +205,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getgenerate\",            &getgenerate,            true,   false,    false },\n     { \"setgenerate\",            &setgenerate,            true,   false,    false },\n     { \"gethashespersec\",        &gethashespersec,        true,   false,    false },\n-    { \"getinfo\",                &getinfo,                true,   false,    true  },\n+    { \"getinfo\",                &getinfo,                true,   false,    false },\n     { \"getmininginfo\",          &getmininginfo,          true,   false,    false },\n     { \"getnewaddress\",          &getnewaddress,          true,   false,    true  },\n     { \"getaccountaddress\",      &getaccountaddress,      true,   false,    true  },\n@@ -238,8 +238,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,  false,    true  },\n     { \"signmessage\",            &signmessage,            false,  false,    true  },\n     { \"verifymessage\",          &verifymessage,          false,  false,    false },\n-    { \"getwork\",                &getwork,                true,   false,    true  },\n-    { \"listaccounts\",           &listaccounts,           false,  false,    false },\n+    { \"getwork\",                &getwork,                true,   false,    false },\n+    { \"listaccounts\",           &listaccounts,           false,  false,    true  },\n     { \"settxfee\",               &settxfee,               false,  false,    false },\n     { \"getblocktemplate\",       &getblocktemplate,       true,   false,    false },\n     { \"submitblock\",            &submitblock,            false,  false,    false },\n@@ -253,7 +253,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"signrawtransaction\",     &signrawtransaction,     false,  false,    true  },\n     { \"sendrawtransaction\",     &sendrawtransaction,     false,  false,    false },\n     { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,   false,    false },\n-    { \"gettxout\",               &gettxout,               true,   false,    false },\n+    { \"gettxout\",               &gettxout,               true,   false,    true  },\n     { \"lockunspent\",            &lockunspent,            false,  false,    true  },\n     { \"listlockunspent\",        &listlockunspent,        false,  false,    true  },\n     { \"listwallets\",            &listwallets,            true,   true,     false },"
      },
      {
        "sha": "f8cd877774460025858bf33a5c83868c3ac85717",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f815bf90941e38122af5b4da2095b01b776ce27/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f815bf90941e38122af5b4da2095b01b776ce27/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0f815bf90941e38122af5b4da2095b01b776ce27",
        "patch": "@@ -1619,9 +1619,16 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     string strWalletName = params[0].get_str();\n     wallet_map::iterator it = pWalletMap->wallets.find(strWalletName);\n     if (it == pWalletMap->wallets.end())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, wallet not found.\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Wallet \") + strWalletName + \" not found.\");\n     \n     string strMethod = params[1].get_str();\n+    const CRPCCommand *pcmd = tableRPC[strMethod];\n+    if (!pcmd)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, string(\"Method \") + strMethod + \" not found.\");\n+    \n+    if (!pcmd->isWalletFn)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Method \") + strMethod + \" is not a wallet method.\");\n+    \n     vector<string> vstrParams;\n     for (unsigned int i = 2; i < params.size(); i++)\n         vstrParams.push_back(params[i].get_str());"
      }
    ]
  },
  {
    "sha": "924f088620a59663c41d4da6f6d4577391ea5149",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjRmMDg4NjIwYTU5NjYzYzQxZDRkYTZmNmQ0NTc3MzkxZWE1MTQ5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-25T18:17:21Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-25T18:17:21Z"
      },
      "message": "Fixed LOCK to lock appropriate wallet.",
      "tree": {
        "sha": "f008c181e14959f786655598f88b0a0115e56e71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f008c181e14959f786655598f88b0a0115e56e71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/924f088620a59663c41d4da6f6d4577391ea5149",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924f088620a59663c41d4da6f6d4577391ea5149",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/924f088620a59663c41d4da6f6d4577391ea5149",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924f088620a59663c41d4da6f6d4577391ea5149/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f815bf90941e38122af5b4da2095b01b776ce27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f815bf90941e38122af5b4da2095b01b776ce27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f815bf90941e38122af5b4da2095b01b776ce27"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "00f887978c81e5a27d3a6ef847fbbec8e70c18df",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/924f088620a59663c41d4da6f6d4577391ea5149/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/924f088620a59663c41d4da6f6d4577391ea5149/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=924f088620a59663c41d4da6f6d4577391ea5149",
        "patch": "@@ -1078,7 +1078,7 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n                 result = pcmd->actor(pWallet, params, false);\n             }\n             else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n+                LOCK2(cs_main, pWallet->cs_wallet);\n                 result = pcmd->actor(pWallet, params, false);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "fa1c80863dcff5d731ef007444e4d0c595611179",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFjODA4NjNkY2ZmNWQ3MzFlZjAwNzQ0NGU0ZDBjNTk1NjExMTc5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-25T19:27:59Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-25T19:31:37Z"
      },
      "message": "Fixed wallet load time indicator.",
      "tree": {
        "sha": "9b7cc068ba0306db23edfe3dc06446f1f05cd3ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b7cc068ba0306db23edfe3dc06446f1f05cd3ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1c80863dcff5d731ef007444e4d0c595611179",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1c80863dcff5d731ef007444e4d0c595611179",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1c80863dcff5d731ef007444e4d0c595611179",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1c80863dcff5d731ef007444e4d0c595611179/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "924f088620a59663c41d4da6f6d4577391ea5149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924f088620a59663c41d4da6f6d4577391ea5149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/924f088620a59663c41d4da6f6d4577391ea5149"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a668e669f325864acde80c7ae86ba0a8d6514a16",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1c80863dcff5d731ef007444e4d0c595611179/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1c80863dcff5d731ef007444e4d0c595611179/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa1c80863dcff5d731ef007444e4d0c595611179",
        "patch": "@@ -393,9 +393,10 @@ void ThreadImport(void *data) {\n     vnThreadsRunning[THREAD_IMPORT]--;\n }\n \n-bool LoadWallet(const string& strName, const string& strFile, std::ostringstream& strErrors, int64 nStart)\n+bool LoadWallet(const string& strName, const string& strFile, std::ostringstream& strErrors)\n {\n     printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n+    int64 nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     CWallet* pwallet = new CWallet(strFile);\n     pWalletMap->wallets[strName] = pwallet;\n@@ -883,23 +884,22 @@ bool AppInit2()\n     }\n \n     // ********************************************************* Step 8: load wallets\n-\n+    \n+    // TODO: Encapsulate wallet better\n+    uiInterface.InitMessage(_(\"Loading wallets...\"));\n+    printf(\"Loading wallets...\\n\");\n+        \n     // Get wallet names\n     typedef map<string, string> string_map;\n     string_map mapWalletFiles;\n     mapWalletFiles[\"default\"] = \"wallet.dat\";\n     BOOST_FOREACH(const string& strWalletName, mapMultiArgs[\"-usewallet\"])\n         mapWalletFiles[strWalletName] = strWalletName + \".dat\";    \n-    \n-    // TODO: Encapsulate wallet better\n-    uiInterface.InitMessage(_(\"Loading wallets...\"));\n-    printf(\"Loading wallets...\\n\");\n-    nStart = GetTimeMillis();\n-        \n+\n     // TODO: Make the wallet loads more tolerant. Load all wallets possible.\n     pWalletMap = new CWalletMap();\n     BOOST_FOREACH(const string_map::value_type& mapWalletFile, mapWalletFiles)\n-    if (!LoadWallet(mapWalletFile.first, mapWalletFile.second, strErrors, nStart))\n+    if (!LoadWallet(mapWalletFile.first, mapWalletFile.second, strErrors))\n         return false;\n     \n     // ********************************************************* Step 9: import blocks"
      }
    ]
  },
  {
    "sha": "b0cae8787181dd0378b107609d9f39faf29e5706",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGNhZTg3ODcxODFkZDAzNzhiMTA3NjA5ZDlmMzlmYWYyOWU1NzA2",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-26T03:36:03Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-26T03:36:03Z"
      },
      "message": "Moved wallet detail information out of getinfo and put it in listwallets. getinfo now just shows how many wallets are loaded.",
      "tree": {
        "sha": "149cc252ce53296018512e3e2eabd040f3527774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/149cc252ce53296018512e3e2eabd040f3527774"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0cae8787181dd0378b107609d9f39faf29e5706",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0cae8787181dd0378b107609d9f39faf29e5706",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0cae8787181dd0378b107609d9f39faf29e5706",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0cae8787181dd0378b107609d9f39faf29e5706/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1c80863dcff5d731ef007444e4d0c595611179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1c80863dcff5d731ef007444e4d0c595611179",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1c80863dcff5d731ef007444e4d0c595611179"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 15,
      "deletions": 22
    },
    "files": [
      {
        "sha": "e12ba93bc8a444632fe28c2af09e176235e2aa07",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 22,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0cae8787181dd0378b107609d9f39faf29e5706/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0cae8787181dd0378b107609d9f39faf29e5706/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=b0cae8787181dd0378b107609d9f39faf29e5706",
        "patch": "@@ -74,29 +74,13 @@ Value getinfo(CWallet* pWallet, const Array& params, bool fHelp)\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n+    obj.push_back(Pair(\"wallets\",       (int)pWalletMap->wallets.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n-    \n-    // List wallets\n-    Array arrayWallets;\n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n-    {\n-        Object objWallet;\n-        objWallet.push_back(Pair(\"name\",          item.first));\n-        objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n-        objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n-        objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));\n-        objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n-        if (item.second->IsCrypted())\n-            objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n-        \n-        arrayWallets.push_back(objWallet);\n-    }\n-    \n-    obj.push_back(Pair(\"wallets\", arrayWallets));\n+\n     return obj;\n }\n \n@@ -1601,12 +1585,21 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n             \"listwallets\\n\"\n             \"Returns list of wallets.\");\n     \n-    Array ret;\n-    \n+    Array arrayWallets;\n     BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n-        ret.push_back(item.first);\n+    {\n+        Object objWallet;\n+        objWallet.push_back(Pair(\"name\",          item.first));\n+        objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n+        if (item.second->IsCrypted())\n+            objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));        \n+        objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n+        objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n+        objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));\n+        arrayWallets.push_back(objWallet);\n+    }\n     \n-    return ret;\n+    return arrayWallets;\n }\n \n Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "2b31fdfef9fc0b09b94efffc0468675db36afb97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjMxZmRmZWY5ZmMwYjA5Yjk0ZWZmZmMwNDY4Njc1ZGIzNmFmYjk3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-26T06:38:11Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-26T07:15:41Z"
      },
      "message": "Moved code for locking a wallet automatically at a certain time from rpcwallet.cpp into CCryptoKeyStore class.\n\nTODO:\n  Encapsulate the thread spawning and make the call nonblocking.\n  Give each thread a unique name.",
      "tree": {
        "sha": "2048afc6877c44604871df31afa3e65f23b56f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2048afc6877c44604871df31afa3e65f23b56f87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b31fdfef9fc0b09b94efffc0468675db36afb97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b31fdfef9fc0b09b94efffc0468675db36afb97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b31fdfef9fc0b09b94efffc0468675db36afb97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b31fdfef9fc0b09b94efffc0468675db36afb97/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0cae8787181dd0378b107609d9f39faf29e5706",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0cae8787181dd0378b107609d9f39faf29e5706",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0cae8787181dd0378b107609d9f39faf29e5706"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 51,
      "deletions": 46
    },
    "files": [
      {
        "sha": "9ba559454de9df44ed8e4f9c7751a2e4f090b784",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b31fdfef9fc0b09b94efffc0468675db36afb97/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b31fdfef9fc0b09b94efffc0468675db36afb97/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=2b31fdfef9fc0b09b94efffc0468675db36afb97",
        "patch": "@@ -84,9 +84,48 @@ bool CCryptoKeyStore::Lock()\n     }\n \n     NotifyStatusChanged(this);\n+    nLockTime = 0;\n+        \n     return true;\n }\n \n+void CCryptoKeyStore::SleepThenLock(int64 nMyWakeTime)\n+{\n+    ENTER_CRITICAL_SECTION(cs_nLockTime);\n+    \n+    if (nLockTime == 0)\n+    {\n+        nLockTime = nMyWakeTime;\n+        \n+        do\n+        {\n+            if (nLockTime == 0)\n+                break;\n+            int64 nToSleep = nLockTime - GetTimeMillis();\n+            if (nToSleep <= 0)\n+                break;\n+            \n+            LEAVE_CRITICAL_SECTION(cs_nLockTime);\n+            Sleep(nToSleep);\n+            ENTER_CRITICAL_SECTION(cs_nLockTime);\n+            \n+        } while(1);\n+        \n+        if (nLockTime)\n+        {\n+            nLockTime = 0;\n+            Lock();\n+        }\n+    }\n+    else\n+    {\n+        if (nLockTime < nMyWakeTime)\n+            nLockTime = nMyWakeTime;\n+    }\n+    \n+    LEAVE_CRITICAL_SECTION(cs_nLockTime);\n+}\n+\n bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n {\n     {"
      },
      {
        "sha": "1b6bf82db220611766651dac4b56170a638014e3",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b31fdfef9fc0b09b94efffc0468675db36afb97/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b31fdfef9fc0b09b94efffc0468675db36afb97/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=2b31fdfef9fc0b09b94efffc0468675db36afb97",
        "patch": "@@ -114,6 +114,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool fUseCrypto;\n \n protected:\n+    mutable CCriticalSection cs_nLockTime;\n+    int64 nLockTime; \n+    \n     bool SetCrypted();\n \n     // will encrypt previously unencrypted keys\n@@ -122,7 +125,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n \n public:\n-    CCryptoKeyStore() : fUseCrypto(false)\n+    CCryptoKeyStore() : fUseCrypto(false), nLockTime(0)\n     {\n     }\n \n@@ -144,6 +147,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n     }\n \n     bool Lock();\n+    void SleepThenLock(int64 nMyWakeTime);\n+    int64 GetLockTime() const { return nLockTime; }\n+    CCriticalSection& GetLockTimeCriticalSection() { return cs_nLockTime; }\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKey(const CKey& key);"
      },
      {
        "sha": "e2f204940e784f76b5c04467127dcbdeee716229",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 45,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b31fdfef9fc0b09b94efffc0468675db36afb97/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b31fdfef9fc0b09b94efffc0468675db36afb97/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=2b31fdfef9fc0b09b94efffc0468675db36afb97",
        "patch": "@@ -16,9 +16,6 @@ using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n \n-int64 nWalletUnlockTime;\n-static CCriticalSection cs_nWalletUnlockTime;\n-\n std::string HelpRequiringPassphrase(CWallet* pWallet)\n {\n     return (pWallet && pWallet->IsCrypted())\n@@ -1275,44 +1272,11 @@ struct CleanWalletPassphraseParams\n void ThreadCleanWalletPassphrase(void* parg)\n {\n     // Make this thread recognisable as the wallet relocking thread\n+    // TODO: Give threads for different wallets distinct names.\n     RenameThread(\"bitcoin-lock-wa\");\n-\n+    \n     CleanWalletPassphraseParams* pParams = (CleanWalletPassphraseParams*)parg;\n-    int64 nMyWakeTime = GetTimeMillis() + *(pParams->pnSleepTime) * 1000;\n-\n-    ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-    if (nWalletUnlockTime == 0)\n-    {\n-        nWalletUnlockTime = nMyWakeTime;\n-\n-        do\n-        {\n-            if (nWalletUnlockTime==0)\n-                break;\n-            int64 nToSleep = nWalletUnlockTime - GetTimeMillis();\n-            if (nToSleep <= 0)\n-                break;\n-\n-            LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-            Sleep(nToSleep);\n-            ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-        } while(1);\n-\n-        if (nWalletUnlockTime)\n-        {\n-            nWalletUnlockTime = 0;\n-            pParams->pWallet->Lock();\n-        }\n-    }\n-    else\n-    {\n-        if (nWalletUnlockTime < nMyWakeTime)\n-            nWalletUnlockTime = nMyWakeTime;\n-    }\n-\n-    LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n+    pParams->pWallet->SleepThenLock(GetTimeMillis() + *(pParams->pnSleepTime) * 1000);\n \n     delete pParams->pnSleepTime;\n     delete pParams;\n@@ -1398,11 +1362,7 @@ Value walletlock(CWallet* pWallet, const Array& params, bool fHelp)\n     if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n-    {\n-        LOCK(cs_nWalletUnlockTime);\n-        pWallet->Lock();\n-        nWalletUnlockTime = 0;\n-    }\n+    pWallet->Lock();\n \n     return Value::null;\n }\n@@ -1592,7 +1552,7 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n         objWallet.push_back(Pair(\"name\",          item.first));\n         objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n         if (item.second->IsCrypted())\n-            objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));        \n+            objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)item.second->GetLockTime() / 1000));        \n         objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n         objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n         objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));"
      }
    ]
  },
  {
    "sha": "1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjUxYTdmN2JkMWM0NjRmOWMzYTkwNjM4MzcyZGQ5ZjIzNTZmMDAz",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T04:50:46Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T08:04:51Z"
      },
      "message": "Dynamic loading and unloading of wallets.\n\nNew Changes:\n  - Moved LoadWallet out of init.cpp and into CWalletMap class.\n  - Added new RPC methods: loadwallet and unloadwallet.\n\nTODO:\n  - Clean up I/O in CWalletMap::LoadWallet - debug, error, and UI output functions.\n  - Make sure wallet loading and unloading are thread-safe.\n  - Save wallets to bitcoin.conf automatically.",
      "tree": {
        "sha": "cc110a806a22fbb6576926b0492d6f32a428eeee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc110a806a22fbb6576926b0492d6f32a428eeee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b31fdfef9fc0b09b94efffc0468675db36afb97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b31fdfef9fc0b09b94efffc0468675db36afb97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b31fdfef9fc0b09b94efffc0468675db36afb97"
      }
    ],
    "stats": {
      "total": 282,
      "additions": 188,
      "deletions": 94
    },
    "files": [
      {
        "sha": "4226ecca500ac5f825fe3e1dffb36fac09e6532e",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "patch": "@@ -257,7 +257,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,  false,    true  },\n     { \"listlockunspent\",        &listlockunspent,        false,  false,    true  },\n     { \"listwallets\",            &listwallets,            true,   true,     false },\n-    { \"usewallet\",              &usewallet,              true,   true,     false }\n+    { \"usewallet\",              &usewallet,              false,  true,     false },\n+    { \"loadwallet\",             &loadwallet,             false,  true,     false },\n+    { \"unloadwallet\",           &unloadwallet,           false,  true,     false }\n };\n \n CRPCTable::CRPCTable()\n@@ -1225,6 +1227,9 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"loadwallet\"             && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"loadwallet\"             && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"loadwallet\"             && n > 3) ConvertTo<boost::int64_t>(params[3]);\n \n     return params;\n }"
      },
      {
        "sha": "3a808cf24213c10cf7a588326ddef370e9ec5bc6",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "patch": "@@ -172,6 +172,8 @@ extern json_spirit::Value backupwallet(CWallet* pWallet, const json_spirit::Arra\n extern json_spirit::Value keypoolrefill(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listwallets(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value usewallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value loadwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value unloadwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value walletpassphrase(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value walletpassphrasechange(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value walletlock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "836eb435b3fa40507120bf3de699f47da934c644",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 91,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "patch": "@@ -393,95 +393,6 @@ void ThreadImport(void *data) {\n     vnThreadsRunning[THREAD_IMPORT]--;\n }\n \n-bool LoadWallet(const string& strName, const string& strFile, std::ostringstream& strErrors)\n-{\n-    printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n-    int64 nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    CWallet* pwallet = new CWallet(strFile);\n-    pWalletMap->wallets[strName] = pwallet;\n-    // TODO: get rid of pwalletMain\n-    if (strName == \"default\") pwalletMain = pwallet;\n-    DBErrors nLoadWalletRet = pwallet->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-    {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-        {\n-            string msg(_(\"Warning: error reading \"));\n-            msg += strFile + _(\"! All keys read correctly, but transaction data\"\n-                               \" or address book entries might be missing or incorrect.\");\n-            InitWarning(msg);\n-        }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n-        {\n-            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n-            printf(\"%s\", strErrors.str().c_str());\n-            return InitError(strErrors.str());\n-        }\n-        else\n-            strErrors << _(\"Error loading \") << strFile << \"\\n\";\n-    }\n-    \n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            pwallet->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < pwallet->GetVersion())\n-            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-        pwallet->SetMaxVersion(nMaxVersion);\n-    }\n-    \n-    if (fFirstRun)\n-    {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-        \n-        CPubKey newDefaultKey;\n-        if (!pwallet->GetKeyFromPool(newDefaultKey, false))\n-            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n-        pwallet->SetDefaultKey(newDefaultKey);\n-        if (!pwallet->SetAddressBookName(pwallet->vchDefaultKey.GetID(), \"\"))\n-            strErrors << _(\"Cannot write default address\") << \"\\n\";\n-    }\n-    \n-    printf(\"%s\", strErrors.str().c_str());\n-    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-    \n-    RegisterWallet(pwallet);\n-    \n-    CBlockIndex *pindexRescan = pindexBest;\n-    if (GetBoolArg(\"-rescan\"))\n-        pindexRescan = pindexGenesisBlock;\n-    else\n-    {\n-        CWalletDB walletdb(strFile);\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = locator.GetBlockIndex();\n-    }\n-    if (pindexBest && pindexBest != pindexRescan)\n-    {\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        pwallet->ScanForWalletTransactions(pindexRescan, true);\n-        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-    }\n-\n-    return true;\n-}\n-\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -885,7 +796,6 @@ bool AppInit2()\n \n     // ********************************************************* Step 8: load wallets\n     \n-    // TODO: Encapsulate wallet better\n     uiInterface.InitMessage(_(\"Loading wallets...\"));\n     printf(\"Loading wallets...\\n\");\n         \n@@ -896,12 +806,20 @@ bool AppInit2()\n     BOOST_FOREACH(const string& strWalletName, mapMultiArgs[\"-usewallet\"])\n         mapWalletFiles[strWalletName] = strWalletName + \".dat\";    \n \n+    // Get parameters\n+    bool fRescan = GetBoolArg(\"-rescan\");\n+    bool fUpgrade = GetBoolArg(\"-upgradewallet\");\n+    int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+    \n     // TODO: Make the wallet loads more tolerant. Load all wallets possible.\n+    // TODO: Clean up I/O\n     pWalletMap = new CWalletMap();\n     BOOST_FOREACH(const string_map::value_type& mapWalletFile, mapWalletFiles)\n-    if (!LoadWallet(mapWalletFile.first, mapWalletFile.second, strErrors))\n+    if (!pWalletMap->LoadWallet(mapWalletFile.first, mapWalletFile.second, strErrors, fRescan, fUpgrade, nMaxVersion))\n         return false;\n     \n+    pwalletMain = pWalletMap->GetWallet(\"default\");\n+    \n     // ********************************************************* Step 9: import blocks\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain"
      },
      {
        "sha": "6b3c83f73900fa479dcdaebc4d9d6ecd060714db",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 2,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "patch": "@@ -1572,7 +1572,7 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     string strWalletName = params[0].get_str();\n     wallet_map::iterator it = pWalletMap->wallets.find(strWalletName);\n     if (it == pWalletMap->wallets.end())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Wallet \") + strWalletName + \" not found.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not found.\");\n     \n     string strMethod = params[1].get_str();\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n@@ -1587,4 +1587,51 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n         vstrParams.push_back(params[i].get_str());\n \n     return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), it->second);\n-}\n\\ No newline at end of file\n+}\n+\n+Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"loadwallet <walletname> [rescan=false] [upgradewallet=false] [maxversion=(latest)]\\n\"\n+            \"Loads a wallet.\");\n+    \n+    string strWalletName = params[0].get_str();\n+    \n+    if (pWalletMap->GetWallet(strWalletName))\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" is already loaded.\");\n+    \n+    string strWalletFile = strWalletName + \".dat\";\n+    ostringstream strErrors;\n+    bool fRescan = (params.size() > 1) ? params[1].get_bool() : false;\n+    bool fUpgrade = (params.size() > 2) ? params[2].get_bool() : false;\n+    int nMaxVersion = (params.size() > 3) ? params[3].get_int() : 0;\n+    \n+    if (!pWalletMap->LoadWallet(strWalletName, strWalletFile, strErrors, fRescan, fUpgrade, nMaxVersion))\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Load failed: \") + strErrors.str());\n+    \n+    return string(\"Wallet \") + strWalletName + \" loaded.\";\n+}\n+\n+Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"unloadwallet <walletname>\\n\"\n+            \"Unloads a wallet.\");\n+    \n+    string strWalletName = params[0].get_str();\n+    \n+    if (strWalletName == \"default\")\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Default wallet cannot be unloaded.\");    \n+    if (!pWalletMap->UnloadWallet(strWalletName))\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n+    \n+    return string(\"Wallet \") + strWalletName + \" unloaded.\";\n+}\n+\n+\n+\n+\n+\n+"
      },
      {
        "sha": "b3d37d3bbcc26da3ae6ac6b0dc0cd0d581b96b76",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "patch": "@@ -1804,3 +1804,119 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+// TODO: Remove these functions\n+bool static InitError(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n+    return false;\n+}\n+\n+bool static InitWarning(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n+    return true;\n+}\n+\n+// TODO: Remove dependencies for I/O on printf to debug.log, InitError, and InitWarning\n+bool CWalletMap::LoadWallet(const string& strName, const string& strFile, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n+{\n+    printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n+    int64 nStart = GetTimeMillis();\n+    bool fFirstRun = true;\n+    CWallet* pWallet = new CWallet(strFile);\n+    this->wallets[strName] = pWallet;\n+    DBErrors nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT)\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            string msg(_(\"Warning: error reading \"));\n+            msg += strFile + _(\"! All keys read correctly, but transaction data\"\n+                               \" or address book entries might be missing or incorrect.\");\n+            InitWarning(msg);\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n+            printf(\"%s\", strErrors.str().c_str());\n+            return InitError(strErrors.str());\n+        }\n+        else\n+            strErrors << _(\"Error loading \") << strFile << \"\\n\";\n+    }\n+    \n+    if (fFirstRun || fUpgrade)\n+    {\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            pWallet->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < pWallet->GetVersion())\n+            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+        pWallet->SetMaxVersion(nMaxVersion);\n+    }\n+    \n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+        \n+        CPubKey newDefaultKey;\n+        if (!pWallet->GetKeyFromPool(newDefaultKey, false))\n+            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n+        pWallet->SetDefaultKey(newDefaultKey);\n+        if (!pWallet->SetAddressBookName(pWallet->vchDefaultKey.GetID(), \"\"))\n+            strErrors << _(\"Cannot write default address\") << \"\\n\";\n+    }\n+    \n+    printf(\"%s\", strErrors.str().c_str());\n+    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    \n+    RegisterWallet(pWallet);\n+    \n+    CBlockIndex *pindexRescan = pindexBest;\n+    if (fRescan)\n+        pindexRescan = pindexGenesisBlock;\n+    else\n+    {\n+        CWalletDB walletdb(strFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = locator.GetBlockIndex();\n+    }\n+    if (pindexBest && pindexBest != pindexRescan)\n+    {\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        pWallet->ScanForWalletTransactions(pindexRescan, true);\n+        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    }\n+    \n+    return true;\n+}\n+\n+bool CWalletMap::UnloadWallet(const std::string& strName)\n+{\n+    CWallet* pWallet = GetWallet(strName);\n+    if (!pWallet) return false;\n+    \n+    UnregisterWallet(pWallet);\n+    wallets.erase(strName);\n+    delete pWallet;\n+    return true;\n+}\n+\n+CWallet* CWalletMap::GetWallet(const string& strName)\n+{\n+    if (!wallets.count(strName)) return NULL;\n+    return wallets[strName];\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "9d98b483e1fa1367b1c7ddaf57f43ecd803b1afb",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51a7f7bd1c464f9c3a90638372dd9f2356f003/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "patch": "@@ -324,6 +324,12 @@ class CWalletMap\n         BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n             delete item.second;\n     }\n+    \n+    bool LoadWallet(const std::string& strName, const std::string& strFile, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n+    bool UnloadWallet(const std::string& strName);\n+    \n+    // Returns NULL if wallet not found.\n+    CWallet* GetWallet(const std::string& strName);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmQxMTBhNmY3NmVmMWM4ZmQxZjE4YWNjMDhiOWZiMjM5MTUyMmU3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T10:44:43Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T12:43:21Z"
      },
      "message": "New naming scheme for wallets. Checks for valid character set. CWalletMap now handles unregistration of wallets from main.\nAdded linker option to makefiles for boost_regex.",
      "tree": {
        "sha": "f63295aaa6e710fef5416978c20f92ee0bb5e5ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f63295aaa6e710fef5416978c20f92ee0bb5e5ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b51a7f7bd1c464f9c3a90638372dd9f2356f003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b51a7f7bd1c464f9c3a90638372dd9f2356f003"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 87,
      "deletions": 29
    },
    "files": [
      {
        "sha": "5422636a4ead9382c1050699e9bc9c0291408d2a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 13,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -98,7 +98,6 @@ void Shutdown(void* parg)\n         }\n         bitdb.Flush(true);\n         boost::filesystem::remove(GetPidFile());\n-        UnregisterAllWallets();\n         delete pWalletMap;\n         NewThread(ExitTimeout, NULL);\n         Sleep(50);\n@@ -798,27 +797,49 @@ bool AppInit2()\n     \n     uiInterface.InitMessage(_(\"Loading wallets...\"));\n     printf(\"Loading wallets...\\n\");\n-        \n+\n+    pWalletMap = new CWalletMap();\n+\n     // Get wallet names\n-    typedef map<string, string> string_map;\n-    string_map mapWalletFiles;\n-    mapWalletFiles[\"default\"] = \"wallet.dat\";\n+    set<string> vstrWalletNames;\n     BOOST_FOREACH(const string& strWalletName, mapMultiArgs[\"-usewallet\"])\n-        mapWalletFiles[strWalletName] = strWalletName + \".dat\";    \n+    {\n+        if (strWalletName.size() == 0) continue;\n+        if (!pWalletMap->IsValidName(strWalletName))\n+        {\n+            printf(\"Invalid wallet name: %s\\n\", strWalletName.c_str());\n+            strErrors << \"Invalid wallet name: \" << strWalletName << \"\\n\";\n+        }\n+        else\n+            vstrWalletNames.insert(strWalletName);\n+    }\n \n     // Get parameters\n     bool fRescan = GetBoolArg(\"-rescan\");\n     bool fUpgrade = GetBoolArg(\"-upgradewallet\");\n     int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-    \n-    // TODO: Make the wallet loads more tolerant. Load all wallets possible.\n-    // TODO: Clean up I/O\n-    pWalletMap = new CWalletMap();\n-    BOOST_FOREACH(const string_map::value_type& mapWalletFile, mapWalletFiles)\n-    if (!pWalletMap->LoadWallet(mapWalletFile.first, mapWalletFile.second, strErrors, fRescan, fUpgrade, nMaxVersion))\n+        \n+    // Always require a default wallet\n+    ostringstream ossErrors;\n+    if (!pWalletMap->LoadWallet(\"\", ossErrors, fRescan, fUpgrade, nMaxVersion))\n+    {\n+        printf(\"Failed to load default wallet: %s\\nExiting...\\n\", ossErrors.str().c_str());\n         return false;\n+    }\n+    \n+    // Be tolerant on nondefault wallets. Just report errors but don't die.\n+    BOOST_FOREACH(const string& strWalletName, vstrWalletNames)\n+    {\n+        ostringstream strLoadErrors;\n+        if (!pWalletMap->LoadWallet(strWalletName, strLoadErrors, fRescan, fUpgrade, nMaxVersion))\n+        {\n+            strErrors << strLoadErrors.str();\n+            printf(\"Error loading wallet %s: %s\\n\", strWalletName.c_str(), strLoadErrors.str().c_str());\n+        }\n+    }\n     \n-    pwalletMain = pWalletMap->GetWallet(\"default\");\n+    // TODO: remove dependency on a global variable named pwalletMain in the rest of the app.\n+    pwalletMain = pWalletMap->GetDefaultWallet();\n     \n     // ********************************************************* Step 9: import blocks\n "
      },
      {
        "sha": "894ed77aa1341c3648430e2f080353652a56a15e",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -25,6 +25,7 @@ LIBS= \\\n  -l boost_filesystem-mt-s \\\n  -l boost_program_options-mt-s \\\n  -l boost_thread_win32-mt-s \\\n+ -l boost_regex-mt-s \\\n  -l boost_chrono-mt-s \\\n  -l db_cxx \\\n  -l ssl \\"
      },
      {
        "sha": "810e5a43c8c6f2c4fe713b5f5e8e35c0a2b6f029",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -20,6 +20,7 @@ LIBS= \\\n  -l boost_filesystem-mgw45-mt-s-1_50 \\\n  -l boost_program_options-mgw45-mt-s-1_50 \\\n  -l boost_thread-mgw45-mt-s-1_50 \\\n+ -l boost_regex-mgw45-mt-s-1_50 \\\n  -l boost_chrono-mgw45-mt-s-1_50 \\\n  -l db_cxx \\\n  -l ssl \\"
      },
      {
        "sha": "18cb7c923373cefa90ab4c51b22b56bd32d0d58b",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -36,6 +36,7 @@ LIBS += \\\n  $(DEPSDIR)/lib/libboost_filesystem-mt.a \\\n  $(DEPSDIR)/lib/libboost_program_options-mt.a \\\n  $(DEPSDIR)/lib/libboost_thread-mt.a \\\n+ ${DEPSDIR}/lib/libboost_regex-mt.a \\\n  $(DEPSDIR)/lib/libssl.a \\\n  $(DEPSDIR)/lib/libcrypto.a \\\n  -lz\n@@ -48,6 +49,7 @@ LIBS += \\\n  -lboost_filesystem-mt \\\n  -lboost_program_options-mt \\\n  -lboost_thread-mt \\\n+ -lboost_regex-mt \\\n  -lssl \\\n  -lcrypto \\\n  -lz"
      },
      {
        "sha": "56b40d94a7d051444b5a7f60179417889672f2e2",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -32,6 +32,7 @@ LIBS += \\\n    -l boost_filesystem$(BOOST_LIB_SUFFIX) \\\n    -l boost_program_options$(BOOST_LIB_SUFFIX) \\\n    -l boost_thread$(BOOST_LIB_SUFFIX) \\\n+   -l boost_regex$(BOOST_LIB_SUFFIX) \\\n    -l db_cxx$(BDB_LIB_SUFFIX) \\\n    -l ssl \\\n    -l crypto"
      },
      {
        "sha": "9341ce9c812eb7f041ed591182ae8a89d86c16d1",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -1545,21 +1545,20 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n             \"listwallets\\n\"\n             \"Returns list of wallets.\");\n     \n-    Array arrayWallets;\n+    Object obj;\n     BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n     {\n         Object objWallet;\n-        objWallet.push_back(Pair(\"name\",          item.first));\n         objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n         if (item.second->IsCrypted())\n             objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)item.second->GetLockTime() / 1000));        \n         objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n         objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n         objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));\n-        arrayWallets.push_back(objWallet);\n+        obj.push_back(Pair(item.first, objWallet));\n     }\n     \n-    return arrayWallets;\n+    return obj;\n }\n \n Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n@@ -1601,13 +1600,12 @@ Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n     if (pWalletMap->GetWallet(strWalletName))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" is already loaded.\");\n     \n-    string strWalletFile = strWalletName + \".dat\";\n     ostringstream strErrors;\n     bool fRescan = (params.size() > 1) ? params[1].get_bool() : false;\n     bool fUpgrade = (params.size() > 2) ? params[2].get_bool() : false;\n     int nMaxVersion = (params.size() > 3) ? params[3].get_int() : 0;\n     \n-    if (!pWalletMap->LoadWallet(strWalletName, strWalletFile, strErrors, fRescan, fUpgrade, nMaxVersion))\n+    if (!pWalletMap->LoadWallet(strWalletName, strErrors, fRescan, fUpgrade, nMaxVersion))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"Load failed: \") + strErrors.str());\n     \n     return string(\"Wallet \") + strWalletName + \" loaded.\";\n@@ -1622,10 +1620,10 @@ Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n     \n     string strWalletName = params[0].get_str();\n     \n-    if (strWalletName == \"default\")\n+    if (strWalletName.size() == 0)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Default wallet cannot be unloaded.\");    \n     if (!pWalletMap->UnloadWallet(strWalletName))\n-        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"No wallet named \") + strWalletName + \" is currently loaded.\");\n     \n     return string(\"Wallet \") + strWalletName + \" unloaded.\";\n }"
      },
      {
        "sha": "853c889968ac0dc2450b9eb624fde8bfc0310017",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 2,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -1818,18 +1818,35 @@ bool static InitWarning(const std::string &str)\n }\n \n // TODO: Remove dependencies for I/O on printf to debug.log, InitError, and InitWarning\n-bool CWalletMap::LoadWallet(const string& strName, const string& strFile, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n+// TODO: Fix error handling.\n+bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n {\n+    // Check that the wallet name is valid\n+    if (!this->IsValidName(strName)) {\n+        strErrors << _(\"Wallet name may only contain letters, numbers, and underscores.\");\n+        return false;\n+    }\n+    \n+    // Wallet file name for wallet foo will be wallet-foo.dat\n+    // The empty string is reserved for the default wallet whose file is wallet.dat\n+    string strFile = \"wallet\";\n+    if (strName.size() > 0)\n+        strFile += \"-\" + strName;\n+    strFile += \".dat\";\n+    \n     printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n     int64 nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     CWallet* pWallet = new CWallet(strFile);\n-    this->wallets[strName] = pWallet;\n     DBErrors nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n+        {\n             strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n+            delete pWallet;\n+            return false;\n+        }\n         else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n         {\n             string msg(_(\"Warning: error reading \"));\n@@ -1880,6 +1897,7 @@ bool CWalletMap::LoadWallet(const string& strName, const string& strFile, ostrin\n     printf(\"%s\", strErrors.str().c_str());\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     \n+    this->wallets[strName] = pWallet;\n     RegisterWallet(pWallet);\n     \n     CBlockIndex *pindexRescan = pindexBest;\n@@ -1915,8 +1933,21 @@ bool CWalletMap::UnloadWallet(const std::string& strName)\n     return true;\n }\n \n+void CWalletMap::UnloadAllWallets()\n+{\n+    UnregisterAllWallets();\n+    BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n+        delete item.second;\n+    wallets.clear();\n+}\n+\n CWallet* CWalletMap::GetWallet(const string& strName)\n {\n     if (!wallets.count(strName)) return NULL;\n     return wallets[strName];\n+}\n+\n+bool CWalletMap::IsValidName(const string& strName)\n+{\n+    return boost::regex_match(strName, WALLET_NAME_REGEX);\n }\n\\ No newline at end of file"
      },
      {
        "sha": "11a56a0d0701b5aa0e1328be7362f8d9a1fc2236",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "patch": "@@ -10,6 +10,8 @@\n \n #include <stdlib.h>\n \n+#include <boost/regex.hpp>\n+\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -313,23 +315,24 @@ class CWallet : public CCryptoKeyStore\n \n /** A CWalletMap associates wallets with names and automatically deallocates them upon destruction.\n  */\n+const boost::regex WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n typedef std::map<std::string, CWallet*> wallet_map;\n class CWalletMap\n {\n public:\n     wallet_map wallets;\n \n-    ~CWalletMap()\n-    {\n-        BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n-            delete item.second;\n-    }\n+    ~CWalletMap() { UnloadAllWallets(); }\n     \n-    bool LoadWallet(const std::string& strName, const std::string& strFile, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n+    bool LoadWallet(const std::string& strName, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n     bool UnloadWallet(const std::string& strName);\n+    void UnloadAllWallets();\n     \n     // Returns NULL if wallet not found.\n     CWallet* GetWallet(const std::string& strName);\n+    CWallet* GetDefaultWallet() { return GetWallet(\"\"); }\n+    \n+    bool IsValidName(const std::string& strName);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "9d201cfaf9f54042ec0ff8265cd2201545568b6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDIwMWNmYWY5ZjU0MDQyZWMwZmY4MjY1Y2QyMjAxNTQ1NTY4YjZk",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T15:15:26Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T16:35:11Z"
      },
      "message": "More load options at startup.\n\nIf at least one -usewallet parameter is given, it will use those parameters to determine which wallets to load at startup.\nIf no -usewallet parameters are given, it searches the data directory for files named wallet-<walletname>.dat.\n\nAlso added -nousewallet parameters which override either -usewallet or the data directory.",
      "tree": {
        "sha": "c1aaf7d20dbed98693d223bb4408b99dbf1b8376",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1aaf7d20dbed98693d223bb4408b99dbf1b8376"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d201cfaf9f54042ec0ff8265cd2201545568b6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d201cfaf9f54042ec0ff8265cd2201545568b6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d201cfaf9f54042ec0ff8265cd2201545568b6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d201cfaf9f54042ec0ff8265cd2201545568b6d/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd110a6f76ef1c8fd1f18acc08b9fb2391522e7"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 125,
      "deletions": 54
    },
    "files": [
      {
        "sha": "65c5f1906f6e08bd1725d8d1a478f7b59a996cc5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 43,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "patch": "@@ -392,6 +392,81 @@ void ThreadImport(void *data) {\n     vnThreadsRunning[THREAD_IMPORT]--;\n }\n \n+bool LoadWallets(ostringstream& strErrors)\n+{\n+    pWalletMap = new CWalletMap();\n+    \n+    // Get wallet names from -usewallet parameters\n+    set<string> setWalletNames;\n+    BOOST_FOREACH(const string& name, mapMultiArgs[\"-usewallet\"])\n+    {\n+        if (name.size() == 0) continue;\n+        if (!CWalletMap::IsValidName(name))\n+        {\n+            printf(\"Invalid wallet name in -usewallet: %s\\n\", name.c_str());\n+            strErrors << \"Invalid wallet name in -usewallet: \" << name << \"\\n\";\n+        }\n+        else\n+            setWalletNames.insert(name);\n+    }\n+    \n+    // If there are no -usewallet parameters, get wallet names from files in data directory\n+    if (mapMultiArgs[\"-usewallet\"].size() == 0)\n+    {\n+        try\n+        {\n+            vector<string> v = CWalletMap::GetWalletsAtPath(GetDataDir());\n+            copy(v.begin(), v.end(), inserter(setWalletNames, setWalletNames.end()));\n+        }\n+        catch (const std::exception& e)\n+        {\n+            printf(\"Error looking for wallets from data directory: %s\\n\", e.what());\n+            strErrors << \"Error looking for wallets from data directory: \" << e.what() << endl;\n+        }\n+    }\n+    \n+    // If there are -nousewallet parameters, remove those wallets from our set\n+    BOOST_FOREACH(const string& name, mapMultiArgs[\"-nousewallet\"])\n+    {\n+        if (name.size() == 0) continue;\n+        if (!CWalletMap::IsValidName(name))\n+        {\n+            printf(\"Invalid wallet name in -nousewallet: %s\\n\", name.c_str());\n+            strErrors << \"Invalid wallet name in -nousewallet: \" << name << \"\\n\";\n+        }\n+        else\n+            setWalletNames.erase(name);\n+    }\n+    \n+    // Get additional parameters\n+    bool fRescan = GetBoolArg(\"-rescan\");\n+    bool fUpgrade = GetBoolArg(\"-upgradewallet\");\n+    int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+    \n+    // Always require a default wallet\n+    ostringstream ossErrors;\n+    if (!pWalletMap->LoadWallet(\"\", ossErrors, fRescan, fUpgrade, nMaxVersion))\n+    {\n+        printf(\"Failed to load default wallet: %s\\nExiting...\\n\", ossErrors.str().c_str());\n+        return false;\n+    }\n+    \n+    // Be tolerant on nondefault wallets. Just report errors but don't die.\n+    BOOST_FOREACH(const string& strWalletName, setWalletNames)\n+    {\n+        ostringstream strLoadErrors;\n+        if (!pWalletMap->LoadWallet(strWalletName, strLoadErrors, fRescan, fUpgrade, nMaxVersion))\n+        {\n+            strErrors << strLoadErrors.str();\n+            printf(\"Error loading wallet %s: %s\\n\", strWalletName.c_str(), strLoadErrors.str().c_str());\n+        }\n+    }\n+    \n+    // TODO: remove dependency on a global variable named pwalletMain in the rest of the app.\n+    pwalletMain = pWalletMap->GetDefaultWallet();\n+    return true;\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -797,49 +872,7 @@ bool AppInit2()\n     \n     uiInterface.InitMessage(_(\"Loading wallets...\"));\n     printf(\"Loading wallets...\\n\");\n-\n-    pWalletMap = new CWalletMap();\n-\n-    // Get wallet names\n-    set<string> vstrWalletNames;\n-    BOOST_FOREACH(const string& strWalletName, mapMultiArgs[\"-usewallet\"])\n-    {\n-        if (strWalletName.size() == 0) continue;\n-        if (!pWalletMap->IsValidName(strWalletName))\n-        {\n-            printf(\"Invalid wallet name: %s\\n\", strWalletName.c_str());\n-            strErrors << \"Invalid wallet name: \" << strWalletName << \"\\n\";\n-        }\n-        else\n-            vstrWalletNames.insert(strWalletName);\n-    }\n-\n-    // Get parameters\n-    bool fRescan = GetBoolArg(\"-rescan\");\n-    bool fUpgrade = GetBoolArg(\"-upgradewallet\");\n-    int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        \n-    // Always require a default wallet\n-    ostringstream ossErrors;\n-    if (!pWalletMap->LoadWallet(\"\", ossErrors, fRescan, fUpgrade, nMaxVersion))\n-    {\n-        printf(\"Failed to load default wallet: %s\\nExiting...\\n\", ossErrors.str().c_str());\n-        return false;\n-    }\n-    \n-    // Be tolerant on nondefault wallets. Just report errors but don't die.\n-    BOOST_FOREACH(const string& strWalletName, vstrWalletNames)\n-    {\n-        ostringstream strLoadErrors;\n-        if (!pWalletMap->LoadWallet(strWalletName, strLoadErrors, fRescan, fUpgrade, nMaxVersion))\n-        {\n-            strErrors << strLoadErrors.str();\n-            printf(\"Error loading wallet %s: %s\\n\", strWalletName.c_str(), strLoadErrors.str().c_str());\n-        }\n-    }\n-    \n-    // TODO: remove dependency on a global variable named pwalletMain in the rest of the app.\n-    pwalletMain = pWalletMap->GetDefaultWallet();\n+    if (!LoadWallets(strErrors)) return false;\n     \n     // ********************************************************* Step 9: import blocks\n "
      },
      {
        "sha": "81fc8c56497fbebbf56bbdf7d4a952a7469a17f8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "patch": "@@ -944,12 +944,31 @@ bool WildcardMatch(const string& str, const string& mask)\n     return WildcardMatch(str.c_str(), mask.c_str());\n }\n \n-\n-\n-\n-\n-\n-\n+vector<string> GetFilesAtPath(const boost::filesystem::path& _path, unsigned int flags)\n+{\n+    vector<string> vstrFiles;\n+    if (!boost::filesystem::exists(_path))\n+        throw runtime_error(\"Path does not exist.\");\n+    \n+    if ((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(_path))\n+    {\n+        vstrFiles.push_back(_path.filename().string());\n+        return vstrFiles;\n+    }\n+    if (boost::filesystem::is_directory(_path))\n+    {\n+        vector<boost::filesystem::path> vPaths;\n+        copy(boost::filesystem::directory_iterator(_path), boost::filesystem::directory_iterator(), back_inserter(vPaths));\n+        BOOST_FOREACH(const boost::filesystem::path& pFile, vPaths)\n+        {\n+            if (((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(pFile)) ||\n+                ((flags & file_option_flags::DIRECTORIES) && boost::filesystem::is_directory(pFile)))\n+                vstrFiles.push_back(pFile.filename().string());\n+        }\n+        return vstrFiles;\n+    }\n+    throw runtime_error(\"Path exists but is neither a regular file nor a directory.\");\n+}\n \n static std::string FormatException(std::exception* pex, const char* pszThread)\n {"
      },
      {
        "sha": "d5588a9014a0d14598acd5ffde3dc29f333f17e5",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "patch": "@@ -219,10 +219,14 @@ void runCommand(std::string strCommand);\n \n \n \n+namespace file_option_flags\n+{\n+    const unsigned int REGULAR_FILES = 0x01;\n+    const unsigned int DIRECTORIES = 0x02;\n+};\n \n-\n-\n-\n+std::vector<std::string> GetFilesAtPath(const boost::filesystem::path& _path,\n+                                        unsigned int flags = file_option_flags::REGULAR_FILES | file_option_flags::DIRECTORIES);\n \n \n inline std::string i64tostr(int64 n)"
      },
      {
        "sha": "01ac4518646699e7fade8c414655d7be08366f40",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "patch": "@@ -1822,7 +1822,7 @@ bool static InitWarning(const std::string &str)\n bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n {\n     // Check that the wallet name is valid\n-    if (!this->IsValidName(strName)) {\n+    if (!CWalletMap::IsValidName(strName)) {\n         strErrors << _(\"Wallet name may only contain letters, numbers, and underscores.\");\n         return false;\n     }\n@@ -1950,4 +1950,17 @@ CWallet* CWalletMap::GetWallet(const string& strName)\n bool CWalletMap::IsValidName(const string& strName)\n {\n     return boost::regex_match(strName, WALLET_NAME_REGEX);\n+}\n+\n+vector<string> CWalletMap::GetWalletsAtPath(const boost::filesystem::path& pathWallets)\n+{\n+    vector<string> vstrFiles = GetFilesAtPath(pathWallets, file_option_flags::REGULAR_FILES);\n+    vector<string> vstrNames;\n+    boost::cmatch match;\n+    BOOST_FOREACH(const string& strFile, vstrFiles)\n+    {\n+        if (boost::regex_match(strFile.c_str(), match, WALLET_FILE_REGEX))\n+            vstrNames.push_back(string(match[1].first, match[1].second));\n+    }\n+    return vstrNames;\n }\n\\ No newline at end of file"
      },
      {
        "sha": "35c2ec282898c9becf8e0d2fc10db5d8ce2f4262",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d201cfaf9f54042ec0ff8265cd2201545568b6d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "patch": "@@ -316,6 +316,7 @@ class CWallet : public CCryptoKeyStore\n /** A CWalletMap associates wallets with names and automatically deallocates them upon destruction.\n  */\n const boost::regex WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n+const boost::regex WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n typedef std::map<std::string, CWallet*> wallet_map;\n class CWalletMap\n {\n@@ -332,7 +333,8 @@ class CWalletMap\n     CWallet* GetWallet(const std::string& strName);\n     CWallet* GetDefaultWallet() { return GetWallet(\"\"); }\n     \n-    bool IsValidName(const std::string& strName);\n+    static bool IsValidName(const std::string& strName);\n+    static std::vector<std::string> GetWalletsAtPath(const boost::filesystem::path& pathWallets);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjU2ZDFkN2Y3MTJmMGI5YmE4ZTI1MTY3NGRjMzBlYzJmZmVjODRl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T17:48:34Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-27T17:55:36Z"
      },
      "message": "Thread-safe CWalletMap.",
      "tree": {
        "sha": "749b6fe97f7c32458427a4006d299387b909ce94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/749b6fe97f7c32458427a4006d299387b909ce94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d201cfaf9f54042ec0ff8265cd2201545568b6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d201cfaf9f54042ec0ff8265cd2201545568b6d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 25,
      "deletions": 11
    },
    "files": [
      {
        "sha": "63ef46582b31b18a43977ded58bdc447e35dd6a0",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "patch": "@@ -1076,6 +1076,7 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         // Execute\n         Value result;\n         {\n+            LOCK(pWalletMap->cs_WalletMap);\n             if (pcmd->unlocked) {\n                 result = pcmd->actor(pWallet, params, false);\n             }"
      },
      {
        "sha": "af09d9467ab4f77d2d399458a40294e92376b624",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "patch": "@@ -1897,8 +1897,11 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     printf(\"%s\", strErrors.str().c_str());\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     \n-    this->wallets[strName] = pWallet;\n-    RegisterWallet(pWallet);\n+    {\n+        LOCK(cs_WalletMap);\n+        this->wallets[strName] = pWallet;\n+        RegisterWallet(pWallet);\n+    }\n     \n     CBlockIndex *pindexRescan = pindexBest;\n     if (fRescan)\n@@ -1927,24 +1930,33 @@ bool CWalletMap::UnloadWallet(const std::string& strName)\n     CWallet* pWallet = GetWallet(strName);\n     if (!pWallet) return false;\n     \n-    UnregisterWallet(pWallet);\n-    wallets.erase(strName);\n-    delete pWallet;\n+    {\n+        LOCK(cs_WalletMap);\n+        UnregisterWallet(pWallet);\n+        wallets.erase(strName);\n+        delete pWallet;\n+    }\n     return true;\n }\n \n void CWalletMap::UnloadAllWallets()\n {\n-    UnregisterAllWallets();\n-    BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n-        delete item.second;\n-    wallets.clear();\n+    {\n+        LOCK(cs_WalletMap);\n+        UnregisterAllWallets();\n+        BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n+            delete item.second;\n+        wallets.clear();\n+    }\n }\n \n CWallet* CWalletMap::GetWallet(const string& strName)\n {\n-    if (!wallets.count(strName)) return NULL;\n-    return wallets[strName];\n+    {\n+        LOCK(cs_WalletMap);\n+        if (!wallets.count(strName)) return NULL;\n+        return wallets[strName];\n+    }\n }\n \n bool CWalletMap::IsValidName(const string& strName)"
      },
      {
        "sha": "419ce3916ce274eda9413b6f077d7491154e0a7f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "patch": "@@ -321,6 +321,7 @@ typedef std::map<std::string, CWallet*> wallet_map;\n class CWalletMap\n {\n public:\n+    mutable CCriticalSection cs_WalletMap;\n     wallet_map wallets;\n \n     ~CWalletMap() { UnloadAllWallets(); }"
      }
    ]
  },
  {
    "sha": "3f5d6928834139030f0a015a47a5be74f44a3df0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjVkNjkyODgzNDEzOTAzMGYwYTAxNWE0N2E1YmU3NGY0NGEzZGYw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-29T22:11:32Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-29T22:11:32Z"
      },
      "message": "Using GetWallet instead of pWalletMap->wallets.find",
      "tree": {
        "sha": "a39cf3c2b6227f90a2fb8f12ccbb9d9a3d3ea9e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a39cf3c2b6227f90a2fb8f12ccbb9d9a3d3ea9e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f5d6928834139030f0a015a47a5be74f44a3df0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5d6928834139030f0a015a47a5be74f44a3df0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5d6928834139030f0a015a47a5be74f44a3df0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5d6928834139030f0a015a47a5be74f44a3df0/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4b8e2c87d2b3c82f0380768985bcf98afcb0f219",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f5d6928834139030f0a015a47a5be74f44a3df0/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f5d6928834139030f0a015a47a5be74f44a3df0/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3f5d6928834139030f0a015a47a5be74f44a3df0",
        "patch": "@@ -1569,9 +1569,9 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n             \"Selects which wallet to use.\");\n     \n     string strWalletName = params[0].get_str();\n-    wallet_map::iterator it = pWalletMap->wallets.find(strWalletName);\n-    if (it == pWalletMap->wallets.end())\n-        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not found.\");\n+    pWallet = pWalletMap->GetWallet(strWalletName);\n+    if (!pWallet)\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n     \n     string strMethod = params[1].get_str();\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n@@ -1585,7 +1585,7 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     for (unsigned int i = 2; i < params.size(); i++)\n         vstrParams.push_back(params[i].get_str());\n \n-    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), it->second);\n+    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), pWallet);\n }\n \n Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "629ca2fc5c219044be6db534fda38b4c26c1a537",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjljYTJmYzVjMjE5MDQ0YmU2ZGI1MzRmZGEzOGI0YzI2YzFhNTM3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-29T22:11:32Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-29T22:17:53Z"
      },
      "message": "Using GetWallet instead of pWalletMap->wallets.find",
      "tree": {
        "sha": "1e4348ae754113c8044860ad8b3fb7a310a9085c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e4348ae754113c8044860ad8b3fb7a310a9085c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/629ca2fc5c219044be6db534fda38b4c26c1a537",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629ca2fc5c219044be6db534fda38b4c26c1a537",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/629ca2fc5c219044be6db534fda38b4c26c1a537",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629ca2fc5c219044be6db534fda38b4c26c1a537/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2256d1d7f712f0b9ba8e251674dc30ec2ffec84e"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 5,
      "deletions": 11
    },
    "files": [
      {
        "sha": "203e2a32ac0922e4cb8b0b3914224f1eaef69eab",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629ca2fc5c219044be6db534fda38b4c26c1a537/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629ca2fc5c219044be6db534fda38b4c26c1a537/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=629ca2fc5c219044be6db534fda38b4c26c1a537",
        "patch": "@@ -1569,9 +1569,9 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n             \"Selects which wallet to use.\");\n     \n     string strWalletName = params[0].get_str();\n-    wallet_map::iterator it = pWalletMap->wallets.find(strWalletName);\n-    if (it == pWalletMap->wallets.end())\n-        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not found.\");\n+    pWallet = pWalletMap->GetWallet(strWalletName);\n+    if (!pWallet)\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n     \n     string strMethod = params[1].get_str();\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n@@ -1585,7 +1585,7 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     for (unsigned int i = 2; i < params.size(); i++)\n         vstrParams.push_back(params[i].get_str());\n \n-    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), it->second);\n+    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), pWallet);\n }\n \n Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n@@ -1626,10 +1626,4 @@ Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"No wallet named \") + strWalletName + \" is currently loaded.\");\n     \n     return string(\"Wallet \") + strWalletName + \" unloaded.\";\n-}\n-\n-\n-\n-\n-\n-\n+}\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "55d301c7f78f2253c6354f8650f86e4d2df07caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWQzMDFjN2Y3OGYyMjUzYzYzNTRmODY1MGY4NmU0ZDJkZjA3Y2Fm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-29T22:18:08Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2012-12-29T22:18:08Z"
      },
      "message": "Merge branch 'multiwallet' of 108.60.150.142:../gitrepos/bitcoin into multiwallet",
      "tree": {
        "sha": "b307a1843344f59089418b8372edfa9e6d5a4798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b307a1843344f59089418b8372edfa9e6d5a4798"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55d301c7f78f2253c6354f8650f86e4d2df07caf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55d301c7f78f2253c6354f8650f86e4d2df07caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55d301c7f78f2253c6354f8650f86e4d2df07caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55d301c7f78f2253c6354f8650f86e4d2df07caf/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f5d6928834139030f0a015a47a5be74f44a3df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5d6928834139030f0a015a47a5be74f44a3df0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5d6928834139030f0a015a47a5be74f44a3df0"
      },
      {
        "sha": "629ca2fc5c219044be6db534fda38b4c26c1a537",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629ca2fc5c219044be6db534fda38b4c26c1a537",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/629ca2fc5c219044be6db534fda38b4c26c1a537"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8ee3c29b1a43bfd77ddecb012e619788cbee633d",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d301c7f78f2253c6354f8650f86e4d2df07caf/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d301c7f78f2253c6354f8650f86e4d2df07caf/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=55d301c7f78f2253c6354f8650f86e4d2df07caf",
        "patch": "@@ -1627,9 +1627,3 @@ Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n     \n     return string(\"Wallet \") + strWalletName + \" unloaded.\";\n }\n-\n-\n-\n-\n-\n-"
      }
    ]
  },
  {
    "sha": "ebf85b17aab48ea5c2af403030c0025a2746a304",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmY4NWIxN2FhYjQ4ZWE1YzJhZjQwMzAzMGMwMDI1YTI3NDZhMzA0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T08:29:15Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T08:29:15Z"
      },
      "message": "Moved RPC type conversion for usewallet to RPCConvertValues function.",
      "tree": {
        "sha": "287b974592fece56f66a26d2d1d8f4a7b9eeba94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287b974592fece56f66a26d2d1d8f4a7b9eeba94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebf85b17aab48ea5c2af403030c0025a2746a304",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf85b17aab48ea5c2af403030c0025a2746a304",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf85b17aab48ea5c2af403030c0025a2746a304",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf85b17aab48ea5c2af403030c0025a2746a304/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "629ca2fc5c219044be6db534fda38b4c26c1a537",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629ca2fc5c219044be6db534fda38b4c26c1a537",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/629ca2fc5c219044be6db534fda38b4c26c1a537"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "773e2ea65f559bc7ea796042a98195576b367c37",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf85b17aab48ea5c2af403030c0025a2746a304/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf85b17aab48ea5c2af403030c0025a2746a304/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ebf85b17aab48ea5c2af403030c0025a2746a304",
        "patch": "@@ -1231,6 +1231,15 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"loadwallet\"             && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"loadwallet\"             && n > 2) ConvertTo<bool>(params[2]);\n     if (strMethod == \"loadwallet\"             && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"usewallet\"              && n > 3)\n+    {\n+        vector<string> subStrParams;\n+        for (unsigned int i = 3; i < strParams.size(); i++)\n+            subStrParams.push_back(strParams[i]);\n+        \n+        Array subParams = RPCConvertValues(strParams[2], subStrParams);\n+        params.insert(params.begin(), strParams.begin(), strParams.begin() + 2);\n+    }\n \n     return params;\n }"
      },
      {
        "sha": "276e69c94bac412c18ede0a76951ad808436eb64",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf85b17aab48ea5c2af403030c0025a2746a304/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf85b17aab48ea5c2af403030c0025a2746a304/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ebf85b17aab48ea5c2af403030c0025a2746a304",
        "patch": "@@ -1580,12 +1580,8 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     \n     if (!pcmd->isWalletFn)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Method \") + strMethod + \" is not a wallet method.\");\n-    \n-    vector<string> vstrParams;\n-    for (unsigned int i = 2; i < params.size(); i++)\n-        vstrParams.push_back(params[i].get_str());\n \n-    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), pWallet);\n+    return tableRPC.execute(strMethod, params, pWallet);\n }\n \n Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "74228a2228544556dc4822a154eac7f7c0331da4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDIyOGEyMjI4NTQ0NTU2ZGM0ODIyYTE1NGVhYzdmN2MwMzMxZGE0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T08:31:59Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T09:29:36Z"
      },
      "message": "Fixed usewallet params.",
      "tree": {
        "sha": "659ebbb3969c7da769fe7f74d10dedf1d09d8c89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/659ebbb3969c7da769fe7f74d10dedf1d09d8c89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74228a2228544556dc4822a154eac7f7c0331da4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74228a2228544556dc4822a154eac7f7c0331da4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74228a2228544556dc4822a154eac7f7c0331da4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74228a2228544556dc4822a154eac7f7c0331da4/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55d301c7f78f2253c6354f8650f86e4d2df07caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55d301c7f78f2253c6354f8650f86e4d2df07caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55d301c7f78f2253c6354f8650f86e4d2df07caf"
      },
      {
        "sha": "ebf85b17aab48ea5c2af403030c0025a2746a304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf85b17aab48ea5c2af403030c0025a2746a304",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf85b17aab48ea5c2af403030c0025a2746a304"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "22ba68e88a09d5b24ad06d2f0a72045527b98a48",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74228a2228544556dc4822a154eac7f7c0331da4/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74228a2228544556dc4822a154eac7f7c0331da4/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=74228a2228544556dc4822a154eac7f7c0331da4",
        "patch": "@@ -1178,6 +1178,18 @@ void ConvertTo(Value& value, bool fAllowNull=false)\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n+\n+    if (strMethod == \"usewallet\" && strParams.size() > 2)\n+    {\n+        vector<string> subStrParams;\n+        for (unsigned int i = 2; i < strParams.size(); i++)\n+            subStrParams.push_back(strParams[i]);\n+\n+        params = RPCConvertValues(strParams[1], subStrParams);\n+        params.insert(params.begin(), strParams.begin(), strParams.begin() + 2);\n+        return params;\n+    }\n+\n     BOOST_FOREACH(const std::string &param, strParams)\n         params.push_back(param);\n "
      },
      {
        "sha": "f3d80e8fd6851f9002eb23b5f9f8cf9bd962a76b",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74228a2228544556dc4822a154eac7f7c0331da4/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74228a2228544556dc4822a154eac7f7c0331da4/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=74228a2228544556dc4822a154eac7f7c0331da4",
        "patch": "@@ -1580,12 +1580,12 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     \n     if (!pcmd->isWalletFn)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Method \") + strMethod + \" is not a wallet method.\");\n-    \n-    vector<string> vstrParams;\n-    for (unsigned int i = 2; i < params.size(); i++)\n-        vstrParams.push_back(params[i].get_str());\n \n-    return tableRPC.execute(strMethod, RPCConvertValues(strMethod, vstrParams), pWallet);\n+    Array subParams;\n+    for (unsigned int i = 2; i < params.size(); i++)\n+        subParams.push_back(params[i]);\n+        \n+    return tableRPC.execute(strMethod, subParams, pWallet);\n }\n \n Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzBjYzRiZmNiNTUxZTg0Y2NiY2EwNjc4MDFlOWM3YjE3YzI1ODA3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T06:27:15Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T06:51:48Z"
      },
      "message": "Added preprocessor directive for boost filesystem v2 vs v3.",
      "tree": {
        "sha": "6436af570783b110923b4dc48753f3ecaa629a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6436af570783b110923b4dc48753f3ecaa629a0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0cc4bfcb551e84ccbca067801e9c7b17c25807/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74228a2228544556dc4822a154eac7f7c0331da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74228a2228544556dc4822a154eac7f7c0331da4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74228a2228544556dc4822a154eac7f7c0331da4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "012668fdc54884a9df22f9f1a817503721e170fe",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec0cc4bfcb551e84ccbca067801e9c7b17c25807/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec0cc4bfcb551e84ccbca067801e9c7b17c25807/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
        "patch": "@@ -952,7 +952,11 @@ vector<string> GetFilesAtPath(const boost::filesystem::path& _path, unsigned int\n     \n     if ((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(_path))\n     {\n+#if defined (BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION == 3\n         vstrFiles.push_back(_path.filename().string());\n+#else\n+        vstrFiles.push_back(_path.filename());\n+#endif\n         return vstrFiles;\n     }\n     if (boost::filesystem::is_directory(_path))\n@@ -963,7 +967,11 @@ vector<string> GetFilesAtPath(const boost::filesystem::path& _path, unsigned int\n         {\n             if (((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(pFile)) ||\n                 ((flags & file_option_flags::DIRECTORIES) && boost::filesystem::is_directory(pFile)))\n+#if defined (BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION == 3\n                 vstrFiles.push_back(pFile.filename().string());\n+#else\n+                vstrFiles.push_back(pFile.filename());\n+#endif\n         }\n         return vstrFiles;\n     }"
      }
    ]
  },
  {
    "sha": "7348f78bc76b01e01d186558a5889a4c6b0bf27a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzQ4Zjc4YmM3NmIwMWUwMWQxODY1NThhNTg4OWE0YzZiMGJmMjdh",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T09:15:21Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T09:56:53Z"
      },
      "message": "Better encapsulation on WalletMap class, moved critical section locks to within the class methods themselves and out of bitcoinrpc.cpp, wallet unload locks on individual wallet rather than all wallets.",
      "tree": {
        "sha": "8d31e7efd36412354dff9f23b5469b69680d1916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d31e7efd36412354dff9f23b5469b69680d1916"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7348f78bc76b01e01d186558a5889a4c6b0bf27a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7348f78bc76b01e01d186558a5889a4c6b0bf27a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7348f78bc76b01e01d186558a5889a4c6b0bf27a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7348f78bc76b01e01d186558a5889a4c6b0bf27a/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec0cc4bfcb551e84ccbca067801e9c7b17c25807",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec0cc4bfcb551e84ccbca067801e9c7b17c25807"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 68,
      "deletions": 34
    },
    "files": [
      {
        "sha": "4b1982efeb1880f3d489958cde919fa93f478896",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "patch": "@@ -256,10 +256,10 @@ static const CRPCCommand vRPCCommands[] =\n     { \"gettxout\",               &gettxout,               true,   false,    true  },\n     { \"lockunspent\",            &lockunspent,            false,  false,    true  },\n     { \"listlockunspent\",        &listlockunspent,        false,  false,    true  },\n-    { \"listwallets\",            &listwallets,            true,   true,     false },\n+    { \"listwallets\",            &listwallets,            true,   false,    false },\n     { \"usewallet\",              &usewallet,              false,  true,     false },\n-    { \"loadwallet\",             &loadwallet,             false,  true,     false },\n-    { \"unloadwallet\",           &unloadwallet,           false,  true,     false }\n+    { \"loadwallet\",             &loadwallet,             false,  false,    false },\n+    { \"unloadwallet\",           &unloadwallet,           false,  false,    false }\n };\n \n CRPCTable::CRPCTable()\n@@ -1069,18 +1069,17 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         !pcmd->okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n \n-    if (!pWallet) pWallet = pwalletMain;\n+    if (!pWallet) pWallet = pWalletMap->GetDefaultWallet();\n     \n     try\n     {\n         // Execute\n         Value result;\n         {\n-            LOCK(pWalletMap->cs_WalletMap);\n-            if (pcmd->unlocked) {\n+            if (pcmd->unlocked)\n                 result = pcmd->actor(pWallet, params, false);\n-            }\n             else {\n+                if (!pWallet) throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet loaded.\");\n                 LOCK2(cs_main, pWallet->cs_wallet);\n                 result = pcmd->actor(pWallet, params, false);\n             }"
      },
      {
        "sha": "5bcdc4e53b156cbab9b396dd29f0fe0f8bf60d98",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "patch": "@@ -915,7 +915,7 @@ bool AppInit2()\n     printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n     printf(\"nBestHeight = %d\\n\",                   nBestHeight);\n     \n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->GetWalletMap())\n     {\n         printf(\"Setting properties for wallet \\\"%s\\\"...\\n\", item.first.c_str());\n         printf(\"  setKeyPool.size() = %\"PRIszu\"\\n\",      item.second->setKeyPool.size());\n@@ -938,7 +938,7 @@ bool AppInit2()\n         return InitError(strErrors.str());\n \n      // Add wallet transactions that aren't already in a block to mapTransactions\n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->GetWalletMap())\n         item.second->ReacceptWalletTransactions();\n \n #if !defined(QT_GUI)"
      },
      {
        "sha": "6645fbfa9ea356df5128aa4f86e328dcb6ab4f85",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "patch": "@@ -71,7 +71,7 @@ Value getinfo(CWallet* pWallet, const Array& params, bool fHelp)\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n-    obj.push_back(Pair(\"wallets\",       (int)pWalletMap->wallets.size()));\n+    obj.push_back(Pair(\"wallets\",       pWalletMap->GetWalletCount()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n@@ -1546,7 +1546,7 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n             \"Returns list of wallets.\");\n     \n     Object obj;\n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->wallets)\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->GetWalletMap())\n     {\n         Object objWallet;\n         objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));"
      },
      {
        "sha": "9671c4a8a1ec9ae3c1d9d1ac278f19066f1f2fbd",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 18,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "patch": "@@ -1822,10 +1822,21 @@ bool static InitWarning(const std::string &str)\n bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n {\n     // Check that the wallet name is valid\n-    if (!CWalletMap::IsValidName(strName)) {\n+    if (!CWalletMap::IsValidName(strName))\n+    {\n         strErrors << _(\"Wallet name may only contain letters, numbers, and underscores.\");\n         return false;\n     }\n+\n+    ENTER_CRITICAL_SECTION(cs_WalletMap);\n+\n+    // Check that wallet is not already loaded\n+    if (wallets.count(strName) > 0)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+        strErrors << _(\"A wallet with that name is already loaded.\");\n+        return false;\n+    }\n     \n     // Wallet file name for wallet foo will be wallet-foo.dat\n     // The empty string is reserved for the default wallet whose file is wallet.dat\n@@ -1843,6 +1854,7 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n         {\n+            LEAVE_CRITICAL_SECTION(cs_WalletMap);\n             strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n             delete pWallet;\n             return false;\n@@ -1858,6 +1870,7 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n             strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n+            LEAVE_CRITICAL_SECTION(cs_WalletMap);\n             strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n             printf(\"%s\", strErrors.str().c_str());\n             return InitError(strErrors.str());\n@@ -1897,12 +1910,11 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     printf(\"%s\", strErrors.str().c_str());\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     \n-    {\n-        LOCK(cs_WalletMap);\n-        this->wallets[strName] = pWallet;\n-        RegisterWallet(pWallet);\n-    }\n-    \n+    this->wallets[strName] = pWallet;\n+    RegisterWallet(pWallet);\n+\n+    LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+\n     CBlockIndex *pindexRescan = pindexBest;\n     if (fRescan)\n         pindexRescan = pindexGenesisBlock;\n@@ -1927,26 +1939,42 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n \n bool CWalletMap::UnloadWallet(const std::string& strName)\n {\n-    CWallet* pWallet = GetWallet(strName);\n-    if (!pWallet) return false;\n-    \n+    CWallet* pWallet;\n     {\n         LOCK(cs_WalletMap);\n-        UnregisterWallet(pWallet);\n-        wallets.erase(strName);\n-        delete pWallet;\n+        if (!wallets.count(strName)) return false;\n+        pWallet = wallets[strName];\n+        {\n+            LOCK(pWallet->cs_wallet);\n+            UnregisterWallet(pWallet);\n+            wallets.erase(strName);\n+        }\n     }\n+    delete pWallet;\n     return true;\n }\n \n void CWalletMap::UnloadAllWallets()\n {\n     {\n         LOCK(cs_WalletMap);\n-        UnregisterAllWallets();\n+        vector<string> vstrNames;\n+        vector<CWallet*> vpWallets;\n         BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n-            delete item.second;\n-        wallets.clear();\n+        {\n+            vstrNames.push_back(item.first);\n+            vpWallets.push_back(item.second);\n+        }\n+            \n+        for (unsigned int i = 0; i < vstrNames.size(); i++)\n+        {\n+            {\n+                LOCK(vpWallets[i]->cs_wallet);\n+                UnregisterWallet(vpWallets[i]);\n+                wallets.erase(vstrNames[i]);\n+            }\n+            delete vpWallets[i];\n+        }\n     }\n }\n \n@@ -1959,9 +1987,12 @@ CWallet* CWalletMap::GetWallet(const string& strName)\n     }\n }\n \n+const boost::regex CWalletMap::WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n+const boost::regex CWalletMap::WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n+\n bool CWalletMap::IsValidName(const string& strName)\n {\n-    return boost::regex_match(strName, WALLET_NAME_REGEX);\n+    return boost::regex_match(strName, CWalletMap::WALLET_NAME_REGEX);\n }\n \n vector<string> CWalletMap::GetWalletsAtPath(const boost::filesystem::path& pathWallets)\n@@ -1971,7 +2002,7 @@ vector<string> CWalletMap::GetWalletsAtPath(const boost::filesystem::path& pathW\n     boost::cmatch match;\n     BOOST_FOREACH(const string& strFile, vstrFiles)\n     {\n-        if (boost::regex_match(strFile.c_str(), match, WALLET_FILE_REGEX))\n+        if (boost::regex_match(strFile.c_str(), match, CWalletMap::WALLET_FILE_REGEX))\n             vstrNames.push_back(string(match[1].first, match[1].second));\n     }\n     return vstrNames;"
      },
      {
        "sha": "3aa6542d7b0400b307001fc59e158e8f7afe55e5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7348f78bc76b01e01d186558a5889a4c6b0bf27a/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "patch": "@@ -315,15 +315,17 @@ class CWallet : public CCryptoKeyStore\n \n /** A CWalletMap associates wallets with names and automatically deallocates them upon destruction.\n  */\n-const boost::regex WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n-const boost::regex WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n typedef std::map<std::string, CWallet*> wallet_map;\n class CWalletMap\n {\n-public:\n+protected:\n+    static const boost::regex WALLET_NAME_REGEX;\n+    static const boost::regex WALLET_FILE_REGEX;\n+\n     mutable CCriticalSection cs_WalletMap;\n     wallet_map wallets;\n-\n+    \n+public:\n     ~CWalletMap() { UnloadAllWallets(); }\n     \n     bool LoadWallet(const std::string& strName, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n@@ -333,7 +335,9 @@ class CWalletMap\n     // Returns NULL if wallet not found.\n     CWallet* GetWallet(const std::string& strName);\n     CWallet* GetDefaultWallet() { return GetWallet(\"\"); }\n-    \n+    int GetWalletCount() { return wallets.size(); }\n+    wallet_map GetWalletMap() { return wallets; }\n+\n     static bool IsValidName(const std::string& strName);\n     static std::vector<std::string> GetWalletsAtPath(const boost::filesystem::path& pathWallets);\n };"
      }
    ]
  },
  {
    "sha": "d21a960ef497047051c7289d4dea494565862be1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjFhOTYwZWY0OTcwNDcwNTFjNzI4OWQ0ZGVhNDk0NTY1ODYyYmUx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T10:08:22Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T10:28:24Z"
      },
      "message": "Checking for CDB exceptions upon loading wallet.",
      "tree": {
        "sha": "02556e6c68781974181485840b9780e35d66dc3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02556e6c68781974181485840b9780e35d66dc3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d21a960ef497047051c7289d4dea494565862be1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d21a960ef497047051c7289d4dea494565862be1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d21a960ef497047051c7289d4dea494565862be1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d21a960ef497047051c7289d4dea494565862be1/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7348f78bc76b01e01d186558a5889a4c6b0bf27a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7348f78bc76b01e01d186558a5889a4c6b0bf27a"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 22,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4fc1aae5005ec10e2164af0d875d0058221b2d29",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d21a960ef497047051c7289d4dea494565862be1/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d21a960ef497047051c7289d4dea494565862be1/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d21a960ef497047051c7289d4dea494565862be1",
        "patch": "@@ -1844,12 +1844,31 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     if (strName.size() > 0)\n         strFile += \"-\" + strName;\n     strFile += \".dat\";\n-    \n+\n     printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n     int64 nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    CWallet* pWallet = new CWallet(strFile);\n-    DBErrors nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n+    CWallet* pWallet;\n+    DBErrors nLoadWalletRet;\n+\n+    try\n+    {\n+        pWallet = new CWallet(strFile);\n+        nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n+    }\n+    catch (const exception& e)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+        strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile << \": \" << e.what();\n+        return false;\n+    }\n+    catch (...)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+        strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile;\n+        return false;\n+    }\n+\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n         if (nLoadWalletRet == DB_CORRUPT)"
      }
    ]
  },
  {
    "sha": "f409a6d4133d5f71254ea1f0abe636c78c019aa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDA5YTZkNDEzM2Q1ZjcxMjU0ZWExZjBhYmU2MzZjNzhjMDE5YWEz",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T11:37:59Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T11:43:50Z"
      },
      "message": "Added unload methods for wallet db and call to unload in ~CWallet().",
      "tree": {
        "sha": "1530757a33958339723b474802654312d80ffff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1530757a33958339723b474802654312d80ffff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f409a6d4133d5f71254ea1f0abe636c78c019aa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f409a6d4133d5f71254ea1f0abe636c78c019aa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f409a6d4133d5f71254ea1f0abe636c78c019aa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f409a6d4133d5f71254ea1f0abe636c78c019aa3/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d21a960ef497047051c7289d4dea494565862be1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d21a960ef497047051c7289d4dea494565862be1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d21a960ef497047051c7289d4dea494565862be1"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "733f88827ff28ec47348900de2aa2b9974dacedb",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f409a6d4133d5f71254ea1f0abe636c78c019aa3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f409a6d4133d5f71254ea1f0abe636c78c019aa3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=f409a6d4133d5f71254ea1f0abe636c78c019aa3",
        "patch": "@@ -113,6 +113,8 @@ class CWallet : public CCryptoKeyStore\n         nOrderPosNext = 0;\n     }\n \n+    ~CWallet() { CWalletDB::UnloadWallet(this); }\n+    \n     std::map<uint256, CWalletTx> mapWallet;\n     int64 nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;"
      },
      {
        "sha": "ff10e4a94547bb196d41039977e1f0342adf7dba",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f409a6d4133d5f71254ea1f0abe636c78c019aa3/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f409a6d4133d5f71254ea1f0abe636c78c019aa3/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=f409a6d4133d5f71254ea1f0abe636c78c019aa3",
        "patch": "@@ -481,6 +481,31 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n+\n+void CWalletDB::UnloadWallet(CWallet* pwallet)\n+{\n+    if (!pwallet || !pwallet->fFileBacked)\n+        return;\n+    while (!fShutdown)\n+    {\n+        {\n+            LOCK(bitdb.cs_db);\n+            if (!bitdb.mapFileUseCount.count(pwallet->strWalletFile) || bitdb.mapFileUseCount[pwallet->strWalletFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                bitdb.CloseDb(pwallet->strWalletFile);\n+                printf(\"%s checkpoint\\n\", pwallet->strWalletFile.c_str());\n+                printf(\"%s detach\\n\", pwallet->strWalletFile.c_str());\n+                bitdb.CheckpointLSN(pwallet->strWalletFile);\n+                printf(\"%s closed\\n\", pwallet->strWalletFile.c_str());\n+                bitdb.mapFileUseCount.erase(pwallet->strWalletFile);\n+                return;\n+            }\n+        }\n+        Sleep(100);\n+    }\n+}\n+\n void ThreadFlushWalletDB(void* parg)\n {\n     // Make this thread recognisable as the wallet flushing thread"
      },
      {
        "sha": "e9d6a02d5ba718f61f3837d1131a0aa41bdafeae",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f409a6d4133d5f71254ea1f0abe636c78c019aa3/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f409a6d4133d5f71254ea1f0abe636c78c019aa3/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=f409a6d4133d5f71254ea1f0abe636c78c019aa3",
        "patch": "@@ -156,6 +156,7 @@ class CWalletDB : public CDB\n \n     DBErrors ReorderTransactions(CWallet*);\n     DBErrors LoadWallet(CWallet* pwallet);\n+    static void UnloadWallet(CWallet* pwallet);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  },
  {
    "sha": "6215e532f01649ada80c52d11d37a6910a64a5fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjE1ZTUzMmYwMTY0OWFkYTgwYzUyZDExZDM3YTY5MTBhNjRhNWZk",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T12:02:12Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T12:09:39Z"
      },
      "message": "Fixed test_bitcoin issue.",
      "tree": {
        "sha": "a05c7bf9156959d02ac10c1d1aeb6eafc2f056cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a05c7bf9156959d02ac10c1d1aeb6eafc2f056cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6215e532f01649ada80c52d11d37a6910a64a5fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6215e532f01649ada80c52d11d37a6910a64a5fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6215e532f01649ada80c52d11d37a6910a64a5fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6215e532f01649ada80c52d11d37a6910a64a5fd/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f409a6d4133d5f71254ea1f0abe636c78c019aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f409a6d4133d5f71254ea1f0abe636c78c019aa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f409a6d4133d5f71254ea1f0abe636c78c019aa3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "31f63c5a6c72278b75036af0ee763eb3c875a1cc",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6215e532f01649ada80c52d11d37a6910a64a5fd/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6215e532f01649ada80c52d11d37a6910a64a5fd/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=6215e532f01649ada80c52d11d37a6910a64a5fd",
        "patch": "@@ -30,12 +30,10 @@ struct TestingSetup {\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n         LoadBlockIndex();\n-        bool fFirstRun;\n-        pwalletMain = new CWallet(\"wallet.dat\");\n-        pwalletMain->LoadWallet(fFirstRun);\n         pWalletMap = new CWalletMap();\n-        pWalletMap->wallets[\"default\"] = pwalletMain;\n-        RegisterWallet(pwalletMain);\n+        std::ostringstream ossErrors;\n+        pWalletMap->LoadWallet(\"\", ossErrors);\n+        pwalletMain = pWalletMap->GetDefaultWallet();\n     }\n     ~TestingSetup()\n     {"
      }
    ]
  },
  {
    "sha": "d8b0cf104d521ae871cd5593f032a6be6c152d29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGIwY2YxMDRkNTIxYWU4NzFjZDU1OTNmMDMyYTZiZTZjMTUyZDI5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T14:45:26Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T14:45:26Z"
      },
      "message": "Added locks on setpwalletRegistered functions.",
      "tree": {
        "sha": "0bcb778952f5bbdbad6a099abcd9f230ae64a1ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bcb778952f5bbdbad6a099abcd9f230ae64a1ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8b0cf104d521ae871cd5593f032a6be6c152d29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b0cf104d521ae871cd5593f032a6be6c152d29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b0cf104d521ae871cd5593f032a6be6c152d29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b0cf104d521ae871cd5593f032a6be6c152d29/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6215e532f01649ada80c52d11d37a6910a64a5fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6215e532f01649ada80c52d11d37a6910a64a5fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6215e532f01649ada80c52d11d37a6910a64a5fd"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 48,
      "deletions": 21
    },
    "files": [
      {
        "sha": "03952bb67bc5a4b13b902e161fd2e47c106a7de5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 21,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b0cf104d521ae871cd5593f032a6be6c152d29/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b0cf104d521ae871cd5593f032a6be6c152d29/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d8b0cf104d521ae871cd5593f032a6be6c152d29",
        "patch": "@@ -101,68 +101,95 @@ void UnregisterAllWallets()\n // check whether the passed transaction is from us\n bool static IsFromMe(CTransaction& tx)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        if (pwallet->IsFromMe(tx))\n-            return true;\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            if (pwallet->IsFromMe(tx))\n+                return true;\n+    }\n     return false;\n }\n \n // get the wallet transaction with the given hash (if it exists)\n bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        if (pwallet->GetTransaction(hashTx,wtx))\n-            return true;\n-    return false;\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            if (pwallet->GetTransaction(hashTx,wtx))\n+                return true;\n+        return false;\n+    }\n }\n \n // erases transaction with the given hash from all wallets\n void static EraseFromWallets(uint256 hash)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->EraseFromWallet(hash);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->EraseFromWallet(hash);\n+    }\n }\n \n // make sure all wallets know about the given transaction, in the given block\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n+    }\n }\n \n // notify wallets about a new best chain\n void static SetBestChain(const CBlockLocator& loc)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->SetBestChain(loc);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->SetBestChain(loc);\n+    }\n }\n \n // notify wallets about an updated transaction\n void static UpdatedTransaction(const uint256& hashTx)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->UpdatedTransaction(hashTx);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->UpdatedTransaction(hashTx);\n+    }\n }\n \n // dump all wallets\n void static PrintWallets(const CBlock& block)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->PrintWallet(block);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->PrintWallet(block);\n+    }\n }\n \n // notify wallets about an incoming inventory (for request counts)\n void static Inventory(const uint256& hash)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->Inventory(hash);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->Inventory(hash);\n+    }\n }\n \n // ask wallets to resend their transactions\n void static ResendWalletTransactions()\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->ResendWalletTransactions();\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->ResendWalletTransactions();\n+    }\n }\n \n "
      }
    ]
  },
  {
    "sha": "3d15116f3c0bd31e541ab4521d20758daac5d571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDE1MTE2ZjNjMGJkMzFlNTQxYWI0NTIxZDIwNzU4ZGFhYzVkNTcx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T15:21:00Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T15:29:23Z"
      },
      "message": "Added ReacceptWalletTransactions() registered wallet function in main rather than iterating through the wallet map in init.",
      "tree": {
        "sha": "1115593dfc0dd77037933368ec550247d86e7b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1115593dfc0dd77037933368ec550247d86e7b4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d15116f3c0bd31e541ab4521d20758daac5d571",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d15116f3c0bd31e541ab4521d20758daac5d571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d15116f3c0bd31e541ab4521d20758daac5d571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d15116f3c0bd31e541ab4521d20758daac5d571/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8b0cf104d521ae871cd5593f032a6be6c152d29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b0cf104d521ae871cd5593f032a6be6c152d29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b0cf104d521ae871cd5593f032a6be6c152d29"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6c70449c77f2f7ff59accb72eb2b341dfd203293",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d15116f3c0bd31e541ab4521d20758daac5d571/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d15116f3c0bd31e541ab4521d20758daac5d571/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3d15116f3c0bd31e541ab4521d20758daac5d571",
        "patch": "@@ -938,8 +938,7 @@ bool AppInit2()\n         return InitError(strErrors.str());\n \n      // Add wallet transactions that aren't already in a block to mapTransactions\n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->GetWalletMap())\n-        item.second->ReacceptWalletTransactions();\n+    ReacceptWalletTransactions();\n \n #if !defined(QT_GUI)\n     // Loop until process is exit()ed from shutdown() function,"
      },
      {
        "sha": "348cb4f79cf260c98a896d7ad6c40b83f2c28987",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d15116f3c0bd31e541ab4521d20758daac5d571/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d15116f3c0bd31e541ab4521d20758daac5d571/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3d15116f3c0bd31e541ab4521d20758daac5d571",
        "patch": "@@ -142,6 +142,16 @@ void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock*\n     }\n }\n \n+// Add wallet transactions that aren't already in a block to mapTransactions\n+void ReacceptWalletTransactions()\n+{\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+        pwallet->ReacceptWalletTransactions();\n+    }\n+}\n+\n // notify wallets about a new best chain\n void static SetBestChain(const CBlockLocator& loc)\n {\n@@ -196,8 +206,6 @@ void static ResendWalletTransactions()\n \n \n \n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // CCoinsView implementations"
      },
      {
        "sha": "e0c23e8326271c4c383dd3dac71e3d4c76fa2231",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d15116f3c0bd31e541ab4521d20758daac5d571/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d15116f3c0bd31e541ab4521d20758daac5d571/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3d15116f3c0bd31e541ab4521d20758daac5d571",
        "patch": "@@ -116,6 +116,8 @@ void UnregisterWallet(CWallet* pwalletIn);\n void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n+/** Add wallet transactions that aren't already in a block to mapTransactions */\n+void ReacceptWalletTransactions();\n /** Process an incoming block */\n bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */"
      }
    ]
  },
  {
    "sha": "aa93b315d46ec247140870a504d3255e992660c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTkzYjMxNWQ0NmVjMjQ3MTQwODcwYTUwNGQzMjU1ZTk5MjY2MGMx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T17:53:44Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-10T18:55:04Z"
      },
      "message": "Added -lboost_regex to bitcoin-qt.pro.",
      "tree": {
        "sha": "5bbd3fcd28ac7825f5d0078238e333f84216b2d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bbd3fcd28ac7825f5d0078238e333f84216b2d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa93b315d46ec247140870a504d3255e992660c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa93b315d46ec247140870a504d3255e992660c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa93b315d46ec247140870a504d3255e992660c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa93b315d46ec247140870a504d3255e992660c1/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d15116f3c0bd31e541ab4521d20758daac5d571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d15116f3c0bd31e541ab4521d20758daac5d571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d15116f3c0bd31e541ab4521d20758daac5d571"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "38d71c77fea49d88e0a298c7a934e4e01b26490b",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa93b315d46ec247140870a504d3255e992660c1/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa93b315d46ec247140870a504d3255e992660c1/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=aa93b315d46ec247140870a504d3255e992660c1",
        "patch": "@@ -383,7 +383,7 @@ LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB\n LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n # -lgdi32 has to happen after -lcrypto (see  #681)\n windows:LIBS += -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32\n-LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n+LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX -lboost_regex$$BOOST_LIB_SUFFIX\n windows:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n \n contains(RELEASE, 1) {"
      }
    ]
  },
  {
    "sha": "e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGYzY2JlMjBhOWIxZTQyZjI0ZDY0NjVmNDQ2Yzk5ZDMxMDUzMGZm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-11T01:26:00Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-11T02:28:58Z"
      },
      "message": "Made wallet pointers in CWalletMap boost::shared_ptr<CWallet>.",
      "tree": {
        "sha": "553194f1e599feb2a16f903022c46f687c5fb18e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/553194f1e599feb2a16f903022c46f687c5fb18e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa93b315d46ec247140870a504d3255e992660c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa93b315d46ec247140870a504d3255e992660c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa93b315d46ec247140870a504d3255e992660c1"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 79,
      "deletions": 36
    },
    "files": [
      {
        "sha": "fac42679afd488cac0cbaf500941644fde186855",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "patch": "@@ -1069,7 +1069,17 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         !pcmd->okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n \n-    if (!pWallet) pWallet = pWalletMap->GetDefaultWallet();\n+    if (!pWallet)\n+    {\n+        try\n+        {\n+            pWallet = pWalletMap->GetDefaultWallet().get();\n+        }\n+        catch (const std::exception& e)\n+        {\n+            throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+        }\n+    }\n     \n     try\n     {"
      },
      {
        "sha": "a8688e9bf1a5be5c8d1c981b355b6ccf738580bc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "patch": "@@ -463,7 +463,7 @@ bool LoadWallets(ostringstream& strErrors)\n     }\n     \n     // TODO: remove dependency on a global variable named pwalletMain in the rest of the app.\n-    pwalletMain = pWalletMap->GetDefaultWallet();\n+    pwalletMain = pWalletMap->GetDefaultWallet().get();\n     return true;\n }\n "
      },
      {
        "sha": "382374d60f9a30b6cdd478e39ad285a51d1e732f",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 17,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "patch": "@@ -1567,25 +1567,38 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n         throw runtime_error(\n             \"usewallet <walletname> <method> [params]\\n\"\n             \"Selects which wallet to use.\");\n-    \n+\n+    boost::shared_ptr<CWallet> spWallet;\n     string strWalletName = params[0].get_str();\n-    pWallet = pWalletMap->GetWallet(strWalletName);\n-    if (!pWallet)\n-        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n-    \n+    try \n+    {\n+        spWallet = pWalletMap->GetWallet(strWalletName);\n+    }\n+    catch (const CWalletManagerException& e)\n+    {\n+        switch (e.type)\n+        {\n+            case CWalletManagerException::WALLET_NOT_LOADED:\n+                throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n+\n+            default:\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Unknown wallet error.\");\n+        }\n+    }\n+\n     string strMethod = params[1].get_str();\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, string(\"Method \") + strMethod + \" not found.\");\n-    \n+\n     if (!pcmd->isWalletFn)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Method \") + strMethod + \" is not a wallet method.\");\n \n     Array subParams;\n     for (unsigned int i = 2; i < params.size(); i++)\n         subParams.push_back(params[i]);\n-        \n-    return tableRPC.execute(strMethod, subParams, pWallet);\n+\n+    return tableRPC.execute(strMethod, subParams, spWallet.get());\n }\n \n Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n@@ -1594,20 +1607,20 @@ Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n         throw runtime_error(\n             \"loadwallet <walletname> [rescan=false] [upgradewallet=false] [maxversion=(latest)]\\n\"\n             \"Loads a wallet.\");\n-    \n+\n     string strWalletName = params[0].get_str();\n-    \n-    if (pWalletMap->GetWallet(strWalletName))\n+\n+    if (pWalletMap->HaveWallet(strWalletName))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" is already loaded.\");\n-    \n+\n     ostringstream strErrors;\n     bool fRescan = (params.size() > 1) ? params[1].get_bool() : false;\n     bool fUpgrade = (params.size() > 2) ? params[2].get_bool() : false;\n     int nMaxVersion = (params.size() > 3) ? params[3].get_int() : 0;\n-    \n+\n     if (!pWalletMap->LoadWallet(strWalletName, strErrors, fRescan, fUpgrade, nMaxVersion))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"Load failed: \") + strErrors.str());\n-    \n+\n     return string(\"Wallet \") + strWalletName + \" loaded.\";\n }\n \n@@ -1617,13 +1630,13 @@ Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n         throw runtime_error(\n             \"unloadwallet <walletname>\\n\"\n             \"Unloads a wallet.\");\n-    \n+\n     string strWalletName = params[0].get_str();\n-    \n+\n     if (strWalletName.size() == 0)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Default wallet cannot be unloaded.\");    \n     if (!pWalletMap->UnloadWallet(strWalletName))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"No wallet named \") + strWalletName + \" is currently loaded.\");\n-    \n+\n     return string(\"Wallet \") + strWalletName + \" unloaded.\";\n }"
      },
      {
        "sha": "59870e5825c6e0712a47cc604d6129835b999a47",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "patch": "@@ -33,7 +33,7 @@ struct TestingSetup {\n         pWalletMap = new CWalletMap();\n         std::ostringstream ossErrors;\n         pWalletMap->LoadWallet(\"\", ossErrors);\n-        pwalletMain = pWalletMap->GetDefaultWallet();\n+        pwalletMain = pWalletMap->GetDefaultWallet().get();\n     }\n     ~TestingSetup()\n     {"
      },
      {
        "sha": "98f9d5ab2531650f1a00128b3502b94764db4e74",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "patch": "@@ -1929,7 +1929,8 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     printf(\"%s\", strErrors.str().c_str());\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     \n-    this->wallets[strName] = pWallet;\n+    boost::shared_ptr<CWallet> spWallet(pWallet);\n+    this->wallets[strName] = spWallet;\n     RegisterWallet(pWallet);\n \n     LEAVE_CRITICAL_SECTION(cs_WalletMap);\n@@ -1958,18 +1959,17 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n \n bool CWalletMap::UnloadWallet(const std::string& strName)\n {\n-    CWallet* pWallet;\n     {\n         LOCK(cs_WalletMap);\n         if (!wallets.count(strName)) return false;\n-        pWallet = wallets[strName];\n+        boost::shared_ptr<CWallet> spWallet(wallets[strName]);\n+        CWallet* pWallet = spWallet.get();\n         {\n             LOCK(pWallet->cs_wallet);\n             UnregisterWallet(pWallet);\n             wallets.erase(strName);\n         }\n     }\n-    delete pWallet;\n     return true;\n }\n \n@@ -1978,7 +1978,7 @@ void CWalletMap::UnloadAllWallets()\n     {\n         LOCK(cs_WalletMap);\n         vector<string> vstrNames;\n-        vector<CWallet*> vpWallets;\n+        vector<boost::shared_ptr<CWallet> > vpWallets;\n         BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n         {\n             vstrNames.push_back(item.first);\n@@ -1987,21 +1987,23 @@ void CWalletMap::UnloadAllWallets()\n             \n         for (unsigned int i = 0; i < vstrNames.size(); i++)\n         {\n+            CWallet* pWallet = vpWallets[i].get();\n             {\n-                LOCK(vpWallets[i]->cs_wallet);\n-                UnregisterWallet(vpWallets[i]);\n+                LOCK(pWallet->cs_wallet);\n+                UnregisterWallet(pWallet);\n                 wallets.erase(vstrNames[i]);\n             }\n-            delete vpWallets[i];\n         }\n     }\n }\n \n-CWallet* CWalletMap::GetWallet(const string& strName)\n+boost::shared_ptr<CWallet> CWalletMap::GetWallet(const string& strName)\n {\n     {\n         LOCK(cs_WalletMap);\n-        if (!wallets.count(strName)) return NULL;\n+        if (!wallets.count(strName))\n+            throw CWalletManagerException(CWalletManagerException::WALLET_NOT_LOADED,\n+                                          \"CWalletMap::GetWallet() - Wallet not loaded.\");\n         return wallets[strName];\n     }\n }"
      },
      {
        "sha": "12e3dbbd43556e863bc49c6ced0bedbb796e93f5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0f3cbe20a9b1e42f24d6465f446c99d310530ff/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "patch": "@@ -10,8 +10,6 @@\n \n #include <stdlib.h>\n \n-#include <boost/regex.hpp>\n-\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -20,6 +18,11 @@\n #include \"util.h\"\n #include \"walletdb.h\"\n \n+#include <stdexcept>\n+\n+#include <boost/shared_ptr.hpp>\n+#include <boost/regex.hpp>\n+\n class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n@@ -315,9 +318,22 @@ class CWallet : public CCryptoKeyStore\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n };\n \n+class CWalletManagerException : public std::runtime_error\n+{\n+public:\n+    enum ErrorType\n+    {\n+        WALLET_NOT_LOADED,\n+        UNKNOWN_ERROR\n+    };\n+    ErrorType type;\n+\n+    CWalletManagerException(ErrorType _type, const char* message) : std::runtime_error(message), type(_type)  { }\n+};\n+\n /** A CWalletMap associates wallets with names and automatically deallocates them upon destruction.\n  */\n-typedef std::map<std::string, CWallet*> wallet_map;\n+typedef std::map<std::string, boost::shared_ptr<CWallet> > wallet_map;\n class CWalletMap\n {\n protected:\n@@ -334,11 +350,13 @@ class CWalletMap\n     bool UnloadWallet(const std::string& strName);\n     void UnloadAllWallets();\n     \n-    // Returns NULL if wallet not found.\n-    CWallet* GetWallet(const std::string& strName);\n-    CWallet* GetDefaultWallet() { return GetWallet(\"\"); }\n+    // GetWallet and GetDefaultWallet throw a CWalletManagerException if the wallet is not found.\n+    boost::shared_ptr<CWallet> GetWallet(const std::string& strName);\n+    boost::shared_ptr<CWallet> GetDefaultWallet() { return GetWallet(\"\"); }\n+    \n     int GetWalletCount() { return wallets.size(); }\n     wallet_map GetWalletMap() { return wallets; }\n+    bool HaveWallet(const std::string& strName) { return (wallets.count(strName) > 0); }\n \n     static bool IsValidName(const std::string& strName);\n     static std::vector<std::string> GetWalletsAtPath(const boost::filesystem::path& pathWallets);"
      }
    ]
  },
  {
    "sha": "eba557949996767b63c98a627d7528bce1077dc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmE1NTc5NDk5OTY3NjdiNjNjOThhNjI3ZDc1MjhiY2UxMDc3ZGM1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-11T02:42:18Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-11T03:57:38Z"
      },
      "message": "Removed pwalletMain. Using pWalletMap->GetDefaultWallet() instead.",
      "tree": {
        "sha": "036ac7b1e8580a0af9f178cacf545f8b0b8593b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/036ac7b1e8580a0af9f178cacf545f8b0b8593b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eba557949996767b63c98a627d7528bce1077dc5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eba557949996767b63c98a627d7528bce1077dc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eba557949996767b63c98a627d7528bce1077dc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eba557949996767b63c98a627d7528bce1077dc5/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0f3cbe20a9b1e42f24d6465f446c99d310530ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0f3cbe20a9b1e42f24d6465f446c99d310530ff"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 98,
      "deletions": 47
    },
    "files": [
      {
        "sha": "d9237281f258fdec4a6bc4983ee780c42d0cb9f6",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -1069,15 +1069,17 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         !pcmd->okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n \n+    boost::shared_ptr<CWallet> spWallet;\n     if (!pWallet)\n     {\n         try\n         {\n-            pWallet = pWalletMap->GetDefaultWallet().get();\n+            spWallet = pWalletMap->GetDefaultWallet();\n+            pWallet = spWallet.get();\n         }\n-        catch (const std::exception& e)\n+        catch (const CWalletManagerException& e)\n         {\n-            throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n         }\n     }\n     \n@@ -1089,7 +1091,6 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n             if (pcmd->unlocked)\n                 result = pcmd->actor(pWallet, params, false);\n             else {\n-                if (!pWallet) throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet loaded.\");\n                 LOCK2(cs_main, pWallet->cs_wallet);\n                 result = pcmd->actor(pWallet, params, false);\n             }"
      },
      {
        "sha": "d8099bfb1f5f6a46f282746d2672b195da1da850",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -26,7 +26,6 @@ using namespace std;\n using namespace boost;\n \n CWalletMap* pWalletMap;\n-CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n // Used to pass flags to the Bind() function\n@@ -462,8 +461,6 @@ bool LoadWallets(ostringstream& strErrors)\n         }\n     }\n     \n-    // TODO: remove dependency on a global variable named pwalletMain in the rest of the app.\n-    pwalletMain = pWalletMap->GetDefaultWallet().get();\n     return true;\n }\n "
      },
      {
        "sha": "099a9a47d336dec15a715ebf5bcfedf8650067bb",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -8,7 +8,6 @@\n #include \"wallet.h\"\n \n extern CWalletMap* pWalletMap;\n-extern CWallet* pwalletMain;\n \n void StartShutdown();\n void Shutdown(void* parg);"
      },
      {
        "sha": "34921c0cd8885d2ad3a9409ea994db9218979aa2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -4212,9 +4212,18 @@ void static BitcoinMiner(CWallet *pwallet)\n                     // Found a solution\n                     pblock->nNonce = ByteReverse(nNonceFound);\n                     assert(hash == pblock->GetHash());\n-\n+                    \n+                    boost::shared_ptr<CWallet> spWallet;\n+                    try\n+                    {\n+                        spWallet = pWalletMap->GetDefaultWallet();\n+                    }\n+                    catch (...)\n+                    {\n+                        break;\n+                    }\n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock.get(), *pwalletMain, reservekey);\n+                    CheckWork(pblock.get(), *spWallet, reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n                     break;\n                 }"
      },
      {
        "sha": "0b246a310767db1b684830badf8251f374d41004",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -1931,7 +1931,13 @@ void StartNode(void* parg)\n         printf(\"Error; NewThread(ThreadDumpAddress) failed\\n\");\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain);\n+    try\n+    {\n+        GenerateBitcoins(GetBoolArg(\"-gen\", false), pWalletMap->GetDefaultWallet().get());\n+    }\n+    catch (...)\n+    {\n+    }\n }\n \n bool StopNode()"
      },
      {
        "sha": "8be8067b5e922c075d4d9e0f6e39042c34d4886c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -228,7 +228,7 @@ int main(int argc, char *argv[])\n                     splash.finish(&window);\n \n                 ClientModel clientModel(&optionsModel);\n-                WalletModel walletModel(pwalletMain, &optionsModel);\n+                WalletModel walletModel(pWalletMap->GetDefaultWallet().get(), &optionsModel);\n \n                 window.setClientModel(&clientModel);\n                 window.setWalletModel(&walletModel);"
      },
      {
        "sha": "e8aa6cd81b31f618a8da62e403f4d218232773f2",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -131,7 +131,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!pwalletMain->GetKey(keyID, key))\n+    if (!pWalletMap->GetDefaultWallet()->GetKey(keyID, key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "95f2f3240807be5bd2fff465288f5cbc610502ae",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n #include \"ui_interface.h\"\n #include \"base58.h\"\n+#include \"init.h\"\n \n #include <boost/lexical_cast.hpp>\n "
      },
      {
        "sha": "43db567b1254c7c081c1f96e0a7a4d30a9a2c382",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 4,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -43,7 +43,15 @@ Value setgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n     }\n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n \n-    GenerateBitcoins(fGenerate, pwalletMain);\n+    try\n+    {\n+        GenerateBitcoins(fGenerate, pWalletMap->GetDefaultWallet().get());\n+    }\n+    catch (const CWalletManagerException& e)\n+    {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n+    }\n+\n     return Value::null;\n }\n \n@@ -104,7 +112,19 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n     static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n     static vector<CBlock*> vNewBlock;\n-    static CReserveKey reservekey(pwalletMain);\n+    \n+    // Get default wallet\n+    boost::shared_ptr<CWallet> spWallet;\n+    try\n+    {\n+        spWallet = pWalletMap->GetDefaultWallet();\n+    }\n+    catch (const CWalletManagerException& e)\n+    {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n+    }\n+\n+    static CReserveKey reservekey(spWallet.get());\n \n     if (params.size() == 0)\n     {\n@@ -177,6 +197,17 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n         CBlock* pdata = (CBlock*)&vchData[0];\n \n+        // Get default wallet\n+        boost::shared_ptr<CWallet> spWallet;\n+        try\n+        {\n+            spWallet = pWalletMap->GetDefaultWallet();\n+        }\n+        catch (const CWalletManagerException& e)\n+        {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n+        }\n+\n         // Byte reverse\n         for (int i = 0; i < 128/4; i++)\n             ((unsigned int*)pdata)[i] = ByteReverse(((unsigned int*)pdata)[i]);\n@@ -191,7 +222,7 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n         pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n \n-        return CheckWork(pblock, *pwalletMain, reservekey);\n+        return CheckWork(pblock, *spWallet, reservekey);\n     }\n }\n \n@@ -242,7 +273,18 @@ Value getblocktemplate(CWallet* pWallet, const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n-    static CReserveKey reservekey(pwalletMain);\n+    // Get default wallet\n+    boost::shared_ptr<CWallet> spWallet;\n+    try\n+    {\n+        spWallet = pWalletMap->GetDefaultWallet();\n+    }\n+    catch (const CWalletManagerException& e)\n+    {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n+    }\n+\n+    static CReserveKey reservekey(spWallet.get());\n \n     // Update block\n     static unsigned int nTransactionsUpdatedLast;"
      },
      {
        "sha": "5e91542d30975f8919e29b33512e98bc1bb29ef3",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -14,7 +14,7 @@ GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n+    BOOST_CHECK(walletdb.ReorderTransactions(pWalletMap->GetDefaultWallet().get()) == DB_LOAD_OK);\n     walletdb.ListAccountCreditDebit(\"\", aes);\n     BOOST_FOREACH(CAccountingEntry& ae, aes)\n     {\n@@ -24,7 +24,7 @@ GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n \n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    CWalletDB walletdb(pWalletMap->GetDefaultWallet()->strWalletFile);\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n@@ -38,8 +38,8 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     walletdb.WriteAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    pWalletMap->GetDefaultWallet()->AddToWallet(wtx);\n+    vpwtx.push_back(&pWalletMap->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     GetResults(walletdb, results);\n \n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(results[0].strComment.empty());\n@@ -60,13 +60,13 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n-    ae.nOrderPos = pwalletMain->IncOrderPosNext();\n+    ae.nOrderPos = pWalletMap->GetDefaultWallet()->IncOrderPosNext();\n     walletdb.WriteAccountingEntry(ae);\n \n     GetResults(walletdb, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 4);\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n     BOOST_CHECK(results[2].nTime == 1333333336);\n@@ -76,21 +76,21 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     wtx.mapValue[\"comment\"] = \"y\";\n     --wtx.nLockTime;  // Just to change the hash :)\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    pWalletMap->GetDefaultWallet()->AddToWallet(wtx);\n+    vpwtx.push_back(&pWalletMap->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n     --wtx.nLockTime;  // Just to change the hash :)\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    pWalletMap->GetDefaultWallet()->AddToWallet(wtx);\n+    vpwtx.push_back(&pWalletMap->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n     GetResults(walletdb, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 6);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     GetResults(walletdb, results);\n \n     BOOST_CHECK(results.size() == 4);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 7);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);"
      },
      {
        "sha": "88f1f0b34357cad8da6fb631d2bb2d1397b19832",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -48,7 +48,7 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    CReserveKey reservekey(pwalletMain);\n+    CReserveKey reservekey(pWalletMap->GetDefaultWallet().get());\n     CBlock *pblock;\n     CTransaction tx;\n     CScript script;"
      },
      {
        "sha": "6f983fbb2aa4728c0737263c7952bc3cd7b98674",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -2,7 +2,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"init.h\" // for pwalletMain\n+#include \"init.h\" // for pWalletMap\n #include \"base58.h\"\n #include \"util.h\"\n #include \"bitcoinrpc.h\"\n@@ -35,30 +35,30 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n \n     Value v;\n     CBitcoinAddress address;\n-    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(1, address1Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, address1Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(1, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(2, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(0), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, address1Hex), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(0), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, address1Hex), false), runtime_error);\n \n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1, \"\"), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, \"\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n \n     string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, short1.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, short1.c_str()), false), runtime_error);\n \n     string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n-    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, short2.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n static Value CallRPC(string args)\n@@ -71,7 +71,7 @@ static Value CallRPC(string args)\n \n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        Value result = (*method)(pwalletMain, params, false);\n+        Value result = (*method)(pWalletMap->GetDefaultWallet().get(), params, false);\n         return result;\n     }\n     catch (Object& objError)"
      },
      {
        "sha": "ee33141658a3ab9c7a86aa254349d93cc40abb5f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba557949996767b63c98a627d7528bce1077dc5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba557949996767b63c98a627d7528bce1077dc5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=eba557949996767b63c98a627d7528bce1077dc5",
        "patch": "@@ -9,7 +9,6 @@\n #include \"util.h\"\n \n CWalletMap* pWalletMap;\n-CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n extern bool fPrintToConsole;\n@@ -33,12 +32,10 @@ struct TestingSetup {\n         pWalletMap = new CWalletMap();\n         std::ostringstream ossErrors;\n         pWalletMap->LoadWallet(\"\", ossErrors);\n-        pwalletMain = pWalletMap->GetDefaultWallet().get();\n     }\n     ~TestingSetup()\n     {\n         delete pWalletMap;\n-        pwalletMain = NULL;\n         pWalletMap = NULL;\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjNlNDBiOTZmMTEwNDA3NmVjNDRiMTBiYzVhMDRhYmFhZTA4YjJm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-11T04:17:54Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-11T04:17:54Z"
      },
      "message": "Renamed CWalletMap CWalletManager and pWalletMap pWalletManager.",
      "tree": {
        "sha": "268528625d27292e36561844a6c68581311361d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/268528625d27292e36561844a6c68581311361d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eba557949996767b63c98a627d7528bce1077dc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eba557949996767b63c98a627d7528bce1077dc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eba557949996767b63c98a627d7528bce1077dc5"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 84,
      "deletions": 83
    },
    "files": [
      {
        "sha": "97288ab52e0085b06dcf85d39cc5749a89906c7b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -1074,7 +1074,7 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     {\n         try\n         {\n-            spWallet = pWalletMap->GetDefaultWallet();\n+            spWallet = pWalletManager->GetDefaultWallet();\n             pWallet = spWallet.get();\n         }\n         catch (const CWalletManagerException& e)"
      },
      {
        "sha": "92e3ab881f8922aedc2346c06f019d664188910d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -25,7 +25,7 @@\n using namespace std;\n using namespace boost;\n \n-CWalletMap* pWalletMap;\n+CWalletManager* pWalletManager;\n CClientUIInterface uiInterface;\n \n // Used to pass flags to the Bind() function\n@@ -97,7 +97,7 @@ void Shutdown(void* parg)\n         }\n         bitdb.Flush(true);\n         boost::filesystem::remove(GetPidFile());\n-        delete pWalletMap;\n+        delete pWalletManager;\n         NewThread(ExitTimeout, NULL);\n         Sleep(50);\n         printf(\"Bitcoin exited\\n\\n\");\n@@ -393,14 +393,14 @@ void ThreadImport(void *data) {\n \n bool LoadWallets(ostringstream& strErrors)\n {\n-    pWalletMap = new CWalletMap();\n+    pWalletManager = new CWalletManager();\n     \n     // Get wallet names from -usewallet parameters\n     set<string> setWalletNames;\n     BOOST_FOREACH(const string& name, mapMultiArgs[\"-usewallet\"])\n     {\n         if (name.size() == 0) continue;\n-        if (!CWalletMap::IsValidName(name))\n+        if (!CWalletManager::IsValidName(name))\n         {\n             printf(\"Invalid wallet name in -usewallet: %s\\n\", name.c_str());\n             strErrors << \"Invalid wallet name in -usewallet: \" << name << \"\\n\";\n@@ -414,7 +414,7 @@ bool LoadWallets(ostringstream& strErrors)\n     {\n         try\n         {\n-            vector<string> v = CWalletMap::GetWalletsAtPath(GetDataDir());\n+            vector<string> v = CWalletManager::GetWalletsAtPath(GetDataDir());\n             copy(v.begin(), v.end(), inserter(setWalletNames, setWalletNames.end()));\n         }\n         catch (const std::exception& e)\n@@ -428,7 +428,7 @@ bool LoadWallets(ostringstream& strErrors)\n     BOOST_FOREACH(const string& name, mapMultiArgs[\"-nousewallet\"])\n     {\n         if (name.size() == 0) continue;\n-        if (!CWalletMap::IsValidName(name))\n+        if (!CWalletManager::IsValidName(name))\n         {\n             printf(\"Invalid wallet name in -nousewallet: %s\\n\", name.c_str());\n             strErrors << \"Invalid wallet name in -nousewallet: \" << name << \"\\n\";\n@@ -444,7 +444,7 @@ bool LoadWallets(ostringstream& strErrors)\n     \n     // Always require a default wallet\n     ostringstream ossErrors;\n-    if (!pWalletMap->LoadWallet(\"\", ossErrors, fRescan, fUpgrade, nMaxVersion))\n+    if (!pWalletManager->LoadWallet(\"\", ossErrors, fRescan, fUpgrade, nMaxVersion))\n     {\n         printf(\"Failed to load default wallet: %s\\nExiting...\\n\", ossErrors.str().c_str());\n         return false;\n@@ -454,7 +454,7 @@ bool LoadWallets(ostringstream& strErrors)\n     BOOST_FOREACH(const string& strWalletName, setWalletNames)\n     {\n         ostringstream strLoadErrors;\n-        if (!pWalletMap->LoadWallet(strWalletName, strLoadErrors, fRescan, fUpgrade, nMaxVersion))\n+        if (!pWalletManager->LoadWallet(strWalletName, strLoadErrors, fRescan, fUpgrade, nMaxVersion))\n         {\n             strErrors << strLoadErrors.str();\n             printf(\"Error loading wallet %s: %s\\n\", strWalletName.c_str(), strLoadErrors.str().c_str());\n@@ -912,7 +912,7 @@ bool AppInit2()\n     printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n     printf(\"nBestHeight = %d\\n\",                   nBestHeight);\n     \n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->GetWalletMap())\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletManager->GetWalletMap())\n     {\n         printf(\"Setting properties for wallet \\\"%s\\\"...\\n\", item.first.c_str());\n         printf(\"  setKeyPool.size() = %\"PRIszu\"\\n\",      item.second->setKeyPool.size());"
      },
      {
        "sha": "2782cc10de6a04b5963ace366ef07bc2088a9a09",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"wallet.h\"\n \n-extern CWalletMap* pWalletMap;\n+extern CWalletManager* pWalletManager;\n \n void StartShutdown();\n void Shutdown(void* parg);"
      },
      {
        "sha": "0b19438f78d137683c619f5465abea2508714981",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -4216,7 +4216,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     boost::shared_ptr<CWallet> spWallet;\n                     try\n                     {\n-                        spWallet = pWalletMap->GetDefaultWallet();\n+                        spWallet = pWalletManager->GetDefaultWallet();\n                     }\n                     catch (...)\n                     {"
      },
      {
        "sha": "63ccfe52b7cb037bc4998ef4688348cf92e0dca3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -1933,10 +1933,11 @@ void StartNode(void* parg)\n     // Generate coins in the background\n     try\n     {\n-        GenerateBitcoins(GetBoolArg(\"-gen\", false), pWalletMap->GetDefaultWallet().get());\n+        GenerateBitcoins(GetBoolArg(\"-gen\", false), pWalletManager->GetDefaultWallet().get());\n     }\n-    catch (...)\n+    catch (const CWalletManagerException& e)\n     {\n+        printf(\"StartNode() Error: %s\\n\", e.what());\n     }\n }\n "
      },
      {
        "sha": "3a9568fa62e99b52f07adf7900a737e6629e5c14",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -228,7 +228,7 @@ int main(int argc, char *argv[])\n                     splash.finish(&window);\n \n                 ClientModel clientModel(&optionsModel);\n-                WalletModel walletModel(pWalletMap->GetDefaultWallet().get(), &optionsModel);\n+                WalletModel walletModel(pWalletManager->GetDefaultWallet().get(), &optionsModel);\n \n                 window.setClientModel(&clientModel);\n                 window.setWalletModel(&walletModel);"
      },
      {
        "sha": "58688cb4b4e21ebe6d29b0a93ec6f26c12d4f04b",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -131,7 +131,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!pWalletMap->GetDefaultWallet()->GetKey(keyID, key))\n+    if (!pWalletManager->GetDefaultWallet()->GetKey(keyID, key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "30fd021aab26d67e37f64de5f4177bf81c4a4a95",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -45,7 +45,7 @@ Value setgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n \n     try\n     {\n-        GenerateBitcoins(fGenerate, pWalletMap->GetDefaultWallet().get());\n+        GenerateBitcoins(fGenerate, pWalletManager->GetDefaultWallet().get());\n     }\n     catch (const CWalletManagerException& e)\n     {\n@@ -117,7 +117,7 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n     boost::shared_ptr<CWallet> spWallet;\n     try\n     {\n-        spWallet = pWalletMap->GetDefaultWallet();\n+        spWallet = pWalletManager->GetDefaultWallet();\n     }\n     catch (const CWalletManagerException& e)\n     {\n@@ -201,7 +201,7 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n         boost::shared_ptr<CWallet> spWallet;\n         try\n         {\n-            spWallet = pWalletMap->GetDefaultWallet();\n+            spWallet = pWalletManager->GetDefaultWallet();\n         }\n         catch (const CWalletManagerException& e)\n         {\n@@ -277,7 +277,7 @@ Value getblocktemplate(CWallet* pWallet, const Array& params, bool fHelp)\n     boost::shared_ptr<CWallet> spWallet;\n     try\n     {\n-        spWallet = pWalletMap->GetDefaultWallet();\n+        spWallet = pWalletManager->GetDefaultWallet();\n     }\n     catch (const CWalletManagerException& e)\n     {"
      },
      {
        "sha": "6bf02220ac8b7bfb111cf28e5d5ba0aa544c04c4",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -71,7 +71,7 @@ Value getinfo(CWallet* pWallet, const Array& params, bool fHelp)\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n-    obj.push_back(Pair(\"wallets\",       pWalletMap->GetWalletCount()));\n+    obj.push_back(Pair(\"wallets\",       pWalletManager->GetWalletCount()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n@@ -1546,7 +1546,7 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n             \"Returns list of wallets.\");\n     \n     Object obj;\n-    BOOST_FOREACH(const wallet_map::value_type& item, pWalletMap->GetWalletMap())\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletManager->GetWalletMap())\n     {\n         Object objWallet;\n         objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n@@ -1572,7 +1572,7 @@ Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n     string strWalletName = params[0].get_str();\n     try \n     {\n-        spWallet = pWalletMap->GetWallet(strWalletName);\n+        spWallet = pWalletManager->GetWallet(strWalletName);\n     }\n     catch (const CWalletManagerException& e)\n     {\n@@ -1610,15 +1610,15 @@ Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n \n     string strWalletName = params[0].get_str();\n \n-    if (pWalletMap->HaveWallet(strWalletName))\n+    if (pWalletManager->HaveWallet(strWalletName))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" is already loaded.\");\n \n     ostringstream strErrors;\n     bool fRescan = (params.size() > 1) ? params[1].get_bool() : false;\n     bool fUpgrade = (params.size() > 2) ? params[2].get_bool() : false;\n     int nMaxVersion = (params.size() > 3) ? params[3].get_int() : 0;\n \n-    if (!pWalletMap->LoadWallet(strWalletName, strErrors, fRescan, fUpgrade, nMaxVersion))\n+    if (!pWalletManager->LoadWallet(strWalletName, strErrors, fRescan, fUpgrade, nMaxVersion))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"Load failed: \") + strErrors.str());\n \n     return string(\"Wallet \") + strWalletName + \" loaded.\";\n@@ -1635,7 +1635,7 @@ Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n \n     if (strWalletName.size() == 0)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Default wallet cannot be unloaded.\");    \n-    if (!pWalletMap->UnloadWallet(strWalletName))\n+    if (!pWalletManager->UnloadWallet(strWalletName))\n         throw JSONRPCError(RPC_WALLET_ERROR, string(\"No wallet named \") + strWalletName + \" is currently loaded.\");\n \n     return string(\"Wallet \") + strWalletName + \" unloaded.\";"
      },
      {
        "sha": "392a5e41012b949df54c797a452481b920adc78a",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -14,7 +14,7 @@ GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(walletdb.ReorderTransactions(pWalletMap->GetDefaultWallet().get()) == DB_LOAD_OK);\n+    BOOST_CHECK(walletdb.ReorderTransactions(pWalletManager->GetDefaultWallet().get()) == DB_LOAD_OK);\n     walletdb.ListAccountCreditDebit(\"\", aes);\n     BOOST_FOREACH(CAccountingEntry& ae, aes)\n     {\n@@ -24,7 +24,7 @@ GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n \n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n-    CWalletDB walletdb(pWalletMap->GetDefaultWallet()->strWalletFile);\n+    CWalletDB walletdb(pWalletManager->GetDefaultWallet()->strWalletFile);\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n@@ -38,8 +38,8 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     walletdb.WriteAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pWalletMap->GetDefaultWallet()->AddToWallet(wtx);\n-    vpwtx.push_back(&pWalletMap->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n+    pWalletManager->GetDefaultWallet()->AddToWallet(wtx);\n+    vpwtx.push_back(&pWalletManager->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     GetResults(walletdb, results);\n \n-    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 3);\n+    BOOST_CHECK(pWalletManager->GetDefaultWallet()->nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(results[0].strComment.empty());\n@@ -60,13 +60,13 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n-    ae.nOrderPos = pWalletMap->GetDefaultWallet()->IncOrderPosNext();\n+    ae.nOrderPos = pWalletManager->GetDefaultWallet()->IncOrderPosNext();\n     walletdb.WriteAccountingEntry(ae);\n \n     GetResults(walletdb, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 4);\n+    BOOST_CHECK(pWalletManager->GetDefaultWallet()->nOrderPosNext == 4);\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n     BOOST_CHECK(results[2].nTime == 1333333336);\n@@ -76,21 +76,21 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     wtx.mapValue[\"comment\"] = \"y\";\n     --wtx.nLockTime;  // Just to change the hash :)\n-    pWalletMap->GetDefaultWallet()->AddToWallet(wtx);\n-    vpwtx.push_back(&pWalletMap->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n+    pWalletManager->GetDefaultWallet()->AddToWallet(wtx);\n+    vpwtx.push_back(&pWalletManager->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n     --wtx.nLockTime;  // Just to change the hash :)\n-    pWalletMap->GetDefaultWallet()->AddToWallet(wtx);\n-    vpwtx.push_back(&pWalletMap->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n+    pWalletManager->GetDefaultWallet()->AddToWallet(wtx);\n+    vpwtx.push_back(&pWalletManager->GetDefaultWallet()->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n     GetResults(walletdb, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 6);\n+    BOOST_CHECK(pWalletManager->GetDefaultWallet()->nOrderPosNext == 6);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     GetResults(walletdb, results);\n \n     BOOST_CHECK(results.size() == 4);\n-    BOOST_CHECK(pWalletMap->GetDefaultWallet()->nOrderPosNext == 7);\n+    BOOST_CHECK(pWalletManager->GetDefaultWallet()->nOrderPosNext == 7);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);"
      },
      {
        "sha": "f312be5fb07d9eb24d43c83dc6a629fcc8ed94ba",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -48,7 +48,7 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    CReserveKey reservekey(pWalletMap->GetDefaultWallet().get());\n+    CReserveKey reservekey(pWalletManager->GetDefaultWallet().get());\n     CBlock *pblock;\n     CTransaction tx;\n     CScript script;"
      },
      {
        "sha": "809b319ede4b30da6a0217751ff7c8b9f63334e4",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -2,7 +2,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"init.h\" // for pWalletMap\n+#include \"init.h\" // for pWalletManager\n #include \"base58.h\"\n #include \"util.h\"\n #include \"bitcoinrpc.h\"\n@@ -35,30 +35,30 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n \n     Value v;\n     CBitcoinAddress address;\n-    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, address1Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(1, address1Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(1, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(2, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(0), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, address1Hex), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(0), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(1), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(2, address1Hex), false), runtime_error);\n \n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, \"\"), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(1, \"\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n \n     string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, short1.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(2, short1.c_str()), false), runtime_error);\n \n     string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n-    BOOST_CHECK_THROW(addmultisig(pWalletMap->GetDefaultWallet().get(), createArgs(2, short2.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pWalletManager->GetDefaultWallet().get(), createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n static Value CallRPC(string args)\n@@ -71,7 +71,7 @@ static Value CallRPC(string args)\n \n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        Value result = (*method)(pWalletMap->GetDefaultWallet().get(), params, false);\n+        Value result = (*method)(pWalletManager->GetDefaultWallet().get(), params, false);\n         return result;\n     }\n     catch (Object& objError)"
      },
      {
        "sha": "36e87a8f48f557c4f7ad879a3af6915718f601b7",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -8,7 +8,7 @@\n #include \"wallet.h\"\n #include \"util.h\"\n \n-CWalletMap* pWalletMap;\n+CWalletManager* pWalletManager;\n CClientUIInterface uiInterface;\n \n extern bool fPrintToConsole;\n@@ -29,14 +29,14 @@ struct TestingSetup {\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n         LoadBlockIndex();\n-        pWalletMap = new CWalletMap();\n+        pWalletManager = new CWalletManager();\n         std::ostringstream ossErrors;\n-        pWalletMap->LoadWallet(\"\", ossErrors);\n+        pWalletManager->LoadWallet(\"\", ossErrors);\n     }\n     ~TestingSetup()\n     {\n-        delete pWalletMap;\n-        pWalletMap = NULL;\n+        delete pWalletManager;\n+        pWalletManager = NULL;\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;"
      },
      {
        "sha": "e42ee0c39eb34c7eb7d4efd3ed6f8b7b3017dd3b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -1819,21 +1819,21 @@ bool static InitWarning(const std::string &str)\n \n // TODO: Remove dependencies for I/O on printf to debug.log, InitError, and InitWarning\n // TODO: Fix error handling.\n-bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n+bool CWalletManager::LoadWallet(const string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n {\n     // Check that the wallet name is valid\n-    if (!CWalletMap::IsValidName(strName))\n+    if (!CWalletManager::IsValidName(strName))\n     {\n         strErrors << _(\"Wallet name may only contain letters, numbers, and underscores.\");\n         return false;\n     }\n \n-    ENTER_CRITICAL_SECTION(cs_WalletMap);\n+    ENTER_CRITICAL_SECTION(cs_WalletManager);\n \n     // Check that wallet is not already loaded\n     if (wallets.count(strName) > 0)\n     {\n-        LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n         strErrors << _(\"A wallet with that name is already loaded.\");\n         return false;\n     }\n@@ -1858,13 +1858,13 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     }\n     catch (const exception& e)\n     {\n-        LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n         strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile << \": \" << e.what();\n         return false;\n     }\n     catch (...)\n     {\n-        LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n         strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile;\n         return false;\n     }\n@@ -1873,7 +1873,7 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n         {\n-            LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+            LEAVE_CRITICAL_SECTION(cs_WalletManager);\n             strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n             delete pWallet;\n             return false;\n@@ -1889,7 +1889,7 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n             strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n-            LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+            LEAVE_CRITICAL_SECTION(cs_WalletManager);\n             strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n             printf(\"%s\", strErrors.str().c_str());\n             return InitError(strErrors.str());\n@@ -1933,7 +1933,7 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     this->wallets[strName] = spWallet;\n     RegisterWallet(pWallet);\n \n-    LEAVE_CRITICAL_SECTION(cs_WalletMap);\n+    LEAVE_CRITICAL_SECTION(cs_WalletManager);\n \n     CBlockIndex *pindexRescan = pindexBest;\n     if (fRescan)\n@@ -1957,10 +1957,10 @@ bool CWalletMap::LoadWallet(const string& strName, ostringstream& strErrors, boo\n     return true;\n }\n \n-bool CWalletMap::UnloadWallet(const std::string& strName)\n+bool CWalletManager::UnloadWallet(const std::string& strName)\n {\n     {\n-        LOCK(cs_WalletMap);\n+        LOCK(cs_WalletManager);\n         if (!wallets.count(strName)) return false;\n         boost::shared_ptr<CWallet> spWallet(wallets[strName]);\n         CWallet* pWallet = spWallet.get();\n@@ -1973,10 +1973,10 @@ bool CWalletMap::UnloadWallet(const std::string& strName)\n     return true;\n }\n \n-void CWalletMap::UnloadAllWallets()\n+void CWalletManager::UnloadAllWallets()\n {\n     {\n-        LOCK(cs_WalletMap);\n+        LOCK(cs_WalletManager);\n         vector<string> vstrNames;\n         vector<boost::shared_ptr<CWallet> > vpWallets;\n         BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n@@ -1997,33 +1997,33 @@ void CWalletMap::UnloadAllWallets()\n     }\n }\n \n-boost::shared_ptr<CWallet> CWalletMap::GetWallet(const string& strName)\n+boost::shared_ptr<CWallet> CWalletManager::GetWallet(const string& strName)\n {\n     {\n-        LOCK(cs_WalletMap);\n+        LOCK(cs_WalletManager);\n         if (!wallets.count(strName))\n             throw CWalletManagerException(CWalletManagerException::WALLET_NOT_LOADED,\n-                                          \"CWalletMap::GetWallet() - Wallet not loaded.\");\n+                                          \"CWalletManager::GetWallet() - Wallet not loaded.\");\n         return wallets[strName];\n     }\n }\n \n-const boost::regex CWalletMap::WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n-const boost::regex CWalletMap::WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n+const boost::regex CWalletManager::WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n+const boost::regex CWalletManager::WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n \n-bool CWalletMap::IsValidName(const string& strName)\n+bool CWalletManager::IsValidName(const string& strName)\n {\n-    return boost::regex_match(strName, CWalletMap::WALLET_NAME_REGEX);\n+    return boost::regex_match(strName, CWalletManager::WALLET_NAME_REGEX);\n }\n \n-vector<string> CWalletMap::GetWalletsAtPath(const boost::filesystem::path& pathWallets)\n+vector<string> CWalletManager::GetWalletsAtPath(const boost::filesystem::path& pathWallets)\n {\n     vector<string> vstrFiles = GetFilesAtPath(pathWallets, file_option_flags::REGULAR_FILES);\n     vector<string> vstrNames;\n     boost::cmatch match;\n     BOOST_FOREACH(const string& strFile, vstrFiles)\n     {\n-        if (boost::regex_match(strFile.c_str(), match, CWalletMap::WALLET_FILE_REGEX))\n+        if (boost::regex_match(strFile.c_str(), match, CWalletManager::WALLET_FILE_REGEX))\n             vstrNames.push_back(string(match[1].first, match[1].second));\n     }\n     return vstrNames;"
      },
      {
        "sha": "35ff019d8b3d8d035e16eeaea3c7d6cbab3e3a58",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3e40b96f1104076ec44b10bc5a04abaae08b2f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "patch": "@@ -331,20 +331,20 @@ class CWalletManagerException : public std::runtime_error\n     CWalletManagerException(ErrorType _type, const char* message) : std::runtime_error(message), type(_type)  { }\n };\n \n-/** A CWalletMap associates wallets with names and automatically deallocates them upon destruction.\n+/** A CWalletManager handles loading, unloading, allocation, deallocation, and synchronization of wallet objects.\n  */\n typedef std::map<std::string, boost::shared_ptr<CWallet> > wallet_map;\n-class CWalletMap\n+class CWalletManager\n {\n protected:\n     static const boost::regex WALLET_NAME_REGEX;\n     static const boost::regex WALLET_FILE_REGEX;\n \n-    mutable CCriticalSection cs_WalletMap;\n+    mutable CCriticalSection cs_WalletManager;\n     wallet_map wallets;\n     \n public:\n-    ~CWalletMap() { UnloadAllWallets(); }\n+    ~CWalletManager() { UnloadAllWallets(); }\n     \n     bool LoadWallet(const std::string& strName, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n     bool UnloadWallet(const std::string& strName);"
      }
    ]
  },
  {
    "sha": "3944f1d06134285674dd61fb7e945289ded9e485",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTQ0ZjFkMDYxMzQyODU2NzRkZDYxZmI3ZTk0NTI4OWRlZDllNDg1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-12T17:57:29Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T06:42:26Z"
      },
      "message": "Added Timer",
      "tree": {
        "sha": "b73019c4ea1532b035eea0a51e837d1423fc2502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b73019c4ea1532b035eea0a51e837d1423fc2502"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3944f1d06134285674dd61fb7e945289ded9e485",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3944f1d06134285674dd61fb7e945289ded9e485",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3944f1d06134285674dd61fb7e945289ded9e485",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3944f1d06134285674dd61fb7e945289ded9e485/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3e40b96f1104076ec44b10bc5a04abaae08b2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3e40b96f1104076ec44b10bc5a04abaae08b2f"
      }
    ],
    "stats": {
      "total": 359,
      "additions": 352,
      "deletions": 7
    },
    "files": [
      {
        "sha": "727c518bcf61c7e68ad6e0866c797b27129e6338",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -199,7 +199,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/clientversion.h \\\n     src/txdb.h \\\n     src/leveldb.h \\\n-    src/threadsafety.h\n+    src/threadsafety.h \\\n+    src/timer.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\\n@@ -261,7 +262,8 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/rpcconsole.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n-    src/txdb.cpp\n+    src/txdb.cpp \\\n+    src/timer.cpp\n \n RESOURCES += \\\n     src/qt/bitcoin.qrc"
      },
      {
        "sha": "0fc0e27f4f128f81164d4b27d633135913dd84fe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -10,6 +10,7 @@\n #include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n+#include \"timer.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -98,6 +99,7 @@ void Shutdown(void* parg)\n         bitdb.Flush(true);\n         boost::filesystem::remove(GetPidFile());\n         delete pWalletManager;\n+        TimerThread::StopTimer(); // for walletpassphrase unlock\n         NewThread(ExitTimeout, NULL);\n         Sleep(50);\n         printf(\"Bitcoin exited\\n\\n\");\n@@ -869,8 +871,10 @@ bool AppInit2()\n     \n     uiInterface.InitMessage(_(\"Loading wallets...\"));\n     printf(\"Loading wallets...\\n\");\n+\n+    TimerThread::StartTimer(); // for walletpassphrase unlock\n     if (!LoadWallets(strErrors)) return false;\n-    \n+\n     // ********************************************************* Step 9: import blocks\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain"
      },
      {
        "sha": "c3ccfd0cbcc56d0eaccd5b1809c65b6a7f563c13",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -85,7 +85,8 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/timer.o\n \n all: bitcoind.exe\n "
      },
      {
        "sha": "a0224815ae63e4730ab7d509c0dd926946053aa1",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -81,7 +81,8 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/timer.o\n \n \n all: bitcoind.exe"
      },
      {
        "sha": "70faf0a4e1cfb9a796a3ffa0bb6c4ba96661ae47",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -100,7 +100,8 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/timer.o\n \n ifndef USE_UPNP\n \toverride USE_UPNP = -"
      },
      {
        "sha": "30f33d16ca5704c31f07e86f4667c7ef4e3709e4",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -130,7 +130,8 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/timer.o\n \n \n all: bitcoind"
      },
      {
        "sha": "92ee0313ee4c763b5841b6f2df45cdfa8acb7db3",
        "filename": "src/test/timertest.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/test/timertest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/test/timertest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timertest.cpp?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -0,0 +1,64 @@\n+#include \"timer.h\"\n+#include <iostream>\n+#include <string>\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static boost::mutex mutex;\n+\n+class COutJob : public CTimerJob\n+{\n+private:\n+    string name;\n+    int dur;\n+    \n+public:\n+    COutJob(const string& _name, int _dur = 0) : name(_name), dur(_dur) { }\n+    \n+    void Run()\n+    {\n+        mutex.lock();\n+        cout << name << \" started\" << endl;\n+        mutex.unlock();\n+        \n+        sleep(dur);\n+        \n+        mutex.lock();\n+        cout << name << \" finished.\" << endl;\n+        mutex.unlock();\n+    }\n+    \n+    ~COutJob()\n+    {\n+        mutex.lock();\n+        cout << name << \" destroyed.\" << endl;\n+        mutex.unlock();\n+    }\n+    \n+};\n+\n+boost::system_time SecsFromNow(int s)\n+{\n+    return boost::get_system_time() + boost::posix_time::seconds(s);\n+}\n+\n+int main()\n+{\n+    TimerThread::StartTimer();\n+    COutJob* pJob1 = new COutJob(\"Job1\", 0);\n+    COutJob* pJob2 = new COutJob(\"Job2\", 0);\n+    COutJob* pJob3 = new COutJob(\"Job3\", 0);\n+    COutJob* pJob4 = new COutJob(\"Job4\", 0);\n+    pJob1->Schedule(SecsFromNow(7));\n+    pJob2->Schedule(SecsFromNow(4));\n+    pJob3->Schedule(SecsFromNow(2));\n+    sleep(3);\n+    pJob4->Schedule(SecsFromNow(2));\n+    delete pJob1;\n+    delete pJob2;\n+    delete pJob3;\n+    sleep(5);\n+    delete pJob4;\n+    TimerThread::StopTimer();\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "79e061afc19aa792f0100bf764d80a0af860446e",
        "filename": "src/timer.cpp",
        "status": "added",
        "additions": 216,
        "deletions": 0,
        "changes": 216,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/timer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/timer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timer.cpp?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -0,0 +1,216 @@\n+#include \"timer.h\"\n+\n+#include <boost/thread/thread.hpp>\n+#include <boost/thread/thread_time.hpp>\n+#include <boost/thread/mutex.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+\n+#include <set>\n+#include <assert.h>\n+#include <stdio.h>\n+\n+typedef std::pair<boost::system_time, CTimerJob*> tref_t;\n+\n+/** Manager for scheduled timer jobs */\n+class CTimer {\n+    typedef std::set<tref_t> set_t;\n+\n+    // mutex for all internal variables, AND for the private fields in\n+    // CTimerJobs.\n+    boost::mutex mutex;\n+\n+    // The scheduled jobs.\n+    set_t jobs;\n+\n+    // Waited upon by the scheduler thread when no jobs need to run.\n+    boost::condition_variable condTimer;\n+\n+    // Waited upon by Exit() before exit.\n+    boost::condition_variable condExit;\n+\n+    // Waited upon by Unschedule/Schedule, while the Job is already running.\n+    boost::condition_variable condJobDone;\n+\n+    // Whether we need to shut down.\n+    bool fExit;\n+\n+    // Whether the scheduler thread is running.\n+    bool fRunning;\n+\n+    // @pre: job is not running or scheduled\n+    // @pre: lock on mutex is acquired\n+    void Schedule_(CTimerJob *job, const boost::system_time &time) {\n+        job->_scheduled = true;\n+        job->_time = time;\n+        std::pair<set_t::iterator,bool> ret = jobs.insert(std::make_pair(time, job));\n+        if (ret.first == jobs.begin())\n+            condTimer.notify_one();\n+    }\n+\n+    // @pre: lock on mutex is acquired in lock\n+    // @return: whether the job needed unscheduling\n+    bool Unschedule_(CTimerJob *job, boost::unique_lock<boost::mutex> &lock) {\n+        if (job->_scheduled) {\n+            tref_t ref(job->_time, job);\n+            jobs.erase(ref);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    // @pre: no job is running\n+    // @pre: lock on mutex is acquired in lock\n+    CTimerJob *Wait_(boost::unique_lock<boost::mutex> &lock) {\n+        while (fExit || jobs.empty() || boost::get_system_time() < jobs.begin()->first) {\n+            if (fExit)\n+                return NULL;\n+            if (jobs.empty())\n+                condTimer.wait(lock);\n+            else\n+                condTimer.timed_wait(lock, jobs.begin()->first);\n+        }\n+        CTimerJob *job = jobs.begin()->second;\n+        assert(job->_scheduled == true);\n+        assert(job->_running == false);\n+        job->_scheduled = false;\n+        job->_running = true;\n+        jobs.erase(jobs.begin());\n+        return job;\n+    }\n+\n+    // @pre: lock on mutex is acquired\n+    // @pre: job is running\n+    void Done_(CTimerJob *job, boost::unique_lock<boost::mutex> &lock) {\n+        assert(job->_running == true);\n+        job->_running = false;\n+        if (job->_autodelete && !job->_scheduled) {\n+            job->_autodelete = false;\n+            // calling delete runs Unschedule_, which needs the mutex, so give\n+            // it up temporarily.\n+            lock.unlock();\n+            delete job;\n+            lock.lock();\n+        }\n+        condJobDone.notify_one();\n+    }\n+\n+public:\n+    // Construct a timer.\n+    CTimer() : fExit(false), fRunning(false) {}\n+\n+    // Schedule a job.\n+    void Schedule(CTimerJob *job, const boost::system_time &time) {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+\n+        // Once fExit is set, only Exit() modifies the state still\n+        if (fExit)\n+            return;\n+\n+        // Unschedule the job, if necessary (but leave it running if it is)\n+        Unschedule_(job, lock);\n+\n+        // (Re)schedule the job\n+        Schedule_(job, time);\n+    }\n+\n+    // Unschedule a job (and wait for it to stop running, if necessary)\n+    bool Unschedule(CTimerJob *job) {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+\n+        // Once fExit is set, only Exit() modifies the state still\n+        if (fExit)\n+            return false;\n+\n+        // Wait until the job stops running\n+        while (job->_running)\n+            condJobDone.wait(lock);\n+\n+        return Unschedule_(job, lock);\n+    }\n+\n+    // Run the scheduler thread.\n+    void Run() {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        if (fRunning)\n+            return;\n+        fRunning = true;\n+        while (CTimerJob *job = Wait_(lock)) {\n+            lock.unlock();\n+            try {\n+                job->Run();\n+            } catch(...) {\n+            }\n+            lock.lock();\n+            Done_(job, lock);\n+        }\n+        fRunning = false;\n+        condExit.notify_all();\n+    }\n+\n+    // Shut down the manager.\n+    void Exit() {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+\n+        // Mark manager as shutting down, and notify waiters\n+        fExit = true;\n+        condTimer.notify_all();\n+\n+        // wait until Run finished\n+        while (fRunning)\n+            condExit.wait(lock);\n+\n+        // Unschedule (and autodelete) remaining jobs\n+        for (set_t::iterator it = jobs.begin(); it != jobs.end();) {\n+            it->second->_scheduled = false;\n+            assert(it->second->_running == false);\n+            if (it->second->_autodelete) {\n+                lock.unlock();\n+                delete it->second;\n+                lock.lock();\n+            }\n+            set_t::iterator it2 = it++;\n+            jobs.erase(it2);\n+        }\n+    }\n+};\n+\n+static CTimer timer;\n+\n+void static thread() {\n+    timer.Run();\n+}\n+    \n+void TimerThread::StartTimer() {\n+    boost::thread t(thread);\n+}\n+\n+void TimerThread::StopTimer() {\n+    timer.Exit();\n+}\n+\n+void CTimerJob::Schedule(const boost::system_time &time) {\n+    timer.Schedule(this, time);\n+}\n+\n+void CTimerJob::Schedule(const boost::posix_time::time_duration &dur) {\n+    timer.Schedule(this, boost::get_system_time() + dur);\n+}\n+\n+bool CTimerJob::Unschedule() {\n+    return timer.Unschedule(this);\n+}\n+\n+CTimerJob::~CTimerJob() {\n+    Unschedule();\n+}\n+\n+CTimerJob::CTimerJob(bool autodelete) : \n+    _time(boost::date_time::not_a_date_time), _running(false),\n+    _scheduled(false), _autodelete(autodelete) {}\n+\n+CTimerJob::CTimerJob(const boost::system_time &time, bool autodelete) : \n+    _time(boost::date_time::not_a_date_time), _running(false),\n+    _scheduled(false), _autodelete(autodelete) {\n+    Schedule(time);\n+}"
      },
      {
        "sha": "9fecab374e14e75fccd093d82483a3f8d032ccf3",
        "filename": "src/timer.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3944f1d06134285674dd61fb7e945289ded9e485/src/timer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3944f1d06134285674dd61fb7e945289ded9e485/src/timer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timer.h?ref=3944f1d06134285674dd61fb7e945289ded9e485",
        "patch": "@@ -0,0 +1,55 @@\n+#ifndef BITCOIN_TIMER_H_\n+#define BITCOIN_TIMER_H_\n+\n+#include <boost/thread/thread_time.hpp>\n+\n+class CTimer;\n+\n+/** A base class for jobs to be scheduled by the timer. */\n+class CTimerJob {\n+protected:\n+    // Method to be executed. Override with an actual implementation.\n+    virtual void Run() = 0;\n+\n+    // Destructor. This will automatically unschedule if necessary.\n+    virtual ~CTimerJob();\n+\n+    // Constructor for a job. Set autodelete to true for a fire-and-forget\n+    // new CTimerJobChild();.\n+    CTimerJob(bool fAutoDelete = false);\n+\n+    // Constructor for a job which automatically schedules it.\n+    CTimerJob(const boost::system_time &time, bool autodelete = false);\n+\n+public:\n+    // Unschedule this job. This will block while the job is running.\n+    // Returns whether the job was scheduled before.\n+    bool Unschedule();\n+\n+    // Schedule this job at the specified time. This will unschedule if\n+    // necessary first. It is allowed to schedule a job while it is already\n+    // running.\n+    void Schedule(const boost::system_time &time);\n+    void Schedule(const boost::posix_time::time_duration &dur);\n+\n+private:\n+    // these internal fields are only modified by CTimer itself\n+    friend class CTimer;\n+    boost::system_time _time;\n+    bool _running; // whether this job is running\n+    bool _scheduled; // whether this job is scheduled for running\n+    bool _autodelete; // whether this job is to be delete'd after running\n+};\n+\n+namespace TimerThread\n+{\n+    \n+/** Start the global timer thread */\n+void StartTimer();\n+\n+/** Stop the global timer thread */\n+void StopTimer();\n+\n+}\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "64a9b45640304e021207ebff3fde069c296ef1cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGE5YjQ1NjQwMzA0ZTAyMTIwN2ViZmYzZmRlMDY5YzI5NmVmMWNm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-13T04:17:33Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T06:42:27Z"
      },
      "message": "Integrated timer with wallet.",
      "tree": {
        "sha": "751334368da736c8c103f931d4d259b6eb5a8137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/751334368da736c8c103f931d4d259b6eb5a8137"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64a9b45640304e021207ebff3fde069c296ef1cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64a9b45640304e021207ebff3fde069c296ef1cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64a9b45640304e021207ebff3fde069c296ef1cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64a9b45640304e021207ebff3fde069c296ef1cf/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3944f1d06134285674dd61fb7e945289ded9e485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3944f1d06134285674dd61fb7e945289ded9e485",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3944f1d06134285674dd61fb7e945289ded9e485"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 113,
      "deletions": 77
    },
    "files": [
      {
        "sha": "4e49631869852074dba2458b303cc804f8e6d152",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a9b45640304e021207ebff3fde069c296ef1cf/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a9b45640304e021207ebff3fde069c296ef1cf/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=64a9b45640304e021207ebff3fde069c296ef1cf",
        "patch": "@@ -77,55 +77,14 @@ bool CCryptoKeyStore::Lock()\n {\n     if (!SetCrypted())\n         return false;\n-\n     {\n         LOCK(cs_KeyStore);\n         vMasterKey.clear();\n     }\n-\n     NotifyStatusChanged(this);\n-    nLockTime = 0;\n-        \n     return true;\n }\n \n-void CCryptoKeyStore::SleepThenLock(int64 nMyWakeTime)\n-{\n-    ENTER_CRITICAL_SECTION(cs_nLockTime);\n-    \n-    if (nLockTime == 0)\n-    {\n-        nLockTime = nMyWakeTime;\n-        \n-        do\n-        {\n-            if (nLockTime == 0)\n-                break;\n-            int64 nToSleep = nLockTime - GetTimeMillis();\n-            if (nToSleep <= 0)\n-                break;\n-            \n-            LEAVE_CRITICAL_SECTION(cs_nLockTime);\n-            Sleep(nToSleep);\n-            ENTER_CRITICAL_SECTION(cs_nLockTime);\n-            \n-        } while(1);\n-        \n-        if (nLockTime)\n-        {\n-            nLockTime = 0;\n-            Lock();\n-        }\n-    }\n-    else\n-    {\n-        if (nLockTime < nMyWakeTime)\n-            nLockTime = nMyWakeTime;\n-    }\n-    \n-    LEAVE_CRITICAL_SECTION(cs_nLockTime);\n-}\n-\n bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n {\n     {"
      },
      {
        "sha": "ab369bbf47347959e89e46ec96c94b8f5fa3a15d",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a9b45640304e021207ebff3fde069c296ef1cf/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a9b45640304e021207ebff3fde069c296ef1cf/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=64a9b45640304e021207ebff3fde069c296ef1cf",
        "patch": "@@ -114,9 +114,6 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool fUseCrypto;\n \n protected:\n-    mutable CCriticalSection cs_nLockTime;\n-    int64 nLockTime; \n-    \n     bool SetCrypted();\n \n     // will encrypt previously unencrypted keys\n@@ -125,7 +122,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n \n public:\n-    CCryptoKeyStore() : fUseCrypto(false), nLockTime(0)\n+    CCryptoKeyStore() : fUseCrypto(false)\n     {\n     }\n \n@@ -147,9 +144,6 @@ class CCryptoKeyStore : public CBasicKeyStore\n     }\n \n     bool Lock();\n-    void SleepThenLock(int64 nMyWakeTime);\n-    int64 GetLockTime() const { return nLockTime; }\n-    CCriticalSection& GetLockTimeCriticalSection() { return cs_nLockTime; }\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKey(const CKey& key);"
      },
      {
        "sha": "a698678ca2adbac6339ae2e481406bb5a1a90bf6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 28,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a9b45640304e021207ebff3fde069c296ef1cf/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a9b45640304e021207ebff3fde069c296ef1cf/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=64a9b45640304e021207ebff3fde069c296ef1cf",
        "patch": "@@ -1260,28 +1260,6 @@ void ThreadTopUpKeyPool(void* parg)\n     pWallet->TopUpKeyPool();\n }\n \n-struct CleanWalletPassphraseParams\n-{\n-    CWallet* pWallet;\n-    int64* pnSleepTime;\n-    \n-    CleanWalletPassphraseParams(CWallet* _pWallet, int64* _pnSleepTime) :\n-        pWallet(_pWallet), pnSleepTime(_pnSleepTime) { }\n-};\n-\n-void ThreadCleanWalletPassphrase(void* parg)\n-{\n-    // Make this thread recognisable as the wallet relocking thread\n-    // TODO: Give threads for different wallets distinct names.\n-    RenameThread(\"bitcoin-lock-wa\");\n-    \n-    CleanWalletPassphraseParams* pParams = (CleanWalletPassphraseParams*)parg;\n-    pParams->pWallet->SleepThenLock(GetTimeMillis() + *(pParams->pnSleepTime) * 1000);\n-\n-    delete pParams->pnSleepTime;\n-    delete pParams;\n-}\n-\n Value walletpassphrase(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n@@ -1311,11 +1289,7 @@ Value walletpassphrase(CWallet* pWallet, const Array& params, bool fHelp)\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n-    NewThread(ThreadTopUpKeyPool, pWallet);\n-    int64* pnSleepTime = new int64(params[1].get_int64());\n-    CleanWalletPassphraseParams* pcwpp = new CleanWalletPassphraseParams(pWallet, pnSleepTime);\n-    NewThread(ThreadCleanWalletPassphrase, pcwpp);\n-\n+    pWallet->TimedLock(params[1].get_int64());\n     return Value::null;\n }\n \n@@ -1551,7 +1525,8 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n         Object objWallet;\n         objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n         if (item.second->IsCrypted())\n-            objWallet.push_back(Pair(\"unlocked_until\", (boost::int64_t)item.second->GetLockTime() / 1000));        \n+            objWallet.push_back(Pair(\"unlocked_until\", item.second->GetStringLockTime()));\n+                                     //(boost::int64_t)item.second->GetLockTime() / 1000));\n         objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n         objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n         objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));"
      },
      {
        "sha": "4c40d44de1dfa52a6af3a2f65c917a99386b3e9e",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a9b45640304e021207ebff3fde069c296ef1cf/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a9b45640304e021207ebff3fde069c296ef1cf/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=64a9b45640304e021207ebff3fde069c296ef1cf",
        "patch": "@@ -11,6 +11,56 @@\n #include <boost/thread/condition_variable.hpp>\n #include \"threadsafety.h\"\n \n+\n+\n+////////////////////////////////////////////////\n+//                                            //\n+// THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n+//                                            //\n+////////////////////////////////////////////////\n+\n+/*\n+ \n+ \n+ \n+CCriticalSection mutex;\n+   boost::recursive_mutex mutex;\n+\n+LOCK(mutex); // uses the local variable criticalblock for RAII\n+   boost::unique_lock<boost::recursive_mutex> lock(mutex);\n+   lock.lock();\n+\n+LOCK2(mutex1, mutex2); // uses the local variables criticalblock1, criticalblock2 for RAII\n+   boost::unique_lock<boost::recursive_mutex> lock1(mutex1);\n+   boost::unique_lock<boost::recursive_mutex> lock2(mutex2);\n+   lock1.lock();\n+   lock2.lock();\n+\n+TRY_LOCK(mutex, name); // uses the local variable name for RAII\n+  boost::unique_lock<boost::recursive_mutex> lock(mutex);\n+  lock.try_lock();\n+\n+ENTER_CRITICAL_SECTION(mutex); // no RAII\n+  mutex.lock();\n+\n+LEAVE_CRITICAL_SECTION(mutex); // no RAII\n+  mutex.unlock();\n+ \n+ \n+ \n+ */\n+\n+\n+\n+\n+\n+\n+///////////////////////////////\n+//                           //\n+// THE MASOCHISTIC DEFINITON //\n+//                           //\n+///////////////////////////////\n+\n // Template mixin that adds -Wthread-safety locking annotations to a\n // subset of the mutex API.\n template <typename PARENT>"
      },
      {
        "sha": "a3357815b72a9e89e0383246c22ab93c2e358bf2",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a9b45640304e021207ebff3fde069c296ef1cf/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a9b45640304e021207ebff3fde069c296ef1cf/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=64a9b45640304e021207ebff3fde069c296ef1cf",
        "patch": "@@ -11,7 +11,6 @@\n \n using namespace std;\n \n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapWallet\n@@ -1708,6 +1707,35 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     return ret;\n }\n \n+bool CWallet::TimedLock(int64 seconds)\n+{\n+    if (IsLocked())\n+    {\n+        ResetLockTime();\n+        return false;\n+    }\n+    \n+    time_t rawtime;\n+    struct tm* timeinfo;\n+    time(&rawtime);\n+    timeinfo = localtime(&rawtime);\n+    \n+    char buffer[80];\n+    strftime(buffer ,80, \"%Y-%m-%d %H:%M:%S\", timeinfo);\n+    strLockTime = buffer;\n+    nLockTime = mktime(timeinfo);\n+    \n+    lockJob.Schedule(boost::posix_time::seconds(seconds));\n+    return true;\n+}\n+\n+void CWalletLockJob::Run()\n+{\n+    printf(\"---------CWalletLockJob::Run() called------------\\n\");\n+    pWallet->ResetLockTime();\n+    pWallet->Lock();\n+}\n+\n CPubKey CReserveKey::GetReservedKey()\n {\n     if (nIndex == -1)"
      },
      {
        "sha": "aa6fcf1f882e72a44f51fe3b854a8042f7586cca",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64a9b45640304e021207ebff3fde069c296ef1cf/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64a9b45640304e021207ebff3fde069c296ef1cf/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=64a9b45640304e021207ebff3fde069c296ef1cf",
        "patch": "@@ -17,12 +17,15 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"walletdb.h\"\n+#include \"timer.h\"\n \n #include <stdexcept>\n \n #include <boost/shared_ptr.hpp>\n #include <boost/regex.hpp>\n+#include <boost/thread.hpp>\n \n+class CWallet;\n class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n@@ -39,6 +42,15 @@ enum WalletFeature\n     FEATURE_LATEST = 60000\n };\n \n+class CWalletLockJob : public CTimerJob\n+{\n+private:\n+    CWallet* pWallet;\n+    \n+public:\n+    void SetWallet(CWallet* _pWallet) { pWallet = _pWallet; }\n+    void Run();\n+};\n \n /** A key pool entry */\n class CKeyPool\n@@ -76,6 +88,11 @@ class CWallet : public CCryptoKeyStore\n     bool SelectCoins(int64 nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n \n     CWalletDB *pwalletdbEncryption;\n+    \n+    // for the lock timer\n+    CWalletLockJob lockJob;\n+    int64 nLockTime;\n+    std::string strLockTime;\n \n     // the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion;\n@@ -98,6 +115,9 @@ class CWallet : public CCryptoKeyStore\n \n     CWallet()\n     {\n+        lockJob.SetWallet(this);\n+        nLockTime = 0;\n+        strLockTime = \"Locked\";\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n         fFileBacked = false;\n@@ -107,6 +127,9 @@ class CWallet : public CCryptoKeyStore\n     }\n     CWallet(std::string strWalletFileIn)\n     {\n+        lockJob.SetWallet(this);\n+        nLockTime = 0;\n+        strLockTime = \"Locked\";\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n         strWalletFile = strWalletFileIn;\n@@ -316,6 +339,13 @@ class CWallet : public CCryptoKeyStore\n      * @note called with lock cs_wallet held.\n      */\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n+    \n+    // If the wallet is unlocked, schedule a job to lock it again after a number of seconds\n+    bool TimedLock(int64 seconds);\n+    \n+    int64 GetLockTime() const { return nLockTime; }\n+    std::string GetStringLockTime() { return strLockTime; }\n+    void ResetLockTime() { nLockTime = 0; strLockTime = \"Locked\"; }\n };\n \n class CWalletManagerException : public std::runtime_error"
      }
    ]
  },
  {
    "sha": "a240960a0d3ebb8cb3f3266ea684e1909eac0629",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjQwOTYwYTBkM2ViYjhjYjNmMzI2NmVhNjg0ZTE5MDllYWMwNjI5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T05:05:56Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T15:03:58Z"
      },
      "message": "Added wallet unloading tracers. Let rpcmining methods use nondefault wallet.",
      "tree": {
        "sha": "ed62899d852a118537a0a1658071185c0a98acbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed62899d852a118537a0a1658071185c0a98acbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a240960a0d3ebb8cb3f3266ea684e1909eac0629",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a240960a0d3ebb8cb3f3266ea684e1909eac0629",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a240960a0d3ebb8cb3f3266ea684e1909eac0629",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a240960a0d3ebb8cb3f3266ea684e1909eac0629/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64a9b45640304e021207ebff3fde069c296ef1cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64a9b45640304e021207ebff3fde069c296ef1cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64a9b45640304e021207ebff3fde069c296ef1cf"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 11,
      "deletions": 60
    },
    "files": [
      {
        "sha": "9c7b06a39eb18d143675d227d3487ebb94e034fb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a240960a0d3ebb8cb3f3266ea684e1909eac0629/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a240960a0d3ebb8cb3f3266ea684e1909eac0629/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a240960a0d3ebb8cb3f3266ea684e1909eac0629",
        "patch": "@@ -4213,17 +4213,8 @@ void static BitcoinMiner(CWallet *pwallet)\n                     pblock->nNonce = ByteReverse(nNonceFound);\n                     assert(hash == pblock->GetHash());\n                     \n-                    boost::shared_ptr<CWallet> spWallet;\n-                    try\n-                    {\n-                        spWallet = pWalletManager->GetDefaultWallet();\n-                    }\n-                    catch (...)\n-                    {\n-                        break;\n-                    }\n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock.get(), *spWallet, reservekey);\n+                    CheckWork(pblock.get(), *pWalletManager->GetDefaultWallet(), reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n                     break;\n                 }"
      },
      {
        "sha": "02d94f0c9b1a58d2e14f748e0a7c721fae5a461d",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 44,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a240960a0d3ebb8cb3f3266ea684e1909eac0629/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a240960a0d3ebb8cb3f3266ea684e1909eac0629/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a240960a0d3ebb8cb3f3266ea684e1909eac0629",
        "patch": "@@ -43,14 +43,7 @@ Value setgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n     }\n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n \n-    try\n-    {\n-        GenerateBitcoins(fGenerate, pWalletManager->GetDefaultWallet().get());\n-    }\n-    catch (const CWalletManagerException& e)\n-    {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n-    }\n+    GenerateBitcoins(fGenerate, pWallet);\n \n     return Value::null;\n }\n@@ -113,18 +106,7 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n     static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n     static vector<CBlock*> vNewBlock;\n     \n-    // Get default wallet\n-    boost::shared_ptr<CWallet> spWallet;\n-    try\n-    {\n-        spWallet = pWalletManager->GetDefaultWallet();\n-    }\n-    catch (const CWalletManagerException& e)\n-    {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n-    }\n-\n-    static CReserveKey reservekey(spWallet.get());\n+    static CReserveKey reservekey(pWallet);\n \n     if (params.size() == 0)\n     {\n@@ -197,17 +179,6 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n         CBlock* pdata = (CBlock*)&vchData[0];\n \n-        // Get default wallet\n-        boost::shared_ptr<CWallet> spWallet;\n-        try\n-        {\n-            spWallet = pWalletManager->GetDefaultWallet();\n-        }\n-        catch (const CWalletManagerException& e)\n-        {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n-        }\n-\n         // Byte reverse\n         for (int i = 0; i < 128/4; i++)\n             ((unsigned int*)pdata)[i] = ByteReverse(((unsigned int*)pdata)[i]);\n@@ -222,7 +193,7 @@ Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n         pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n \n-        return CheckWork(pblock, *spWallet, reservekey);\n+        return CheckWork(pblock, *pWallet, reservekey);\n     }\n }\n \n@@ -273,18 +244,7 @@ Value getblocktemplate(CWallet* pWallet, const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n-    // Get default wallet\n-    boost::shared_ptr<CWallet> spWallet;\n-    try\n-    {\n-        spWallet = pWalletManager->GetDefaultWallet();\n-    }\n-    catch (const CWalletManagerException& e)\n-    {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n-    }\n-\n-    static CReserveKey reservekey(spWallet.get());\n+    static CReserveKey reservekey(pWallet);\n \n     // Update block\n     static unsigned int nTransactionsUpdatedLast;"
      },
      {
        "sha": "750d099d85928fbe0551725234b472836ed431c3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a240960a0d3ebb8cb3f3266ea684e1909eac0629/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a240960a0d3ebb8cb3f3266ea684e1909eac0629/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a240960a0d3ebb8cb3f3266ea684e1909eac0629",
        "patch": "@@ -1991,10 +1991,10 @@ bool CWalletManager::UnloadWallet(const std::string& strName)\n         LOCK(cs_WalletManager);\n         if (!wallets.count(strName)) return false;\n         boost::shared_ptr<CWallet> spWallet(wallets[strName]);\n-        CWallet* pWallet = spWallet.get();\n+        printf(\"Unloading wallet %s\\n\", strName.c_str());\n         {\n-            LOCK(pWallet->cs_wallet);\n-            UnregisterWallet(pWallet);\n+            LOCK(spWallet->cs_wallet);\n+            UnregisterWallet(spWallet.get());\n             wallets.erase(strName);\n         }\n     }\n@@ -2015,10 +2015,10 @@ void CWalletManager::UnloadAllWallets()\n             \n         for (unsigned int i = 0; i < vstrNames.size(); i++)\n         {\n-            CWallet* pWallet = vpWallets[i].get();\n+            printf(\"Unloading wallet %s\\n\", vstrNames[i].c_str());\n             {\n-                LOCK(pWallet->cs_wallet);\n-                UnregisterWallet(pWallet);\n+                LOCK(vpWallets[i]->cs_wallet);\n+                UnregisterWallet(vpWallets[i].get());\n                 wallets.erase(vstrNames[i]);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "41f561cad6bbb84f84449f66912253093e7fe367",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWY1NjFjYWQ2YmJiODRmODQ0NDlmNjY5MTIyNTMwOTNlN2ZlMzY3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T07:18:18Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T15:04:21Z"
      },
      "message": "Changed the way unlock time displays in listwallets.",
      "tree": {
        "sha": "7553b8e0f1b41f1e176385142db0662293b03bd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7553b8e0f1b41f1e176385142db0662293b03bd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41f561cad6bbb84f84449f66912253093e7fe367",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41f561cad6bbb84f84449f66912253093e7fe367",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41f561cad6bbb84f84449f66912253093e7fe367",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41f561cad6bbb84f84449f66912253093e7fe367/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a240960a0d3ebb8cb3f3266ea684e1909eac0629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a240960a0d3ebb8cb3f3266ea684e1909eac0629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a240960a0d3ebb8cb3f3266ea684e1909eac0629"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "18c3632d301b6c81199071810cf405ddda1b2437",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41f561cad6bbb84f84449f66912253093e7fe367/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41f561cad6bbb84f84449f66912253093e7fe367/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=41f561cad6bbb84f84449f66912253093e7fe367",
        "patch": "@@ -1524,9 +1524,12 @@ Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n     {\n         Object objWallet;\n         objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n+        objWallet.push_back(Pair(\"encrypted\",     item.second->IsCrypted()));\n         if (item.second->IsCrypted())\n-            objWallet.push_back(Pair(\"unlocked_until\", item.second->GetStringLockTime()));\n-                                     //(boost::int64_t)item.second->GetLockTime() / 1000));\n+        {\n+            objWallet.push_back(Pair(\"unlocked_until\",  (boost::int64_t)item.second->GetLockTime()));\n+            objWallet.push_back(Pair(\"unlocked_until_pretty\", item.second->GetStringLockTime()));\n+        }\n         objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n         objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n         objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));"
      },
      {
        "sha": "d52b0813afda3399f92281378183096b920abcd0",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41f561cad6bbb84f84449f66912253093e7fe367/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41f561cad6bbb84f84449f66912253093e7fe367/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=41f561cad6bbb84f84449f66912253093e7fe367",
        "patch": "@@ -1732,8 +1732,8 @@ bool CWallet::TimedLock(int64 seconds)\n void CWalletLockJob::Run()\n {\n     printf(\"---------CWalletLockJob::Run() called------------\\n\");\n-    pWallet->ResetLockTime();\n     pWallet->Lock();\n+    pWallet->ResetLockTime();\n }\n \n CPubKey CReserveKey::GetReservedKey()"
      },
      {
        "sha": "0e67036ad4672fc5ad3d95adff643f81f212ee85",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41f561cad6bbb84f84449f66912253093e7fe367/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41f561cad6bbb84f84449f66912253093e7fe367/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=41f561cad6bbb84f84449f66912253093e7fe367",
        "patch": "@@ -345,7 +345,7 @@ class CWallet : public CCryptoKeyStore\n     \n     int64 GetLockTime() const { return nLockTime; }\n     std::string GetStringLockTime() { return strLockTime; }\n-    void ResetLockTime() { nLockTime = 0; strLockTime = \"Locked\"; }\n+    void ResetLockTime() { nLockTime = 0; if (IsCrypted()) strLockTime = \"Locked\"; }\n };\n \n class CWalletManagerException : public std::runtime_error"
      }
    ]
  },
  {
    "sha": "5bb560f24b0d573caac3c34af5001583997d1f72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmI1NjBmMjRiMGQ1NzNjYWFjM2MzNGFmNTAwMTU4Mzk5N2QxZjcy",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T15:23:34Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-14T15:39:19Z"
      },
      "message": "Made wallet unlock timestamp UTC.",
      "tree": {
        "sha": "aac25540a6b0bca917a8c7c2d552549662300f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aac25540a6b0bca917a8c7c2d552549662300f28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bb560f24b0d573caac3c34af5001583997d1f72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb560f24b0d573caac3c34af5001583997d1f72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bb560f24b0d573caac3c34af5001583997d1f72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb560f24b0d573caac3c34af5001583997d1f72/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41f561cad6bbb84f84449f66912253093e7fe367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41f561cad6bbb84f84449f66912253093e7fe367",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41f561cad6bbb84f84449f66912253093e7fe367"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e788cfefdccdfc0b6949c5037367767c409f068f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bb560f24b0d573caac3c34af5001583997d1f72/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bb560f24b0d573caac3c34af5001583997d1f72/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5bb560f24b0d573caac3c34af5001583997d1f72",
        "patch": "@@ -1715,15 +1715,14 @@ bool CWallet::TimedLock(int64 seconds)\n         return false;\n     }\n     \n-    time_t rawtime;\n-    struct tm* timeinfo;\n-    time(&rawtime);\n-    timeinfo = localtime(&rawtime);\n+    time_t rawtime = time(NULL) + seconds;\n+    rawtime += seconds;\n+    nLockTime = rawtime;\n+    struct tm* timeinfo = gmtime(&rawtime);\n     \n     char buffer[80];\n-    strftime(buffer ,80, \"%Y-%m-%d %H:%M:%S\", timeinfo);\n+    strftime(buffer ,80, \"%Y-%m-%d %H:%M:%S (UTC)\", timeinfo);\n     strLockTime = buffer;\n-    nLockTime = mktime(timeinfo);\n     \n     lockJob.Schedule(boost::posix_time::seconds(seconds));\n     return true;"
      }
    ]
  },
  {
    "sha": "5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjQyOWI4YzcwNjJlOTdjMzQ3OGFmM2JjNTI3M2ZmOGY2ZGFhNDNj",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-19T07:58:48Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-19T12:51:37Z"
      },
      "message": "Merged multiwallet(5bb560f) with master.",
      "tree": {
        "sha": "6b466a13c93e3373521f237c559b1b4471c0d249",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b466a13c93e3373521f237c559b1b4471c0d249"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35c12d176e13d51456db8f0e9fa0c398891a1fab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35c12d176e13d51456db8f0e9fa0c398891a1fab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35c12d176e13d51456db8f0e9fa0c398891a1fab"
      },
      {
        "sha": "5bb560f24b0d573caac3c34af5001583997d1f72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb560f24b0d573caac3c34af5001583997d1f72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bb560f24b0d573caac3c34af5001583997d1f72"
      }
    ],
    "stats": {
      "total": 1929,
      "additions": 1404,
      "deletions": 525
    },
    "files": [
      {
        "sha": "6973cc1af3224f6745cb518206564ed8557772dd",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -201,6 +201,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/clientversion.h \\\n     src/txdb.h \\\n     src/leveldb.h \\\n+    src/timer.h \\\n     src/threadsafety.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n@@ -265,6 +266,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/rpcconsole.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n+    src/timer.cpp \\\n     src/txdb.cpp\n \n RESOURCES += \\\n@@ -387,7 +389,7 @@ LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB\n LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n # -lgdi32 has to happen after -lcrypto (see  #681)\n windows:LIBS += -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32\n-LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n+LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX -lboost_regex$$BOOST_LIB_SUFFIX\n windows:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n \n contains(RELEASE, 1) {"
      },
      {
        "sha": "97288ab52e0085b06dcf85d39cc5749a89906c7b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 69,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -141,7 +141,7 @@ string CRPCTable::help(string strCommand) const\n             Array params;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n-                (*pfn)(params, true);\n+                (*pfn)(NULL, params, true);\n         }\n         catch (std::exception& e)\n         {\n@@ -159,7 +159,7 @@ string CRPCTable::help(string strCommand) const\n     return strRet;\n }\n \n-Value help(const Array& params, bool fHelp)\n+Value help(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -174,7 +174,7 @@ Value help(const Array& params, bool fHelp)\n }\n \n \n-Value stop(const Array& params, bool fHelp)\n+Value stop(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     // Accept the deprecated and ignored 'detach\u00b4 boolean argument\n     if (fHelp || params.size() > 1)\n@@ -194,68 +194,72 @@ Value stop(const Array& params, bool fHelp)\n \n \n static const CRPCCommand vRPCCommands[] =\n-{ //  name                      function                 safemd  unlocked\n-  //  ------------------------  -----------------------  ------  --------\n-    { \"help\",                   &help,                   true,   true },\n-    { \"stop\",                   &stop,                   true,   true },\n-    { \"getblockcount\",          &getblockcount,          true,   false },\n-    { \"getconnectioncount\",     &getconnectioncount,     true,   false },\n-    { \"getpeerinfo\",            &getpeerinfo,            true,   false },\n-    { \"getdifficulty\",          &getdifficulty,          true,   false },\n-    { \"getgenerate\",            &getgenerate,            true,   false },\n-    { \"setgenerate\",            &setgenerate,            true,   false },\n-    { \"gethashespersec\",        &gethashespersec,        true,   false },\n-    { \"getinfo\",                &getinfo,                true,   false },\n-    { \"getmininginfo\",          &getmininginfo,          true,   false },\n-    { \"getnewaddress\",          &getnewaddress,          true,   false },\n-    { \"getaccountaddress\",      &getaccountaddress,      true,   false },\n-    { \"setaccount\",             &setaccount,             true,   false },\n-    { \"getaccount\",             &getaccount,             false,  false },\n-    { \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,   false },\n-    { \"sendtoaddress\",          &sendtoaddress,          false,  false },\n-    { \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,  false },\n-    { \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,  false },\n-    { \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,  false },\n-    { \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,  false },\n-    { \"backupwallet\",           &backupwallet,           true,   false },\n-    { \"keypoolrefill\",          &keypoolrefill,          true,   false },\n-    { \"walletpassphrase\",       &walletpassphrase,       true,   false },\n-    { \"walletpassphrasechange\", &walletpassphrasechange, false,  false },\n-    { \"walletlock\",             &walletlock,             true,   false },\n-    { \"encryptwallet\",          &encryptwallet,          false,  false },\n-    { \"validateaddress\",        &validateaddress,        true,   false },\n-    { \"getbalance\",             &getbalance,             false,  false },\n-    { \"move\",                   &movecmd,                false,  false },\n-    { \"sendfrom\",               &sendfrom,               false,  false },\n-    { \"sendmany\",               &sendmany,               false,  false },\n-    { \"addmultisigaddress\",     &addmultisigaddress,     false,  false },\n-    { \"createmultisig\",         &createmultisig,         true,   true  },\n-    { \"getrawmempool\",          &getrawmempool,          true,   false },\n-    { \"getblock\",               &getblock,               false,  false },\n-    { \"getblockhash\",           &getblockhash,           false,  false },\n-    { \"gettransaction\",         &gettransaction,         false,  false },\n-    { \"listtransactions\",       &listtransactions,       false,  false },\n-    { \"listaddressgroupings\",   &listaddressgroupings,   false,  false },\n-    { \"signmessage\",            &signmessage,            false,  false },\n-    { \"verifymessage\",          &verifymessage,          false,  false },\n-    { \"getwork\",                &getwork,                true,   false },\n-    { \"listaccounts\",           &listaccounts,           false,  false },\n-    { \"settxfee\",               &settxfee,               false,  false },\n-    { \"getblocktemplate\",       &getblocktemplate,       true,   false },\n-    { \"submitblock\",            &submitblock,            false,  false },\n-    { \"listsinceblock\",         &listsinceblock,         false,  false },\n-    { \"dumpprivkey\",            &dumpprivkey,            false,  false },\n-    { \"importprivkey\",          &importprivkey,          false,  false },\n-    { \"listunspent\",            &listunspent,            false,  false },\n-    { \"getrawtransaction\",      &getrawtransaction,      false,  false },\n-    { \"createrawtransaction\",   &createrawtransaction,   false,  false },\n-    { \"decoderawtransaction\",   &decoderawtransaction,   false,  false },\n-    { \"signrawtransaction\",     &signrawtransaction,     false,  false },\n-    { \"sendrawtransaction\",     &sendrawtransaction,     false,  false },\n-    { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,   false },\n-    { \"gettxout\",               &gettxout,               true,   false },\n-    { \"lockunspent\",            &lockunspent,            false,  false },\n-    { \"listlockunspent\",        &listlockunspent,        false,  false },\n+{ //  name                      function                 safemd  unlocked  isWalletFn\n+  //  ------------------------  -----------------------  ------  --------  ----------\n+    { \"help\",                   &help,                   true,   true,     false },\n+    { \"stop\",                   &stop,                   true,   true,     false },\n+    { \"getblockcount\",          &getblockcount,          true,   false,    false },\n+    { \"getconnectioncount\",     &getconnectioncount,     true,   false,    false },\n+    { \"getpeerinfo\",            &getpeerinfo,            true,   false,    false },\n+    { \"getdifficulty\",          &getdifficulty,          true,   false,    false },\n+    { \"getgenerate\",            &getgenerate,            true,   false,    false },\n+    { \"setgenerate\",            &setgenerate,            true,   false,    false },\n+    { \"gethashespersec\",        &gethashespersec,        true,   false,    false },\n+    { \"getinfo\",                &getinfo,                true,   false,    false },\n+    { \"getmininginfo\",          &getmininginfo,          true,   false,    false },\n+    { \"getnewaddress\",          &getnewaddress,          true,   false,    true  },\n+    { \"getaccountaddress\",      &getaccountaddress,      true,   false,    true  },\n+    { \"setaccount\",             &setaccount,             true,   false,    true  },\n+    { \"getaccount\",             &getaccount,             false,  false,    true  },\n+    { \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,   false,    true  },\n+    { \"sendtoaddress\",          &sendtoaddress,          false,  false,    true  },\n+    { \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,  false,    true  },\n+    { \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,  false,    true  },\n+    { \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,  false,    true  },\n+    { \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,  false,    true  },\n+    { \"backupwallet\",           &backupwallet,           true,   false,    true  },\n+    { \"keypoolrefill\",          &keypoolrefill,          true,   false,    true  },\n+    { \"walletpassphrase\",       &walletpassphrase,       true,   false,    true  },\n+    { \"walletpassphrasechange\", &walletpassphrasechange, false,  false,    true  },\n+    { \"walletlock\",             &walletlock,             true,   false,    true  },\n+    { \"encryptwallet\",          &encryptwallet,          false,  false,    true  },\n+    { \"validateaddress\",        &validateaddress,        true,   false,    true  },\n+    { \"getbalance\",             &getbalance,             false,  false,    true  },\n+    { \"move\",                   &movecmd,                false,  false,    true  },\n+    { \"sendfrom\",               &sendfrom,               false,  false,    true  },\n+    { \"sendmany\",               &sendmany,               false,  false,    true  },\n+    { \"addmultisigaddress\",     &addmultisigaddress,     false,  false,    true  },\n+    { \"createmultisig\",         &createmultisig,         true,   true,     true  },\n+    { \"getrawmempool\",          &getrawmempool,          true,   false,    false },\n+    { \"getblock\",               &getblock,               false,  false,    false },\n+    { \"getblockhash\",           &getblockhash,           false,  false,    false },\n+    { \"gettransaction\",         &gettransaction,         false,  false,    true  },\n+    { \"listtransactions\",       &listtransactions,       false,  false,    true  },\n+    { \"listaddressgroupings\",   &listaddressgroupings,   false,  false,    true  },\n+    { \"signmessage\",            &signmessage,            false,  false,    true  },\n+    { \"verifymessage\",          &verifymessage,          false,  false,    false },\n+    { \"getwork\",                &getwork,                true,   false,    false },\n+    { \"listaccounts\",           &listaccounts,           false,  false,    true  },\n+    { \"settxfee\",               &settxfee,               false,  false,    false },\n+    { \"getblocktemplate\",       &getblocktemplate,       true,   false,    false },\n+    { \"submitblock\",            &submitblock,            false,  false,    false },\n+    { \"listsinceblock\",         &listsinceblock,         false,  false,    true  },\n+    { \"dumpprivkey\",            &dumpprivkey,            false,  false,    true  },\n+    { \"importprivkey\",          &importprivkey,          false,  false,    true  },\n+    { \"listunspent\",            &listunspent,            false,  false,    true  },\n+    { \"getrawtransaction\",      &getrawtransaction,      false,  false,    false },\n+    { \"createrawtransaction\",   &createrawtransaction,   false,  false,    false },\n+    { \"decoderawtransaction\",   &decoderawtransaction,   false,  false,    false },\n+    { \"signrawtransaction\",     &signrawtransaction,     false,  false,    true  },\n+    { \"sendrawtransaction\",     &sendrawtransaction,     false,  false,    false },\n+    { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,   false,    false },\n+    { \"gettxout\",               &gettxout,               true,   false,    true  },\n+    { \"lockunspent\",            &lockunspent,            false,  false,    true  },\n+    { \"listlockunspent\",        &listlockunspent,        false,  false,    true  },\n+    { \"listwallets\",            &listwallets,            true,   false,    false },\n+    { \"usewallet\",              &usewallet,              false,  true,     false },\n+    { \"loadwallet\",             &loadwallet,             false,  false,    false },\n+    { \"unloadwallet\",           &unloadwallet,           false,  false,    false }\n };\n \n CRPCTable::CRPCTable()\n@@ -1052,7 +1056,7 @@ void ThreadRPCServer3(void* parg)\n     }\n }\n \n-json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const\n+json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params, CWallet* pWallet) const\n {\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n@@ -1065,16 +1069,30 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         !pcmd->okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n \n+    boost::shared_ptr<CWallet> spWallet;\n+    if (!pWallet)\n+    {\n+        try\n+        {\n+            spWallet = pWalletManager->GetDefaultWallet();\n+            pWallet = spWallet.get();\n+        }\n+        catch (const CWalletManagerException& e)\n+        {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"No default wallet is loaded.\");\n+        }\n+    }\n+    \n     try\n     {\n         // Execute\n         Value result;\n         {\n             if (pcmd->unlocked)\n-                result = pcmd->actor(params, false);\n+                result = pcmd->actor(pWallet, params, false);\n             else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n+                LOCK2(cs_main, pWallet->cs_wallet);\n+                result = pcmd->actor(pWallet, params, false);\n             }\n         }\n         return result;\n@@ -1170,6 +1188,18 @@ void ConvertTo(Value& value, bool fAllowNull=false)\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n+\n+    if (strMethod == \"usewallet\" && strParams.size() > 2)\n+    {\n+        vector<string> subStrParams;\n+        for (unsigned int i = 2; i < strParams.size(); i++)\n+            subStrParams.push_back(strParams[i]);\n+\n+        params = RPCConvertValues(strParams[1], subStrParams);\n+        params.insert(params.begin(), strParams.begin(), strParams.begin() + 2);\n+        return params;\n+    }\n+\n     BOOST_FOREACH(const std::string &param, strParams)\n         params.push_back(param);\n \n@@ -1220,6 +1250,9 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"loadwallet\"             && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"loadwallet\"             && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"loadwallet\"             && n > 3) ConvertTo<boost::int64_t>(params[3]);\n \n     return params;\n }"
      },
      {
        "sha": "3a808cf24213c10cf7a588326ddef370e9ec5bc6",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 73,
        "deletions": 67,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -87,7 +87,8 @@ void RPCTypeCheck(const json_spirit::Array& params,\n void RPCTypeCheck(const json_spirit::Object& o,\n                   const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n \n-typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n+class CWallet;\n+typedef json_spirit::Value(*rpcfn_type)(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n \n class CRPCCommand\n {\n@@ -96,6 +97,7 @@ class CRPCCommand\n     rpcfn_type actor;\n     bool okSafeMode;\n     bool unlocked;\n+    bool isWalletFn;\n };\n \n /**\n@@ -117,7 +119,7 @@ class CRPCTable\n      * @returns Result of the call.\n      * @throws an exception (json_spirit::Value) when an error happens.\n      */\n-    json_spirit::Value execute(const std::string &method, const json_spirit::Array &params) const;\n+    json_spirit::Value execute(const std::string &method, const json_spirit::Array &params, CWallet* pWallet = NULL) const;\n };\n \n extern const CRPCTable tableRPC;\n@@ -127,70 +129,74 @@ extern int64 AmountFromValue(const json_spirit::Value& value);\n extern json_spirit::Value ValueFromAmount(int64 amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n-extern std::string HelpRequiringPassphrase();\n-extern void EnsureWalletIsUnlocked();\n-\n-extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n-extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n-extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n-extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getwork(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getnewaddress(const json_spirit::Array& params, bool fHelp); // in rpcwallet.cpp\n-extern json_spirit::Value getaccountaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value setaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaddressesbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendtoaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value signmessage(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value verifymessage(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getbalance(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value movecmd(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendfrom(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendmany(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value addmultisigaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value createmultisig(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listtransactions(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listaddressgroupings(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listaccounts(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listsinceblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value backupwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value keypoolrefill(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrase(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrasechange(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n-extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getblockcount(const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n-extern json_spirit::Value getdifficulty(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value settxfee(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getrawmempool(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblockhash(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n+extern std::string HelpRequiringPassphrase(CWallet* pWallet = NULL);\n+extern void EnsureWalletIsUnlocked(CWallet* pWallet = NULL);\n+\n+extern json_spirit::Value getconnectioncount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n+extern json_spirit::Value getpeerinfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value dumpprivkey(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n+extern json_spirit::Value importprivkey(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getgenerate(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n+extern json_spirit::Value setgenerate(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gethashespersec(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getmininginfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getwork(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getblocktemplate(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value submitblock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getnewaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcwallet.cpp\n+extern json_spirit::Value getaccountaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value setaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getaddressesbyaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendtoaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value signmessage(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value verifymessage(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getreceivedbyaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getreceivedbyaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getbalance(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value movecmd(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendfrom(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendmany(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value addmultisigaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value createmultisig(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listreceivedbyaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listreceivedbyaccount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listtransactions(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listaddressgroupings(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listaccounts(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listsinceblock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value backupwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value keypoolrefill(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listwallets(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value usewallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value loadwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value unloadwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value walletpassphrase(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value walletpassphrasechange(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value walletlock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value encryptwallet(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value validateaddress(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getinfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n+extern json_spirit::Value listunspent(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value lockunspent(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listlockunspent(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value createrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value decoderawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value signrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value sendrawtransaction(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+\n+extern json_spirit::Value getblockcount(CWallet* pWallet, const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n+extern json_spirit::Value getdifficulty(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value settxfee(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getrawmempool(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getblockhash(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getblock(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettxoutsetinfo(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettxout(CWallet* pWallet, const json_spirit::Array& params, bool fHelp);\n \n #endif"
      },
      {
        "sha": "8666b6eed8959d621701f39dd206ec03b88ac9df",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 87,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -10,6 +10,7 @@\n #include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n+#include \"timer.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -25,6 +26,8 @@\n using namespace std;\n using namespace boost;\n \n+CWalletManager* pWalletManager;\n+// TODO: get rid of pwalletMain\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n@@ -101,8 +104,8 @@ void Shutdown(void* parg)\n         }\n         bitdb.Flush(true);\n         boost::filesystem::remove(GetPidFile());\n-        UnregisterWallet(pwalletMain);\n-        delete pwalletMain;\n+        delete pWalletManager;\n+        TimerThread::StopTimer(); // for walletpassphrase unlock\n         NewThread(ExitTimeout, NULL);\n         Sleep(50);\n         printf(\"Bitcoin exited\\n\\n\");\n@@ -397,6 +400,81 @@ void ThreadImport(void *data) {\n     vnThreadsRunning[THREAD_IMPORT]--;\n }\n \n+bool LoadWallets(ostringstream& strErrors)\n+{\n+    pWalletManager = new CWalletManager();\n+    \n+    // Get wallet names from -usewallet parameters\n+    set<string> setWalletNames;\n+    BOOST_FOREACH(const string& name, mapMultiArgs[\"-usewallet\"])\n+    {\n+        if (name.size() == 0) continue;\n+        if (!CWalletManager::IsValidName(name))\n+        {\n+            printf(\"Invalid wallet name in -usewallet: %s\\n\", name.c_str());\n+            strErrors << \"Invalid wallet name in -usewallet: \" << name << \"\\n\";\n+        }\n+        else\n+            setWalletNames.insert(name);\n+    }\n+    \n+    // If there are no -usewallet parameters, get wallet names from files in data directory\n+    if (mapMultiArgs[\"-usewallet\"].size() == 0)\n+    {\n+        try\n+        {\n+            vector<string> v = CWalletManager::GetWalletsAtPath(GetDataDir());\n+            copy(v.begin(), v.end(), inserter(setWalletNames, setWalletNames.end()));\n+        }\n+        catch (const std::exception& e)\n+        {\n+            printf(\"Error looking for wallets from data directory: %s\\n\", e.what());\n+            strErrors << \"Error looking for wallets from data directory: \" << e.what() << endl;\n+        }\n+    }\n+    \n+    // If there are -nousewallet parameters, remove those wallets from our set\n+    BOOST_FOREACH(const string& name, mapMultiArgs[\"-nousewallet\"])\n+    {\n+        if (name.size() == 0) continue;\n+        if (!CWalletManager::IsValidName(name))\n+        {\n+            printf(\"Invalid wallet name in -nousewallet: %s\\n\", name.c_str());\n+            strErrors << \"Invalid wallet name in -nousewallet: \" << name << \"\\n\";\n+        }\n+        else\n+            setWalletNames.erase(name);\n+    }\n+    \n+    // Get additional parameters\n+    bool fRescan = GetBoolArg(\"-rescan\");\n+    bool fUpgrade = GetBoolArg(\"-upgradewallet\");\n+    int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+    \n+    // Always require a default wallet\n+    ostringstream ossErrors;\n+    if (!pWalletManager->LoadWallet(\"\", ossErrors, fRescan, fUpgrade, nMaxVersion))\n+    {\n+        printf(\"Failed to load default wallet: %s\\nExiting...\\n\", ossErrors.str().c_str());\n+        return false;\n+    }\n+    // TODO: get rid of pwalletMain\n+    pwalletMain = pWalletManager->GetDefaultWallet().get();\n+    \n+    // Be tolerant on nondefault wallets. Just report errors but don't die.\n+    BOOST_FOREACH(const string& strWalletName, setWalletNames)\n+    {\n+        ostringstream strLoadErrors;\n+        if (!pWalletManager->LoadWallet(strWalletName, strLoadErrors, fRescan, fUpgrade, nMaxVersion))\n+        {\n+            strErrors << strLoadErrors.str();\n+            printf(\"Error loading wallet %s: %s\\n\", strWalletName.c_str(), strLoadErrors.str().c_str());\n+        }\n+    }\n+    \n+    return true;\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -845,88 +923,13 @@ bool AppInit2()\n         return false;\n     }\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 8: load wallets\n+    \n+    uiInterface.InitMessage(_(\"Loading wallets...\"));\n+    printf(\"Loading wallets...\\n\");\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n-    printf(\"Loading wallet...\\n\");\n-    nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    pwalletMain = new CWallet(\"wallet.dat\");\n-    DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-    {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-        {\n-            string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                         \" or address book entries might be missing or incorrect.\"));\n-            InitWarning(msg);\n-        }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n-        {\n-            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n-            printf(\"%s\", strErrors.str().c_str());\n-            return InitError(strErrors.str());\n-        }\n-        else\n-            strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-    }\n-\n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < pwalletMain->GetVersion())\n-            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-        pwalletMain->SetMaxVersion(nMaxVersion);\n-    }\n-\n-    if (fFirstRun)\n-    {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n-        CPubKey newDefaultKey;\n-        if (!pwalletMain->GetKeyFromPool(newDefaultKey, false))\n-            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n-        pwalletMain->SetDefaultKey(newDefaultKey);\n-        if (!pwalletMain->SetAddressBookName(pwalletMain->vchDefaultKey.GetID(), \"\"))\n-            strErrors << _(\"Cannot write default address\") << \"\\n\";\n-    }\n-\n-    printf(\"%s\", strErrors.str().c_str());\n-    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-\n-    RegisterWallet(pwalletMain);\n-\n-    CBlockIndex *pindexRescan = pindexBest;\n-    if (GetBoolArg(\"-rescan\"))\n-        pindexRescan = pindexGenesisBlock;\n-    else\n-    {\n-        CWalletDB walletdb(\"wallet.dat\");\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = locator.GetBlockIndex();\n-    }\n-    if (pindexBest && pindexBest != pindexRescan)\n-    {\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-    }\n+    TimerThread::StartTimer(); // for walletpassphrase unlock\n+    if (!LoadWallets(strErrors)) return false;\n \n     // ********************************************************* Step 9: import blocks\n \n@@ -968,10 +971,15 @@ bool AppInit2()\n     //// debug print\n     printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n     printf(\"nBestHeight = %d\\n\",                   nBestHeight);\n-    printf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain->setKeyPool.size());\n-    printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n-    printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());\n \n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletManager->GetWalletMap())\n+    {\n+        printf(\"Setting properties for wallet \\\"%s\\\"...\\n\", item.first.c_str());\n+        printf(\"  setKeyPool.size() = %\"PRIszu\"\\n\",      item.second->setKeyPool.size());\n+        printf(\"  mapWallet.size() = %\"PRIszu\"\\n\",       item.second->mapWallet.size());\n+        printf(\"  mapAddressBook.size() = %\"PRIszu\"\\n\",  item.second->mapAddressBook.size());\n+    }\n+    \n     if (!NewThread(StartNode, NULL))\n         InitError(_(\"Error: could not start node\"));\n \n@@ -987,7 +995,7 @@ bool AppInit2()\n         return InitError(strErrors.str());\n \n      // Add wallet transactions that aren't already in a block to mapTransactions\n-    pwalletMain->ReacceptWalletTransactions();\n+    ReacceptWalletTransactions();\n \n #if !defined(QT_GUI)\n     // Loop until process is exit()ed from shutdown() function,"
      },
      {
        "sha": "c14a53530bca1f61e4947208aaa84aaa3f3581dc",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"wallet.h\"\n \n+extern CWalletManager* pWalletManager;\n+//TODO: get rid of pwalletMain\n extern CWallet* pwalletMain;\n \n void StartShutdown();"
      },
      {
        "sha": "2e78ae42ae02f7e85a0ae72bdb7631b836f3eac4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 21,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -92,71 +92,116 @@ void UnregisterWallet(CWallet* pwalletIn)\n     }\n }\n \n+void UnregisterAllWallets()\n+{\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        setpwalletRegistered.clear();\n+    }\n+}\n+\n // check whether the passed transaction is from us\n bool static IsFromMe(CTransaction& tx)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        if (pwallet->IsFromMe(tx))\n-            return true;\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            if (pwallet->IsFromMe(tx))\n+                return true;\n+    }\n     return false;\n }\n \n // get the wallet transaction with the given hash (if it exists)\n bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        if (pwallet->GetTransaction(hashTx,wtx))\n-            return true;\n-    return false;\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            if (pwallet->GetTransaction(hashTx,wtx))\n+                return true;\n+        return false;\n+    }\n }\n \n // erases transaction with the given hash from all wallets\n void static EraseFromWallets(uint256 hash)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->EraseFromWallet(hash);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->EraseFromWallet(hash);\n+    }\n }\n \n // make sure all wallets know about the given transaction, in the given block\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n+    }\n+}\n+\n+// Add wallet transactions that aren't already in a block to mapTransactions\n+void ReacceptWalletTransactions()\n+{\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+        pwallet->ReacceptWalletTransactions();\n+    }\n }\n \n // notify wallets about a new best chain\n void static SetBestChain(const CBlockLocator& loc)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->SetBestChain(loc);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->SetBestChain(loc);\n+    }\n }\n \n // notify wallets about an updated transaction\n void static UpdatedTransaction(const uint256& hashTx)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->UpdatedTransaction(hashTx);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->UpdatedTransaction(hashTx);\n+    }\n }\n \n // dump all wallets\n void static PrintWallets(const CBlock& block)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->PrintWallet(block);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->PrintWallet(block);\n+    }\n }\n \n // notify wallets about an incoming inventory (for request counts)\n void static Inventory(const uint256& hash)\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->Inventory(hash);\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->Inventory(hash);\n+    }\n }\n \n // ask wallets to resend their transactions\n void static ResendWalletTransactions()\n {\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->ResendWalletTransactions();\n+    {\n+        LOCK(cs_setpwalletRegistered);\n+        BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+            pwallet->ResendWalletTransactions();\n+    }\n }\n \n "
      },
      {
        "sha": "ac937d2806dd55778b899d19714497efb8815fe1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -118,8 +118,12 @@ struct CBlockTemplate;\n void RegisterWallet(CWallet* pwalletIn);\n /** Unregister a wallet from core */\n void UnregisterWallet(CWallet* pwalletIn);\n+/** Unregister all wallets from core */\n+void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n+/** Add wallet transactions that aren't already in a block to mapTransactions */\n+void ReacceptWalletTransactions();\n /** Process an incoming block */\n bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */"
      },
      {
        "sha": "63c38e67f8455780eb2af1654676fee5596dfc06",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -25,6 +25,7 @@ LIBS= \\\n  -l boost_filesystem-mt-s \\\n  -l boost_program_options-mt-s \\\n  -l boost_thread_win32-mt-s \\\n+ -l boost_regex-mt-s \\\n  -l boost_chrono-mt-s \\\n  -l db_cxx \\\n  -l ssl \\\n@@ -86,6 +87,7 @@ OBJS= \\\n     obj/hash.o \\\n     obj/bloom.o \\\n     obj/leveldb.o \\\n+    obj/timer.o \\\n     obj/txdb.o\n \n all: bitcoind.exe"
      },
      {
        "sha": "54498c2918ac6b71ab202651e5c02a9684af560e",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -20,6 +20,7 @@ LIBS= \\\n  -l boost_filesystem-mgw45-mt-s-1_50 \\\n  -l boost_program_options-mgw45-mt-s-1_50 \\\n  -l boost_thread-mgw45-mt-s-1_50 \\\n+ -l boost_regex-mgw45-mt-s-1_50 \\\n  -l boost_chrono-mgw45-mt-s-1_50 \\\n  -l db_cxx \\\n  -l ssl \\\n@@ -82,6 +83,7 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n+    obj/timer.o \\\n     obj/txdb.o\n \n "
      },
      {
        "sha": "5485351b827318d53d8667fc87cb9f72b56fef9e",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -36,6 +36,7 @@ LIBS += \\\n  $(DEPSDIR)/lib/libboost_filesystem-mt.a \\\n  $(DEPSDIR)/lib/libboost_program_options-mt.a \\\n  $(DEPSDIR)/lib/libboost_thread-mt.a \\\n+ ${DEPSDIR}/lib/libboost_regex-mt.a \\\n  $(DEPSDIR)/lib/libssl.a \\\n  $(DEPSDIR)/lib/libcrypto.a \\\n  -lz\n@@ -48,6 +49,7 @@ LIBS += \\\n  -lboost_filesystem-mt \\\n  -lboost_program_options-mt \\\n  -lboost_thread-mt \\\n+ -lboost_regex-mt \\\n  -lssl \\\n  -lcrypto \\\n  -lz\n@@ -100,6 +102,7 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n+    obj/timer.o \\\n     obj/txdb.o\n \n ifndef USE_UPNP"
      },
      {
        "sha": "efc35f72057842b2adfcf2e6855aaa401d551d6a",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -32,6 +32,7 @@ LIBS += \\\n    -l boost_filesystem$(BOOST_LIB_SUFFIX) \\\n    -l boost_program_options$(BOOST_LIB_SUFFIX) \\\n    -l boost_thread$(BOOST_LIB_SUFFIX) \\\n+   -l boost_regex$(BOOST_LIB_SUFFIX) \\\n    -l db_cxx$(BDB_LIB_SUFFIX) \\\n    -l ssl \\\n    -l crypto\n@@ -131,6 +132,7 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n+    obj/timer.o \\\n     obj/txdb.o\n \n "
      },
      {
        "sha": "2fec1503fed9e01dfeec4df4d741d1f4f2df8c90",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -71,7 +71,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n }\n \n \n-Value getblockcount(const Array& params, bool fHelp)\n+Value getblockcount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -82,7 +82,7 @@ Value getblockcount(const Array& params, bool fHelp)\n }\n \n \n-Value getdifficulty(const Array& params, bool fHelp)\n+Value getdifficulty(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -93,7 +93,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n }\n \n \n-Value settxfee(const Array& params, bool fHelp)\n+Value settxfee(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n@@ -109,7 +109,7 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n-Value getrawmempool(const Array& params, bool fHelp)\n+Value getrawmempool(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -126,7 +126,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n     return a;\n }\n \n-Value getblockhash(const Array& params, bool fHelp)\n+Value getblockhash(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -141,7 +141,7 @@ Value getblockhash(const Array& params, bool fHelp)\n     return pblockindex->phashBlock->GetHex();\n }\n \n-Value getblock(const Array& params, bool fHelp)\n+Value getblock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -161,7 +161,7 @@ Value getblock(const Array& params, bool fHelp)\n     return blockToJSON(block, pblockindex);\n }\n \n-Value gettxoutsetinfo(const Array& params, bool fHelp)\n+Value gettxoutsetinfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -180,7 +180,7 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettxout(const Array& params, bool fHelp)\n+Value gettxout(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error("
      },
      {
        "sha": "95f2f3240807be5bd2fff465288f5cbc610502ae",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n #include \"ui_interface.h\"\n #include \"base58.h\"\n+#include \"init.h\"\n \n #include <boost/lexical_cast.hpp>\n \n@@ -32,7 +32,7 @@ class CTxDump\n     }\n };\n \n-Value importprivkey(const Array& params, bool fHelp)\n+Value importprivkey(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n@@ -60,24 +60,24 @@ Value importprivkey(const Array& params, bool fHelp)\n     key.SetSecret(secret, fCompressed);\n     CKeyID vchAddress = key.GetPubKey().GetID();\n     {\n-        LOCK2(cs_main, pwalletMain->cs_wallet);\n+        LOCK2(cs_main, pWallet->cs_wallet);\n \n-        pwalletMain->MarkDirty();\n-        pwalletMain->SetAddressBookName(vchAddress, strLabel);\n+        pWallet->MarkDirty();\n+        pWallet->SetAddressBookName(vchAddress, strLabel);\n \n-        if (!pwalletMain->AddKey(key))\n+        if (!pWallet->AddKey(key))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \t\n         if (fRescan) {\n-            pwalletMain->ScanForWalletTransactions(pindexGenesisBlock, true);\n-            pwalletMain->ReacceptWalletTransactions();\n+            pWallet->ScanForWalletTransactions(pindexGenesisBlock, true);\n+            pWallet->ReacceptWalletTransactions();\n         }\n     }\n \n     return Value::null;\n }\n \n-Value dumpprivkey(const Array& params, bool fHelp)\n+Value dumpprivkey(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -93,7 +93,7 @@ Value dumpprivkey(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     CSecret vchSecret;\n     bool fCompressed;\n-    if (!pwalletMain->GetSecret(keyID, vchSecret, fCompressed))\n+    if (!pWallet->GetSecret(keyID, vchSecret, fCompressed))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret, fCompressed).ToString();\n }"
      },
      {
        "sha": "d2c6d7d5cb0c6121a9d4c8e09ce8beb67bb8506b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -11,7 +11,7 @@\n using namespace json_spirit;\n using namespace std;\n \n-Value getgenerate(const Array& params, bool fHelp)\n+Value getgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -22,7 +22,7 @@ Value getgenerate(const Array& params, bool fHelp)\n }\n \n \n-Value setgenerate(const Array& params, bool fHelp)\n+Value setgenerate(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -43,12 +43,12 @@ Value setgenerate(const Array& params, bool fHelp)\n     }\n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n \n-    GenerateBitcoins(fGenerate, pwalletMain);\n+    GenerateBitcoins(fGenerate, pWallet);\n     return Value::null;\n }\n \n \n-Value gethashespersec(const Array& params, bool fHelp)\n+Value gethashespersec(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -61,7 +61,7 @@ Value gethashespersec(const Array& params, bool fHelp)\n }\n \n \n-Value getmininginfo(const Array& params, bool fHelp)\n+Value getmininginfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -76,14 +76,14 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"generate\",      GetBoolArg(\"-gen\")));\n     obj.push_back(Pair(\"genproclimit\",  (int)GetArg(\"-genproclimit\", -1)));\n-    obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n+    obj.push_back(Pair(\"hashespersec\",  gethashespersec(NULL, params, false)));\n     obj.push_back(Pair(\"pooledtx\",      (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n     return obj;\n }\n \n \n-Value getwork(const Array& params, bool fHelp)\n+Value getwork(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -104,7 +104,7 @@ Value getwork(const Array& params, bool fHelp)\n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n     static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n     static vector<CBlockTemplate*> vNewBlockTemplate;\n-    static CReserveKey reservekey(pwalletMain);\n+    static CReserveKey reservekey(pWallet);\n \n     if (params.size() == 0)\n     {\n@@ -192,12 +192,12 @@ Value getwork(const Array& params, bool fHelp)\n         pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n \n-        return CheckWork(pblock, *pwalletMain, reservekey);\n+        return CheckWork(pblock, *pWallet, reservekey);\n     }\n }\n \n \n-Value getblocktemplate(const Array& params, bool fHelp)\n+Value getblocktemplate(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -243,7 +243,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n-    static CReserveKey reservekey(pwalletMain);\n+    static CReserveKey reservekey(pWallet);\n \n     // Update block\n     static unsigned int nTransactionsUpdatedLast;\n@@ -346,7 +346,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value submitblock(const Array& params, bool fHelp)\n+Value submitblock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error("
      },
      {
        "sha": "715172194a46f711cd740e929d1a059e691e6ed7",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -8,7 +8,7 @@\n using namespace json_spirit;\n using namespace std;\n \n-Value getconnectioncount(const Array& params, bool fHelp)\n+Value getconnectioncount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -32,7 +32,7 @@ static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-Value getpeerinfo(const Array& params, bool fHelp)\n+Value getpeerinfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error("
      },
      {
        "sha": "fa44f29c66f9873e0b9ca6bb7c36ce4a01fbbe48",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -132,7 +132,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n }\n \n-Value getrawtransaction(const Array& params, bool fHelp)\n+Value getrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -166,7 +166,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value listunspent(const Array& params, bool fHelp)\n+Value listunspent(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -204,7 +204,7 @@ Value listunspent(const Array& params, bool fHelp)\n \n     Array results;\n     vector<COutput> vecOutputs;\n-    pwalletMain->AvailableCoins(vecOutputs, false);\n+    pWallet->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs)\n     {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -233,7 +233,7 @@ Value listunspent(const Array& params, bool fHelp)\n             {\n                 const CScriptID& hash = boost::get<const CScriptID&>(address);\n                 CScript redeemScript;\n-                if (pwalletMain->GetCScript(hash, redeemScript))\n+                if (pWallet->GetCScript(hash, redeemScript))\n                     entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n             }\n         }\n@@ -245,7 +245,7 @@ Value listunspent(const Array& params, bool fHelp)\n     return results;\n }\n \n-Value createrawtransaction(const Array& params, bool fHelp)\n+Value createrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n@@ -305,7 +305,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     return HexStr(ss.begin(), ss.end());\n }\n \n-Value decoderawtransaction(const Array& params, bool fHelp)\n+Value decoderawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -328,7 +328,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value signrawtransaction(const Array& params, bool fHelp)\n+Value signrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n@@ -343,7 +343,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             \"Returns json object with keys:\\n\"\n             \"  hex : raw transaction with signature(s) (hex-encoded string)\\n\"\n             \"  complete : 1 if transaction has a complete set of signature (0 if not)\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n \n@@ -408,7 +408,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n     else\n-        EnsureWalletIsUnlocked();\n+        EnsureWalletIsUnlocked(pWallet);\n \n     // Add previous txouts given in the RPC call:\n     if (params.size() > 1 && params[1].type() != null_type)\n@@ -460,7 +460,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n \n-    const CKeyStore& keystore = (fGivenKeys ? tempKeystore : *pwalletMain);\n+    const CKeyStore& keystore = (fGivenKeys ? tempKeystore : *pWallet);\n \n     int nHashType = SIGHASH_ALL;\n     if (params.size() > 3 && params[3].type() != null_type)\n@@ -518,7 +518,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value sendrawtransaction(const Array& params, bool fHelp)\n+Value sendrawtransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error("
      },
      {
        "sha": "bb758a6764c024e7c5d7c74c3201c16c6b3d24b5",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 266,
        "deletions": 221,
        "changes": 487,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -16,19 +16,16 @@ using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n \n-int64 nWalletUnlockTime;\n-static CCriticalSection cs_nWalletUnlockTime;\n-\n-std::string HelpRequiringPassphrase()\n+std::string HelpRequiringPassphrase(CWallet* pWallet)\n {\n-    return pwalletMain->IsCrypted()\n+    return (pWallet && pWallet->IsCrypted())\n         ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n         : \"\";\n }\n \n-void EnsureWalletIsUnlocked()\n+void EnsureWalletIsUnlocked(CWallet* pWallet)\n {\n-    if (pwalletMain->IsLocked())\n+    if (pWallet && pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n@@ -59,7 +56,7 @@ string AccountFromValue(const Value& value)\n     return strAccount;\n }\n \n-Value getinfo(const Array& params, bool fHelp)\n+Value getinfo(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -72,25 +69,20 @@ Value getinfo(const Array& params, bool fHelp)\n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n-    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n+    obj.push_back(Pair(\"wallets\",       pWalletManager->GetWalletCount()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n-    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-    if (pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }\n \n \n \n-Value getnewaddress(const Array& params, bool fHelp)\n+Value getnewaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -104,24 +96,24 @@ Value getnewaddress(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         strAccount = AccountFromValue(params[0]);\n \n-    if (!pwalletMain->IsLocked())\n-        pwalletMain->TopUpKeyPool();\n+    if (!pWallet->IsLocked())\n+        pWallet->TopUpKeyPool();\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwalletMain->GetKeyFromPool(newKey, false))\n+    if (!pWallet->GetKeyFromPool(newKey, false))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n \n-    pwalletMain->SetAddressBookName(keyID, strAccount);\n+    pWallet->SetAddressBookName(keyID, strAccount);\n \n     return CBitcoinAddress(keyID).ToString();\n }\n \n \n-CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n+CBitcoinAddress GetAccountAddress(CWallet* pWallet, string strAccount, bool bForceNew=false)\n {\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    CWalletDB walletdb(pWallet->strWalletFile);\n \n     CAccount account;\n     walletdb.ReadAccount(strAccount, account);\n@@ -133,8 +125,8 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     {\n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(account.vchPubKey.GetID());\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n-             it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n+        for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin();\n+             it != pWallet->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n@@ -147,17 +139,17 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     // Generate a new key\n     if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n-        if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n+        if (!pWallet->GetKeyFromPool(account.vchPubKey, false))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n-        pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n+        pWallet->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n     }\n \n     return CBitcoinAddress(account.vchPubKey.GetID());\n }\n \n-Value getaccountaddress(const Array& params, bool fHelp)\n+Value getaccountaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -169,14 +161,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n     Value ret;\n \n-    ret = GetAccountAddress(strAccount).ToString();\n+    ret = GetAccountAddress(pWallet, strAccount).ToString();\n \n     return ret;\n }\n \n \n \n-Value setaccount(const Array& params, bool fHelp)\n+Value setaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -193,20 +185,20 @@ Value setaccount(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[1]);\n \n     // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    if (pwalletMain->mapAddressBook.count(address.Get()))\n+    if (pWallet->mapAddressBook.count(address.Get()))\n     {\n-        string strOldAccount = pwalletMain->mapAddressBook[address.Get()];\n-        if (address == GetAccountAddress(strOldAccount))\n-            GetAccountAddress(strOldAccount, true);\n+        string strOldAccount = pWallet->mapAddressBook[address.Get()];\n+        if (address == GetAccountAddress(pWallet, strOldAccount))\n+            GetAccountAddress(pWallet, strOldAccount, true);\n     }\n \n-    pwalletMain->SetAddressBookName(address.Get(), strAccount);\n+    pWallet->SetAddressBookName(address.Get(), strAccount);\n \n     return Value::null;\n }\n \n \n-Value getaccount(const Array& params, bool fHelp)\n+Value getaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -218,14 +210,14 @@ Value getaccount(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n-    if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n+    map<CTxDestination, string>::iterator mi = pWallet->mapAddressBook.find(address.Get());\n+    if (mi != pWallet->mapAddressBook.end() && !(*mi).second.empty())\n         strAccount = (*mi).second;\n     return strAccount;\n }\n \n \n-Value getaddressesbyaccount(const Array& params, bool fHelp)\n+Value getaddressesbyaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -236,7 +228,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     Array ret;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pWallet->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second;\n@@ -246,13 +238,13 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value sendtoaddress(const Array& params, bool fHelp)\n+Value sendtoaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n@@ -268,17 +260,17 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n-    if (pwalletMain->IsLocked())\n+    if (pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    string strError = pWallet->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n     return wtx.GetHash().GetHex();\n }\n \n-Value listaddressgroupings(const Array& params, bool fHelp)\n+Value listaddressgroupings(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n@@ -288,8 +280,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             \"in past transactions\");\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n+    map<CTxDestination, int64> balances = pWallet->GetAddressBalances();\n+    BOOST_FOREACH(set<CTxDestination> grouping, pWallet->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n         BOOST_FOREACH(CTxDestination address, grouping)\n@@ -298,9 +290,9 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                LOCK(pwalletMain->cs_wallet);\n-                if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n-                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n+                LOCK(pWallet->cs_wallet);\n+                if (pWallet->mapAddressBook.find(CBitcoinAddress(address).Get()) != pWallet->mapAddressBook.end())\n+                    addressInfo.push_back(pWallet->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n             }\n             jsonGrouping.push_back(addressInfo);\n         }\n@@ -309,14 +301,14 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n     return jsonGroupings;\n }\n \n-Value signmessage(const Array& params, bool fHelp)\n+Value signmessage(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"signmessage <bitcoinaddress> <message>\\n\"\n             \"Sign a message with the private key of an address\");\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n     string strAddress = params[0].get_str();\n     string strMessage = params[1].get_str();\n@@ -330,7 +322,7 @@ Value signmessage(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n \n     CKey key;\n-    if (!pwalletMain->GetKey(keyID, key))\n+    if (!pWallet->GetKey(keyID, key))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n \n     CHashWriter ss(SER_GETHASH, 0);\n@@ -344,7 +336,7 @@ Value signmessage(const Array& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-Value verifymessage(const Array& params, bool fHelp)\n+Value verifymessage(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -381,7 +373,7 @@ Value verifymessage(const Array& params, bool fHelp)\n }\n \n \n-Value getreceivedbyaddress(const Array& params, bool fHelp)\n+Value getreceivedbyaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -394,7 +386,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     scriptPubKey.SetDestination(address.Get());\n-    if (!IsMine(*pwalletMain,scriptPubKey))\n+    if (!IsMine(*pWallet,scriptPubKey))\n         return (double)0.0;\n \n     // Minimum confirmations\n@@ -404,7 +396,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Tally\n     int64 nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !wtx.IsFinal())\n@@ -420,9 +412,9 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n+void GetAccountAddresses(CWallet* pWallet, string strAccount, set<CTxDestination>& setAddress)\n {\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pWallet->mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const string& strName = item.second;\n@@ -431,7 +423,7 @@ void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n     }\n }\n \n-Value getreceivedbyaccount(const Array& params, bool fHelp)\n+Value getreceivedbyaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -446,11 +438,11 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n     set<CTxDestination> setAddress;\n-    GetAccountAddresses(strAccount, setAddress);\n+    GetAccountAddresses(pWallet, strAccount, setAddress);\n \n     // Tally\n     int64 nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !wtx.IsFinal())\n@@ -459,7 +451,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n+            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pWallet, address) && setAddress.count(address))\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n         }\n@@ -469,12 +461,12 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n+int64 GetAccountBalance(CWallet* pWallet, CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n {\n     int64 nBalance = 0;\n \n     // Tally wallet transactions\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (!wtx.IsFinal())\n@@ -494,14 +486,14 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n     return nBalance;\n }\n \n-int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n+int64 GetAccountBalance(CWallet* pWallet, const string& strAccount, int nMinDepth)\n {\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-    return GetAccountBalance(walletdb, strAccount, nMinDepth);\n+    CWalletDB walletdb(pWallet->strWalletFile);\n+    return GetAccountBalance(pWallet, walletdb, strAccount, nMinDepth);\n }\n \n \n-Value getbalance(const Array& params, bool fHelp)\n+Value getbalance(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -510,7 +502,7 @@ Value getbalance(const Array& params, bool fHelp)\n             \"If [account] is specified, returns the balance in the account.\");\n \n     if (params.size() == 0)\n-        return  ValueFromAmount(pwalletMain->GetBalance());\n+        return  ValueFromAmount(pWallet->GetBalance());\n \n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -521,7 +513,7 @@ Value getbalance(const Array& params, bool fHelp)\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' should always return the same number.\n         int64 nBalance = 0;\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+        for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsFinal())\n@@ -546,13 +538,13 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = GetAccountBalance(pWallet, strAccount, nMinDepth);\n \n     return ValueFromAmount(nBalance);\n }\n \n \n-Value movecmd(const Array& params, bool fHelp)\n+Value movecmd(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n@@ -569,15 +561,15 @@ Value movecmd(const Array& params, bool fHelp)\n     if (params.size() > 4)\n         strComment = params[4].get_str();\n \n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    CWalletDB walletdb(pWallet->strWalletFile);\n     if (!walletdb.TxnBegin())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n     int64 nNow = GetAdjustedTime();\n \n     // Debit\n     CAccountingEntry debit;\n-    debit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n+    debit.nOrderPos = pWallet->IncOrderPosNext(&walletdb);\n     debit.strAccount = strFrom;\n     debit.nCreditDebit = -nAmount;\n     debit.nTime = nNow;\n@@ -587,7 +579,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Credit\n     CAccountingEntry credit;\n-    credit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n+    credit.nOrderPos = pWallet->IncOrderPosNext(&walletdb);\n     credit.strAccount = strTo;\n     credit.nCreditDebit = nAmount;\n     credit.nTime = nNow;\n@@ -602,13 +594,13 @@ Value movecmd(const Array& params, bool fHelp)\n }\n \n \n-Value sendfrom(const Array& params, bool fHelp)\n+Value sendfrom(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n             \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n@@ -626,29 +618,29 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[5].get_str();\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = GetAccountBalance(pWallet, strAccount, nMinDepth);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    string strError = pWallet->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n-Value sendmany(const Array& params, bool fHelp)\n+Value sendmany(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n             \"amounts are double-precision floating point numbers\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n@@ -683,24 +675,24 @@ Value sendmany(const Array& params, bool fHelp)\n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n     }\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64 nBalance = GetAccountBalance(pWallet, strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    CReserveKey keyChange(pwalletMain);\n+    CReserveKey keyChange(pWallet);\n     int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+    bool fCreated = pWallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n     if (!fCreated)\n     {\n-        if (totalAmount + nFeeRequired > pwalletMain->GetBalance())\n+        if (totalAmount + nFeeRequired > pWallet->GetBalance())\n             throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction creation failed\");\n     }\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange))\n+    if (!pWallet->CommitTransaction(wtx, keyChange))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n \n     return wtx.GetHash().GetHex();\n@@ -709,7 +701,7 @@ Value sendmany(const Array& params, bool fHelp)\n //\n // Used by addmultisigaddress / createmultisig:\n //\n-static CScript _createmultisig(const Array& params)\n+static CScript _createmultisig(CWallet* pWallet, const Array& params)\n {\n     int nRequired = params[0].get_int();\n     const Array& keys = params[1].get_array();\n@@ -736,7 +728,7 @@ static CScript _createmultisig(const Array& params)\n                 throw runtime_error(\n                     strprintf(\"%s does not refer to a key\",ks.c_str()));\n             CPubKey vchPubKey;\n-            if (!pwalletMain->GetPubKey(keyID, vchPubKey))\n+            if (!pWallet->GetPubKey(keyID, vchPubKey))\n                 throw runtime_error(\n                     strprintf(\"no full public key for address %s\",ks.c_str()));\n             if (!vchPubKey.IsValid() || !pubkeys[i].SetPubKey(vchPubKey))\n@@ -760,7 +752,7 @@ static CScript _createmultisig(const Array& params)\n     return result;\n }\n \n-Value addmultisigaddress(const Array& params, bool fHelp)\n+Value addmultisigaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n@@ -776,15 +768,15 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig(params);\n+    CScript inner = _createmultisig(pWallet, params);\n     CScriptID innerID = inner.GetID();\n-    pwalletMain->AddCScript(inner);\n+    pWallet->AddCScript(inner);\n \n-    pwalletMain->SetAddressBookName(innerID, strAccount);\n+    pWallet->SetAddressBookName(innerID, strAccount);\n     return CBitcoinAddress(innerID).ToString();\n }\n \n-Value createmultisig(const Array& params, bool fHelp)\n+Value createmultisig(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 2)\n     {\n@@ -797,7 +789,7 @@ Value createmultisig(const Array& params, bool fHelp)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig(params);\n+    CScript inner = _createmultisig(pWallet, params);\n     CScriptID innerID = inner.GetID();\n     CBitcoinAddress address(innerID);\n \n@@ -820,7 +812,7 @@ struct tallyitem\n     }\n };\n \n-Value ListReceived(const Array& params, bool fByAccounts)\n+Value ListReceived(CWallet* pWallet, const Array& params, bool fByAccounts)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -834,7 +826,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n@@ -848,7 +840,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pwalletMain, address))\n+            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pWallet, address))\n                 continue;\n \n             tallyitem& item = mapTally[address];\n@@ -860,7 +852,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     // Reply\n     Array ret;\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pWallet->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second;\n@@ -910,7 +902,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     return ret;\n }\n \n-Value listreceivedbyaddress(const Array& params, bool fHelp)\n+Value listreceivedbyaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -923,10 +915,10 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             \"  \\\"amount\\\" : total amount received by the address\\n\"\n             \"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");\n \n-    return ListReceived(params, false);\n+    return ListReceived(pWallet, params, false);\n }\n \n-Value listreceivedbyaccount(const Array& params, bool fHelp)\n+Value listreceivedbyaccount(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -938,10 +930,10 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             \"  \\\"amount\\\" : total amount received by addresses with this account\\n\"\n             \"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");\n \n-    return ListReceived(params, true);\n+    return ListReceived(pWallet, params, true);\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n+void ListTransactions(CWallet* pWallet, const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n     int64 nFee;\n     string strSentAccount;\n@@ -975,8 +967,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n         {\n             string account;\n-            if (pwalletMain->mapAddressBook.count(r.first))\n-                account = pwalletMain->mapAddressBook[r.first];\n+            if (pWallet->mapAddressBook.count(r.first))\n+                account = pWallet->mapAddressBook[r.first];\n             if (fAllAccounts || (account == strAccount))\n             {\n                 Object entry;\n@@ -1019,7 +1011,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n     }\n }\n \n-Value listtransactions(const Array& params, bool fHelp)\n+Value listtransactions(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -1044,14 +1036,14 @@ Value listtransactions(const Array& params, bool fHelp)\n     Array ret;\n \n     std::list<CAccountingEntry> acentries;\n-    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n+    CWallet::TxItems txOrdered = pWallet->OrderedTxItems(acentries, strAccount);\n \n     // iterate backwards until we have nCount items to return:\n     for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n-            ListTransactions(*pwtx, strAccount, 0, true, ret);\n+            ListTransactions(pWallet, *pwtx, strAccount, 0, true, ret);\n         CAccountingEntry *const pacentry = (*it).second.second;\n         if (pacentry != 0)\n             AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1077,7 +1069,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listaccounts(const Array& params, bool fHelp)\n+Value listaccounts(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -1089,12 +1081,12 @@ Value listaccounts(const Array& params, bool fHelp)\n         nMinDepth = params[0].get_int();\n \n     map<string, int64> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n-        if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pWallet->mapAddressBook) {\n+        if (IsMine(*pWallet, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n     }\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         int64 nFee;\n@@ -1108,15 +1100,15 @@ Value listaccounts(const Array& params, bool fHelp)\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n-                if (pwalletMain->mapAddressBook.count(r.first))\n-                    mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n+                if (pWallet->mapAddressBook.count(r.first))\n+                    mapAccountBalances[pWallet->mapAddressBook[r.first]] += r.second;\n                 else\n                     mapAccountBalances[\"\"] += r.second;\n         }\n     }\n \n     list<CAccountingEntry> acentries;\n-    CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n+    CWalletDB(pWallet->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n@@ -1127,7 +1119,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listsinceblock(const Array& params, bool fHelp)\n+Value listsinceblock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n@@ -1157,12 +1149,12 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     Array transactions;\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n+    for (map<uint256, CWalletTx>::iterator it = pWallet->mapWallet.begin(); it != pWallet->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions);\n+            ListTransactions(pWallet, tx, \"*\", 0, true, transactions);\n     }\n \n     uint256 lastblock;\n@@ -1190,7 +1182,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettransaction(const Array& params, bool fHelp)\n+Value gettransaction(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1201,9 +1193,9 @@ Value gettransaction(const Array& params, bool fHelp)\n     hash.SetHex(params[0].get_str());\n \n     Object entry;\n-    if (!pwalletMain->mapWallet.count(hash))\n+    if (!pWallet->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+    const CWalletTx& wtx = pWallet->mapWallet[hash];\n \n     int64 nCredit = wtx.GetCredit();\n     int64 nDebit = wtx.GetDebit();\n@@ -1217,41 +1209,41 @@ Value gettransaction(const Array& params, bool fHelp)\n     WalletTxToJSON(wtx, entry);\n \n     Array details;\n-    ListTransactions(wtx, \"*\", 0, false, details);\n+    ListTransactions(pWallet, wtx, \"*\", 0, false, details);\n     entry.push_back(Pair(\"details\", details));\n \n     return entry;\n }\n \n \n-Value backupwallet(const Array& params, bool fHelp)\n+Value backupwallet(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"backupwallet <destination>\\n\"\n             \"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");\n \n     string strDest = params[0].get_str();\n-    if (!BackupWallet(*pwalletMain, strDest))\n+    if (!BackupWallet(*pWallet, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return Value::null;\n }\n \n \n-Value keypoolrefill(const Array& params, bool fHelp)\n+Value keypoolrefill(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"keypoolrefill\\n\"\n             \"Fills the keypool.\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase(pWallet));\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pWallet);\n \n-    pwalletMain->TopUpKeyPool();\n+    pWallet->TopUpKeyPool();\n \n-    if (pwalletMain->GetKeyPoolSize() < GetArg(\"-keypool\", 100))\n+    if (pWallet->GetKeyPoolSize() < GetArg(\"-keypool\", 100))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n     return Value::null;\n@@ -1263,65 +1255,20 @@ void ThreadTopUpKeyPool(void* parg)\n     // Make this thread recognisable as the key-topping-up thread\n     RenameThread(\"bitcoin-key-top\");\n \n-    pwalletMain->TopUpKeyPool();\n-}\n-\n-void ThreadCleanWalletPassphrase(void* parg)\n-{\n-    // Make this thread recognisable as the wallet relocking thread\n-    RenameThread(\"bitcoin-lock-wa\");\n-\n-    int64 nMyWakeTime = GetTimeMillis() + *((int64*)parg) * 1000;\n-\n-    ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-    if (nWalletUnlockTime == 0)\n-    {\n-        nWalletUnlockTime = nMyWakeTime;\n-\n-        do\n-        {\n-            if (nWalletUnlockTime==0)\n-                break;\n-            int64 nToSleep = nWalletUnlockTime - GetTimeMillis();\n-            if (nToSleep <= 0)\n-                break;\n-\n-            LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-            Sleep(nToSleep);\n-            ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-        } while(1);\n-\n-        if (nWalletUnlockTime)\n-        {\n-            nWalletUnlockTime = 0;\n-            pwalletMain->Lock();\n-        }\n-    }\n-    else\n-    {\n-        if (nWalletUnlockTime < nMyWakeTime)\n-            nWalletUnlockTime = nMyWakeTime;\n-    }\n-\n-    LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-    delete (int64*)parg;\n+    CWallet* pWallet = (CWallet*)parg;\n+    pWallet->TopUpKeyPool();\n }\n \n-Value walletpassphrase(const Array& params, bool fHelp)\n+Value walletpassphrase(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n-    if (fHelp)\n-        return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    if (!pwalletMain->IsLocked())\n+    if (!pWallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked.\");\n \n     // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n@@ -1333,31 +1280,26 @@ Value walletpassphrase(const Array& params, bool fHelp)\n \n     if (strWalletPass.length() > 0)\n     {\n-        if (!pwalletMain->Unlock(strWalletPass))\n+        if (!pWallet->Unlock(strWalletPass))\n             throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n     }\n     else\n         throw runtime_error(\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n-    NewThread(ThreadTopUpKeyPool, NULL);\n-    int64* pnSleepTime = new int64(params[1].get_int64());\n-    NewThread(ThreadCleanWalletPassphrase, pnSleepTime);\n-\n+    pWallet->TimedLock(params[1].get_int64());\n     return Value::null;\n }\n \n \n-Value walletpassphrasechange(const Array& params, bool fHelp)\n+Value walletpassphrasechange(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n-    if (fHelp)\n-        return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n@@ -1375,45 +1317,37 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n-    if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n+    if (!pWallet->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n \n     return Value::null;\n }\n \n \n-Value walletlock(const Array& params, bool fHelp)\n+Value walletlock(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n+    if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"Removes the wallet encryption key from memory, locking the wallet.\\n\"\n             \"After calling this method, you will need to call walletpassphrase again\\n\"\n             \"before being able to call any methods which require the wallet to be unlocked.\");\n-    if (fHelp)\n-        return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n-    {\n-        LOCK(cs_nWalletUnlockTime);\n-        pwalletMain->Lock();\n-        nWalletUnlockTime = 0;\n-    }\n+    pWallet->Lock();\n \n     return Value::null;\n }\n \n \n-Value encryptwallet(const Array& params, bool fHelp)\n+Value encryptwallet(CWallet* pWallet, const Array& params, bool fHelp)\n {\n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n-    if (fHelp)\n-        return true;\n-    if (pwalletMain->IsCrypted())\n+    if (pWallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n@@ -1427,7 +1361,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n \n-    if (!pwalletMain->EncryptWallet(strWalletPass))\n+    if (!pWallet->EncryptWallet(strWalletPass))\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n \n     // BDB seems to have a bad habit of writing old data into\n@@ -1439,13 +1373,18 @@ Value encryptwallet(const Array& params, bool fHelp)\n \n class DescribeAddressVisitor : public boost::static_visitor<Object>\n {\n+private:\n+    CWallet* pWallet;\n+    \n public:\n+    DescribeAddressVisitor(CWallet* _pWallet) : pWallet(_pWallet) { }\n+    \n     Object operator()(const CNoDestination &dest) const { return Object(); }\n \n     Object operator()(const CKeyID &keyID) const {\n         Object obj;\n         CPubKey vchPubKey;\n-        pwalletMain->GetPubKey(keyID, vchPubKey);\n+        pWallet->GetPubKey(keyID, vchPubKey);\n         obj.push_back(Pair(\"isscript\", false));\n         obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey.Raw())));\n         obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n@@ -1456,7 +1395,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n         CScript subscript;\n-        pwalletMain->GetCScript(scriptID, subscript);\n+        pWallet->GetCScript(scriptID, subscript);\n         std::vector<CTxDestination> addresses;\n         txnouttype whichType;\n         int nRequired;\n@@ -1472,7 +1411,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n     }\n };\n \n-Value validateaddress(const Array& params, bool fHelp)\n+Value validateaddress(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1489,19 +1428,19 @@ Value validateaddress(const Array& params, bool fHelp)\n         CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = IsMine(*pwalletMain, dest);\n+        bool fMine = IsMine(*pWallet, dest);\n         ret.push_back(Pair(\"ismine\", fMine));\n         if (fMine) {\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(pWallet), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n-        if (pwalletMain->mapAddressBook.count(dest))\n-            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));\n+        if (pWallet->mapAddressBook.count(dest))\n+            ret.push_back(Pair(\"account\", pWallet->mapAddressBook[dest]));\n     }\n     return ret;\n }\n \n-Value lockunspent(const Array& params, bool fHelp)\n+Value lockunspent(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -1517,7 +1456,7 @@ Value lockunspent(const Array& params, bool fHelp)\n \n     if (params.size() == 1) {\n         if (fUnlock)\n-            pwalletMain->UnlockAllCoins();\n+            pWallet->UnlockAllCoins();\n         return true;\n     }\n \n@@ -1541,23 +1480,23 @@ Value lockunspent(const Array& params, bool fHelp)\n         COutPoint outpt(uint256(txid), nOutput);\n \n         if (fUnlock)\n-            pwalletMain->UnlockCoin(outpt);\n+            pWallet->UnlockCoin(outpt);\n         else\n-            pwalletMain->LockCoin(outpt);\n+            pWallet->LockCoin(outpt);\n     }\n \n     return true;\n }\n \n-Value listlockunspent(const Array& params, bool fHelp)\n+Value listlockunspent(CWallet* pWallet, const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n             \"Returns list of temporarily unspendable outputs.\");\n \n     vector<COutPoint> vOutpts;\n-    pwalletMain->ListLockedCoins(vOutpts);\n+    pWallet->ListLockedCoins(vOutpts);\n \n     Array ret;\n \n@@ -1572,3 +1511,109 @@ Value listlockunspent(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value listwallets(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 0)\n+        throw runtime_error(\n+            \"listwallets\\n\"\n+            \"Returns list of wallets.\");\n+    \n+    Object obj;\n+    BOOST_FOREACH(const wallet_map::value_type& item, pWalletManager->GetWalletMap())\n+    {\n+        Object objWallet;\n+        objWallet.push_back(Pair(\"balance\",       ValueFromAmount(item.second->GetBalance())));\n+        objWallet.push_back(Pair(\"encrypted\",     item.second->IsCrypted()));\n+        if (item.second->IsCrypted())\n+        {\n+            objWallet.push_back(Pair(\"unlocked_until\",  (boost::int64_t)item.second->GetLockTime()));\n+            objWallet.push_back(Pair(\"unlocked_until_pretty\", item.second->GetStringLockTime()));\n+        }\n+        objWallet.push_back(Pair(\"walletversion\", item.second->GetVersion()));\n+        objWallet.push_back(Pair(\"keypoolsize\",   item.second->GetKeyPoolSize()));\n+        objWallet.push_back(Pair(\"keypoololdest\", (boost::int64_t)item.second->GetOldestKeyPoolTime()));\n+        obj.push_back(Pair(item.first, objWallet));\n+    }\n+    \n+    return obj;\n+}\n+\n+Value usewallet(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2)\n+        throw runtime_error(\n+            \"usewallet <walletname> <method> [params]\\n\"\n+            \"Selects which wallet to use.\");\n+\n+    boost::shared_ptr<CWallet> spWallet;\n+    string strWalletName = params[0].get_str();\n+    try \n+    {\n+        spWallet = pWalletManager->GetWallet(strWalletName);\n+    }\n+    catch (const CWalletManagerException& e)\n+    {\n+        switch (e.type)\n+        {\n+            case CWalletManagerException::WALLET_NOT_LOADED:\n+                throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" not loaded.\");\n+\n+            default:\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Unknown wallet error.\");\n+        }\n+    }\n+\n+    string strMethod = params[1].get_str();\n+    const CRPCCommand *pcmd = tableRPC[strMethod];\n+    if (!pcmd)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, string(\"Method \") + strMethod + \" not found.\");\n+\n+    if (!pcmd->isWalletFn)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Method \") + strMethod + \" is not a wallet method.\");\n+\n+    Array subParams;\n+    for (unsigned int i = 2; i < params.size(); i++)\n+        subParams.push_back(params[i]);\n+\n+    return tableRPC.execute(strMethod, subParams, spWallet.get());\n+}\n+\n+Value loadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"loadwallet <walletname> [rescan=false] [upgradewallet=false] [maxversion=(latest)]\\n\"\n+            \"Loads a wallet.\");\n+\n+    string strWalletName = params[0].get_str();\n+\n+    if (pWalletManager->HaveWallet(strWalletName))\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Wallet \") + strWalletName + \" is already loaded.\");\n+\n+    ostringstream strErrors;\n+    bool fRescan = (params.size() > 1) ? params[1].get_bool() : false;\n+    bool fUpgrade = (params.size() > 2) ? params[2].get_bool() : false;\n+    int nMaxVersion = (params.size() > 3) ? params[3].get_int() : 0;\n+\n+    if (!pWalletManager->LoadWallet(strWalletName, strErrors, fRescan, fUpgrade, nMaxVersion))\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"Load failed: \") + strErrors.str());\n+\n+    return string(\"Wallet \") + strWalletName + \" loaded.\";\n+}\n+\n+Value unloadwallet(CWallet* pWallet, const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"unloadwallet <walletname>\\n\"\n+            \"Unloads a wallet.\");\n+\n+    string strWalletName = params[0].get_str();\n+\n+    if (strWalletName.size() == 0)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Default wallet cannot be unloaded.\");    \n+    if (!pWalletManager->UnloadWallet(strWalletName))\n+        throw JSONRPCError(RPC_WALLET_ERROR, string(\"No wallet named \") + strWalletName + \" is currently loaded.\");\n+\n+    return string(\"Wallet \") + strWalletName + \" unloaded.\";\n+}"
      },
      {
        "sha": "4c40d44de1dfa52a6af3a2f65c917a99386b3e9e",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -11,6 +11,56 @@\n #include <boost/thread/condition_variable.hpp>\n #include \"threadsafety.h\"\n \n+\n+\n+////////////////////////////////////////////////\n+//                                            //\n+// THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n+//                                            //\n+////////////////////////////////////////////////\n+\n+/*\n+ \n+ \n+ \n+CCriticalSection mutex;\n+   boost::recursive_mutex mutex;\n+\n+LOCK(mutex); // uses the local variable criticalblock for RAII\n+   boost::unique_lock<boost::recursive_mutex> lock(mutex);\n+   lock.lock();\n+\n+LOCK2(mutex1, mutex2); // uses the local variables criticalblock1, criticalblock2 for RAII\n+   boost::unique_lock<boost::recursive_mutex> lock1(mutex1);\n+   boost::unique_lock<boost::recursive_mutex> lock2(mutex2);\n+   lock1.lock();\n+   lock2.lock();\n+\n+TRY_LOCK(mutex, name); // uses the local variable name for RAII\n+  boost::unique_lock<boost::recursive_mutex> lock(mutex);\n+  lock.try_lock();\n+\n+ENTER_CRITICAL_SECTION(mutex); // no RAII\n+  mutex.lock();\n+\n+LEAVE_CRITICAL_SECTION(mutex); // no RAII\n+  mutex.unlock();\n+ \n+ \n+ \n+ */\n+\n+\n+\n+\n+\n+\n+///////////////////////////////\n+//                           //\n+// THE MASOCHISTIC DEFINITON //\n+//                           //\n+///////////////////////////////\n+\n // Template mixin that adds -Wthread-safety locking annotations to a\n // subset of the mutex API.\n template <typename PARENT>"
      },
      {
        "sha": "bb0ca4cf0cac3c0c74aa165a73ae961d355d10c4",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -6,6 +6,8 @@\n #include \"util.h\"\n #include \"bitcoinrpc.h\"\n \n+extern CWallet* pwalletMain;\n+\n using namespace std;\n using namespace json_spirit;\n \n@@ -34,30 +36,30 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n \n     Value v;\n     CBitcoinAddress address;\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(1, address1Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(1, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(2, address1Hex, address2Hex), false));\n+    BOOST_CHECK_NO_THROW(v = addmultisig(pwalletMain, createArgs(2, address1Hex, address2Hex), false));\n     address.SetString(v.get_str());\n     BOOST_CHECK(address.IsValid() && address.IsScript());\n \n-    BOOST_CHECK_THROW(addmultisig(createArgs(0), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, address1Hex), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(0), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, address1Hex), false), runtime_error);\n \n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1, \"\"), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n \n     string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, short1.c_str()), false), runtime_error);\n \n     string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n+    BOOST_CHECK_THROW(addmultisig(pwalletMain, createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n static Value CallRPC(string args)\n@@ -70,7 +72,7 @@ static Value CallRPC(string args)\n \n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        Value result = (*method)(params, false);\n+        Value result = (*method)(pwalletMain, params, false);\n         return result;\n     }\n     catch (Object& objError)"
      },
      {
        "sha": "0ecc210238960cffd3d1493161dbd31f302e7239",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -8,6 +8,8 @@\n #include \"wallet.h\"\n #include \"util.h\"\n \n+CWalletManager* pWalletManager;\n+// TODO: get rid of pwalletMain.\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n@@ -29,18 +31,19 @@ struct TestingSetup {\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n         LoadBlockIndex();\n-        bool fFirstRun;\n-        pwalletMain = new CWallet(\"wallet.dat\");\n-        pwalletMain->LoadWallet(fFirstRun);\n-        RegisterWallet(pwalletMain);\n+        pWalletManager = new CWalletManager();\n+        std::ostringstream ossErrors;\n+        pWalletManager->LoadWallet(\"\", ossErrors);\n+        pwalletMain = pWalletManager->GetDefaultWallet().get();\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             NewThread(ThreadScriptCheck, NULL);\n     }\n     ~TestingSetup()\n     {\n         ThreadScriptCheckQuit();\n-        delete pwalletMain;\n+        delete pWalletManager;\n+        pWalletManager = NULL;\n         pwalletMain = NULL;\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "79e061afc19aa792f0100bf764d80a0af860446e",
        "filename": "src/timer.cpp",
        "status": "added",
        "additions": 216,
        "deletions": 0,
        "changes": 216,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/timer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/timer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timer.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -0,0 +1,216 @@\n+#include \"timer.h\"\n+\n+#include <boost/thread/thread.hpp>\n+#include <boost/thread/thread_time.hpp>\n+#include <boost/thread/mutex.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+\n+#include <set>\n+#include <assert.h>\n+#include <stdio.h>\n+\n+typedef std::pair<boost::system_time, CTimerJob*> tref_t;\n+\n+/** Manager for scheduled timer jobs */\n+class CTimer {\n+    typedef std::set<tref_t> set_t;\n+\n+    // mutex for all internal variables, AND for the private fields in\n+    // CTimerJobs.\n+    boost::mutex mutex;\n+\n+    // The scheduled jobs.\n+    set_t jobs;\n+\n+    // Waited upon by the scheduler thread when no jobs need to run.\n+    boost::condition_variable condTimer;\n+\n+    // Waited upon by Exit() before exit.\n+    boost::condition_variable condExit;\n+\n+    // Waited upon by Unschedule/Schedule, while the Job is already running.\n+    boost::condition_variable condJobDone;\n+\n+    // Whether we need to shut down.\n+    bool fExit;\n+\n+    // Whether the scheduler thread is running.\n+    bool fRunning;\n+\n+    // @pre: job is not running or scheduled\n+    // @pre: lock on mutex is acquired\n+    void Schedule_(CTimerJob *job, const boost::system_time &time) {\n+        job->_scheduled = true;\n+        job->_time = time;\n+        std::pair<set_t::iterator,bool> ret = jobs.insert(std::make_pair(time, job));\n+        if (ret.first == jobs.begin())\n+            condTimer.notify_one();\n+    }\n+\n+    // @pre: lock on mutex is acquired in lock\n+    // @return: whether the job needed unscheduling\n+    bool Unschedule_(CTimerJob *job, boost::unique_lock<boost::mutex> &lock) {\n+        if (job->_scheduled) {\n+            tref_t ref(job->_time, job);\n+            jobs.erase(ref);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    // @pre: no job is running\n+    // @pre: lock on mutex is acquired in lock\n+    CTimerJob *Wait_(boost::unique_lock<boost::mutex> &lock) {\n+        while (fExit || jobs.empty() || boost::get_system_time() < jobs.begin()->first) {\n+            if (fExit)\n+                return NULL;\n+            if (jobs.empty())\n+                condTimer.wait(lock);\n+            else\n+                condTimer.timed_wait(lock, jobs.begin()->first);\n+        }\n+        CTimerJob *job = jobs.begin()->second;\n+        assert(job->_scheduled == true);\n+        assert(job->_running == false);\n+        job->_scheduled = false;\n+        job->_running = true;\n+        jobs.erase(jobs.begin());\n+        return job;\n+    }\n+\n+    // @pre: lock on mutex is acquired\n+    // @pre: job is running\n+    void Done_(CTimerJob *job, boost::unique_lock<boost::mutex> &lock) {\n+        assert(job->_running == true);\n+        job->_running = false;\n+        if (job->_autodelete && !job->_scheduled) {\n+            job->_autodelete = false;\n+            // calling delete runs Unschedule_, which needs the mutex, so give\n+            // it up temporarily.\n+            lock.unlock();\n+            delete job;\n+            lock.lock();\n+        }\n+        condJobDone.notify_one();\n+    }\n+\n+public:\n+    // Construct a timer.\n+    CTimer() : fExit(false), fRunning(false) {}\n+\n+    // Schedule a job.\n+    void Schedule(CTimerJob *job, const boost::system_time &time) {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+\n+        // Once fExit is set, only Exit() modifies the state still\n+        if (fExit)\n+            return;\n+\n+        // Unschedule the job, if necessary (but leave it running if it is)\n+        Unschedule_(job, lock);\n+\n+        // (Re)schedule the job\n+        Schedule_(job, time);\n+    }\n+\n+    // Unschedule a job (and wait for it to stop running, if necessary)\n+    bool Unschedule(CTimerJob *job) {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+\n+        // Once fExit is set, only Exit() modifies the state still\n+        if (fExit)\n+            return false;\n+\n+        // Wait until the job stops running\n+        while (job->_running)\n+            condJobDone.wait(lock);\n+\n+        return Unschedule_(job, lock);\n+    }\n+\n+    // Run the scheduler thread.\n+    void Run() {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        if (fRunning)\n+            return;\n+        fRunning = true;\n+        while (CTimerJob *job = Wait_(lock)) {\n+            lock.unlock();\n+            try {\n+                job->Run();\n+            } catch(...) {\n+            }\n+            lock.lock();\n+            Done_(job, lock);\n+        }\n+        fRunning = false;\n+        condExit.notify_all();\n+    }\n+\n+    // Shut down the manager.\n+    void Exit() {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+\n+        // Mark manager as shutting down, and notify waiters\n+        fExit = true;\n+        condTimer.notify_all();\n+\n+        // wait until Run finished\n+        while (fRunning)\n+            condExit.wait(lock);\n+\n+        // Unschedule (and autodelete) remaining jobs\n+        for (set_t::iterator it = jobs.begin(); it != jobs.end();) {\n+            it->second->_scheduled = false;\n+            assert(it->second->_running == false);\n+            if (it->second->_autodelete) {\n+                lock.unlock();\n+                delete it->second;\n+                lock.lock();\n+            }\n+            set_t::iterator it2 = it++;\n+            jobs.erase(it2);\n+        }\n+    }\n+};\n+\n+static CTimer timer;\n+\n+void static thread() {\n+    timer.Run();\n+}\n+    \n+void TimerThread::StartTimer() {\n+    boost::thread t(thread);\n+}\n+\n+void TimerThread::StopTimer() {\n+    timer.Exit();\n+}\n+\n+void CTimerJob::Schedule(const boost::system_time &time) {\n+    timer.Schedule(this, time);\n+}\n+\n+void CTimerJob::Schedule(const boost::posix_time::time_duration &dur) {\n+    timer.Schedule(this, boost::get_system_time() + dur);\n+}\n+\n+bool CTimerJob::Unschedule() {\n+    return timer.Unschedule(this);\n+}\n+\n+CTimerJob::~CTimerJob() {\n+    Unschedule();\n+}\n+\n+CTimerJob::CTimerJob(bool autodelete) : \n+    _time(boost::date_time::not_a_date_time), _running(false),\n+    _scheduled(false), _autodelete(autodelete) {}\n+\n+CTimerJob::CTimerJob(const boost::system_time &time, bool autodelete) : \n+    _time(boost::date_time::not_a_date_time), _running(false),\n+    _scheduled(false), _autodelete(autodelete) {\n+    Schedule(time);\n+}"
      },
      {
        "sha": "9fecab374e14e75fccd093d82483a3f8d032ccf3",
        "filename": "src/timer.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/timer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/timer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timer.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -0,0 +1,55 @@\n+#ifndef BITCOIN_TIMER_H_\n+#define BITCOIN_TIMER_H_\n+\n+#include <boost/thread/thread_time.hpp>\n+\n+class CTimer;\n+\n+/** A base class for jobs to be scheduled by the timer. */\n+class CTimerJob {\n+protected:\n+    // Method to be executed. Override with an actual implementation.\n+    virtual void Run() = 0;\n+\n+    // Destructor. This will automatically unschedule if necessary.\n+    virtual ~CTimerJob();\n+\n+    // Constructor for a job. Set autodelete to true for a fire-and-forget\n+    // new CTimerJobChild();.\n+    CTimerJob(bool fAutoDelete = false);\n+\n+    // Constructor for a job which automatically schedules it.\n+    CTimerJob(const boost::system_time &time, bool autodelete = false);\n+\n+public:\n+    // Unschedule this job. This will block while the job is running.\n+    // Returns whether the job was scheduled before.\n+    bool Unschedule();\n+\n+    // Schedule this job at the specified time. This will unschedule if\n+    // necessary first. It is allowed to schedule a job while it is already\n+    // running.\n+    void Schedule(const boost::system_time &time);\n+    void Schedule(const boost::posix_time::time_duration &dur);\n+\n+private:\n+    // these internal fields are only modified by CTimer itself\n+    friend class CTimer;\n+    boost::system_time _time;\n+    bool _running; // whether this job is running\n+    bool _scheduled; // whether this job is scheduled for running\n+    bool _autodelete; // whether this job is to be delete'd after running\n+};\n+\n+namespace TimerThread\n+{\n+    \n+/** Start the global timer thread */\n+void StartTimer();\n+\n+/** Stop the global timer thread */\n+void StopTimer();\n+\n+}\n+\n+#endif"
      },
      {
        "sha": "94335e1620aa8fa3061d91d3971d28d48418283c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -965,6 +965,39 @@ bool WildcardMatch(const string& str, const string& mask)\n \n \n \n+vector<string> GetFilesAtPath(const boost::filesystem::path& _path, unsigned int flags)\n+{\n+    vector<string> vstrFiles;\n+    if (!boost::filesystem::exists(_path))\n+        throw runtime_error(\"Path does not exist.\");\n+    \n+    if ((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(_path))\n+    {\n+#if defined (BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION == 3\n+        vstrFiles.push_back(_path.filename().string());\n+#else\n+        vstrFiles.push_back(_path.filename());\n+#endif\n+        return vstrFiles;\n+    }\n+    if (boost::filesystem::is_directory(_path))\n+    {\n+        vector<boost::filesystem::path> vPaths;\n+        copy(boost::filesystem::directory_iterator(_path), boost::filesystem::directory_iterator(), back_inserter(vPaths));\n+        BOOST_FOREACH(const boost::filesystem::path& pFile, vPaths)\n+        {\n+            if (((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(pFile)) ||\n+                ((flags & file_option_flags::DIRECTORIES) && boost::filesystem::is_directory(pFile)))\n+#if defined (BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION == 3\n+                vstrFiles.push_back(pFile.filename().string());\n+#else\n+                vstrFiles.push_back(pFile.filename());\n+#endif\n+        }\n+        return vstrFiles;\n+    }\n+    throw runtime_error(\"Path exists but is neither a regular file nor a directory.\");\n+}\n \n static std::string FormatException(std::exception* pex, const char* pszThread)\n {"
      },
      {
        "sha": "0f3d3d4378319683a501ad9136b719d24f486918",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -219,10 +219,17 @@ void runCommand(std::string strCommand);\n \n \n \n+namespace file_option_flags\n+{\n+    const unsigned int REGULAR_FILES = 0x01;\n+    const unsigned int DIRECTORIES = 0x02;\n+};\n \n \n \n \n+std::vector<std::string> GetFilesAtPath(const boost::filesystem::path& _path,\n+                                        unsigned int flags = file_option_flags::REGULAR_FILES | file_option_flags::DIRECTORIES);\n \n \n inline std::string i64tostr(int64 n)"
      },
      {
        "sha": "0d56df2feb4546b04abc638a951d6ed8b3a7655f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 252,
        "deletions": 0,
        "changes": 252,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -1710,6 +1710,34 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     return ret;\n }\n \n+bool CWallet::TimedLock(int64 seconds)\n+{\n+    if (IsLocked())\n+    {\n+        ResetLockTime();\n+        return false;\n+    }\n+    \n+    time_t rawtime = time(NULL) + seconds;\n+    rawtime += seconds;\n+    nLockTime = rawtime;\n+    struct tm* timeinfo = gmtime(&rawtime);\n+    \n+    char buffer[80];\n+    strftime(buffer ,80, \"%Y-%m-%d %H:%M:%S (UTC)\", timeinfo);\n+    strLockTime = buffer;\n+    \n+    lockJob.Schedule(boost::posix_time::seconds(seconds));\n+    return true;\n+}\n+\n+void CWalletLockJob::Run()\n+{\n+    printf(\"---------CWalletLockJob::Run() called------------\\n\");\n+    pWallet->Lock();\n+    pWallet->ResetLockTime();\n+}\n+\n CPubKey CReserveKey::GetReservedKey()\n {\n     if (nIndex == -1)\n@@ -1806,3 +1834,227 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+// TODO: Remove these functions\n+bool static InitError(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n+    return false;\n+}\n+\n+bool static InitWarning(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n+    return true;\n+}\n+\n+// TODO: Remove dependencies for I/O on printf to debug.log, InitError, and InitWarning\n+// TODO: Fix error handling.\n+bool CWalletManager::LoadWallet(const string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n+{\n+    // Check that the wallet name is valid\n+    if (!CWalletManager::IsValidName(strName))\n+    {\n+        strErrors << _(\"Wallet name may only contain letters, numbers, and underscores.\");\n+        return false;\n+    }\n+\n+    ENTER_CRITICAL_SECTION(cs_WalletManager);\n+\n+    // Check that wallet is not already loaded\n+    if (wallets.count(strName) > 0)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+        strErrors << _(\"A wallet with that name is already loaded.\");\n+        return false;\n+    }\n+    \n+    // Wallet file name for wallet foo will be wallet-foo.dat\n+    // The empty string is reserved for the default wallet whose file is wallet.dat\n+    string strFile = \"wallet\";\n+    if (strName.size() > 0)\n+        strFile += \"-\" + strName;\n+    strFile += \".dat\";\n+\n+    printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n+    int64 nStart = GetTimeMillis();\n+    bool fFirstRun = true;\n+    CWallet* pWallet;\n+    DBErrors nLoadWalletRet;\n+\n+    try\n+    {\n+        pWallet = new CWallet(strFile);\n+        nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n+    }\n+    catch (const exception& e)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+        strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile << \": \" << e.what();\n+        return false;\n+    }\n+    catch (...)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+        strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile;\n+        return false;\n+    }\n+\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT)\n+        {\n+            LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n+            delete pWallet;\n+            return false;\n+        }\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            string msg(_(\"Warning: error reading \"));\n+            msg += strFile + _(\"! All keys read correctly, but transaction data\"\n+                               \" or address book entries might be missing or incorrect.\");\n+            InitWarning(msg);\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n+            printf(\"%s\", strErrors.str().c_str());\n+            return InitError(strErrors.str());\n+        }\n+        else\n+            strErrors << _(\"Error loading \") << strFile << \"\\n\";\n+    }\n+    \n+    if (fFirstRun || fUpgrade)\n+    {\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            pWallet->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < pWallet->GetVersion())\n+            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+        pWallet->SetMaxVersion(nMaxVersion);\n+    }\n+    \n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+        \n+        CPubKey newDefaultKey;\n+        if (!pWallet->GetKeyFromPool(newDefaultKey, false))\n+            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n+        pWallet->SetDefaultKey(newDefaultKey);\n+        if (!pWallet->SetAddressBookName(pWallet->vchDefaultKey.GetID(), \"\"))\n+            strErrors << _(\"Cannot write default address\") << \"\\n\";\n+    }\n+    \n+    printf(\"%s\", strErrors.str().c_str());\n+    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    \n+    boost::shared_ptr<CWallet> spWallet(pWallet);\n+    this->wallets[strName] = spWallet;\n+    RegisterWallet(pWallet);\n+\n+    LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+\n+    CBlockIndex *pindexRescan = pindexBest;\n+    if (fRescan)\n+        pindexRescan = pindexGenesisBlock;\n+    else\n+    {\n+        CWalletDB walletdb(strFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = locator.GetBlockIndex();\n+    }\n+    if (pindexBest && pindexBest != pindexRescan)\n+    {\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        pWallet->ScanForWalletTransactions(pindexRescan, true);\n+        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    }\n+    \n+    return true;\n+}\n+\n+bool CWalletManager::UnloadWallet(const std::string& strName)\n+{\n+    {\n+        LOCK(cs_WalletManager);\n+        if (!wallets.count(strName)) return false;\n+        boost::shared_ptr<CWallet> spWallet(wallets[strName]);\n+        printf(\"Unloading wallet %s\\n\", strName.c_str());\n+        {\n+            LOCK(spWallet->cs_wallet);\n+            UnregisterWallet(spWallet.get());\n+            wallets.erase(strName);\n+        }\n+    }\n+    return true;\n+}\n+\n+void CWalletManager::UnloadAllWallets()\n+{\n+    {\n+        LOCK(cs_WalletManager);\n+        vector<string> vstrNames;\n+        vector<boost::shared_ptr<CWallet> > vpWallets;\n+        BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n+        {\n+            vstrNames.push_back(item.first);\n+            vpWallets.push_back(item.second);\n+        }\n+            \n+        for (unsigned int i = 0; i < vstrNames.size(); i++)\n+        {\n+            printf(\"Unloading wallet %s\\n\", vstrNames[i].c_str());\n+            {\n+                LOCK(vpWallets[i]->cs_wallet);\n+                UnregisterWallet(vpWallets[i].get());\n+                wallets.erase(vstrNames[i]);\n+            }\n+        }\n+    }\n+}\n+\n+boost::shared_ptr<CWallet> CWalletManager::GetWallet(const string& strName)\n+{\n+    {\n+        LOCK(cs_WalletManager);\n+        if (!wallets.count(strName))\n+            throw CWalletManagerException(CWalletManagerException::WALLET_NOT_LOADED,\n+                                          \"CWalletManager::GetWallet() - Wallet not loaded.\");\n+        return wallets[strName];\n+    }\n+}\n+\n+const boost::regex CWalletManager::WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n+const boost::regex CWalletManager::WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n+\n+bool CWalletManager::IsValidName(const string& strName)\n+{\n+    return boost::regex_match(strName, CWalletManager::WALLET_NAME_REGEX);\n+}\n+\n+vector<string> CWalletManager::GetWalletsAtPath(const boost::filesystem::path& pathWallets)\n+{\n+    vector<string> vstrFiles = GetFilesAtPath(pathWallets, file_option_flags::REGULAR_FILES);\n+    vector<string> vstrNames;\n+    boost::cmatch match;\n+    BOOST_FOREACH(const string& strFile, vstrFiles)\n+    {\n+        if (boost::regex_match(strFile.c_str(), match, CWalletManager::WALLET_FILE_REGEX))\n+            vstrNames.push_back(string(match[1].first, match[1].second));\n+    }\n+    return vstrNames;\n+}"
      },
      {
        "sha": "0e67036ad4672fc5ad3d95adff643f81f212ee85",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -17,7 +17,15 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"walletdb.h\"\n+#include \"timer.h\"\n \n+#include <stdexcept>\n+\n+#include <boost/shared_ptr.hpp>\n+#include <boost/regex.hpp>\n+#include <boost/thread.hpp>\n+\n+class CWallet;\n class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n@@ -34,6 +42,15 @@ enum WalletFeature\n     FEATURE_LATEST = 60000\n };\n \n+class CWalletLockJob : public CTimerJob\n+{\n+private:\n+    CWallet* pWallet;\n+    \n+public:\n+    void SetWallet(CWallet* _pWallet) { pWallet = _pWallet; }\n+    void Run();\n+};\n \n /** A key pool entry */\n class CKeyPool\n@@ -71,6 +88,11 @@ class CWallet : public CCryptoKeyStore\n     bool SelectCoins(int64 nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n \n     CWalletDB *pwalletdbEncryption;\n+    \n+    // for the lock timer\n+    CWalletLockJob lockJob;\n+    int64 nLockTime;\n+    std::string strLockTime;\n \n     // the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion;\n@@ -93,6 +115,9 @@ class CWallet : public CCryptoKeyStore\n \n     CWallet()\n     {\n+        lockJob.SetWallet(this);\n+        nLockTime = 0;\n+        strLockTime = \"Locked\";\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n         fFileBacked = false;\n@@ -102,6 +127,9 @@ class CWallet : public CCryptoKeyStore\n     }\n     CWallet(std::string strWalletFileIn)\n     {\n+        lockJob.SetWallet(this);\n+        nLockTime = 0;\n+        strLockTime = \"Locked\";\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n         strWalletFile = strWalletFileIn;\n@@ -111,6 +139,8 @@ class CWallet : public CCryptoKeyStore\n         nOrderPosNext = 0;\n     }\n \n+    ~CWallet() { CWalletDB::UnloadWallet(this); }\n+    \n     std::map<uint256, CWalletTx> mapWallet;\n     int64 nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n@@ -309,6 +339,57 @@ class CWallet : public CCryptoKeyStore\n      * @note called with lock cs_wallet held.\n      */\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n+    \n+    // If the wallet is unlocked, schedule a job to lock it again after a number of seconds\n+    bool TimedLock(int64 seconds);\n+    \n+    int64 GetLockTime() const { return nLockTime; }\n+    std::string GetStringLockTime() { return strLockTime; }\n+    void ResetLockTime() { nLockTime = 0; if (IsCrypted()) strLockTime = \"Locked\"; }\n+};\n+\n+class CWalletManagerException : public std::runtime_error\n+{\n+public:\n+    enum ErrorType\n+    {\n+        WALLET_NOT_LOADED,\n+        UNKNOWN_ERROR\n+    };\n+    ErrorType type;\n+\n+    CWalletManagerException(ErrorType _type, const char* message) : std::runtime_error(message), type(_type)  { }\n+};\n+\n+/** A CWalletManager handles loading, unloading, allocation, deallocation, and synchronization of wallet objects.\n+ */\n+typedef std::map<std::string, boost::shared_ptr<CWallet> > wallet_map;\n+class CWalletManager\n+{\n+protected:\n+    static const boost::regex WALLET_NAME_REGEX;\n+    static const boost::regex WALLET_FILE_REGEX;\n+\n+    mutable CCriticalSection cs_WalletManager;\n+    wallet_map wallets;\n+    \n+public:\n+    ~CWalletManager() { UnloadAllWallets(); }\n+    \n+    bool LoadWallet(const std::string& strName, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n+    bool UnloadWallet(const std::string& strName);\n+    void UnloadAllWallets();\n+    \n+    // GetWallet and GetDefaultWallet throw a CWalletManagerException if the wallet is not found.\n+    boost::shared_ptr<CWallet> GetWallet(const std::string& strName);\n+    boost::shared_ptr<CWallet> GetDefaultWallet() { return GetWallet(\"\"); }\n+    \n+    int GetWalletCount() { return wallets.size(); }\n+    wallet_map GetWalletMap() { return wallets; }\n+    bool HaveWallet(const std::string& strName) { return (wallets.count(strName) > 0); }\n+\n+    static bool IsValidName(const std::string& strName);\n+    static std::vector<std::string> GetWalletsAtPath(const boost::filesystem::path& pathWallets);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "bc30f339cc4dddbc5c1b7704e2794cb6a7b6f0fc",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -481,6 +481,31 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n+\n+void CWalletDB::UnloadWallet(CWallet* pwallet)\n+{\n+    if (!pwallet || !pwallet->fFileBacked)\n+        return;\n+    while (!fShutdown)\n+    {\n+        {\n+            LOCK(bitdb.cs_db);\n+            if (!bitdb.mapFileUseCount.count(pwallet->strWalletFile) || bitdb.mapFileUseCount[pwallet->strWalletFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                bitdb.CloseDb(pwallet->strWalletFile);\n+                printf(\"%s checkpoint\\n\", pwallet->strWalletFile.c_str());\n+                printf(\"%s detach\\n\", pwallet->strWalletFile.c_str());\n+                bitdb.CheckpointLSN(pwallet->strWalletFile);\n+                printf(\"%s closed\\n\", pwallet->strWalletFile.c_str());\n+                bitdb.mapFileUseCount.erase(pwallet->strWalletFile);\n+                return;\n+            }\n+        }\n+        Sleep(100);\n+    }\n+}\n+\n void ThreadFlushWalletDB(void* parg)\n {\n     // Make this thread recognisable as the wallet flushing thread"
      },
      {
        "sha": "e9d6a02d5ba718f61f3837d1131a0aa41bdafeae",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f429b8c7062e97c3478af3bc5273ff8f6daa43c/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "patch": "@@ -156,6 +156,7 @@ class CWalletDB : public CDB\n \n     DBErrors ReorderTransactions(CWallet*);\n     DBErrors LoadWallet(CWallet* pwallet);\n+    static void UnloadWallet(CWallet* pwallet);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  },
  {
    "sha": "18ad19fbde0688645f52e26ae545da2849d7c9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGFkMTlmYmRlMDY4ODY0NWY1MmUyNmFlNTQ1ZGEyODQ5ZDdjOWI0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-19T13:43:23Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-19T14:08:36Z"
      },
      "message": "Merged multiwallet-qt (3cfab72) with multiwallet (5f429b8).",
      "tree": {
        "sha": "0123dc5e8ed1b483755845d9f4f1ff178d275942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0123dc5e8ed1b483755845d9f4f1ff178d275942"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18ad19fbde0688645f52e26ae545da2849d7c9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18ad19fbde0688645f52e26ae545da2849d7c9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18ad19fbde0688645f52e26ae545da2849d7c9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18ad19fbde0688645f52e26ae545da2849d7c9b4/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f429b8c7062e97c3478af3bc5273ff8f6daa43c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f429b8c7062e97c3478af3bc5273ff8f6daa43c"
      }
    ],
    "stats": {
      "total": 1369,
      "additions": 1115,
      "deletions": 254
    },
    "files": [
      {
        "sha": "116b568f3360ca8fa3ae76823d1f62fe2e3d46e0",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -181,6 +181,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/transactionfilterproxy.h \\\n     src/qt/transactionview.h \\\n     src/qt/walletmodel.h \\\n+    src/qt/walletview.h \\\n+    src/qt/walletstack.h \\\n     src/bitcoinrpc.h \\\n     src/qt/overviewpage.h \\\n     src/qt/csvmodelwriter.h \\\n@@ -245,6 +247,8 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactionfilterproxy.cpp \\\n     src/qt/transactionview.cpp \\\n     src/qt/walletmodel.cpp \\\n+    src/qt/walletview.cpp \\\n+    src/qt/walletstack.cpp \\\n     src/bitcoinrpc.cpp \\\n     src/rpcdump.cpp \\\n     src/rpcnet.cpp \\"
      },
      {
        "sha": "31bb8d3c28e2831ffed12bf4378633b5074f7d28",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -233,10 +233,19 @@ int main(int argc, char *argv[])\n                     splash.finish(&window);\n \n                 ClientModel clientModel(&optionsModel);\n-                WalletModel walletModel(pwalletMain, &optionsModel);\n \n                 window.setClientModel(&clientModel);\n-                window.setWalletModel(&walletModel);\n+                window.setWalletManager(pWalletManager);\n+                \n+                // Create wallet models for each wallet and add it.\n+                BOOST_FOREACH(const wallet_map::value_type& item, pWalletManager->GetWalletMap())\n+                {\n+                    QString name(item.first.c_str());\n+                    if (name == \"\") name = \"~Default\";\n+                    WalletModel *walletModel = new WalletModel(item.second.get(), &optionsModel);\n+                    window.addWallet(name, walletModel);\n+                }\n+                window.setCurrentWallet(\"~Default\");\n \n                 // If -min option passed, start window minimized.\n                 if(GetBoolArg(\"-min\"))\n@@ -255,7 +264,7 @@ int main(int argc, char *argv[])\n \n                 window.hide();\n                 window.setClientModel(0);\n-                window.setWalletModel(0);\n+                                \n                 guiref = 0;\n             }\n             // Shutdown the core and its threads, but don't exit Bitcoin-Qt here"
      },
      {
        "sha": "aa14324dad6a6b422f8a418a02401d5a22626388",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 185,
        "deletions": 216,
        "changes": 401,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -6,27 +6,22 @@\n  */\n #include \"bitcoingui.h\"\n #include \"transactiontablemodel.h\"\n-#include \"addressbookpage.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"signverifymessagedialog.h\"\n #include \"optionsdialog.h\"\n #include \"aboutdialog.h\"\n #include \"clientmodel.h\"\n #include \"walletmodel.h\"\n-#include \"editaddressdialog.h\"\n+#include \"walletstack.h\"\n #include \"optionsmodel.h\"\n #include \"transactiondescdialog.h\"\n-#include \"addresstablemodel.h\"\n-#include \"transactionview.h\"\n-#include \"overviewpage.h\"\n #include \"bitcoinunits.h\"\n #include \"guiconstants.h\"\n-#include \"askpassphrasedialog.h\"\n #include \"notificator.h\"\n #include \"guiutil.h\"\n #include \"rpcconsole.h\"\n #include \"ui_interface.h\"\n \n+#include \"wallet.h\"\n+\n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n #endif\n@@ -55,13 +50,14 @@\n #include <QDragEnterEvent>\n #include <QUrl>\n #include <QStyle>\n+#include <QListWidget>\n \n #include <iostream>\n \n BitcoinGUI::BitcoinGUI(QWidget *parent):\n     QMainWindow(parent),\n     clientModel(0),\n-    walletModel(0),\n+    walletManager(0),\n     encryptWalletAction(0),\n     changePassphraseAction(0),\n     aboutQtAction(0),\n@@ -93,31 +89,47 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     // Create system tray icon and notification\n     createTrayIcon();\n \n-    // Create tabs\n-    overviewPage = new OverviewPage();\n-\n-    transactionsPage = new QWidget(this);\n-    QVBoxLayout *vbox = new QVBoxLayout();\n-    transactionView = new TransactionView(this);\n-    vbox->addWidget(transactionView);\n-    transactionsPage->setLayout(vbox);\n-\n-    addressBookPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab);\n-\n-    receiveCoinsPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab);\n-\n-    sendCoinsPage = new SendCoinsDialog(this);\n-\n-    signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n-\n-    centralWidget = new QStackedWidget(this);\n-    centralWidget->addWidget(overviewPage);\n-    centralWidget->addWidget(transactionsPage);\n-    centralWidget->addWidget(addressBookPage);\n-    centralWidget->addWidget(receiveCoinsPage);\n-    centralWidget->addWidget(sendCoinsPage);\n-    setCentralWidget(centralWidget);\n-\n+    // Create wallet list, load/unload buttons, and view\n+    QFrame *walletFrame = new QFrame();\n+    QHBoxLayout *walletFrameLayout = new QHBoxLayout(walletFrame);\n+    \n+    // Create wallet list contro, load and unload buttons\n+    QFrame *listFrame = new QFrame();\n+    listFrame->setMinimumWidth(200);\n+    listFrame->setMaximumWidth(200);\n+    QVBoxLayout *listFrameLayout = new QVBoxLayout(listFrame);\n+    \n+    QLabel *listFrameLabel = new QLabel();\n+    listFrameLabel->setText(tr(\"Wallets\"));\n+    listFrameLabel->setAlignment(Qt::AlignHCenter);\n+    listFrameLayout->addWidget(listFrameLabel);\n+    \n+    walletList = new QListWidget();\n+    listFrameLayout->addWidget(walletList);\n+\n+    // Create wallet load and unload buttons\n+    QFrame *loadButtonFrame = new QFrame();\n+    QHBoxLayout *loadButtonFrameLayout = new QHBoxLayout(loadButtonFrame);\n+\n+    loadWalletButton = new QPushButton(\"Load...\");\n+    unloadWalletButton = new QPushButton(\"Unload\");\n+    loadButtonFrameLayout->addWidget(loadWalletButton);\n+    loadButtonFrameLayout->addWidget(unloadWalletButton);\n+    listFrameLayout->addWidget(loadButtonFrame);\n+    \n+    connect(loadWalletButton, SIGNAL(clicked()), this, SLOT(loadWallet()));\n+    connect(unloadWalletButton, SIGNAL(clicked()), this, SLOT(unloadWallet()));\n+    \n+    // Create wallet stack\n+    walletStack = new WalletStack(this);\n+    walletStack->setBitcoinGUI(this);\n+\n+    walletFrameLayout->addWidget(listFrame);\n+    walletFrameLayout->addWidget(walletStack);\n+    setCentralWidget(walletFrame);\n+\n+    connect(walletList, SIGNAL(currentTextChanged(const QString&)), walletStack, SLOT(setCurrentWalletView(const QString&)));\n+    \n     // Create status bar\n     statusBar();\n \n@@ -162,29 +174,33 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n \n     syncIconMovie = new QMovie(\":/movies/update_spinner\", \"mng\", this);\n \n-    // Clicking on a transaction on the overview page simply sends you to transaction history page\n-    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), this, SLOT(gotoHistoryPage()));\n-    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n-\n-    // Double-clicking on a transaction on the transaction history page shows details\n-    connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n-\n     rpcConsole = new RPCConsole(this);\n     connect(openRPCConsoleAction, SIGNAL(triggered()), rpcConsole, SLOT(show()));\n \n-    // Clicking on \"Verify Message\" in the address book sends you to the verify message tab\n-    connect(addressBookPage, SIGNAL(verifyMessage(QString)), this, SLOT(gotoVerifyMessageTab(QString)));\n-    // Clicking on \"Sign Message\" in the receive coins page sends you to the sign message tab\n-    connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));\n-\n     // Install event filter to be able to catch status tip events (QEvent::StatusTip)\n     this->installEventFilter(this);\n-\n-    gotoOverviewPage();\n }\n \n BitcoinGUI::~BitcoinGUI()\n {\n+    // Remove wallet views from walletStack\n+/*    while (QListWidgetItem *item = walletList->takeItem(0))\n+    {\n+        QString walletName = item->text();\n+        walletStack->removeWalletView(walletName);\n+        delete item;\n+        WalletModel *walletModel = mapWalletModels.take(walletName);\n+        delete walletModel;\n+    }*/\n+    \n+    QMap<QString, WalletModel*>::const_iterator item = mapWalletModels.constBegin();\n+    while (item != mapWalletModels.constEnd())\n+    {\n+        walletStack->removeWalletView(item.key());\n+        delete item.value();\n+        item++;\n+    }\n+    \n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)\n         trayIcon->hide();\n #ifdef Q_OS_MAC\n@@ -242,6 +258,12 @@ void BitcoinGUI::createActions()\n     connect(addressBookAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));\n \n+    loadWalletAction = new QAction(tr(\"&Load Wallet...\"), this);\n+    unloadWalletAction = new QAction(tr(\"&Unload Wallet\"), this);\n+    \n+    connect(loadWalletAction, SIGNAL(triggered()), this, SLOT(loadWallet()));\n+    connect(unloadWalletAction, SIGNAL(triggered()), this, SLOT(unloadWallet()));\n+    \n     quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n@@ -300,6 +322,8 @@ void BitcoinGUI::createMenuBar()\n     // Configure the menus\n     QMenu *file = appMenuBar->addMenu(tr(\"&File\"));\n     file->addAction(backupWalletAction);\n+    file->addAction(loadWalletAction);\n+    file->addAction(unloadWalletAction);\n     file->addAction(exportAction);\n     file->addAction(signMessageAction);\n     file->addAction(verifyMessageAction);\n@@ -374,40 +398,25 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n \n         // Receive and report messages from network/worker thread\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n-\n-        overviewPage->setClientModel(clientModel);\n-        rpcConsole->setClientModel(clientModel);\n-        addressBookPage->setOptionsModel(clientModel->getOptionsModel());\n-        receiveCoinsPage->setOptionsModel(clientModel->getOptionsModel());\n+        \n+        walletStack->setClientModel(clientModel);\n     }\n }\n \n-void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n+bool BitcoinGUI::addWallet(const QString& name, WalletModel *walletModel)\n {\n-    this->walletModel = walletModel;\n-    if(walletModel)\n-    {\n-        // Receive and report messages from wallet thread\n-        connect(walletModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n-\n-        // Put transaction list in tabs\n-        transactionView->setModel(walletModel);\n-        overviewPage->setWalletModel(walletModel);\n-        addressBookPage->setModel(walletModel->getAddressTableModel());\n-        receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n-        sendCoinsPage->setModel(walletModel);\n-        signVerifyMessageDialog->setModel(walletModel);\n-\n-        setEncryptionStatus(walletModel->getEncryptionStatus());\n-        connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n-\n-        // Balloon pop-up for new transaction\n-        connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n-                this, SLOT(incomingTransaction(QModelIndex,int,int)));\n-\n-        // Ask for passphrase if needed\n-        connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n-    }\n+    if (!walletStack->addWalletView(name, walletModel)) return false;\n+    walletList->addItem(name);\n+    mapWalletModels[name] = walletModel;\n+    return true;\n+}\n+\n+bool BitcoinGUI::setCurrentWallet(const QString& name)\n+{\n+    QList<QListWidgetItem*> walletItems = walletList->findItems(name, Qt::MatchExactly);\n+    if (walletItems.count() == 0) return false;\n+    walletList->setCurrentItem(walletItems[0]);\n+    return true;\n }\n \n void BitcoinGUI::createTrayIcon()\n@@ -482,6 +491,41 @@ void BitcoinGUI::aboutClicked()\n     dlg.exec();\n }\n \n+void BitcoinGUI::gotoOverviewPage()\n+{\n+    if (walletStack) walletStack->gotoOverviewPage();\n+}\n+\n+void BitcoinGUI::gotoHistoryPage()\n+{\n+    if (walletStack) walletStack->gotoHistoryPage();\n+}\n+\n+void BitcoinGUI::gotoAddressBookPage()\n+{\n+    if (walletStack) walletStack->gotoAddressBookPage();\n+}\n+\n+void BitcoinGUI::gotoReceiveCoinsPage()\n+{\n+    if (walletStack) walletStack->gotoReceiveCoinsPage();\n+}\n+\n+void BitcoinGUI::gotoSendCoinsPage()\n+{\n+    if (walletStack) walletStack->gotoSendCoinsPage();\n+}\n+\n+void BitcoinGUI::gotoSignMessageTab(QString addr)\n+{\n+    if (walletStack) walletStack->gotoSignMessageTab(addr);\n+}\n+\n+void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n+{\n+    if (walletStack) walletStack->gotoSignMessageTab(addr);\n+}\n+\n void BitcoinGUI::setNumConnections(int count)\n {\n     QString icon;\n@@ -581,15 +625,15 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         tooltip = tr(\"Up to date\") + QString(\".<br>\") + tooltip;\n         labelBlocksIcon->setPixmap(QIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n-        overviewPage->showOutOfSyncWarning(false);\n+        walletStack->showOutOfSyncWarning(false);\n     }\n     else\n     {\n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;\n         labelBlocksIcon->setMovie(syncIconMovie);\n         syncIconMovie->start();\n \n-        overviewPage->showOutOfSyncWarning(true);\n+        walletStack->showOutOfSyncWarning(true);\n     }\n \n     if(!text.isEmpty())\n@@ -697,100 +741,57 @@ void BitcoinGUI::askFee(qint64 nFeeRequired, bool *payFee)\n     *payFee = (retval == QMessageBox::Yes);\n }\n \n-void BitcoinGUI::incomingTransaction(const QModelIndex& parent, int start, int /*end*/)\n+void BitcoinGUI::incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address)\n {\n-    // Prevent balloon-spam when initial block download is in progress\n-    if(!walletModel || !clientModel || clientModel->inInitialBlockDownload())\n-        return;\n-\n-    TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n-\n-    QString date = ttm->index(start, TransactionTableModel::Date, parent)\n-                     .data().toString();\n-    qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent)\n-                      .data(Qt::EditRole).toULongLong();\n-    QString type = ttm->index(start, TransactionTableModel::Type, parent)\n-                     .data().toString();\n-    QString address = ttm->index(start, TransactionTableModel::ToAddress, parent)\n-                        .data().toString();\n-\n-    // On new transaction, make an info balloon\n+   // On new transaction, make an info balloon\n     message((amount)<0 ? tr(\"Sent transaction\") : tr(\"Incoming transaction\"),\n              tr(\"Date: %1\\n\"\n                 \"Amount: %2\\n\"\n                 \"Type: %3\\n\"\n                 \"Address: %4\\n\")\n                   .arg(date)\n-                  .arg(BitcoinUnits::formatWithUnit(walletModel->getOptionsModel()->getDisplayUnit(), amount, true))\n+                  .arg(BitcoinUnits::formatWithUnit(unit, amount, true))\n                   .arg(type)\n                   .arg(address), CClientUIInterface::MSG_INFORMATION);\n }\n \n-void BitcoinGUI::gotoOverviewPage()\n-{\n-    overviewAction->setChecked(true);\n-    centralWidget->setCurrentWidget(overviewPage);\n-\n-    exportAction->setEnabled(false);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-}\n-\n-void BitcoinGUI::gotoHistoryPage()\n-{\n-    historyAction->setChecked(true);\n-    centralWidget->setCurrentWidget(transactionsPage);\n-\n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n-}\n-\n-void BitcoinGUI::gotoAddressBookPage()\n-{\n-    addressBookAction->setChecked(true);\n-    centralWidget->setCurrentWidget(addressBookPage);\n-\n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n-}\n-\n-void BitcoinGUI::gotoReceiveCoinsPage()\n+void BitcoinGUI::loadWallet()\n {\n-    receiveCoinsAction->setChecked(true);\n-    centralWidget->setCurrentWidget(receiveCoinsPage);\n+    if (!clientModel || !walletManager) return;\n \n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n-}\n+    QString dataDir = GetDataDir().string().c_str();\n+    QString walletFile = QFileDialog::getOpenFileName(this,\n+        tr(\"Load Wallet\"), dataDir, tr(\"Wallet Files (*.dat)\"));\n \n-void BitcoinGUI::gotoSendCoinsPage()\n-{\n-    sendCoinsAction->setChecked(true);\n-    centralWidget->setCurrentWidget(sendCoinsPage);\n+    if (walletFile == \"\") return;\n \n-    exportAction->setEnabled(false);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    std::ostringstream err;\n+    std::string walletName;\n+    if (!walletManager->LoadWalletFromFile(walletFile.toStdString(), walletName, err))\n+    {\n+        QMessageBox errBox;\n+        errBox.setText(err.str().c_str());\n+        errBox.exec();\n+        return;\n+    }\n+    WalletModel *walletModel = new WalletModel(walletManager->GetWallet(walletName).get(), clientModel->getOptionsModel());\n+    addWallet(walletName.c_str(), walletModel);\n+    setCurrentWallet(walletName.c_str());\n }\n \n-void BitcoinGUI::gotoSignMessageTab(QString addr)\n+void BitcoinGUI::unloadWallet()\n {\n-    // call show() in showTab_SM()\n-    signVerifyMessageDialog->showTab_SM(true);\n-\n-    if(!addr.isEmpty())\n-        signVerifyMessageDialog->setAddress_SM(addr);\n+    int row = walletList->currentRow();\n+    if (row <= 0) return;\n+    QListWidgetItem* selectedItem = walletList->takeItem(row);\n+    QString walletName = selectedItem->text();\n+    walletStack->removeWalletView(walletName);\n+    delete selectedItem;\n+    WalletModel *walletModel = mapWalletModels.take(walletName);\n+    delete walletModel;\n+    walletManager->UnloadWallet(walletName.toStdString());\n }\n \n-void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n-{\n-    // call show() in showTab_VM()\n-    signVerifyMessageDialog->showTab_VM(true);\n-\n-    if(!addr.isEmpty())\n-        signVerifyMessageDialog->setAddress_VM(addr);\n-}\n \n void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)\n {\n@@ -807,13 +808,13 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n         QList<QUrl> uris = event->mimeData()->urls();\n         foreach(const QUrl &uri, uris)\n         {\n-            if (sendCoinsPage->handleURI(uri.toString()))\n+            if (walletStack->handleURI(uri.toString()))\n                 nValidUrisFound++;\n         }\n \n         // if valid URIs were found\n         if (nValidUrisFound)\n-            gotoSendCoinsPage();\n+            walletStack->gotoSendCoinsPage();\n         else\n             message(tr(\"URI handling\"), tr(\"URI can not be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                       CClientUIInterface::ICON_WARNING);\n@@ -837,90 +838,58 @@ bool BitcoinGUI::eventFilter(QObject *object, QEvent *event)\n void BitcoinGUI::handleURI(QString strURI)\n {\n     // URI has to be valid\n-    if (sendCoinsPage->handleURI(strURI))\n-    {\n-        showNormalIfMinimized();\n-        gotoSendCoinsPage();\n-    }\n-    else\n+    if (!walletStack->handleURI(strURI))\n         message(tr(\"URI handling\"), tr(\"URI can not be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n-                  CClientUIInterface::ICON_WARNING);\n+                     CClientUIInterface::ICON_WARNING);\n }\n \n void BitcoinGUI::setEncryptionStatus(int status)\n {\n     switch(status)\n     {\n-    case WalletModel::Unencrypted:\n-        labelEncryptionIcon->hide();\n-        encryptWalletAction->setChecked(false);\n-        changePassphraseAction->setEnabled(false);\n-        encryptWalletAction->setEnabled(true);\n-        break;\n-    case WalletModel::Unlocked:\n-        labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(QIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n-        labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));\n-        encryptWalletAction->setChecked(true);\n-        changePassphraseAction->setEnabled(true);\n-        encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n-        break;\n-    case WalletModel::Locked:\n-        labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(QIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n-        labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));\n-        encryptWalletAction->setChecked(true);\n-        changePassphraseAction->setEnabled(true);\n-        encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n-        break;\n+        case WalletModel::Unencrypted:\n+            labelEncryptionIcon->hide();\n+            encryptWalletAction->setChecked(false);\n+            changePassphraseAction->setEnabled(false);\n+            encryptWalletAction->setEnabled(true);\n+            break;\n+        case WalletModel::Unlocked:\n+            labelEncryptionIcon->show();\n+            labelEncryptionIcon->setPixmap(QIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+            labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));\n+            encryptWalletAction->setChecked(true);\n+            changePassphraseAction->setEnabled(true);\n+            encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n+            break;\n+        case WalletModel::Locked:\n+            labelEncryptionIcon->show();\n+            labelEncryptionIcon->setPixmap(QIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+            labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));\n+            encryptWalletAction->setChecked(true);\n+            changePassphraseAction->setEnabled(true);\n+            encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n+            break;\n     }\n }\n \n void BitcoinGUI::encryptWallet(bool status)\n {\n-    if(!walletModel)\n-        return;\n-    AskPassphraseDialog dlg(status ? AskPassphraseDialog::Encrypt:\n-                                     AskPassphraseDialog::Decrypt, this);\n-    dlg.setModel(walletModel);\n-    dlg.exec();\n-\n-    setEncryptionStatus(walletModel->getEncryptionStatus());\n+    walletStack->encryptWallet(status);\n }\n \n void BitcoinGUI::backupWallet()\n {\n-    QString saveDir = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);\n-    QString filename = QFileDialog::getSaveFileName(this, tr(\"Backup Wallet\"), saveDir, tr(\"Wallet Data (*.dat)\"));\n-    if(!filename.isEmpty()) {\n-        if(!walletModel->backupWallet(filename)) {\n-            message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to the new location.\"),\n-                      CClientUIInterface::MSG_ERROR);\n-        }\n-        else\n-            message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to the new location.\"),\n-                      CClientUIInterface::MSG_INFORMATION);\n-    }\n+    walletStack->backupWallet();\n }\n \n void BitcoinGUI::changePassphrase()\n {\n-    AskPassphraseDialog dlg(AskPassphraseDialog::ChangePass, this);\n-    dlg.setModel(walletModel);\n-    dlg.exec();\n+    walletStack->changePassphrase();\n }\n \n void BitcoinGUI::unlockWallet()\n {\n-    if(!walletModel)\n-        return;\n-    // Unlock wallet when requested by wallet model\n-    if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n-    {\n-        AskPassphraseDialog dlg(AskPassphraseDialog::Unlock, this);\n-        dlg.setModel(walletModel);\n-        dlg.exec();\n-    }\n+    walletStack->unlockWallet();\n }\n \n void BitcoinGUI::showNormalIfMinimized(bool fToggleHidden)"
      },
      {
        "sha": "6b4bb44bfd0d62d44079f9fe8ea8c898a0c43ee8",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 44,
        "deletions": 33,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -3,10 +3,13 @@\n \n #include <QMainWindow>\n #include <QSystemTrayIcon>\n+#include <QMap>\n \n class TransactionTableModel;\n+class WalletView;\n class ClientModel;\n class WalletModel;\n+class WalletStack;\n class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n@@ -15,6 +18,9 @@ class SignVerifyMessageDialog;\n class Notificator;\n class RPCConsole;\n \n+class CWallet;\n+class CWalletManager;\n+\n QT_BEGIN_NAMESPACE\n class QLabel;\n class QLineEdit;\n@@ -24,6 +30,8 @@ class QModelIndex;\n class QProgressBar;\n class QStackedWidget;\n class QUrl;\n+class QListWidget;\n+class QPushButton;\n QT_END_NAMESPACE\n \n /**\n@@ -45,7 +53,10 @@ class BitcoinGUI : public QMainWindow\n         The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending\n         functionality.\n     */\n-    void setWalletModel(WalletModel *walletModel);\n+\n+    void setWalletManager(CWalletManager *walletManager) { this->walletManager = walletManager; }\n+    bool addWallet(const QString& name, WalletModel *walletModel);\n+    bool setCurrentWallet(const QString& name);\n \n protected:\n     void changeEvent(QEvent *e);\n@@ -56,16 +67,13 @@ class BitcoinGUI : public QMainWindow\n \n private:\n     ClientModel *clientModel;\n-    WalletModel *walletModel;\n-\n-    QStackedWidget *centralWidget;\n-\n-    OverviewPage *overviewPage;\n-    QWidget *transactionsPage;\n-    AddressBookPage *addressBookPage;\n-    AddressBookPage *receiveCoinsPage;\n-    SendCoinsDialog *sendCoinsPage;\n-    SignVerifyMessageDialog *signVerifyMessageDialog;\n+    CWalletManager *walletManager;\n+    QMap<QString, WalletModel*> mapWalletModels;\n+    QListWidget *walletList;\n+    WalletStack *walletStack;\n+    WalletView *walletView;\n+    QPushButton *loadWalletButton;\n+    QPushButton *unloadWalletButton;\n \n     QLabel *labelEncryptionIcon;\n     QLabel *labelConnectionsIcon;\n@@ -91,7 +99,9 @@ class BitcoinGUI : public QMainWindow\n     QAction *changePassphraseAction;\n     QAction *aboutQtAction;\n     QAction *openRPCConsoleAction;\n-\n+    QAction *loadWalletAction;\n+    QAction *unloadWalletAction;\n+    \n     QSystemTrayIcon *trayIcon;\n     Notificator *notificator;\n     TransactionView *transactionView;\n@@ -111,6 +121,22 @@ class BitcoinGUI : public QMainWindow\n     void createTrayIconMenu();\n \n public slots:\n+    /** Switch to overview (home) page */\n+    void gotoOverviewPage();\n+    /** Switch to history (transactions) page */\n+    void gotoHistoryPage();\n+    /** Switch to address book page */\n+    void gotoAddressBookPage();\n+    /** Switch to receive coins page */\n+    void gotoReceiveCoinsPage();\n+    /** Switch to send coins page */\n+    void gotoSendCoinsPage();\n+\n+    /** Show Sign/Verify Message dialog and switch to sign message tab */\n+    void gotoSignMessageTab(QString addr = \"\");\n+    /** Show Sign/Verify Message dialog and switch to verify message tab */\n+    void gotoVerifyMessageTab(QString addr = \"\");\n+    \n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks shown in the UI */\n@@ -139,23 +165,13 @@ public slots:\n     void askFee(qint64 nFeeRequired, bool *payFee);\n     void handleURI(QString strURI);\n \n-private slots:\n-    /** Switch to overview (home) page */\n-    void gotoOverviewPage();\n-    /** Switch to history (transactions) page */\n-    void gotoHistoryPage();\n-    /** Switch to address book page */\n-    void gotoAddressBookPage();\n-    /** Switch to receive coins page */\n-    void gotoReceiveCoinsPage();\n-    /** Switch to send coins page */\n-    void gotoSendCoinsPage();\n-\n-    /** Show Sign/Verify Message dialog and switch to sign message tab */\n-    void gotoSignMessageTab(QString addr = \"\");\n-    /** Show Sign/Verify Message dialog and switch to verify message tab */\n-    void gotoVerifyMessageTab(QString addr = \"\");\n+    /** Show incoming transaction notification for new transactions. */\n+    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    \n+    void loadWallet();\n+    void unloadWallet();\n \n+private slots:\n     /** Show configuration dialog */\n     void optionsClicked();\n     /** Show about dialog */\n@@ -164,11 +180,6 @@ private slots:\n     /** Handle tray icon clicked */\n     void trayIconActivated(QSystemTrayIcon::ActivationReason reason);\n #endif\n-    /** Show incoming transaction notification for new transactions.\n-\n-        The new items are those between start and end inclusive, under the given parent item.\n-    */\n-    void incomingTransaction(const QModelIndex& parent, int start, int /*end*/);\n     /** Encrypt the wallet */\n     void encryptWallet(bool status);\n     /** Backup the wallet */"
      },
      {
        "sha": "e68fe33b3d789ea746b184fc3eecbc65f77deda3",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -27,7 +27,7 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n \n ClientModel::~ClientModel()\n {\n-    unsubscribeFromCoreSignals();\n+    //unsubscribeFromCoreSignals();\n }\n \n int ClientModel::getNumConnections() const"
      },
      {
        "sha": "40c5b945e597a533c17adab1f52990b03043c5d9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <QSet>\n #include <QTimer>\n+#include <QMessageBox>\n \n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n@@ -33,7 +34,7 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n \n WalletModel::~WalletModel()\n {\n-    unsubscribeFromCoreSignals();\n+    //unsubscribeFromCoreSignals();\n }\n \n qint64 WalletModel::getBalance() const"
      },
      {
        "sha": "2a88b52a4a339747f8bf08ca93573fb8621efb9d",
        "filename": "src/qt/walletstack.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletstack.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletstack.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletstack.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -0,0 +1,147 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#include \"walletstack.h\"\n+#include \"walletview.h\"\n+#include \"bitcoingui.h\"\n+\n+#include <QMap>\n+#include <QMessageBox>\n+\n+WalletStack::WalletStack(QWidget *parent) :\n+    QStackedWidget(parent),\n+    clientModel(0),\n+    bOutOfSync(true)\n+{\n+}\n+\n+WalletStack::~WalletStack()\n+{\n+}\n+\n+bool WalletStack::addWalletView(const QString& name, WalletModel *walletModel)\n+{\n+    if (!gui || !clientModel || mapWalletViews.count(name) > 0)\n+        return false;\n+    \n+    WalletView *walletView = new WalletView(this, gui);\n+    walletView->setBitcoinGUI(gui);\n+    walletView->setClientModel(clientModel);\n+    walletView->setWalletModel(walletModel);\n+    walletView->showOutOfSyncWarning(bOutOfSync);\n+    addWidget(walletView);\n+    mapWalletViews[name] = walletView;\n+    return true;\n+}\n+\n+bool WalletStack::removeWalletView(const QString& name)\n+{\n+    if (mapWalletViews.count(name) == 0) return false;\n+    WalletView *walletView = mapWalletViews.take(name);\n+    removeWidget(walletView);\n+    return true;\n+}\n+\n+bool WalletStack::handleURI(const QString &uri)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (!walletView) return false;\n+    \n+    return walletView->handleURI(uri);\n+}\n+\n+void WalletStack::showOutOfSyncWarning(bool fShow)\n+{\n+    bOutOfSync = fShow;\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->showOutOfSyncWarning(fShow);\n+}\n+\n+void WalletStack::gotoOverviewPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoOverviewPage();\n+}\n+\n+void WalletStack::gotoHistoryPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoHistoryPage();\n+}\n+\n+void WalletStack::gotoAddressBookPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoAddressBookPage();\n+}\n+\n+void WalletStack::gotoReceiveCoinsPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoReceiveCoinsPage();\n+}\n+\n+void WalletStack::gotoSendCoinsPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoSendCoinsPage();\n+}\n+\n+void WalletStack::gotoSignMessageTab(QString addr)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->gotoSignMessageTab(addr);\n+}\n+\n+void WalletStack::gotoVerifyMessageTab(QString addr)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->gotoVerifyMessageTab(addr);\n+}\n+\n+void WalletStack::encryptWallet(bool status)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->encryptWallet(status);\n+}\n+\n+void WalletStack::backupWallet()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->backupWallet();\n+}\n+\n+void WalletStack::changePassphrase()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->changePassphrase();\n+}\n+\n+void WalletStack::unlockWallet()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->unlockWallet();\n+}\n+\n+void WalletStack::setEncryptionStatus()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->setEncryptionStatus();\n+}\n+\n+void WalletStack::setCurrentWalletView(const QString& name)\n+{\n+    if (mapWalletViews.count(name) == 0) return;\n+    WalletView *walletView = mapWalletViews.value(name);\n+    setCurrentWidget(walletView);\n+    walletView->setEncryptionStatus();\n+}"
      },
      {
        "sha": "9d2441ca770a16c811d724963e4e373c3333d785",
        "filename": "src/qt/walletstack.h",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletstack.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletstack.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletstack.h?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#ifndef WALLETSTACK_H\n+#define WALLETSTACK_H\n+\n+#include <QStackedWidget>\n+#include <QMap>\n+#include <boost/shared_ptr.hpp>\n+\n+class BitcoinGUI;\n+class TransactionTableModel;\n+class ClientModel;\n+class WalletModel;\n+class WalletView;\n+class TransactionView;\n+class OverviewPage;\n+class AddressBookPage;\n+class SendCoinsDialog;\n+class SignVerifyMessageDialog;\n+class Notificator;\n+class RPCConsole;\n+\n+class CWalletManager;\n+\n+QT_BEGIN_NAMESPACE\n+class QLabel;\n+class QModelIndex;\n+QT_END_NAMESPACE\n+\n+/*\n+ WalletWidget class. This class represents the wallet view of the app. It takes the place of centralWidget.\n+ It was added to support multiple wallet functionality. It communicates with both the client and the\n+ wallet models to give the user an up-to-date view of the current core state.\n+ */\n+class WalletStack : public QStackedWidget\n+{\n+    Q_OBJECT\n+public:\n+    explicit WalletStack(QWidget *parent = 0);\n+    ~WalletStack();\n+\n+    void setBitcoinGUI(BitcoinGUI *gui) { this->gui = gui; }\n+    \n+    void setClientModel(ClientModel *clientModel) { this->clientModel = clientModel; }\n+    \n+    bool addWalletView(const QString& name, WalletModel *walletModel);\n+    bool removeWalletView(const QString& name);\n+\n+    bool handleURI(const QString &uri);\n+    \n+    void showOutOfSyncWarning(bool fShow);\n+    \n+private:\n+    BitcoinGUI *gui;\n+    ClientModel *clientModel;\n+    QMap<QString, WalletView*> mapWalletViews;\n+    \n+    bool bOutOfSync;\n+    \n+public slots:\n+    void setCurrentWalletView(const QString& name);\n+    \n+    /** Switch to overview (home) page */\n+    void gotoOverviewPage();\n+    /** Switch to history (transactions) page */\n+    void gotoHistoryPage();\n+    /** Switch to address book page */\n+    void gotoAddressBookPage();\n+    /** Switch to receive coins page */\n+    void gotoReceiveCoinsPage();\n+    /** Switch to send coins page */\n+    void gotoSendCoinsPage();\n+    \n+    /** Show Sign/Verify Message dialog and switch to sign message tab */\n+    void gotoSignMessageTab(QString addr = \"\");\n+    /** Show Sign/Verify Message dialog and switch to verify message tab */\n+    void gotoVerifyMessageTab(QString addr = \"\");\n+    \n+    /** Encrypt the wallet */\n+    void encryptWallet(bool status);\n+    /** Backup the wallet */\n+    void backupWallet();\n+    /** Change encrypted wallet passphrase */\n+    void changePassphrase();\n+    /** Ask for passphrase to unlock wallet temporarily */\n+    void unlockWallet();\n+    \n+    /** Set the encryption status as shown in the UI.\n+     @param[in] status            current encryption status\n+     @see WalletModel::EncryptionStatus\n+     */\n+    void setEncryptionStatus();\n+};\n+\n+#endif // WALLETSTACK_H"
      },
      {
        "sha": "7dd36234c96ff5940d2a7ffdf4e8043c4a1cdd7b",
        "filename": "src/qt/walletview.cpp",
        "status": "added",
        "additions": 354,
        "deletions": 0,
        "changes": 354,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -0,0 +1,354 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#include \"walletview.h\"\n+#include \"bitcoingui.h\"\n+#include \"transactiontablemodel.h\"\n+#include \"addressbookpage.h\"\n+#include \"sendcoinsdialog.h\"\n+#include \"signverifymessagedialog.h\"\n+#include \"optionsdialog.h\"\n+#include \"aboutdialog.h\"\n+#include \"clientmodel.h\"\n+#include \"walletmodel.h\"\n+#include \"editaddressdialog.h\"\n+#include \"optionsmodel.h\"\n+#include \"transactiondescdialog.h\"\n+#include \"addresstablemodel.h\"\n+#include \"transactionview.h\"\n+#include \"overviewpage.h\"\n+#include \"bitcoinunits.h\"\n+#include \"guiconstants.h\"\n+#include \"askpassphrasedialog.h\"\n+#include \"guiutil.h\"\n+#include \"ui_interface.h\"\n+\n+#include <QVBoxLayout>\n+#include <QActionGroup>\n+#include <QAction>\n+#include <QLabel>\n+#include <QDesktopServices>\n+#include <QFileDialog>\n+\n+WalletView::WalletView(QWidget *parent, BitcoinGUI *_gui):\n+    QStackedWidget(parent),\n+    gui(_gui),\n+    clientModel(0),\n+    walletModel(0),\n+    encryptWalletAction(0),\n+    changePassphraseAction(0)\n+{\n+    // Create actions for the toolbar, menu bar and tray/dock icon\n+    createActions();\n+\n+    // Create tabs\n+    overviewPage = new OverviewPage();\n+\n+    transactionsPage = new QWidget(this);\n+    QVBoxLayout *vbox = new QVBoxLayout();\n+    transactionView = new TransactionView(this);\n+    vbox->addWidget(transactionView);\n+    transactionsPage->setLayout(vbox);\n+\n+    addressBookPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab);\n+\n+    receiveCoinsPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab);\n+\n+    sendCoinsPage = new SendCoinsDialog(gui);\n+\n+    signVerifyMessageDialog = new SignVerifyMessageDialog(gui);\n+\n+    addWidget(overviewPage);\n+    addWidget(transactionsPage);\n+    addWidget(addressBookPage);\n+    addWidget(receiveCoinsPage);\n+    addWidget(sendCoinsPage);\n+\n+    // Clicking on a transaction on the overview page simply sends you to transaction history page\n+    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), this, SLOT(gotoHistoryPage()));\n+    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n+\n+    // Double-clicking on a transaction on the transaction history page shows details\n+    connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n+\n+    // Clicking on \"Verify Message\" in the address book sends you to the verify message tab\n+    connect(addressBookPage, SIGNAL(verifyMessage(QString)), this, SLOT(gotoVerifyMessageTab(QString)));\n+    // Clicking on \"Sign Message\" in the receive coins page sends you to the sign message tab\n+    connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));\n+\n+    gotoOverviewPage();\n+}\n+\n+WalletView::~WalletView()\n+{\n+}\n+\n+void WalletView::createActions()\n+{\n+    QActionGroup *tabGroup = new QActionGroup(this);\n+\n+    overviewAction = new QAction(QIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n+    overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n+    overviewAction->setToolTip(overviewAction->statusTip());\n+    overviewAction->setCheckable(true);\n+    overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n+    tabGroup->addAction(overviewAction);\n+\n+    sendCoinsAction = new QAction(QIcon(\":/icons/send\"), tr(\"&Send coins\"), this);\n+    sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n+    sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n+    sendCoinsAction->setCheckable(true);\n+    sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n+    tabGroup->addAction(sendCoinsAction);\n+\n+    receiveCoinsAction = new QAction(QIcon(\":/icons/receiving_addresses\"), tr(\"&Receive coins\"), this);\n+    receiveCoinsAction->setStatusTip(tr(\"Show the list of addresses for receiving payments\"));\n+    receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n+    receiveCoinsAction->setCheckable(true);\n+    receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n+    tabGroup->addAction(receiveCoinsAction);\n+\n+    historyAction = new QAction(QIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n+    historyAction->setStatusTip(tr(\"Browse transaction history\"));\n+    historyAction->setToolTip(historyAction->statusTip());\n+    historyAction->setCheckable(true);\n+    historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));\n+    tabGroup->addAction(historyAction);\n+\n+    addressBookAction = new QAction(QIcon(\":/icons/address-book\"), tr(\"&Address Book\"), this);\n+    addressBookAction->setStatusTip(tr(\"Edit the list of stored addresses and labels\"));\n+    addressBookAction->setToolTip(addressBookAction->statusTip());\n+    addressBookAction->setCheckable(true);\n+    addressBookAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_5));\n+    tabGroup->addAction(addressBookAction);\n+\n+    connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n+    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n+    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n+    connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n+    connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));\n+\n+    encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n+    encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n+    encryptWalletAction->setCheckable(true);\n+    backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n+    backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n+    changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n+    changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n+    signMessageAction = new QAction(QIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n+    verifyMessageAction = new QAction(QIcon(\":/icons/transaction_0\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+\n+    exportAction = new QAction(QIcon(\":/icons/export\"), tr(\"&Export...\"), this);\n+    exportAction->setStatusTip(tr(\"Export the data in the current tab to a file\"));\n+    exportAction->setToolTip(exportAction->statusTip());\n+\n+    connect(encryptWalletAction, SIGNAL(triggered(bool)), this, SLOT(encryptWallet(bool)));\n+    connect(backupWalletAction, SIGNAL(triggered()), this, SLOT(backupWallet()));\n+    connect(changePassphraseAction, SIGNAL(triggered()), this, SLOT(changePassphrase()));\n+    connect(signMessageAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));\n+    connect(verifyMessageAction, SIGNAL(triggered()), this, SLOT(gotoVerifyMessageTab()));\n+}\n+\n+void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n+{\n+    this->gui = gui;\n+}\n+\n+void WalletView::setClientModel(ClientModel *clientModel)\n+{\n+    this->clientModel = clientModel;\n+    if(clientModel)\n+    {\n+        overviewPage->setClientModel(clientModel);\n+        addressBookPage->setOptionsModel(clientModel->getOptionsModel());\n+        receiveCoinsPage->setOptionsModel(clientModel->getOptionsModel());\n+    }\n+}\n+\n+void WalletView::setWalletModel(WalletModel *walletModel)\n+{\n+    this->walletModel = walletModel;\n+    if(walletModel)\n+    {\n+        // Receive and report messages from wallet thread\n+        connect(walletModel, SIGNAL(message(QString,QString,unsigned int)), gui, SLOT(message(QString,QString,unsigned int)));\n+\n+        // Put transaction list in tabs\n+        transactionView->setModel(walletModel);\n+        overviewPage->setWalletModel(walletModel);\n+        addressBookPage->setModel(walletModel->getAddressTableModel());\n+        receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n+        sendCoinsPage->setModel(walletModel);\n+        signVerifyMessageDialog->setModel(walletModel);\n+\n+        setEncryptionStatus();\n+        connect(walletModel, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n+\n+        // Balloon pop-up for new transaction\n+        connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n+                this, SLOT(incomingTransaction(QModelIndex,int,int)));\n+\n+        // Ask for passphrase if needed\n+        connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+    }\n+}\n+\n+void WalletView::incomingTransaction(const QModelIndex& parent, int start, int /*end*/)\n+{\n+    // Prevent balloon-spam when initial block download is in progress\n+    if(!walletModel || !clientModel || clientModel->inInitialBlockDownload())\n+        return;\n+\n+    TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n+\n+    QString date = ttm->index(start, TransactionTableModel::Date, parent)\n+                     .data().toString();\n+    qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent)\n+                      .data(Qt::EditRole).toULongLong();\n+    QString type = ttm->index(start, TransactionTableModel::Type, parent)\n+                     .data().toString();\n+    QString address = ttm->index(start, TransactionTableModel::ToAddress, parent)\n+                        .data().toString();\n+\n+    gui->incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address);\n+}\n+\n+void WalletView::gotoOverviewPage()\n+{\n+    overviewAction->setChecked(true);\n+    setCurrentWidget(overviewPage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n+void WalletView::gotoHistoryPage()\n+{\n+    historyAction->setChecked(true);\n+    setCurrentWidget(transactionsPage);\n+\n+    exportAction->setEnabled(true);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    connect(exportAction, SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n+}\n+\n+void WalletView::gotoAddressBookPage()\n+{\n+    addressBookAction->setChecked(true);\n+    setCurrentWidget(addressBookPage);\n+\n+    exportAction->setEnabled(true);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    connect(exportAction, SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n+}\n+\n+void WalletView::gotoReceiveCoinsPage()\n+{\n+    receiveCoinsAction->setChecked(true);\n+    setCurrentWidget(receiveCoinsPage);\n+\n+    exportAction->setEnabled(true);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    connect(exportAction, SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n+}\n+\n+void WalletView::gotoSendCoinsPage()\n+{\n+    sendCoinsAction->setChecked(true);\n+    setCurrentWidget(sendCoinsPage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n+void WalletView::gotoSignMessageTab(QString addr)\n+{\n+    // call show() in showTab_SM()\n+    signVerifyMessageDialog->showTab_SM(true);\n+\n+    if(!addr.isEmpty())\n+        signVerifyMessageDialog->setAddress_SM(addr);\n+}\n+\n+void WalletView::gotoVerifyMessageTab(QString addr)\n+{\n+    // call show() in showTab_VM()\n+    signVerifyMessageDialog->showTab_VM(true);\n+\n+    if(!addr.isEmpty())\n+        signVerifyMessageDialog->setAddress_VM(addr);\n+}\n+\n+bool WalletView::handleURI(const QString& strURI)\n+{\n+    // URI has to be valid\n+    if (sendCoinsPage->handleURI(strURI))\n+    {\n+        gotoSendCoinsPage();\n+        return true;\n+    }\n+    else\n+        return false;\n+}\n+\n+void WalletView::showOutOfSyncWarning(bool fShow)\n+{\n+    overviewPage->showOutOfSyncWarning(fShow);\n+}\n+\n+void WalletView::setEncryptionStatus()\n+{\n+    gui->setEncryptionStatus(walletModel->getEncryptionStatus());\n+}\n+\n+void WalletView::encryptWallet(bool status)\n+{\n+    if(!walletModel)\n+        return;\n+    AskPassphraseDialog dlg(status ? AskPassphraseDialog::Encrypt:\n+                                     AskPassphraseDialog::Decrypt, this);\n+    dlg.setModel(walletModel);\n+    dlg.exec();\n+\n+    setEncryptionStatus();\n+}\n+\n+void WalletView::backupWallet()\n+{\n+    QString saveDir = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);\n+    QString filename = QFileDialog::getSaveFileName(this, tr(\"Backup Wallet\"), saveDir, tr(\"Wallet Data (*.dat)\"));\n+    if(!filename.isEmpty()) {\n+        if(!walletModel->backupWallet(filename)) {\n+            gui->message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to the new location.\"),\n+                      CClientUIInterface::MSG_ERROR);\n+        }\n+        else\n+            gui->message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to the new location.\"),\n+                      CClientUIInterface::MSG_INFORMATION);\n+    }\n+}\n+\n+void WalletView::changePassphrase()\n+{\n+    AskPassphraseDialog dlg(AskPassphraseDialog::ChangePass, this);\n+    dlg.setModel(walletModel);\n+    dlg.exec();\n+}\n+\n+void WalletView::unlockWallet()\n+{\n+    if(!walletModel)\n+        return;\n+    // Unlock wallet when requested by wallet model\n+    if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n+    {\n+        AskPassphraseDialog dlg(AskPassphraseDialog::Unlock, this);\n+        dlg.setModel(walletModel);\n+        dlg.exec();\n+    }\n+}"
      },
      {
        "sha": "4a34f969a1396904ac2ee2ae5bd62993d35f2720",
        "filename": "src/qt/walletview.h",
        "status": "added",
        "additions": 131,
        "deletions": 0,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -0,0 +1,131 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#ifndef WALLETVIEW_H\n+#define WALLETVIEW_H\n+\n+#include <QStackedWidget>\n+\n+class BitcoinGUI;\n+class TransactionTableModel;\n+class ClientModel;\n+class WalletModel;\n+class TransactionView;\n+class OverviewPage;\n+class AddressBookPage;\n+class SendCoinsDialog;\n+class SignVerifyMessageDialog;\n+class Notificator;\n+class RPCConsole;\n+\n+QT_BEGIN_NAMESPACE\n+class QLabel;\n+class QModelIndex;\n+QT_END_NAMESPACE\n+\n+/*\n+  WalletWidget class. This class represents the wallet view of the app. It takes the place of centralWidget.\n+  It was added to support multiple wallet functionality. It communicates with both the client and the\n+  wallet models to give the user an up-to-date view of the current core state.\n+*/\n+class WalletView : public QStackedWidget\n+{\n+    Q_OBJECT\n+public:\n+    explicit WalletView(QWidget *parent, BitcoinGUI *_gui);\n+    ~WalletView();\n+\n+    void setBitcoinGUI(BitcoinGUI *gui);\n+    /** Set the client model.\n+        The client model represents the part of the core that communicates with the P2P network, and is wallet-agnostic.\n+    */\n+    void setClientModel(ClientModel *clientModel);\n+    /** Set the wallet model.\n+        The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending\n+        functionality.\n+    */\n+    void setWalletModel(WalletModel *walletModel);\n+    \n+    bool handleURI(const QString &uri);\n+    \n+    void showOutOfSyncWarning(bool fShow);\n+\n+private:\n+    BitcoinGUI *gui;\n+    ClientModel *clientModel;\n+    WalletModel *walletModel;\n+\n+    OverviewPage *overviewPage;\n+    QWidget *transactionsPage;\n+    AddressBookPage *addressBookPage;\n+    AddressBookPage *receiveCoinsPage;\n+    SendCoinsDialog *sendCoinsPage;\n+    SignVerifyMessageDialog *signVerifyMessageDialog;\n+\n+    QLabel *labelEncryptionIcon;\n+    QLabel *labelConnectionsIcon;\n+    QLabel *labelBlocksIcon;\n+    QLabel *progressBarLabel;\n+\n+    QAction *overviewAction;\n+    QAction *historyAction;\n+    QAction *quitAction;\n+    QAction *sendCoinsAction;\n+    QAction *addressBookAction;\n+    QAction *signMessageAction;\n+    QAction *verifyMessageAction;\n+    QAction *aboutAction;\n+    QAction *receiveCoinsAction;\n+    QAction *optionsAction;\n+    QAction *toggleHideAction;\n+    QAction *exportAction;\n+    QAction *encryptWalletAction;\n+    QAction *backupWalletAction;\n+    QAction *changePassphraseAction;\n+    QAction *aboutQtAction;\n+    QAction *openRPCConsoleAction;\n+\n+    TransactionView *transactionView;\n+\n+    /** Create the main UI actions. */\n+    void createActions();\n+    /** Create the menu bar and sub-menus. */\n+\n+public slots:\n+    /** Switch to overview (home) page */\n+    void gotoOverviewPage();\n+    /** Switch to history (transactions) page */\n+    void gotoHistoryPage();\n+    /** Switch to address book page */\n+    void gotoAddressBookPage();\n+    /** Switch to receive coins page */\n+    void gotoReceiveCoinsPage();\n+    /** Switch to send coins page */\n+    void gotoSendCoinsPage();\n+\n+    /** Show Sign/Verify Message dialog and switch to sign message tab */\n+    void gotoSignMessageTab(QString addr = \"\");\n+    /** Show Sign/Verify Message dialog and switch to verify message tab */\n+    void gotoVerifyMessageTab(QString addr = \"\");\n+\n+    /** Show incoming transaction notification for new transactions.\n+\n+        The new items are those between start and end inclusive, under the given parent item.\n+    */\n+    void incomingTransaction(const QModelIndex& parent, int start, int /*end*/);\n+    /** Encrypt the wallet */\n+    void encryptWallet(bool status);\n+    /** Backup the wallet */\n+    void backupWallet();\n+    /** Change encrypted wallet passphrase */\n+    void changePassphrase();\n+    /** Ask for passphrase to unlock wallet temporarily */\n+    void unlockWallet();\n+    \n+    void setEncryptionStatus();\n+};\n+\n+#endif // WALLETVIEW_H"
      },
      {
        "sha": "d414b39f1e1e30399c0d7abe8b9cb0b87998d360",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -1987,6 +1987,141 @@ bool CWalletManager::LoadWallet(const string& strName, ostringstream& strErrors,\n     return true;\n }\n \n+bool CWalletManager::LoadWalletFromFile(const string& strFile, string& strName, ostringstream& strErrors, bool fRescan, bool fUpgrade, int nMaxVersion)\n+{\n+    // Get wallet file name minus extension.\n+    const boost::regex STRIP_DIR_AND_EXTENSION_REGEX(\".*/wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n+    boost::cmatch match;\n+    if (!boost::regex_match(strFile.c_str(), match, STRIP_DIR_AND_EXTENSION_REGEX))\n+    {\n+        strErrors << _(\"CWalletManager::LoadWalletFromFile() - invalid filename \") << strFile;\n+        return false;\n+    }\n+    \n+    strName = string(match[1].first, match[1].second);\n+    \n+    ENTER_CRITICAL_SECTION(cs_WalletManager);\n+    \n+    // Check that wallet is not already loaded\n+    if (wallets.count(strName) > 0)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+        strErrors << _(\"A wallet with that name is already loaded.\");\n+        return false;\n+    }\n+    \n+    printf(\"Loading wallet \\\"%s\\\" from %s...\\n\", strName.c_str(), strFile.c_str());\n+    int64 nStart = GetTimeMillis();\n+    bool fFirstRun = true;\n+    CWallet* pWallet;\n+    DBErrors nLoadWalletRet;\n+    \n+    try\n+    {\n+        pWallet = new CWallet(strFile);\n+        nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n+    }\n+    catch (const exception& e)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+        strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile << \": \" << e.what();\n+        return false;\n+    }\n+    catch (...)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+        strErrors << _(\"Critical error loading wallet \\\"\") << strName << \"\\\" \" << _(\"from \") << strFile;\n+        return false;\n+    }\n+    \n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT)\n+        {\n+            LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet corrupted\") << \"\\n\";\n+            delete pWallet;\n+            return false;\n+        }\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            string msg(_(\"Warning: error reading \"));\n+            msg += strFile + _(\"! All keys read correctly, but transaction data\"\n+                               \" or address book entries might be missing or incorrect.\");\n+            InitWarning(msg);\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+            strErrors << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin\") << \"\\n\";\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n+            printf(\"%s\", strErrors.str().c_str());\n+            return InitError(strErrors.str());\n+        }\n+        else\n+            strErrors << _(\"Error loading \") << strFile << \"\\n\";\n+    }\n+    \n+    if (fFirstRun || fUpgrade)\n+    {\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            pWallet->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < pWallet->GetVersion())\n+            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+        pWallet->SetMaxVersion(nMaxVersion);\n+    }\n+    \n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+        \n+        CPubKey newDefaultKey;\n+        if (!pWallet->GetKeyFromPool(newDefaultKey, false))\n+            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n+        pWallet->SetDefaultKey(newDefaultKey);\n+        if (!pWallet->SetAddressBookName(pWallet->vchDefaultKey.GetID(), \"\"))\n+            strErrors << _(\"Cannot write default address\") << \"\\n\";\n+    }\n+    \n+    printf(\"%s\", strErrors.str().c_str());\n+    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    \n+    boost::shared_ptr<CWallet> spWallet(pWallet);\n+    this->wallets[strName] = spWallet;\n+    RegisterWallet(pWallet);\n+    \n+    LEAVE_CRITICAL_SECTION(cs_WalletManager);\n+    \n+    CBlockIndex *pindexRescan = pindexBest;\n+    if (fRescan)\n+        pindexRescan = pindexGenesisBlock;\n+    else\n+    {\n+        CWalletDB walletdb(strFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = locator.GetBlockIndex();\n+    }\n+    if (pindexBest && pindexBest != pindexRescan)\n+    {\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        pWallet->ScanForWalletTransactions(pindexRescan, true);\n+        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    }\n+    \n+    return true;\n+}\n+\n bool CWalletManager::UnloadWallet(const std::string& strName)\n {\n     {"
      },
      {
        "sha": "69eb418b05a4c81161992925a72bc610eb0b7653",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18ad19fbde0688645f52e26ae545da2849d7c9b4/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=18ad19fbde0688645f52e26ae545da2849d7c9b4",
        "patch": "@@ -377,6 +377,7 @@ class CWalletManager\n     ~CWalletManager() { UnloadAllWallets(); }\n     \n     bool LoadWallet(const std::string& strName, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n+    bool LoadWalletFromFile(const std::string& strFile, std::string& strName, std::ostringstream& strErrors, bool fRescan = false, bool fUpgrade = false, int nMaxVersion = 0);\n     bool UnloadWallet(const std::string& strName);\n     void UnloadAllWallets();\n     "
      }
    ]
  }
]