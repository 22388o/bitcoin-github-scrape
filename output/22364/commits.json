[
  {
    "sha": "54b3699862de687f782c7c52500d6a2372478355",
    "node_id": "C_kwDOABII59oAKDU0YjM2OTk4NjJkZTY4N2Y3ODJjN2M1MjUwMGQ2YTIzNzI0NzgzNTU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-28T19:53:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T04:50:32Z"
      },
      "message": "Store pubkeys in TRDescriptor::MakeScripts\n\nWhen expanding the scripts for a TRDescriptor, also store the pubkeys in\nthe FlatSigningProvider.",
      "tree": {
        "sha": "1c71773c861ebc065e1fa97e0f2b3b68994866a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c71773c861ebc065e1fa97e0f2b3b68994866a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54b3699862de687f782c7c52500d6a2372478355",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b3699862de687f782c7c52500d6a2372478355",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54b3699862de687f782c7c52500d6a2372478355",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b3699862de687f782c7c52500d6a2372478355/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffdab41f94521dc87e68a160546af55355340af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffdab41f94521dc87e68a160546af55355340af5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffdab41f94521dc87e68a160546af55355340af5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c3b4d1ddaa9fe38f22716b1d14da9ac31b07960a",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54b3699862de687f782c7c52500d6a2372478355/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54b3699862de687f782c7c52500d6a2372478355/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=54b3699862de687f782c7c52500d6a2372478355",
        "patch": "@@ -851,6 +851,7 @@ class TRDescriptor final : public DescriptorImpl\n         builder.Finalize(xpk);\n         WitnessV1Taproot output = builder.GetOutput();\n         out.tr_spenddata[output].Merge(builder.GetSpendData());\n+        out.pubkeys.emplace(keys[0].GetID(), keys[0]);\n         return Vector(GetScriptForDestination(output));\n     }\n     bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const override"
      }
    ]
  },
  {
    "sha": "8fb57845ee3844c9ba854471065109d2e409300f",
    "node_id": "C_kwDOABII59oAKDhmYjU3ODQ1ZWUzODQ0YzliYTg1NDQ3MTA2NTEwOWQyZTQwOTMwMGY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T20:11:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:20:13Z"
      },
      "message": "Create a tr() descriptor bech32m DescriptorScriptPubKeyMan by default",
      "tree": {
        "sha": "941d73885c9006ba6af443199430c39375e98817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/941d73885c9006ba6af443199430c39375e98817"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fb57845ee3844c9ba854471065109d2e409300f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fb57845ee3844c9ba854471065109d2e409300f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fb57845ee3844c9ba854471065109d2e409300f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fb57845ee3844c9ba854471065109d2e409300f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54b3699862de687f782c7c52500d6a2372478355",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b3699862de687f782c7c52500d6a2372478355",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54b3699862de687f782c7c52500d6a2372478355"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 80,
      "deletions": 54
    },
    "files": [
      {
        "sha": "8d6f3b23957e9c3c64cf7d9b9c7ec57ffef9368c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -1876,12 +1876,6 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n \n bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n {\n-    if (addr_type == OutputType::BECH32M) {\n-        // Don't allow setting up taproot descriptors yet\n-        // TODO: Allow setting up taproot descriptors\n-        return false;\n-    }\n-\n     LOCK(cs_desc_man);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n \n@@ -1911,7 +1905,10 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n         desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n         break;\n     }\n-    case OutputType::BECH32M: assert(false); // TODO: Setup taproot descriptor\n+    case OutputType::BECH32M: {\n+        desc_prefix = \"tr(\" + xpub  + \"/86'\";\n+        break;\n+    }\n     } // no default case, so the compiler can warn about missing cases\n     assert(!desc_prefix.empty());\n "
      },
      {
        "sha": "0601c492cd74ba2dc55bc9bd24cf770bce100e96",
        "filename": "src/wallet/test/fuzz/notifications.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/src/wallet/test/fuzz/notifications.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/src/wallet/test/fuzz/notifications.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/fuzz/notifications.cpp?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -68,9 +68,6 @@ struct FuzzedWallet {\n     CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         auto type{fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)};\n-        if (type == OutputType::BECH32M) {\n-            type = OutputType::BECH32; // TODO: Setup taproot descriptor and remove this line\n-        }\n         CTxDestination dest;\n         bilingual_str error;\n         if (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "b269fe253f75fe08cb6734b3a7d56bdbb821af77",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -3164,11 +3164,6 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n-                if (t == OutputType::BECH32M) {\n-                    // Skip taproot (bech32m) for now\n-                    // TODO: Setup taproot (bech32m) descriptors by default\n-                    continue;\n-                }\n                 auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {"
      },
      {
        "sha": "93970ff40c7b5f53653b74989943f7d22141892c",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -571,12 +571,12 @@ def test_locked_wallet(self):\n         if self.options.descriptors:\n             self.nodes[1].walletpassphrase('test', 10)\n             self.nodes[1].importdescriptors([{\n-                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPdYeeZbPSKd2KYLmeVKtcFA7kqCxDvDR13MQ6us8HopUR2wLcS2ZKPhLyKsqpDL2FtL73LMHcgoCL7DXsciA8eX8nbjCR2eG/0h/*h)'),\n+                'desc': descsum_create('tr(tprv8ZgxMBicQKsPdYeeZbPSKd2KYLmeVKtcFA7kqCxDvDR13MQ6us8HopUR2wLcS2ZKPhLyKsqpDL2FtL73LMHcgoCL7DXsciA8eX8nbjCR2eG/0h/*h)'),\n                 'timestamp': 'now',\n                 'active': True\n             },\n             {\n-                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPdYeeZbPSKd2KYLmeVKtcFA7kqCxDvDR13MQ6us8HopUR2wLcS2ZKPhLyKsqpDL2FtL73LMHcgoCL7DXsciA8eX8nbjCR2eG/1h/*h)'),\n+                'desc': descsum_create('tr(tprv8ZgxMBicQKsPdYeeZbPSKd2KYLmeVKtcFA7kqCxDvDR13MQ6us8HopUR2wLcS2ZKPhLyKsqpDL2FtL73LMHcgoCL7DXsciA8eX8nbjCR2eG/1h/*h)'),\n                 'timestamp': 'now',\n                 'active': True,\n                 'internal': True\n@@ -778,11 +778,18 @@ def test_option_feerate(self):\n         for param, zero_value in product([\"fee_rate\", \"feeRate\"], [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]):\n             assert_equal(self.nodes[3].fundrawtransaction(rawtx, {param: zero_value})[\"fee\"], 0)\n \n-        # With no arguments passed, expect fee of 141 satoshis.\n-        assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-        # Expect fee to be 10,000x higher when an explicit fee rate 10,000x greater is specified.\n-        result = node.fundrawtransaction(rawtx, {\"fee_rate\": 10000})\n-        assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        if self.options.descriptors:\n+            # With no arguments passed, expect fee of 153 satoshis as descriptor wallets now have a taproot output.\n+            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000153, vspan=0.00000001)\n+            # Expect fee to be 10,000x higher when an explicit fee rate 10,000x greater is specified.\n+            result = node.fundrawtransaction(rawtx, {\"fee_rate\": 10000})\n+            assert_approx(result[\"fee\"], vexp=0.0153, vspan=0.0001)\n+        else:\n+            # With no arguments passed, expect fee of 141 satoshis as legacy wallets only support up to segwit v0.\n+            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+            # Expect fee to be 10,000x higher when an explicit fee rate 10,000x greater is specified.\n+            result = node.fundrawtransaction(rawtx, {\"fee_rate\": 10000})\n+            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n \n         self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n         for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n@@ -1073,7 +1080,7 @@ def test_22670(self):\n         # Make sure the default wallet will not be loaded when restarted with a high minrelaytxfee\n         self.nodes[0].unloadwallet(self.default_wallet_name, False)\n         feerate = Decimal(\"0.1\")\n-        self.restart_node(0, [f\"-minrelaytxfee={feerate}\", \"-discardfee=0\"]) # Set high minrelayfee, set discardfee to 0 for easier calculation\n+        self.restart_node(0, [f\"-minrelaytxfee={feerate}\", \"-discardfee=0\", \"-changetype=bech32\", \"-addresstype=bech32\"]) # Set high minrelayfee, set discardfee to 0 for easier calculation\n \n         self.nodes[0].loadwallet(self.default_wallet_name, True)\n         funds = self.nodes[0].get_wallet_rpc(self.default_wallet_name)"
      },
      {
        "sha": "4ac4f27d8ac4aedf3d68f937fb071ce52498202c",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -31,7 +31,7 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [\n-            [\"-walletrbf=1\"],\n+            [\"-walletrbf=1\", \"-addresstype=bech32\", \"-changetype=bech32\"], #TODO: Remove address type restrictions once taproot has psbt extensions\n             [\"-walletrbf=0\", \"-changetype=legacy\"],\n             []\n         ]"
      },
      {
        "sha": "afe4dba7b4f5c3c33d19ab2561a76527bd9dae4d",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -70,8 +70,8 @@ def log_wallet_timestamp_comparison(self, old, new):\n \n     def get_expected_info_output(self, name=\"\", transactions=0, keypool=2, address=0):\n         wallet_name = self.default_wallet_name if name == \"\" else name\n-        output_types = 3  # p2pkh, p2sh, segwit\n         if self.options.descriptors:\n+            output_types = 4  # p2pkh, p2sh, segwit, bech32m\n             return textwrap.dedent('''\\\n                 Wallet info\n                 ===========\n@@ -85,6 +85,7 @@ def get_expected_info_output(self, name=\"\", transactions=0, keypool=2, address=0\n                 Address Book: %d\n             ''' % (wallet_name, keypool * output_types, transactions, address))\n         else:\n+            output_types = 3  # p2pkh, p2sh, segwit. Legacy wallets do not support bech32m.\n             return textwrap.dedent('''\\\n                 Wallet info\n                 ===========\n@@ -298,8 +299,8 @@ def test_getwalletinfo_on_different_wallet(self):\n             assert_equal(1000, out['keypoolsize_hd_internal'])\n             assert_equal(True, 'hdseedid' in out)\n         else:\n-            assert_equal(3000, out['keypoolsize'])\n-            assert_equal(3000, out['keypoolsize_hd_internal'])\n+            assert_equal(4000, out['keypoolsize'])\n+            assert_equal(4000, out['keypoolsize_hd_internal'])\n \n         self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n         assert_equal(timestamp_before, timestamp_after)"
      },
      {
        "sha": "eb6e497951cd4e491453e1c836c16204c2dbf4f0",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 29,
        "deletions": 12,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -121,6 +121,12 @@ def test_address(self, node, address, multisig, typ):\n             assert_equal(info['witness_version'], 0)\n             assert_equal(len(info['witness_program']), 40)\n             assert 'pubkey' in info\n+        elif not multisig and typ == \"bech32m\":\n+            # P2TR single sig\n+            assert info[\"isscript\"]\n+            assert info[\"iswitness\"]\n+            assert_equal(info[\"witness_version\"], 1)\n+            assert_equal(len(info[\"witness_program\"]), 64)\n         elif typ == 'legacy':\n             # P2SH-multisig\n             assert info['isscript']\n@@ -339,19 +345,31 @@ def run_test(self):\n         self.log.info(\"Nodes with addresstype=legacy never use a P2WPKH change output (unless changetype is set otherwise):\")\n         self.test_change_output_type(0, [to_address_bech32_1], 'legacy')\n \n-        self.log.info(\"Nodes with addresstype=p2sh-segwit only use a P2WPKH change output if any destination address is bech32:\")\n-        self.test_change_output_type(1, [to_address_p2sh], 'p2sh-segwit')\n-        self.test_change_output_type(1, [to_address_bech32_1], 'bech32')\n-        self.test_change_output_type(1, [to_address_p2sh, to_address_bech32_1], 'bech32')\n-        self.test_change_output_type(1, [to_address_bech32_1, to_address_bech32_2], 'bech32')\n+        if self.options.descriptors:\n+            self.log.info(\"Nodes with addresstype=p2sh-segwit only use a bech32m change output if any destination address is bech32:\")\n+            self.test_change_output_type(1, [to_address_p2sh], 'p2sh-segwit')\n+            self.test_change_output_type(1, [to_address_bech32_1], 'bech32m')\n+            self.test_change_output_type(1, [to_address_p2sh, to_address_bech32_1], 'bech32m')\n+            self.test_change_output_type(1, [to_address_bech32_1, to_address_bech32_2], 'bech32m')\n+        else:\n+            self.log.info(\"Nodes with addresstype=p2sh-segwit only use a P2WPKH change output if any destination address is bech32:\")\n+            self.test_change_output_type(1, [to_address_p2sh], 'p2sh-segwit')\n+            self.test_change_output_type(1, [to_address_bech32_1], 'bech32')\n+            self.test_change_output_type(1, [to_address_p2sh, to_address_bech32_1], 'bech32')\n+            self.test_change_output_type(1, [to_address_bech32_1, to_address_bech32_2], 'bech32')\n \n         self.log.info(\"Nodes with change_type=bech32 always use a P2WPKH change output:\")\n         self.test_change_output_type(2, [to_address_bech32_1], 'bech32')\n         self.test_change_output_type(2, [to_address_p2sh], 'bech32')\n \n-        self.log.info(\"Nodes with addresstype=bech32 always use a P2WPKH change output (unless changetype is set otherwise):\")\n-        self.test_change_output_type(3, [to_address_bech32_1], 'bech32')\n-        self.test_change_output_type(3, [to_address_p2sh], 'bech32')\n+        if self.options.descriptors:\n+            self.log.info(\"Nodes with addresstype=bech32 always use either a bech32 or bech32m change output (unless changetype is set otherwise):\")\n+            self.test_change_output_type(3, [to_address_bech32_1], 'bech32m')\n+            self.test_change_output_type(3, [to_address_p2sh], 'bech32')\n+        else:\n+            self.log.info(\"Nodes with addresstype=bech32 always use a P2WPKH change output (unless changetype is set otherwise):\")\n+            self.test_change_output_type(3, [to_address_bech32_1], 'bech32')\n+            self.test_change_output_type(3, [to_address_p2sh], 'bech32')\n \n         self.log.info('getrawchangeaddress defaults to addresstype if -changetype is not set and argument is absent')\n         self.test_address(3, self.nodes[3].getrawchangeaddress(), multisig=False, typ='bech32')\n@@ -370,10 +388,9 @@ def run_test(self):\n         self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n \n         if self.options.descriptors:\n-            self.log.info(\"Descriptor wallets do not have bech32m addresses by default yet\")\n-            # TODO: Remove this when they do\n-            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getnewaddress, \"\", \"bech32m\")\n-            assert_raises_rpc_error(-12, \"Error: No bech32m addresses available\", self.nodes[0].getrawchangeaddress, \"bech32m\")\n+            self.log.info(\"Descriptor wallets have bech32m addresses\")\n+            self.test_address(4, self.nodes[4].getnewaddress(\"\", \"bech32m\"), multisig=False, typ=\"bech32m\")\n+            self.test_address(4, self.nodes[4].getrawchangeaddress(\"bech32m\"), multisig=False, typ=\"bech32m\")\n         else:\n             self.log.info(\"Legacy wallets cannot make bech32m addresses\")\n             assert_raises_rpc_error(-8, \"Legacy wallets cannot provide bech32m addresses\", self.nodes[0].getnewaddress, \"\", \"bech32m\")"
      },
      {
        "sha": "4416a9655f80f371ae5d3674e26ca33b9d321ece",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -146,7 +146,7 @@ def run_test(self):\n         w6.keypoolrefill(1)\n         # There should only be 1 key for legacy, 3 for descriptors\n         walletinfo = w6.getwalletinfo()\n-        keys = 3 if self.options.descriptors else 1\n+        keys = 4 if self.options.descriptors else 1\n         assert_equal(walletinfo['keypoolsize'], keys)\n         assert_equal(walletinfo['keypoolsize_hd_internal'], keys)\n         # Allow empty passphrase, but there should be a warning"
      },
      {
        "sha": "e47d021210e10827099b040fd0c7cc963f7ff611",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -37,12 +37,12 @@ def run_test(self):\n         self.log.info(\"Making a descriptor wallet\")\n         self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n \n-        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        # A descriptor wallet should have 100 addresses * 4 types = 400 keys\n         self.log.info(\"Checking wallet info\")\n         wallet_info = self.nodes[0].getwalletinfo()\n         assert_equal(wallet_info['format'], 'sqlite')\n-        assert_equal(wallet_info['keypoolsize'], 300)\n-        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+        assert_equal(wallet_info['keypoolsize'], 400)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 400)\n         assert 'keypoololdest' not in wallet_info\n \n         # Check that getnewaddress works"
      },
      {
        "sha": "9052bc7f7f4a42448494dc79af58de4d08047722",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -108,12 +108,24 @@ def run_test(self):\n         assert_equal(input_addrs[0], input_addrs[1])\n         # Node 2 enforces avoidpartialspends so needs no checking here\n \n+        if self.options.descriptors:\n+            # Descriptor wallets will use Taproot change by default which has different fees\n+            tx4_ungrouped_fee = 3060\n+            tx4_grouped_fee = 4400\n+            tx5_6_ungrouped_fee = 5760\n+            tx5_6_grouped_fee = 8480\n+        else:\n+            tx4_ungrouped_fee = 2820\n+            tx4_grouped_fee = 4160\n+            tx5_6_ungrouped_fee = 5520\n+            tx5_6_grouped_fee = 8240\n+\n         self.log.info(\"Test wallet option maxapsfee\")\n         addr_aps = self.nodes[3].getnewaddress()\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.generate(self.nodes[0], 1)\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped']):\n+        with self.nodes[3].assert_debug_log([f'Fee non-grouped = {tx4_ungrouped_fee}, grouped = {tx4_grouped_fee}, using grouped']):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n         # tx4 should have 2 inputs and 2 outputs although one output would\n@@ -124,7 +136,7 @@ def run_test(self):\n         addr_aps2 = self.nodes[3].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped']):\n+        with self.nodes[3].assert_debug_log([f'Fee non-grouped = {tx5_6_ungrouped_fee}, grouped = {tx5_6_grouped_fee}, using non-grouped']):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n         # tx5 should have 3 inputs (1.0, 1.0, 1.0) and 2 outputs\n@@ -137,7 +149,7 @@ def run_test(self):\n         addr_aps3 = self.nodes[4].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n-        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped']):\n+        with self.nodes[4].assert_debug_log([f'Fee non-grouped = {tx5_6_ungrouped_fee}, grouped = {tx5_6_grouped_fee}, using grouped']):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n         # tx6 should have 5 inputs and 2 outputs"
      },
      {
        "sha": "d78afb42127ed040ca5bc51c6b098f0848371941",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -136,7 +136,7 @@ def run_test(self):\n                 keypath = self.nodes[1].getaddressinfo(out['scriptPubKey']['address'])['hdkeypath']\n \n         if self.options.descriptors:\n-            assert_equal(keypath[0:14], \"m/84'/1'/0'/1/\")\n+            assert_equal(keypath[0:14], \"m/86'/1'/0'/1/\")\n         else:\n             assert_equal(keypath[0:7], \"m/0'/1'\")\n "
      },
      {
        "sha": "54c47511a9b4c8de5cae82345a4f893bbb19bcf0",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -87,8 +87,8 @@ def run_test(self):\n         nodes[0].walletlock()\n         wi = nodes[0].getwalletinfo()\n         if self.options.descriptors:\n-            assert_equal(wi['keypoolsize_hd_internal'], 18)\n-            assert_equal(wi['keypoolsize'], 18)\n+            assert_equal(wi['keypoolsize_hd_internal'], 24)\n+            assert_equal(wi['keypoolsize'], 24)\n         else:\n             assert_equal(wi['keypoolsize_hd_internal'], 6)\n             assert_equal(wi['keypoolsize'], 6)\n@@ -132,8 +132,8 @@ def run_test(self):\n         nodes[0].keypoolrefill(100)\n         wi = nodes[0].getwalletinfo()\n         if self.options.descriptors:\n-            assert_equal(wi['keypoolsize_hd_internal'], 300)\n-            assert_equal(wi['keypoolsize'], 300)\n+            assert_equal(wi['keypoolsize_hd_internal'], 400)\n+            assert_equal(wi['keypoolsize'], 400)\n         else:\n             assert_equal(wi['keypoolsize_hd_internal'], 100)\n             assert_equal(wi['keypoolsize'], 100)"
      },
      {
        "sha": "202ef928879e7f1787f74530ac0f901034ebfb79",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fb57845ee3844c9ba854471065109d2e409300f/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=8fb57845ee3844c9ba854471065109d2e409300f",
        "patch": "@@ -43,9 +43,9 @@ def run_test(self):\n         node.createwallet(wallet_name='w3', descriptors=True)\n         result = node.get_wallet_rpc('w3').listdescriptors()\n         assert_equal(\"w3\", result['wallet_name'])\n-        assert_equal(6, len(result['descriptors']))\n-        assert_equal(6, len([d for d in result['descriptors'] if d['active']]))\n-        assert_equal(3, len([d for d in result['descriptors'] if d['internal']]))\n+        assert_equal(8, len(result['descriptors']))\n+        assert_equal(8, len([d for d in result['descriptors'] if d['active']]))\n+        assert_equal(4, len([d for d in result['descriptors'] if d['internal']]))\n         for item in result['descriptors']:\n             assert item['desc'] != ''\n             assert item['next'] == 0"
      }
    ]
  },
  {
    "sha": "d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
    "node_id": "C_kwDOABII59oAKGQ4YWJiZTExOWM3MWY5MTdlMGZkMmU4MDUzNmMxZTVkOTc5YjRkYzY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T23:03:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:20:13Z"
      },
      "message": "Mention bech32m in -addresstype and -changetype help",
      "tree": {
        "sha": "9a10e5a6e756ea43422ffd7824d4b5818071a233",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a10e5a6e756ea43422ffd7824d4b5818071a233"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fb57845ee3844c9ba854471065109d2e409300f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fb57845ee3844c9ba854471065109d2e409300f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fb57845ee3844c9ba854471065109d2e409300f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4ff049170e8ce138ad0963b77206f4952b69df75",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
        "patch": "@@ -43,9 +43,9 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n \n void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n-    argsman.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as addresses are mostly swept with fewer transactions and outputs are aggregated in clean change addresses. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a larger-than-necessary number of inputs being used. Always enabled for wallets with \\\"avoid_reuse\\\" enabled, otherwise default: %u.\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", \\\"bech32\\\", or \\\"bech32m\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-consolidatefeerate=<amt>\", strprintf(\"The maximum feerate (in %s/kvB) at which transaction building may use more inputs than strictly necessary so that the wallet's UTXO pool can be reduced (default: %s).\", CURRENCY_UNIT, FormatMoney(DEFAULT_CONSOLIDATE_FEERATE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kvB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \""
      }
    ]
  },
  {
    "sha": "4868c9f1b39f03adee0009cd41d96598b43e8b78",
    "node_id": "C_kwDOABII59oAKDQ4NjhjOWYxYjM5ZjAzYWRlZTAwMDljZDQxZDk2NTk4YjQzZThiNzg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-24T01:17:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:20:13Z"
      },
      "message": "Extract Taproot internal keyid with GetKeyFromDestination",
      "tree": {
        "sha": "935806e5f4c0c71e1b2c2e6142365d18f5902950",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/935806e5f4c0c71e1b2c2e6142365d18f5902950"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4868c9f1b39f03adee0009cd41d96598b43e8b78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4868c9f1b39f03adee0009cd41d96598b43e8b78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4868c9f1b39f03adee0009cd41d96598b43e8b78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4868c9f1b39f03adee0009cd41d96598b43e8b78/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8abbe119c71f917e0fd2e80536c1e5d979b4dc6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "17f97fa30c8ac36fcda4bea9bb9f1ea89b29c094",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4868c9f1b39f03adee0009cd41d96598b43e8b78/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4868c9f1b39f03adee0009cd41d96598b43e8b78/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=4868c9f1b39f03adee0009cd41d96598b43e8b78",
        "patch": "@@ -190,8 +190,8 @@ bool FillableSigningProvider::GetCScript(const CScriptID &hash, CScript& redeemS\n \n CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination& dest)\n {\n-    // Only supports destinations which map to single public keys, i.e. P2PKH,\n-    // P2WPKH, and P2SH-P2WPKH.\n+    // Only supports destinations which map to single public keys:\n+    // P2PKH, P2WPKH, P2SH-P2WPKH, P2TR\n     if (auto id = std::get_if<PKHash>(&dest)) {\n         return ToKeyID(*id);\n     }\n@@ -208,5 +208,15 @@ CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination&\n             }\n         }\n     }\n+    if (auto output_key = std::get_if<WitnessV1Taproot>(&dest)) {\n+        TaprootSpendData spenddata;\n+        CPubKey pub;\n+        if (store.GetTaprootSpendData(*output_key, spenddata)\n+            && !spenddata.internal_key.IsNull()\n+            && spenddata.merkle_root.IsNull()\n+            && store.GetPubKeyByXOnly(spenddata.internal_key, pub)) {\n+            return pub.GetID();\n+        }\n+    }\n     return CKeyID();\n }"
      }
    ]
  }
]