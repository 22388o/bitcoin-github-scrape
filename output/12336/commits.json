[
  {
    "sha": "d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTE5ZjJlYzFhM2I5MjEzYTc5ZGU5NzJlZDdiOWI3MDIyNjQ1YjNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:08:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:08:37Z"
      },
      "message": "[tests] Fix style warnings in feature_fee_estimation.py",
      "tree": {
        "sha": "801670418910d0bf6d1d7c6aa020f75faf694bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/801670418910d0bf6d1d7c6aa020f75faf694bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cad91663df381d0dff8526f3b4aa74569dfb626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cad91663df381d0dff8526f3b4aa74569dfb626"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 60,
      "deletions": 61
    },
    "files": [
      {
        "sha": "936ca94580544465ab063911536ac43852664896",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 60,
        "deletions": 61,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d119f2ec1a3b9213a79de972ed7b9b7022645b3f/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d119f2ec1a3b9213a79de972ed7b9b7022645b3f/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
        "patch": "@@ -3,39 +3,41 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n+from decimal import Decimal\n+import random\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n+from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import satoshi_round, sync_mempools, sync_blocks, connect_nodes, assert_greater_than\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n # time signing.\n-redeem_script_1 = CScript([OP_1, OP_DROP])\n-redeem_script_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(redeem_script_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(redeem_script_2), OP_EQUAL])\n+REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n+REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n+P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n+P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n-SCRIPT_SIG = [CScript([OP_TRUE, redeem_script_1]), CScript([OP_TRUE, redeem_script_2])]\n+SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n \n global log\n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n-    \"\"\"\n-    Create and send a transaction with a random fee.\n+    \"\"\"Create and send a transaction with a random fee.\n+\n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n     It adds the newly created outputs to the unconfirmed list.\n-    Returns (raw transaction, fee)\n-    \"\"\"\n+    Returns (raw transaction, fee).\"\"\"\n+\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n-    rand_fee = float(fee_increment)*(1.1892**random.randint(0,28))\n+    rand_fee = float(fee_increment) * (1.1892 ** random.randint(0, 28))\n     # Total fee ranges from min_fee to min_fee + 127*fee_increment\n     fee = min_fee - fee_increment + satoshi_round(rand_fee)\n     tx = CTransaction()\n@@ -50,83 +52,81 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n             total_in += t[\"amount\"]\n             tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n         if total_in <= amount + fee:\n-            raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n-    tx.vout.append(CTxOut(int((total_in - amount - fee)*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(amount*COIN), P2SH_2))\n+            raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount + fee, total_in))\n+    tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n     # These transactions don't need to be signed, but we still have to insert\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n     txid = from_node.sendrawtransaction(ToHex(tx), True)\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : total_in - amount - fee})\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : amount})\n+    unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n+    unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n     return (ToHex(tx), fee)\n \n-def split_inputs(from_node, txins, txouts, initial_split = False):\n-    \"\"\"\n-    We need to generate a lot of inputs so we can generate a ton of transactions.\n+def split_inputs(from_node, txins, txouts, initial_split=False):\n+    \"\"\"Generate a lot of inputs so we can generate a ton of transactions.\n+\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n     Previously this was designed to be small inputs so they wouldn't have\n-    a high coin age when the notion of priority still existed.\n-    \"\"\"\n+    a high coin age when the notion of priority still existed.\"\"\"\n+\n     prevtxout = txins.pop()\n     tx = CTransaction()\n     tx.vin.append(CTxIn(COutPoint(int(prevtxout[\"txid\"], 16), prevtxout[\"vout\"]), b\"\"))\n \n-    half_change = satoshi_round(prevtxout[\"amount\"]/2)\n-    rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    tx.vout.append(CTxOut(int(half_change*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(rem_change*COIN), P2SH_2))\n+    half_change = satoshi_round(prevtxout[\"amount\"] / 2)\n+    rem_change = prevtxout[\"amount\"] - half_change - Decimal(\"0.00001000\")\n+    tx.vout.append(CTxOut(int(half_change * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH_2))\n \n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n-    if (initial_split) :\n+    if (initial_split):\n         completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n-    else :\n+    else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)\n     txid = from_node.sendrawtransaction(completetx, True)\n-    txouts.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : half_change})\n-    txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})\n-\n-def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n-    \"\"\"\n-    This function calls estimatefee and verifies that the estimates\n-    meet certain invariants.\n-    \"\"\"\n-    all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n+    txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n+    txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n+\n+def check_estimates(node, fees_seen, max_invalid, print_estimates=True):\n+    \"\"\"Call estimatefee and verify that the estimates meet certain invariants.\"\"\"\n+\n+    all_estimates = [node.estimatefee(i) for i in range(1, 26)]\n     if print_estimates:\n-        log.info([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n-    delta = 1.0e-6 # account for rounding error\n+        log.info([str(all_estimates[e - 1]) for e in [1, 2, 3, 6, 15, 25]])\n+    delta = 1.0e-6  # account for rounding error\n     last_e = max(fees_seen)\n     for e in [x for x in all_estimates if x >= 0]:\n         # Estimates should be within the bounds of what transactions fees actually were:\n-        if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n+        if float(e) + delta < min(fees_seen) or float(e) - delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 %(float(e), min(fees_seen), max(fees_seen)))\n+                                 % (float(e), min(fees_seen), max(fees_seen)))\n         # Estimates should be monotonically decreasing\n-        if float(e)-delta > last_e:\n+        if float(e) - delta > last_e:\n             raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 %(float(e),float(last_e)))\n+                                 % (float(e), float(last_e)))\n         last_e = e\n     valid_estimate = False\n     invalid_estimates = 0\n-    for i,e in enumerate(all_estimates): # estimate is for i+1\n+    for i, e in enumerate(all_estimates):  # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n             if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n-                assert(node.estimatesmartfee((i+1)//2)[\"feerate\"] > float(e) - delta)\n+                assert_greater_than(node.estimatesmartfee((i + 1) // 2)[\"feerate\"], float(e) - delta)\n \n         else:\n             invalid_estimates += 1\n \n             # estimatesmartfee should still be valid\n-            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n-            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n-            assert(approx_estimate > 0)\n-            assert(answer_found > i+1)\n+            approx_estimate = node.estimatesmartfee(i + 1)[\"feerate\"]\n+            answer_found = node.estimatesmartfee(i + 1)[\"blocks\"]\n+            assert_greater_than(approx_estimate, 0)\n+            assert_greater_than(answer_found, i + 1)\n \n             # Once we're at a high enough confirmation count that we can give an estimate\n             # We should have estimates for all higher confirmation counts\n@@ -136,7 +136,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n     # Check on the expected number of different confirmation counts\n     # that we might not have valid estimates for\n     if invalid_estimates > max_invalid:\n-        raise AssertionError(\"More than (%d) invalid estimates\"%(max_invalid))\n+        raise AssertionError(\"More than (%d) invalid estimates\" % (max_invalid))\n     return all_estimates\n \n \n@@ -160,7 +160,6 @@ def setup_network(self):\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n \n-\n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n         # We will now mine numblocks blocks generating on average 100 transactions between each block\n@@ -169,14 +168,14 @@ def transact_and_mine(self, numblocks, mining_node):\n         # resorting to tx's that depend on the mempool when those run out\n         for i in range(numblocks):\n             random.shuffle(self.confutxo)\n-            for j in range(random.randrange(100-50,100+50)):\n-                from_index = random.randint(1,2)\n+            for j in range(random.randrange(100 - 50, 100 + 50)):\n+                from_index = random.randint(1, 2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n-                self.fees_per_kb.append(float(fee)/tx_kbytes)\n+                self.fees_per_kb.append(float(fee) / tx_kbytes)\n             sync_mempools(self.nodes[0:3], wait=.1)\n-            mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n+            mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n             sync_blocks(self.nodes[0:3], wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n@@ -210,13 +209,13 @@ def run_test(self):\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n         reps = 0\n         while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n+            # Double txouts to txouts2\n+            while (len(self.txouts) > 0):\n                 split_inputs(self.nodes[0], self.txouts, self.txouts2)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n+            # Double txouts2 to txouts\n+            while (len(self.txouts2) > 0):\n                 split_inputs(self.nodes[0], self.txouts2, self.txouts)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n@@ -235,7 +234,7 @@ def run_test(self):\n \n         self.fees_per_kb = []\n         self.memutxo = []\n-        self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n+        self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n         for i in range(2):"
      }
    ]
  },
  {
    "sha": "a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTYyM2IxNjE1YmRkM2U4YjIzYjYzOWM3YzZhZmYwNGE0NGRhZGY3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:37:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:56:49Z"
      },
      "message": "[tests] Remove tests for deprecated estimatefee RPC",
      "tree": {
        "sha": "012a5126d2752e1fac0a60cbb4ce12bd4daf09ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/012a5126d2752e1fac0a60cbb4ce12bd4daf09ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d119f2ec1a3b9213a79de972ed7b9b7022645b3f"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 26,
      "deletions": 48
    },
    "files": [
      {
        "sha": "e1263414bde38959e3a973272117f6b07a86359a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 26,
        "deletions": 48,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
        "patch": "@@ -9,7 +9,15 @@\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import satoshi_round, sync_mempools, sync_blocks, connect_nodes, assert_greater_than\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    connect_nodes,\n+    satoshi_round,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n@@ -22,8 +30,6 @@\n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n \n-global log\n-\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     \"\"\"Create and send a transaction with a random fee.\n \n@@ -93,52 +99,28 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n-def check_estimates(node, fees_seen, max_invalid, print_estimates=True):\n-    \"\"\"Call estimatefee and verify that the estimates meet certain invariants.\"\"\"\n+def check_estimates(node, fees_seen, max_invalid):\n+    \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n \n-    all_estimates = [node.estimatefee(i) for i in range(1, 26)]\n-    if print_estimates:\n-        log.info([str(all_estimates[e - 1]) for e in [1, 2, 3, 6, 15, 25]])\n     delta = 1.0e-6  # account for rounding error\n-    last_e = max(fees_seen)\n-    for e in [x for x in all_estimates if x >= 0]:\n-        # Estimates should be within the bounds of what transactions fees actually were:\n-        if float(e) + delta < min(fees_seen) or float(e) - delta > max(fees_seen):\n+    last_feerate = float(max(fees_seen))\n+    all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n+    for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n+        feerate = float(e[\"feerate\"])\n+        assert_greater_than(feerate, 0)\n+\n+        if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 % (float(e), min(fees_seen), max(fees_seen)))\n-        # Estimates should be monotonically decreasing\n-        if float(e) - delta > last_e:\n+                                 % (feerate, min(fees_seen), max(fees_seen)))\n+        if feerate - delta > last_feerate:\n             raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 % (float(e), float(last_e)))\n-        last_e = e\n-    valid_estimate = False\n-    invalid_estimates = 0\n-    for i, e in enumerate(all_estimates):  # estimate is for i+1\n-        if e >= 0:\n-            valid_estimate = True\n-            if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n-                assert_greater_than(node.estimatesmartfee((i + 1) // 2)[\"feerate\"], float(e) - delta)\n+                                 % (feerate, last_feerate))\n+        last_feerate = feerate\n \n+        if i == 0:\n+            assert_equal(e[\"blocks\"], 2)\n         else:\n-            invalid_estimates += 1\n-\n-            # estimatesmartfee should still be valid\n-            approx_estimate = node.estimatesmartfee(i + 1)[\"feerate\"]\n-            answer_found = node.estimatesmartfee(i + 1)[\"blocks\"]\n-            assert_greater_than(approx_estimate, 0)\n-            assert_greater_than(answer_found, i + 1)\n-\n-            # Once we're at a high enough confirmation count that we can give an estimate\n-            # We should have estimates for all higher confirmation counts\n-            if valid_estimate:\n-                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n-\n-    # Check on the expected number of different confirmation counts\n-    # that we might not have valid estimates for\n-    if invalid_estimates > max_invalid:\n-        raise AssertionError(\"More than (%d) invalid estimates\" % (max_invalid))\n-    return all_estimates\n-\n+            assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -151,7 +133,7 @@ def setup_network(self):\n         which we will use to generate our transactions.\n         \"\"\"\n         self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n                                       [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n@@ -190,10 +172,6 @@ def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n \n-        # Make log handler available to helper functions\n-        global log\n-        log = self.log\n-\n         # Start node0\n         self.start_node(0)\n         self.txouts = []"
      }
    ]
  },
  {
    "sha": "a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGU0MzdhMDJmMmQzZDljN2NlY2U0ZWM4OTU0M2M3YjgwM2VhMjBm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:59:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T16:34:42Z"
      },
      "message": "[tests] Remove estimatefee from rpc_deprecated.py test",
      "tree": {
        "sha": "9c6ece577ee89ba3ef4882284b85677702a69446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c6ece577ee89ba3ef4882284b85677702a69446"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "689afcb09cf51574ce4798182b656e51487b00b1",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
        "patch": "@@ -10,15 +10,9 @@ class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=createmultisig\"]]\n+        self.extra_args = [[], [\"-deprecatedrpc=createmultisig\"]]\n \n     def run_test(self):\n-        self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n-\n-        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n-        self.nodes[1].estimatefee(1)\n-\n         self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])"
      }
    ]
  },
  {
    "sha": "c6f09c2713333bf335e83bb303e2feec10136751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmYwOWMyNzEzMzMzYmYzMzVlODNiYjMwM2UyZmVlYzEwMTM2NzUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:09:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-05T20:17:31Z"
      },
      "message": "[rpc] remove deprecated estimatefee RPC",
      "tree": {
        "sha": "2187caea2bd1dd987717193fe03dd22422055d95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2187caea2bd1dd987717193fe03dd22422055d95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6f09c2713333bf335e83bb303e2feec10136751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f09c2713333bf335e83bb303e2feec10136751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6f09c2713333bf335e83bb303e2feec10136751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f09c2713333bf335e83bb303e2feec10136751/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 5,
      "deletions": 41
    },
    "files": [
      {
        "sha": "99c1242d8ad503e8021d45dd6d0acfa7bce95350",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c6f09c2713333bf335e83bb303e2feec10136751",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n-    { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },"
      },
      {
        "sha": "6c36c0601716549241fe7ebb224ee9cb00ea1f6e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 38,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c6f09c2713333bf335e83bb303e2feec10136751",
        "patch": "@@ -772,43 +772,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"estimatefee nblocks\\n\"\n-            \"\\nDEPRECATED. Please use estimatesmartfee for more intelligent estimates.\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks. Uses virtual transaction size of transaction\\n\"\n-            \"as defined in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, required)\\n\"\n-            \"\\nResult:\\n\"\n-            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n-            \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n-            \"-1 is always returned for nblocks == 1 as it is impossible to calculate\\n\"\n-            \"a fee that is high enough to get reliably included in the next block.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatefee\", \"6\")\n-            );\n-\n-    if (!IsDeprecatedRPCEnabled(\"estimatefee\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee is deprecated and will be fully removed in v0.17. \"\n-            \"To use estimatefee in v0.16, restart bitcoind with -deprecatedrpc=estimatefee.\\n\"\n-            \"Projects should transition to using estimatesmartfee before upgrading to v0.17\");\n-    }\n-\n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1)\n-        nBlocks = 1;\n-\n-    CFeeRate feeRate = ::feeEstimator.estimateFee(nBlocks);\n-    if (feeRate == CFeeRate(0))\n-        return -1.0;\n-\n-    return ValueFromAmount(feeRate.GetFeePerK());\n+    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n+        \"Clients should use estimatesmartfee.\");\n }\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n@@ -986,7 +951,7 @@ static const CRPCCommand commands[] =\n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n \n-    { \"util\",               \"estimatefee\",            &estimatefee,            {\"nblocks\"} },\n+    { \"hidden\",             \"estimatefee\",            &estimatefee,            {} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },"
      },
      {
        "sha": "bb0106b5432dd8bc7501a3d254ec2c75a8cbac2d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6f09c2713333bf335e83bb303e2feec10136751/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6f09c2713333bf335e83bb303e2feec10136751/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c6f09c2713333bf335e83bb303e2feec10136751",
        "patch": "@@ -3257,8 +3257,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n             \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n             \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n-            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+            \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n             \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n             \"returned by getnetworkinfo) to enter the node's mempool.\\n\""
      }
    ]
  },
  {
    "sha": "d066a1c069e2def43f758a3d24c972f7625d6240",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDY2YTFjMDY5ZTJkZWY0M2Y3NThhM2QyNGM5NzJmNzYyNWQ2MjQw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T17:44:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-05T20:17:35Z"
      },
      "message": "[rpc] Remove deprecated getmininginfo RPC option",
      "tree": {
        "sha": "65be459d933dd91f5334a5657b39ab9a93e010a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65be459d933dd91f5334a5657b39ab9a93e010a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d066a1c069e2def43f758a3d24c972f7625d6240",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d066a1c069e2def43f758a3d24c972f7625d6240",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d066a1c069e2def43f758a3d24c972f7625d6240",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d066a1c069e2def43f758a3d24c972f7625d6240/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6f09c2713333bf335e83bb303e2feec10136751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f09c2713333bf335e83bb303e2feec10136751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6f09c2713333bf335e83bb303e2feec10136751"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "69d0d12e864d194c11908c6a07c63327fa1bcc40",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d066a1c069e2def43f758a3d24c972f7625d6240/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d066a1c069e2def43f758a3d24c972f7625d6240/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d066a1c069e2def43f758a3d24c972f7625d6240",
        "patch": "@@ -201,7 +201,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -219,11 +218,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    if (IsDeprecatedRPCEnabled(\"getmininginfo\")) {\n-        obj.push_back(Pair(\"errors\",       GetWarnings(\"statusbar\")));\n-    } else {\n-        obj.push_back(Pair(\"warnings\",     GetWarnings(\"statusbar\")));\n-    }\n+    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "ed45c8201977aecde226b2e9b060820a8fd677c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDQ1YzgyMDE5NzdhZWNkZTIyNmIyZTliMDYwODIwYThmZDY3N2Mz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T17:46:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:09Z"
      },
      "message": "[tests] Remove test for deprecated createmultsig option",
      "tree": {
        "sha": "fb634517c933ef7de2c67b0b0a2d9660d503c5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb634517c933ef7de2c67b0b0a2d9660d503c5a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed45c8201977aecde226b2e9b060820a8fd677c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed45c8201977aecde226b2e9b060820a8fd677c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed45c8201977aecde226b2e9b060820a8fd677c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed45c8201977aecde226b2e9b060820a8fd677c3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d066a1c069e2def43f758a3d24c972f7625d6240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d066a1c069e2def43f758a3d24c972f7625d6240",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d066a1c069e2def43f758a3d24c972f7625d6240"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "90183474bbd24dddb549245844134de24f913dd1",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed45c8201977aecde226b2e9b060820a8fd677c3/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed45c8201977aecde226b2e9b060820a8fd677c3/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=ed45c8201977aecde226b2e9b060820a8fd677c3",
        "patch": "@@ -4,18 +4,24 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=createmultisig\"]]\n+        self.extra_args = [[], []]\n \n     def run_test(self):\n-        self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n-        assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n-        self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        # This test should be used to verify correct behaviour of deprecated\n+        # RPC methods with and without the -deprecatedrpc flags. For example:\n+        #\n+        # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n+        # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n+        # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        #\n+        # There are currently no deprecated RPC methods in master, so this\n+        # test is currently empty.\n+        pass\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "cb28a0b07f889a327731a86d7c13681c3007437f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjI4YTBiMDdmODg5YTMyNzczMWE4NmQ3YzEzNjgxYzMwMDc0Mzdm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T19:34:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:28Z"
      },
      "message": "[RPC] Remove deprecated createmultisig object",
      "tree": {
        "sha": "210d20a0942c6149e27bfdf807debe5b6a5e91c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/210d20a0942c6149e27bfdf807debe5b6a5e91c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb28a0b07f889a327731a86d7c13681c3007437f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed45c8201977aecde226b2e9b060820a8fd677c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed45c8201977aecde226b2e9b060820a8fd677c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed45c8201977aecde226b2e9b060820a8fd677c3"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 1,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e772f5653452b9f7524c31b65fd995d64b5fbd69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb28a0b07f889a327731a86d7c13681c3007437f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb28a0b07f889a327731a86d7c13681c3007437f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=cb28a0b07f889a327731a86d7c13681c3007437f",
        "patch": "@@ -262,9 +262,6 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         std::string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n-            \"DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must\\n\"\n-            \"transition to using addmultisigaddress to create multisig addresses with addresses known\\n\"\n-            \"to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n@@ -297,15 +294,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         if (IsHex(keys[i].get_str()) && (keys[i].get_str().length() == 66 || keys[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys[i].get_str()));\n         } else {\n-#ifdef ENABLE_WALLET\n-            CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n-            if (IsDeprecatedRPCEnabled(\"createmultisig\") && EnsureWalletIsAvailable(pwallet, false)) {\n-                pubkeys.push_back(AddrToPubKey(pwallet, keys[i].get_str()));\n-            } else\n-#endif\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid public key: %s\\nNote that from v0.16, createmultisig no longer accepts addresses.\"\n-            \" Clients must transition to using addmultisigaddress to create multisig addresses with addresses known to the wallet before upgrading to v0.17.\"\n-            \" To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\", keys[i].get_str()));\n+            \" Users must use addmultisigaddress to create multisig addresses with addresses known to the wallet.\", keys[i].get_str()));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "db1cbcc8563722500856df6dea552d51464d173e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjFjYmNjODU2MzcyMjUwMDg1NmRmNmRlYTU1MmQ1MTQ2NGQxNzNl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T19:41:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:28Z"
      },
      "message": "[RPC] Remove deprecated addmultisigaddress return format",
      "tree": {
        "sha": "75f88977f335c4940dde138d05dcadec39d1bf9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f88977f335c4940dde138d05dcadec39d1bf9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db1cbcc8563722500856df6dea552d51464d173e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db1cbcc8563722500856df6dea552d51464d173e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb28a0b07f889a327731a86d7c13681c3007437f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb28a0b07f889a327731a86d7c13681c3007437f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "afad69615477cb825f993558da70f376c89a600b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db1cbcc8563722500856df6dea552d51464d173e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db1cbcc8563722500856df6dea552d51464d173e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=db1cbcc8563722500856df6dea552d51464d173e",
        "patch": "@@ -1192,10 +1192,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-            \"\\nResult (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).\\n\"\n-            \"        clients should transition to the new output api before upgrading to v0.17.\\n\"\n-            \"\\\"address\\\"                         (string) A bitcoin address associated with the keys.\\n\"\n-\n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n@@ -1238,11 +1234,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n     pwallet->SetAddressBook(dest, strAccount, \"send\");\n \n-    // Return old style interface\n-    if (IsDeprecatedRPCEnabled(\"addmultisigaddress\")) {\n-        return EncodeDestination(dest);\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));"
      }
    ]
  }
]