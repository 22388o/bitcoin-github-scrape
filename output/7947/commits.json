[
  {
    "sha": "190370b1c8f773178c01440579a4cb0175924fcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTAzNzBiMWM4Zjc3MzE3OGMwMTQ0MDU3OWE0Y2IwMTc1OTI0ZmNi",
    "commit": {
      "author": {
        "name": "face",
        "email": "face@hmel.org",
        "date": "2016-04-19T14:10:36Z"
      },
      "committer": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T09:24:53Z"
      },
      "message": "Explicitly pass CChainParams& to FlushStateToDisk()",
      "tree": {
        "sha": "5592a2ce2025a8dc76eacc3fee4f741427b55e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5592a2ce2025a8dc76eacc3fee4f741427b55e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/190370b1c8f773178c01440579a4cb0175924fcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190370b1c8f773178c01440579a4cb0175924fcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/190370b1c8f773178c01440579a4cb0175924fcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190370b1c8f773178c01440579a4cb0175924fcb/comments",
    "author": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46880ed2fd961c29b5fe4f841c747951bc706912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46880ed2fd961c29b5fe4f841c747951bc706912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46880ed2fd961c29b5fe4f841c747951bc706912"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e7f924c6f1974c8b72487f2e0846ff50b5682a49",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190370b1c8f773178c01440579a4cb0175924fcb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190370b1c8f773178c01440579a4cb0175924fcb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=190370b1c8f773178c01440579a4cb0175924fcb",
        "patch": "@@ -1354,7 +1354,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         nLocalServices &= ~NODE_NETWORK;\n         if (!fReindex) {\n             uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n-            PruneAndFlush();\n+            PruneAndFlush(chainparams);\n         }\n     }\n "
      },
      {
        "sha": "f105a1ab9f5c73618dcdefb7595cf7502bcebadb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190370b1c8f773178c01440579a4cb0175924fcb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190370b1c8f773178c01440579a4cb0175924fcb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=190370b1c8f773178c01440579a4cb0175924fcb",
        "patch": "@@ -2461,8 +2461,7 @@ enum FlushStateMode {\n  * if they're too large, if it's been a while since the last write,\n  * or always and in all cases if we're in prune mode and are deleting files.\n  */\n-bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n-    const CChainParams& chainparams = Params();\n+bool static FlushStateToDisk(CValidationState &state, const CChainParams& chainparams, FlushStateMode mode) {\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n@@ -2560,13 +2559,14 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n \n void FlushStateToDisk() {\n     CValidationState state;\n-    FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n+    const CChainParams& chainparams = Params();\n+    FlushStateToDisk(state, chainparams, FLUSH_STATE_ALWAYS);\n }\n \n-void PruneAndFlush() {\n+void PruneAndFlush(const CChainParams& chainparams) {\n     CValidationState state;\n     fCheckForPruning = true;\n-    FlushStateToDisk(state, FLUSH_STATE_NONE);\n+    FlushStateToDisk(state, chainparams, FLUSH_STATE_NONE);\n }\n \n /** Update chainActive and related internal data structures. */\n@@ -2646,7 +2646,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     }\n     LogPrint(\"bench\", \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n+    if (!FlushStateToDisk(state, chainparams, FLUSH_STATE_IF_NEEDED))\n         return false;\n     // Resurrect mempool transactions from the disconnected block.\n     std::vector<uint256> vHashUpdate;\n@@ -2718,7 +2718,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(\"bench\", \"  - Flush: %.2fms [%.2fs]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n+    if (!FlushStateToDisk(state, chainparams, FLUSH_STATE_IF_NEEDED))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n@@ -2965,7 +2965,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay.\n-    if (!FlushStateToDisk(state, FLUSH_STATE_PERIODIC)) {\n+    if (!FlushStateToDisk(state, chainparams, FLUSH_STATE_PERIODIC)) {\n         return false;\n     }\n \n@@ -3462,7 +3462,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n \n     if (fCheckForPruning)\n-        FlushStateToDisk(state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n+        FlushStateToDisk(state, chainparams, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n     return true;\n }\n@@ -3977,7 +3977,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             if (!ActivateBestChain(state, chainparams, &block))\n                 return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n-            return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n+            return FlushStateToDisk(state, chainparams, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n             return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }\n@@ -5063,7 +5063,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n-        FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n+        FlushStateToDisk(state, chainparams, FLUSH_STATE_PERIODIC);\n     }\n \n "
      },
      {
        "sha": "6aeb5cb4c29a500f22ace65b465b2e2df392e858",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190370b1c8f773178c01440579a4cb0175924fcb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190370b1c8f773178c01440579a4cb0175924fcb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=190370b1c8f773178c01440579a4cb0175924fcb",
        "patch": "@@ -288,7 +288,7 @@ void Misbehaving(NodeId nodeid, int howmuch);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n-void PruneAndFlush();\n+void PruneAndFlush(const CChainParams& chainparams);\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,"
      }
    ]
  },
  {
    "sha": "9fc71c544e592f6c51c3007030ceaafc1f7b9737",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmM3MWM1NDRlNTkyZjZjNTFjMzAwNzAzMGNlYWFmYzFmN2I5NzM3",
    "commit": {
      "author": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T11:19:05Z"
      },
      "committer": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T11:19:05Z"
      },
      "message": "Explicitly pass Consensus::Params& to ContextualCheckBlockHeader()",
      "tree": {
        "sha": "90aec81733a678763839d90e3701f2bc4b1eae33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90aec81733a678763839d90e3701f2bc4b1eae33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fc71c544e592f6c51c3007030ceaafc1f7b9737",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc71c544e592f6c51c3007030ceaafc1f7b9737",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fc71c544e592f6c51c3007030ceaafc1f7b9737",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc71c544e592f6c51c3007030ceaafc1f7b9737/comments",
    "author": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "190370b1c8f773178c01440579a4cb0175924fcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190370b1c8f773178c01440579a4cb0175924fcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/190370b1c8f773178c01440579a4cb0175924fcb"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d60eba339a9846e4a6ff155aa8b520e991a78cac",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fc71c544e592f6c51c3007030ceaafc1f7b9737/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fc71c544e592f6c51c3007030ceaafc1f7b9737/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9fc71c544e592f6c51c3007030ceaafc1f7b9737",
        "patch": "@@ -3300,9 +3300,8 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev, const Consensus::Params& consensusParams)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n@@ -3391,7 +3390,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n             return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-        if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+        if (!ContextualCheckBlockHeader(block, state, pindexPrev, chainparams.GetConsensus()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n     }\n     if (pindex == NULL)\n@@ -3517,7 +3516,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+    if (!ContextualCheckBlockHeader(block, state, pindexPrev, chainparams.GetConsensus()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));"
      },
      {
        "sha": "007a2b9078a992d6e74bdf33648aff346d7c78cc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fc71c544e592f6c51c3007030ceaafc1f7b9737/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fc71c544e592f6c51c3007030ceaafc1f7b9737/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9fc71c544e592f6c51c3007030ceaafc1f7b9737",
        "patch": "@@ -452,7 +452,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = t\n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev, const Consensus::Params& consensusParams);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins."
      }
    ]
  },
  {
    "sha": "b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWZiMjRmYzBmMDQ3MDcyYmMxZDE0YTA3ZGUyMjI2NDVmZGYyYWI1",
    "commit": {
      "author": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T11:46:40Z"
      },
      "committer": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T11:46:40Z"
      },
      "message": "Explicitly pass consensus params and adjusted time to CheckBlockHeader()",
      "tree": {
        "sha": "f18ab822537e1eabefe194f43b3b91e035c6a076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f18ab822537e1eabefe194f43b3b91e035c6a076"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb24fc0f047072bc1d14a07de222645fdf2ab5/comments",
    "author": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fc71c544e592f6c51c3007030ceaafc1f7b9737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc71c544e592f6c51c3007030ceaafc1f7b9737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fc71c544e592f6c51c3007030ceaafc1f7b9737"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7afd3e232b3b99b4059f66910f67c5bc7524ea68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb24fc0f047072bc1d14a07de222645fdf2ab5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb24fc0f047072bc1d14a07de222645fdf2ab5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
        "patch": "@@ -2229,7 +2229,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n     // verify that the view's current state corresponds to the previous block\n@@ -3212,20 +3212,20 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n \n@@ -3234,7 +3234,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n+    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -3374,7 +3374,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return true;\n         }\n \n-        if (!CheckBlockHeader(block, state))\n+        if (!CheckBlockHeader(block, state, chainparams.GetConsensus(), GetAdjustedTime()))\n             return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Get prev block index\n@@ -3433,7 +3433,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n         if (fTooFarAhead) return true;      // Block height is too high\n     }\n \n-    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if ((!CheckBlock(block, state, chainparams.GetConsensus())) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -3518,7 +3518,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, pindexPrev, chainparams.GetConsensus()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n-    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n@@ -3850,7 +3850,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity"
      },
      {
        "sha": "eb9790073a25626578e9e0721ad4cd40fe76c867",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb24fc0f047072bc1d14a07de222645fdf2ab5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb24fc0f047072bc1d14a07de222645fdf2ab5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
        "patch": "@@ -446,8 +446,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO"
      }
    ]
  },
  {
    "sha": "418d9627def477be903897238c73c24b491554cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MThkOTYyN2RlZjQ3N2JlOTAzODk3MjM4YzczYzI0YjQ5MTU1NGNm",
    "commit": {
      "author": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T14:14:45Z"
      },
      "committer": {
        "name": "Nikolay Mitev",
        "email": "face@hmel.org",
        "date": "2016-04-26T14:14:45Z"
      },
      "message": "Explicitly pass CChainParams& to LoadBlockIndexDB()",
      "tree": {
        "sha": "c58eec9c666bb9a3a3f6462ad7dca62647408d45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58eec9c666bb9a3a3f6462ad7dca62647408d45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/418d9627def477be903897238c73c24b491554cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/418d9627def477be903897238c73c24b491554cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/418d9627def477be903897238c73c24b491554cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/418d9627def477be903897238c73c24b491554cf/comments",
    "author": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hmel",
      "id": 3381475,
      "node_id": "MDQ6VXNlcjMzODE0NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3381475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmel",
      "html_url": "https://github.com/hmel",
      "followers_url": "https://api.github.com/users/hmel/followers",
      "following_url": "https://api.github.com/users/hmel/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmel/subscriptions",
      "organizations_url": "https://api.github.com/users/hmel/orgs",
      "repos_url": "https://api.github.com/users/hmel/repos",
      "events_url": "https://api.github.com/users/hmel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmel/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb24fc0f047072bc1d14a07de222645fdf2ab5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9fb24fc0f047072bc1d14a07de222645fdf2ab5"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b9328cf527da9e6d102638fe6646786c78c2932c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/418d9627def477be903897238c73c24b491554cf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/418d9627def477be903897238c73c24b491554cf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=418d9627def477be903897238c73c24b491554cf",
        "patch": "@@ -1235,7 +1235,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         CleanupBlockRevFiles();\n                 }\n \n-                if (!LoadBlockIndex()) {\n+                if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n                 }"
      },
      {
        "sha": "c49ca166f9e681738df7fd6362fa3706af7fe6be",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/418d9627def477be903897238c73c24b491554cf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/418d9627def477be903897238c73c24b491554cf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=418d9627def477be903897238c73c24b491554cf",
        "patch": "@@ -3701,9 +3701,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB()\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    const CChainParams& chainparams = Params();\n     if (!pblocktree->LoadBlockIndexGuts())\n         return false;\n \n@@ -3934,10 +3933,10 @@ void UnloadBlockIndex()\n     fHavePruned = false;\n }\n \n-bool LoadBlockIndex()\n+bool LoadBlockIndex(const CChainParams& chainparams)\n {\n     // Load block index from databases\n-    if (!fReindex && !LoadBlockIndexDB())\n+    if (!fReindex && !LoadBlockIndexDB(chainparams))\n         return false;\n     return true;\n }"
      },
      {
        "sha": "f040db8d8e1b44b1a2ced6dbe7b30f34a99e91ba",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/418d9627def477be903897238c73c24b491554cf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/418d9627def477be903897238c73c24b491554cf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=418d9627def477be903897238c73c24b491554cf",
        "patch": "@@ -226,7 +226,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n /** Initialize a new block tree database + block data on disk */\n bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n-bool LoadBlockIndex();\n+bool LoadBlockIndex(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Process protocol messages received from a given node */"
      }
    ]
  }
]