promag,2019-05-21 23:16:14,I was going to use `memset` but I think `std::fill` is much nicer and probably as fast as `memset`.,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494593281,494593281,
gmaxwell,2019-05-21 23:18:16,"Seems okay to me, but why are we resetting a big rolling bloom filter this often?\n\nIt may be better to use a generation counter. (this isn't a reason not to take this improvement, but maybe an area for bigger improvement).",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494593746,494593746,
MarcoFalke,2019-05-21 23:30:57,Any intuition why this is faster? Could add a trivial benchmark as first commit?,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494596521,494596521,
promag,2019-05-22 06:51:15,@MarcoFalke one reason may be a specialized version of fill for uint64_t. Will add the benchmark. ,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494675892,494675892,
jonasschnelli,2019-05-22 09:21:10,"Well spotted!\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494724224,494724224,
promag,2019-05-22 13:46:53,"Updated OP with benchmark result.\n\nProfiling before and after this change:\n\n![Screenshot 2019-05-22 at 00 11 14](https://user-images.githubusercontent.com/3534524/58136512-34538100-7c26-11e9-9ecd-2d914c8966f4.png)\n\n![Screenshot 2019-05-22 at 00 10 12](https://user-images.githubusercontent.com/3534524/58136513-34ec1780-7c26-11e9-9313-58b3c3d0807b.png)\n\n",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494809694,494809694,
promag,2019-05-22 13:51:21,@MarcoFalke benchmark added.,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494811536,494811536,
laanwj,2019-05-22 13:51:28,"> Any intuition why this is faster? Could add a trivial benchmark as first commit?\n\nIIRC `std::fill` tends to be optimized to a memset, which uses arch-specific instructions for the fastest filling of memory, whereas a loop is not",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494811582,494811582,
promag,2019-05-22 13:54:35,"> but maybe an area for bigger improvement\n\n@gmaxwell maybe open an issue and throw some suggestions?\n\n",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494812914,494812914,
MarcoFalke,2019-05-22 14:12:25,"What compiler and hardware are you using?\n\n\n----\nutACK 8d774bbbe8454119161446225451210c23fe56d3\n\nCouldn't find a performance difference on my system, but the code looks cleaner.\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nutACK 8d774bbbe8454119161446225451210c23fe56d3\n\nCouldn't find ",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494820514,494820514,
promag,2019-05-22 14:24:25,@MarcoFalke Apple LLVM version 10.0.1 (clang-1001.0.46.4) with `--enable-debug --with-sanitizers=thread`.,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494825579,494825579,
MarcoFalke,2019-05-22 14:46:24,Please mention that in the OP. Performance improvements when run with a sanitizer are completely meaningless to non-developers.,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494834982,494834982,
laanwj,2019-05-22 14:49:48,"Also, always benchmark in release mode. `--enable-debug` dials down the optimization level. It's very possible that you'll see no difference without that.",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494836426,494836426,
promag,2019-05-22 15:02:03,After all in release mode I have the same result as @MarcoFalke. Updated OP.,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494841801,494841801,
MarcoFalke,2019-05-22 15:22:56,"re-utACK df9e15f092\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-utACK df9e15f092\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUipzwwAha/6gluoBoDmrtyN06+eiKHYnCrPhkDCFXmUptsHMMkCLnxpzWslG9zX\nCXO6RZq48KQj6ZSx0TjdVFZuq5JEICqbiSk3u9McQxl2s",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494850679,494850679,
jamesob,2019-05-22 15:26:58,re-utACK https://github.com/bitcoin/bitcoin/pull/16073/commits/df9e15f092c18a8047f09307576c2b77b9c8d01c,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494852370,494852370,
practicalswift,2019-05-22 15:47:57,utACK d2dbc7da26e1ca40200521c05a0b1ca75578acd2,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494860788,494860788,
sipa,2019-05-22 18:31:05,utACK d2dbc7da26e1ca40200521c05a0b1ca75578acd2,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494914040,494914040,
MarcoFalke,2019-05-22 20:38:52,"@sipa, @practicalswift Just FYI, you reviewed an incorrect commit and your ACKs haven't been recorded in the merge.",https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494963257,494963257,
promag,2019-05-22 20:42:24,Sort by date FTW.,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494964511,494964511,
practicalswift,2019-05-22 20:56:38,@MarcoFalke Oh sorry about that and thanks for the notification!,https://github.com/bitcoin/bitcoin/pull/16073#issuecomment-494969758,494969758,
MarcoFalke,2019-05-22 14:44:28,"Please adjust this, so that it takes as much time as the other benchmarks (~4seconds, depending on arch)",https://github.com/bitcoin/bitcoin/pull/16073#discussion_r286528793,286528793,src/bench/rollingbloom.cpp
promag,2019-05-22 15:02:11,Done.,https://github.com/bitcoin/bitcoin/pull/16073#discussion_r286538643,286538643,src/bench/rollingbloom.cpp
