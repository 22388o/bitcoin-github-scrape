[
  {
    "sha": "d0d29056135073b560d57658d25a119d58ee7970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGQyOTA1NjEzNTA3M2I1NjBkNTc2NThkMjVhMTE5ZDU4ZWU3OTcw",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T02:37:08Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T02:37:08Z"
      },
      "message": "Encapsulate RPC command implementations within new classes",
      "tree": {
        "sha": "a2cd6492f9b15d102bad32db8b44a2bbd06e8a6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2cd6492f9b15d102bad32db8b44a2bbd06e8a6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0d29056135073b560d57658d25a119d58ee7970",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0d29056135073b560d57658d25a119d58ee7970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0d29056135073b560d57658d25a119d58ee7970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0d29056135073b560d57658d25a119d58ee7970/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6f6f524f1a916f9aefe5e1ab102efebdab007530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6f524f1a916f9aefe5e1ab102efebdab007530",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f6f524f1a916f9aefe5e1ab102efebdab007530"
      }
    ],
    "stats": {
      "total": 635,
      "additions": 503,
      "deletions": 132
    },
    "files": [
      {
        "sha": "ca0a2ad37db6c95d2cc9d30889c4a085cfc411d1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 503,
        "deletions": 132,
        "changes": 635,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d29056135073b560d57658d25a119d58ee7970/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d29056135073b560d57658d25a119d58ee7970/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=d0d29056135073b560d57658d25a119d58ee7970",
        "patch": "@@ -34,7 +34,6 @@ using namespace json_spirit;\n \n void ThreadRPCServer2(void* parg);\n typedef Value(*rpcfn_type)(const Array& params, bool fHelp);\n-extern map<string, rpcfn_type> mapCallTable;\n \n static std::string strRPCUserColonPass;\n \n@@ -165,7 +164,345 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n ///\n \n \n-Value help(const Array& params, bool fHelp)\n+class CRPCCommand\n+{\n+public:\n+    string name;\n+    bool okSafeMode;\n+    virtual Value actor(const Array& params, bool fHelp) = 0;\n+};\n+\n+class CRPChelp : public CRPCCommand\n+{\n+public:\n+    CRPChelp() { name = \"help\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCstop : public CRPCCommand\n+{\n+public:\n+    CRPCstop() { name = \"stop\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetblockcount : public CRPCCommand\n+{\n+public:\n+    CRPCgetblockcount() { name = \"getblockcount\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetblocknumber : public CRPCCommand\n+{\n+public:\n+    CRPCgetblocknumber() { name = \"getblocknumber\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetconnectioncount : public CRPCCommand\n+{\n+public:\n+    CRPCgetconnectioncount() { name = \"getconnectioncount\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetdifficulty : public CRPCCommand\n+{\n+public:\n+    CRPCgetdifficulty() { name = \"getdifficulty\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetgenerate : public CRPCCommand\n+{\n+public:\n+    CRPCgetgenerate() { name = \"getgenerate\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsetgenerate : public CRPCCommand\n+{\n+public:\n+    CRPCsetgenerate() { name = \"setgenerate\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgethashespersec : public CRPCCommand\n+{\n+public:\n+    CRPCgethashespersec() { name = \"gethashespersec\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetinfo : public CRPCCommand\n+{\n+public:\n+    CRPCgetinfo() { name = \"getinfo\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetmininginfo : public CRPCCommand\n+{\n+public:\n+    CRPCgetmininginfo() { name = \"getmininginfo\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetnewaddress : public CRPCCommand\n+{\n+public:\n+    CRPCgetnewaddress() { name = \"getnewaddress\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetaccountaddress : public CRPCCommand\n+{\n+public:\n+    CRPCgetaccountaddress() { name = \"getaccountaddress\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsetaccount : public CRPCCommand\n+{\n+public:\n+    CRPCsetaccount() { name = \"setaccount\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetaccount : public CRPCCommand\n+{\n+public:\n+    CRPCgetaccount() { name = \"getaccount\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetaddressesbyaccount : public CRPCCommand\n+{\n+public:\n+    CRPCgetaddressesbyaccount() { name = \"getaddressesbyaccount\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsendtoaddress : public CRPCCommand\n+{\n+public:\n+    CRPCsendtoaddress() { name = \"sendtoaddress\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetreceivedbyaddress : public CRPCCommand\n+{\n+public:\n+    CRPCgetreceivedbyaddress() { name = \"getreceivedbyaddress\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetreceivedbyaccount : public CRPCCommand\n+{\n+public:\n+    CRPCgetreceivedbyaccount() { name = \"getreceivedbyaccount\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPClistreceivedbyaddress : public CRPCCommand\n+{\n+public:\n+    CRPClistreceivedbyaddress() { name = \"listreceivedbyaddress\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPClistreceivedbyaccount : public CRPCCommand\n+{\n+public:\n+    CRPClistreceivedbyaccount() { name = \"listreceivedbyaccount\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCbackupwallet : public CRPCCommand\n+{\n+public:\n+    CRPCbackupwallet() { name = \"backupwallet\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCkeypoolrefill : public CRPCCommand\n+{\n+public:\n+    CRPCkeypoolrefill() { name = \"keypoolrefill\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCwalletpassphrase : public CRPCCommand\n+{\n+public:\n+    CRPCwalletpassphrase() { name = \"walletpassphrase\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCwalletpassphrasechange : public CRPCCommand\n+{\n+public:\n+    CRPCwalletpassphrasechange() { name = \"walletpassphrasechange\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCwalletlock : public CRPCCommand\n+{\n+public:\n+    CRPCwalletlock() { name = \"walletlock\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCencryptwallet : public CRPCCommand\n+{\n+public:\n+    CRPCencryptwallet() { name = \"encryptwallet\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCvalidateaddress : public CRPCCommand\n+{\n+public:\n+    CRPCvalidateaddress() { name = \"validateaddress\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetbalance : public CRPCCommand\n+{\n+public:\n+    CRPCgetbalance() { name = \"getbalance\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCmove : public CRPCCommand\n+{\n+public:\n+    CRPCmove() { name = \"move\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsendfrom : public CRPCCommand\n+{\n+public:\n+    CRPCsendfrom() { name = \"sendfrom\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsendmany : public CRPCCommand\n+{\n+public:\n+    CRPCsendmany() { name = \"sendmany\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCaddmultisigaddress : public CRPCCommand\n+{\n+public:\n+    CRPCaddmultisigaddress() { name = \"addmultisigaddress\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetblock : public CRPCCommand\n+{\n+public:\n+    CRPCgetblock() { name = \"getblock\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetblockhash : public CRPCCommand\n+{\n+public:\n+    CRPCgetblockhash() { name = \"getblockhash\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgettransaction : public CRPCCommand\n+{\n+public:\n+    CRPCgettransaction() { name = \"gettransaction\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPClisttransactions : public CRPCCommand\n+{\n+public:\n+    CRPClisttransactions() { name = \"listtransactions\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsignmessage : public CRPCCommand\n+{\n+public:\n+    CRPCsignmessage() { name = \"signmessage\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCverifymessage : public CRPCCommand\n+{\n+public:\n+    CRPCverifymessage() { name = \"verifymessage\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetwork : public CRPCCommand\n+{\n+public:\n+    CRPCgetwork() { name = \"getwork\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPClistaccounts : public CRPCCommand\n+{\n+public:\n+    CRPClistaccounts() { name = \"listaccounts\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCsettxfee : public CRPCCommand\n+{\n+public:\n+    CRPCsettxfee() { name = \"settxfee\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCgetmemorypool : public CRPCCommand\n+{\n+public:\n+    CRPCgetmemorypool() { name = \"getmemorypool\"; okSafeMode = true; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPClistsinceblock : public CRPCCommand\n+{\n+public:\n+    CRPClistsinceblock() { name = \"listsinceblock\"; }\n+    Value actor(const Array& params, bool fHelp);\n+};\n+\n+class CRPCdumpprivkey : public CRPCCommand\n+{\n+public:\n+    CRPCdumpprivkey() { name = \"dumpprivkey\"; }\n+    Value actor(const Array& params, bool fHelp)\n+    {\n+        return dumpprivkey(params, fHelp);\n+    }\n+};\n+\n+class CRPCimportprivkey : public CRPCCommand\n+{\n+public:\n+    CRPCimportprivkey() { name = \"importprivkey\"; }\n+    Value actor(const Array& params, bool fHelp)\n+    {\n+        return importprivkey(params, fHelp);\n+    }\n+};\n+\n+extern map<string, CRPCCommand*> mapCommands;\n+\n+Value CRPChelp::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -177,8 +514,7 @@ Value help(const Array& params, bool fHelp)\n         strCommand = params[0].get_str();\n \n     string strRet;\n-    set<rpcfn_type> setDone;\n-    for (map<string, rpcfn_type>::iterator mi = mapCallTable.begin(); mi != mapCallTable.end(); ++mi)\n+    for (map<string, CRPCCommand*>::iterator mi = mapCommands.begin(); mi != mapCommands.end(); ++mi)\n     {\n         string strMethod = (*mi).first;\n         // We already filter duplicates, but these deprecated screw up the sort order\n@@ -192,9 +528,8 @@ Value help(const Array& params, bool fHelp)\n         try\n         {\n             Array params;\n-            rpcfn_type pfn = (*mi).second;\n-            if (setDone.insert(pfn).second)\n-                (*pfn)(params, true);\n+            CRPCCommand *pcmd = mi->second;\n+            pcmd->actor(params, true);\n         }\n         catch (std::exception& e)\n         {\n@@ -213,7 +548,7 @@ Value help(const Array& params, bool fHelp)\n }\n \n \n-Value stop(const Array& params, bool fHelp)\n+Value CRPCstop::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -225,7 +560,7 @@ Value stop(const Array& params, bool fHelp)\n }\n \n \n-Value getblockcount(const Array& params, bool fHelp)\n+Value CRPCgetblockcount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -237,7 +572,7 @@ Value getblockcount(const Array& params, bool fHelp)\n \n \n // deprecated\n-Value getblocknumber(const Array& params, bool fHelp)\n+Value CRPCgetblocknumber::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -248,7 +583,7 @@ Value getblocknumber(const Array& params, bool fHelp)\n }\n \n \n-Value getconnectioncount(const Array& params, bool fHelp)\n+Value CRPCgetconnectioncount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -259,7 +594,7 @@ Value getconnectioncount(const Array& params, bool fHelp)\n }\n \n \n-Value getdifficulty(const Array& params, bool fHelp)\n+Value CRPCgetdifficulty::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -270,7 +605,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n }\n \n \n-Value getgenerate(const Array& params, bool fHelp)\n+Value CRPCgetgenerate::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -281,7 +616,7 @@ Value getgenerate(const Array& params, bool fHelp)\n }\n \n \n-Value setgenerate(const Array& params, bool fHelp)\n+Value CRPCsetgenerate::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -307,7 +642,7 @@ Value setgenerate(const Array& params, bool fHelp)\n }\n \n \n-Value gethashespersec(const Array& params, bool fHelp)\n+Value CRPCgethashespersec::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -320,7 +655,7 @@ Value gethashespersec(const Array& params, bool fHelp)\n }\n \n \n-Value getinfo(const Array& params, bool fHelp)\n+Value CRPCgetinfo::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -347,7 +682,7 @@ Value getinfo(const Array& params, bool fHelp)\n }\n \n \n-Value getmininginfo(const Array& params, bool fHelp)\n+Value CRPCgetmininginfo::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -362,14 +697,18 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"generate\",      GetBoolArg(\"-gen\")));\n     obj.push_back(Pair(\"genproclimit\",  (int)GetArg(\"-genproclimit\", -1)));\n-    obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n+\n+    Array params2;\n+    CRPCCommand *pcmd = mapCommands[\"gethashespersec\"];\n+    obj.push_back(Pair(\"hashespersec\",  pcmd->actor(params2, false)));\n+\n     obj.push_back(Pair(\"pooledtx\",      (uint64_t)nPooledTx));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n     return obj;\n }\n \n \n-Value getnewaddress(const Array& params, bool fHelp)\n+Value CRPCgetnewaddress::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -436,7 +775,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     return CBitcoinAddress(account.vchPubKey);\n }\n \n-Value getaccountaddress(const Array& params, bool fHelp)\n+Value CRPCgetaccountaddress::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -455,7 +794,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n \n \n-Value setaccount(const Array& params, bool fHelp)\n+Value CRPCsetaccount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -485,7 +824,7 @@ Value setaccount(const Array& params, bool fHelp)\n }\n \n \n-Value getaccount(const Array& params, bool fHelp)\n+Value CRPCgetaccount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -504,7 +843,7 @@ Value getaccount(const Array& params, bool fHelp)\n }\n \n \n-Value getaddressesbyaccount(const Array& params, bool fHelp)\n+Value CRPCgetaddressesbyaccount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -525,7 +864,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value settxfee(const Array& params, bool fHelp)\n+Value CRPCsettxfee::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n@@ -541,7 +880,7 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n-Value sendtoaddress(const Array& params, bool fHelp)\n+Value CRPCsendtoaddress::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n         throw runtime_error(\n@@ -577,7 +916,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-Value signmessage(const Array& params, bool fHelp)\n+Value CRPCsignmessage::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n@@ -609,7 +948,7 @@ Value signmessage(const Array& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-Value verifymessage(const Array& params, bool fHelp)\n+Value CRPCverifymessage::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -642,7 +981,7 @@ Value verifymessage(const Array& params, bool fHelp)\n }\n \n \n-Value getreceivedbyaddress(const Array& params, bool fHelp)\n+Value CRPCgetreceivedbyaddress::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -693,7 +1032,7 @@ void GetAccountAddresses(string strAccount, set<CBitcoinAddress>& setAddress)\n }\n \n \n-Value getreceivedbyaccount(const Array& params, bool fHelp)\n+Value CRPCgetreceivedbyaccount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -763,7 +1102,7 @@ int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n }\n \n \n-Value getbalance(const Array& params, bool fHelp)\n+Value CRPCgetbalance::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -814,7 +1153,7 @@ Value getbalance(const Array& params, bool fHelp)\n }\n \n \n-Value movecmd(const Array& params, bool fHelp)\n+Value CRPCmove::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n@@ -860,7 +1199,7 @@ Value movecmd(const Array& params, bool fHelp)\n }\n \n \n-Value sendfrom(const Array& params, bool fHelp)\n+Value CRPCsendfrom::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() < 3 || params.size() > 6))\n         throw runtime_error(\n@@ -905,7 +1244,7 @@ Value sendfrom(const Array& params, bool fHelp)\n }\n \n \n-Value sendmany(const Array& params, bool fHelp)\n+Value CRPCsendmany::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n         throw runtime_error(\n@@ -974,7 +1313,7 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-Value addmultisigaddress(const Array& params, bool fHelp)\n+Value CRPCaddmultisigaddress::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n@@ -1147,7 +1486,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     return ret;\n }\n \n-Value listreceivedbyaddress(const Array& params, bool fHelp)\n+Value CRPClistreceivedbyaddress::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -1163,7 +1502,7 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n     return ListReceived(params, false);\n }\n \n-Value listreceivedbyaccount(const Array& params, bool fHelp)\n+Value CRPClistreceivedbyaccount::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -1264,7 +1603,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n     }\n }\n \n-Value listtransactions(const Array& params, bool fHelp)\n+Value CRPClisttransactions::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -1337,7 +1676,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listaccounts(const Array& params, bool fHelp)\n+Value CRPClistaccounts::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -1388,7 +1727,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listsinceblock(const Array& params, bool fHelp)\n+Value CRPClistsinceblock::actor(const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n@@ -1452,7 +1791,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettransaction(const Array& params, bool fHelp)\n+Value CRPCgettransaction::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1487,7 +1826,7 @@ Value gettransaction(const Array& params, bool fHelp)\n }\n \n \n-Value backupwallet(const Array& params, bool fHelp)\n+Value CRPCbackupwallet::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1501,7 +1840,7 @@ Value backupwallet(const Array& params, bool fHelp)\n }\n \n \n-Value keypoolrefill(const Array& params, bool fHelp)\n+Value CRPCkeypoolrefill::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() > 0))\n         throw runtime_error(\n@@ -1570,7 +1909,7 @@ void ThreadCleanWalletPassphrase(void* parg)\n     delete (int64*)parg;\n }\n \n-Value walletpassphrase(const Array& params, bool fHelp)\n+Value CRPCwalletpassphrase::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n@@ -1609,7 +1948,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n }\n \n \n-Value walletpassphrasechange(const Array& params, bool fHelp)\n+Value CRPCwalletpassphrasechange::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n@@ -1642,7 +1981,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n }\n \n \n-Value walletlock(const Array& params, bool fHelp)\n+Value CRPCwalletlock::actor(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n         throw runtime_error(\n@@ -1665,7 +2004,7 @@ Value walletlock(const Array& params, bool fHelp)\n }\n \n \n-Value encryptwallet(const Array& params, bool fHelp)\n+Value CRPCencryptwallet::actor(const Array& params, bool fHelp)\n {\n     if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n         throw runtime_error(\n@@ -1698,7 +2037,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n }\n \n \n-Value validateaddress(const Array& params, bool fHelp)\n+Value CRPCvalidateaddress::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1752,7 +2091,7 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value getwork(const Array& params, bool fHelp)\n+Value CRPCgetwork::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -1857,7 +2196,7 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getmemorypool(const Array& params, bool fHelp)\n+Value CRPCgetmemorypool::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -1943,7 +2282,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n     }\n }\n \n-Value getblockhash(const Array& params, bool fHelp)\n+Value CRPCgetblockhash::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1961,7 +2300,7 @@ Value getblockhash(const Array& params, bool fHelp)\n     return pblockindex->phashBlock->GetHex();\n }\n \n-Value getblock(const Array& params, bool fHelp)\n+Value CRPCgetblock::actor(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1995,83 +2334,111 @@ Value getblock(const Array& params, bool fHelp)\n // Call Table\n //\n \n-pair<string, rpcfn_type> pCallTable[] =\n-{\n-    make_pair(\"help\",                   &help),\n-    make_pair(\"stop\",                   &stop),\n-    make_pair(\"getblockcount\",          &getblockcount),\n-    make_pair(\"getblocknumber\",         &getblocknumber),\n-    make_pair(\"getconnectioncount\",     &getconnectioncount),\n-    make_pair(\"getdifficulty\",          &getdifficulty),\n-    make_pair(\"getgenerate\",            &getgenerate),\n-    make_pair(\"setgenerate\",            &setgenerate),\n-    make_pair(\"gethashespersec\",        &gethashespersec),\n-    make_pair(\"getinfo\",                &getinfo),\n-    make_pair(\"getmininginfo\",          &getmininginfo),\n-    make_pair(\"getnewaddress\",          &getnewaddress),\n-    make_pair(\"getaccountaddress\",      &getaccountaddress),\n-    make_pair(\"setaccount\",             &setaccount),\n-    make_pair(\"getaccount\",             &getaccount),\n-    make_pair(\"getaddressesbyaccount\",  &getaddressesbyaccount),\n-    make_pair(\"sendtoaddress\",          &sendtoaddress),\n-    make_pair(\"getreceivedbyaddress\",   &getreceivedbyaddress),\n-    make_pair(\"getreceivedbyaccount\",   &getreceivedbyaccount),\n-    make_pair(\"listreceivedbyaddress\",  &listreceivedbyaddress),\n-    make_pair(\"listreceivedbyaccount\",  &listreceivedbyaccount),\n-    make_pair(\"backupwallet\",           &backupwallet),\n-    make_pair(\"keypoolrefill\",          &keypoolrefill),\n-    make_pair(\"walletpassphrase\",       &walletpassphrase),\n-    make_pair(\"walletpassphrasechange\", &walletpassphrasechange),\n-    make_pair(\"walletlock\",             &walletlock),\n-    make_pair(\"encryptwallet\",          &encryptwallet),\n-    make_pair(\"validateaddress\",        &validateaddress),\n-    make_pair(\"getbalance\",             &getbalance),\n-    make_pair(\"move\",                   &movecmd),\n-    make_pair(\"sendfrom\",               &sendfrom),\n-    make_pair(\"sendmany\",               &sendmany),\n-    make_pair(\"addmultisigaddress\",     &addmultisigaddress),\n-    make_pair(\"getblock\",               &getblock),\n-    make_pair(\"getblockhash\",           &getblockhash),\n-    make_pair(\"gettransaction\",         &gettransaction),\n-    make_pair(\"listtransactions\",       &listtransactions),\n-    make_pair(\"signmessage\",            &signmessage),\n-    make_pair(\"verifymessage\",          &verifymessage),\n-    make_pair(\"getwork\",                &getwork),\n-    make_pair(\"listaccounts\",           &listaccounts),\n-    make_pair(\"settxfee\",               &settxfee),\n-    make_pair(\"getmemorypool\",          &getmemorypool),\n-    make_pair(\"listsinceblock\",         &listsinceblock),\n-    make_pair(\"dumpprivkey\",            &dumpprivkey),\n-    make_pair(\"importprivkey\",          &importprivkey)\n-};\n-map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n-\n-string pAllowInSafeMode[] =\n-{\n-    \"help\",\n-    \"stop\",\n-    \"getblockcount\",\n-    \"getblocknumber\",  // deprecated\n-    \"getconnectioncount\",\n-    \"getdifficulty\",\n-    \"getgenerate\",\n-    \"setgenerate\",\n-    \"gethashespersec\",\n-    \"getinfo\",\n-    \"getmininginfo\",\n-    \"getnewaddress\",\n-    \"getaccountaddress\",\n-    \"getaccount\",\n-    \"getaddressesbyaccount\",\n-    \"backupwallet\",\n-    \"keypoolrefill\",\n-    \"walletpassphrase\",\n-    \"walletlock\",\n-    \"validateaddress\",\n-    \"getwork\",\n-    \"getmemorypool\",\n-};\n-set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));\n+map<string, CRPCCommand*> mapCommands;\n+\n+static void RegisterRPCCommands(void)\n+{\n+    CRPChelp *phelp = new CRPChelp();\n+    mapCommands[phelp->name] = phelp;\n+    CRPCstop *pstop = new CRPCstop();\n+    mapCommands[pstop->name] = pstop;\n+    CRPCgetblockcount *pgetblockcount = new CRPCgetblockcount();\n+    mapCommands[pgetblockcount->name] = pgetblockcount;\n+    CRPCgetblocknumber *pgetblocknumber = new CRPCgetblocknumber();\n+    mapCommands[pgetblocknumber->name] = pgetblocknumber;\n+    CRPCgetconnectioncount *pgetconnectioncount = new\n+    CRPCgetconnectioncount();\n+    mapCommands[pgetconnectioncount->name] = pgetconnectioncount;\n+    CRPCgetdifficulty *pgetdifficulty = new CRPCgetdifficulty();\n+    mapCommands[pgetdifficulty->name] = pgetdifficulty;\n+    CRPCgetgenerate *pgetgenerate = new CRPCgetgenerate();\n+    mapCommands[pgetgenerate->name] = pgetgenerate;\n+    CRPCsetgenerate *psetgenerate = new CRPCsetgenerate();\n+    mapCommands[psetgenerate->name] = psetgenerate;\n+    CRPCgethashespersec *pgethashespersec = new CRPCgethashespersec();\n+    mapCommands[pgethashespersec->name] = pgethashespersec;\n+    CRPCgetinfo *pgetinfo = new CRPCgetinfo();\n+    mapCommands[pgetinfo->name] = pgetinfo;\n+    CRPCgetmininginfo *pgetmininginfo = new CRPCgetmininginfo();\n+    mapCommands[pgetmininginfo->name] = pgetmininginfo;\n+    CRPCgetnewaddress *pgetnewaddress = new CRPCgetnewaddress();\n+    mapCommands[pgetnewaddress->name] = pgetnewaddress;\n+    CRPCgetaccountaddress *pgetaccountaddress = new CRPCgetaccountaddress();\n+    mapCommands[pgetaccountaddress->name] = pgetaccountaddress;\n+    CRPCsetaccount *psetaccount = new CRPCsetaccount();\n+    mapCommands[psetaccount->name] = psetaccount;\n+    CRPCgetaccount *pgetaccount = new CRPCgetaccount();\n+    mapCommands[pgetaccount->name] = pgetaccount;\n+    CRPCgetaddressesbyaccount *pgetaddressesbyaccount = new\n+    CRPCgetaddressesbyaccount();\n+    mapCommands[pgetaddressesbyaccount->name] = pgetaddressesbyaccount;\n+    CRPCsendtoaddress *psendtoaddress = new CRPCsendtoaddress();\n+    mapCommands[psendtoaddress->name] = psendtoaddress;\n+    CRPCgetreceivedbyaddress *pgetreceivedbyaddress = new\n+    CRPCgetreceivedbyaddress();\n+    mapCommands[pgetreceivedbyaddress->name] = pgetreceivedbyaddress;\n+    CRPCgetreceivedbyaccount *pgetreceivedbyaccount = new\n+    CRPCgetreceivedbyaccount();\n+    mapCommands[pgetreceivedbyaccount->name] = pgetreceivedbyaccount;\n+    CRPClistreceivedbyaddress *plistreceivedbyaddress = new\n+    CRPClistreceivedbyaddress();\n+    mapCommands[plistreceivedbyaddress->name] = plistreceivedbyaddress;\n+    CRPClistreceivedbyaccount *plistreceivedbyaccount = new\n+    CRPClistreceivedbyaccount();\n+    mapCommands[plistreceivedbyaccount->name] = plistreceivedbyaccount;\n+    CRPCbackupwallet *pbackupwallet = new CRPCbackupwallet();\n+    mapCommands[pbackupwallet->name] = pbackupwallet;\n+    CRPCkeypoolrefill *pkeypoolrefill = new CRPCkeypoolrefill();\n+    mapCommands[pkeypoolrefill->name] = pkeypoolrefill;\n+    CRPCwalletpassphrase *pwalletpassphrase = new CRPCwalletpassphrase();\n+    mapCommands[pwalletpassphrase->name] = pwalletpassphrase;\n+    CRPCwalletpassphrasechange *pwalletpassphrasechange = new\n+    CRPCwalletpassphrasechange();\n+    mapCommands[pwalletpassphrasechange->name] = pwalletpassphrasechange;\n+    CRPCwalletlock *pwalletlock = new CRPCwalletlock();\n+    mapCommands[pwalletlock->name] = pwalletlock;\n+    CRPCencryptwallet *pencryptwallet = new CRPCencryptwallet();\n+    mapCommands[pencryptwallet->name] = pencryptwallet;\n+    CRPCvalidateaddress *pvalidateaddress = new CRPCvalidateaddress();\n+    mapCommands[pvalidateaddress->name] = pvalidateaddress;\n+    CRPCgetbalance *pgetbalance = new CRPCgetbalance();\n+    mapCommands[pgetbalance->name] = pgetbalance;\n+    CRPCmove *pmove = new CRPCmove();\n+    mapCommands[pmove->name] = pmove;\n+    CRPCsendfrom *psendfrom = new CRPCsendfrom();\n+    mapCommands[psendfrom->name] = psendfrom;\n+    CRPCsendmany *psendmany = new CRPCsendmany();\n+    mapCommands[psendmany->name] = psendmany;\n+    CRPCaddmultisigaddress *paddmultisigaddress = new\n+    CRPCaddmultisigaddress();\n+    mapCommands[paddmultisigaddress->name] = paddmultisigaddress;\n+    CRPCgetblock *pgetblock = new CRPCgetblock();\n+    mapCommands[pgetblock->name] = pgetblock;\n+    CRPCgetblockhash *pgetblockhash = new CRPCgetblockhash();\n+    mapCommands[pgetblockhash->name] = pgetblockhash;\n+    CRPCgettransaction *pgettransaction = new CRPCgettransaction();\n+    mapCommands[pgettransaction->name] = pgettransaction;\n+    CRPClisttransactions *plisttransactions = new CRPClisttransactions();\n+    mapCommands[plisttransactions->name] = plisttransactions;\n+    CRPCsignmessage *psignmessage = new CRPCsignmessage();\n+    mapCommands[psignmessage->name] = psignmessage;\n+    CRPCverifymessage *pverifymessage = new CRPCverifymessage();\n+    mapCommands[pverifymessage->name] = pverifymessage;\n+    CRPCgetwork *pgetwork = new CRPCgetwork();\n+    mapCommands[pgetwork->name] = pgetwork;\n+    CRPClistaccounts *plistaccounts = new CRPClistaccounts();\n+    mapCommands[plistaccounts->name] = plistaccounts;\n+    CRPCsettxfee *psettxfee = new CRPCsettxfee();\n+    mapCommands[psettxfee->name] = psettxfee;\n+    CRPCgetmemorypool *pgetmemorypool = new CRPCgetmemorypool();\n+    mapCommands[pgetmemorypool->name] = pgetmemorypool;\n+    CRPClistsinceblock *plistsinceblock = new CRPClistsinceblock();\n+    mapCommands[plistsinceblock->name] = plistsinceblock;\n+    CRPCdumpprivkey *pdumpprivkey = new CRPCdumpprivkey();\n+    mapCommands[pdumpprivkey->name] = pdumpprivkey;\n+    CRPCimportprivkey *pimportprivkey = new CRPCimportprivkey();\n+    mapCommands[pimportprivkey->name] = pimportprivkey;\n+}\n \n \n \n@@ -2354,6 +2721,8 @@ void ThreadRPCServer2(void* parg)\n {\n     printf(\"ThreadRPCServer started\\n\");\n \n+    RegisterRPCCommands();\n+\n     strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     if (mapArgs[\"-rpcpassword\"] == \"\")\n     {\n@@ -2505,13 +2874,15 @@ void ThreadRPCServer2(void* parg)\n                 throw JSONRPCError(-32600, \"Params must be an array\");\n \n             // Find method\n-            map<string, rpcfn_type>::iterator mi = mapCallTable.find(strMethod);\n-            if (mi == mapCallTable.end())\n+            if (!mapCommands.count(strMethod))\n                 throw JSONRPCError(-32601, \"Method not found\");\n \n+            CRPCCommand *pcmd = mapCommands[strMethod];\n+\n             // Observe safe mode\n             string strWarning = GetWarnings(\"rpc\");\n-            if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") && !setAllowInSafeMode.count(strMethod))\n+            if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n+                !pcmd->okSafeMode)\n                 throw JSONRPCError(-2, string(\"Safe mode: \") + strWarning);\n \n             try\n@@ -2520,7 +2891,7 @@ void ThreadRPCServer2(void* parg)\n                 Value result;\n                 {\n                     LOCK2(cs_main, pwalletMain->cs_wallet);\n-                    result = (*(*mi).second)(params, false);\n+                    result = pcmd->actor(params, false);\n                 }\n \n                 // Send reply"
      }
    ]
  }
]