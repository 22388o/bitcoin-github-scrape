[
  {
    "sha": "9161fefe06b51aca11d1a65768deca217a1f6829",
    "node_id": "C_kwDOABII59oAKDkxNjFmZWZlMDZiNTFhY2ExMWQxYTY1NzY4ZGVjYTIxN2ExZjY4Mjk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-09-24T17:26:16Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-09-24T18:30:01Z"
      },
      "message": "refactor: Move CTxMemPoolEntry class to its own header\n\nThis commit nukes the policy/fees->mempool circular dependency.",
      "tree": {
        "sha": "231b1ce7a7e2188e4886c1c63f8baad974eb85f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/231b1ce7a7e2188e4886c1c63f8baad974eb85f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9161fefe06b51aca11d1a65768deca217a1f6829",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmFOGSkACgkQQQEIES5+\nqB+PGg//WkhKBjtDwwVayB+ACY5Ic23FlCzpp09Rns3ONr34hZeO+bojLoglxfFR\nkfgsI8jJvXeHUjRYSmomV2zD0VZkUTcE/TRFpSoPla5awHsmqjZl7sIf8TWDum6c\n+I5ZwAuiO5bba4i9RI9NNcXUwumoIRSafF5d2QlxlaxWJ/+EeVKxBFAaVq/F1uo5\ncMGHRLQpirKEhnMePTBH3rJds/BWkWqB0RBC7301g3GEIITq6WMsWK7BynH3N5Cs\nERgw4Xr8woPX/rH7qyAx2rwAHll9qgkqtI6kDNrt2TMNtdi1pB1Y4arPKFwBNf9k\nPJbXirTonX4jOjwafym1gXVJKLwz6FF4pe3EnLBjwkyIgliYPREAMhRIIYMw7wJr\nTCLHK9foGyMfUGfj/sRWxKXoOlfKP4k2EtRB2nbLvHd/5eTjHHckMtKxaw/yLfxj\np935lBHKlUDfP1eNfF+gSY6xA0r24/HqRefyv0+p2PtfoYo99BApxnMQeCOHnz4e\nS6qnMJvLRmHEBqGEm6zyTNPIE/QfXr58xtcX4XQfe3V/CJy+nnOgMu38+f0/RJOv\n1zLPD4K0dmq6lVgdbr89R+Ldn7bnMShyao6/GxYKT3eTECSRO3B5QQt7/KJS9YDO\n+ZmaZdqOAhrceHrSkGYDRWMPhtzL+LPQdy1UTVrH509wXOltzv0=\n=upRe\n-----END PGP SIGNATURE-----",
        "payload": "tree 231b1ce7a7e2188e4886c1c63f8baad974eb85f0\nparent 01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1632504376 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1632508201 +0300\n\nrefactor: Move CTxMemPoolEntry class to its own header\n\nThis commit nukes the policy/fees->mempool circular dependency.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9161fefe06b51aca11d1a65768deca217a1f6829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9161fefe06b51aca11d1a65768deca217a1f6829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9161fefe06b51aca11d1a65768deca217a1f6829/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd"
      }
    ],
    "stats": {
      "total": 378,
      "additions": 198,
      "deletions": 180
    },
    "files": [
      {
        "sha": "175e4877f70544deea3b5974aff2ed3e455defe8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -237,6 +237,7 @@ BITCOIN_CORE_H = \\\n   torcontrol.h \\\n   txdb.h \\\n   txmempool.h \\\n+  txmempool_entry.h \\\n   txorphanage.h \\\n   txrequest.h \\\n   undo.h \\"
      },
      {
        "sha": "559fd810790279d1c81cf313dbc54a947218547f",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -6,7 +6,7 @@\n #include <policy/policy.h>\n #include <test/util/setup_common.h>\n #include <txmempool.h>\n-\n+#include <txmempool_entry.h>\n \n static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {"
      },
      {
        "sha": "e5d0cae28f7d57d78db85d952ec7f2ef0dbe51a9",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -6,6 +6,7 @@\n #include <policy/policy.h>\n #include <test/util/setup_common.h>\n #include <txmempool.h>\n+#include <txmempool_entry.h>\n \n #include <vector>\n "
      },
      {
        "sha": "1ad0e9437ffe4546ea4a16842a30dcedacf0575b",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -5,6 +5,7 @@\n #include <bench/bench.h>\n #include <rpc/blockchain.h>\n #include <txmempool.h>\n+#include <txmempool_entry.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "1a8208660228f59f883a3acfdc1760f66477e929",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -37,6 +37,7 @@\n #include <sync.h>\n #include <timedata.h>\n #include <txmempool.h>\n+#include <txmempool_entry.h>\n #include <uint256.h>\n #include <univalue.h>\n #include <util/check.h>"
      },
      {
        "sha": "029ede76e2b4a5534ecd2e7e1e99c094225e4c7d",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -9,10 +9,12 @@\n #include <fs.h>\n #include <logging.h>\n #include <streams.h>\n-#include <txmempool.h>\n+#include <txmempool_entry.h>\n #include <util/serfloat.h>\n #include <util/system.h>\n \n+#include <cmath>\n+\n static const char* FEE_ESTIMATES_FILENAME = \"fee_estimates.dat\";\n \n static constexpr double INF_FEERATE = 1e99;"
      },
      {
        "sha": "b63b771594733c45ed64a73edbdd3c9229938ea8",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <policy/settings.h>\n #include <tinyformat.h>\n+#include <txmempool_entry.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n "
      },
      {
        "sha": "9a25f86e03d3c8e169d12a59c33e211fa9b62ab9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -34,6 +34,7 @@\n #include <sync.h>\n #include <txdb.h>\n #include <txmempool.h>\n+#include <txmempool_entry.h>\n #include <undo.h>\n #include <util/strencodings.h>\n #include <util/string.h>"
      },
      {
        "sha": "d20fc2aa39c1a7762fb2fcb41b5392efe8f365df",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 55,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -12,6 +12,7 @@\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <reverse_iterator.h>\n+#include <txmempool_entry.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n #include <util/time.h>\n@@ -21,41 +22,6 @@\n #include <cmath>\n #include <optional>\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& tx, CAmount fee,\n-                                 int64_t time, unsigned int entry_height,\n-                                 bool spends_coinbase, int64_t sigops_cost, LockPoints lp)\n-    : tx{tx},\n-      nFee{fee},\n-      nTxWeight(GetTransactionWeight(*tx)),\n-      nUsageSize{RecursiveDynamicUsage(tx)},\n-      nTime{time},\n-      entryHeight{entry_height},\n-      spendsCoinbase{spends_coinbase},\n-      sigOpCost{sigops_cost},\n-      lockPoints{lp},\n-      nSizeWithDescendants{GetTxSize()},\n-      nModFeesWithDescendants{nFee},\n-      nSizeWithAncestors{GetTxSize()},\n-      nModFeesWithAncestors{nFee},\n-      nSigOpCostWithAncestors{sigOpCost} {}\n-\n-void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n-{\n-    nModFeesWithDescendants += newFeeDelta - feeDelta;\n-    nModFeesWithAncestors += newFeeDelta - feeDelta;\n-    feeDelta = newFeeDelta;\n-}\n-\n-void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n-{\n-    lockPoints = lp;\n-}\n-\n-size_t CTxMemPoolEntry::GetTxSize() const\n-{\n-    return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n-}\n-\n // Update the given tx for any in-mempool descendants.\n // Assumes that CTxMemPool::m_children is correct for the given tx and all\n // descendants.\n@@ -371,26 +337,6 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n     }\n }\n \n-void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n-{\n-    nSizeWithDescendants += modifySize;\n-    assert(int64_t(nSizeWithDescendants) > 0);\n-    nModFeesWithDescendants += modifyFee;\n-    nCountWithDescendants += modifyCount;\n-    assert(int64_t(nCountWithDescendants) > 0);\n-}\n-\n-void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n-{\n-    nSizeWithAncestors += modifySize;\n-    assert(int64_t(nSizeWithAncestors) > 0);\n-    nModFeesWithAncestors += modifyFee;\n-    nCountWithAncestors += modifyCount;\n-    assert(int64_t(nCountWithAncestors) > 0);\n-    nSigOpCostWithAncestors += modifySigOps;\n-    assert(int(nSigOpCostWithAncestors) >= 0);\n-}\n-\n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator, int check_ratio)\n     : m_check_ratio(check_ratio), minerPolicyEstimator(estimator)\n {"
      },
      {
        "sha": "5f68f5157e78e966f94ae7321945266089e3c604",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 122,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -22,6 +22,7 @@\n #include <primitives/transaction.h>\n #include <random.h>\n #include <sync.h>\n+#include <txmempool_entry.h>\n #include <util/epochguard.h>\n #include <util/hasher.h>\n \n@@ -37,128 +38,6 @@ extern RecursiveMutex cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n-struct LockPoints {\n-    // Will be set to the blockchain height and median time past\n-    // values that would be necessary to satisfy all relative locktime\n-    // constraints (BIP68) of this tx given our view of block chain history\n-    int height{0};\n-    int64_t time{0};\n-    // As long as the current chain descends from the highest height block\n-    // containing one of the inputs used in the calculation, then the cached\n-    // values are still valid even after a reorg.\n-    CBlockIndex* maxInputBlock{nullptr};\n-};\n-\n-struct CompareIteratorByHash {\n-    // SFINAE for T where T is either a pointer type (e.g., a txiter) or a reference_wrapper<T>\n-    // (e.g. a wrapped CTxMemPoolEntry&)\n-    template <typename T>\n-    bool operator()(const std::reference_wrapper<T>& a, const std::reference_wrapper<T>& b) const\n-    {\n-        return a.get().GetTx().GetHash() < b.get().GetTx().GetHash();\n-    }\n-    template <typename T>\n-    bool operator()(const T& a, const T& b) const\n-    {\n-        return a->GetTx().GetHash() < b->GetTx().GetHash();\n-    }\n-};\n-\n-/** \\class CTxMemPoolEntry\n- *\n- * CTxMemPoolEntry stores data about the corresponding transaction, as well\n- * as data about all in-mempool transactions that depend on the transaction\n- * (\"descendant\" transactions).\n- *\n- * When a new entry is added to the mempool, we update the descendant state\n- * (nCountWithDescendants, nSizeWithDescendants, and nModFeesWithDescendants) for\n- * all ancestors of the newly added transaction.\n- *\n- */\n-\n-class CTxMemPoolEntry\n-{\n-public:\n-    typedef std::reference_wrapper<const CTxMemPoolEntry> CTxMemPoolEntryRef;\n-    // two aliases, should the types ever diverge\n-    typedef std::set<CTxMemPoolEntryRef, CompareIteratorByHash> Parents;\n-    typedef std::set<CTxMemPoolEntryRef, CompareIteratorByHash> Children;\n-\n-private:\n-    const CTransactionRef tx;\n-    mutable Parents m_parents;\n-    mutable Children m_children;\n-    const CAmount nFee;             //!< Cached to avoid expensive parent-transaction lookups\n-    const size_t nTxWeight;         //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n-    const size_t nUsageSize;        //!< ... and total memory usage\n-    const int64_t nTime;            //!< Local time when entering the mempool\n-    const unsigned int entryHeight; //!< Chain height when entering the mempool\n-    const bool spendsCoinbase;      //!< keep track of transactions that spend a coinbase\n-    const int64_t sigOpCost;        //!< Total sigop cost\n-    int64_t feeDelta{0};            //!< Used for determining the priority of the transaction for mining in a block\n-    LockPoints lockPoints;     //!< Track the height and time at which tx was final\n-\n-    // Information about descendants of this transaction that are in the\n-    // mempool; if we remove this transaction we must remove all of these\n-    // descendants as well.\n-    uint64_t nCountWithDescendants{1}; //!< number of descendant transactions\n-    uint64_t nSizeWithDescendants;   //!< ... and size\n-    CAmount nModFeesWithDescendants; //!< ... and total fees (all including us)\n-\n-    // Analogous statistics for ancestor transactions\n-    uint64_t nCountWithAncestors{1};\n-    uint64_t nSizeWithAncestors;\n-    CAmount nModFeesWithAncestors;\n-    int64_t nSigOpCostWithAncestors;\n-\n-public:\n-    CTxMemPoolEntry(const CTransactionRef& tx, CAmount fee,\n-                    int64_t time, unsigned int entry_height,\n-                    bool spends_coinbase,\n-                    int64_t sigops_cost, LockPoints lp);\n-\n-    const CTransaction& GetTx() const { return *this->tx; }\n-    CTransactionRef GetSharedTx() const { return this->tx; }\n-    const CAmount& GetFee() const { return nFee; }\n-    size_t GetTxSize() const;\n-    size_t GetTxWeight() const { return nTxWeight; }\n-    std::chrono::seconds GetTime() const { return std::chrono::seconds{nTime}; }\n-    unsigned int GetHeight() const { return entryHeight; }\n-    int64_t GetSigOpCost() const { return sigOpCost; }\n-    int64_t GetModifiedFee() const { return nFee + feeDelta; }\n-    size_t DynamicMemoryUsage() const { return nUsageSize; }\n-    const LockPoints& GetLockPoints() const { return lockPoints; }\n-\n-    // Adjusts the descendant state.\n-    void UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n-    // Adjusts the ancestor state\n-    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps);\n-    // Updates the fee delta used for mining priority score, and the\n-    // modified fees with descendants.\n-    void UpdateFeeDelta(int64_t feeDelta);\n-    // Update the LockPoints after a reorg\n-    void UpdateLockPoints(const LockPoints& lp);\n-\n-    uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n-    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n-    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }\n-\n-    bool GetSpendsCoinbase() const { return spendsCoinbase; }\n-\n-    uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }\n-    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n-    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n-    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n-\n-    const Parents& GetMemPoolParentsConst() const { return m_parents; }\n-    const Children& GetMemPoolChildrenConst() const { return m_children; }\n-    Parents& GetMemPoolParents() const { return m_parents; }\n-    Children& GetMemPoolChildren() const { return m_children; }\n-\n-    mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n-    mutable Epoch::Marker m_epoch_marker; //!< epoch when last touched, useful for graph algorithms\n-};\n-\n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n struct update_descendant_state\n {"
      },
      {
        "sha": "079822708b2da11998b4360823ceb00261361fc8",
        "filename": "src/txmempool_entry.h",
        "status": "added",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/txmempool_entry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/txmempool_entry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool_entry.h?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2009-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXMEMPOOL_ENTRY_H\n+#define BITCOIN_TXMEMPOOL_ENTRY_H\n+\n+#include <amount.h>\n+#include <consensus/validation.h>\n+#include <core_memusage.h>\n+#include <policy/settings.h>\n+#include <primitives/transaction.h>\n+#include <util/epochguard.h>\n+\n+#include <chrono>\n+\n+class CBlockIndex;\n+\n+struct LockPoints {\n+    // Will be set to the blockchain height and median time past\n+    // values that would be necessary to satisfy all relative locktime\n+    // constraints (BIP68) of this tx given our view of block chain history\n+    int height{0};\n+    int64_t time{0};\n+    // As long as the current chain descends from the highest height block\n+    // containing one of the inputs used in the calculation, then the cached\n+    // values are still valid even after a reorg.\n+    CBlockIndex* maxInputBlock{nullptr};\n+};\n+\n+struct CompareIteratorByHash {\n+    // SFINAE for T where T is either a pointer type (e.g., a txiter) or a reference_wrapper<T>\n+    // (e.g. a wrapped CTxMemPoolEntry&)\n+    template <typename T>\n+    bool operator()(const std::reference_wrapper<T>& a, const std::reference_wrapper<T>& b) const\n+    {\n+        return a.get().GetTx().GetHash() < b.get().GetTx().GetHash();\n+    }\n+    template <typename T>\n+    bool operator()(const T& a, const T& b) const\n+    {\n+        return a->GetTx().GetHash() < b->GetTx().GetHash();\n+    }\n+};\n+\n+/** \\class CTxMemPoolEntry\n+ *\n+ * CTxMemPoolEntry stores data about the corresponding transaction, as well\n+ * as data about all in-mempool transactions that depend on the transaction\n+ * (\"descendant\" transactions).\n+ *\n+ * When a new entry is added to the mempool, we update the descendant state\n+ * (nCountWithDescendants, nSizeWithDescendants, and nModFeesWithDescendants) for\n+ * all ancestors of the newly added transaction.\n+ *\n+ */\n+\n+class CTxMemPoolEntry\n+{\n+public:\n+    typedef std::reference_wrapper<const CTxMemPoolEntry> CTxMemPoolEntryRef;\n+    // two aliases, should the types ever diverge\n+    typedef std::set<CTxMemPoolEntryRef, CompareIteratorByHash> Parents;\n+    typedef std::set<CTxMemPoolEntryRef, CompareIteratorByHash> Children;\n+\n+private:\n+    const CTransactionRef tx;\n+    mutable Parents m_parents;\n+    mutable Children m_children;\n+    const CAmount nFee;             //!< Cached to avoid expensive parent-transaction lookups\n+    const size_t nTxWeight;         //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n+    const size_t nUsageSize;        //!< ... and total memory usage\n+    const int64_t nTime;            //!< Local time when entering the mempool\n+    const unsigned int entryHeight; //!< Chain height when entering the mempool\n+    const bool spendsCoinbase;      //!< keep track of transactions that spend a coinbase\n+    const int64_t sigOpCost;        //!< Total sigop cost\n+    int64_t feeDelta{0};            //!< Used for determining the priority of the transaction for mining in a block\n+    LockPoints lockPoints;     //!< Track the height and time at which tx was final\n+\n+    // Information about descendants of this transaction that are in the\n+    // mempool; if we remove this transaction we must remove all of these\n+    // descendants as well.\n+    uint64_t nCountWithDescendants{1}; //!< number of descendant transactions\n+    uint64_t nSizeWithDescendants;   //!< ... and size\n+    CAmount nModFeesWithDescendants; //!< ... and total fees (all including us)\n+\n+    // Analogous statistics for ancestor transactions\n+    uint64_t nCountWithAncestors{1};\n+    uint64_t nSizeWithAncestors;\n+    CAmount nModFeesWithAncestors;\n+    int64_t nSigOpCostWithAncestors;\n+\n+public:\n+    CTxMemPoolEntry(const CTransactionRef& tx, CAmount fee,\n+                    int64_t time, unsigned int entry_height,\n+                    bool spends_coinbase, int64_t sigops_cost, LockPoints lp)\n+        : tx{tx},\n+          nFee{fee},\n+          nTxWeight(GetTransactionWeight(*tx)),\n+          nUsageSize{RecursiveDynamicUsage(tx)},\n+          nTime{time},\n+          entryHeight{entry_height},\n+          spendsCoinbase{spends_coinbase},\n+          sigOpCost{sigops_cost},\n+          lockPoints{lp},\n+          nSizeWithDescendants{GetTxSize()},\n+          nModFeesWithDescendants{nFee},\n+          nSizeWithAncestors{GetTxSize()},\n+          nModFeesWithAncestors{nFee},\n+          nSigOpCostWithAncestors{sigOpCost} {}\n+\n+    const CTransaction& GetTx() const { return *this->tx; }\n+    CTransactionRef GetSharedTx() const { return this->tx; }\n+    const CAmount& GetFee() const { return nFee; }\n+    size_t GetTxSize() const\n+    {\n+        return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n+    }\n+    size_t GetTxWeight() const { return nTxWeight; }\n+    std::chrono::seconds GetTime() const { return std::chrono::seconds{nTime}; }\n+    unsigned int GetHeight() const { return entryHeight; }\n+    int64_t GetSigOpCost() const { return sigOpCost; }\n+    int64_t GetModifiedFee() const { return nFee + feeDelta; }\n+    size_t DynamicMemoryUsage() const { return nUsageSize; }\n+    const LockPoints& GetLockPoints() const { return lockPoints; }\n+\n+    // Adjusts the descendant state.\n+    void UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n+    {\n+        nSizeWithDescendants += modifySize;\n+        assert(int64_t(nSizeWithDescendants) > 0);\n+        nModFeesWithDescendants += modifyFee;\n+        nCountWithDescendants += modifyCount;\n+        assert(int64_t(nCountWithDescendants) > 0);\n+    }\n+\n+    // Adjusts the ancestor state\n+    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n+    {\n+        nSizeWithAncestors += modifySize;\n+        assert(int64_t(nSizeWithAncestors) > 0);\n+        nModFeesWithAncestors += modifyFee;\n+        nCountWithAncestors += modifyCount;\n+        assert(int64_t(nCountWithAncestors) > 0);\n+        nSigOpCostWithAncestors += modifySigOps;\n+        assert(int(nSigOpCostWithAncestors) >= 0);\n+    }\n+\n+    // Updates the fee delta used for mining priority score, and the\n+    // modified fees with descendants.\n+    void UpdateFeeDelta(int64_t newFeeDelta)\n+    {\n+        nModFeesWithDescendants += newFeeDelta - feeDelta;\n+        nModFeesWithAncestors += newFeeDelta - feeDelta;\n+        feeDelta = newFeeDelta;\n+    }\n+\n+    // Update the LockPoints after a reorg\n+    void UpdateLockPoints(const LockPoints& lp)\n+    {\n+        lockPoints = lp;\n+    }\n+\n+    uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n+    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n+    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }\n+\n+    bool GetSpendsCoinbase() const { return spendsCoinbase; }\n+\n+    uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }\n+    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n+    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n+    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n+\n+    const Parents& GetMemPoolParentsConst() const { return m_parents; }\n+    const Children& GetMemPoolChildrenConst() const { return m_children; }\n+    Parents& GetMemPoolParents() const { return m_parents; }\n+    Children& GetMemPoolChildren() const { return m_children; }\n+\n+    mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+    mutable Epoch::Marker m_epoch_marker; //!< epoch when last touched, useful for graph algorithms\n+};\n+#endif // BITCOIN_TXMEMPOOL_ENTRY_H"
      },
      {
        "sha": "6425eeba5789ea057f4a348b4924f97ae4902118",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -41,6 +41,7 @@\n #include <tinyformat.h>\n #include <txdb.h>\n #include <txmempool.h>\n+#include <txmempool_entry.h>\n #include <uint256.h>\n #include <undo.h>\n #include <util/check.h> // For NDEBUG compile time check"
      },
      {
        "sha": "27a01008d9651fc49b65123144167639647058d0",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -14,7 +14,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"index/blockfilterindex -> node/blockstorage -> validation -> index/blockfilterindex\"\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n-    \"policy/fees -> txmempool -> policy/fees\"\n     \"policy/rbf -> txmempool -> validation -> policy/rbf\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/recentrequeststablemodel -> qt/walletmodel -> qt/recentrequeststablemodel\""
      },
      {
        "sha": "f48f9f8b68b25c607778e7fccb63a4d8f712e71c",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9161fefe06b51aca11d1a65768deca217a1f6829/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9161fefe06b51aca11d1a65768deca217a1f6829/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=9161fefe06b51aca11d1a65768deca217a1f6829",
        "patch": "@@ -40,6 +40,7 @@ unsigned-integer-overflow:pubkey.h\n unsigned-integer-overflow:script/interpreter.cpp\n unsigned-integer-overflow:stl_bvector.h\n unsigned-integer-overflow:txmempool.cpp\n+unsigned-integer-overflow:txmempool_entry.h\n unsigned-integer-overflow:util/strencodings.cpp\n unsigned-integer-overflow:validation.cpp\n implicit-integer-sign-change:*/include/boost/\n@@ -74,6 +75,7 @@ implicit-integer-sign-change:test/skiplist_tests.cpp\n implicit-integer-sign-change:test/streams_tests.cpp\n implicit-integer-sign-change:test/transaction_tests.cpp\n implicit-integer-sign-change:txmempool.cpp\n+implicit-integer-sign-change:txmempool_entry.h\n implicit-integer-sign-change:util/strencodings.cpp\n implicit-integer-sign-change:util/strencodings.h\n implicit-integer-sign-change:validation.cpp"
      }
    ]
  },
  {
    "sha": "77438e18478ca0a06708f3e988fdb31567bb76e0",
    "node_id": "C_kwDOABII59oAKDc3NDM4ZTE4NDc4Y2EwYTA2NzA4ZjNlOTg4ZmRiMzE1NjdiYjc2ZTA",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-09-24T18:39:25Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-09-24T18:39:25Z"
      },
      "message": "trivial: Fix comment alignment according to clang-format",
      "tree": {
        "sha": "b22be806e3db39ea1556ac6e0a0fd12e5be1ae36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b22be806e3db39ea1556ac6e0a0fd12e5be1ae36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77438e18478ca0a06708f3e988fdb31567bb76e0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmFOG10ACgkQQQEIES5+\nqB80Gw/+LI3AnfhFx0b+gV/Sqdzs8LVBE9e0LpBiEJX04yDUv7YLuwfDgrnAtGtR\nD0w/kDW/efD3cAXgL6es9PPURnMOmddxgR482SHQEaSMrnmW791fxmYH0rqvvuEH\nscm50N1cV81/u3743+UPJfi1/uK7FHYl8xcC00l687LPdD5HUEiUtlu38tphuJGv\nKKIAqFbQIUmZtQ/h4l3tpYteDDwG9BK8bsSLbgZygc8lyuzlvZ06ssSYIEV9vsYH\ns5gjMlcjyahVeuSExnjXjpz6+jSM2vuAhklhVehKBTzrkHlZ2btcMeCdLy8fGqA0\nNc01rORarTH+pxH9PtHvFn36P/7UEmsdGFaNBE7XgP/rYEgoUD9sZEyti64eDPfw\nGeMTrZYG2n/AHE9gtiYl4KNu0vlHeu1VK62sIZvGjpDiUKwCC/NuAMmMr58cLC9x\noVyNqtBIQYd3rHLApb+twrHC2hd7ztMG140D9Pz77sLE69OmBtE1aC3svWkgj2Xn\nSd706mBtCwn9dVJfUIf9Qv9AZSssNxYDJyatjEfICStQP0CVevHlp8mVkGPRXhrg\nKdeOSeYBku9gKXaUqC0ebuK3eBt94lI3v2zl8kT29EhE6EmG64NY4AVMiE7i/Tno\nDS/c3ZfNVtvP7oBa7UlMKoy4KfjvAnV0dbCzHkRUX3QlQR2hvsk=\n=YIug\n-----END PGP SIGNATURE-----",
        "payload": "tree b22be806e3db39ea1556ac6e0a0fd12e5be1ae36\nparent 9161fefe06b51aca11d1a65768deca217a1f6829\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1632508765 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1632508765 +0300\n\ntrivial: Fix comment alignment according to clang-format\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77438e18478ca0a06708f3e988fdb31567bb76e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77438e18478ca0a06708f3e988fdb31567bb76e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77438e18478ca0a06708f3e988fdb31567bb76e0/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9161fefe06b51aca11d1a65768deca217a1f6829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9161fefe06b51aca11d1a65768deca217a1f6829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9161fefe06b51aca11d1a65768deca217a1f6829"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b3aebb55849026c3fbace6b89de156769fe7ec96",
        "filename": "src/txmempool_entry.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77438e18478ca0a06708f3e988fdb31567bb76e0/src/txmempool_entry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77438e18478ca0a06708f3e988fdb31567bb76e0/src/txmempool_entry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool_entry.h?ref=77438e18478ca0a06708f3e988fdb31567bb76e0",
        "patch": "@@ -75,14 +75,14 @@ class CTxMemPoolEntry\n     const bool spendsCoinbase;      //!< keep track of transactions that spend a coinbase\n     const int64_t sigOpCost;        //!< Total sigop cost\n     int64_t feeDelta{0};            //!< Used for determining the priority of the transaction for mining in a block\n-    LockPoints lockPoints;     //!< Track the height and time at which tx was final\n+    LockPoints lockPoints;          //!< Track the height and time at which tx was final\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n     // descendants as well.\n     uint64_t nCountWithDescendants{1}; //!< number of descendant transactions\n-    uint64_t nSizeWithDescendants;   //!< ... and size\n-    CAmount nModFeesWithDescendants; //!< ... and total fees (all including us)\n+    uint64_t nSizeWithDescendants;     //!< ... and size\n+    CAmount nModFeesWithDescendants;   //!< ... and total fees (all including us)\n \n     // Analogous statistics for ancestor transactions\n     uint64_t nCountWithAncestors{1};\n@@ -177,7 +177,7 @@ class CTxMemPoolEntry\n     Parents& GetMemPoolParents() const { return m_parents; }\n     Children& GetMemPoolChildren() const { return m_children; }\n \n-    mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+    mutable size_t vTxHashesIdx;          //!< Index in mempool's vTxHashes\n     mutable Epoch::Marker m_epoch_marker; //!< epoch when last touched, useful for graph algorithms\n };\n #endif // BITCOIN_TXMEMPOOL_ENTRY_H"
      }
    ]
  }
]