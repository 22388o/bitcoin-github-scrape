hebasto,2019-12-21 17:09:56,"Related discussion:\n- https://github.com/bitcoin/bitcoin/pull/15638#discussion_r268718912 by @ryanofsky \n- https://github.com/bitcoin/bitcoin/pull/13949#issuecomment-476322427 by @MarcoFalke ",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568196511,568196511,
DrahtBot,2019-12-21 19:04:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23211](https://github.com/bitcoin/bitcoin/pull/23211) (refactor: move `update_*` structs from txmempool.h to .cpp file b",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568204036,568204036,
promag,2019-12-21 19:30:57,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568205753,568205753,
practicalswift,2019-12-22 12:39:36,Concept ACK: thanks for nuking circular dependencies,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568258501,568258501,
hebasto,2019-12-22 12:47:11,"@promag \n> I'd squash 1st and 2nd commits. 3rd commit is unrelated but is a nice cleanup.\n\nDone.\n",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568258976,568258976,
hebasto,2019-12-22 13:16:39,"~I stumble on UB sanitizer. How could a move-only change cause an [error](https://travis-ci.org/bitcoin/bitcoin/jobs/628353183)?~\n\n~Is this a side effect of circular dependencies resolving?~ nm",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568261039,568261039,
hebasto,2019-12-22 14:42:35,Travis is happy now ;),https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-568269159,568269159,
JeremyRubin,2020-01-17 15:32:13,"Generally agree with this change, I've thought about doing it myself a few times myself. It also seems to be a good alternative to the observer pattern mentioned as we change far fewer things to get the same circular dependency break. So a slight code review ACK that this seems correct.\n\nSlightly short of concept ack for a few reasons:\n\n1) Needs a simple benchmark to show that we haven't m",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-575673666,575673666,
hebasto,2020-01-22 12:07:48,"@JeremyRubin \n> ... to show that we haven't made functions calling the CTxMemPoolEntry's non-header functions slower because they are no longer within the same compilation unit\n\nHow is it possible?",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-577151183,577151183,
JeremyRubin,2020-01-22 17:45:26,"It's annoying, but because these functions were previously in the same translation unit then it's possible they can get completely inlined, but now they're in separate units they will definitely trigger function calls.\n\nBecause these updater functions get called in hot loops you have possibly replaced something optimized previously with something slow.\n\nThis matters a bit because we may ex",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-577303749,577303749,
hebasto,2020-01-24 07:47:49,"@JeremyRubin \n> It's annoying, but because these functions were previously in the same translation unit then it's possible they can get completely inlined, but now they're in separate units they will definitely trigger function calls.\n\nIIUC, making function inline depends on compiler and its optimization settings. The `bitcoind` compiled with GCC 7.4.0 was checked with `nm` tool, and `CTxMem",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-578026970,578026970,
JeremyRubin,2020-01-24 18:27:57,"Correct; this is compiler dependent behavior. But we happen to compile with optimizations enabled for release builds -- not sure if we do different flags for non release builds (I think it's the same?).\n\nPresence of the symbols doesn't prove that they aren't also inlined. An inline function is a hint to inline, not a mandate, and the function can be either called or or inlined depending on con",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-578245894,578245894,
hebasto,2020-01-24 18:35:13,"> Presence of the symbols doesn't prove that they aren't also inlined. An inline function is a hint to inline, not a mandate, and the function can be either called or or inlined depending on context, you would need to check the actual call sites.\n\nI mean if a function is inlined in all call sites, there is no dedicated assembly code and no symbol. Could a compiler inline a function in some cal",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-578248440,578248440,
gmaxwell,2020-01-24 18:54:13,"Unless the symbol isn't exported there will be a separate copy of it included in the object for external callers. That extra copy will persist in the final binary so long as there are any non-inlined callers.\n\nFor a quick check, just look at the size of all functions in dump of the binary. If they're all the same size then it's very likely that all you did was move things around.",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-578255211,578255211,
sipa,2020-01-24 19:19:10,"In C++, `inline` is more than a hint, and actually has a meaning: it's a function that may be defined (and exported from) multiple translation units without conflicting with itself (it's only well defined if all definitions are identical, though). This is what allows having code in .h files. In practice it means the linker will merge all the definitions into one symbol.",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-578264117,578264117,
JeremyRubin,2020-01-24 23:20:19,"I think what @gmaxwell says is correct with my question.\n\n@sipa that sounds correct. These weren't previously marked inline either, so I guess what I meant to capture is that *not* marking inline is a hint *not* to inline but *not* a mandate to *not* inline. E.g., if some function F is called by G, F may or may not be inlined depending on the compiler if they are in the same translation unit, ",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-578340006,578340006,
JeremyRubin,2020-01-28 21:47:00,"I think if you were to just put all the mempool entry functions into the header I wouldn't have any concerns. It doesn't seem to me like there's a really strong reason for them to be separate, and any time you change the initializers you've likely also changed the class definition so it doesn't seem like it would trigger recompilation explosions.\n\nIt also (maybe I'm wrong here) looks like you ",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-579472172,579472172,
hebasto,2020-01-29 20:26:34,"@JeremyRubin Thank you for your review.\n\n> I think if you were to just put all the mempool entry functions into the header I wouldn't have any concerns.\n\nDone.\n\n> It also (maybe I'm wrong here) looks like you have some unneeded dependencies in the cpp (e.g., memusage), so that can be pruned out to keep the header small.\n\nAll `#include`s are checked again. They all are needed, e.g.,",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-579943665,579943665,
hebasto,2020-01-30 16:53:23,Rebased after #17261 has been merged.,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-580348874,580348874,
MarcoFalke,2020-01-30 19:38:20,"Looking at the (currently) 9 conflicts, maybe it makes sense to postpone this changeset until after some of the other user-facing/features got merged to the mempool code?",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-580419545,580419545,
hebasto,2020-02-03 19:32:30,Rebased after #17925 has been merged.,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-581579799,581579799,
Empact,2020-02-20 20:51:19,"ACK https://github.com/bitcoin/bitcoin/pull/17786/commits/19f6bf826d890cc78bd4a19f10dfbf59dd58c10d\n\nA few possible refinements:\nhttps://github.com/hebasto/bitcoin/compare/20191221-mempool-circ-dep...Empact:2020-02-mempool-circ-dep",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-589302158,589302158,
hebasto,2020-04-11 16:54:29,"Updated 19f6bf826d890cc78bd4a19f10dfbf59dd58c10d  -> 287b930a18921716bdf6961350959804042b46b0 ([pr17786.07](https://github.com/hebasto/bitcoin/commits/pr17786.07) -> [pr17786.08](https://github.com/hebasto/bitcoin/commits/pr17786.08), [diff](https://github.com/hebasto/bitcoin/compare/pr17786.07..pr17786.08)):\n\n- implemented @Empact's [suggestions](https://github.com/bitcoin/bitcoin/pull/17786#",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-612464141,612464141,
Empact,2020-04-11 21:20:26,Re-ACK https://github.com/bitcoin/bitcoin/pull/17786/commits/287b930a18921716bdf6961350959804042b46b0 - reviewed diff particularly changed lines as identified by git. Didn't audit the includes.,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-612515847,612515847,
hebasto,2020-07-03 07:01:07,Rebased 287b930a18921716bdf6961350959804042b46b0 -> 219324ca4fe0d466c9007c30543c88444dec3569 ([pr17786.08](https://github.com/hebasto/bitcoin/commits/pr17786.08) -> [pr17786.09](https://github.com/hebasto/bitcoin/commits/pr17786.09)) due to the conflict with #19331.,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-653387539,653387539,
hebasto,2020-09-07 12:14:40,Rebased 219324ca4fe0d466c9007c30543c88444dec3569 -> 9782a8ee773a59667424353de047fd6bb9c3cb5d ([pr17786.09](https://github.com/hebasto/bitcoin/commits/pr17786.09) -> [pr17786.10](https://github.com/hebasto/bitcoin/commits/pr17786.10)) due to the conflict with #19478.,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-688286559,688286559,
hebasto,2020-09-07 18:30:57,@promag @empact Mind re-reviewing?,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-688466974,688466974,
Empact,2020-09-07 23:36:44,Code Review ACK https://github.com/bitcoin/bitcoin/pull/17786/commits/9782a8ee773a59667424353de047fd6bb9c3cb5d,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-688541456,688541456,
MarcoFalke,2021-09-21 14:45:25,Why the close?,https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-924059983,924059983,
hebasto,2021-09-24 18:44:41,"@MarcoFalke \n> Why the close?\n\nReopened and rebased 9782a8ee773a59667424353de047fd6bb9c3cb5d -> 77438e18478ca0a06708f3e988fdb31567bb76e0 ([pr17786.10](https://github.com/hebasto/bitcoin/commits/pr17786.10) -> [pr17786.11](https://github.com/hebasto/bitcoin/commits/pr17786.11)) on top of the merged #23054 and the recent CI changes.\n\n",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-926846822,926846822,
DrahtBot,2021-10-25 14:21:15,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-950980398,950980398,
JeremyRubin,2020-09-07 18:26:46,nit: slight preference to do all initialization in the constructor (for consistency/minimal diff),https://github.com/bitcoin/bitcoin/pull/17786#discussion_r484540818,484540818,src/txmempool_entry.h
MarcoFalke,2021-09-25 07:49:46,"I think it makes sense to keep this in the cpp file, to keep the header free of unneeded includes.",https://github.com/bitcoin/bitcoin/pull/17786#discussion_r716007613,716007613,src/txmempool_entry.h
hebasto,2021-09-25 07:53:24,"There [were](https://github.com/bitcoin/bitcoin/pull/17786#issuecomment-579472172) concerns from @JeremyRubin:\n> I think if you were to just put all the mempool entry functions into the header I wouldn't have any concerns.",https://github.com/bitcoin/bitcoin/pull/17786#discussion_r716007966,716007966,src/txmempool_entry.h
