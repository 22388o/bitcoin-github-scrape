[
  {
    "sha": "b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWEzNmIxNWJmZjZhNmZjMGJiN2Y4YmY2ZTczNjFkYWMzOTE5ZTc4",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-10T06:40:01Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-10T06:51:55Z"
      },
      "message": "Make comments in /src/script doxygen compatible",
      "tree": {
        "sha": "634c74ffe9f7240938d1079c0106a2e2e82ddbc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/634c74ffe9f7240938d1079c0106a2e2e82ddbc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b7c86616006a5047ae07085e26c40e3606f60c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b7c86616006a5047ae07085e26c40e3606f60c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b7c86616006a5047ae07085e26c40e3606f60c5"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 85,
      "deletions": 63
    },
    "files": [
      {
        "sha": "5fda6248c2eefc36d91c2437461c7fb5cb8abd0f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -41,10 +41,10 @@ bool CastToBool(const valtype& vch)\n     return false;\n }\n \n-//\n-// Script is a stack machine (like Forth) that evaluates a predicate\n-// returning a bool indicating valid or not.  There are no loops.\n-//\n+/**\n+ * Script is a stack machine (like Forth) that evaluates a predicate\n+ * returning a bool indicating valid or not.  There are no loops.\n+ */\n #define stacktop(i)  (stack.at(stack.size()+(i)))\n #define altstacktop(i)  (altstack.at(altstack.size()+(i)))\n static inline void popstack(vector<valtype>& stack)\n@@ -69,12 +69,16 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n     return true;\n }\n \n+/**\n+ * A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n+ * Where R and S are not negative (their first byte has its highest bit not set), and not\n+ * excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n+ * in which case a single 0 byte is necessary and even required).\n+ * \n+ * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+ */\n bool static IsDERSignature(const valtype &vchSig) {\n-    // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n-    // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n-    // Where R and S are not negative (their first byte has its highest bit not set), and not\n-    // excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n-    // in which case a single 0 byte is necessary and even required).\n+\n     if (vchSig.size() < 9)\n         return error(\"Non-canonical signature: too short\");\n     if (vchSig.size() > 73)\n@@ -862,17 +866,18 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n \n namespace {\n \n-/** Wrapper that serializes like CTransaction, but with the modifications\n+/**\n+ * Wrapper that serializes like CTransaction, but with the modifications\n  *  required for the signature hash done in-place\n  */\n class CTransactionSignatureSerializer {\n private:\n-    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n-    const CScript &scriptCode; // output script being consumed\n-    const unsigned int nIn;    // input index of txTo being signed\n-    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n-    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n-    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n+    const CTransaction &txTo;  //! reference to the spending transaction (the one being serialized)\n+    const CScript &scriptCode; //! output script being consumed\n+    const unsigned int nIn;    //! input index of txTo being signed\n+    const bool fAnyoneCanPay;  //! whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n+    const bool fHashSingle;    //! whether the hashtype is SIGHASH_SINGLE\n+    const bool fHashNone;      //! whether the hashtype is SIGHASH_NONE\n \n public:\n     CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n@@ -951,7 +956,7 @@ class CTransactionSignatureSerializer {\n         ::WriteCompactSize(s, nOutputs);\n         for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n              SerializeOutput(s, nOutput, nType, nVersion);\n-        // Serialie nLockTime\n+        // Serialize nLockTime\n         ::Serialize(s, txTo.nLockTime, nType, nVersion);\n     }\n };"
      },
      {
        "sha": "9c22cb908cfd110d6af67c8a5a308186787e9d31",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 26,
        "deletions": 18,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -179,12 +179,14 @@ class scriptnum_error : public std::runtime_error\n \n class CScriptNum\n {\n-// Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n-// The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n-// but results may overflow (and are valid as long as they are not used in a subsequent\n-// numeric operation). CScriptNum enforces those semantics by storing results as\n-// an int64 and allowing out-of-range values to be returned as a vector of bytes but\n-// throwing an exception if arithmetic is done or the result is interpreted as an integer.\n+/**\n+ * Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n+ * The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n+ * but results may overflow (and are valid as long as they are not used in a subsequent\n+ * numeric operation). CScriptNum enforces those semantics by storing results as\n+ * an int64 and allowing out-of-range values to be returned as a vector of bytes but\n+ * throwing an exception if arithmetic is done or the result is interpreted as an integer.\n+ */\n public:\n \n     explicit CScriptNum(const int64_t& n)\n@@ -516,7 +518,7 @@ class CScript : public std::vector<unsigned char>\n         return true;\n     }\n \n-    // Encode/decode small integers:\n+    /** Encode/decode small integers: */\n     static int DecodeOP_N(opcodetype opcode)\n     {\n         if (opcode == OP_0)\n@@ -560,25 +562,31 @@ class CScript : public std::vector<unsigned char>\n         return nFound;\n     }\n \n-    // Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-    // as 20 sigops. With pay-to-script-hash, that changed:\n-    // CHECKMULTISIGs serialized in scriptSigs are\n-    // counted more accurately, assuming they are of the form\n-    //  ... OP_N CHECKMULTISIG ...\n+    /**\n+     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n+     * as 20 sigops. With pay-to-script-hash, that changed:\n+     * CHECKMULTISIGs serialized in scriptSigs are\n+     * counted more accurately, assuming they are of the form\n+     *  ... OP_N CHECKMULTISIG ...\n+     */\n     unsigned int GetSigOpCount(bool fAccurate) const;\n \n-    // Accurately count sigOps, including sigOps in\n-    // pay-to-script-hash transactions:\n+    /**\n+     * Accurately count sigOps, including sigOps in\n+     * pay-to-script-hash transactions:\n+     */\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n     bool IsPayToScriptHash() const;\n \n-    // Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical).\n+    /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly() const;\n \n-    // Returns whether the script is guaranteed to fail at execution,\n-    // regardless of the initial stack. This allows outputs to be pruned\n-    // instantly when entering the UTXO set.\n+    /**\n+     * Returns whether the script is guaranteed to fail at execution,\n+     * regardless of the initial stack. This allows outputs to be pruned\n+     * instantly when entering the UTXO set.\n+     */\n     bool IsUnspendable() const\n     {\n         return (size() > 0 && *begin() == OP_RETURN);"
      },
      {
        "sha": "5580a5933e6d756e6ad1c3dc0dbbc5a84ebba37e",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -15,13 +15,15 @@\n \n namespace {\n \n-// Valid signature cache, to avoid doing expensive ECDSA signature checking\n-// twice for every transaction (once when accepted into memory pool, and\n-// again when accepted into the block chain)\n+/**\n+ * Valid signature cache, to avoid doing expensive ECDSA signature checking\n+ * twice for every transaction (once when accepted into memory pool, and\n+ * again when accepted into the block chain)\n+ */\n class CSignatureCache\n {\n private:\n-     // sigdata_type is (signature hash, signature, public key):\n+     //! sigdata_type is (signature hash, signature, public key):\n     typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n     std::set< sigdata_type> setValid;\n     boost::shared_mutex cs_sigcache;"
      },
      {
        "sha": "7dfed751b6bf45288a234b0497b410b111538aad",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -46,12 +46,12 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n     return nSigned==nRequired;\n }\n \n-//\n-// Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n-// Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n-// unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n-// Returns false if scriptPubKey could not be completely satisfied.\n-//\n+/**\n+ * Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+ * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n+ * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n+ * Returns false if scriptPubKey could not be completely satisfied.\n+ */\n bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n                   CScript& scriptSigRet, txnouttype& whichTypeRet)\n {"
      },
      {
        "sha": "45a5e0dea330d9dedc93fe4319ce9ac241a3fd64",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -17,8 +17,10 @@ struct CMutableTransaction;\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n \n-// Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n-// combine them intelligently and return the result.\n+/**\n+ * Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n+ * combine them intelligently and return the result.\n+ */\n CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "ab6e6cde0deb54512b21c53e0694eeb287a7a668",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -34,9 +34,9 @@ const char* GetTxnOutputType(txnouttype t)\n     return NULL;\n }\n \n-//\n-// Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n-//\n+/**\n+ * Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n+ */\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n {\n     // Templates"
      },
      {
        "sha": "f3dcc75fdc82b537cb0b2c8c06e744f59a6850f8",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=b9a36b15bff6a6fc0bb7f8bf6e7361dac3919e78",
        "patch": "@@ -25,27 +25,31 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n+static const unsigned int MAX_OP_RETURN_RELAY = 40;      //! bytes\n extern unsigned nMaxDatacarrierBytes;\n \n-// Mandatory script verification flags that all new blocks must comply with for\n-// them to be valid. (but old blocks may not comply with) Currently just P2SH,\n-// but in the future other flags may be added, such as a soft-fork to enforce\n-// strict DER encoding.\n-//\n-// Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n-// details.\n+/**\n+ * Mandatory script verification flags that all new blocks must comply with for\n+ * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n+ * but in the future other flags may be added, such as a soft-fork to enforce\n+ * strict DER encoding.\n+ * \n+ * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n+ * details.\n+ */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n-// Standard script verification flags that standard transactions will comply\n-// with. However scripts violating these flags may still be present in valid\n-// blocks and we must accept those blocks.\n+/**\n+ * Standard script verification flags that standard transactions will comply\n+ * with. However scripts violating these flags may still be present in valid\n+ * blocks and we must accept those blocks.\n+ */\n static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY;\n \n-// For convenience, standard but not mandatory verify flags.\n+/** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n enum txnouttype\n@@ -65,7 +69,8 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n-/** A txout script template with a specific destination. It is either:\n+/** \n+ * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n  *  * CKeyID: TX_PUBKEYHASH destination\n  *  * CScriptID: TX_SCRIPTHASH destination"
      }
    ]
  }
]