[
  {
    "sha": "0c1b2bc549aec77b247f0103652d883227841ac5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzFiMmJjNTQ5YWVjNzdiMjQ3ZjAxMDM2NTJkODgzMjI3ODQxYWM1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-16T23:31:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T19:40:56Z"
      },
      "message": "Revert \"miner: Remove old CreateNewBlock w/o chainstate param\"\n\nThis reverts commit 2afcf24408b4453e4418ebfb326b141f6ea8647c.",
      "tree": {
        "sha": "35922a16b08c6482dd13b7c10842c1a011ac63eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35922a16b08c6482dd13b7c10842c1a011ac63eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c1b2bc549aec77b247f0103652d883227841ac5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1b2bc549aec77b247f0103652d883227841ac5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1b2bc549aec77b247f0103652d883227841ac5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1b2bc549aec77b247f0103652d883227841ac5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed49203daabb6550d44518792c30faad64bf9a9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed49203daabb6550d44518792c30faad64bf9a9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed49203daabb6550d44518792c30faad64bf9a9f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14443c432dbbd855df6cdc659b7e00c0d0389878",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c1b2bc549aec77b247f0103652d883227841ac5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c1b2bc549aec77b247f0103652d883227841ac5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0c1b2bc549aec77b247f0103652d883227841ac5",
        "patch": "@@ -96,6 +96,11 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+{\n+    return CreateNewBlock(::ChainstateActive(), scriptPubKeyIn);\n+}\n+\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();"
      },
      {
        "sha": "06af570130c579a53cf8ae82ec0c4a393684552b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c1b2bc549aec77b247f0103652d883227841ac5/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c1b2bc549aec77b247f0103652d883227841ac5/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=0c1b2bc549aec77b247f0103652d883227841ac5",
        "patch": "@@ -158,6 +158,7 @@ class BlockAssembler\n     explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n     inline static std::optional<int64_t> m_last_block_num_txs{};"
      }
    ]
  },
  {
    "sha": "eede0647b06b6009080c4e536a2705e911d6ee19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWRlMDY0N2IwNmI2MDA5MDgwYzRlNTM2YTI3MDVlOTExZDZlZTE5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-16T23:32:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T19:40:56Z"
      },
      "message": "Revert \"scripted-diff: Invoke CreateNewBlock with chainstate\"\n\nThis reverts commit 46b7f29340acb399fbd2378508a204d8d8ee8fca.",
      "tree": {
        "sha": "93f730c4b9a61ce2a52679c92c1b288e4a530225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93f730c4b9a61ce2a52679c92c1b288e4a530225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eede0647b06b6009080c4e536a2705e911d6ee19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eede0647b06b6009080c4e536a2705e911d6ee19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eede0647b06b6009080c4e536a2705e911d6ee19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eede0647b06b6009080c4e536a2705e911d6ee19/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c1b2bc549aec77b247f0103652d883227841ac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c1b2bc549aec77b247f0103652d883227841ac5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1b2bc549aec77b247f0103652d883227841ac5"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "920a55294dda25f54057ea6280f674b8748e690d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eede0647b06b6009080c4e536a2705e911d6ee19/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eede0647b06b6009080c4e536a2705e911d6ee19/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=eede0647b06b6009080c4e536a2705e911d6ee19",
        "patch": "@@ -150,7 +150,7 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(::ChainstateActive(), coinbase_script));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -358,7 +358,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         CTxMemPool empty_mempool;\n-        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(::ChainstateActive(), coinbase_script));\n+        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n         if (!blocktemplate) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         }\n@@ -748,7 +748,7 @@ static RPCHelpMan getblocktemplate()\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(::ChainstateActive(), scriptDummy);\n+        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "633a95ce96e0ffc97164ffaa8a37652ec9db65f4",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=eede0647b06b6009080c4e536a2705e911d6ee19",
        "patch": "@@ -62,7 +62,7 @@ CBlock BuildChainTestingSetup::CreateBlock(const CBlockIndex* prev,\n     const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n     block.hashPrevBlock = prev->GetBlockHash();\n     block.nTime = prev->nTime + 1;"
      },
      {
        "sha": "aa628371e646bbd5a203b3f80109815382be099f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=eede0647b06b6009080c4e536a2705e911d6ee19",
        "patch": "@@ -122,7 +122,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     uint256 hashHighFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 4U);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n@@ -143,7 +143,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n         BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeTx);\n@@ -157,7 +157,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n@@ -179,7 +179,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n \n     // Verify that this tx isn't selected.\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -192,7 +192,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     m_node.mempool->addUnchecked(entry.Fee(10000).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 9U);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n@@ -215,7 +215,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n@@ -252,7 +252,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     LOCK(m_node.mempool->cs);\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n \n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n     m_node.mempool->clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     m_node.mempool->clear();\n \n     // block size > limit\n@@ -311,13 +311,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     m_node.mempool->clear();\n \n     // orphan in *m_node.mempool, template creation fails\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clear();\n \n     // child with higher feerate than parent\n@@ -334,7 +334,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     m_node.mempool->clear();\n \n     // coinbase in *m_node.mempool, template creation fails\n@@ -346,7 +346,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // give it a fee so it'll get mined\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n     m_node.mempool->clear();\n \n     // double spend txn pair in *m_node.mempool, template creation fails\n@@ -359,7 +359,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clear();\n \n     // subsidy changing\n@@ -375,7 +375,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         ::ChainActive().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     // Extend to a 210000-long block chain.\n     while (::ChainActive().Tip()->nHeight < 210000) {\n         CBlockIndex* prev = ::ChainActive().Tip();\n@@ -387,7 +387,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         ::ChainActive().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n     // invalid p2sh txn in *m_node.mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -404,7 +404,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n     m_node.mempool->clear();\n \n     // Delete the dummy blocks again.\n@@ -492,7 +492,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n     // None of the of the absolute height/time locked tx should have made\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n@@ -505,7 +505,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     ::ChainActive().Tip()->nHeight++;\n     SetMockTime(::ChainActive().Tip()->GetMedianTimePast() + 1);\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5U);\n \n     ::ChainActive().Tip()->nHeight--;"
      },
      {
        "sha": "0c6487fbfa41b180aa091fe49e81de63d817ee22",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=eede0647b06b6009080c4e536a2705e911d6ee19",
        "patch": "@@ -42,7 +42,7 @@ std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coi\n {\n     auto block = std::make_shared<CBlock>(\n         BlockAssembler{*Assert(node.mempool), Params()}\n-            .CreateNewBlock(::ChainstateActive(), coinbase_scriptPubKey)\n+            .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n \n     LOCK(cs_main);"
      },
      {
        "sha": "ebdde79c8520761388b0b0ed2ee61fd91a8da64b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=eede0647b06b6009080c4e536a2705e911d6ee19",
        "patch": "@@ -244,7 +244,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n {\n     const CChainParams& chainparams = Params();\n     CTxMemPool empty_pool;\n-    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey)->block;\n+    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n \n     Assert(block.vtx.size() == 1);\n     for (const CMutableTransaction& tx : txns) {"
      },
      {
        "sha": "0c87c4d3604b8a4e9ab2fca1fed39fc6de0ca39e",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eede0647b06b6009080c4e536a2705e911d6ee19/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=eede0647b06b6009080c4e536a2705e911d6ee19",
        "patch": "@@ -63,7 +63,7 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n     static int i = 0;\n     static uint64_t time = Params().GenesisBlock().nTime;\n \n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(::ChainstateActive(), CScript{} << i++ << OP_TRUE);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(CScript{} << i++ << OP_TRUE);\n     auto pblock = std::make_shared<CBlock>(ptemplate->block);\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n@@ -325,7 +325,7 @@ BOOST_AUTO_TEST_CASE(witness_commitment_index)\n {\n     CScript pubKey;\n     pubKey << 1 << OP_TRUE;\n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(::ChainstateActive(), pubKey);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(pubKey);\n     CBlock pblock = ptemplate->block;\n \n     CTxOut witness;"
      }
    ]
  },
  {
    "sha": "e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjIwNjdlN2JjYWQ1YTU1OTg5OWFmZmYyZTRhOGU4YjdlOWY0MzAx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-16T23:32:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T19:40:56Z"
      },
      "message": "Revert \"miner: Pass in chainstate to BlockAssembler::CreateNewBlock\"\n\nThis reverts commit d0de61b764fc7e9c670b69d8210705da296dd245.",
      "tree": {
        "sha": "379f11afc3d9de21963a8d085902cfd3bfa572b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/379f11afc3d9de21963a8d085902cfd3bfa572b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e62067e7bcad5a559899afff2e4a8e8b7e9f4301/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eede0647b06b6009080c4e536a2705e911d6ee19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eede0647b06b6009080c4e536a2705e911d6ee19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eede0647b06b6009080c4e536a2705e911d6ee19"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "da2413d06b448d2f050fd71ff1ec9f5c6e565f34",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e62067e7bcad5a559899afff2e4a8e8b7e9f4301/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e62067e7bcad5a559899afff2e4a8e8b7e9f4301/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
        "patch": "@@ -97,11 +97,6 @@ void BlockAssembler::resetBlock()\n }\n \n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n-{\n-    return CreateNewBlock(::ChainstateActive(), scriptPubKeyIn);\n-}\n-\n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n@@ -119,8 +114,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chai\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, m_mempool.cs);\n-    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*chainstate.m_chain.Tip()));\n-    CBlockIndex* pindexPrev = chainstate.m_chain.Tip();\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n@@ -179,8 +173,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chai\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n-    if (!TestBlockValidity(state, chainparams, chainstate, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "c1ef49dea979177ccb4c596518d4b62be2acbae0",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e62067e7bcad5a559899afff2e4a8e8b7e9f4301/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e62067e7bcad5a559899afff2e4a8e8b7e9f4301/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
        "patch": "@@ -159,7 +159,6 @@ class BlockAssembler\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n     inline static std::optional<int64_t> m_last_block_num_txs{};\n     inline static std::optional<int64_t> m_last_block_weight{};"
      }
    ]
  },
  {
    "sha": "7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjhlOTc2Y2Q1YWM3OGEyMmYxYmUyYjJmZWQ4NTYyYzY5M2FmNWQ5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-17T20:32:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T19:40:56Z"
      },
      "message": "miner: Add chainstate member to BlockAssembler",
      "tree": {
        "sha": "7cc8c7b03ef9b139d8dc5bc258cd848fc9dfc5a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cc8c7b03ef9b139d8dc5bc258cd848fc9dfc5a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e62067e7bcad5a559899afff2e4a8e8b7e9f4301",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e62067e7bcad5a559899afff2e4a8e8b7e9f4301"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 22,
      "deletions": 17
    },
    "files": [
      {
        "sha": "8a9406f810934f8d3d617b54b218d239c7c4e51b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -55,9 +55,10 @@ BlockAssembler::Options::Options() {\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n }\n \n-BlockAssembler::BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options)\n+BlockAssembler::BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params, const Options& options)\n     : chainparams(params),\n-      m_mempool(mempool)\n+      m_mempool(mempool),\n+      m_chainstate(chainstate)\n {\n     blockMinFeeRate = options.blockMinFeeRate;\n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n@@ -79,8 +80,8 @@ static BlockAssembler::Options DefaultOptions()\n     return options;\n }\n \n-BlockAssembler::BlockAssembler(const CTxMemPool& mempool, const CChainParams& params)\n-    : BlockAssembler(mempool, params, DefaultOptions()) {}\n+BlockAssembler::BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params)\n+    : BlockAssembler(chainstate, mempool, params, DefaultOptions()) {}\n \n void BlockAssembler::resetBlock()\n {\n@@ -114,7 +115,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, m_mempool.cs);\n-    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*m_chainstate.m_chain.Tip()));\n+    CBlockIndex* pindexPrev = m_chainstate.m_chain.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n@@ -173,7 +175,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), *pblock, pindexPrev, false, false)) {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(m_chainstate));\n+    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "c400c90f6cb7b5f4d4aa920119ed6a649d8472e0",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -146,6 +146,7 @@ class BlockAssembler\n     int64_t nLockTimeCutoff;\n     const CChainParams& chainparams;\n     const CTxMemPool& m_mempool;\n+    CChainState& m_chainstate;\n \n public:\n     struct Options {\n@@ -154,8 +155,8 @@ class BlockAssembler\n         CFeeRate blockMinFeeRate;\n     };\n \n-    explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params);\n-    explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options);\n+    explicit BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params);\n+    explicit BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n@@ -201,6 +202,7 @@ class BlockAssembler\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n+// TODO just accept a CBlockIndex*\n /** Update an old GenerateCoinbaseCommitment from CreateNewBlock after the block txs have changed */\n void RegenerateCommitments(CBlock& block, BlockManager& blockman);\n "
      },
      {
        "sha": "72ad0df19962db9b6877d1d547c5a371675a6a25",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -150,7 +150,7 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(chainman.ActiveChainstate(), mempool, Params()).CreateNewBlock(coinbase_script));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -358,7 +358,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         CTxMemPool empty_mempool;\n-        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n+        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(::ChainstateActive(), empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n         if (!blocktemplate) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         }\n@@ -748,7 +748,7 @@ static RPCHelpMan getblocktemplate()\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(::ChainstateActive(), mempool, Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "9903ba75cb114660f8e06185acb6f2f4e563b01b",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -62,7 +62,7 @@ CBlock BuildChainTestingSetup::CreateBlock(const CBlockIndex* prev,\n     const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(::ChainstateActive(), *m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n     block.hashPrevBlock = prev->GetBlockHash();\n     block.nTime = prev->nTime + 1;"
      },
      {
        "sha": "9ba004cc38ed9723b1f386c4787fea65fd97aa51",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -44,7 +44,7 @@ BlockAssembler MinerTestingSetup::AssemblerForTest(const CChainParams& params)\n \n     options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n     options.blockMinFeeRate = blockMinFeeRate;\n-    return BlockAssembler(*m_node.mempool, params, options);\n+    return BlockAssembler(::ChainstateActive(), *m_node.mempool, params, options);\n }\n \n constexpr static struct {"
      },
      {
        "sha": "3fc3329da23e628a8fe0bb4537a9f25a4d3851d5",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -41,7 +41,7 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n {\n     auto block = std::make_shared<CBlock>(\n-        BlockAssembler{*Assert(node.mempool), Params()}\n+        BlockAssembler{::ChainstateActive(), *Assert(node.mempool), Params()}\n             .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n "
      },
      {
        "sha": "ff19a1feb146426dcd4dba036a8db05ded31238e",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -244,7 +244,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n {\n     const CChainParams& chainparams = Params();\n     CTxMemPool empty_pool;\n-    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n+    CBlock block = BlockAssembler(::ChainstateActive(), empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n \n     Assert(block.vtx.size() == 1);\n     for (const CMutableTransaction& tx : txns) {"
      },
      {
        "sha": "552be0a2da49649e667c75d9458cd510b78c3358",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "patch": "@@ -63,7 +63,7 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n     static int i = 0;\n     static uint64_t time = Params().GenesisBlock().nTime;\n \n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(CScript{} << i++ << OP_TRUE);\n+    auto ptemplate = BlockAssembler(m_node.chainman->ActiveChainstate(), *m_node.mempool, Params()).CreateNewBlock(CScript{} << i++ << OP_TRUE);\n     auto pblock = std::make_shared<CBlock>(ptemplate->block);\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n@@ -325,7 +325,7 @@ BOOST_AUTO_TEST_CASE(witness_commitment_index)\n {\n     CScript pubKey;\n     pubKey << 1 << OP_TRUE;\n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(pubKey);\n+    auto ptemplate = BlockAssembler(m_node.chainman->ActiveChainstate(), *m_node.mempool, Params()).CreateNewBlock(pubKey);\n     CBlock pblock = ptemplate->block;\n \n     CTxOut witness;"
      }
    ]
  },
  {
    "sha": "07156eb387ea580be5e2ce4a1744992ce7575903",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzE1NmViMzg3ZWE1ODBiZTVlMmNlNGExNzQ0OTkyY2U3NTc1OTAz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-17T20:53:54Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T19:40:56Z"
      },
      "message": "node/coinstats: Replace #include with fwd-declaration",
      "tree": {
        "sha": "f4990796e1c946dea01951a7816fd98d105334a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4990796e1c946dea01951a7816fd98d105334a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07156eb387ea580be5e2ce4a1744992ce7575903",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07156eb387ea580be5e2ce4a1744992ce7575903",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07156eb387ea580be5e2ce4a1744992ce7575903",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07156eb387ea580be5e2ce4a1744992ce7575903/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b8e976cd5ac78a22f1be2b2fed8562c693af5d9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "975651dcc4c4971f7e0a98a49643b76e24ad942b",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07156eb387ea580be5e2ce4a1744992ce7575903/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07156eb387ea580be5e2ce4a1744992ce7575903/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=07156eb387ea580be5e2ce4a1744992ce7575903",
        "patch": "@@ -8,11 +8,11 @@\n \n #include <amount.h>\n #include <uint256.h>\n-#include <validation.h>\n \n #include <cstdint>\n #include <functional>\n \n+class BlockManager;\n class CCoinsView;\n \n enum class CoinStatsHashType {"
      }
    ]
  },
  {
    "sha": "1dd8ed7a8491e51b76eeb236b15b794d9254f674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGQ4ZWQ3YTg0OTFlNTFiNzZlZWIyMzZiMTViNzk0ZDkyNTRmNjc0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-17T20:55:47Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-30T17:52:22Z"
      },
      "message": "net_processing: Move comments to declarations\n\nAlso:\n- Remove extraneous blank line",
      "tree": {
        "sha": "617392bade59938f7e8acaaeb06bda0034ffe7e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/617392bade59938f7e8acaaeb06bda0034ffe7e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1dd8ed7a8491e51b76eeb236b15b794d9254f674",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dd8ed7a8491e51b76eeb236b15b794d9254f674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1dd8ed7a8491e51b76eeb236b15b794d9254f674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dd8ed7a8491e51b76eeb236b15b794d9254f674/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07156eb387ea580be5e2ce4a1744992ce7575903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07156eb387ea580be5e2ce4a1744992ce7575903",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07156eb387ea580be5e2ce4a1744992ce7575903"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 51,
      "deletions": 50
    },
    "files": [
      {
        "sha": "d0c3e8802bd7ab0cd41f6c67aed51b950830c99d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 50,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dd8ed7a8491e51b76eeb236b15b794d9254f674/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dd8ed7a8491e51b76eeb236b15b794d9254f674/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1dd8ed7a8491e51b76eeb236b15b794d9254f674",
        "patch": "@@ -475,19 +475,70 @@ class PeerManagerImpl final : public PeerManager\n     /** Offset into vExtraTxnForCompact to insert the next tx */\n     size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n \n+    /** Check whether the last unknown block a peer advertised is not yet known. */\n     void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    /** Update tracking information about which blocks a peer is assumed to have. */\n     void UpdateBlockAvailability(NodeId nodeid, const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool CanDirectFetch() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    /**\n+     * To prevent fingerprinting attacks, only send blocks/headers outside of\n+     * the active chain if they are no more than a month older (both in time,\n+     * and in best equivalent proof of work) than the best header chain we know\n+     * about and we fully-validated them at some point.\n+     */\n     bool BlockRequestAllowed(const CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv& inv);\n+\n+    /**\n+     * Validation logic for compact filters request handling.\n+     *\n+     * May disconnect from the peer in the case of a bad request.\n+     *\n+     * @param[in]   peer            The peer that we received the request from\n+     * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+     * @param[in]   start_height    The start height for the request\n+     * @param[in]   stop_hash       The stop_hash for the request\n+     * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n+     * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+     * @param[out]  filter_index    The filter index, if the request can be serviced.\n+     * @return                      True if the request can be serviced.\n+     */\n     bool PrepareBlockFilterRequest(CNode& peer,\n                                    BlockFilterType filter_type, uint32_t start_height,\n                                    const uint256& stop_hash, uint32_t max_height_diff,\n                                    const CBlockIndex*& stop_index,\n                                    BlockFilterIndex*& filter_index);\n+\n+    /**\n+     * Handle a cfilters request.\n+     *\n+     * May disconnect from the peer in the case of a bad request.\n+     *\n+     * @param[in]   peer            The peer that we received the request from\n+     * @param[in]   vRecv           The raw message received\n+     */\n     void ProcessGetCFilters(CNode& peer, CDataStream& vRecv);\n+\n+    /**\n+     * Handle a cfheaders request.\n+     *\n+     * May disconnect from the peer in the case of a bad request.\n+     *\n+     * @param[in]   peer            The peer that we received the request from\n+     * @param[in]   vRecv           The raw message received\n+     */\n     void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv);\n+\n+    /**\n+     * Handle a getcfcheckpt request.\n+     *\n+     * May disconnect from the peer in the case of a bad request.\n+     *\n+     * @param[in]   peer            The peer that we received the request from\n+     * @param[in]   vRecv           The raw message received\n+     */\n     void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv);\n };\n } // namespace\n@@ -741,7 +792,6 @@ static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIV\n     return false;\n }\n \n-/** Check whether the last unknown block a peer advertised is not yet known. */\n void PeerManagerImpl::ProcessBlockAvailability(NodeId nodeid) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n@@ -757,7 +807,6 @@ void PeerManagerImpl::ProcessBlockAvailability(NodeId nodeid) {\n     }\n }\n \n-/** Update tracking information about which blocks a peer is assumed to have. */\n void PeerManagerImpl::UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n@@ -1182,16 +1231,6 @@ bool PeerManagerImpl::MaybePunishNodeForTx(NodeId nodeid, const TxValidationStat\n     return false;\n }\n \n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// blockchain -> download logic notification\n-//\n-\n-// To prevent fingerprinting attacks, only send blocks/headers outside of the\n-// active chain if they are no more than a month older (both in time, and in\n-// best equivalent proof of work) than the best header chain we know about and\n-// we fully-validated them at some point.\n bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex)\n {\n     AssertLockHeld(cs_main);\n@@ -2091,20 +2130,6 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n     m_mempool.check(m_chainman.ActiveChainstate());\n }\n \n-/**\n- * Validation logic for compact filters request handling.\n- *\n- * May disconnect from the peer in the case of a bad request.\n- *\n- * @param[in]   peer            The peer that we received the request from\n- * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n- * @param[in]   start_height    The start height for the request\n- * @param[in]   stop_hash       The stop_hash for the request\n- * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n- * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n- * @param[out]  filter_index    The filter index, if the request can be serviced.\n- * @return                      True if the request can be serviced.\n- */\n bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,\n                                                 BlockFilterType filter_type, uint32_t start_height,\n                                                 const uint256& stop_hash, uint32_t max_height_diff,\n@@ -2158,14 +2183,6 @@ bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,\n     return true;\n }\n \n-/**\n- * Handle a cfilters request.\n- *\n- * May disconnect from the peer in the case of a bad request.\n- *\n- * @param[in]   peer            The peer that we received the request from\n- * @param[in]   vRecv           The raw message received\n- */\n void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv)\n {\n     uint8_t filter_type_ser;\n@@ -2197,14 +2214,6 @@ void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv)\n     }\n }\n \n-/**\n- * Handle a cfheaders request.\n- *\n- * May disconnect from the peer in the case of a bad request.\n- *\n- * @param[in]   peer            The peer that we received the request from\n- * @param[in]   vRecv           The raw message received\n- */\n void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv)\n {\n     uint8_t filter_type_ser;\n@@ -2249,14 +2258,6 @@ void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv)\n     m_connman.PushMessage(&peer, std::move(msg));\n }\n \n-/**\n- * Handle a getcfcheckpt request.\n- *\n- * May disconnect from the peer in the case of a bad request.\n- *\n- * @param[in]   peer            The peer that we received the request from\n- * @param[in]   vRecv           The raw message received\n- */\n void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv)\n {\n     uint8_t filter_type_ser;"
      }
    ]
  },
  {
    "sha": "88aead263c61d86e5f836028f517cfbf2a575498",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGFlYWQyNjNjNjFkODZlNWY4MzYwMjhmNTE3Y2ZiZjJhNTc1NDk4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-17T20:58:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-30T17:52:22Z"
      },
      "message": "node: Avoid potential UB by asserting assumptions",
      "tree": {
        "sha": "be96a4eea8c07f4bcafd709dd791df85fec39045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be96a4eea8c07f4bcafd709dd791df85fec39045"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88aead263c61d86e5f836028f517cfbf2a575498",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88aead263c61d86e5f836028f517cfbf2a575498",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88aead263c61d86e5f836028f517cfbf2a575498",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88aead263c61d86e5f836028f517cfbf2a575498/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1dd8ed7a8491e51b76eeb236b15b794d9254f674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dd8ed7a8491e51b76eeb236b15b794d9254f674",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1dd8ed7a8491e51b76eeb236b15b794d9254f674"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "23d4fa2aaef8fa4581d232e3d0272ff05a62edb1",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88aead263c61d86e5f836028f517cfbf2a575498/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88aead263c61d86e5f836028f517cfbf2a575498/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=88aead263c61d86e5f836028f517cfbf2a575498",
        "patch": "@@ -11,6 +11,7 @@\n void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n     assert(node.mempool);\n+    assert(node.chainman);\n     LOCK2(cs_main, node.mempool->cs);\n     assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     CCoinsViewCache& chain_view = node.chainman->ActiveChainstate().CoinsTip();"
      },
      {
        "sha": "691b2791d73e00bb2a4c6ca2e1bdbf3fd02cd0c9",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88aead263c61d86e5f836028f517cfbf2a575498/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88aead263c61d86e5f836028f517cfbf2a575498/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=88aead263c61d86e5f836028f517cfbf2a575498",
        "patch": "@@ -38,6 +38,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     bool callback_set = false;\n \n     { // cs_main scope\n+    assert(node.chainman);\n     LOCK(cs_main);\n     assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     // If the transaction is already confirmed in the chain, don't do anything"
      }
    ]
  },
  {
    "sha": "7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZThiNWVlODE0YjBiOGMzNGFjYjIwNjM3ZWQ0ZmM5ODhjY2JhNTU1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-17T20:58:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-30T17:52:22Z"
      },
      "message": "validation: Make BlockManager::LookupBlockIndex const",
      "tree": {
        "sha": "d4a3c8d2243656d4e1cbe94eced53860bc339ac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4a3c8d2243656d4e1cbe94eced53860bc339ac0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8b5ee814b0b8c34acb20637ed4fc988ccba555/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88aead263c61d86e5f836028f517cfbf2a575498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88aead263c61d86e5f836028f517cfbf2a575498",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88aead263c61d86e5f836028f517cfbf2a575498"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b5c19971b400e342312b08e7fc724136e3a85246",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8b5ee814b0b8c34acb20637ed4fc988ccba555/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8b5ee814b0b8c34acb20637ed4fc988ccba555/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
        "patch": "@@ -169,7 +169,7 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n+CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash) const\n {\n     AssertLockHeld(cs_main);\n     assert(std::addressof(g_chainman.BlockIndex()) == std::addressof(m_block_index));"
      },
      {
        "sha": "21e63947fae95cbfa18186d1a5149252cfa11c3d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8b5ee814b0b8c34acb20637ed4fc988ccba555/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8b5ee814b0b8c34acb20637ed4fc988ccba555/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
        "patch": "@@ -457,7 +457,7 @@ class BlockManager\n         const CChainParams& chainparams,\n         CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CBlockIndex* LookupBlockIndex(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Find the last common block between the parameter chain and a locator. */\n     CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGM0ZTI1MmYwZDA5YmViYjJlNGFkMzI4OTQwNzQ1OWMyY2RhNWQ1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T18:54:29Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-30T17:52:22Z"
      },
      "message": "node/ifaces: NodeImpl: Use an accessor for ChainMan",
      "tree": {
        "sha": "93523d6930eda8f9a77493d7df4f5f94e9b6c794",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93523d6930eda8f9a77493d7df4f5f94e9b6c794"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c4e252f0d09bebb2e4ad3289407459c2cda5d5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8b5ee814b0b8c34acb20637ed4fc988ccba555",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8b5ee814b0b8c34acb20637ed4fc988ccba555"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 30,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f3e8d6f5cc4f0073c64bd52774a36a56a5c694f7",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 13,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c4e252f0d09bebb2e4ad3289407459c2cda5d5/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c4e252f0d09bebb2e4ad3289407459c2cda5d5/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
        "patch": "@@ -65,6 +65,8 @@ namespace node {\n namespace {\n class NodeImpl : public Node\n {\n+private:\n+    ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n     explicit NodeImpl(NodeContext* context) { setContext(context); }\n     void initLogging() override { InitLogging(*Assert(m_context->args)); }\n@@ -183,21 +185,28 @@ class NodeImpl : public Node\n     int getNumBlocks() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n-        return m_context->chainman->ActiveChain().Height();\n+        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n+        return chainman().ActiveChain().Height();\n     }\n     uint256 getBestBlockHash() override\n     {\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n-        const CBlockIndex* tip = WITH_LOCK(::cs_main, return m_context->chainman->ActiveChain().Tip());\n+        const CBlockIndex* tip;\n+        {\n+            // TODO: Temporary scope to check correctness of refactored code.\n+            // Should be removed manually after merge of\n+            // https://github.com/bitcoin/bitcoin/pull/20158\n+            LOCK(cs_main);\n+            assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n+            tip = chainman().ActiveChain().Tip();\n+        }\n         return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n     }\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n-        if (m_context->chainman->ActiveChain().Tip()) {\n-            return m_context->chainman->ActiveChain().Tip()->GetBlockTime();\n+        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n+        if (chainman().ActiveChain().Tip()) {\n+            return chainman().ActiveChain().Tip()->GetBlockTime();\n         }\n         return Params().GenesisBlock().GetBlockTime(); // Genesis block's time of current network\n     }\n@@ -206,14 +215,22 @@ class NodeImpl : public Node\n         const CBlockIndex* tip;\n         {\n             LOCK(::cs_main);\n-            assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n-            tip = m_context->chainman->ActiveChain().Tip();\n+            assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n+            tip = chainman().ActiveChain().Tip();\n         }\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n     bool isInitialBlockDownload() override {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_context->chainman->ActiveChainstate()));\n-        return m_context->chainman->ActiveChainstate().IsInitialBlockDownload();\n+        const CChainState* active_chainstate;\n+        {\n+            // TODO: Temporary scope to check correctness of refactored code.\n+            // Should be removed manually after merge of\n+            // https://github.com/bitcoin/bitcoin/pull/20158\n+            LOCK(::cs_main);\n+            active_chainstate = &m_context->chainman->ActiveChainstate();\n+            assert(std::addressof(::ChainstateActive()) == std::addressof(*active_chainstate));\n+        }\n+        return active_chainstate->IsInitialBlockDownload();\n     }\n     bool getReindex() override { return ::fReindex; }\n     bool getImporting() override { return ::fImporting; }\n@@ -239,8 +256,8 @@ class NodeImpl : public Node\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_context->chainman->ActiveChainstate()));\n-        return m_context->chainman->ActiveChainstate().CoinsTip().GetCoin(output, coin);\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(chainman().ActiveChainstate()));\n+        return chainman().ActiveChainstate().CoinsTip().GetCoin(output, coin);\n     }\n     WalletClient& walletClient() override\n     {"
      }
    ]
  },
  {
    "sha": "693414d27181cf967f787a2ca72344e52c58c7f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTM0MTRkMjcxODFjZjk2N2Y3ODdhMmNhNzIzNDRlNTJjNThjN2Yw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-24T18:54:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-30T17:52:22Z"
      },
      "message": "node/ifaces: ChainImpl: Use an accessor for ChainMan",
      "tree": {
        "sha": "0706ad3417b4a5f58fc2a7d9032e2fdd63d44ae4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0706ad3417b4a5f58fc2a7d9032e2fdd63d44ae4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/693414d27181cf967f787a2ca72344e52c58c7f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693414d27181cf967f787a2ca72344e52c58c7f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/693414d27181cf967f787a2ca72344e52c58c7f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693414d27181cf967f787a2ca72344e52c58c7f0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c4e252f0d09bebb2e4ad3289407459c2cda5d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98c4e252f0d09bebb2e4ad3289407459c2cda5d5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 18,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9f00900669aaefc5159c9a736bd2023c3e45e7f3",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693414d27181cf967f787a2ca72344e52c58c7f0/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693414d27181cf967f787a2ca72344e52c58c7f0/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=693414d27181cf967f787a2ca72344e52c58c7f0",
        "patch": "@@ -431,6 +431,8 @@ class RpcHandlerImpl : public Handler\n \n class ChainImpl : public Chain\n {\n+private:\n+    ChainstateManager& chainman() { return *Assert(m_node.chainman); }\n public:\n     explicit ChainImpl(NodeContext& node) : m_node(node) {}\n     std::optional<int> getHeight() override\n@@ -467,8 +469,8 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_node.chainman->ActiveChain()));\n-        return CheckFinalTx(m_node.chainman->ActiveChain().Tip(), tx);\n+        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n+        return CheckFinalTx(chainman().ActiveChain().Tip(), tx);\n     }\n     std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n@@ -533,8 +535,8 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n-        return GuessVerificationProgress(Params().TxData(), m_node.chainman->m_blockman.LookupBlockIndex(block_hash));\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman().m_blockman));\n+        return GuessVerificationProgress(Params().TxData(), chainman().m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, std::optional<int> max_height) override\n     {\n@@ -546,8 +548,8 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n-        if (CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman().m_blockman));\n+        if (CBlockIndex* block = chainman().m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n                 // Check pprev to not segfault if min_height is too low\n@@ -638,8 +640,16 @@ class ChainImpl : public Chain\n     }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_node.chainman->ActiveChainstate()));\n-        return m_node.chainman->ActiveChainstate().IsInitialBlockDownload();\n+        const CChainState* active_chainstate;\n+        {\n+            // TODO: Temporary scope to check correctness of refactored code.\n+            // Should be removed manually after merge of\n+            // https://github.com/bitcoin/bitcoin/pull/20158\n+            LOCK(::cs_main);\n+            active_chainstate = &chainman().ActiveChainstate();\n+            assert(std::addressof(::ChainstateActive()) == std::addressof(*active_chainstate));\n+        }\n+        return active_chainstate->IsInitialBlockDownload();\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }"
      }
    ]
  }
]