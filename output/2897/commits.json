[
  {
    "sha": "5101509aaa0aa4088cad25368a8098fec6469db4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTAxNTA5YWFhMGFhNDA4OGNhZDI1MzY4YTgwOThmZWM2NDY5ZGI0",
    "commit": {
      "author": {
        "name": "vhf / victor felder",
        "email": "victorfelder@gmail.com",
        "date": "2013-05-21T22:19:18Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:38:54Z"
      },
      "message": "Too many bitcoins allowed in amount. (#2401)\n\nUsing magic number doesn't seem right. Could we factor this out, together with https://github.com/bitcoin/bitcoin/blob/master/src/bitcoinrpc.cpp#L96 ?\nAnd what about BitcoinUnits::parse() as well ?",
      "tree": {
        "sha": "2cd7bad702f4a83c5638cae54dca1365906db08b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cd7bad702f4a83c5638cae54dca1365906db08b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5101509aaa0aa4088cad25368a8098fec6469db4",
      "comment_count": 3,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5101509aaa0aa4088cad25368a8098fec6469db4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5101509aaa0aa4088cad25368a8098fec6469db4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5101509aaa0aa4088cad25368a8098fec6469db4/comments",
    "author": {
      "login": "vhf",
      "id": 2022803,
      "node_id": "MDQ6VXNlcjIwMjI4MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2022803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vhf",
      "html_url": "https://github.com/vhf",
      "followers_url": "https://api.github.com/users/vhf/followers",
      "following_url": "https://api.github.com/users/vhf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vhf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vhf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vhf/subscriptions",
      "organizations_url": "https://api.github.com/users/vhf/orgs",
      "repos_url": "https://api.github.com/users/vhf/repos",
      "events_url": "https://api.github.com/users/vhf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vhf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00a887450364bd5b096978291b6a6e0f47181d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00a887450364bd5b096978291b6a6e0f47181d75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00a887450364bd5b096978291b6a6e0f47181d75"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b502505f317628dfab9abd8b332e24b0636dcdfe",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5101509aaa0aa4088cad25368a8098fec6469db4/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5101509aaa0aa4088cad25368a8098fec6469db4/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=5101509aaa0aa4088cad25368a8098fec6469db4",
        "patch": "@@ -60,7 +60,9 @@ bool BitcoinAmountField::validate()\n     bool valid = true;\n     if (amount->value() == 0.0)\n         valid = false;\n-    if (valid && !BitcoinUnits::parse(currentUnit, text(), 0))\n+    else if (!BitcoinUnits::parse(currentUnit, text(), 0))\n+        valid = false;\n+    else if (amount->value() > BitcoinUnits::maxAmount(currentUnit))\n         valid = false;\n \n     setValid(valid);\n@@ -115,7 +117,7 @@ qint64 BitcoinAmountField::value(bool *valid_out) const\n {\n     qint64 val_out = 0;\n     bool valid = BitcoinUnits::parse(currentUnit, text(), &val_out);\n-    if(valid_out)\n+    if (valid_out)\n     {\n         *valid_out = valid;\n     }\n@@ -145,12 +147,12 @@ void BitcoinAmountField::unitChanged(int idx)\n     amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n     amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n \n-    if(currentUnit == BitcoinUnits::uBTC)\n+    if (currentUnit == BitcoinUnits::uBTC)\n         amount->setSingleStep(0.01);\n     else\n         amount->setSingleStep(0.001);\n \n-    if(valid)\n+    if (valid)\n     {\n         // If value was valid, re-place it in the widget with the new unit\n         setValue(currentValue);"
      },
      {
        "sha": "ae9791123d6ad55895ee059914aadbcc0ff49703",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5101509aaa0aa4088cad25368a8098fec6469db4/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5101509aaa0aa4088cad25368a8098fec6469db4/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=5101509aaa0aa4088cad25368a8098fec6469db4",
        "patch": "@@ -63,6 +63,17 @@ qint64 BitcoinUnits::factor(int unit)\n     }\n }\n \n+qint64 BitcoinUnits::maxAmount(int unit)\n+{\n+    switch(unit)\n+    {\n+    case BTC:  return Q_INT64_C(21000000);\n+    case mBTC: return Q_INT64_C(21000000000);\n+    case uBTC: return Q_INT64_C(21000000000000);\n+    default:   return 0;\n+    }\n+}\n+\n int BitcoinUnits::amountDigits(int unit)\n {\n     switch(unit)"
      },
      {
        "sha": "f6fdf6c7be60950972f725b1546f2b6d462e5614",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5101509aaa0aa4088cad25368a8098fec6469db4/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5101509aaa0aa4088cad25368a8098fec6469db4/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=5101509aaa0aa4088cad25368a8098fec6469db4",
        "patch": "@@ -38,6 +38,8 @@ class BitcoinUnits: public QAbstractListModel\n     static QString description(int unit);\n     //! Number of Satoshis (1e-8) per unit\n     static qint64 factor(int unit);\n+    //! Max amount per unit\n+    static qint64 maxAmount(int unit);\n     //! Number of amount digits (to represent max number of coins)\n     static int amountDigits(int unit);\n     //! Number of decimals left"
      }
    ]
  },
  {
    "sha": "ad397b5505842969b9e482cc3738be948ca71db3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDM5N2I1NTA1ODQyOTY5YjllNDgyY2MzNzM4YmU5NDhjYTcxZGIz",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2013-06-11T03:01:52Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:38:56Z"
      },
      "message": "fix comment about dust logic",
      "tree": {
        "sha": "88ef2f5f1710b74275ec359753b3f5ce6a1cd45d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88ef2f5f1710b74275ec359753b3f5ce6a1cd45d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad397b5505842969b9e482cc3738be948ca71db3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad397b5505842969b9e482cc3738be948ca71db3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad397b5505842969b9e482cc3738be948ca71db3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad397b5505842969b9e482cc3738be948ca71db3/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5101509aaa0aa4088cad25368a8098fec6469db4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5101509aaa0aa4088cad25368a8098fec6469db4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5101509aaa0aa4088cad25368a8098fec6469db4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c568fd2ef9de7d2198163882f0b5fdbcfdcc61c3",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad397b5505842969b9e482cc3738be948ca71db3/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad397b5505842969b9e482cc3738be948ca71db3/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=ad397b5505842969b9e482cc3738be948ca71db3",
        "patch": "@@ -192,10 +192,10 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical txout is 33 bytes big, and will\n+        // A typical txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend,\n         // so dust is a txout less than 54 uBTC\n-        // (5430 satoshis) with default nMinRelayTxFee\n+        // (5460 satoshis) with default nMinRelayTxFee\n         return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < nMinRelayTxFee);\n     }\n "
      }
    ]
  },
  {
    "sha": "07f2b24932727aa0ce313761a621913ff2e75db5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2YyYjI0OTMyNzI3YWEwY2UzMTM3NjFhNjIxOTEzZmYyZTc1ZGI1",
    "commit": {
      "author": {
        "name": "bitsofproof",
        "email": "tamas@bitsofproof.com",
        "date": "2013-06-11T21:10:22Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:38:57Z"
      },
      "message": "send tx relay flag with version",
      "tree": {
        "sha": "1541b1b9bcc9ac0bdbd9e4877be9be09855883b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1541b1b9bcc9ac0bdbd9e4877be9be09855883b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07f2b24932727aa0ce313761a621913ff2e75db5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f2b24932727aa0ce313761a621913ff2e75db5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07f2b24932727aa0ce313761a621913ff2e75db5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f2b24932727aa0ce313761a621913ff2e75db5/comments",
    "author": {
      "login": "tamasblummer",
      "id": 4289351,
      "node_id": "MDQ6VXNlcjQyODkzNTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tamasblummer",
      "html_url": "https://github.com/tamasblummer",
      "followers_url": "https://api.github.com/users/tamasblummer/followers",
      "following_url": "https://api.github.com/users/tamasblummer/following{/other_user}",
      "gists_url": "https://api.github.com/users/tamasblummer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tamasblummer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tamasblummer/subscriptions",
      "organizations_url": "https://api.github.com/users/tamasblummer/orgs",
      "repos_url": "https://api.github.com/users/tamasblummer/repos",
      "events_url": "https://api.github.com/users/tamasblummer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tamasblummer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad397b5505842969b9e482cc3738be948ca71db3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad397b5505842969b9e482cc3738be948ca71db3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad397b5505842969b9e482cc3738be948ca71db3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1d181823e2285270f4a9c3cf9e63c348372a3bc5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f2b24932727aa0ce313761a621913ff2e75db5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f2b24932727aa0ce313761a621913ff2e75db5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=07f2b24932727aa0ce313761a621913ff2e75db5",
        "patch": "@@ -533,7 +533,7 @@ void CNode::PushVersion()\n     RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     printf(\"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%s\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString().c_str(), addrYou.ToString().c_str(), addr.ToString().c_str());\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight);\n+                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight, true);\n }\n \n "
      }
    ]
  },
  {
    "sha": "2f60ac1f1506554f495565f8396486432352706f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjYwYWMxZjE1MDY1NTRmNDk1NTY1ZjgzOTY0ODY0MzIzNTI3MDZm",
    "commit": {
      "author": {
        "name": "Vaclav Vobornik",
        "email": "git@vobornik.eu",
        "date": "2013-06-12T12:46:16Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:38:58Z"
      },
      "message": "Added GNU/kFreeBSD kernel name (TARGET_OS)\n\nuname -s returns \"GNU/kFreeBSD\" on Debian GNU/kFreeBSD port. See http://www.debian.org/ports/kfreebsd-gnu/",
      "tree": {
        "sha": "dc05e5fa13a06f0877fb9ee584644fc9eb35fefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc05e5fa13a06f0877fb9ee584644fc9eb35fefa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f60ac1f1506554f495565f8396486432352706f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f60ac1f1506554f495565f8396486432352706f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f60ac1f1506554f495565f8396486432352706f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f60ac1f1506554f495565f8396486432352706f/comments",
    "author": {
      "login": "vobornik",
      "id": 408196,
      "node_id": "MDQ6VXNlcjQwODE5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/408196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vobornik",
      "html_url": "https://github.com/vobornik",
      "followers_url": "https://api.github.com/users/vobornik/followers",
      "following_url": "https://api.github.com/users/vobornik/following{/other_user}",
      "gists_url": "https://api.github.com/users/vobornik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vobornik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vobornik/subscriptions",
      "organizations_url": "https://api.github.com/users/vobornik/orgs",
      "repos_url": "https://api.github.com/users/vobornik/repos",
      "events_url": "https://api.github.com/users/vobornik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vobornik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07f2b24932727aa0ce313761a621913ff2e75db5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f2b24932727aa0ce313761a621913ff2e75db5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07f2b24932727aa0ce313761a621913ff2e75db5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a3ad057eee5301c1531c24d980281240933955ed",
        "filename": "src/leveldb/build_detect_platform",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f60ac1f1506554f495565f8396486432352706f/src/leveldb/build_detect_platform",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f60ac1f1506554f495565f8396486432352706f/src/leveldb/build_detect_platform",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/build_detect_platform?ref=2f60ac1f1506554f495565f8396486432352706f",
        "patch": "@@ -94,6 +94,12 @@ case \"$TARGET_OS\" in\n         PLATFORM_LIBS=\"-lpthread\"\n         PORT_FILE=port/port_posix.cc\n         ;;\n+    GNU/kFreeBSD)\n+        PLATFORM=OS_KFREEBSD\n+        COMMON_FLAGS=\"$MEMCMP_FLAG -D_REENTRANT -DOS_KFREEBSD\"\n+        PLATFORM_LIBS=\"-lpthread\"\n+        PORT_FILE=port/port_posix.cc\n+        ;;\n     NetBSD)\n         PLATFORM=OS_NETBSD\n         COMMON_FLAGS=\"$MEMCMP_FLAG -D_REENTRANT -DOS_NETBSD\""
      }
    ]
  },
  {
    "sha": "5dde5473d5ad94d73603b1c2d3923917d9f287a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGRlNTQ3M2Q1YWQ5NGQ3MzYwM2IxYzJkMzkyMzkxN2Q5ZjI4N2E0",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2013-06-14T09:45:38Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:38:59Z"
      },
      "message": "Update HomeBrew osx makefile patch to account for recent changes to makefile",
      "tree": {
        "sha": "5000eb4726674a0b7799f09ba53daaea786151f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5000eb4726674a0b7799f09ba53daaea786151f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dde5473d5ad94d73603b1c2d3923917d9f287a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dde5473d5ad94d73603b1c2d3923917d9f287a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5dde5473d5ad94d73603b1c2d3923917d9f287a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dde5473d5ad94d73603b1c2d3923917d9f287a4/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f60ac1f1506554f495565f8396486432352706f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f60ac1f1506554f495565f8396486432352706f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f60ac1f1506554f495565f8396486432352706f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "287db2fdf22a8430bac24df20c3a6094a4de4e22",
        "filename": "contrib/homebrew/makefile.osx.patch",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dde5473d5ad94d73603b1c2d3923917d9f287a4/contrib/homebrew/makefile.osx.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dde5473d5ad94d73603b1c2d3923917d9f287a4/contrib/homebrew/makefile.osx.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/homebrew/makefile.osx.patch?ref=5dde5473d5ad94d73603b1c2d3923917d9f287a4",
        "patch": "@@ -1,5 +1,5 @@\n diff --git a/src/makefile.osx b/src/makefile.osx\n-index 8b7c559..8a0560c 100644\n+index bef0ef3..07ef8d3 100644\n --- a/src/makefile.osx\n +++ b/src/makefile.osx\n @@ -7,17 +7,21 @@\n@@ -28,7 +28,7 @@ index 8b7c559..8a0560c 100644\n  \n  USE_UPNP:=1\n  USE_IPV6:=1\n-@@ -31,13 +35,13 @@ ifdef STATIC\n+@@ -31,14 +35,14 @@ ifdef STATIC\n  TESTLIBS += \\\n   $(DEPSDIR)/lib/libboost_unit_test_framework-mt.a\n  LIBS += \\\n@@ -38,6 +38,7 @@ index 8b7c559..8a0560c 100644\n   $(DEPSDIR)/lib/libboost_filesystem-mt.a \\\n   $(DEPSDIR)/lib/libboost_program_options-mt.a \\\n   $(DEPSDIR)/lib/libboost_thread-mt.a \\\n+  $(DEPSDIR)/lib/libboost_chrono-mt.a \\\n - $(DEPSDIR)/lib/libssl.a \\\n - $(DEPSDIR)/lib/libcrypto.a \\\n + $(OPENSSLDIR)/lib/libssl.a \\"
      }
    ]
  },
  {
    "sha": "4a498f69b9a77df7ac144e3861e54ec4a696013c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTQ5OGY2OWI5YTc3ZGY3YWMxNDRlMzg2MWU1NGVjNGE2OTYwMTNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-05-17T10:07:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:00Z"
      },
      "message": "Refactor fee rules to make them actually readable.\n\nThis (nearly) doesn't change fee rules at all:\n * To make it into the fee transaction area, the dPriority comparison\n   changed from < to <=\n * We now just ignore transactions > MAX_BLOCK_SIZE/4 instead of\n   doing some calculations to require increasingly large fees as\n   size increases.",
      "tree": {
        "sha": "84389195c51d470a5bf8e60688273bb8fd0781e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84389195c51d470a5bf8e60688273bb8fd0781e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a498f69b9a77df7ac144e3861e54ec4a696013c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a498f69b9a77df7ac144e3861e54ec4a696013c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a498f69b9a77df7ac144e3861e54ec4a696013c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a498f69b9a77df7ac144e3861e54ec4a696013c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dde5473d5ad94d73603b1c2d3923917d9f287a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dde5473d5ad94d73603b1c2d3923917d9f287a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dde5473d5ad94d73603b1c2d3923917d9f287a4"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 15,
      "deletions": 29
    },
    "files": [
      {
        "sha": "6ac4f8ba96014289bab412a8a2188333083c53c4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 26,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a498f69b9a77df7ac144e3861e54ec4a696013c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a498f69b9a77df7ac144e3861e54ec4a696013c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4a498f69b9a77df7ac144e3861e54ec4a696013c",
        "patch": "@@ -634,30 +634,23 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize, bool fAllowFree, enum GetMinFee_mode mode)\n+int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode)\n {\n     // Base fee is either nMinTxFee or nMinRelayTxFee\n     int64 nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n \n     unsigned int nBytes = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-    unsigned int nNewBlockSize = nBlockSize + nBytes;\n     int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n \n     if (fAllowFree)\n     {\n-        if (nBlockSize == 1)\n-        {\n-            // Transactions under 10K are free\n-            // (about 4500 BTC if made of 50 BTC inputs)\n-            if (nBytes < 10000)\n-                nMinFee = 0;\n-        }\n-        else\n-        {\n-            // Free transaction area\n-            if (nNewBlockSize < 27000)\n-                nMinFee = 0;\n-        }\n+        // There is a free transaction area in blocks created by most miners,\n+        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n+        //   to be considered to fall into this category\n+        // * If we are creating a transaction we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 17000\n+        //   (= 10000) to be considered safe and assume they can likely make it into this section\n+        if (nBytes < (mode == GMF_SEND ? (DEFAULT_BLOCK_PRIORITY_SIZE - 17000) : (DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n+            nMinFee = 0;\n     }\n \n     // To limit dust spam, require base fee if any output is less than 0.01\n@@ -668,14 +661,6 @@ int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize, bool fAllowFree\n                 nMinFee = nBaseFee;\n     }\n \n-    // Raise the price as the block approaches full\n-    if (nBlockSize != 1 && nNewBlockSize >= MAX_BLOCK_SIZE_GEN/2)\n-    {\n-        if (nNewBlockSize >= MAX_BLOCK_SIZE_GEN)\n-            return MAX_MONEY;\n-        nMinFee *= MAX_BLOCK_SIZE_GEN / (MAX_BLOCK_SIZE_GEN - nNewBlockSize);\n-    }\n-\n     if (!MoneyRange(nMinFee))\n         nMinFee = MAX_MONEY;\n     return nMinFee;\n@@ -798,7 +783,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        int64 txMinFee = GetMinFee(tx, 1000, true, GMF_RELAY);\n+        int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n             return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n                          hash.ToString().c_str(),\n@@ -4186,7 +4171,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", 27000);\n+    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n     nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n@@ -4314,7 +4299,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n             // Prioritize by fee once past the priority size or we run out of high-priority\n             // transactions:\n             if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || (dPriority < COIN * 144 / 250)))\n+                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n             {\n                 fSortedByFee = true;\n                 comparer = TxPriorityCompare(fSortedByFee);"
      },
      {
        "sha": "cadfd0a9c13430d822ea9fb4eda4ad3886af060f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a498f69b9a77df7ac144e3861e54ec4a696013c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a498f69b9a77df7ac144e3861e54ec4a696013c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4a498f69b9a77df7ac144e3861e54ec4a696013c",
        "patch": "@@ -52,6 +52,8 @@ static const int COINBASE_MATURITY = 100;\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n+/** Default amount of block size reserved for high-priority transactions (in bytes) */\n+static const int DEFAULT_BLOCK_PRIORITY_SIZE = 27000;\n #ifdef USE_UPNP\n static const int fHaveUPnP = true;\n #else\n@@ -262,12 +264,11 @@ struct CDiskTxPos : public CDiskBlockPos\n \n enum GetMinFee_mode\n {\n-    GMF_BLOCK,\n     GMF_RELAY,\n     GMF_SEND,\n };\n \n-int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize = 1, bool fAllowFree = true, enum GetMinFee_mode mode = GMF_BLOCK);\n+int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode);\n \n //\n // Check transaction inputs, and make sure any"
      },
      {
        "sha": "92e892ae47d7dd6da275c0af4f0855e16d0bed53",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a498f69b9a77df7ac144e3861e54ec4a696013c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a498f69b9a77df7ac144e3861e54ec4a696013c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4a498f69b9a77df7ac144e3861e54ec4a696013c",
        "patch": "@@ -1301,7 +1301,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                 bool fAllowFree = AllowFree(dPriority);\n-                int64 nMinFee = GetMinFee(wtxNew, 1, fAllowFree, GMF_SEND);\n+                int64 nMinFee = GetMinFee(wtxNew, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);"
      }
    ]
  },
  {
    "sha": "d8e949df65960ee92aef3e63136c0b71229e0664",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGU5NDlkZjY1OTYwZWU5MmFlZjNlNjMxMzZjMGI3MTIyOWUwNjY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-05-19T15:36:01Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:01Z"
      },
      "message": "qt: allow user to choose data directory\n\nThis adds an introduction screen that is shown when the client is first\nstarted in which the user can choose a data directory.\n\nIt is also possible to force the intro screen to appear using command\nline argument `-choosedatadir`.\n\nThe user is warned that the client will download and store 10Gb of data.\nThe intro screen shows how much space is available on the device that\ncontains the chosen directory and warns if this is less than the 10Gb.\n\nTo make it possible to translate the introduction dialog, the initialization\nsequence is changed so that translations are\nloaded before the data directory. This has the by-effect that it is\nno longer possible to specify a language in bitcoin.conf inside the data\ndirectory.",
      "tree": {
        "sha": "b2549ab8354e2ebd50ad6fb28bc2add488cad48d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2549ab8354e2ebd50ad6fb28bc2add488cad48d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8e949df65960ee92aef3e63136c0b71229e0664",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e949df65960ee92aef3e63136c0b71229e0664",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e949df65960ee92aef3e63136c0b71229e0664",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e949df65960ee92aef3e63136c0b71229e0664/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a498f69b9a77df7ac144e3861e54ec4a696013c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a498f69b9a77df7ac144e3861e54ec4a696013c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a498f69b9a77df7ac144e3861e54ec4a696013c"
      }
    ],
    "stats": {
      "total": 715,
      "additions": 671,
      "deletions": 44
    },
    "files": [
      {
        "sha": "6be4d3bf8316e48f683b85d52eb2a99cdedcb787",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e949df65960ee92aef3e63136c0b71229e0664/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e949df65960ee92aef3e63136c0b71229e0664/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=d8e949df65960ee92aef3e63136c0b71229e0664",
        "patch": "@@ -213,7 +213,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/leveldb.h \\\n     src/threadsafety.h \\\n     src/limitedmap.h \\\n-    src/qt/splashscreen.h\n+    src/qt/splashscreen.h \\\n+    src/qt/intro.h\n \n SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/bitcoingui.cpp \\\n@@ -282,7 +283,8 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n     src/txdb.cpp \\\n-    src/qt/splashscreen.cpp\n+    src/qt/splashscreen.cpp \\\n+    src/qt/intro.cpp\n \n RESOURCES += src/qt/bitcoin.qrc\n \n@@ -296,7 +298,8 @@ FORMS += src/qt/forms/sendcoinsdialog.ui \\\n     src/qt/forms/sendcoinsentry.ui \\\n     src/qt/forms/askpassphrasedialog.ui \\\n     src/qt/forms/rpcconsole.ui \\\n-    src/qt/forms/optionsdialog.ui\n+    src/qt/forms/optionsdialog.ui \\\n+    src/qt/forms/intro.ui\n \n contains(USE_QRCODE, 1) {\n HEADERS += src/qt/qrcodedialog.h"
      },
      {
        "sha": "b0c45d686373a990e96c1160b5f5cff81f34254b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 40,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d8e949df65960ee92aef3e63136c0b71229e0664",
        "patch": "@@ -15,6 +15,7 @@\n #include \"ui_interface.h\"\n #include \"paymentserver.h\"\n #include \"splashscreen.h\"\n+#include \"intro.h\"\n \n #include <QMessageBox>\n #if QT_VERSION < 0x050000\n@@ -24,6 +25,7 @@\n #include <QTimer>\n #include <QTranslator>\n #include <QLibraryInfo>\n+#include <QSettings>\n \n #if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n #define _BITCOIN_QT_PLUGINS_INCLUDED\n@@ -110,6 +112,46 @@ static void handleRunawayException(std::exception *e)\n     exit(1);\n }\n \n+/** Set up translations */\n+static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)\n+{\n+    QSettings settings;\n+\n+    // Get desired locale (e.g. \"de_DE\")\n+    // 1) System default language\n+    QString lang_territory = QLocale::system().name();\n+    // 2) Language from QSettings\n+    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n+    if(!lang_territory_qsettings.isEmpty())\n+        lang_territory = lang_territory_qsettings;\n+    // 3) -lang command line argument\n+    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+\n+    // Convert to \"de\" only by truncating \"_DE\"\n+    QString lang = lang_territory;\n+    lang.truncate(lang_territory.lastIndexOf('_'));\n+\n+    // Load language files for configured locale:\n+    // - First load the translator for the base language, without territory\n+    // - Then load the more specific locale translator\n+\n+    // Load e.g. qt_de.qm\n+    if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n+        QApplication::installTranslator(&qtTranslatorBase);\n+\n+    // Load e.g. qt_de_DE.qm\n+    if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n+        QApplication::installTranslator(&qtTranslator);\n+\n+    // Load e.g. bitcoin_de.qm (shortcut \"de\" needs to be defined in bitcoin.qrc)\n+    if (translatorBase.load(lang, \":/translations/\"))\n+        QApplication::installTranslator(&translatorBase);\n+\n+    // Load e.g. bitcoin_de_DE.qm (shortcut \"de_DE\" needs to be defined in bitcoin.qrc)\n+    if (translator.load(lang_territory, \":/translations/\"))\n+        QApplication::installTranslator(&translator);\n+}\n+\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n@@ -130,6 +172,22 @@ int main(int argc, char *argv[])\n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n \n+    // Application identification (must be set before OptionsModel is initialized,\n+    // as it is used to locate QSettings)\n+    QApplication::setOrganizationName(\"Bitcoin\");\n+    QApplication::setOrganizationDomain(\"bitcoin.org\");\n+    if (GetBoolArg(\"-testnet\", false)) // Separate UI settings for testnet\n+        QApplication::setApplicationName(\"Bitcoin-Qt-testnet\");\n+    else\n+        QApplication::setApplicationName(\"Bitcoin-Qt\");\n+\n+    // Now that QSettings are accessible, initialize translations\n+    QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n+    initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n+\n+    // User language is set up: pick a data directory\n+    Intro::pickDataDirectory();\n+\n     // Do this early as we don't want to bother initializing if we are just calling IPC\n     // ... but do it after creating app, so QCoreApplication::arguments is initialized:\n     if (PaymentServer::ipcSendCommandLine())\n@@ -142,53 +200,15 @@ int main(int argc, char *argv[])\n     // ... then bitcoin.conf:\n     if (!boost::filesystem::is_directory(GetDataDir(false)))\n     {\n-        // This message can not be translated, as translation is not initialized yet\n-        // (which not yet possible because lang=XX can be overridden in bitcoin.conf in the data directory)\n-        QMessageBox::critical(0, \"Bitcoin\",\n-                              QString(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n+                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n         return 1;\n     }\n     ReadConfigFile(mapArgs, mapMultiArgs);\n \n-    // Application identification (must be set before OptionsModel is initialized,\n-    // as it is used to locate QSettings)\n-    QApplication::setOrganizationName(\"Bitcoin\");\n-    QApplication::setOrganizationDomain(\"bitcoin.org\");\n-    if (GetBoolArg(\"-testnet\", false)) // Separate UI settings for testnet\n-        QApplication::setApplicationName(\"Bitcoin-Qt-testnet\");\n-    else\n-        QApplication::setApplicationName(\"Bitcoin-Qt\");\n-\n     // ... then GUI settings:\n     OptionsModel optionsModel;\n \n-    // Get desired locale (e.g. \"de_DE\") from command line or use system locale\n-    QString lang_territory = QString::fromStdString(GetArg(\"-lang\", QLocale::system().name().toStdString()));\n-    QString lang = lang_territory;\n-    // Convert to \"de\" only by truncating \"_DE\"\n-    lang.truncate(lang_territory.lastIndexOf('_'));\n-\n-    QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n-    // Load language files for configured locale:\n-    // - First load the translator for the base language, without territory\n-    // - Then load the more specific locale translator\n-\n-    // Load e.g. qt_de.qm\n-    if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n-        app.installTranslator(&qtTranslatorBase);\n-\n-    // Load e.g. qt_de_DE.qm\n-    if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n-        app.installTranslator(&qtTranslator);\n-\n-    // Load e.g. bitcoin_de.qm (shortcut \"de\" needs to be defined in bitcoin.qrc)\n-    if (translatorBase.load(lang, \":/translations/\"))\n-        app.installTranslator(&translatorBase);\n-\n-    // Load e.g. bitcoin_de_DE.qm (shortcut \"de_DE\" needs to be defined in bitcoin.qrc)\n-    if (translator.load(lang_territory, \":/translations/\"))\n-        app.installTranslator(&translator);\n-\n     // Subscribe to global signals from core\n     uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.ThreadSafeAskFee.connect(ThreadSafeAskFee);"
      },
      {
        "sha": "0f6ae5a7d0100f4b802e9c6ee9ab14323d57fcda",
        "filename": "src/qt/forms/intro.ui",
        "status": "added",
        "additions": 266,
        "deletions": 0,
        "changes": 266,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=d8e949df65960ee92aef3e63136c0b71229e0664",
        "patch": "@@ -0,0 +1,266 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>Intro</class>\n+ <widget class=\"QDialog\" name=\"Intro\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>674</width>\n+    <height>363</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Welcome</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"label_2\">\n+     <property name=\"styleSheet\">\n+      <string notr=\"true\">QLabel { font-style:italic; }</string>\n+     </property>\n+     <property name=\"text\">\n+      <string>Welcome to Bitcoin-Qt.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer_4\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeType\">\n+      <enum>QSizePolicy::Minimum</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>15</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"label_4\">\n+     <property name=\"text\">\n+      <string>As this is the first time the program is launched, you can choose where Bitcoin-Qt will store its data.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n+     <property name=\"text\">\n+      <string>Bitcoin-Qt will download and store a copy of the Bitcoin block chain. At least %1GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirDefault\">\n+     <property name=\"text\">\n+      <string>Use the default data directory</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirCustom\">\n+     <property name=\"text\">\n+      <string>Use a custom data directory:</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <property name=\"spacing\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"sizeConstraint\">\n+      <enum>QLayout::SetDefaultConstraint</enum>\n+     </property>\n+     <item>\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>60</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+       <property name=\"sizeConstraint\">\n+        <enum>QLayout::SetDefaultConstraint</enum>\n+       </property>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"dataDirectory\"/>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"ellipsisButton\">\n+           <property name=\"sizePolicy\">\n+            <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Fixed\">\n+             <horstretch>0</horstretch>\n+             <verstretch>0</verstretch>\n+            </sizepolicy>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>30</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"text\">\n+            <string notr=\"true\">\u2026</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_3\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"freeSpace\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>1</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"text\">\n+          <string/>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_2\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"errorMessage\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::RichText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+      </layout>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>40</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Horizontal</enum>\n+     </property>\n+     <property name=\"standardButtons\">\n+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     </property>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>248</x>\n+     <y>254</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>157</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>316</x>\n+     <y>260</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>286</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "3d1e91efdcfd426b667cde2421983af1a7b29e8e",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d8e949df65960ee92aef3e63136c0b71229e0664",
        "patch": "@@ -500,7 +500,8 @@ HelpMessageBox::HelpMessageBox(QWidget *parent) :\n     uiOptions = tr(\"UI options\") + \":\\n\" +\n         \"  -lang=<lang>           \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n         \"  -min                   \" + tr(\"Start minimized\") + \"\\n\" +\n-        \"  -splash                \" + tr(\"Show splash screen on startup (default: 1)\") + \"\\n\";\n+        \"  -splash                \" + tr(\"Show splash screen on startup (default: 1)\") + \"\\n\" +\n+        \"  -choosedatadir         \" + tr(\"Choose data directory on startup (default: 0)\") + \"\\n\";\n \n     setWindowTitle(tr(\"Bitcoin-Qt\"));\n     setTextFormat(Qt::PlainText);"
      },
      {
        "sha": "51f3c812e47a953a69f2d891a93fc31798d843dd",
        "filename": "src/qt/intro.cpp",
        "status": "added",
        "additions": 270,
        "deletions": 0,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d8e949df65960ee92aef3e63136c0b71229e0664",
        "patch": "@@ -0,0 +1,270 @@\n+#include \"intro.h\"\n+#include \"ui_intro.h\"\n+#include \"util.h\"\n+\n+#include <QFileDialog>\n+#include <QSettings>\n+#include <QMessageBox>\n+\n+#include <boost/filesystem.hpp>\n+\n+/* Minimum free space (in bytes) needed for data directory */\n+static const uint64 GB_BYTES = 1000000000LL;\n+static const uint64 BLOCK_CHAIN_SIZE = 10LL * GB_BYTES;\n+\n+/* Check free space asynchronously to prevent hanging the UI thread.\n+\n+   Up to one request to check a path is in flight to this thread; when the check()\n+   function runs, the current path is requested from the associated Intro object.\n+   The reply is sent back through a signal.\n+\n+   This ensures that no queue of checking requests is built up while the user is\n+   still entering the path, and that always the most recently entered path is checked as\n+   soon as the thread becomes available.\n+*/\n+class FreespaceChecker : public QObject\n+{\n+    Q_OBJECT\n+public:\n+    FreespaceChecker(Intro *intro);\n+\n+    enum Status {\n+        ST_OK,\n+        ST_ERROR\n+    };\n+\n+public slots:\n+    void check();\n+\n+signals:\n+    void reply(int status, const QString &message, quint64 available);\n+\n+private:\n+    Intro *intro;\n+};\n+\n+#include \"intro.moc\"\n+\n+FreespaceChecker::FreespaceChecker(Intro *intro)\n+{\n+    this->intro = intro;\n+}\n+\n+void FreespaceChecker::check()\n+{\n+    namespace fs = boost::filesystem;\n+    QString dataDirStr = intro->getPathToCheck();\n+    fs::path dataDir = fs::path(dataDirStr.toStdString());\n+    uint64 freeBytesAvailable = 0;\n+    int replyStatus = ST_OK;\n+    QString replyMessage = tr(\"A new data directory will be created.\");\n+\n+    /* Find first parent that exists, so that fs::space does not fail */\n+    fs::path parentDir = dataDir;\n+    while(parentDir.has_parent_path() && !fs::exists(parentDir))\n+    {\n+        parentDir = parentDir.parent_path();\n+    }\n+\n+    try {\n+        freeBytesAvailable = fs::space(parentDir).available;\n+        if(fs::exists(dataDir))\n+        {\n+            if(fs::is_directory(dataDir))\n+            {\n+                QString separator = QDir::toNativeSeparators(\"/\");\n+                replyStatus = ST_OK;\n+                replyMessage = tr(\"Directory already exists. Add <code>%1name</code> if you intend to create a new directory here.\").arg(separator);\n+            } else {\n+                replyStatus = ST_ERROR;\n+                replyMessage = tr(\"Path already exists, and is not a directory.\");\n+            }\n+        }\n+    } catch(fs::filesystem_error &e)\n+    {\n+        /* Parent directory does not exist or is not accessible */\n+        replyStatus = ST_ERROR;\n+        replyMessage = tr(\"Cannot create data directory here.\");\n+    }\n+    emit reply(replyStatus, replyMessage, freeBytesAvailable);\n+}\n+\n+\n+Intro::Intro(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::Intro),\n+    thread(0),\n+    signalled(false)\n+{\n+    ui->setupUi(this);\n+    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(BLOCK_CHAIN_SIZE/GB_BYTES));\n+    startThread();\n+}\n+\n+Intro::~Intro()\n+{\n+    delete ui;\n+    /* Ensure thread is finished before it is deleted */\n+    emit stopThread();\n+    thread->wait();\n+}\n+\n+QString Intro::getDataDirectory()\n+{\n+    return ui->dataDirectory->text();\n+}\n+\n+void Intro::setDataDirectory(const QString &dataDir)\n+{\n+    ui->dataDirectory->setText(dataDir);\n+    if(dataDir == getDefaultDataDirectory())\n+    {\n+        ui->dataDirDefault->setChecked(true);\n+        ui->dataDirectory->setEnabled(false);\n+        ui->ellipsisButton->setEnabled(false);\n+    } else {\n+        ui->dataDirCustom->setChecked(true);\n+        ui->dataDirectory->setEnabled(true);\n+        ui->ellipsisButton->setEnabled(true);\n+    }\n+}\n+\n+QString Intro::getDefaultDataDirectory()\n+{\n+    return QString::fromStdString(GetDefaultDataDir().string());\n+}\n+\n+void Intro::pickDataDirectory()\n+{\n+    namespace fs = boost::filesystem;;\n+    QSettings settings;\n+    /* If data directory provided on command line, no need to look at settings\n+       or show a picking dialog */\n+    if(!GetArg(\"-datadir\", \"\").empty())\n+        return;\n+    /* 1) Default data directory for operating system */\n+    QString dataDir = getDefaultDataDirectory();\n+    /* 2) Allow QSettings to override default dir */\n+    dataDir = settings.value(\"strDataDir\", dataDir).toString();\n+\n+    if(!fs::exists(dataDir.toStdString()) || GetBoolArg(\"-choosedatadir\", false))\n+    {\n+        /* If current default data directory does not exist, let the user choose one */\n+        Intro intro;\n+        intro.setDataDirectory(dataDir);\n+        while(true)\n+        {\n+            if(!intro.exec())\n+            {\n+                /* Cancel clicked */\n+                exit(0);\n+            }\n+            dataDir = intro.getDataDirectory();\n+            try {\n+                fs::create_directory(dataDir.toStdString());\n+                break;\n+            } catch(fs::filesystem_error &e) {\n+                QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n+                                      QObject::tr(\"Error: Specified data directory \\\"%1\\\" can not be created.\").arg(dataDir));\n+                /* fall through, back to choosing screen */\n+            }\n+        }\n+\n+        settings.setValue(\"strDataDir\", dataDir);\n+    }\n+    SoftSetArg(\"-datadir\", dataDir.toStdString());\n+}\n+\n+void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable)\n+{\n+    switch(status)\n+    {\n+    case FreespaceChecker::ST_OK:\n+        ui->errorMessage->setText(message);\n+        ui->errorMessage->setStyleSheet(\"\");\n+        break;\n+    case FreespaceChecker::ST_ERROR:\n+        ui->errorMessage->setText(tr(\"Error\") + \": \" + message);\n+        ui->errorMessage->setStyleSheet(\"QLabel { color: #800000 }\");\n+        break;\n+    }\n+    /* Indicate number of bytes available */\n+    if(status == FreespaceChecker::ST_ERROR)\n+    {\n+        ui->freeSpace->setText(\"\");\n+    } else {\n+        QString freeString = QString::number(bytesAvailable/GB_BYTES) + tr(\"GB of free space available\");\n+        if(bytesAvailable < BLOCK_CHAIN_SIZE)\n+        {\n+            freeString += \" \" + tr(\"(of %1GB needed)\").arg(BLOCK_CHAIN_SIZE/GB_BYTES);\n+            ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n+        } else {\n+            ui->freeSpace->setStyleSheet(\"\");\n+        }\n+        ui->freeSpace->setText(freeString+\".\");\n+    }\n+    /* Don't allow confirm in ERROR state */\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(status != FreespaceChecker::ST_ERROR);\n+}\n+\n+void Intro::on_dataDirectory_textChanged(const QString &dataDirStr)\n+{\n+    /* Disable OK button until check result comes in */\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n+    checkPath(dataDirStr);\n+}\n+\n+void Intro::on_ellipsisButton_clicked()\n+{\n+    QString dir = QFileDialog::getExistingDirectory(0, \"Choose data directory\", ui->dataDirectory->text());\n+    if(!dir.isEmpty())\n+        ui->dataDirectory->setText(dir);\n+}\n+\n+void Intro::on_dataDirDefault_clicked()\n+{\n+    setDataDirectory(getDefaultDataDirectory());\n+}\n+\n+void Intro::on_dataDirCustom_clicked()\n+{\n+    ui->dataDirectory->setEnabled(true);\n+    ui->ellipsisButton->setEnabled(true);\n+}\n+\n+void Intro::startThread()\n+{\n+    thread = new QThread(this);\n+    FreespaceChecker *executor = new FreespaceChecker(this);\n+    executor->moveToThread(thread);\n+\n+    connect(executor, SIGNAL(reply(int,QString,quint64)), this, SLOT(setStatus(int,QString,quint64)));\n+    connect(this, SIGNAL(requestCheck()), executor, SLOT(check()));\n+    /*  make sure executor object is deleted in its own thread */\n+    connect(this, SIGNAL(stopThread()), executor, SLOT(deleteLater()));\n+    connect(this, SIGNAL(stopThread()), thread, SLOT(quit()));\n+\n+    thread->start();\n+}\n+\n+void Intro::checkPath(const QString &dataDir)\n+{\n+    mutex.lock();\n+    pathToCheck = dataDir;\n+    if(!signalled)\n+    {\n+        signalled = true;\n+        emit requestCheck();\n+    }\n+    mutex.unlock();\n+}\n+\n+QString Intro::getPathToCheck()\n+{\n+    QString retval;\n+    mutex.lock();\n+    retval = pathToCheck;\n+    signalled = false; /* new request can be queued now */\n+    mutex.unlock();\n+    return retval;\n+}"
      },
      {
        "sha": "b246c65a829dc33ec54d67caf811b307e1f5d902",
        "filename": "src/qt/intro.h",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e949df65960ee92aef3e63136c0b71229e0664/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=d8e949df65960ee92aef3e63136c0b71229e0664",
        "patch": "@@ -0,0 +1,67 @@\n+#ifndef INTRO_H\n+#define INTRO_H\n+\n+#include <QDialog>\n+#include <QThread>\n+#include <QMutex>\n+\n+namespace Ui {\n+class Intro;\n+}\n+class FreespaceChecker;\n+\n+/** Introduction screen (pre-GUI startup).\n+  Allows the user to choose a data directory,\n+  in which the wallet and block chain will be stored.\n+ */\n+class Intro : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit Intro(QWidget *parent = 0);\n+    ~Intro();\n+\n+    QString getDataDirectory();\n+    void setDataDirectory(const QString &dataDir);\n+\n+    /**\n+     * Determine data directory. Let the user choose if the current one doesn't exist.\n+     *\n+     * @note do NOT call global GetDataDir() before calling this function, this\n+     * will cause the wrong path to be cached.\n+     */\n+    static void pickDataDirectory();\n+\n+    /**\n+     * Determine default data directory for operating system.\n+     */\n+    static QString getDefaultDataDirectory();\n+signals:\n+    void requestCheck();\n+    void stopThread();\n+\n+public slots:\n+    void setStatus(int status, const QString &message, quint64 bytesAvailable);\n+\n+private slots:\n+    void on_dataDirectory_textChanged(const QString &arg1);\n+    void on_ellipsisButton_clicked();\n+    void on_dataDirDefault_clicked();\n+    void on_dataDirCustom_clicked();\n+\n+private:\n+    Ui::Intro *ui;\n+    QThread *thread;\n+    QMutex mutex;\n+    bool signalled;\n+    QString pathToCheck;\n+\n+    void startThread();\n+    void checkPath(const QString &dataDir);\n+    QString getPathToCheck();\n+\n+    friend class FreespaceChecker;\n+};\n+\n+#endif // INTRO_H"
      }
    ]
  },
  {
    "sha": "665c98402bac4fe134256bc41f29ea884c3bf67b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjVjOTg0MDJiYWM0ZmUxMzQyNTZiYzQxZjI5ZWE4ODRjM2JmNjdi",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-05-07T11:59:29Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:02Z"
      },
      "message": "Move implementation of some CBlockLocator methods\n\nMove out of main.h to improve compile times and add documentation\nfor what the methods do.",
      "tree": {
        "sha": "acb966372fcec54ed5ce26e4a924f73e232f0b7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acb966372fcec54ed5ce26e4a924f73e232f0b7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/665c98402bac4fe134256bc41f29ea884c3bf67b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/665c98402bac4fe134256bc41f29ea884c3bf67b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/665c98402bac4fe134256bc41f29ea884c3bf67b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/665c98402bac4fe134256bc41f29ea884c3bf67b/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8e949df65960ee92aef3e63136c0b71229e0664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e949df65960ee92aef3e63136c0b71229e0664",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e949df65960ee92aef3e63136c0b71229e0664"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 100,
      "deletions": 89
    },
    "files": [
      {
        "sha": "071c2a559cba116a10638914c38af17cc59373e0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 2,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665c98402bac4fe134256bc41f29ea884c3bf67b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665c98402bac4fe134256bc41f29ea884c3bf67b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=665c98402bac4fe134256bc41f29ea884c3bf67b",
        "patch": "@@ -158,8 +158,6 @@ void static ResendWalletTransactions()\n         pwallet->ResendWalletTransactions();\n }\n \n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // Registration of network node signals.\n@@ -177,7 +175,95 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n     nodeSignals.SendMessages.disconnect(&SendMessages);\n }\n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// CBlockLocator implementation\n+//\n+\n+CBlockLocator::CBlockLocator(uint256 hashBlock)\n+{\n+    std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+    if (mi != mapBlockIndex.end())\n+        Set((*mi).second);\n+}\n+\n+void CBlockLocator::Set(const CBlockIndex* pindex)\n+{\n+    vHave.clear();\n+    int nStep = 1;\n+    while (pindex)\n+    {\n+        vHave.push_back(pindex->GetBlockHash());\n+\n+        // Exponentially larger steps back\n+        for (int i = 0; pindex && i < nStep; i++)\n+            pindex = pindex->pprev;\n+        if (vHave.size() > 10)\n+            nStep *= 2;\n+    }\n+    vHave.push_back(hashGenesisBlock);\n+}\n+\n+int CBlockLocator::GetDistanceBack()\n+{\n+    // Retrace how far back it was in the sender's branch\n+    int nDistance = 0;\n+    int nStep = 1;\n+    BOOST_FOREACH(const uint256& hash, vHave)\n+    {\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        if (mi != mapBlockIndex.end())\n+        {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (pindex->IsInMainChain())\n+                return nDistance;\n+        }\n+        nDistance += nStep;\n+        if (nDistance > 10)\n+            nStep *= 2;\n+    }\n+    return nDistance;\n+}\n+\n+CBlockIndex *CBlockLocator::GetBlockIndex()\n+{\n+    // Find the first block the caller has in the main chain\n+    BOOST_FOREACH(const uint256& hash, vHave)\n+    {\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        if (mi != mapBlockIndex.end())\n+        {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (pindex->IsInMainChain())\n+                return pindex;\n+        }\n+    }\n+    return pindexGenesisBlock;\n+}\n+\n+uint256 CBlockLocator::GetBlockHash()\n+{\n+    // Find the first block the caller has in the main chain\n+    BOOST_FOREACH(const uint256& hash, vHave)\n+    {\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        if (mi != mapBlockIndex.end())\n+        {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (pindex->IsInMainChain())\n+                return hash;\n+        }\n+    }\n+    return hashGenesisBlock;\n+}\n \n+int CBlockLocator::GetHeight()\n+{\n+    CBlockIndex* pindex = GetBlockIndex();\n+    if (!pindex)\n+        return 0;\n+    return pindex->nHeight;\n+}\n \n //////////////////////////////////////////////////////////////////////////////\n //"
      },
      {
        "sha": "23f8030556cac9829de74982d3482404f6f256fc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 12,
        "deletions": 87,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665c98402bac4fe134256bc41f29ea884c3bf67b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665c98402bac4fe134256bc41f29ea884c3bf67b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=665c98402bac4fe134256bc41f29ea884c3bf67b",
        "patch": "@@ -1203,22 +1203,14 @@ class CBlockLocator\n protected:\n     std::vector<uint256> vHave;\n public:\n-\n-    CBlockLocator()\n-    {\n-    }\n+    CBlockLocator() {}\n \n     explicit CBlockLocator(const CBlockIndex* pindex)\n     {\n         Set(pindex);\n     }\n \n-    explicit CBlockLocator(uint256 hashBlock)\n-    {\n-        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n-        if (mi != mapBlockIndex.end())\n-            Set((*mi).second);\n-    }\n+    explicit CBlockLocator(uint256 hashBlock);\n \n     CBlockLocator(const std::vector<uint256>& vHaveIn)\n     {\n@@ -1242,83 +1234,16 @@ class CBlockLocator\n         return vHave.empty();\n     }\n \n-    void Set(const CBlockIndex* pindex)\n-    {\n-        vHave.clear();\n-        int nStep = 1;\n-        while (pindex)\n-        {\n-            vHave.push_back(pindex->GetBlockHash());\n-\n-            // Exponentially larger steps back\n-            for (int i = 0; pindex && i < nStep; i++)\n-                pindex = pindex->pprev;\n-            if (vHave.size() > 10)\n-                nStep *= 2;\n-        }\n-        vHave.push_back(hashGenesisBlock);\n-    }\n-\n-    int GetDistanceBack()\n-    {\n-        // Retrace how far back it was in the sender's branch\n-        int nDistance = 0;\n-        int nStep = 1;\n-        BOOST_FOREACH(const uint256& hash, vHave)\n-        {\n-            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-            if (mi != mapBlockIndex.end())\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                if (pindex->IsInMainChain())\n-                    return nDistance;\n-            }\n-            nDistance += nStep;\n-            if (nDistance > 10)\n-                nStep *= 2;\n-        }\n-        return nDistance;\n-    }\n-\n-    CBlockIndex* GetBlockIndex()\n-    {\n-        // Find the first block the caller has in the main chain\n-        BOOST_FOREACH(const uint256& hash, vHave)\n-        {\n-            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-            if (mi != mapBlockIndex.end())\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                if (pindex->IsInMainChain())\n-                    return pindex;\n-            }\n-        }\n-        return pindexGenesisBlock;\n-    }\n-\n-    uint256 GetBlockHash()\n-    {\n-        // Find the first block the caller has in the main chain\n-        BOOST_FOREACH(const uint256& hash, vHave)\n-        {\n-            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-            if (mi != mapBlockIndex.end())\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                if (pindex->IsInMainChain())\n-                    return hash;\n-            }\n-        }\n-        return hashGenesisBlock;\n-    }\n-\n-    int GetHeight()\n-    {\n-        CBlockIndex* pindex = GetBlockIndex();\n-        if (!pindex)\n-            return 0;\n-        return pindex->nHeight;\n-    }\n+    /** Given a block initialises the locator to that point in the chain. */\n+    void Set(const CBlockIndex* pindex);\n+    /** Returns the distance in blocks this locator is from our chain head. */\n+    int GetDistanceBack();\n+    /** Returns the first best-chain block the locator contains. */\n+    CBlockIndex* GetBlockIndex();\n+    /** Returns the hash of the first best chain block the locator contains. */\n+    uint256 GetBlockHash();\n+    /** Returns the height of the first best chain block the locator has. */\n+    int GetHeight();\n };\n \n "
      }
    ]
  },
  {
    "sha": "ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTQwNWM3MWZkMWNiMWIxYTA0MDNlZWQzY2U2ZjRlZDI5NGY5NWVj",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-05-07T13:16:25Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:04Z"
      },
      "message": "Introduce a CChainParameters singleton class and regtest mode.\n\nThe new class is accessed via the Params() method and holds\nmost things that vary between main, test and regtest networks.\nThe regtest mode has two purposes, one is to run the\nbitcoind/bitcoinj comparison tool which compares two separate\nimplementations of the Bitcoin protocol looking for divergence.\n\nThe other is that when run, you get a local node which can mine\na single block instantly, which is highly convenient for testing\napps during development as there's no need to wait 10 minutes for\na block on the testnet.",
      "tree": {
        "sha": "ca9dceaea14de8dbf14462cee6eaa7ed9cc6a933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca9dceaea14de8dbf14462cee6eaa7ed9cc6a933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "665c98402bac4fe134256bc41f29ea884c3bf67b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/665c98402bac4fe134256bc41f29ea884c3bf67b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/665c98402bac4fe134256bc41f29ea884c3bf67b"
      }
    ],
    "stats": {
      "total": 1111,
      "additions": 540,
      "deletions": 571
    },
    "files": [
      {
        "sha": "83b2a49c52e2982511ec8ebb2158b6cc523d7470",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -147,6 +147,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/addrman.h \\\n     src/base58.h \\\n     src/bignum.h \\\n+    src/chainparams.h \\\n     src/checkpoints.h \\\n     src/compat.h \\\n     src/sync.h \\\n@@ -228,6 +229,7 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/editaddressdialog.cpp \\\n     src/qt/bitcoinaddressvalidator.cpp \\\n     src/alert.cpp \\\n+    src/chainparams.cpp \\\n     src/version.cpp \\\n     src/sync.cpp \\\n     src/util.cpp \\"
      },
      {
        "sha": "f82b102e2aa105174f57554b4a387e32b95f7e2a",
        "filename": "contrib/test-patches/bitcoind-comparison.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 196,
        "changes": 196,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665c98402bac4fe134256bc41f29ea884c3bf67b/contrib/test-patches/bitcoind-comparison.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665c98402bac4fe134256bc41f29ea884c3bf67b/contrib/test-patches/bitcoind-comparison.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/bitcoind-comparison.patch?ref=665c98402bac4fe134256bc41f29ea884c3bf67b",
        "patch": "@@ -1,196 +0,0 @@\n-diff --git a/contrib/test-patches/bitcoind-comparison.patch b/contrib/test-patches/bitcoind-comparison.patch\n-index 04a8618..519429a 100644\n---- a/src/main.cpp\n-+++ b/src/main.cpp\n-@@ -31,8 +31,8 @@ CTxMemPool mempool;\n- \n- map<uint256, CBlockIndex*> mapBlockIndex;\n- std::vector<CBlockIndex*> vBlockIndexByHeight;\n--uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n--static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n-+uint256 hashGenesisBlock(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\");\n-+static CBigNum bnProofOfWorkLimit(~uint256(0) >> 1);\n- CBlockIndex* pindexGenesisBlock = NULL;\n- int nBestHeight = -1;\n- uint256 nBestChainWork = 0;\n-@@ -1055,7 +1055,7 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n-     int64 nSubsidy = 50 * COIN;\n- \n-     // Subsidy is cut in half every 210000 blocks, which will occur approximately every 4 years\n--    nSubsidy >>= (nHeight / 210000);\n-+    nSubsidy >>= (nHeight / 150);\n- \n-     return nSubsidy + nFees;\n- }\n-@@ -2736,9 +2736,9 @@ bool InitBlockIndex() {\n-         block.hashPrevBlock = 0;\n-         block.hashMerkleRoot = block.BuildMerkleTree();\n-         block.nVersion = 1;\n--        block.nTime    = 1231006505;\n--        block.nBits    = 0x1d00ffff;\n--        block.nNonce   = 2083236893;\n-+        block.nTime    = 1296688602;\n-+        block.nBits    = 0x207fffff;\n-+        block.nNonce   = 2;\n- \n-         if (fTestNet)\n-         {\n-@@ -3024,7 +3024,7 @@ bool static AlreadyHave(const CInv& inv)\n- // The message start string is designed to be unlikely to occur in normal data.\n- // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n- // a large 4-byte int at any alignment.\n--unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n-+unsigned char pchMessageStart[4] = { 0xfa, 0xbf, 0xb5, 0xda };\n- \n- \n- void static ProcessGetData(CNode* pfrom)\n-diff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp\n-index af28465..ee9a4db 100644\n---- a/src/test/miner_tests.cpp\n-+++ b/src/test/miner_tests.cpp\n-@@ -15,34 +15,117 @@ struct {\n-     unsigned char extranonce;\n-     unsigned int nonce;\n- } blockinfo[] = {\n--    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n--    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n--    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n--    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n--    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n--    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n--    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n--    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n--    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n--    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n--    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n--    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n--    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n--    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n--    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n--    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n--    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n--    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n--    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n--    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n--    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n--    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n--    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n--    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n--    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n--    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n--    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n--    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n-+{4, 2762203683},\n-+{2, 365113248},\n-+{1, 58045772},\n-+{1, 1879353512},\n-+{2, 3460563607},\n-+{2, 1389355416},\n-+{1, 2007444690},\n-+{2, 3143462790},\n-+{2, 2213743660},\n-+{1, 1218919771},\n-+{1, 4017999107},\n-+{2, 1745471173},\n-+{2, 142846780},\n-+{1, 142326754},\n-+{2, 553953301},\n-+{2, 3757796778},\n-+{1, 4002023946},\n-+{2, 3124901826},\n-+{1, 2802010589},\n-+{1, 877077181},\n-+{3, 3593029427},\n-+{2, 3969866902},\n-+{2, 3392125996},\n-+{1, 1805972490},\n-+{2, 22889779},\n-+{1, 1846647676},\n-+{2, 1139340052},\n-+{2, 664153912},\n-+{2, 3044128027},\n-+{2, 3010194979},\n-+{2, 3514377385},\n-+{2, 1807880922},\n-+{1, 1661815113},\n-+{2, 2588692156},\n-+{2, 1431037239},\n-+{1, 3594379210},\n-+{2, 2701839377},\n-+{1, 1973060452},\n-+{2, 4218620174},\n-+{1, 3895224884},\n-+{1, 3812528857},\n-+{3, 1703867851},\n-+{2, 3123904294},\n-+{5, 36151564},\n-+{1, 2846294357},\n-+{5, 3499546633},\n-+{1, 924279160},\n-+{1, 2198572304},\n-+{1, 3336802574},\n-+{2, 2185182379},\n-+{1, 2575632458},\n-+{1, 1965161345},\n-+{1, 2865408940},\n-+{1, 3594887915},\n-+{5, 2062161796},\n-+{5, 2641251194},\n-+{1, 1290342362},\n-+{1, 2883355438},\n-+{6, 1244984107},\n-+{2, 4065479712},\n-+{2, 465481866},\n-+{1, 2907174016},\n-+{1, 2667735788},\n-+{1, 363417673},\n-+{2, 3519780275},\n-+{2, 4165713317},\n-+{1, 262548689},\n-+{1, 3764359529},\n-+{1, 2027001003},\n-+{5, 1043862655},\n-+{5, 1937481940},\n-+{1, 1664585233},\n-+{1, 1834979792},\n-+{2, 2288070330},\n-+{2, 3915617412},\n-+{1, 3086662813},\n-+{2, 430970259},\n-+{1, 1519443249},\n-+{2, 1540874280},\n-+{2, 2496660261},\n-+{1, 2847522842},\n-+{1, 977329763},\n-+{1, 1458040519},\n-+{5, 2241822454},\n-+{1, 4253963824},\n-+{1, 722247551},\n-+{1, 3127905834},\n-+{1, 1903207432},\n-+{1, 1893631657},\n-+{1, 1960201429},\n-+{1, 1239890082},\n-+{2, 1762702850},\n-+{0, 1681675873},\n-+{1, 1411795775},\n-+{2, 2548720534},\n-+{2, 1427588186},\n-+{2, 65566621},\n-+{1, 2566081936},\n-+{1, 3229297415},\n-+{1, 3756168812},\n-+{1, 826394561},\n-+{1, 3015022068},\n-+{1, 1935326986},\n-+{5, 1648098256},\n-+{2, 3545360164},\n-+{1, 4106897609},\n-+{1, 1528415857},\n-+{1, 2707734286},\n-+{2, 3149837061},\n-+{2, 4263280906},\n-+\n- };\n- \n- // NOTE: These tests rely on CreateNewBlock doing its own self-validation!"
      },
      {
        "sha": "e00847aadb680aa1234f80858c8ac30ac937bdf8",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -19,9 +19,6 @@ using namespace std;\n map<uint256, CAlert> mapAlerts;\n CCriticalSection cs_mapAlerts;\n \n-static const char* pszMainKey = \"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\";\n-static const char* pszTestKey = \"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\";\n-\n void CUnsignedAlert::SetNull()\n {\n     nVersion = 1;\n@@ -144,7 +141,7 @@ bool CAlert::RelayTo(CNode* pnode) const\n \n bool CAlert::CheckSignature() const\n {\n-    CPubKey key(ParseHex(fTestNet ? pszTestKey : pszMainKey));\n+    CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n         return error(\"CAlert::CheckSignature() : verify signature failed\");\n "
      },
      {
        "sha": "630d6fe9aa7421e8796413ed07757cdd70b5e327",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 23,
        "deletions": 84,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -18,6 +18,7 @@\n #include <string>\n #include <vector>\n \n+#include \"chainparams.h\"\n #include \"bignum.h\"\n #include \"key.h\"\n #include \"script.h\"\n@@ -270,21 +271,13 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n class CBitcoinAddress : public CBase58Data\n {\n public:\n-    enum\n-    {\n-        PUBKEY_ADDRESS = 0,\n-        SCRIPT_ADDRESS = 5,\n-        PUBKEY_ADDRESS_TEST = 111,\n-        SCRIPT_ADDRESS_TEST = 196,\n-    };\n-\n     bool Set(const CKeyID &id) {\n-        SetData(fTestNet ? PUBKEY_ADDRESS_TEST : PUBKEY_ADDRESS, &id, 20);\n+        SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n         return true;\n     }\n \n     bool Set(const CScriptID &id) {\n-        SetData(fTestNet ? SCRIPT_ADDRESS_TEST : SCRIPT_ADDRESS, &id, 20);\n+        SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n         return true;\n     }\n \n@@ -295,32 +288,10 @@ class CBitcoinAddress : public CBase58Data\n \n     bool IsValid() const\n     {\n-        unsigned int nExpectedSize = 20;\n-        bool fExpectTestNet = false;\n-        switch(nVersion)\n-        {\n-            case PUBKEY_ADDRESS:\n-                nExpectedSize = 20; // Hash of public key\n-                fExpectTestNet = false;\n-                break;\n-            case SCRIPT_ADDRESS:\n-                nExpectedSize = 20; // Hash of CScript\n-                fExpectTestNet = false;\n-                break;\n-\n-            case PUBKEY_ADDRESS_TEST:\n-                nExpectedSize = 20;\n-                fExpectTestNet = true;\n-                break;\n-            case SCRIPT_ADDRESS_TEST:\n-                nExpectedSize = 20;\n-                fExpectTestNet = true;\n-                break;\n-\n-            default:\n-                return false;\n-        }\n-        return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n+        bool fCorrectSize = vchData.size() == 20;\n+        bool fKnownVersion = nVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                             nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        return fCorrectSize && fKnownVersion;\n     }\n \n     CBitcoinAddress()\n@@ -345,48 +316,27 @@ class CBitcoinAddress : public CBase58Data\n     CTxDestination Get() const {\n         if (!IsValid())\n             return CNoDestination();\n-        switch (nVersion) {\n-        case PUBKEY_ADDRESS:\n-        case PUBKEY_ADDRESS_TEST: {\n-            uint160 id;\n-            memcpy(&id, &vchData[0], 20);\n+        uint160 id;\n+        memcpy(&id, &vchData[0], 20);\n+        if (nVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n             return CKeyID(id);\n-        }\n-        case SCRIPT_ADDRESS:\n-        case SCRIPT_ADDRESS_TEST: {\n-            uint160 id;\n-            memcpy(&id, &vchData[0], 20);\n+        else if (nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n             return CScriptID(id);\n-        }\n-        }\n-        return CNoDestination();\n+        else\n+            return CNoDestination();\n     }\n \n     bool GetKeyID(CKeyID &keyID) const {\n-        if (!IsValid())\n+        if (!IsValid() || nVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n             return false;\n-        switch (nVersion) {\n-        case PUBKEY_ADDRESS:\n-        case PUBKEY_ADDRESS_TEST: {\n-            uint160 id;\n-            memcpy(&id, &vchData[0], 20);\n-            keyID = CKeyID(id);\n-            return true;\n-        }\n-        default: return false;\n-        }\n+        uint160 id;\n+        memcpy(&id, &vchData[0], 20);\n+        keyID = CKeyID(id);\n+        return true;\n     }\n \n     bool IsScript() const {\n-        if (!IsValid())\n-            return false;\n-        switch (nVersion) {\n-        case SCRIPT_ADDRESS:\n-        case SCRIPT_ADDRESS_TEST: {\n-            return true;\n-        }\n-        default: return false;\n-        }\n+        return IsValid() && nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n     }\n };\n \n@@ -401,7 +351,7 @@ class CBitcoinSecret : public CBase58Data\n     void SetKey(const CKey& vchSecret)\n     {\n         assert(vchSecret.IsValid());\n-        SetData(fTestNet ? 239 : 128, vchSecret.begin(), vchSecret.size());\n+        SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n         if (vchSecret.IsCompressed())\n             vchData.push_back(1);\n     }\n@@ -415,20 +365,9 @@ class CBitcoinSecret : public CBase58Data\n \n     bool IsValid() const\n     {\n-        bool fExpectTestNet = false;\n-        switch(nVersion)\n-        {\n-            case 128:\n-                break;\n-\n-            case 239:\n-                fExpectTestNet = true;\n-                break;\n-\n-            default:\n-                return false;\n-        }\n-        return fExpectTestNet == fTestNet && (vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1));\n+        bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n+        bool fCorrectVersion = nVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        return fExpectedFormat && fCorrectVersion;\n     }\n \n     bool SetString(const char* pszSecret)"
      },
      {
        "sha": "bc23cf55071009fc06f483d1b02f6fb38abd5a9d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -67,6 +67,10 @@ bool AppInit(int argc, char* argv[])\n \n         if (fCommandLine)\n         {\n+            if (!SelectParamsFromCommandLine()) {\n+                fprintf(stderr, \"Error: invalid combination of -regtest and -testnet.\\n\");\n+                return false;\n+            }\n             int ret = CommandLineRPC(argc, argv);\n             exit(ret);\n         }"
      },
      {
        "sha": "febb475db38056ebe51705378072abc043c7592d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"init.h\"\n #include \"util.h\"\n #include \"sync.h\"\n@@ -38,11 +39,6 @@ static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n \n-static inline unsigned short GetDefaultRPCPort()\n-{\n-    return GetBoolArg(\"-testnet\", false) ? 18332 : 8332;\n-}\n-\n Object JSONRPCError(int code, const string& message)\n {\n     Object error;\n@@ -724,8 +720,8 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n void StartRPCThreads()\n {\n     strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n-    if ((mapArgs[\"-rpcpassword\"] == \"\") ||\n-        (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"]))\n+    if (((mapArgs[\"-rpcpassword\"] == \"\") ||\n+         (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"])) && Params().RequireRPCPassword())\n     {\n         unsigned char rand_pwd[32];\n         RAND_bytes(rand_pwd, 32);\n@@ -780,7 +776,7 @@ void StartRPCThreads()\n     // Try a dual IPv6/IPv4 socket, falling back to separate IPv4 and IPv6 sockets\n     const bool loopback = !mapArgs.count(\"-rpcallowip\");\n     asio::ip::address bindAddress = loopback ? asio::ip::address_v6::loopback() : asio::ip::address_v6::any();\n-    ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", GetDefaultRPCPort()));\n+    ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", Params().RPCPort()));\n     boost::system::error_code v6_only_error;\n     boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n \n@@ -1078,7 +1074,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n     asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n     SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n     iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n-    if (!d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(GetDefaultRPCPort()))))\n+    if (!d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort()))))\n         throw runtime_error(\"couldn't connect to server\");\n \n     // HTTP basic authentication"
      },
      {
        "sha": "8859424d201a6d58808a2f7e52c43d4b51a1178d",
        "filename": "src/chainparams.cpp",
        "status": "added",
        "additions": 286,
        "deletions": 0,
        "changes": 286,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -0,0 +1,286 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"assert.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+//\n+// Main network\n+//\n+\n+unsigned int pnSeed[] =\n+{\n+    0xe473042e, 0xb177f2ad, 0xd63f3fb2, 0xf864f736, 0x44a23ac7, 0xcf6d9650, 0xd648042e, 0x0536f447,\n+    0x3c654ed0, 0x3e16a5bc, 0xa38e09b0, 0xdfae795b, 0xabfeca5b, 0x94ad7840, 0xf3b9f1c7, 0xbe70e0ad,\n+    0x3bbd09b0, 0x8d0c7dd5, 0x3b2a7332, 0x1a06175e, 0x581f175e, 0xca0d2dcc, 0x0fdbc658, 0xcf591ec7,\n+    0x295a12b2, 0xb4707bce, 0x68bb09b0, 0x4e735747, 0x89709553, 0x05a7814e, 0x5b8ec658, 0x402c5512,\n+    0xe80d0905, 0x17681a5e, 0xc02aa748, 0x9f811741, 0x5f321cb0, 0x23e1ee47, 0xaf7f170c, 0xaa240ab0,\n+    0xedea6257, 0x76106bc1, 0x2cf310cc, 0x08612acb, 0x9c682e4e, 0x8e963c6c, 0x443c795b, 0x22e246b8,\n+    0xfa1f2dcc, 0x90118140, 0x3821042e, 0x33c3fd2e, 0x10046d5b, 0x40d14b3e, 0x7fb8f8ce, 0x67696550,\n+    0xeeecbe58, 0x4f341745, 0x46b8fbd5, 0xc8463932, 0x6b73e862, 0x4c715932, 0x4a6785d5, 0xce3a64c2,\n+    0xde9604c7, 0x9b06884f, 0x18002a45, 0xea9bc345, 0xc4f1c658, 0xe475c1c7, 0xdd3e795b, 0x9722175e,\n+    0x34562f4e, 0x66c46e4e, 0x40bb1243, 0x7d9171d0, 0x17b8dbd5, 0x63cbfd2e, 0x1a08b8d8, 0x6175a73b,\n+    0x228d2660, 0x8627c658, 0x9c566644, 0x38cca5bc, 0x3089de5b, 0x92e25f5d, 0xa393f73f, 0xcc92dc3e,\n+    0x27487446, 0x62cbfd2e, 0x9d983b45, 0xf72a09b0, 0xf75f042e, 0x6434bb6a, 0xb29e77d8, 0x19be4fd9,\n+    0x76443243, 0x9dd72645, 0x694cef43, 0x89c2efd5, 0x5f1c5058, 0x46c6e45b, 0xe1391b40, 0x77ccefd5,\n+    0x472e5a6d, 0x85709553, 0xdd4f5d4c, 0x64ef5a46, 0x7f0ae502, 0xcf08d850, 0x3460042e, 0xeafa2d42,\n+    0x793c9044, 0x9d094746, 0x1ab9b153, 0xbfe9a5bc, 0x34771fb0, 0xb7722e32, 0x1168964b, 0x19b06ab8,\n+    0x19243b25, 0x13188045, 0xb4070905, 0x728ebb5d, 0x44f24ac8, 0xa317fead, 0x642f6a57, 0x3d951f32,\n+    0x3d312e4e, 0xfac4d048, 0xefc4dd50, 0x52b9f1c7, 0xc14d3cc3, 0x0219ea44, 0x3b79d058, 0xfa217242,\n+    0x39c80647, 0xfb697252, 0x1d495a42, 0x0aa81f4e, 0x58249ab8, 0xe6a8e6c3, 0x2bc4dad8, 0x85963c6c,\n+    0xa4ce09b0, 0x2005f536, 0x5cc2703e, 0x1992de43, 0x74e86b4c, 0xe7085653, 0xf5e15a51, 0xb4872b60,\n+    0x29e2b162, 0xa07ea053, 0x8229fd18, 0x4562ec4d, 0x8dec814e, 0x36cfa4cf, 0x96461032, 0x3c8770de,\n+    0xd10a1f5f, 0x95934641, 0x97cd65d0, 0x2e35324a, 0x2566ba1f, 0x1ca1a9d1, 0xb808b8d5, 0xf9a24a5d,\n+    0xafc8d431, 0xe4b8d9b2, 0x0f5321b2, 0x330bc658, 0x74b347ce, 0x972babd5, 0x044f7d4f, 0x06562f4e,\n+    0x8b8d3c6c, 0x3507c658, 0xe4174e4d, 0xf1c009b0, 0x52249ab8, 0x27211772, 0xf6a9ba59, 0x7a391b40,\n+    0x855dc6c0, 0x291f20b2, 0xe29bc345, 0x90963c6c, 0x0af70732, 0x4242a91f, 0x4c531d48, 0xa32df948,\n+    0x627e3044, 0x65be1f54, 0x1a0cbf83, 0x6a443532, 0x8d5f1955, 0xbafa8132, 0x3534bdd5, 0xca019dd9,\n+    0x8a0d9332, 0x5584e7d8, 0x7cd1f25e, 0xeabe3fb2, 0x2945d0d1, 0x46415718, 0x70d6042e, 0x99eb76d0,\n+    0x9ece09b0, 0xb3777418, 0x5e5e91d9, 0x237a3ab0, 0xf512b62e, 0x45dec347, 0x59b7f862, 0x4c443b25,\n+    0x3cc6484b, 0x9a8ec6d1, 0x021eea44, 0xc9483944, 0xfd567e32, 0xfd204bb2, 0xc5330bcc, 0x5202894e,\n+    0xf9e309b0, 0x4cc17557, 0xdb9064ae, 0xe19e77d8, 0x25857f60, 0xeb4a15ad, 0x1f47f554, 0xea4472d9,\n+    0xd20de593, 0xf5733b25, 0x11892b54, 0x5729d35f, 0xe6188cd1, 0x488b132e, 0x541c534a, 0xa8e854ae,\n+    0xa255a66c, 0x33688763, 0xc6629ac6, 0xc20a6265, 0xcd92a059, 0x72029d3b, 0x4c298f5e, 0x51452e4e,\n+    0xbb065058, 0x15fd2dcc, 0xf40c135e, 0x615a0bad, 0x0c6a6805, 0x4971a7ad, 0x17f2a5d5, 0xf8babf47,\n+    0xb61f50ad, 0x4e1451b1, 0xf72d9252, 0x5c2abe58, 0xbd987c61, 0x084ae5cf, 0x20781fb0, 0x38b0f160,\n+    0x18aac705, 0x14f86dc1, 0x5556f481, 0x0a36c144, 0xeb446e4c, 0x2c1c0d6c, 0xbd0ff860, 0x869f92db,\n+    0x36c94f4c, 0x05502444, 0x148fe55b, 0xd5301e59, 0xd57a8f45, 0x110dc04a, 0x8670fc36, 0xee733b25,\n+    0xca56f481, 0x2a5c3bae, 0x844b0905, 0x1e51fe53, 0x0241c244, 0x59c0614e, 0x94e70a55, 0x7312fead,\n+    0xb735be44, 0xa55d0905, 0x2f63962e, 0x14a4e15b, 0x63f8f05c, 0x62d0d262, 0x3cab41ad, 0x87f1b1cb,\n+    0x018da6b8, 0xb3967dd5, 0xcb56f481, 0x685ad718, 0x3b4aeeca, 0x8d106bc1, 0x51180905, 0x72660f48,\n+    0x1521a243, 0x5b56f481, 0x6390e560, 0xdd61464e, 0x58353b25, 0x553fc062, 0x27c45d59, 0xacc62e4e,\n+    0x0d5a1cd9, 0x7f65f442, 0xbdeef660, 0xf1bd1855, 0xf8473cae, 0x13b120b2, 0x442440d0, 0x53fd4352,\n+    0xa305fc57, 0x458be84d, 0x639ce1c3, 0xebaaee47, 0x95e2c247, 0xf056f481, 0x6256f481, 0x1d87c65e,\n+    0x0a453418, 0x5beb175e, 0xd64f1618, 0xc360795b, 0x2fbf5753, 0xa8c58e53, 0x651cec52, 0x9d37b043,\n+    0x124a9758, 0x5242e4a9, 0x89913c6c, 0x880efe2e, 0x2f2f2f0c, 0x72b26751, 0x2896e46d, 0x80f4166c,\n+    0x320d59ad, 0xc50151d0, 0x11a8aa43, 0xccf56057, 0x5fbad118, 0x4719b151, 0x2b5f4bc0, 0x4d7a4a50,\n+    0xad06e047, 0x62ef5a46, 0x5aebde58, 0xdf7aa66c, 0x851acb50, 0x66b9a559, 0x3e9bb153, 0xcc512f2e,\n+    0xc073b08e, 0xd519be58, 0xe981ea4d, 0x12fd50cb, 0x378739ad, 0x06683cae, 0xa22310b2, 0xc185c705,\n+    0x8741b545, 0xa26c8318, 0x22d5bc43, 0x39201ec0, 0x68581e3e, 0xdc9bcf62, 0xd508cc82, 0xb149675b,\n+    0x4c9609b0, 0x84feb84c, 0x08291e2e, 0xfd2253b2, 0x1fd269c1, 0xc9483932, 0x4d641fb0, 0x7d37c918,\n+    0xa9de20ad, 0x77e2d655, 0x6d421b59, 0xd7668f80, 0xced09b62, 0xa9e5a5bc, 0xa4074e18, 0x60fc5ecc,\n+    0x01300148, 0x68062444, 0xb4224847, 0xed3aa443, 0xb772fb43, 0x9f56f481, 0x220dfd18, 0x8e1c3d6c,\n+    0xc44f09b0, 0x7df2bb73, 0xe22fb844, 0xea534242, 0xb6a755d4, 0xa036654b, 0x138ece5b, 0xda65d3c3,\n+    0x955871bc, 0x792124b0, 0xfc82594c, 0x851d494b, 0x2c7aee47, 0x26af46b8, 0x1416252e, 0xa8abb944,\n+    0x36c49d25, 0x674f645d, 0x363646b8, 0x9e1a2942, 0x66d0c154, 0xc6c2a545, 0x3570f2ad, 0xe7d547c7,\n+    0x7d104932, 0x18cb9c18, 0x1dcfa4cf, 0xd156f481, 0x2a02b91f, 0x3eeb3fa8, 0xcac4175e, 0x34146d42,\n+    0x994c4d46, 0x5666f440, 0x85d6713e, 0x5ecb296c, 0x0ea0ae46, 0x87e69f42, 0xc58409b0, 0x1f3436ae,\n+    0x21dc6a57, 0x4ad1cd42, 0xfb8c1a4c, 0x52d3dab2, 0x3769894b, 0xb52f1c62, 0x3677916d, 0x82b3fe57,\n+    0x493d4ac6, 0x9f963c6c, 0x5d91ff60, 0x458e0dad, 0xa49d0947, 0x491a3e18, 0x4aadcd5b, 0x0e46494b,\n+    0x1d1610ad, 0x1a10af5d, 0x4956f481, 0x207a3eae, 0x77e73244, 0xfa3b8742, 0x3261fc36, 0xfcebf536,\n+    0x1662e836, 0xf655f636, 0xa2dbd0ad, 0x23036693, 0x30448432, 0xa2b03463, 0x30730344, 0x8e4a6882,\n+    0x0c50a1cb, 0xc8d8c06b, 0xc9cd6191, 0xf443db50, 0xa9553c50, 0x23145847, 0xc35da66c, 0x29c12a60,\n+    0x55c2b447, 0x7434f75c, 0x61660640, 0xde2a7018, 0xc639494c, 0x1c306fce, 0x19b89244, 0xd29a6462,\n+    0x462cd1b2, 0x29902f44, 0x2817fa53, 0x21a30905, 0x7777ae46, 0x288443a1, 0x7bee5148, 0xc2a8b043,\n+    0xf5c3d35f, 0x2311ef84, 0x57de08a4, 0x6b221bb2, 0xf2625846, 0x4b9e09b0, 0xa24f880e, 0x22b11447,\n+    0xb3a0c744, 0x919e77d8, 0xec8b64ae, 0xff5c8d45, 0x7b15b484, 0x32679a5f, 0xba80b62e, 0x05c25c61,\n+    0x60014746, 0x5e8fb04c, 0xe67c0905, 0x4329c658, 0xac8fe555, 0xf875e647, 0x67406386, 0x35ceea18,\n+    0xbb79484b, 0xd7b9fa62, 0x238209b0, 0x208a1d32, 0x9630995e, 0x039c1318, 0x6e48006c, 0x60582344,\n+    0xadbb0150, 0x853fd462, 0x03772e4e, 0x652ce960, 0x49b630ad, 0x9993af43, 0x3735b34b, 0x548a07d9,\n+    0x55a44aad, 0xa23d1bcc, 0xfdbb2f4e, 0x530b24a0, 0x0a44b451, 0x6827c657, 0x1f66494b, 0x4e680a47,\n+    0x77e7b747, 0xa5eb3fa8, 0x6649764a, 0xd4e76c4b, 0x2c691fb0, 0xf1292e44, 0xc6d6c774, 0x85d23775,\n+    0x28275f4d, 0x259ae46d, 0x02424e81, 0x5f16be58, 0xe707c658, 0x49eae5c7, 0xd5d147ad, 0x9a7abdc3,\n+    0xe8ac7fc7, 0x84ec3aae, 0xc24942d0, 0x294aa318, 0x08ac3d18, 0x8894042e, 0xb24609b0, 0x9bcaab58,\n+    0xc400f712, 0xd5c512b8, 0x2c02cc62, 0x25080fd8, 0xed74a847, 0x18a5ec5e, 0x9850ec6d, 0xf8909758,\n+    0x7f56f481, 0x4496f23c, 0xae27784f, 0xcb7cd93e, 0x06e32860, 0x50b9a84f, 0x3660434a, 0x09161f5f,\n+    0x900486bc, 0x08055459, 0xe7ec1017, 0x7e39494c, 0x4f443b25, 0x14751a8a, 0x717d03d4, 0xbd0e24d8,\n+    0x054b6f56, 0x854c496c, 0xd92a454a, 0xc39bd054, 0x6093614b, 0x9dbad754, 0x5bf0604a, 0x99f22305\n+};\n+\n+class CMainParams : public CChainParams {\n+public:\n+    CMainParams() {\n+        // The message start string is designed to be unlikely to occur in normal data.\n+        // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+        // a large 4-byte int at any alignment.\n+        pchMessageStart[0] = 0xf9;\n+        pchMessageStart[1] = 0xbe;\n+        pchMessageStart[2] = 0xb4;\n+        pchMessageStart[3] = 0xd9;\n+        vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n+        nDefaultPort = 8333;\n+        nRPCPort = 8332;\n+        bnProofOfWorkLimit = CBigNum(~uint256(0) >> 32);\n+        nSubsidyHalvingInterval = 210000;\n+\n+        // Build the genesis block. Note that the output of the genesis coinbase cannot\n+        // be spent as it did not originally exist in the database.\n+        //\n+        // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+        //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+        //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+        //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+        //   vMerkleTree: 4a5e1e\n+        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+        CTransaction txNew;\n+        txNew.vin.resize(1);\n+        txNew.vout.resize(1);\n+        txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+        txNew.vout[0].nValue = 50 * COIN;\n+        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+        genesis.vtx.push_back(txNew);\n+        genesis.hashPrevBlock = 0;\n+        genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+        genesis.nVersion = 1;\n+        genesis.nTime    = 1231006505;\n+        genesis.nBits    = 0x1d00ffff;\n+        genesis.nNonce   = 2083236893;\n+\n+        hashGenesisBlock = genesis.GetHash();\n+        assert(hashGenesisBlock == uint256(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        assert(genesis.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\"));\n+        vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\"));\n+        vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = 0;\n+        base58Prefixes[SCRIPT_ADDRESS] = 5;\n+        base58Prefixes[SECRET_KEY] = 128;\n+\n+        // Convert the pnSeeds array into usable address objects.\n+        for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n+        {\n+            // It'll only connect to one or two seed nodes because once it connects,\n+            // it'll get a pile of addresses with newer timestamps.\n+            // Seed nodes are given a random 'last seen time' of between one and two\n+            // weeks ago.\n+            const int64 nOneWeek = 7*24*60*60;\n+            struct in_addr ip;\n+            memcpy(&ip, &pnSeed[i], sizeof(ip));\n+            CAddress addr(CService(ip, GetDefaultPort()));\n+            addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n+            vFixedSeeds.push_back(addr);\n+        }\n+    }\n+\n+    virtual const CBlock& GenesisBlock() const { return genesis; }\n+    virtual Network NetworkID() const { return CChainParams::MAIN; }\n+\n+    virtual const vector<CAddress>& FixedSeeds() const {\n+        return vFixedSeeds;\n+    }\n+protected:\n+    CBlock genesis;\n+    vector<CAddress> vFixedSeeds;\n+};\n+static CMainParams mainParams;\n+\n+\n+//\n+// Testnet (v3)\n+//\n+class CTestNetParams : public CMainParams {\n+public:\n+    CTestNetParams() {\n+        // The message start string is designed to be unlikely to occur in normal data.\n+        // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+        // a large 4-byte int at any alignment.\n+        pchMessageStart[0] = 0x0b;\n+        pchMessageStart[1] = 0x11;\n+        pchMessageStart[2] = 0x09;\n+        pchMessageStart[3] = 0x07;\n+        vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n+        nDefaultPort = 18333;\n+        nRPCPort = 18332;\n+        strDataDir = \"testnet3\";\n+\n+        // Modify the testnet genesis block so the timestamp is valid for a later start.\n+        genesis.nTime = 1296688602;\n+        genesis.nNonce = 414098458;\n+        hashGenesisBlock = genesis.GetHash();\n+        assert(hashGenesisBlock == uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = 111;\n+        base58Prefixes[SCRIPT_ADDRESS] = 196;\n+        base58Prefixes[SECRET_KEY] = 239;\n+\n+    }\n+    virtual Network NetworkID() const { return CChainParams::TESTNET; }\n+};\n+static CTestNetParams testNetParams;\n+\n+\n+//\n+// Regression test\n+//\n+class CRegTestParams : public CTestNetParams {\n+public:\n+    CRegTestParams() {\n+        pchMessageStart[0] = 0xfa;\n+        pchMessageStart[1] = 0xbf;\n+        pchMessageStart[2] = 0xb5;\n+        pchMessageStart[3] = 0xda;\n+        nSubsidyHalvingInterval = 150;\n+        bnProofOfWorkLimit = CBigNum(~uint256(0) >> 1);\n+        genesis.nTime = 1296688602;\n+        genesis.nBits = 0x207fffff;\n+        genesis.nNonce = 2;\n+        hashGenesisBlock = genesis.GetHash();\n+        nDefaultPort = 18444;\n+        strDataDir = \"regtest\";\n+        assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = 0;\n+        base58Prefixes[SCRIPT_ADDRESS] = 5;\n+        base58Prefixes[SECRET_KEY] = 128;\n+    }\n+\n+    virtual bool RequireRPCPassword() const { return false; }\n+    virtual Network NetworkID() const { return CChainParams::REGTEST; }\n+};\n+static CRegTestParams regTestParams;\n+\n+static CChainParams *pCurrentParams = &mainParams;\n+\n+const CChainParams &Params() {\n+    return *pCurrentParams;\n+}\n+\n+void SelectParams(CChainParams::Network network) {\n+    switch (network) {\n+        case CChainParams::MAIN:\n+            pCurrentParams = &mainParams;\n+            break;\n+        case CChainParams::TESTNET:\n+            pCurrentParams = &testNetParams;\n+            break;\n+        case CChainParams::REGTEST:\n+            pCurrentParams = &regTestParams;\n+            break;\n+        default:\n+            assert(false && \"Unimplemented network\");\n+            return;\n+    }\n+}\n+\n+bool SelectParamsFromCommandLine() {\n+    bool fRegTest = GetBoolArg(\"-regtest\", false);\n+    bool fTestNet = GetBoolArg(\"-testnet\", false);\n+\n+    if (fTestNet && fRegTest) {\n+        return false;\n+    }\n+\n+    if (fRegTest) {\n+        SelectParams(CChainParams::REGTEST);\n+    } else if (fTestNet) {\n+        SelectParams(CChainParams::TESTNET);\n+    } else {\n+        SelectParams(CChainParams::MAIN);\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "572712b5893091ddab8f0d3cde9f7fd6dc79506b",
        "filename": "src/chainparams.h",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHAIN_PARAMS_H\n+#define BITCOIN_CHAIN_PARAMS_H\n+\n+#include \"bignum.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <vector>\n+\n+using namespace std;\n+\n+#define MESSAGE_START_SIZE 4\n+typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n+\n+class CAddress;\n+class CBlock;\n+\n+struct CDNSSeedData {\n+    string name, host;\n+    CDNSSeedData(const string &strName, const string &strHost) : name(strName), host(strHost) {}\n+};\n+\n+/**\n+ * CChainParams defines various tweakable parameters of a given instance of the\n+ * Bitcoin system. There are three: the main network on which people trade goods\n+ * and services, the public test network which gets reset from time to time and\n+ * a regression test mode which is intended for private networks only. It has\n+ * minimal difficulty to ensure that blocks can be found instantly.\n+ */\n+class CChainParams\n+{\n+public:\n+    enum Network {\n+        MAIN,\n+        TESTNET,\n+        REGTEST,\n+    };\n+\n+    enum Base58Type {\n+        PUBKEY_ADDRESS,\n+        SCRIPT_ADDRESS,\n+        SECRET_KEY,\n+\n+        MAX_BASE58_TYPES\n+    };\n+\n+    const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n+    const MessageStartChars& MessageStart() const { return pchMessageStart; }\n+    const vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n+    int GetDefaultPort() const { return nDefaultPort; }\n+    const CBigNum& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n+    int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n+    virtual const CBlock& GenesisBlock() const = 0;\n+    virtual bool RequireRPCPassword() const { return true; }\n+    const string& DataDir() const { return strDataDir; }\n+    virtual Network NetworkID() const = 0;\n+    const vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n+    int Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    virtual const vector<CAddress>& FixedSeeds() const = 0;\n+    int RPCPort() const { return nRPCPort; }\n+protected:\n+    CChainParams() {};\n+\n+    uint256 hashGenesisBlock;\n+    MessageStartChars pchMessageStart;\n+    // Raw pub key bytes for the broadcast alert signing key.\n+    vector<unsigned char> vAlertPubKey;\n+    int nDefaultPort;\n+    int nRPCPort;\n+    CBigNum bnProofOfWorkLimit;\n+    int nSubsidyHalvingInterval;\n+    string strDataDir;\n+    vector<CDNSSeedData> vSeeds;\n+    int base58Prefixes[MAX_BASE58_TYPES];\n+};\n+\n+/**\n+ * Return the currently selected parameters. This won't change after app startup\n+ * outside of the unit tests.\n+ */\n+const CChainParams &Params();\n+\n+/** Sets the params returned by Params() to those for the given network. */\n+void SelectParams(CChainParams::Network network);\n+\n+/**\n+ * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n+ * Returns false if an invalid combination is given.\n+ */\n+bool SelectParamsFromCommandLine();\n+\n+inline bool TestNet() {\n+    // Note: it's deliberate that this returns \"false\" for regression test mode.\n+    return Params().NetworkID() == CChainParams::TESTNET;\n+}\n+\n+#endif"
      },
      {
        "sha": "ba29e2463ebe7a499b03f11ec4f44fd3371a0277",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -56,7 +56,7 @@ namespace Checkpoints\n         60000.0     // * estimated number of transactions per day after checkpoint\n     };\n \n-    static MapCheckpoints mapCheckpointsTestnet = \n+    static MapCheckpoints mapCheckpointsTestnet =\n         boost::assign::map_list_of\n         ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n         ;\n@@ -68,7 +68,7 @@ namespace Checkpoints\n     };\n \n     const CCheckpointData &Checkpoints() {\n-        if (fTestNet)\n+        if (TestNet())\n             return dataTestnet;\n         else\n             return data;"
      },
      {
        "sha": "93f3f5d8c440dc9d4abc8c8b6dcfbd3eb783a521",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"db.h\"\n #include \"util.h\"\n #include \"hash.h\"\n@@ -488,8 +489,6 @@ void CDBEnv::Flush(bool fShutdown)\n // CAddrDB\n //\n \n-unsigned char CAddrDB::pchMessageStart[4] = { 0x00, 0x00, 0x00, 0x00 };\n-\n CAddrDB::CAddrDB()\n {\n     pathAddr = GetDataDir() / \"peers.dat\";\n@@ -504,7 +503,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n \n     // serialize addresses, checksum data up to that point, then append csum\n     CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n-    ssPeers << FLATDATA(CAddrDB::pchMessageStart);\n+    ssPeers << FLATDATA(Params().MessageStart());\n     ssPeers << addr;\n     uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n     ssPeers << hash;\n@@ -569,11 +568,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n     unsigned char pchMsgTmp[4];\n     try {\n-        // de-serialize file header (CAddrDB::pchMessageStart magic number) and\n+        // de-serialize file header (network specific magic number) and ..\n         ssPeers >> FLATDATA(pchMsgTmp);\n \n-        // verify the network matches ours\n-        if (memcmp(pchMsgTmp, CAddrDB::pchMessageStart, sizeof(pchMsgTmp)))\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n             return error(\"CAddrman::Read() : invalid network magic number\");\n \n         // de-serialize address data into one CAddrMan object"
      },
      {
        "sha": "b3f269f3dabbe5f8c9f8ae08ba498ec330ebca74",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -318,14 +318,10 @@ class CAddrDB\n {\n private:\n     boost::filesystem::path pathAddr;\n-    static unsigned char pchMessageStart[4];\n-\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n     bool Read(CAddrMan& addr);\n-\n-    static void SetMessageStart(unsigned char _pchMessageStart[]) { memcpy(CAddrDB::pchMessageStart, _pchMessageStart, sizeof(CAddrDB::pchMessageStart)); }\n };\n \n #endif // BITCOIN_DB_H"
      },
      {
        "sha": "4e599048ac1f942fe5791dd4f218a6c26165bfb3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -6,13 +6,15 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"core.h\"\n+#include \"chainparams.h\"\n #include \"txdb.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"checkpoints.h\"\n+#include \"chainparams.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -210,6 +212,8 @@ std::string HelpMessage()\n     strUsage += \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\";\n     strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n     strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n #ifdef WIN32\n     strUsage += \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\";\n #endif\n@@ -366,8 +370,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 2: parameter interactions\n \n-    fTestNet = GetBoolArg(\"-testnet\", false);\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n+    if (!SelectParamsFromCommandLine()) {\n+        return InitError(\"Invalid combination of -testnet and -regtest.\");\n+    }\n \n     if (mapArgs.count(\"-bind\")) {\n         // when specifying an explicit binding address, you want to listen on it\n@@ -572,7 +578,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // ********************************************************* Step 6: network initialization\n \n     RegisterNodeSignals(GetNodeSignals());\n- \n+\n     int nSocksVersion = GetArg(\"-socks\", 5);\n     if (nSocksVersion != 4 && nSocksVersion != 5)\n         return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));\n@@ -937,7 +943,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     nStart = GetTimeMillis();\n \n     {\n-        CAddrDB::SetMessageStart(pchMessageStart);\n         CAddrDB adb;\n         if (!adb.Read(addrman))\n             printf(\"Invalid or missing peers.dat; recreating\\n\");"
      },
      {
        "sha": "9b5459cae3d790d6b4623641fbcc30b33b2e5acc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 94,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -11,6 +11,7 @@\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"checkqueue.h\"\n+#include \"chainparams.h\"\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -32,8 +33,6 @@ unsigned int nTransactionsUpdated = 0;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n std::vector<CBlockIndex*> vBlockIndexByHeight;\n-uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n-static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n uint256 nBestChainWork = 0;\n@@ -201,7 +200,7 @@ void CBlockLocator::Set(const CBlockIndex* pindex)\n         if (vHave.size() > 10)\n             nStep *= 2;\n     }\n-    vHave.push_back(hashGenesisBlock);\n+    vHave.push_back(Params().HashGenesisBlock());\n }\n \n int CBlockLocator::GetDistanceBack()\n@@ -254,7 +253,7 @@ uint256 CBlockLocator::GetBlockHash()\n                 return hash;\n         }\n     }\n-    return hashGenesisBlock;\n+    return Params().HashGenesisBlock();\n }\n \n int CBlockLocator::GetHeight()\n@@ -783,7 +782,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !IsStandardTx(tx))\n+    if (!TestNet() && !IsStandardTx(tx))\n         return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n \n     // is it already in the memory pool?\n@@ -858,7 +857,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!AreInputsStandard(tx, view) && !fTestNet)\n+        if (!TestNet() && !AreInputsStandard(tx, view))\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then\n@@ -1168,8 +1167,8 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n {\n     int64 nSubsidy = 50 * COIN;\n \n-    // Subsidy is cut in half every 210000 blocks, which will occur approximately every 4 years\n-    nSubsidy >>= (nHeight / 210000);\n+    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n+    nSubsidy >>= (nHeight / Params().SubsidyHalvingInterval());\n \n     return nSubsidy + nFees;\n }\n@@ -1184,28 +1183,29 @@ static const int64 nInterval = nTargetTimespan / nTargetSpacing;\n //\n unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n {\n+    const CBigNum &bnLimit = Params().ProofOfWorkLimit();\n     // Testnet has min-difficulty blocks\n     // after nTargetSpacing*2 time between blocks:\n-    if (fTestNet && nTime > nTargetSpacing*2)\n-        return bnProofOfWorkLimit.GetCompact();\n+    if (TestNet() && nTime > nTargetSpacing*2)\n+        return bnLimit.GetCompact();\n \n     CBigNum bnResult;\n     bnResult.SetCompact(nBase);\n-    while (nTime > 0 && bnResult < bnProofOfWorkLimit)\n+    while (nTime > 0 && bnResult < bnLimit)\n     {\n         // Maximum 400% adjustment...\n         bnResult *= 4;\n         // ... in best-case exactly 4-times-normal target time\n         nTime -= nTargetTimespan*4;\n     }\n-    if (bnResult > bnProofOfWorkLimit)\n-        bnResult = bnProofOfWorkLimit;\n+    if (bnResult > bnLimit)\n+        bnResult = bnLimit;\n     return bnResult.GetCompact();\n }\n \n unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {\n-    unsigned int nProofOfWorkLimit = bnProofOfWorkLimit.GetCompact();\n+    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n@@ -1214,9 +1214,9 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBl\n     // Only change once per interval\n     if ((pindexLast->nHeight+1) % nInterval != 0)\n     {\n-        // Special difficulty rule for testnet:\n-        if (fTestNet)\n+        if (TestNet())\n         {\n+            // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n             if (pblock->nTime > pindexLast->nTime + nTargetSpacing*2)\n@@ -1230,7 +1230,6 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBl\n                 return pindex->nBits;\n             }\n         }\n-\n         return pindexLast->nBits;\n     }\n \n@@ -1254,8 +1253,8 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBl\n     bnNew *= nActualTimespan;\n     bnNew /= nTargetTimespan;\n \n-    if (bnNew > bnProofOfWorkLimit)\n-        bnNew = bnProofOfWorkLimit;\n+    if (bnNew > Params().ProofOfWorkLimit())\n+        bnNew = Params().ProofOfWorkLimit();\n \n     /// debug print\n     printf(\"GetNextWorkRequired RETARGET\\n\");\n@@ -1272,7 +1271,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bnTarget.SetCompact(nBits);\n \n     // Check range\n-    if (bnTarget <= 0 || bnTarget > bnProofOfWorkLimit)\n+    if (bnTarget <= 0 || bnTarget > Params().ProofOfWorkLimit())\n         return error(\"CheckProofOfWork() : nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n@@ -1390,7 +1389,7 @@ void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n     block.nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n-    if (fTestNet)\n+    if (TestNet())\n         block.nBits = GetNextWorkRequired(pindexPrev, &block);\n }\n \n@@ -1679,7 +1678,7 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (GetHash() == hashGenesisBlock) {\n+    if (GetHash() == Params().HashGenesisBlock()) {\n         view.SetBestBlock(pindex);\n         pindexGenesisBlock = pindex;\n         return true;\n@@ -2207,7 +2206,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n-    if (hash != hashGenesisBlock) {\n+    if (hash != Params().HashGenesisBlock()) {\n         map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n@@ -2234,8 +2233,8 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (nVersion < 2)\n         {\n-            if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n-                (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+            if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n+                (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n             {\n                 return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"));\n             }\n@@ -2244,8 +2243,8 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         if (nVersion >= 2)\n         {\n             // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-            if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n-                (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+            if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n+                (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n             {\n                 CScript expect = CScript() << nHeight;\n                 if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n@@ -2775,21 +2774,9 @@ void UnloadBlockIndex()\n \n bool LoadBlockIndex()\n {\n-    if (fTestNet)\n-    {\n-        pchMessageStart[0] = 0x0b;\n-        pchMessageStart[1] = 0x11;\n-        pchMessageStart[2] = 0x09;\n-        pchMessageStart[3] = 0x07;\n-        hashGenesisBlock = uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\");\n-    }\n-\n-    //\n     // Load block index from databases\n-    //\n     if (!fReindex && !LoadBlockIndexDB())\n         return false;\n-\n     return true;\n }\n \n@@ -2806,47 +2793,9 @@ bool InitBlockIndex() {\n \n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n-        // Genesis Block:\n-        // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-        //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-        //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-        //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-        //   vMerkleTree: 4a5e1e\n-\n-        // Genesis block\n-        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-        CTransaction txNew;\n-        txNew.vin.resize(1);\n-        txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-        txNew.vout[0].nValue = 50 * COIN;\n-        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-        CBlock block;\n-        block.vtx.push_back(txNew);\n-        block.hashPrevBlock = 0;\n-        block.hashMerkleRoot = block.BuildMerkleTree();\n-        block.nVersion = 1;\n-        block.nTime    = 1231006505;\n-        block.nBits    = 0x1d00ffff;\n-        block.nNonce   = 2083236893;\n-\n-        if (fTestNet)\n-        {\n-            block.nTime    = 1296688602;\n-            block.nNonce   = 414098458;\n-        }\n-\n-        //// debug print\n-        uint256 hash = block.GetHash();\n-        printf(\"%s\\n\", hash.ToString().c_str());\n-        printf(\"%s\\n\", hashGenesisBlock.ToString().c_str());\n-        printf(\"%s\\n\", block.hashMerkleRoot.ToString().c_str());\n-        assert(block.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n-        block.print();\n-        assert(hash == hashGenesisBlock);\n-\n-        // Start new block file\n         try {\n+            CBlock &block = const_cast<CBlock&>(Params().GenesisBlock());\n+            // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n             CValidationState state;\n@@ -2963,10 +2912,10 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             try {\n                 // locate a header\n                 unsigned char buf[4];\n-                blkdat.FindByte(pchMessageStart[0]);\n+                blkdat.FindByte(Params().MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, pchMessageStart, 4))\n+                if (memcmp(buf, Params().MessageStart(), 4))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -3111,12 +3060,6 @@ bool static AlreadyHave(const CInv& inv)\n \n \n \n-// The message start string is designed to be unlikely to occur in normal data.\n-// The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n-// a large 4-byte int at any alignment.\n-unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n-\n-\n void static ProcessGetData(CNode* pfrom)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n@@ -3839,7 +3782,7 @@ bool ProcessMessages(CNode* pfrom)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, pchMessageStart, sizeof(pchMessageStart)) != 0) {\n+        if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n             printf(\"\\n\\nPROCESSMESSAGE: INVALID MESSAGESTART\\n\\n\");\n             fOk = false;\n             break;\n@@ -4583,8 +4526,12 @@ void static BitcoinMiner(CWallet *pwallet)\n     unsigned int nExtraNonce = 0;\n \n     try { loop {\n-        while (vNodes.empty())\n-            MilliSleep(1000);\n+        if (Params().NetworkID() != CChainParams::REGTEST) {\n+            // Busy-wait for the network to come online so we don't waste time mining\n+            // on an obsolete chain. In regtest mode we expect to fly solo.\n+            while (vNodes.empty())\n+                MilliSleep(1000);\n+        }\n \n         //\n         // Create new block\n@@ -4646,6 +4593,12 @@ void static BitcoinMiner(CWallet *pwallet)\n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                     CheckWork(pblock, *pwalletMain, reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+\n+                    // In regression test mode, stop mining after a block is found. This\n+                    // allows developers to controllably generate a block on demand.\n+                    if (Params().NetworkID() == CChainParams::REGTEST)\n+                        throw boost::thread_interrupted();\n+\n                     break;\n                 }\n             }\n@@ -4681,7 +4634,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             // Check for stop or if block needs to be rebuilt\n             boost::this_thread::interruption_point();\n-            if (vNodes.empty())\n+            if (vNodes.empty() && Params().NetworkID() != CChainParams::REGTEST)\n                 break;\n             if (nBlockNonce >= 0xffff0000)\n                 break;\n@@ -4693,7 +4646,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Update nTime every few seconds\n             UpdateTime(*pblock, pindexPrev);\n             nBlockTime = ByteReverse(pblock->nTime);\n-            if (fTestNet)\n+            if (TestNet())\n             {\n                 // Changing pblock->nTime can change work required on testnet:\n                 nBlockBits = ByteReverse(pblock->nBits);\n@@ -4713,8 +4666,12 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n     static boost::thread_group* minerThreads = NULL;\n \n     int nThreads = GetArg(\"-genproclimit\", -1);\n-    if (nThreads < 0)\n-        nThreads = boost::thread::hardware_concurrency();\n+    if (nThreads < 0) {\n+        if (Params().NetworkID() == CChainParams::REGTEST)\n+            nThreads = 1;\n+        else\n+            nThreads = boost::thread::hardware_concurrency();\n+    }\n \n     if (minerThreads != NULL)\n     {"
      },
      {
        "sha": "2fbf3e8026a237b1a17be8d70d8c3ed291ba85b2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -72,7 +72,6 @@ extern CCriticalSection cs_main;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n extern std::vector<CBlockIndex*> vBlockIndexByHeight;\n extern std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid;\n-extern uint256 hashGenesisBlock;\n extern CBlockIndex* pindexGenesisBlock;\n extern int nBestHeight;\n extern uint256 nBestChainWork;\n@@ -88,7 +87,6 @@ extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n-extern unsigned char pchMessageStart[4];\n extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;\n@@ -354,7 +352,7 @@ class CBlockUndo\n \n         // Write index header\n         unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(pchMessageStart) << nSize;\n+        fileout << FLATDATA(Params().MessageStart()) << nSize;\n \n         // Write undo data\n         long fileOutPos = ftell(fileout);\n@@ -693,7 +691,7 @@ class CBlock : public CBlockHeader\n \n         // Write index header\n         unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(pchMessageStart) << nSize;\n+        fileout << FLATDATA(Params().MessageStart()) << nSize;\n \n         // Write block\n         long fileOutPos = ftell(fileout);"
      },
      {
        "sha": "f17de05cb9288762c782a5e6f95287c98d9c510f",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -143,7 +143,8 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/chainparams.o\n \n \n all: bitcoind"
      },
      {
        "sha": "0adf26ef0d6ee60cff5fc9262582a400aa4d506c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 130,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"core.h\"\n@@ -80,7 +81,7 @@ void AddOneShot(string strDest)\n \n unsigned short GetListenPort()\n {\n-    return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n+    return (unsigned short)(GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -464,7 +465,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n \n     // Connect\n     SOCKET hSocket;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, GetDefaultPort()) : ConnectSocket(addrConnect, hSocket))\n+    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort()) : ConnectSocket(addrConnect, hSocket))\n     {\n         addrman.Attempt(addrConnect);\n \n@@ -1170,53 +1171,31 @@ void MapPort(bool)\n \n \n \n-\n-\n-\n-// DNS seeds\n-// Each pair gives a source name and a seed name.\n-// The first name is used as information source for addrman.\n-// The second name should resolve to a list of seed addresses.\n-static const char *strMainNetDNSSeed[][2] = {\n-    {\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"},\n-    {\"bluematt.me\", \"dnsseed.bluematt.me\"},\n-    {\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\"},\n-    {\"xf2.org\", \"bitseed.xf2.org\"},\n-    {NULL, NULL}\n-};\n-\n-static const char *strTestNetDNSSeed[][2] = {\n-    {\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"},\n-    {\"bluematt.me\", \"testnet-seed.bluematt.me\"},\n-    {NULL, NULL}\n-};\n-\n void ThreadDNSAddressSeed()\n {\n-    static const char *(*strDNSSeed)[2] = fTestNet ? strTestNetDNSSeed : strMainNetDNSSeed;\n-\n+    const vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n     int found = 0;\n \n     printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-    for (unsigned int seed_idx = 0; strDNSSeed[seed_idx][0] != NULL; seed_idx++) {\n+    BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n         if (HaveNameProxy()) {\n-            AddOneShot(strDNSSeed[seed_idx][1]);\n+            AddOneShot(seed.host);\n         } else {\n-            vector<CNetAddr> vaddr;\n+            vector<CNetAddr> vIPs;\n             vector<CAddress> vAdd;\n-            if (LookupHost(strDNSSeed[seed_idx][1], vaddr))\n+            if (LookupHost(seed.host.c_str(), vIPs))\n             {\n-                BOOST_FOREACH(CNetAddr& ip, vaddr)\n+                BOOST_FOREACH(CNetAddr& ip, vIPs)\n                 {\n                     int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, GetDefaultPort()));\n+                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()));\n                     addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n                 }\n             }\n-            addrman.Add(vAdd, CNetAddr(strDNSSeed[seed_idx][0], true));\n+            addrman.Add(vAdd, CNetAddr(seed.name, true));\n         }\n     }\n \n@@ -1234,85 +1213,6 @@ void ThreadDNSAddressSeed()\n \n \n \n-unsigned int pnSeed[] =\n-{\n-    0xe473042e, 0xb177f2ad, 0xd63f3fb2, 0xf864f736, 0x44a23ac7, 0xcf6d9650, 0xd648042e, 0x0536f447,\n-    0x3c654ed0, 0x3e16a5bc, 0xa38e09b0, 0xdfae795b, 0xabfeca5b, 0x94ad7840, 0xf3b9f1c7, 0xbe70e0ad,\n-    0x3bbd09b0, 0x8d0c7dd5, 0x3b2a7332, 0x1a06175e, 0x581f175e, 0xca0d2dcc, 0x0fdbc658, 0xcf591ec7,\n-    0x295a12b2, 0xb4707bce, 0x68bb09b0, 0x4e735747, 0x89709553, 0x05a7814e, 0x5b8ec658, 0x402c5512,\n-    0xe80d0905, 0x17681a5e, 0xc02aa748, 0x9f811741, 0x5f321cb0, 0x23e1ee47, 0xaf7f170c, 0xaa240ab0,\n-    0xedea6257, 0x76106bc1, 0x2cf310cc, 0x08612acb, 0x9c682e4e, 0x8e963c6c, 0x443c795b, 0x22e246b8,\n-    0xfa1f2dcc, 0x90118140, 0x3821042e, 0x33c3fd2e, 0x10046d5b, 0x40d14b3e, 0x7fb8f8ce, 0x67696550,\n-    0xeeecbe58, 0x4f341745, 0x46b8fbd5, 0xc8463932, 0x6b73e862, 0x4c715932, 0x4a6785d5, 0xce3a64c2,\n-    0xde9604c7, 0x9b06884f, 0x18002a45, 0xea9bc345, 0xc4f1c658, 0xe475c1c7, 0xdd3e795b, 0x9722175e,\n-    0x34562f4e, 0x66c46e4e, 0x40bb1243, 0x7d9171d0, 0x17b8dbd5, 0x63cbfd2e, 0x1a08b8d8, 0x6175a73b,\n-    0x228d2660, 0x8627c658, 0x9c566644, 0x38cca5bc, 0x3089de5b, 0x92e25f5d, 0xa393f73f, 0xcc92dc3e,\n-    0x27487446, 0x62cbfd2e, 0x9d983b45, 0xf72a09b0, 0xf75f042e, 0x6434bb6a, 0xb29e77d8, 0x19be4fd9,\n-    0x76443243, 0x9dd72645, 0x694cef43, 0x89c2efd5, 0x5f1c5058, 0x46c6e45b, 0xe1391b40, 0x77ccefd5,\n-    0x472e5a6d, 0x85709553, 0xdd4f5d4c, 0x64ef5a46, 0x7f0ae502, 0xcf08d850, 0x3460042e, 0xeafa2d42,\n-    0x793c9044, 0x9d094746, 0x1ab9b153, 0xbfe9a5bc, 0x34771fb0, 0xb7722e32, 0x1168964b, 0x19b06ab8,\n-    0x19243b25, 0x13188045, 0xb4070905, 0x728ebb5d, 0x44f24ac8, 0xa317fead, 0x642f6a57, 0x3d951f32,\n-    0x3d312e4e, 0xfac4d048, 0xefc4dd50, 0x52b9f1c7, 0xc14d3cc3, 0x0219ea44, 0x3b79d058, 0xfa217242,\n-    0x39c80647, 0xfb697252, 0x1d495a42, 0x0aa81f4e, 0x58249ab8, 0xe6a8e6c3, 0x2bc4dad8, 0x85963c6c,\n-    0xa4ce09b0, 0x2005f536, 0x5cc2703e, 0x1992de43, 0x74e86b4c, 0xe7085653, 0xf5e15a51, 0xb4872b60,\n-    0x29e2b162, 0xa07ea053, 0x8229fd18, 0x4562ec4d, 0x8dec814e, 0x36cfa4cf, 0x96461032, 0x3c8770de,\n-    0xd10a1f5f, 0x95934641, 0x97cd65d0, 0x2e35324a, 0x2566ba1f, 0x1ca1a9d1, 0xb808b8d5, 0xf9a24a5d,\n-    0xafc8d431, 0xe4b8d9b2, 0x0f5321b2, 0x330bc658, 0x74b347ce, 0x972babd5, 0x044f7d4f, 0x06562f4e,\n-    0x8b8d3c6c, 0x3507c658, 0xe4174e4d, 0xf1c009b0, 0x52249ab8, 0x27211772, 0xf6a9ba59, 0x7a391b40,\n-    0x855dc6c0, 0x291f20b2, 0xe29bc345, 0x90963c6c, 0x0af70732, 0x4242a91f, 0x4c531d48, 0xa32df948,\n-    0x627e3044, 0x65be1f54, 0x1a0cbf83, 0x6a443532, 0x8d5f1955, 0xbafa8132, 0x3534bdd5, 0xca019dd9,\n-    0x8a0d9332, 0x5584e7d8, 0x7cd1f25e, 0xeabe3fb2, 0x2945d0d1, 0x46415718, 0x70d6042e, 0x99eb76d0,\n-    0x9ece09b0, 0xb3777418, 0x5e5e91d9, 0x237a3ab0, 0xf512b62e, 0x45dec347, 0x59b7f862, 0x4c443b25,\n-    0x3cc6484b, 0x9a8ec6d1, 0x021eea44, 0xc9483944, 0xfd567e32, 0xfd204bb2, 0xc5330bcc, 0x5202894e,\n-    0xf9e309b0, 0x4cc17557, 0xdb9064ae, 0xe19e77d8, 0x25857f60, 0xeb4a15ad, 0x1f47f554, 0xea4472d9,\n-    0xd20de593, 0xf5733b25, 0x11892b54, 0x5729d35f, 0xe6188cd1, 0x488b132e, 0x541c534a, 0xa8e854ae,\n-    0xa255a66c, 0x33688763, 0xc6629ac6, 0xc20a6265, 0xcd92a059, 0x72029d3b, 0x4c298f5e, 0x51452e4e,\n-    0xbb065058, 0x15fd2dcc, 0xf40c135e, 0x615a0bad, 0x0c6a6805, 0x4971a7ad, 0x17f2a5d5, 0xf8babf47,\n-    0xb61f50ad, 0x4e1451b1, 0xf72d9252, 0x5c2abe58, 0xbd987c61, 0x084ae5cf, 0x20781fb0, 0x38b0f160,\n-    0x18aac705, 0x14f86dc1, 0x5556f481, 0x0a36c144, 0xeb446e4c, 0x2c1c0d6c, 0xbd0ff860, 0x869f92db,\n-    0x36c94f4c, 0x05502444, 0x148fe55b, 0xd5301e59, 0xd57a8f45, 0x110dc04a, 0x8670fc36, 0xee733b25,\n-    0xca56f481, 0x2a5c3bae, 0x844b0905, 0x1e51fe53, 0x0241c244, 0x59c0614e, 0x94e70a55, 0x7312fead,\n-    0xb735be44, 0xa55d0905, 0x2f63962e, 0x14a4e15b, 0x63f8f05c, 0x62d0d262, 0x3cab41ad, 0x87f1b1cb,\n-    0x018da6b8, 0xb3967dd5, 0xcb56f481, 0x685ad718, 0x3b4aeeca, 0x8d106bc1, 0x51180905, 0x72660f48,\n-    0x1521a243, 0x5b56f481, 0x6390e560, 0xdd61464e, 0x58353b25, 0x553fc062, 0x27c45d59, 0xacc62e4e,\n-    0x0d5a1cd9, 0x7f65f442, 0xbdeef660, 0xf1bd1855, 0xf8473cae, 0x13b120b2, 0x442440d0, 0x53fd4352,\n-    0xa305fc57, 0x458be84d, 0x639ce1c3, 0xebaaee47, 0x95e2c247, 0xf056f481, 0x6256f481, 0x1d87c65e,\n-    0x0a453418, 0x5beb175e, 0xd64f1618, 0xc360795b, 0x2fbf5753, 0xa8c58e53, 0x651cec52, 0x9d37b043,\n-    0x124a9758, 0x5242e4a9, 0x89913c6c, 0x880efe2e, 0x2f2f2f0c, 0x72b26751, 0x2896e46d, 0x80f4166c,\n-    0x320d59ad, 0xc50151d0, 0x11a8aa43, 0xccf56057, 0x5fbad118, 0x4719b151, 0x2b5f4bc0, 0x4d7a4a50,\n-    0xad06e047, 0x62ef5a46, 0x5aebde58, 0xdf7aa66c, 0x851acb50, 0x66b9a559, 0x3e9bb153, 0xcc512f2e,\n-    0xc073b08e, 0xd519be58, 0xe981ea4d, 0x12fd50cb, 0x378739ad, 0x06683cae, 0xa22310b2, 0xc185c705,\n-    0x8741b545, 0xa26c8318, 0x22d5bc43, 0x39201ec0, 0x68581e3e, 0xdc9bcf62, 0xd508cc82, 0xb149675b,\n-    0x4c9609b0, 0x84feb84c, 0x08291e2e, 0xfd2253b2, 0x1fd269c1, 0xc9483932, 0x4d641fb0, 0x7d37c918,\n-    0xa9de20ad, 0x77e2d655, 0x6d421b59, 0xd7668f80, 0xced09b62, 0xa9e5a5bc, 0xa4074e18, 0x60fc5ecc,\n-    0x01300148, 0x68062444, 0xb4224847, 0xed3aa443, 0xb772fb43, 0x9f56f481, 0x220dfd18, 0x8e1c3d6c,\n-    0xc44f09b0, 0x7df2bb73, 0xe22fb844, 0xea534242, 0xb6a755d4, 0xa036654b, 0x138ece5b, 0xda65d3c3,\n-    0x955871bc, 0x792124b0, 0xfc82594c, 0x851d494b, 0x2c7aee47, 0x26af46b8, 0x1416252e, 0xa8abb944,\n-    0x36c49d25, 0x674f645d, 0x363646b8, 0x9e1a2942, 0x66d0c154, 0xc6c2a545, 0x3570f2ad, 0xe7d547c7,\n-    0x7d104932, 0x18cb9c18, 0x1dcfa4cf, 0xd156f481, 0x2a02b91f, 0x3eeb3fa8, 0xcac4175e, 0x34146d42,\n-    0x994c4d46, 0x5666f440, 0x85d6713e, 0x5ecb296c, 0x0ea0ae46, 0x87e69f42, 0xc58409b0, 0x1f3436ae,\n-    0x21dc6a57, 0x4ad1cd42, 0xfb8c1a4c, 0x52d3dab2, 0x3769894b, 0xb52f1c62, 0x3677916d, 0x82b3fe57,\n-    0x493d4ac6, 0x9f963c6c, 0x5d91ff60, 0x458e0dad, 0xa49d0947, 0x491a3e18, 0x4aadcd5b, 0x0e46494b,\n-    0x1d1610ad, 0x1a10af5d, 0x4956f481, 0x207a3eae, 0x77e73244, 0xfa3b8742, 0x3261fc36, 0xfcebf536,\n-    0x1662e836, 0xf655f636, 0xa2dbd0ad, 0x23036693, 0x30448432, 0xa2b03463, 0x30730344, 0x8e4a6882,\n-    0x0c50a1cb, 0xc8d8c06b, 0xc9cd6191, 0xf443db50, 0xa9553c50, 0x23145847, 0xc35da66c, 0x29c12a60,\n-    0x55c2b447, 0x7434f75c, 0x61660640, 0xde2a7018, 0xc639494c, 0x1c306fce, 0x19b89244, 0xd29a6462,\n-    0x462cd1b2, 0x29902f44, 0x2817fa53, 0x21a30905, 0x7777ae46, 0x288443a1, 0x7bee5148, 0xc2a8b043,\n-    0xf5c3d35f, 0x2311ef84, 0x57de08a4, 0x6b221bb2, 0xf2625846, 0x4b9e09b0, 0xa24f880e, 0x22b11447,\n-    0xb3a0c744, 0x919e77d8, 0xec8b64ae, 0xff5c8d45, 0x7b15b484, 0x32679a5f, 0xba80b62e, 0x05c25c61,\n-    0x60014746, 0x5e8fb04c, 0xe67c0905, 0x4329c658, 0xac8fe555, 0xf875e647, 0x67406386, 0x35ceea18,\n-    0xbb79484b, 0xd7b9fa62, 0x238209b0, 0x208a1d32, 0x9630995e, 0x039c1318, 0x6e48006c, 0x60582344,\n-    0xadbb0150, 0x853fd462, 0x03772e4e, 0x652ce960, 0x49b630ad, 0x9993af43, 0x3735b34b, 0x548a07d9,\n-    0x55a44aad, 0xa23d1bcc, 0xfdbb2f4e, 0x530b24a0, 0x0a44b451, 0x6827c657, 0x1f66494b, 0x4e680a47,\n-    0x77e7b747, 0xa5eb3fa8, 0x6649764a, 0xd4e76c4b, 0x2c691fb0, 0xf1292e44, 0xc6d6c774, 0x85d23775,\n-    0x28275f4d, 0x259ae46d, 0x02424e81, 0x5f16be58, 0xe707c658, 0x49eae5c7, 0xd5d147ad, 0x9a7abdc3,\n-    0xe8ac7fc7, 0x84ec3aae, 0xc24942d0, 0x294aa318, 0x08ac3d18, 0x8894042e, 0xb24609b0, 0x9bcaab58,\n-    0xc400f712, 0xd5c512b8, 0x2c02cc62, 0x25080fd8, 0xed74a847, 0x18a5ec5e, 0x9850ec6d, 0xf8909758,\n-    0x7f56f481, 0x4496f23c, 0xae27784f, 0xcb7cd93e, 0x06e32860, 0x50b9a84f, 0x3660434a, 0x09161f5f,\n-    0x900486bc, 0x08055459, 0xe7ec1017, 0x7e39494c, 0x4f443b25, 0x14751a8a, 0x717d03d4, 0xbd0e24d8,\n-    0x054b6f56, 0x854c496c, 0xd92a454a, 0xc39bd054, 0x6093614b, 0x9dbad754, 0x5bf0604a, 0x99f22305\n-};\n-\n void DumpAddresses()\n {\n     int64 nStart = GetTimeMillis();\n@@ -1374,24 +1274,14 @@ void ThreadOpenConnections()\n         CSemaphoreGrant grant(*semOutbound);\n         boost::this_thread::interruption_point();\n \n-        // Add seed nodes if IRC isn't working\n-        if (addrman.size()==0 && (GetTime() - nStart > 60) && !fTestNet)\n-        {\n-            std::vector<CAddress> vAdd;\n-            for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n-            {\n-                // It'll only connect to one or two seed nodes because once it connects,\n-                // it'll get a pile of addresses with newer timestamps.\n-                // Seed nodes are given a random 'last seen time' of between one and two\n-                // weeks ago.\n-                const int64 nOneWeek = 7*24*60*60;\n-                struct in_addr ip;\n-                memcpy(&ip, &pnSeed[i], sizeof(ip));\n-                CAddress addr(CService(ip, GetDefaultPort()));\n-                addr.nTime = GetTime()-GetRand(nOneWeek)-nOneWeek;\n-                vAdd.push_back(addr);\n+        // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n+        if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n+            static bool done = false;\n+            if (!done) {\n+                printf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n+                addrman.Add(Params().FixedSeeds(), CNetAddr(\"127.0.0.1\"));\n+                done = true;\n             }\n-            addrman.Add(vAdd, CNetAddr(\"127.0.0.1\"));\n         }\n \n         //\n@@ -1440,7 +1330,7 @@ void ThreadOpenConnections()\n                 continue;\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n-            if (addr.GetPort() != GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n                 continue;\n \n             addrConnect = addr;\n@@ -1490,7 +1380,7 @@ void ThreadOpenAddedConnections()\n         BOOST_FOREACH(string& strAddNode, lAddresses)\n         {\n             vector<CService> vservNode(0);\n-            if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+            if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             {\n                 lservAddressesToAdd.push_back(vservNode);\n                 {"
      },
      {
        "sha": "745b4338e4cd32a0a79444fad62a4190d1ffc009",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -21,7 +21,7 @@ static const char* ppszTypeName[] =\n \n CMessageHeader::CMessageHeader()\n {\n-    memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n+    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     pchCommand[1] = 1;\n     nMessageSize = -1;\n@@ -30,7 +30,7 @@ CMessageHeader::CMessageHeader()\n \n CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n {\n-    memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n+    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n     nChecksum = 0;\n@@ -47,7 +47,7 @@ std::string CMessageHeader::GetCommand() const\n bool CMessageHeader::IsValid() const\n {\n     // Check start string\n-    if (memcmp(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart)) != 0)\n+    if (memcmp(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0)\n         return false;\n \n     // Check the command string for errors"
      },
      {
        "sha": "ae541dfdba13da60542e028663b372377b2b7749",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -10,20 +10,12 @@\n #ifndef __INCLUDED_PROTOCOL_H__\n #define __INCLUDED_PROTOCOL_H__\n \n+#include \"chainparams.h\"\n #include \"serialize.h\"\n #include \"netbase.h\"\n #include <string>\n #include \"uint256.h\"\n \n-extern bool fTestNet;\n-static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)\n-{\n-    return testnet ? 18333 : 8333;\n-}\n-\n-\n-extern unsigned char pchMessageStart[4];\n-\n /** Message header.\n  * (4) message start.\n  * (12) command.\n@@ -50,7 +42,6 @@ class CMessageHeader\n     // TODO: make private (improves encapsulation)\n     public:\n         enum {\n-            MESSAGE_START_SIZE=sizeof(::pchMessageStart),\n             COMMAND_SIZE=12,\n             MESSAGE_SIZE_SIZE=sizeof(int),\n             CHECKSUM_SIZE=sizeof(int),"
      },
      {
        "sha": "5cf4dd811132ff4f494c817da266a3ba4488e418",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -5,6 +5,7 @@\n #include \"addresstablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n+#include \"chainparams.h\"\n #include \"alert.h\"\n #include \"main.h\"\n #include \"checkpoints.h\"\n@@ -110,7 +111,7 @@ void ClientModel::updateAlert(const QString &hash, int status)\n \n bool ClientModel::isTestNet() const\n {\n-    return fTestNet;\n+    return TestNet();\n }\n \n bool ClientModel::inInitialBlockDownload() const"
      },
      {
        "sha": "d0b0a70be459d6082e7398c88bb7878c29646459",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"db.h\"\n #include \"init.h\"\n@@ -93,7 +94,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          fTestNet));\n+    obj.push_back(Pair(\"testnet\",          TestNet()));\n     return obj;\n }\n "
      },
      {
        "sha": "bd7bc0ba10ccf0f1a7423b0b4f170dad96ac315c",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -157,7 +157,7 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     BOOST_FOREACH(string& strAddNode, laddedNodes)\n     {\n         vector<CService> vservNode(0);\n-        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+        if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n         else\n         {"
      },
      {
        "sha": "5388bd4d8483f400762e828cf1f6806c98fcfc5e",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -79,7 +79,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       fTestNet));\n+    obj.push_back(Pair(\"testnet\",       TestNet()));\n     obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));"
      },
      {
        "sha": "ea0cc1bcef6e282694de088678ad547b90b019d8",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -8,6 +8,7 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"wallet.h\"\n #include \"net.h\"\n@@ -25,7 +26,7 @@ CService ip(uint32_t i)\n {\n     struct in_addr s;\n     s.s_addr = i;\n-    return CService(CNetAddr(s), GetDefaultPort());\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n BOOST_AUTO_TEST_SUITE(DoS_tests)"
      },
      {
        "sha": "af65416485a40eed3b0a78e026f45890fb230f9f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -108,8 +108,6 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n-    // Save global state\n-    bool fTestNet_stored = fTestNet;\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -125,7 +123,10 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        fTestNet = isTestnet; // Override testnet flag\n+        if (isTestnet)\n+            SelectParams(CChainParams::TESTNET);\n+        else\n+            SelectParams(CChainParams::MAIN);\n         if(isPrivkey)\n         {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -156,18 +157,14 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    // Restore global state\n-    fTestNet = fTestNet_stored;\n+    SelectParams(CChainParams::MAIN);\n }\n \n // Goal: check that generated keys match test vectors\n BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(\"base58_keys_valid.json\");\n     std::vector<unsigned char> result;\n-    // Save global state\n-    bool fTestNet_stored = fTestNet;\n-\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -182,7 +179,10 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        fTestNet = isTestnet; // Override testnet flag\n+        if (isTestnet)\n+            SelectParams(CChainParams::TESTNET);\n+        else\n+            SelectParams(CChainParams::MAIN);\n         if(isPrivkey)\n         {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -225,8 +225,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!boost::apply_visitor(CBitcoinAddressVisitor(&dummyAddr), nodest));\n \n-    // Restore global state\n-    fTestNet = fTestNet_stored;\n+    SelectParams(CChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "34836eaa975f5603be65545a1279c273e67cc2a8",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txdb.h\"\n #include \"main.h\"\n #include \"hash.h\"\n+#include \"chainparams.h\"\n \n using namespace std;\n \n@@ -223,7 +224,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 // Watch for genesis block\n-                if (pindexGenesisBlock == NULL && diskindex.GetBlockHash() == hashGenesisBlock)\n+                if (pindexGenesisBlock == NULL && diskindex.GetBlockHash() == Params().HashGenesisBlock())\n                     pindexGenesisBlock = pindexNew;\n \n                 if (!pindexNew->CheckIndex())"
      },
      {
        "sha": "bfb6d758387991807ca82872ec503528876347d5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -13,6 +13,7 @@\n #include <sys/resource.h>\n #endif\n \n+#include \"chainparams.h\"\n #include \"util.h\"\n #include \"sync.h\"\n #include \"version.h\"\n@@ -78,7 +79,6 @@ bool fDaemon = false;\n bool fServer = false;\n bool fCommandLine = false;\n string strMiscWarning;\n-bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n@@ -1068,8 +1068,8 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     } else {\n         path = GetDefaultDataDir();\n     }\n-    if (fNetSpecific && GetBoolArg(\"-testnet\", false))\n-        path /= \"testnet3\";\n+    if (fNetSpecific)\n+        path /= Params().DataDir();\n \n     fs::create_directories(path);\n "
      },
      {
        "sha": "86a38ad3312e13136de2b85bcfe82d0fa292edc5",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "patch": "@@ -143,7 +143,6 @@ extern bool fDaemon;\n extern bool fServer;\n extern bool fCommandLine;\n extern std::string strMiscWarning;\n-extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n extern volatile bool fReopenDebugLog;"
      }
    ]
  },
  {
    "sha": "54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGI2ZGQwYTMyYWFlMGE4N2E4ODg2NmUwNjU3MGYyZDY1ZjAwZDll",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-06-19T15:32:49Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:05Z"
      },
      "message": "Pass check level, check depth to VerifyDB()",
      "tree": {
        "sha": "2084454a6e634ebe9fdfc1ac62cdc9fc707311d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2084454a6e634ebe9fdfc1ac62cdc9fc707311d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee405c71fd1cb1b1a0403eed3ce6f4ed294f95ec"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5090c4ea406cae9a75c5529c6151b47010749865",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
        "patch": "@@ -763,7 +763,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 }\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                if (!VerifyDB()) {\n+                if (!VerifyDB(GetArg(\"-checklevel\", 3),\n+                              GetArg( \"-checkblocks\", 288))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n                 }"
      },
      {
        "sha": "60bd100015d4ac6f51b0ef85655f66d242f92d5a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
        "patch": "@@ -2686,13 +2686,12 @@ bool static LoadBlockIndexDB()\n     return true;\n }\n \n-bool VerifyDB() {\n+bool VerifyDB(int nCheckLevel, int nCheckDepth)\n+{\n     if (pindexBest == NULL || pindexBest->pprev == NULL)\n         return true;\n \n     // Verify blocks in the best chain\n-    int nCheckLevel = GetArg(\"-checklevel\", 3);\n-    int nCheckDepth = GetArg( \"-checkblocks\", 288);\n     if (nCheckDepth == 0)\n         nCheckDepth = 1000000000; // suffices until the year 19000\n     if (nCheckDepth > nBestHeight)"
      },
      {
        "sha": "c5e5f2bfe67d0b839e3cafd6996d874d9a4f4d12",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54b6dd0a32aae0a87a88866e06570f2d65f00d9e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
        "patch": "@@ -146,7 +146,7 @@ bool LoadBlockIndex();\n /** Unload database information */\n void UnloadBlockIndex();\n /** Verify consistency of the block and coin databases */\n-bool VerifyDB();\n+bool VerifyDB(int nCheckLevel, int nCheckDepth);\n /** Print the loaded block tree */\n void PrintBlockTree();\n /** Find a block by height in the currently-connected chain */"
      }
    ]
  },
  {
    "sha": "9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjZhN2JkM2M2OTc4ZjE2MmVkZWE1MDdiY2NiMmVlOGYwY2ZhNjU3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-06-19T15:53:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:06Z"
      },
      "message": "RPC: add 'verifychain', to verify chain database at runtime",
      "tree": {
        "sha": "ee53f959c3d7f768ec818c35ac5637b1778b9490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee53f959c3d7f768ec818c35ac5637b1778b9490"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b6dd0a32aae0a87a88866e06570f2d65f00d9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54b6dd0a32aae0a87a88866e06570f2d65f00d9e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1c51b65e5e32388a6422906284f5831721c8be53",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
        "patch": "@@ -254,6 +254,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"gettxout\",               &gettxout,               true,      false },\n     { \"lockunspent\",            &lockunspent,            false,     false },\n     { \"listlockunspent\",        &listlockunspent,        false,     false },\n+    { \"verifychain\",            &verifychain,            true,      false },\n };\n \n CRPCTable::CRPCTable()\n@@ -1194,6 +1195,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n \n     return params;\n }"
      },
      {
        "sha": "aff759a5c8250716e35baa8e2bd5e3b6f3f3d4b7",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
        "patch": "@@ -205,5 +205,6 @@ extern json_spirit::Value getblockhash(const json_spirit::Array& params, bool fH\n extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value verifychain(const json_spirit::Array& params, bool fHelp);\n \n #endif"
      },
      {
        "sha": "5c9aa320244117ef3132c59e70ad24a3059184bb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
        "patch": "@@ -2692,7 +2692,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n         return true;\n \n     // Verify blocks in the best chain\n-    if (nCheckDepth == 0)\n+    if (nCheckDepth <= 0)\n         nCheckDepth = 1000000000; // suffices until the year 19000\n     if (nCheckDepth > nBestHeight)\n         nCheckDepth = nBestHeight;"
      },
      {
        "sha": "6b2ef8315f70a6e010084abc91eadb511cb9bc7c",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
        "patch": "@@ -243,4 +243,20 @@ Value gettxout(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value verifychain(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 2)\n+        throw runtime_error(\n+            \"verifychain [check level] [num blocks]\\n\"\n+            \"Verifies blockchain database.\");\n+\n+    int nCheckLevel = GetArg(\"-checklevel\", 3);\n+    int nCheckDepth = GetArg(\"-checkblocks\", 288);\n+    if (params.size() > 0)\n+        nCheckLevel = params[0].get_int();\n+    if (params.size() > 1)\n+        nCheckDepth = params[1].get_int();\n+\n+    return VerifyDB(nCheckLevel, nCheckDepth);\n+}\n "
      }
    ]
  },
  {
    "sha": "6145f95216884617f10bcd01885068c87e78126c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTQ1Zjk1MjE2ODg0NjE3ZjEwYmNkMDE4ODUwNjhjODdlNzgxMjZj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-19T23:13:55Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:07Z"
      },
      "message": "Refactor keytime/metadata and wallet encryption bugfix\n\nRefactor keytime:\n* Key metadata is kept in a CWallet::mapKeyMetadata (std::map<CKeyId,CKeyMetadata>).\n* When generating a new key, time is put in that map, and new key is written.\n* AddKeyPubKey and AddCryptedKey do not take a creation time argument, but instead\n  pull it from that map, if it exists there.\n\nBugfix:\n* AddKeyPubKey and AddCryptedKey in CWallet didn't override the CKeyStore\n  definition anymore. This is fixed, as they no longed need the nCreationTime\n  argument now.\n\nAlso a few related other changes:\n* Metadata can be overwritten.\n* Only GenerateNewKey calls GetTime(), as it's the only place where we know for\n  sure a key was not constructed earlier.\n* When the nTimeFirstKey is known to be inaccurate, it is set to the value 1\n  (instead of 0, which would mean unknown).\n* Use CPubKey instead of std::vector<unsigned char> where possible.",
      "tree": {
        "sha": "3aedd2ba4311fca5aa72a6d01d5d019d67e27813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aedd2ba4311fca5aa72a6d01d5d019d67e27813"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6145f95216884617f10bcd01885068c87e78126c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6145f95216884617f10bcd01885068c87e78126c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6145f95216884617f10bcd01885068c87e78126c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6145f95216884617f10bcd01885068c87e78126c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f6a7bd3c6978f162edea507bccb2ee8f0cfa657"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 36,
      "deletions": 28
    },
    "files": [
      {
        "sha": "a205d52b551a3c86bd66cf5ad37c73c953d9d988",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6145f95216884617f10bcd01885068c87e78126c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6145f95216884617f10bcd01885068c87e78126c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=6145f95216884617f10bcd01885068c87e78126c",
        "patch": "@@ -40,38 +40,35 @@ CPubKey CWallet::GenerateNewKey()\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n \n     CPubKey pubkey = secret.GetPubKey();\n+\n+    // Create new metadata\n+    int64 nCreationTime = GetTime();\n+    mapKeyMetadata[pubkey.GetID()] = CKeyMetadata(nCreationTime);\n+    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n+        nTimeFirstKey = nCreationTime;\n+\n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n     return pubkey;\n }\n \n-bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey,\n-                           int64 nCreateTime)\n+bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n-    if (!nCreateTime)\n-        nCreateTime = GetTime();\n-    if (!nTimeFirstKey || (nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = nCreateTime;\n     if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n         return false;\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n         return CWalletDB(strWalletFile).WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n-                                                 nCreateTime);\n+                                                 mapKeyMetadata[pubkey.GetID()]);\n     }\n     return true;\n }\n \n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n-                            const vector<unsigned char> &vchCryptedSecret,\n-                            int64 nCreateTime)\n+                            const vector<unsigned char> &vchCryptedSecret)\n {\n-    if (!nCreateTime)\n-        nCreateTime = GetTime();\n-    if (!nTimeFirstKey || (nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = nCreateTime;\n     if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n         return false;\n     if (!fFileBacked)\n@@ -81,15 +78,24 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n         if (pwalletdbEncryption)\n             return pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n                                                         vchCryptedSecret,\n-                                                        nCreateTime);\n+                                                        mapKeyMetadata[vchPubKey.GetID()]);\n         else\n             return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n                                                             vchCryptedSecret,\n-                                                            nCreateTime);\n+                                                            mapKeyMetadata[vchPubKey.GetID()]);\n     }\n     return false;\n }\n \n+bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+{\n+    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n+        nTimeFirstKey = meta.nCreateTime;\n+\n+    mapKeyMetadata[pubkey.GetID()] = meta;\n+    return true;\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "48bd511971f355011e66692b75c16d65472934d4",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6145f95216884617f10bcd01885068c87e78126c/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6145f95216884617f10bcd01885068c87e78126c/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=6145f95216884617f10bcd01885068c87e78126c",
        "patch": "@@ -87,7 +87,7 @@ class CWallet : public CCryptoKeyStore\n     std::string strWalletFile;\n \n     std::set<int64> setKeyPool;\n-\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -140,14 +140,16 @@ class CWallet : public CCryptoKeyStore\n     // Generate a new key\n     CPubKey GenerateNewKey();\n     // Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey, int64 nCreateTime = 0);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n+    // Load metadata (used by LoadWallet)\n+    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n     // Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret, int64 nCreateTime = 0);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddCScript(const CScript& redeemScript);"
      },
      {
        "sha": "bf23357f79c95e822e0a3edeeb20d18695896da0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6145f95216884617f10bcd01885068c87e78126c/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6145f95216884617f10bcd01885068c87e78126c/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=6145f95216884617f10bcd01885068c87e78126c",
        "patch": "@@ -344,12 +344,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"keymeta\")\n         {\n-            vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n+            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+\n             // find earliest key creation time, as wallet birthday\n             if (!pwallet->nTimeFirstKey ||\n                 (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n@@ -483,7 +485,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 0;\n+        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(hash, pwallet->mapWallet[hash]);"
      },
      {
        "sha": "4dfa35d82aee491b48931600e75dfdf2feecf22d",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6145f95216884617f10bcd01885068c87e78126c/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6145f95216884617f10bcd01885068c87e78126c/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=6145f95216884617f10bcd01885068c87e78126c",
        "patch": "@@ -30,7 +30,7 @@ class CKeyMetadata\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n-    int64 nCreateTime;\n+    int64 nCreateTime; // 0 means unknown\n \n     CKeyMetadata()\n     {\n@@ -52,7 +52,7 @@ class CKeyMetadata\n     void SetNull()\n     {\n         nVersion = CKeyMetadata::CURRENT_VERSION;\n-        nCreateTime = GetTime();\n+        nCreateTime = 0;\n     }\n };\n \n@@ -84,28 +84,26 @@ class CWalletDB : public CDB\n     }\n \n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n-                  int64 nCreateTime)\n+                  const CKeyMetadata &keyMeta)\n     {\n         nWalletDBUpdated++;\n \n-        CKeyMetadata keyMeta(nCreateTime);\n         if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-                   keyMeta, false))\n+                   keyMeta))\n             return false;\n \n         return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n     }\n \n     bool WriteCryptedKey(const CPubKey& vchPubKey,\n                          const std::vector<unsigned char>& vchCryptedSecret,\n-                         int64 nCreateTime)\n+                         const CKeyMetadata &keyMeta)\n     {\n         const bool fEraseUnencryptedKey = true;\n         nWalletDBUpdated++;\n \n-        CKeyMetadata keyMeta(nCreateTime);\n         if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-                   keyMeta, false))\n+                   keyMeta))\n             return false;\n \n         if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))"
      }
    ]
  },
  {
    "sha": "c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTJmMDc4ZTYzMzc3MTFjYjhiNmQyOWQxMmEwNGQ5ZTljNjEwZTVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-22T14:03:11Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:09Z"
      },
      "message": "Initialize database before checking changed txindex\n\nIn case no database exists yet, and -txindex(=1) is passed, we currently first\ncheck whether fTxIndex differs from -txindex (and ask the user to reindex in\nthat case), and only afterwards initialize the database. By swapping these\naround (the initialization is a no-op in case the database already exists),\nwe allow it to be born in txindex mode, without warning.\n\nThat also means we don't need to check -reindex anymore, as the wiping/reinit\nof the databases happens before checking.",
      "tree": {
        "sha": "04d718d1cefead3f503c0905b8d445c1af63db89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04d718d1cefead3f503c0905b8d445c1af63db89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52f078e6337711cb8b6d29d12a04d9e9c610e5d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6145f95216884617f10bcd01885068c87e78126c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6145f95216884617f10bcd01885068c87e78126c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6145f95216884617f10bcd01885068c87e78126c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ce1a8857cc9234a11db5ba0e4a9340712110cc9d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52f078e6337711cb8b6d29d12a04d9e9c610e5d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52f078e6337711cb8b6d29d12a04d9e9c610e5d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
        "patch": "@@ -750,18 +750,18 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 if (!mapBlockIndex.empty() && pindexGenesisBlock == NULL)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n-                // Check for changed -txindex state (only necessary if we are not reindexing anyway)\n-                if (!fReindex && fTxIndex != GetBoolArg(\"-txindex\", false)) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n-                    break;\n-                }\n-\n                 // Initialize the block index (no-op if non-empty database was already loaded)\n                 if (!InitBlockIndex()) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n \n+                // Check for changed -txindex state\n+                if (fTxIndex != GetBoolArg(\"-txindex\", false)) {\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n+                    break;\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (!VerifyDB(GetArg(\"-checklevel\", 3),\n                               GetArg( \"-checkblocks\", 288))) {"
      }
    ]
  },
  {
    "sha": "19b494cea152550f30d6f90ac05bcef16266cdee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWI0OTRjZWExNTI1NTBmMzBkNmY5MGFjMDViY2VmMTYyNjZjZGVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-29T17:50:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:10Z"
      },
      "message": "Add ExtractAffectedKeys to script\n\nThis function finds all keys affected by a particular output script,\nsupporting everything ExtractDestinations supports (pay-to-pubkey,\npay-to-pubkeyhash, multisig) and recurses into subscripts (P2SH).",
      "tree": {
        "sha": "b99f472517ae24c1c1770a258d75a04f8e25dc18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99f472517ae24c1c1770a258d75a04f8e25dc18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19b494cea152550f30d6f90ac05bcef16266cdee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19b494cea152550f30d6f90ac05bcef16266cdee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19b494cea152550f30d6f90ac05bcef16266cdee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19b494cea152550f30d6f90ac05bcef16266cdee/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52f078e6337711cb8b6d29d12a04d9e9c610e5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c52f078e6337711cb8b6d29d12a04d9e9c610e5d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 37,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14fe80e2073df217c934d10062e2904fb1127c3e",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19b494cea152550f30d6f90ac05bcef16266cdee/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19b494cea152550f30d6f90ac05bcef16266cdee/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=19b494cea152550f30d6f90ac05bcef16266cdee",
        "patch": "@@ -1474,6 +1474,42 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n     return true;\n }\n \n+class CAffectedKeysVisitor : public boost::static_visitor<void> {\n+private:\n+    const CKeyStore &keystore;\n+    std::vector<CKeyID> &vKeys;\n+\n+public:\n+    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n+\n+    void Process(const CScript &script) {\n+        txnouttype type;\n+        std::vector<CTxDestination> vDest;\n+        int nRequired;\n+        if (ExtractDestinations(script, type, vDest, nRequired)) {\n+            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+                boost::apply_visitor(*this, dest);\n+        }\n+    }\n+\n+    void operator()(const CKeyID &keyId) {\n+        if (keystore.HaveKey(keyId))\n+            vKeys.push_back(keyId);\n+    }\n+\n+    void operator()(const CScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId, script))\n+            Process(script);\n+    }\n+\n+    void operator()(const CNoDestination &none) {}\n+};\n+\n+void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys) {\n+    CAffectedKeysVisitor(keystore, vKeys).Process(scriptPubKey);\n+}\n+\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                   unsigned int flags, int nHashType)\n {"
      },
      {
        "sha": "03afe8b652f413aa723907fd830aafe54dd897cf",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19b494cea152550f30d6f90ac05bcef16266cdee/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19b494cea152550f30d6f90ac05bcef16266cdee/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=19b494cea152550f30d6f90ac05bcef16266cdee",
        "patch": "@@ -674,6 +674,7 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);"
      }
    ]
  },
  {
    "sha": "4372002e828d18e1f9da76489ed0418be3978ce9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzcyMDAyZTgyOGQxOGUxZjlkYTc2NDg5ZWQwNDE4YmUzOTc4Y2U5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-29T17:50:40Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:11Z"
      },
      "message": "Add GetKeyBirthTimes to wallet\n\nCompute safe lower bounds on the birth times of all wallet keys. For\npool keys or keys with metadata, the actually stored birth time is\nused. For all others, the birth times are inferred from the wallet\ntransactions.",
      "tree": {
        "sha": "9f0e6c0a8007fd468375bf0804b51177b40b62e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f0e6c0a8007fd468375bf0804b51177b40b62e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4372002e828d18e1f9da76489ed0418be3978ce9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4372002e828d18e1f9da76489ed0418be3978ce9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4372002e828d18e1f9da76489ed0418be3978ce9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4372002e828d18e1f9da76489ed0418be3978ce9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19b494cea152550f30d6f90ac05bcef16266cdee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19b494cea152550f30d6f90ac05bcef16266cdee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19b494cea152550f30d6f90ac05bcef16266cdee"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 63,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b09f949802ee4f44d06e17a5034afb67d9cbc821",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4372002e828d18e1f9da76489ed0418be3978ce9/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4372002e828d18e1f9da76489ed0418be3978ce9/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4372002e828d18e1f9da76489ed0418be3978ce9",
        "patch": "@@ -1846,7 +1846,7 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress)\n+void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n \n@@ -1908,3 +1908,53 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const {\n+    mapKeyBirth.clear();\n+\n+    // get birth times for keys with metadata\n+    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n+        if (it->second.nCreateTime)\n+            mapKeyBirth[it->first] = it->second.nCreateTime;\n+\n+    // map in which we'll infer heights of other keys\n+    CBlockIndex *pindexMax = FindBlockByHeight(std::max(0, nBestHeight - 144)); // the tip can be reorganised; use a 144-block safety margin\n+    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n+    std::set<CKeyID> setKeys;\n+    GetKeys(setKeys);\n+    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+        if (mapKeyBirth.count(keyid) == 0)\n+            mapKeyFirstBlock[keyid] = pindexMax;\n+    }\n+    setKeys.clear();\n+\n+    // if there are no such keys, we're done\n+    if (mapKeyFirstBlock.empty())\n+        return;\n+\n+    // find first block that affects those keys, if there are any left\n+    std::vector<CKeyID> vAffected;\n+    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+        // iterate over all wallet transactions...\n+        const CWalletTx &wtx = (*it).second;\n+        std::map<uint256, CBlockIndex*>::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n+        if (blit != mapBlockIndex.end() && blit->second->IsInMainChain()) {\n+            // ... which are already in a block\n+            int nHeight = blit->second->nHeight;\n+            BOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+                // iterate over all their outputs\n+                ::ExtractAffectedKeys(*this, txout.scriptPubKey, vAffected);\n+                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                    // ... and all their affected keys\n+                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n+                    if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n+                        rit->second = blit->second;\n+                }\n+                vAffected.clear();\n+            }\n+        }\n+    }\n+\n+    // Extract block timestamps for those keys\n+    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+        mapKeyBirth[it->first] = it->second->nTime - 7200; // block times can be 2h off\n+}"
      },
      {
        "sha": "36b3608fb03ca8ba4252ec9bdfba77f893433c8f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4372002e828d18e1f9da76489ed0418be3978ce9/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4372002e828d18e1f9da76489ed0418be3978ce9/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4372002e828d18e1f9da76489ed0418be3978ce9",
        "patch": "@@ -159,6 +159,8 @@ class CWallet : public CCryptoKeyStore\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n+    void GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const;\n+\n     /** Increment the next transaction order id\n         @return next transaction order id\n      */\n@@ -200,7 +202,7 @@ class CWallet : public CCryptoKeyStore\n     void ReturnKey(int64 nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool fAllowReuse=true);\n     int64 GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress);\n+    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, int64> GetAddressBalances();"
      },
      {
        "sha": "702e219a5bcdf2078bcd97aa8772ddef221ec173",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4372002e828d18e1f9da76489ed0418be3978ce9/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4372002e828d18e1f9da76489ed0418be3978ce9/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=4372002e828d18e1f9da76489ed0418be3978ce9",
        "patch": "@@ -365,7 +365,16 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             int64 nIndex;\n             ssKey >> nIndex;\n+            CKeyPool keypool;\n+            ssValue >> keypool;\n             pwallet->setKeyPool.insert(nIndex);\n+\n+            // If no metadata exists yet, create a default with the pool key's\n+            // creation time. Note that this may be overwritten by actually\n+            // stored metadata for that key later, which is fine.\n+            CKeyID keyid = keypool.vchPubKey.GetID();\n+            if (pwallet->mapKeyMetadata.count(keyid) == 0)\n+                pwallet->mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n         }\n         else if (strType == \"version\")\n         {"
      }
    ]
  },
  {
    "sha": "96847b991710c29e8e9294102184719397714266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Njg0N2I5OTE3MTBjMjllOGU5Mjk0MTAyMTg0NzE5Mzk3NzE0MjY2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-29T17:50:56Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:12Z"
      },
      "message": "Add dumpwallet and importwallet RPCs\n\ndumpwallet: produce a dump of all keys in a wallet, in a format\ncompatible with Bitcoin Wallet for Android and Multibit.\n\nimportwallet: import such a dump",
      "tree": {
        "sha": "2cfc0a8527e8e9c03d3475428cb532b6f6cb80cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cfc0a8527e8e9c03d3475428cb532b6f6cb80cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96847b991710c29e8e9294102184719397714266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96847b991710c29e8e9294102184719397714266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96847b991710c29e8e9294102184719397714266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96847b991710c29e8e9294102184719397714266/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4372002e828d18e1f9da76489ed0418be3978ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4372002e828d18e1f9da76489ed0418be3978ce9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4372002e828d18e1f9da76489ed0418be3978ce9"
      }
    ],
    "stats": {
      "total": 211,
      "additions": 195,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5908126200183387700774e65bb2757418faf8a8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96847b991710c29e8e9294102184719397714266/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96847b991710c29e8e9294102184719397714266/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=96847b991710c29e8e9294102184719397714266",
        "patch": "@@ -243,7 +243,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"submitblock\",            &submitblock,            false,     false },\n     { \"listsinceblock\",         &listsinceblock,         false,     false },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false },\n+    { \"dumpwallet\",             &dumpwallet,             true,      false },\n     { \"importprivkey\",          &importprivkey,          false,     false },\n+    { \"importwallet\",           &importwallet,           false,     false },\n     { \"listunspent\",            &listunspent,            false,     false },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false },"
      },
      {
        "sha": "247c47adf90b663b7a5a986c44c77e4e7ed72f08",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96847b991710c29e8e9294102184719397714266/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96847b991710c29e8e9294102184719397714266/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=96847b991710c29e8e9294102184719397714266",
        "patch": "@@ -145,8 +145,11 @@ extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, b\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n+\n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "dcfb023f3568d0b8f989b48ca4eac44d446773b3",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 190,
        "deletions": 16,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96847b991710c29e8e9294102184719397714266/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96847b991710c29e8e9294102184719397714266/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=96847b991710c29e8e9294102184719397714266",
        "patch": "@@ -2,35 +2,68 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <iostream>\n+#include <fstream>\n+\n #include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n #include \"ui_interface.h\"\n #include \"base58.h\"\n \n+#include <boost/date_time/posix_time/posix_time.hpp>\n #include <boost/lexical_cast.hpp>\n+#include <boost/variant/get.hpp>\n+#include <boost/algorithm/string.hpp>\n \n #define printf OutputDebugStringF\n \n using namespace json_spirit;\n using namespace std;\n \n-class CTxDump\n-{\n-public:\n-    CBlockIndex *pindex;\n-    int64 nValue;\n-    bool fSpent;\n-    CWalletTx* ptx;\n-    int nOut;\n-    CTxDump(CWalletTx* ptx = NULL, int nOut = -1)\n-    {\n-        pindex = NULL;\n-        nValue = 0;\n-        fSpent = false;\n-        this->ptx = ptx;\n-        this->nOut = nOut;\n+void EnsureWalletIsUnlocked();\n+\n+std::string static EncodeDumpTime(int64 nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+}\n+\n+int64 static DecodeDumpTime(const std::string &str) {\n+    static const boost::posix_time::time_input_facet facet(\"%Y-%m-%dT%H:%M:%SZ\");\n+    static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n+    const std::locale loc(std::locale::classic(), &facet);\n+    std::istringstream iss(str);\n+    iss.imbue(loc);\n+    boost::posix_time::ptime ptime(boost::date_time::not_a_date_time);\n+    iss >> ptime;\n+    if (ptime.is_not_a_date_time())\n+        return 0;\n+    return (ptime - epoch).total_seconds();\n+}\n+\n+std::string static EncodeDumpString(const std::string &str) {\n+    std::stringstream ret;\n+    BOOST_FOREACH(unsigned char c, str) {\n+        if (c <= 32 || c >= 128 || c == '%') {\n+            ret << '%' << HexStr(&c, &c + 1);\n+        } else {\n+            ret << c;\n+        }\n+    }\n+    return ret.str();\n+}\n+\n+std::string DecodeDumpString(const std::string &str) {\n+    std::stringstream ret;\n+    for (unsigned int pos = 0; pos < str.length(); pos++) {\n+        unsigned char c = str[pos];\n+        if (c == '%' && pos+2 < str.length()) {\n+            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) | \n+                ((str[pos+2]>>6)*9+((str[pos+2]-'0')&15));\n+            pos += 2;\n+        }\n+        ret << c;\n     }\n-};\n+    return ret.str();\n+}\n \n Value importprivkey(const Array& params, bool fHelp)\n {\n@@ -63,6 +96,10 @@ Value importprivkey(const Array& params, bool fHelp)\n         pwalletMain->MarkDirty();\n         pwalletMain->SetAddressBookName(vchAddress, strLabel);\n \n+        // Don't throw error in case a key is already there\n+        if (pwalletMain->HaveKey(vchAddress))\n+            return Value::null;\n+\n         if (!pwalletMain->AddKeyPubKey(key, pubkey))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n@@ -75,13 +112,95 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value importwallet(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"importwallet <filename>\\n\"\n+            \"Imports keys from a wallet dump file (see dumpwallet).\");\n+\n+    EnsureWalletIsUnlocked();\n+\n+    ifstream file;\n+    file.open(params[0].get_str().c_str());\n+    if (!file.is_open())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+\n+    int64 nTimeBegin = pindexBest->nTime;\n+\n+    bool fGood = true;\n+\n+    while (file.good()) {\n+        std::string line;\n+        std::getline(file, line);\n+        if (line.empty() || line[0] == '#')\n+            continue;\n+\n+        std::vector<std::string> vstr;\n+        boost::split(vstr, line, boost::is_any_of(\" \"));\n+        if (vstr.size() < 2)\n+            continue;\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(vstr[0]))\n+            continue;\n+        CKey key = vchSecret.GetKey();\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID keyid = pubkey.GetID();\n+        if (pwalletMain->HaveKey(keyid)) {\n+            printf(\"Skipping import of %s (key already present)\\n\", CBitcoinAddress(keyid).ToString().c_str());\n+            continue;\n+        }\n+        int64 nTime = DecodeDumpTime(vstr[1]);\n+        std::string strLabel;\n+        bool fLabel = true;\n+        for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n+            if (boost::algorithm::starts_with(vstr[nStr], \"#\"))\n+                break;\n+            if (vstr[nStr] == \"change=1\")\n+                fLabel = false;\n+            if (vstr[nStr] == \"reserve=1\")\n+                fLabel = false;\n+            if (boost::algorithm::starts_with(vstr[nStr], \"label=\")) {\n+                strLabel = DecodeDumpString(vstr[nStr].substr(6));\n+                fLabel = true;\n+            }\n+        }\n+        printf(\"Importing %s...\\n\", CBitcoinAddress(keyid).ToString().c_str());\n+        if (!pwalletMain->AddKeyPubKey(key, pubkey)) {\n+            fGood = false;\n+            continue;\n+        }\n+        pwalletMain->mapKeyMetadata[keyid].nCreateTime = nTime;\n+        if (fLabel)\n+            pwalletMain->SetAddressBookName(keyid, strLabel);\n+        nTimeBegin = std::min(nTimeBegin, nTime);\n+    }\n+    file.close();\n+\n+    CBlockIndex *pindex = pindexBest;\n+    while (pindex && pindex->pprev && pindex->nTime > nTimeBegin - 7200)\n+        pindex = pindex->pprev;\n+\n+    printf(\"Rescanning last %i blocks\\n\", pindexBest->nHeight - pindex->nHeight + 1);\n+    pwalletMain->ScanForWalletTransactions(pindex);\n+    pwalletMain->ReacceptWalletTransactions();\n+    pwalletMain->MarkDirty();\n+\n+    if (!fGood)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys to wallet\");\n+\n+    return Value::null;\n+}\n+\n Value dumpprivkey(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey <bitcoinaddress>\\n\"\n             \"Reveals the private key corresponding to <bitcoinaddress>.\");\n \n+    EnsureWalletIsUnlocked();\n+\n     string strAddress = params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n@@ -94,3 +213,58 @@ Value dumpprivkey(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret).ToString();\n }\n+\n+\n+Value dumpwallet(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"dumpwallet <filename>\\n\"\n+            \"Dumps all wallet keys in a human-readable format.\");\n+\n+    EnsureWalletIsUnlocked();\n+\n+    ofstream file;\n+    file.open(params[0].get_str().c_str());\n+    if (!file.is_open())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+\n+    std::map<CKeyID, int64> mapKeyBirth;\n+    std::set<CKeyID> setKeyPool;\n+    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n+    pwalletMain->GetAllReserveKeys(setKeyPool);\n+\n+    // sort time/key pairs\n+    std::vector<std::pair<int64, CKeyID> > vKeyBirth;\n+    for (std::map<CKeyID, int64>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    }\n+    mapKeyBirth.clear();\n+    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n+\n+    // produce output\n+    file << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD.c_str(), CLIENT_DATE.c_str());\n+    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()).c_str());\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", nBestHeight, hashBestChain.ToString().c_str());\n+    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(pindexBest->nTime).c_str());\n+    file << \"\\n\";\n+    for (std::vector<std::pair<int64, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+        const CKeyID &keyid = it->second;\n+        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strAddr = CBitcoinAddress(keyid).ToString();\n+        CKey key;\n+        if (pwalletMain->GetKey(keyid, key)) {\n+            if (pwalletMain->mapAddressBook.count(keyid)) {\n+                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), EncodeDumpString(pwalletMain->mapAddressBook[keyid]).c_str(), strAddr.c_str());\n+            } else if (setKeyPool.count(keyid)) {\n+                file << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), strAddr.c_str());\n+            } else {\n+                file << strprintf(\"%s %s change=1 # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), strAddr.c_str());\n+            }\n+        }\n+    }\n+    file << \"\\n\";\n+    file << \"# End of dump\\n\";\n+    file.close();\n+    return Value::null;\n+}"
      }
    ]
  },
  {
    "sha": "ba0fbaefdfa0c24933176061194536da160ac62e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTBmYmFlZmRmYTBjMjQ5MzMxNzYwNjExOTQ1MzZkYTE2MGFjNjJl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-06-23T06:05:25Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:13Z"
      },
      "message": "Log reason for non-standard transaction rejection",
      "tree": {
        "sha": "806cd4d2004fc08168fed3e0354cade73daa16be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806cd4d2004fc08168fed3e0354cade73daa16be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba0fbaefdfa0c24933176061194536da160ac62e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba0fbaefdfa0c24933176061194536da160ac62e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba0fbaefdfa0c24933176061194536da160ac62e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba0fbaefdfa0c24933176061194536da160ac62e/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96847b991710c29e8e9294102184719397714266",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96847b991710c29e8e9294102184719397714266",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96847b991710c29e8e9294102184719397714266"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 38,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2c3dddb7d75795bdc2a2c837c80538876ef2fa29",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 10,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba0fbaefdfa0c24933176061194536da160ac62e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba0fbaefdfa0c24933176061194536da160ac62e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ba0fbaefdfa0c24933176061194536da160ac62e",
        "patch": "@@ -457,38 +457,53 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n \n \n-bool IsStandardTx(const CTransaction& tx)\n+bool IsStandardTx(const CTransaction& tx, string& reason)\n {\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION)\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION) {\n+        reason = \"version\";\n         return false;\n+    }\n \n-    if (!IsFinalTx(tx))\n+    if (!IsFinalTx(tx)) {\n+        reason = \"non-final\";\n         return false;\n+    }\n \n     // Extremely large transactions with lots of inputs can cost the network\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n     unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE)\n+    if (sz >= MAX_STANDARD_TX_SIZE) {\n+        reason = \"tx-size\";\n         return false;\n+    }\n \n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n         // pay-to-script-hash, which is 3 ~80-byte signatures, 3\n         // ~65-byte public keys, plus a few script ops.\n-        if (txin.scriptSig.size() > 500)\n+        if (txin.scriptSig.size() > 500) {\n+            reason = \"scriptsig-size\";\n             return false;\n-        if (!txin.scriptSig.IsPushOnly())\n+        }\n+        if (!txin.scriptSig.IsPushOnly()) {\n+            reason = \"scriptsig-not-pushonly\";\n             return false;\n+        }\n     }\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey))\n+        if (!::IsStandard(txout.scriptPubKey)) {\n+            reason = \"scriptpubkey\";\n             return false;\n-        if (txout.IsDust(CTransaction::nMinRelayTxFee))\n+        }\n+        if (txout.IsDust(CTransaction::nMinRelayTxFee)) {\n+            reason = \"dust\";\n             return false;\n+        }\n     }\n+\n     return true;\n }\n \n@@ -782,8 +797,10 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!TestNet() && !IsStandardTx(tx))\n-        return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n+    string reason;\n+    if (!TestNet() && !IsStandardTx(tx, reason))\n+        return error(\"CTxMemPool::accept() : nonstandard transaction: %s\",\n+                     reason.c_str());\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();"
      },
      {
        "sha": "f9b207a5d9c630273f8fd36b7242607ae1967677",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba0fbaefdfa0c24933176061194536da160ac62e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba0fbaefdfa0c24933176061194536da160ac62e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ba0fbaefdfa0c24933176061194536da160ac62e",
        "patch": "@@ -324,7 +324,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n /** Check for standard transaction types\n     @return True if all outputs (scriptPubKeys) use only standard transaction forms\n */\n-bool IsStandardTx(const CTransaction& tx);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason);\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64 nBlockTime = 0);\n "
      },
      {
        "sha": "3c666d284278114af10eca914342d5c642fb3f80",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba0fbaefdfa0c24933176061194536da160ac62e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba0fbaefdfa0c24933176061194536da160ac62e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=ba0fbaefdfa0c24933176061194536da160ac62e",
        "patch": "@@ -74,6 +74,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n \n     CTransaction txFrom;  // Funding transaction:\n+    string reason;\n     txFrom.vout.resize(8);\n     for (int i = 0; i < 4; i++)\n     {\n@@ -82,7 +83,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom));\n+    BOOST_CHECK(IsStandardTx(txFrom, reason));\n \n     CTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -167,13 +168,14 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CTransaction txFrom;  // Funding transaction:\n+    string reason;\n     txFrom.vout.resize(4);\n     for (int i = 0; i < 4; i++)\n     {\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom));\n+    BOOST_CHECK(IsStandardTx(txFrom, reason));\n \n     CTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -189,7 +191,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i]), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n "
      },
      {
        "sha": "0c7475b4f28c277f894dc707b0b3b65496958a9c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba0fbaefdfa0c24933176061194536da160ac62e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba0fbaefdfa0c24933176061194536da160ac62e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=ba0fbaefdfa0c24933176061194536da160ac62e",
        "patch": "@@ -260,16 +260,17 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-    BOOST_CHECK(IsStandardTx(t));\n+    string reason;\n+    BOOST_CHECK(IsStandardTx(t, reason));\n \n     t.vout[0].nValue = 5011; // dust\n-    BOOST_CHECK(!IsStandardTx(t));\n+    BOOST_CHECK(!IsStandardTx(t, reason));\n \n     t.vout[0].nValue = 6011; // not dust\n-    BOOST_CHECK(IsStandardTx(t));\n+    BOOST_CHECK(IsStandardTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t));\n+    BOOST_CHECK(!IsStandardTx(t, reason));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "3be9e284ad97e63de6f23bdff008ee755bc86ee2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmU5ZTI4NGFkOTdlNjNkZTZmMjNiZGZmMDA4ZWU3NTViYzg2ZWUy",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-06-23T15:32:38Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:14Z"
      },
      "message": "init.cpp: fix chainparams.h double include.\n\nNoticed by Diapolo.",
      "tree": {
        "sha": "621916bfdca43be1eb530092bae9d2eae2ee4e2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/621916bfdca43be1eb530092bae9d2eae2ee4e2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3be9e284ad97e63de6f23bdff008ee755bc86ee2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3be9e284ad97e63de6f23bdff008ee755bc86ee2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3be9e284ad97e63de6f23bdff008ee755bc86ee2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3be9e284ad97e63de6f23bdff008ee755bc86ee2/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba0fbaefdfa0c24933176061194536da160ac62e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba0fbaefdfa0c24933176061194536da160ac62e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba0fbaefdfa0c24933176061194536da160ac62e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "449ee906bf7cc8e4119fface2e67d605725e889a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3be9e284ad97e63de6f23bdff008ee755bc86ee2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3be9e284ad97e63de6f23bdff008ee755bc86ee2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3be9e284ad97e63de6f23bdff008ee755bc86ee2",
        "patch": "@@ -14,7 +14,6 @@\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"checkpoints.h\"\n-#include \"chainparams.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>"
      }
    ]
  },
  {
    "sha": "a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTljYzRkNGZmYTlhNWYxNDkwZTEzNWE5Y2JmZDIxZjE5MGU2MGJh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-06-23T15:39:39Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:16Z"
      },
      "message": "fix makefiles and init.cpp after chainparams merge\n\n- add missing chainparams.o to some makefiles\n- remove a double-include of chainparams.h in init.cpp",
      "tree": {
        "sha": "2cc3fcf885761d4f8f2570a68e03e7dedde25e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cc3fcf885761d4f8f2570a68e03e7dedde25e41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3be9e284ad97e63de6f23bdff008ee755bc86ee2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3be9e284ad97e63de6f23bdff008ee755bc86ee2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3be9e284ad97e63de6f23bdff008ee755bc86ee2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "26d541664e6f9442aebd219ca8cc280162f37d4c",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
        "patch": "@@ -93,7 +93,8 @@ OBJS= \\\n     obj/hash.o \\\n     obj/bloom.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/chainparams.o\n \n all: bitcoind.exe\n "
      },
      {
        "sha": "3659f52040a366deb5c8b0cf308c060b708d7ba0",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
        "patch": "@@ -101,7 +101,8 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/chainparams.o\n \n \n all: bitcoind.exe"
      },
      {
        "sha": "269460c1baf83a0af4f5292f4074f004bc1f5279",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
        "patch": "@@ -104,7 +104,8 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/chainparams.o\n \n ifndef USE_UPNP\n \toverride USE_UPNP = -"
      }
    ]
  },
  {
    "sha": "fd7858d1e80a1aff46bca354b40619db6758b6ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDc4NThkMWU4MGExYWZmNDZiY2EzNTRiNDA2MTlkYjY3NThiNmNl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T00:35:01Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:17Z"
      },
      "message": "Moved CBlock::WriteToDisk out of CBlock to inline function WriteBlockToDisk in main.h",
      "tree": {
        "sha": "9a5020adb583b3b2c329657df116cb76ad637d5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a5020adb583b3b2c329657df116cb76ad637d5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd7858d1e80a1aff46bca354b40619db6758b6ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd7858d1e80a1aff46bca354b40619db6758b6ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd7858d1e80a1aff46bca354b40619db6758b6ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd7858d1e80a1aff46bca354b40619db6758b6ce/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a59cc4d4ffa9a5f1490e135a9cbfd21f190e60ba"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 28,
      "deletions": 27
    },
    "files": [
      {
        "sha": "04bcafe7203fdddbb59b6b069cd72095a9008354",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd7858d1e80a1aff46bca354b40619db6758b6ce/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd7858d1e80a1aff46bca354b40619db6758b6ce/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fd7858d1e80a1aff46bca354b40619db6758b6ce",
        "patch": "@@ -2279,7 +2279,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, nTime, dbp != NULL))\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n-            if (!WriteToDisk(blockPos))\n+            if (!WriteBlockToDisk(*this, blockPos))\n                 return state.Abort(_(\"Failed to write block\"));\n         if (!AddToBlockIndex(state, blockPos))\n             return error(\"AcceptBlock() : AddToBlockIndex failed\");\n@@ -2817,7 +2817,7 @@ bool InitBlockIndex() {\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.nTime))\n                 return error(\"LoadBlockIndex() : FindBlockPos failed\");\n-            if (!block.WriteToDisk(blockPos))\n+            if (!WriteBlockToDisk(block, blockPos))\n                 return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n             if (!block.AddToBlockIndex(state, blockPos))\n                 return error(\"LoadBlockIndex() : genesis block not accepted\");"
      },
      {
        "sha": "d85ccf5ae2edc36d6ed91a60763a8a2ce04906a6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd7858d1e80a1aff46bca354b40619db6758b6ce/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd7858d1e80a1aff46bca354b40619db6758b6ce/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fd7858d1e80a1aff46bca354b40619db6758b6ce",
        "patch": "@@ -682,31 +682,6 @@ class CBlock : public CBlockHeader\n         return hash;\n     }\n \n-    bool WriteToDisk(CDiskBlockPos &pos)\n-    {\n-        // Open history file to append\n-        CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n-        if (!fileout)\n-            return error(\"CBlock::WriteToDisk() : OpenBlockFile failed\");\n-\n-        // Write index header\n-        unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(Params().MessageStart()) << nSize;\n-\n-        // Write block\n-        long fileOutPos = ftell(fileout);\n-        if (fileOutPos < 0)\n-            return error(\"CBlock::WriteToDisk() : ftell failed\");\n-        pos.nPos = (unsigned int)fileOutPos;\n-        fileout << *this;\n-\n-        // Flush stdio buffers and commit to disk before returning\n-        fflush(fileout);\n-        if (!IsInitialBlockDownload())\n-            FileCommit(fileout);\n-\n-        return true;\n-    }\n \n     bool ReadFromDisk(const CDiskBlockPos &pos)\n     {\n@@ -779,6 +754,32 @@ class CBlock : public CBlockHeader\n };\n \n \n+/** Functions for disk access for blocks */\n+inline bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n+{\n+    // Open history file to append\n+    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"WriteBlockToDisk() : OpenBlockFile failed\");\n+\n+    // Write index header\n+    unsigned int nSize = fileout.GetSerializeSize(block);\n+    fileout << FLATDATA(Params().MessageStart()) << nSize;\n+\n+    // Write block\n+    long fileOutPos = ftell(fileout);\n+    if (fileOutPos < 0)\n+        return error(\"WriteBlockToDisk() : ftell failed\");\n+    pos.nPos = (unsigned int)fileOutPos;\n+    fileout << block;\n+\n+    // Flush stdio buffers and commit to disk before returning\n+    fflush(fileout);\n+    if (!IsInitialBlockDownload())\n+        FileCommit(fileout);\n+\n+    return true;\n+}\n \n \n "
      }
    ]
  },
  {
    "sha": "6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWMyMWRmMjk0NThjNGZiYmZjOThjNWM5NWI2ZjQzYmUxMWVkNmY1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T00:47:47Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:18Z"
      },
      "message": "Moved WriteBlockToDisk implementation from main.h to main.cpp",
      "tree": {
        "sha": "801a6fbeceea69c44d17b16f0830a3b01773b0b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/801a6fbeceea69c44d17b16f0830a3b01773b0b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd7858d1e80a1aff46bca354b40619db6758b6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd7858d1e80a1aff46bca354b40619db6758b6ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd7858d1e80a1aff46bca354b40619db6758b6ce"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6ab3cf8671282abb3e3da422b40865b8b923373f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
        "patch": "@@ -1163,6 +1163,32 @@ CBlockIndex* FindBlockByHeight(int nHeight)\n     return vBlockIndexByHeight[nHeight];\n }\n \n+bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n+{\n+    // Open history file to append\n+    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"WriteBlockToDisk() : OpenBlockFile failed\");\n+\n+    // Write index header\n+    unsigned int nSize = fileout.GetSerializeSize(block);\n+    fileout << FLATDATA(Params().MessageStart()) << nSize;\n+\n+    // Write block\n+    long fileOutPos = ftell(fileout);\n+    if (fileOutPos < 0)\n+        return error(\"WriteBlockToDisk() : ftell failed\");\n+    pos.nPos = (unsigned int)fileOutPos;\n+    fileout << block;\n+\n+    // Flush stdio buffers and commit to disk before returning\n+    fflush(fileout);\n+    if (!IsInitialBlockDownload())\n+        FileCommit(fileout);\n+\n+    return true;\n+}\n+\n bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n {\n     if (!ReadFromDisk(pindex->GetBlockPos()))"
      },
      {
        "sha": "cb13ee3415e59cda22f57a25d2e116dd682bad6e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
        "patch": "@@ -755,31 +755,7 @@ class CBlock : public CBlockHeader\n \n \n /** Functions for disk access for blocks */\n-inline bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n-{\n-    // Open history file to append\n-    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n-    if (!fileout)\n-        return error(\"WriteBlockToDisk() : OpenBlockFile failed\");\n-\n-    // Write index header\n-    unsigned int nSize = fileout.GetSerializeSize(block);\n-    fileout << FLATDATA(Params().MessageStart()) << nSize;\n-\n-    // Write block\n-    long fileOutPos = ftell(fileout);\n-    if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk() : ftell failed\");\n-    pos.nPos = (unsigned int)fileOutPos;\n-    fileout << block;\n-\n-    // Flush stdio buffers and commit to disk before returning\n-    fflush(fileout);\n-    if (!IsInitialBlockDownload())\n-        FileCommit(fileout);\n-\n-    return true;\n-}\n+bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n \n \n "
      }
    ]
  },
  {
    "sha": "72ae21764abcbd594c7ca319020c804e7cc0c9bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmFlMjE3NjRhYmNiZDU5NGM3Y2EzMTkwMjBjODA0ZTdjYzBjOWJm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:10:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:19Z"
      },
      "message": "Moved CBlock::ReadFromDisk out of CBlock to functions ReadBlockFromDisk in main.h",
      "tree": {
        "sha": "986e9cf1f10774034ef5ce72cafd6774a43353c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/986e9cf1f10774034ef5ce72cafd6774a43353c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72ae21764abcbd594c7ca319020c804e7cc0c9bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ae21764abcbd594c7ca319020c804e7cc0c9bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72ae21764abcbd594c7ca319020c804e7cc0c9bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ae21764abcbd594c7ca319020c804e7cc0c9bf/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ec21df29458c4fbbfc98c5c95b6f43be11ed6f5"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 42,
      "deletions": 48
    },
    "files": [
      {
        "sha": "e88055bdea97d4f29987747c4a1ea17833818c2e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "patch": "@@ -820,7 +820,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             {\n                 CBlockIndex* pindex = (*mi).second;\n                 CBlock block;\n-                block.ReadFromDisk(pindex);\n+                ReadBlockFromDisk(block, pindex);\n                 block.BuildMerkleTree();\n                 block.print();\n                 printf(\"\\n\");"
      },
      {
        "sha": "96c28f0642fc9d4e7e434b92157d70369e21b851",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "patch": "@@ -642,7 +642,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n         if (pcoinsTip->GetCoins(GetHash(), coins)) {\n             CBlockIndex *pindex = FindBlockByHeight(coins.nHeight);\n             if (pindex) {\n-                if (!blockTmp.ReadFromDisk(pindex))\n+                if (!ReadBlockFromDisk(blockTmp, pindex))\n                     return 0;\n                 pblock = &blockTmp;\n             }\n@@ -1131,7 +1131,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n \n     if (pindexSlow) {\n         CBlock block;\n-        if (block.ReadFromDisk(pindexSlow)) {\n+        if (ReadBlockFromDisk(block, pindexSlow)) {\n             BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n                 if (tx.GetHash() == hash) {\n                     txOut = tx;\n@@ -1189,12 +1189,12 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     return true;\n }\n \n-bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n {\n-    if (!ReadFromDisk(pindex->GetBlockPos()))\n+    if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n-    if (GetHash() != pindex->GetBlockHash())\n-        return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");\n+    if (block.GetHash() != pindex->GetBlockHash())\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1903,7 +1903,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     vector<CTransaction> vResurrect;\n     BOOST_FOREACH(CBlockIndex* pindex, vDisconnect) {\n         CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n+        if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n         if (!block.DisconnectBlock(state, pindex, view))\n@@ -1923,7 +1923,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     vector<CTransaction> vDelete;\n     BOOST_FOREACH(CBlockIndex *pindex, vConnect) {\n         CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n+        if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n         if (!block.ConnectBlock(state, pindex, view)) {\n@@ -2753,8 +2753,8 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n             break;\n         CBlock block;\n         // check level 0: read from disk\n-        if (!block.ReadFromDisk(pindex))\n-            return error(\"VerifyDB() : *** block.ReadFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n+        if (!ReadBlockFromDisk(block, pindex))\n+            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !block.CheckBlock(state))\n             return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n@@ -2790,8 +2790,8 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n             boost::this_thread::interruption_point();\n             pindex = pindex->GetNextInMainChain();\n             CBlock block;\n-            if (!block.ReadFromDisk(pindex))\n-                return error(\"VerifyDB() : *** block.ReadFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n+            if (!ReadBlockFromDisk(block, pindex))\n+                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n             if (!block.ConnectBlock(state, pindex, coins))\n                 return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         }\n@@ -2901,7 +2901,7 @@ void PrintBlockTree()\n \n         // print item\n         CBlock block;\n-        block.ReadFromDisk(pindex);\n+        ReadBlockFromDisk(block, pindex);\n         printf(\"%d (blk%05u.dat:0x%x)  %s  tx %\"PRIszu\"\",\n             pindex->nHeight,\n             pindex->GetBlockPos().nFile, pindex->GetBlockPos().nPos,\n@@ -3125,7 +3125,7 @@ void static ProcessGetData(CNode* pfrom)\n                 if (mi != mapBlockIndex.end())\n                 {\n                     CBlock block;\n-                    block.ReadFromDisk((*mi).second);\n+                    ReadBlockFromDisk(block, (*mi).second);\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessage(\"block\", block);\n                     else // MSG_FILTERED_BLOCK)"
      },
      {
        "sha": "a3a03ea485e56a71dd8412306d318f9cfc3f98fa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 25,
        "deletions": 31,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "patch": "@@ -682,33 +682,6 @@ class CBlock : public CBlockHeader\n         return hash;\n     }\n \n-\n-    bool ReadFromDisk(const CDiskBlockPos &pos)\n-    {\n-        SetNull();\n-\n-        // Open history file to read\n-        CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-        if (!filein)\n-            return error(\"CBlock::ReadFromDisk() : OpenBlockFile failed\");\n-\n-        // Read block\n-        try {\n-            filein >> *this;\n-        }\n-        catch (std::exception &e) {\n-            return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n-        }\n-\n-        // Check the header\n-        if (!CheckProofOfWork(GetHash(), nBits))\n-            return error(\"CBlock::ReadFromDisk() : errors in block header\");\n-\n-        return true;\n-    }\n-\n-\n-\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n@@ -739,9 +712,6 @@ class CBlock : public CBlockHeader\n     // Apply the effects of this block (with given index) on the UTXO set represented by coins\n     bool ConnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n \n-    // Read a block from disk\n-    bool ReadFromDisk(const CBlockIndex* pindex);\n-\n     // Add this block to the block index, and if necessary, switch the active block chain to this\n     bool AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos);\n \n@@ -756,7 +726,31 @@ class CBlock : public CBlockHeader\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n-\n+inline bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n+{    \n+    block.SetNull();\n+\n+    // Open history file to read\n+    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : OpenBlockFile failed\");\n+\n+    // Read block\n+    try {\n+        filein >> block;\n+    }    \n+    catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }    \n+\n+    // Check the header\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : errors in block header\");\n+\n+    return true;\n+}    \n+\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n \n class CBlockFileInfo"
      },
      {
        "sha": "3c24016fe3ecbdf04c005580534ad14bea0fb188",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "patch": "@@ -163,7 +163,7 @@ Value getblock(const Array& params, bool fHelp)\n \n     CBlock block;\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n-    block.ReadFromDisk(pblockindex);\n+    ReadBlockFromDisk(block, pblockindex);\n \n     if (!fVerbose)\n     {"
      },
      {
        "sha": "488787f9672c20f49373c19388d7d4a5c1490e4b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ae21764abcbd594c7ca319020c804e7cc0c9bf/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "patch": "@@ -804,7 +804,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             }\n \n             CBlock block;\n-            block.ReadFromDisk(pindex);\n+            ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))"
      }
    ]
  },
  {
    "sha": "689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODlkNzI3ZjA2YzRiYjU4NDNhMmRiZGRjOWRlMTRiN2QwNGExZjlm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:21:33Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:20Z"
      },
      "message": "Moved ReadBlockFromDisk implementation to main.cpp",
      "tree": {
        "sha": "11afc8d93fd00015609c7b18b6c9ff11b0ae960f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11afc8d93fd00015609c7b18b6c9ff11b0ae960f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ae21764abcbd594c7ca319020c804e7cc0c9bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72ae21764abcbd594c7ca319020c804e7cc0c9bf"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 25,
      "deletions": 24
    },
    "files": [
      {
        "sha": "567112e45a986311353296eb27dbc39f1d907e51",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
        "patch": "@@ -1189,6 +1189,30 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     return true;\n }\n \n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n+{\n+    block.SetNull();\n+\n+    // Open history file to read\n+    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : OpenBlockFile failed\");\n+\n+    // Read block\n+    try {\n+        filein >> block;\n+    }\n+    catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }\n+\n+    // Check the header\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : errors in block header\");\n+\n+    return true;\n+}\n+\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n {\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))"
      },
      {
        "sha": "f4efcefce28d7f550497055e54825a3916b79571",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 24,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
        "patch": "@@ -726,30 +726,7 @@ class CBlock : public CBlockHeader\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n-inline bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n-{    \n-    block.SetNull();\n-\n-    // Open history file to read\n-    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-    if (!filein)\n-        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : OpenBlockFile failed\");\n-\n-    // Read block\n-    try {\n-        filein >> block;\n-    }    \n-    catch (std::exception &e) {\n-        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n-    }    \n-\n-    // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : errors in block header\");\n-\n-    return true;\n-}    \n-\n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n "
      }
    ]
  },
  {
    "sha": "fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWExYjVhNTIwNzkxYzNkYjJhZTcyYzZmNjlhOGI1MWNhZGE1OWU1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:32:58Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:21Z"
      },
      "message": "Pulled DisconnectBlock out of CBlock.",
      "tree": {
        "sha": "bc1bab737af3a22bf5981a56bcd35639b4a21ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc1bab737af3a22bf5981a56bcd35639b4a21ef7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea1b5a520791c3db2ae72c6f69a8b51cada59e5/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/689d727f06c4bb5843a2dbddc9de14b7d04a1f9f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4ad282a1376a1f28b0bcec29febfad87039c5839",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fea1b5a520791c3db2ae72c6f69a8b51cada59e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fea1b5a520791c3db2ae72c6f69a8b51cada59e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
        "patch": "@@ -1620,7 +1620,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n \n \n-bool CBlock::DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &view, bool *pfClean)\n+bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex == view.GetBestBlock());\n \n@@ -1636,12 +1636,12 @@ bool CBlock::DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoin\n     if (!blockUndo.ReadFromDisk(pos, pindex->pprev->GetBlockHash()))\n         return error(\"DisconnectBlock() : failure reading undo data\");\n \n-    if (blockUndo.vtxundo.size() + 1 != vtx.size())\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n         return error(\"DisconnectBlock() : block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n-    for (int i = vtx.size() - 1; i >= 0; i--) {\n-        const CTransaction &tx = vtx[i];\n+    for (int i = block.vtx.size() - 1; i >= 0; i--) {\n+        const CTransaction &tx = block.vtx[i];\n         uint256 hash = tx.GetHash();\n \n         // check that all outputs are available\n@@ -1930,7 +1930,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n-        if (!block.DisconnectBlock(state, pindex, view))\n+        if (!DisconnectBlock(block, state, pindex, view))\n             return error(\"SetBestBlock() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         if (fBenchmark)\n             printf(\"- Disconnect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2794,7 +2794,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= 2*nCoinCacheSize + 32000) {\n             bool fClean = true;\n-            if (!block.DisconnectBlock(state, pindex, coins, &fClean))\n+            if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n                 return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n             pindexState = pindex->pprev;\n             if (!fClean) {"
      },
      {
        "sha": "481abbfd40fdb9aec185bfdcda3baac65b3d3975",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fea1b5a520791c3db2ae72c6f69a8b51cada59e5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fea1b5a520791c3db2ae72c6f69a8b51cada59e5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
        "patch": "@@ -703,12 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n-     *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n-     *  will be true if no problems were found. Otherwise, the return value will be false in case\n-     *  of problems. Note that in any case, coins may be modified. */\n-    bool DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool *pfClean = NULL);\n-\n     // Apply the effects of this block (with given index) on the UTXO set represented by coins\n     bool ConnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n \n@@ -730,6 +724,16 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n \n+/** Functions for validating blocks and updating the block tree */\n+\n+/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n+ *  will be true if no problems were found. Otherwise, the return value will be false in case\n+ *  of problems. Note that in any case, coins may be modified. */\n+bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+\n+\n+\n class CBlockFileInfo\n {\n public:"
      }
    ]
  },
  {
    "sha": "54c2827501eb964f4c56189e186068ea121ae8a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGMyODI3NTAxZWI5NjRmNGM1NjE4OWUxODYwNjhlYTEyMWFlOGE5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:50:06Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:22Z"
      },
      "message": "Pulled ConnectBlock out of CBlock.",
      "tree": {
        "sha": "8f5d2aa0871aa6c7c42aa6842c2c7b0beec302a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f5d2aa0871aa6c7c42aa6842c2c7b0beec302a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54c2827501eb964f4c56189e186068ea121ae8a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54c2827501eb964f4c56189e186068ea121ae8a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54c2827501eb964f4c56189e186068ea121ae8a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54c2827501eb964f4c56189e186068ea121ae8a9/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea1b5a520791c3db2ae72c6f69a8b51cada59e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fea1b5a520791c3db2ae72c6f69a8b51cada59e5"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 23,
      "deletions": 22
    },
    "files": [
      {
        "sha": "70eb304ff206394274e7f19ac2a7a0ead8b28bf9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54c2827501eb964f4c56189e186068ea121ae8a9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54c2827501eb964f4c56189e186068ea121ae8a9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=54c2827501eb964f4c56189e186068ea121ae8a9",
        "patch": "@@ -1734,18 +1734,18 @@ void ThreadScriptCheck() {\n     scriptcheckqueue.Thread();\n }\n \n-bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsViewCache &view, bool fJustCheck)\n+bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(state, !fJustCheck, !fJustCheck))\n+    if (!block.CheckBlock(state, !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n     assert(pindex->pprev == view.GetBestBlock());\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (GetHash() == Params().HashGenesisBlock()) {\n+    if (block.GetHash() == Params().HashGenesisBlock()) {\n         view.SetBestBlock(pindex);\n         pindexGenesisBlock = pindex;\n         return true;\n@@ -1769,8 +1769,8 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n                           !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n-        for (unsigned int i=0; i<vtx.size(); i++) {\n-            uint256 hash = GetTxHash(i);\n+        for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+            uint256 hash = block.GetTxHash(i);\n             if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"));\n         }\n@@ -1791,12 +1791,12 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n     int64 nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(vtx.size()));\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(vtx.size());\n-    for (unsigned int i=0; i<vtx.size(); i++)\n+    vPos.reserve(block.vtx.size());\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n-        const CTransaction &tx = vtx[i];\n+        const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n@@ -1827,19 +1827,19 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n         }\n \n         CTxUndo txundo;\n-        UpdateCoins(tx, state, view, txundo, pindex->nHeight, GetTxHash(i));\n+        UpdateCoins(tx, state, view, txundo, pindex->nHeight, block.GetTxHash(i));\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n-        vPos.push_back(std::make_pair(GetTxHash(i), pos));\n+        vPos.push_back(std::make_pair(block.GetTxHash(i), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64 nTime = GetTimeMicros() - nStart;\n     if (fBenchmark)\n-        printf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)vtx.size(), 0.001 * nTime, 0.001 * nTime / vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n+        printf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n-    if (GetValueOut(vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n-        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n+    if (GetValueOut(block.vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n+        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n@@ -1880,8 +1880,8 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n     assert(view.SetBestBlock(pindex));\n \n     // Watch for transactions paying to me\n-    for (unsigned int i=0; i<vtx.size(); i++)\n-        SyncWithWallets(GetTxHash(i), vtx[i], this, true);\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        SyncWithWallets(block.GetTxHash(i), block.vtx[i], &block, true);\n \n     return true;\n }\n@@ -1950,7 +1950,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n-        if (!block.ConnectBlock(state, pindex, view)) {\n+        if (!ConnectBlock(block, state, pindex, view)) {\n             if (state.IsInvalid()) {\n                 InvalidChainFound(pindexNew);\n                 InvalidBlockFound(pindex);\n@@ -2816,7 +2816,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n                 return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n-            if (!block.ConnectBlock(state, pindex, coins))\n+            if (!ConnectBlock(block, state, pindex, coins))\n                 return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         }\n     }\n@@ -4471,7 +4471,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache viewNew(*pcoinsTip, true);\n         CValidationState state;\n-        if (!pblock->ConnectBlock(state, &indexDummy, viewNew, true))\n+        if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n     }\n "
      },
      {
        "sha": "f674aeb8271acb4cc77de763a1e0783d1be4199e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54c2827501eb964f4c56189e186068ea121ae8a9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54c2827501eb964f4c56189e186068ea121ae8a9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=54c2827501eb964f4c56189e186068ea121ae8a9",
        "patch": "@@ -703,9 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    // Apply the effects of this block (with given index) on the UTXO set represented by coins\n-    bool ConnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n-\n     // Add this block to the block index, and if necessary, switch the active block chain to this\n     bool AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos);\n \n@@ -732,6 +729,10 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n  *  of problems. Note that in any case, coins may be modified. */\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n+// Apply the effects of this block (with given index) on the UTXO set represented by coins\n+bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+\n+\n \n \n class CBlockFileInfo"
      }
    ]
  },
  {
    "sha": "8efdd3dc346945d495eba199caa341e5f3336f15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWZkZDNkYzM0Njk0NWQ0OTVlYmExOTljYWEzNDFlNWYzMzM2ZjE1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:00:18Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:23Z"
      },
      "message": "Pulled AddToBlockIndex out of CBlock.",
      "tree": {
        "sha": "3324c7f7991b23d00271cbf4c920e0663f745663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3324c7f7991b23d00271cbf4c920e0663f745663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8efdd3dc346945d495eba199caa341e5f3336f15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efdd3dc346945d495eba199caa341e5f3336f15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8efdd3dc346945d495eba199caa341e5f3336f15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efdd3dc346945d495eba199caa341e5f3336f15/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54c2827501eb964f4c56189e186068ea121ae8a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54c2827501eb964f4c56189e186068ea121ae8a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54c2827501eb964f4c56189e186068ea121ae8a9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "69d64b6109d293898323ba7719d55ba5c762295b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efdd3dc346945d495eba199caa341e5f3336f15/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efdd3dc346945d495eba199caa341e5f3336f15/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8efdd3dc346945d495eba199caa341e5f3336f15",
        "patch": "@@ -2060,25 +2060,25 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n }\n \n \n-bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n+bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos& pos)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", hash.ToString().c_str()));\n \n     // Construct new block index object\n-    CBlockIndex* pindexNew = new CBlockIndex(*this);\n+    CBlockIndex* pindexNew = new CBlockIndex(block);\n     assert(pindexNew);\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n-    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n     {\n         pindexNew->pprev = (*miPrev).second;\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n     }\n-    pindexNew->nTx = vtx.size();\n+    pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork().getuint256();\n     pindexNew->nChainTx = (pindexNew->pprev ? pindexNew->pprev->nChainTx : 0) + pindexNew->nTx;\n     pindexNew->nFile = pos.nFile;\n@@ -2099,7 +2099,7 @@ bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n         // Notify UI to display prev block's coinbase if it was ours\n         static uint256 hashPrevBestCoinBase;\n         UpdatedTransaction(hashPrevBestCoinBase);\n-        hashPrevBestCoinBase = GetTxHash(0);\n+        hashPrevBestCoinBase = block.GetTxHash(0);\n     }\n \n     if (!pblocktree->Flush())\n@@ -2331,7 +2331,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(*this, blockPos))\n                 return state.Abort(_(\"Failed to write block\"));\n-        if (!AddToBlockIndex(state, blockPos))\n+        if (!AddToBlockIndex(*this, state, blockPos))\n             return error(\"AcceptBlock() : AddToBlockIndex failed\");\n     } catch(std::runtime_error &e) {\n         return state.Abort(_(\"System error: \") + e.what());\n@@ -2869,7 +2869,7 @@ bool InitBlockIndex() {\n                 return error(\"LoadBlockIndex() : FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n                 return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n-            if (!block.AddToBlockIndex(state, blockPos))\n+            if (!AddToBlockIndex(block, state, blockPos))\n                 return error(\"LoadBlockIndex() : genesis block not accepted\");\n         } catch(std::runtime_error &e) {\n             return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());"
      },
      {
        "sha": "9f583ad99f9b7a566b50b753b557450f9fb29430",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efdd3dc346945d495eba199caa341e5f3336f15/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efdd3dc346945d495eba199caa341e5f3336f15/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8efdd3dc346945d495eba199caa341e5f3336f15",
        "patch": "@@ -703,9 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    // Add this block to the block index, and if necessary, switch the active block chain to this\n-    bool AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos);\n-\n     // Context-independent validity checks\n     bool CheckBlock(CValidationState &state, bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n \n@@ -732,6 +729,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n // Apply the effects of this block (with given index) on the UTXO set represented by coins\n bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n+// Add this block to the block index, and if necessary, switch the active block chain to this\n+bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos& pos);\n \n \n "
      }
    ]
  },
  {
    "sha": "ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTliNmM4Yzc3MGYxZTU2ZjBlYWJiNDNlOTRiMzIwMGNmZjhhMmEz",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:14:11Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:24Z"
      },
      "message": "Pulled CheckBlock out of CBlock.",
      "tree": {
        "sha": "ff9346585a096349bd54c00a65debb2229c372ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff9346585a096349bd54c00a65debb2229c372ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8efdd3dc346945d495eba199caa341e5f3336f15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efdd3dc346945d495eba199caa341e5f3336f15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8efdd3dc346945d495eba199caa341e5f3336f15"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "e6986c87d16bdec256386696cd27116f36acd0c1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
        "patch": "@@ -1737,7 +1737,7 @@ void ThreadScriptCheck() {\n bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!block.CheckBlock(state, !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2205,59 +2205,59 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n }\n \n \n-bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerkleRoot) const\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context\n     // that can be verified before saving an orphan block.\n \n     // Size limits\n-    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n \n     // Check timestamp\n-    if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n         return state.Invalid(error(\"CheckBlock() : block timestamp too far in the future\"));\n \n     // First transaction must be coinbase, the rest must not be\n-    if (vtx.empty() || !vtx[0].IsCoinBase())\n+    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n         return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"));\n-    for (unsigned int i = 1; i < vtx.size(); i++)\n-        if (vtx[i].IsCoinBase())\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (block.vtx[i].IsCoinBase())\n             return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"));\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n     // Build the merkle tree already. We need it anyway later, and it makes the\n     // block cache the transaction hashes, which means they don't need to be\n     // recalculated many times during this block's validation.\n-    BuildMerkleTree();\n+    block.BuildMerkleTree();\n \n     // Check for duplicate txids. This is caught by ConnectInputs(),\n     // but catching it earlier avoids a potential DoS attack:\n     set<uint256> uniqueTx;\n-    for (unsigned int i=0; i<vtx.size(); i++) {\n-        uniqueTx.insert(GetTxHash(i));\n+    for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+        uniqueTx.insert(block.GetTxHash(i));\n     }\n-    if (uniqueTx.size() != vtx.size())\n+    if (uniqueTx.size() != block.vtx.size())\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"));\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkle root\n-    if (fCheckMerkleRoot && hashMerkleRoot != BuildMerkleTree())\n+    if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n     return true;\n@@ -2383,7 +2383,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().c_str()));\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock(state))\n+    if (!CheckBlock(*pblock, state))\n         return error(\"ProcessBlock() : CheckBlock FAILED\");\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n@@ -2780,7 +2780,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !block.CheckBlock(state))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n             return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {"
      },
      {
        "sha": "a17c4b933369126b752fd66f0b5f7680211cc6fd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
        "patch": "@@ -703,9 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    // Context-independent validity checks\n-    bool CheckBlock(CValidationState &state, bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n-\n     // Store block on disk\n     // if dbp is provided, the file is known to already reside on disk\n     bool AcceptBlock(CValidationState &state, CDiskBlockPos *dbp = NULL);\n@@ -732,6 +729,9 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n // Add this block to the block index, and if necessary, switch the active block chain to this\n bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos& pos);\n \n+// Context-independent validity checks\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+\n \n \n class CBlockFileInfo"
      },
      {
        "sha": "5675c40e7643b0ff2ade28d15acb3db9a5e3ed9f",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
        "patch": "@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(forkingBlock.CheckBlock(state, false, false));\n+        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n     }\n \n     SetMockTime(0);"
      }
    ]
  },
  {
    "sha": "d149e187014f93e0ac360e8efb475c3aeb3f35ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTQ5ZTE4NzAxNGY5M2UwYWMzNjBlOGVmYjQ3NWMzYWViM2YzNWVl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:27:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:25Z"
      },
      "message": "Pulled AcceptBlock out of CBlock.",
      "tree": {
        "sha": "3e92792ccd2af5caa13f854a7c2a0c2447e795a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e92792ccd2af5caa13f854a7c2a0c2447e795a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d149e187014f93e0ac360e8efb475c3aeb3f35ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d149e187014f93e0ac360e8efb475c3aeb3f35ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d149e187014f93e0ac360e8efb475c3aeb3f35ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d149e187014f93e0ac360e8efb475c3aeb3f35ee/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9b6c8c770f1e56f0eabb43e94b3200cff8a2a3"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 20,
      "deletions": 21
    },
    "files": [
      {
        "sha": "20988122b2cc5b4fcd57f4a1e519af14bd832052",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d149e187014f93e0ac360e8efb475c3aeb3f35ee/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d149e187014f93e0ac360e8efb475c3aeb3f35ee/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d149e187014f93e0ac360e8efb475c3aeb3f35ee",
        "patch": "@@ -2263,42 +2263,42 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n+bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return state.Invalid(error(\"AcceptBlock() : block already in mapBlockIndex\"));\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n     if (hash != Params().HashGenesisBlock()) {\n-        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n         pindexPrev = (*mi).second;\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (nBits != GetNextWorkRequired(pindexPrev, this))\n+        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n         // Check timestamp against prev\n-        if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+        if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n             return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"));\n \n         // Check that all transactions are finalized\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            if (!IsFinalTx(tx, nHeight, GetBlockTime()))\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+            if (!IsFinalTx(tx, nHeight, block.GetBlockTime()))\n                 return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n             return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n \n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-        if (nVersion < 2)\n+        if (block.nVersion < 2)\n         {\n             if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n                 (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n@@ -2307,31 +2307,31 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n             }\n         }\n         // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-        if (nVersion >= 2)\n+        if (block.nVersion >= 2)\n         {\n             // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n             if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n                 (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n             {\n                 CScript expect = CScript() << nHeight;\n-                if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n+                if (!std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin()))\n                     return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n             }\n         }\n     }\n \n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION);\n+        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, nTime, dbp != NULL))\n+        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.nTime, dbp != NULL))\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n-            if (!WriteBlockToDisk(*this, blockPos))\n+            if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(_(\"Failed to write block\"));\n-        if (!AddToBlockIndex(*this, state, blockPos))\n+        if (!AddToBlockIndex(block, state, blockPos))\n             return error(\"AcceptBlock() : AddToBlockIndex failed\");\n     } catch(std::runtime_error &e) {\n         return state.Abort(_(\"System error: \") + e.what());\n@@ -2424,7 +2424,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock(state, dbp))\n+    if (!AcceptBlock(*pblock, state, dbp))\n         return error(\"ProcessBlock() : AcceptBlock FAILED\");\n \n     // Recursively process any orphan blocks that depended on this one\n@@ -2440,7 +2440,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n             CBlock* pblockOrphan = (*mi).second;\n             // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan resolution (that is, feeding people an invalid block based on LegitBlockX in order to get anyone relaying LegitBlockX banned)\n             CValidationState stateDummy;\n-            if (pblockOrphan->AcceptBlock(stateDummy))\n+            if (AcceptBlock(*pblockOrphan, stateDummy))\n                 vWorkQueue.push_back(pblockOrphan->GetHash());\n             mapOrphanBlocks.erase(pblockOrphan->GetHash());\n             delete pblockOrphan;"
      },
      {
        "sha": "cf0c53878597e67e1f824e2c44e5d8127b5642ad",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d149e187014f93e0ac360e8efb475c3aeb3f35ee/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d149e187014f93e0ac360e8efb475c3aeb3f35ee/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d149e187014f93e0ac360e8efb475c3aeb3f35ee",
        "patch": "@@ -701,11 +701,6 @@ class CBlock : public CBlockHeader\n             printf(\"%s \", vMerkleTree[i].ToString().c_str());\n         printf(\"\\n\");\n     }\n-\n-\n-    // Store block on disk\n-    // if dbp is provided, the file is known to already reside on disk\n-    bool AcceptBlock(CValidationState &state, CDiskBlockPos *dbp = NULL);\n };\n \n \n@@ -732,6 +727,10 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n // Context-independent validity checks\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+// Store block on disk\n+// if dbp is provided, the file is known to already reside on disk\n+bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp = NULL);\n+\n \n \n class CBlockFileInfo"
      }
    ]
  },
  {
    "sha": "07fce46cf62f22c4a252871fe607d404216aaae9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2ZjZTQ2Y2Y2MmYyMmM0YTI1Mjg3MWZlNjA3ZDQwNDIxNmFhYWU5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:37:03Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:26Z"
      },
      "message": "Moved CBlock from main.h to core.h",
      "tree": {
        "sha": "b4c6d393c536f4ef2531fdbaf692625e9e0c4810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4c6d393c536f4ef2531fdbaf692625e9e0c4810"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07fce46cf62f22c4a252871fe607d404216aaae9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07fce46cf62f22c4a252871fe607d404216aaae9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07fce46cf62f22c4a252871fe607d404216aaae9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07fce46cf62f22c4a252871fe607d404216aaae9/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d149e187014f93e0ac360e8efb475c3aeb3f35ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d149e187014f93e0ac360e8efb475c3aeb3f35ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d149e187014f93e0ac360e8efb475c3aeb3f35ee"
      }
    ],
    "stats": {
      "total": 245,
      "additions": 123,
      "deletions": 122
    },
    "files": [
      {
        "sha": "fce9ccc162e6859ace996ee28105086d003f8975",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07fce46cf62f22c4a252871fe607d404216aaae9/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07fce46cf62f22c4a252871fe607d404216aaae9/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=07fce46cf62f22c4a252871fe607d404216aaae9",
        "patch": "@@ -733,4 +733,127 @@ class CBlockHeader\n     }\n };\n \n+\n+class CBlock : public CBlockHeader\n+{\n+public:\n+    // network and disk\n+    std::vector<CTransaction> vtx;\n+\n+    // memory only\n+    mutable std::vector<uint256> vMerkleTree;\n+\n+    CBlock()\n+    {\n+        SetNull();\n+    }\n+\n+    CBlock(const CBlockHeader &header)\n+    {\n+        SetNull();\n+        *((CBlockHeader*)this) = header;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(vtx);\n+    )\n+\n+    void SetNull()\n+    {\n+        CBlockHeader::SetNull();\n+        vtx.clear();\n+        vMerkleTree.clear();\n+    }\n+\n+    CBlockHeader GetBlockHeader() const\n+    {\n+        CBlockHeader block;\n+        block.nVersion       = nVersion;\n+        block.hashPrevBlock  = hashPrevBlock;\n+        block.hashMerkleRoot = hashMerkleRoot;\n+        block.nTime          = nTime;\n+        block.nBits          = nBits;\n+        block.nNonce         = nNonce;\n+        return block;\n+    }\n+\n+    uint256 BuildMerkleTree() const\n+    {\n+        vMerkleTree.clear();\n+        BOOST_FOREACH(const CTransaction& tx, vtx)\n+            vMerkleTree.push_back(tx.GetHash());\n+        int j = 0;\n+        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+        {\n+            for (int i = 0; i < nSize; i += 2)\n+            {\n+                int i2 = std::min(i+1, nSize-1);\n+                vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n+                                           BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n+            }\n+            j += nSize;\n+        }\n+        return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n+    }\n+\n+    const uint256 &GetTxHash(unsigned int nIndex) const {\n+        assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n+        assert(nIndex < vtx.size());\n+        return vMerkleTree[nIndex];\n+    }\n+\n+    std::vector<uint256> GetMerkleBranch(int nIndex) const\n+    {\n+        if (vMerkleTree.empty())\n+            BuildMerkleTree();\n+        std::vector<uint256> vMerkleBranch;\n+        int j = 0;\n+        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+        {\n+            int i = std::min(nIndex^1, nSize-1);\n+            vMerkleBranch.push_back(vMerkleTree[j+i]);\n+            nIndex >>= 1;\n+            j += nSize;\n+        }\n+        return vMerkleBranch;\n+    }\n+\n+    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n+    {\n+        if (nIndex == -1)\n+            return 0;\n+        BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+        {\n+            if (nIndex & 1)\n+                hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n+            else\n+                hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n+            nIndex >>= 1;\n+        }\n+        return hash;\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n+            GetHash().ToString().c_str(),\n+            nVersion,\n+            hashPrevBlock.ToString().c_str(),\n+            hashMerkleRoot.ToString().c_str(),\n+            nTime, nBits, nNonce,\n+            vtx.size());\n+        for (unsigned int i = 0; i < vtx.size(); i++)\n+        {\n+            printf(\"  \");\n+            vtx[i].print();\n+        }\n+        printf(\"  vMerkleTree: \");\n+        for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n+            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n+        printf(\"\\n\");\n+    }\n+};\n+\n #endif"
      },
      {
        "sha": "5da896e02191d179146f106ade990f4040e9fa56",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 122,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07fce46cf62f22c4a252871fe607d404216aaae9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07fce46cf62f22c4a252871fe607d404216aaae9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=07fce46cf62f22c4a252871fe607d404216aaae9",
        "patch": "@@ -581,128 +581,6 @@ class CPartialMerkleTree\n };\n \n \n-class CBlock : public CBlockHeader\n-{\n-public:\n-    // network and disk\n-    std::vector<CTransaction> vtx;\n-\n-    // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n-\n-    CBlock()\n-    {\n-        SetNull();\n-    }\n-\n-    CBlock(const CBlockHeader &header)\n-    {\n-        SetNull();\n-        *((CBlockHeader*)this) = header;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(*(CBlockHeader*)this);\n-        READWRITE(vtx);\n-    )\n-\n-    void SetNull()\n-    {\n-        CBlockHeader::SetNull();\n-        vtx.clear();\n-        vMerkleTree.clear();\n-    }\n-\n-    CBlockHeader GetBlockHeader() const\n-    {\n-        CBlockHeader block;\n-        block.nVersion       = nVersion;\n-        block.hashPrevBlock  = hashPrevBlock;\n-        block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n-        return block;\n-    }\n-\n-    uint256 BuildMerkleTree() const\n-    {\n-        vMerkleTree.clear();\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            vMerkleTree.push_back(tx.GetHash());\n-        int j = 0;\n-        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-        {\n-            for (int i = 0; i < nSize; i += 2)\n-            {\n-                int i2 = std::min(i+1, nSize-1);\n-                vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n-                                           BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n-            }\n-            j += nSize;\n-        }\n-        return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n-    }\n-\n-    const uint256 &GetTxHash(unsigned int nIndex) const {\n-        assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n-        assert(nIndex < vtx.size());\n-        return vMerkleTree[nIndex];\n-    }\n-\n-    std::vector<uint256> GetMerkleBranch(int nIndex) const\n-    {\n-        if (vMerkleTree.empty())\n-            BuildMerkleTree();\n-        std::vector<uint256> vMerkleBranch;\n-        int j = 0;\n-        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-        {\n-            int i = std::min(nIndex^1, nSize-1);\n-            vMerkleBranch.push_back(vMerkleTree[j+i]);\n-            nIndex >>= 1;\n-            j += nSize;\n-        }\n-        return vMerkleBranch;\n-    }\n-\n-    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n-    {\n-        if (nIndex == -1)\n-            return 0;\n-        BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n-        {\n-            if (nIndex & 1)\n-                hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n-            else\n-                hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n-            nIndex >>= 1;\n-        }\n-        return hash;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n-            GetHash().ToString().c_str(),\n-            nVersion,\n-            hashPrevBlock.ToString().c_str(),\n-            hashMerkleRoot.ToString().c_str(),\n-            nTime, nBits, nNonce,\n-            vtx.size());\n-        for (unsigned int i = 0; i < vtx.size(); i++)\n-        {\n-            printf(\"  \");\n-            vtx[i].print();\n-        }\n-        printf(\"  vMerkleTree: \");\n-        for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n-        printf(\"\\n\");\n-    }\n-};\n-\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);"
      }
    ]
  },
  {
    "sha": "68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGI5N2RlOGE2YTNlY2M2OGJkMWUxZDI0YmQzNjRlMzkzZTcyMmMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-23T22:23:28Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:27Z"
      },
      "message": "Dump addresses every 15 minutes instead of 10 seconds",
      "tree": {
        "sha": "c52616ed409bbfdf5ecbe2a3a55de453e6a84343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c52616ed409bbfdf5ecbe2a3a55de453e6a84343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07fce46cf62f22c4a252871fe607d404216aaae9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07fce46cf62f22c4a252871fe607d404216aaae9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07fce46cf62f22c4a252871fe607d404216aaae9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5418c3de40609767c4c77485b791adcc398b7050",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
        "patch": "@@ -22,6 +22,9 @@\n #include <miniupnpc/upnperrors.h>\n #endif\n \n+// Dump addresses to peers.dat every 15 minutes (900s)\n+#define DUMP_ADDRESSES_INTERVAL 900\n+\n using namespace std;\n using namespace boost;\n \n@@ -1730,7 +1733,7 @@ void StartNode(boost::thread_group& threadGroup)\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    threadGroup.create_thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 10000));\n+    threadGroup.create_thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, DUMP_ADDRESSES_INTERVAL * 1000));\n }\n \n bool StopNode()"
      },
      {
        "sha": "bee2749c16a5810abd61630099ab2cf0e5ca48f3",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
        "patch": "@@ -527,7 +527,7 @@ inline uint32_t ByteReverse(uint32_t value)\n // Standard wrapper for do-something-forever thread functions.\n // \"Forever\" really means until the thread is interrupted.\n // Use it like:\n-//   new boost::thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 10000));\n+//   new boost::thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 900000));\n // or maybe:\n //    boost::function<void()> f = boost::bind(&FunctionWithArg, argument);\n //    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"nothing\", f, milliseconds));\n@@ -540,8 +540,8 @@ template <typename Callable> void LoopForever(const char* name,  Callable func,\n     {\n         while (1)\n         {\n-            func();\n             MilliSleep(msecs);\n+            func();\n         }\n     }\n     catch (boost::thread_interrupted)"
      }
    ]
  },
  {
    "sha": "34d7ffa45667d54f9de3c79baa3b52bf1112f038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGQ3ZmZhNDU2NjdkNTRmOWRlM2M3OWJhYTNiNTJiZjExMTJmMDM4",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-06-24T14:41:16Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:28Z"
      },
      "message": "main.h->core.h include dependency improvements.",
      "tree": {
        "sha": "f2328413dff32ba912aefb733c2ad52475a44e88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2328413dff32ba912aefb733c2ad52475a44e88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34d7ffa45667d54f9de3c79baa3b52bf1112f038",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d7ffa45667d54f9de3c79baa3b52bf1112f038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34d7ffa45667d54f9de3c79baa3b52bf1112f038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d7ffa45667d54f9de3c79baa3b52bf1112f038/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68b97de8a6a3ecc68bd1e1d24bd364e393e722c3"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b6799e143dc9cfd071404da18a7e99f3c18f9557",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=34d7ffa45667d54f9de3c79baa3b52bf1112f038",
        "patch": "@@ -5,7 +5,7 @@\n #include <stdlib.h>\n \n #include \"bloom.h\"\n-#include \"main.h\"\n+#include \"core.h\"\n #include \"script.h\"\n \n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455"
      },
      {
        "sha": "3bb62fb7937bd519d1894ae2e21ee5c1ca2424bb",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=34d7ffa45667d54f9de3c79baa3b52bf1112f038",
        "patch": "@@ -6,7 +6,8 @@\n #include \"assert.h\"\n \n #include \"chainparams.h\"\n-#include \"main.h\"\n+#include \"core.h\"\n+#include \"protocol.h\"\n #include \"util.h\"\n \n //"
      },
      {
        "sha": "a70c0958df53adca7ad003e16851180138ae6642",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=34d7ffa45667d54f9de3c79baa3b52bf1112f038",
        "patch": "@@ -4,7 +4,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n-#include \"main.h\"\n #include \"db.h\"\n #include \"init.h\"\n #include \"bitcoinrpc.h\""
      },
      {
        "sha": "f08688d3869b59607c56e5c4cbf4591ed3d9bea0",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d7ffa45667d54f9de3c79baa3b52bf1112f038/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=34d7ffa45667d54f9de3c79baa3b52bf1112f038",
        "patch": "@@ -9,7 +9,6 @@\n #include \"bitcoinrpc.h\"\n #include \"db.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"net.h\"\n #include \"wallet.h\"\n "
      }
    ]
  },
  {
    "sha": "a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2ZkYWExZjY3MjRkYjEyZTE2OTEzYWYwY2M0MzJlOTRiM2YyZGI4",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-23T20:32:20Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:29Z"
      },
      "message": "Added locks on the setpwalletRegistered functions in main.cpp and added an UnregisterAllWallets function.",
      "tree": {
        "sha": "c7466693f6cda7ca24b4e12d50af3f5fcc0f623f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7466693f6cda7ca24b4e12d50af3f5fcc0f623f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7fdaa1f6724db12e16913af0cc432e94b3f2db8/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34d7ffa45667d54f9de3c79baa3b52bf1112f038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d7ffa45667d54f9de3c79baa3b52bf1112f038",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34d7ffa45667d54f9de3c79baa3b52bf1112f038"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b3da1a1a9af0e21f4f4e72690961c7261be7669",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fdaa1f6724db12e16913af0cc432e94b3f2db8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fdaa1f6724db12e16913af0cc432e94b3f2db8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
        "patch": "@@ -99,9 +99,16 @@ void UnregisterWallet(CWallet* pwalletIn)\n     }\n }\n \n+void UnregisterAllWallets()\n+{\n+    LOCK(cs_setpwalletRegistered);\n+    setpwalletRegistered.clear();\n+}\n+\n // get the wallet transaction with the given hash (if it exists)\n bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         if (pwallet->GetTransaction(hashTx,wtx))\n             return true;\n@@ -111,48 +118,55 @@ bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n // erases transaction with the given hash from all wallets\n void static EraseFromWallets(uint256 hash)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->EraseFromWallet(hash);\n }\n \n // make sure all wallets know about the given transaction, in the given block\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n }\n \n // notify wallets about a new best chain\n void static SetBestChain(const CBlockLocator& loc)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->SetBestChain(loc);\n }\n \n // notify wallets about an updated transaction\n void static UpdatedTransaction(const uint256& hashTx)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->UpdatedTransaction(hashTx);\n }\n \n // dump all wallets\n void static PrintWallets(const CBlock& block)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->PrintWallet(block);\n }\n \n // notify wallets about an incoming inventory (for request counts)\n void static Inventory(const uint256& hash)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->Inventory(hash);\n }\n \n // ask wallets to resend their transactions\n void static ResendWalletTransactions()\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->ResendWalletTransactions();\n }"
      }
    ]
  },
  {
    "sha": "756a99dd077e69caa2257ab29f7c78ba1cb7a007",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTZhOTlkZDA3N2U2OWNhYTIyNTdhYjI5ZjdjNzhiYTFjYjdhMDA3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-23T20:48:35Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:30Z"
      },
      "message": "Calling UnregisterAllWallets() instead of UnregisterWallet(pwalletMain) in init.cpp",
      "tree": {
        "sha": "8007eab97d74cb081085edc1cf904425d4664c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8007eab97d74cb081085edc1cf904425d4664c16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/756a99dd077e69caa2257ab29f7c78ba1cb7a007",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/756a99dd077e69caa2257ab29f7c78ba1cb7a007",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/756a99dd077e69caa2257ab29f7c78ba1cb7a007",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/756a99dd077e69caa2257ab29f7c78ba1cb7a007/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7fdaa1f6724db12e16913af0cc432e94b3f2db8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7fdaa1f6724db12e16913af0cc432e94b3f2db8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6b2c91b407076b0b10baf5a6377ee37908e346f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/756a99dd077e69caa2257ab29f7c78ba1cb7a007/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/756a99dd077e69caa2257ab29f7c78ba1cb7a007/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=756a99dd077e69caa2257ab29f7c78ba1cb7a007",
        "patch": "@@ -119,7 +119,7 @@ void Shutdown()\n     }\n     bitdb.Flush(true);\n     boost::filesystem::remove(GetPidFile());\n-    UnregisterWallet(pwalletMain);\n+    UnregisterAllWallets();\n     delete pwalletMain;\n }\n "
      },
      {
        "sha": "8ad2437c63b2ed94462053db1ad9a9959a5cfc47",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/756a99dd077e69caa2257ab29f7c78ba1cb7a007/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/756a99dd077e69caa2257ab29f7c78ba1cb7a007/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=756a99dd077e69caa2257ab29f7c78ba1cb7a007",
        "patch": "@@ -119,6 +119,8 @@ struct CBlockTemplate;\n void RegisterWallet(CWallet* pwalletIn);\n /** Unregister a wallet from core */\n void UnregisterWallet(CWallet* pwalletIn);\n+/** Unregister all wallets from core */\n+void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n "
      }
    ]
  },
  {
    "sha": "681a0b48ad27eaca0b74019b6d2074fd4606431b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODFhMGI0OGFkMjdlYWNhMGI3NDAxOWI2ZDIwNzRmZDQ2MDY0MzFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-25T01:03:03Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:31Z"
      },
      "message": "Move core implementations to core.cpp",
      "tree": {
        "sha": "ef66c84f5bf4214a724e109a740ca28bd0ec48d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef66c84f5bf4214a724e109a740ca28bd0ec48d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/681a0b48ad27eaca0b74019b6d2074fd4606431b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681a0b48ad27eaca0b74019b6d2074fd4606431b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/681a0b48ad27eaca0b74019b6d2074fd4606431b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681a0b48ad27eaca0b74019b6d2074fd4606431b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "756a99dd077e69caa2257ab29f7c78ba1cb7a007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/756a99dd077e69caa2257ab29f7c78ba1cb7a007",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/756a99dd077e69caa2257ab29f7c78ba1cb7a007"
      }
    ],
    "stats": {
      "total": 596,
      "additions": 316,
      "deletions": 280
    },
    "files": [
      {
        "sha": "afba0959cfe39cc298a623293c590374ec2430ba",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 294,
        "deletions": 0,
        "changes": 294,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/681a0b48ad27eaca0b74019b6d2074fd4606431b/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/681a0b48ad27eaca0b74019b6d2074fd4606431b/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=681a0b48ad27eaca0b74019b6d2074fd4606431b",
        "patch": "@@ -4,4 +4,298 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"core.h\"\n+#include \"util.h\"\n \n+std::string COutPoint::ToString() const\n+{\n+    return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n+}\n+\n+void COutPoint::print() const\n+{\n+    printf(\"%s\\n\", ToString().c_str());\n+}\n+\n+CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, unsigned int nSequenceIn)\n+{\n+    prevout = prevoutIn;\n+    scriptSig = scriptSigIn;\n+    nSequence = nSequenceIn;\n+}\n+\n+CTxIn::CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn, unsigned int nSequenceIn)\n+{\n+    prevout = COutPoint(hashPrevTx, nOut);\n+    scriptSig = scriptSigIn;\n+    nSequence = nSequenceIn;\n+}\n+\n+std::string CTxIn::ToString() const\n+{\n+    std::string str;\n+    str += \"CTxIn(\";\n+    str += prevout.ToString();\n+    if (prevout.IsNull())\n+        str += strprintf(\", coinbase %s\", HexStr(scriptSig).c_str());\n+    else\n+        str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24).c_str());\n+    if (nSequence != std::numeric_limits<unsigned int>::max())\n+        str += strprintf(\", nSequence=%u\", nSequence);\n+    str += \")\";\n+    return str;\n+}\n+\n+void CTxIn::print() const\n+{\n+    printf(\"%s\\n\", ToString().c_str());\n+}\n+\n+CTxOut::CTxOut(int64 nValueIn, CScript scriptPubKeyIn)\n+{\n+    nValue = nValueIn;\n+    scriptPubKey = scriptPubKeyIn;\n+}\n+\n+uint256 CTxOut::GetHash() const\n+{\n+    return SerializeHash(*this);\n+}\n+\n+std::string CTxOut::ToString() const\n+{\n+    if (scriptPubKey.size() < 6)\n+        return \"CTxOut(error)\";\n+    return strprintf(\"CTxOut(nValue=%\"PRI64d\".%08\"PRI64d\", scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30).c_str());\n+}\n+\n+void CTxOut::print() const\n+{\n+    printf(\"%s\\n\", ToString().c_str());\n+}\n+\n+uint256 CTransaction::GetHash() const\n+{\n+    return SerializeHash(*this);\n+}\n+\n+bool CTransaction::IsNewerThan(const CTransaction& old) const\n+{\n+    if (vin.size() != old.vin.size())\n+        return false;\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+        if (vin[i].prevout != old.vin[i].prevout)\n+            return false;\n+\n+    bool fNewer = false;\n+    unsigned int nLowest = std::numeric_limits<unsigned int>::max();\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+    {\n+        if (vin[i].nSequence != old.vin[i].nSequence)\n+        {\n+            if (vin[i].nSequence <= nLowest)\n+            {\n+                fNewer = false;\n+                nLowest = vin[i].nSequence;\n+            }\n+            if (old.vin[i].nSequence < nLowest)\n+            {\n+                fNewer = true;\n+                nLowest = old.vin[i].nSequence;\n+            }\n+        }\n+    }\n+    return fNewer;\n+}\n+\n+std::string CTransaction::ToString() const\n+{\n+    std::string str;\n+    str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n+        GetHash().ToString().substr(0,10).c_str(),\n+        nVersion,\n+        vin.size(),\n+        vout.size(),\n+        nLockTime);\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+        str += \"    \" + vin[i].ToString() + \"\\n\";\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+        str += \"    \" + vout[i].ToString() + \"\\n\";\n+    return str;\n+}\n+\n+void CTransaction::print() const\n+{\n+    printf(\"%s\", ToString().c_str());\n+}\n+\n+// Amount compression:\n+// * If the amount is 0, output 0\n+// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)\n+// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)\n+//   * call the result n\n+//   * output 1 + 10*(9*n + d - 1) + e\n+// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n+// (this is decodable, as d is in [1-9] and e is in [0-9])\n+\n+uint64 CTxOutCompressor::CompressAmount(uint64 n)\n+{\n+    if (n == 0)\n+        return 0;\n+    int e = 0;\n+    while (((n % 10) == 0) && e < 9) {\n+        n /= 10;\n+        e++;\n+    }\n+    if (e < 9) {\n+        int d = (n % 10);\n+        assert(d >= 1 && d <= 9);\n+        n /= 10;\n+        return 1 + (n*9 + d - 1)*10 + e;\n+    } else {\n+        return 1 + (n - 1)*10 + 9;\n+    }\n+}\n+\n+uint64 CTxOutCompressor::DecompressAmount(uint64 x)\n+{\n+    // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n+    if (x == 0)\n+        return 0;\n+    x--;\n+    // x = 10*(9*n + d - 1) + e\n+    int e = x % 10;\n+    x /= 10;\n+    uint64 n = 0;\n+    if (e < 9) {\n+        // x = 9*n + d - 1\n+        int d = (x % 9) + 1;\n+        x /= 9;\n+        // x = n\n+        n = x*10 + d;\n+    } else {\n+        n = x+1;\n+    }\n+    while (e) {\n+        n *= 10;\n+        e--;\n+    }\n+    return n;\n+}\n+\n+// calculate number of bytes for the bitmask, and its number of non-zero bytes\n+// each bit in the bitmask represents the availability of one output, but the\n+// availabilities of the first two outputs are encoded separately\n+void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n+    unsigned int nLastUsedByte = 0;\n+    for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n+        bool fZero = true;\n+        for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n+            if (!vout[2+b*8+i].IsNull()) {\n+                fZero = false;\n+                continue;\n+            }\n+        }\n+        if (!fZero) {\n+            nLastUsedByte = b + 1;\n+            nNonzeroBytes++;\n+        }\n+    }\n+    nBytes += nLastUsedByte;\n+}\n+\n+bool CCoins::Spend(const COutPoint &out, CTxInUndo &undo) {\n+    if (out.n >= vout.size())\n+        return false;\n+    if (vout[out.n].IsNull())\n+        return false;\n+    undo = CTxInUndo(vout[out.n]);\n+    vout[out.n].SetNull();\n+    Cleanup();\n+    if (vout.size() == 0) {\n+        undo.nHeight = nHeight;\n+        undo.fCoinBase = fCoinBase;\n+        undo.nVersion = this->nVersion;\n+    }\n+    return true;\n+}\n+\n+bool CCoins::Spend(int nPos) {\n+    CTxInUndo undo;\n+    COutPoint out(0, nPos);\n+    return Spend(out, undo);\n+}\n+\n+uint256 CBlockHeader::GetHash() const\n+{\n+    return Hash(BEGIN(nVersion), END(nNonce));\n+}\n+\n+uint256 CBlock::BuildMerkleTree() const\n+{\n+    vMerkleTree.clear();\n+    BOOST_FOREACH(const CTransaction& tx, vtx)\n+        vMerkleTree.push_back(tx.GetHash());\n+    int j = 0;\n+    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+    {\n+        for (int i = 0; i < nSize; i += 2)\n+        {\n+            int i2 = std::min(i+1, nSize-1);\n+            vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n+                                       BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n+        }\n+        j += nSize;\n+    }\n+    return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n+}\n+\n+std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n+{\n+    if (vMerkleTree.empty())\n+        BuildMerkleTree();\n+    std::vector<uint256> vMerkleBranch;\n+    int j = 0;\n+    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+    {\n+        int i = std::min(nIndex^1, nSize-1);\n+        vMerkleBranch.push_back(vMerkleTree[j+i]);\n+        nIndex >>= 1;\n+        j += nSize;\n+    }\n+    return vMerkleBranch;\n+}\n+\n+uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n+{\n+    if (nIndex == -1)\n+        return 0;\n+    BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+    {\n+        if (nIndex & 1)\n+            hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n+        else\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n+        nIndex >>= 1;\n+    }\n+    return hash;\n+}\n+\n+void CBlock::print() const\n+{\n+    printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n+        GetHash().ToString().c_str(),\n+        nVersion,\n+        hashPrevBlock.ToString().c_str(),\n+        hashMerkleRoot.ToString().c_str(),\n+        nTime, nBits, nNonce,\n+        vtx.size());\n+    for (unsigned int i = 0; i < vtx.size(); i++)\n+    {\n+        printf(\"  \");\n+        vtx[i].print();\n+    }\n+    printf(\"  vMerkleTree: \");\n+    for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n+        printf(\"%s \", vMerkleTree[i].ToString().c_str());\n+    printf(\"\\n\");\n+}"
      },
      {
        "sha": "1b9d4dd765b4e87d76e0c8d6de91c94e0ca0d9b7",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 22,
        "deletions": 227,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/681a0b48ad27eaca0b74019b6d2074fd4606431b/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/681a0b48ad27eaca0b74019b6d2074fd4606431b/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=681a0b48ad27eaca0b74019b6d2074fd4606431b",
        "patch": "@@ -7,7 +7,6 @@\n \n #include \"uint256.h\"\n #include \"serialize.h\"\n-#include \"util.h\"\n #include \"script.h\"\n \n #include <stdio.h>\n@@ -42,15 +41,8 @@ class COutPoint\n         return !(a == b);\n     }\n \n-    std::string ToString() const\n-    {\n-        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\\n\", ToString().c_str());\n-    }\n+    std::string ToString() const;\n+    void print() const;\n };\n \n /** An inpoint - a combination of a transaction and an index n into its vin */\n@@ -82,19 +74,8 @@ class CTxIn\n         nSequence = std::numeric_limits<unsigned int>::max();\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())\n-    {\n-        prevout = prevoutIn;\n-        scriptSig = scriptSigIn;\n-        nSequence = nSequenceIn;\n-    }\n-\n-    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())\n-    {\n-        prevout = COutPoint(hashPrevTx, nOut);\n-        scriptSig = scriptSigIn;\n-        nSequence = nSequenceIn;\n-    }\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max());\n+    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max());\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -120,25 +101,8 @@ class CTxIn\n         return !(a == b);\n     }\n \n-    std::string ToString() const\n-    {\n-        std::string str;\n-        str += \"CTxIn(\";\n-        str += prevout.ToString();\n-        if (prevout.IsNull())\n-            str += strprintf(\", coinbase %s\", HexStr(scriptSig).c_str());\n-        else\n-            str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24).c_str());\n-        if (nSequence != std::numeric_limits<unsigned int>::max())\n-            str += strprintf(\", nSequence=%u\", nSequence);\n-        str += \")\";\n-        return str;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\\n\", ToString().c_str());\n-    }\n+    std::string ToString() const;\n+    void print() const;\n };\n \n \n@@ -158,11 +122,7 @@ class CTxOut\n         SetNull();\n     }\n \n-    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)\n-    {\n-        nValue = nValueIn;\n-        scriptPubKey = scriptPubKeyIn;\n-    }\n+    CTxOut(int64 nValueIn, CScript scriptPubKeyIn);\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -181,10 +141,7 @@ class CTxOut\n         return (nValue == -1);\n     }\n \n-    uint256 GetHash() const\n-    {\n-        return SerializeHash(*this);\n-    }\n+    uint256 GetHash() const;\n \n     bool IsDust(int64 nMinRelayTxFee) const\n     {\n@@ -210,17 +167,8 @@ class CTxOut\n         return !(a == b);\n     }\n \n-    std::string ToString() const\n-    {\n-        if (scriptPubKey.size() < 6)\n-            return \"CTxOut(error)\";\n-        return strprintf(\"CTxOut(nValue=%\"PRI64d\".%08\"PRI64d\", scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30).c_str());\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\\n\", ToString().c_str());\n-    }\n+    std::string ToString() const;\n+    void print() const;\n };\n \n \n@@ -265,39 +213,8 @@ class CTransaction\n         return (vin.empty() && vout.empty());\n     }\n \n-    uint256 GetHash() const\n-    {\n-        return SerializeHash(*this);\n-    }\n-\n-    bool IsNewerThan(const CTransaction& old) const\n-    {\n-        if (vin.size() != old.vin.size())\n-            return false;\n-        for (unsigned int i = 0; i < vin.size(); i++)\n-            if (vin[i].prevout != old.vin[i].prevout)\n-                return false;\n-\n-        bool fNewer = false;\n-        unsigned int nLowest = std::numeric_limits<unsigned int>::max();\n-        for (unsigned int i = 0; i < vin.size(); i++)\n-        {\n-            if (vin[i].nSequence != old.vin[i].nSequence)\n-            {\n-                if (vin[i].nSequence <= nLowest)\n-                {\n-                    fNewer = false;\n-                    nLowest = vin[i].nSequence;\n-                }\n-                if (old.vin[i].nSequence < nLowest)\n-                {\n-                    fNewer = true;\n-                    nLowest = old.vin[i].nSequence;\n-                }\n-            }\n-        }\n-        return fNewer;\n-    }\n+    uint256 GetHash() const;\n+    bool IsNewerThan(const CTransaction& old) const;\n \n     bool IsCoinBase() const\n     {\n@@ -318,26 +235,8 @@ class CTransaction\n     }\n \n \n-    std::string ToString() const\n-    {\n-        std::string str;\n-        str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n-            GetHash().ToString().substr(0,10).c_str(),\n-            nVersion,\n-            vin.size(),\n-            vout.size(),\n-            nLockTime);\n-        for (unsigned int i = 0; i < vin.size(); i++)\n-            str += \"    \" + vin[i].ToString() + \"\\n\";\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-            str += \"    \" + vout[i].ToString() + \"\\n\";\n-        return str;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\", ToString().c_str());\n-    }\n+    std::string ToString() const;\n+    void print() const;\n };\n \n /** wrapper for CTxOut that provides a more compact serialization */\n@@ -521,26 +420,7 @@ class CCoins\n         return !(a == b);\n     }\n \n-    // calculate number of bytes for the bitmask, and its number of non-zero bytes\n-    // each bit in the bitmask represents the availability of one output, but the\n-    // availabilities of the first two outputs are encoded separately\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-        unsigned int nLastUsedByte = 0;\n-        for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-            bool fZero = true;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-                if (!vout[2+b*8+i].IsNull()) {\n-                    fZero = false;\n-                    continue;\n-                }\n-            }\n-            if (!fZero) {\n-                nLastUsedByte = b + 1;\n-                nNonzeroBytes++;\n-            }\n-        }\n-        nBytes += nLastUsedByte;\n-    }\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const;\n \n     bool IsCoinBase() const {\n         return fCoinBase;\n@@ -633,28 +513,10 @@ class CCoins\n     }\n \n     // mark an outpoint spent, and construct undo information\n-    bool Spend(const COutPoint &out, CTxInUndo &undo) {\n-        if (out.n >= vout.size())\n-            return false;\n-        if (vout[out.n].IsNull())\n-            return false;\n-        undo = CTxInUndo(vout[out.n]);\n-        vout[out.n].SetNull();\n-        Cleanup();\n-        if (vout.size() == 0) {\n-            undo.nHeight = nHeight;\n-            undo.fCoinBase = fCoinBase;\n-            undo.nVersion = this->nVersion;\n-        }\n-        return true;\n-    }\n+    bool Spend(const COutPoint &out, CTxInUndo &undo);\n \n     // mark a vout spent\n-    bool Spend(int nPos) {\n-        CTxInUndo undo;\n-        COutPoint out(0, nPos);\n-        return Spend(out, undo);\n-    }\n+    bool Spend(int nPos);\n \n     // check whether a particular output is still available\n     bool IsAvailable(unsigned int nPos) const {\n@@ -722,10 +584,7 @@ class CBlockHeader\n         return (nBits == 0);\n     }\n \n-    uint256 GetHash() const\n-    {\n-        return Hash(BEGIN(nVersion), END(nNonce));\n-    }\n+    uint256 GetHash() const;\n \n     int64 GetBlockTime() const\n     {\n@@ -779,81 +638,17 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n-    uint256 BuildMerkleTree() const\n-    {\n-        vMerkleTree.clear();\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            vMerkleTree.push_back(tx.GetHash());\n-        int j = 0;\n-        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-        {\n-            for (int i = 0; i < nSize; i += 2)\n-            {\n-                int i2 = std::min(i+1, nSize-1);\n-                vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n-                                           BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n-            }\n-            j += nSize;\n-        }\n-        return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n-    }\n+    uint256 BuildMerkleTree() const;\n \n     const uint256 &GetTxHash(unsigned int nIndex) const {\n         assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n         assert(nIndex < vtx.size());\n         return vMerkleTree[nIndex];\n     }\n \n-    std::vector<uint256> GetMerkleBranch(int nIndex) const\n-    {\n-        if (vMerkleTree.empty())\n-            BuildMerkleTree();\n-        std::vector<uint256> vMerkleBranch;\n-        int j = 0;\n-        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-        {\n-            int i = std::min(nIndex^1, nSize-1);\n-            vMerkleBranch.push_back(vMerkleTree[j+i]);\n-            nIndex >>= 1;\n-            j += nSize;\n-        }\n-        return vMerkleBranch;\n-    }\n-\n-    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n-    {\n-        if (nIndex == -1)\n-            return 0;\n-        BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n-        {\n-            if (nIndex & 1)\n-                hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n-            else\n-                hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n-            nIndex >>= 1;\n-        }\n-        return hash;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n-            GetHash().ToString().c_str(),\n-            nVersion,\n-            hashPrevBlock.ToString().c_str(),\n-            hashMerkleRoot.ToString().c_str(),\n-            nTime, nBits, nNonce,\n-            vtx.size());\n-        for (unsigned int i = 0; i < vtx.size(); i++)\n-        {\n-            printf(\"  \");\n-            vtx[i].print();\n-        }\n-        printf(\"  vMerkleTree: \");\n-        for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n-        printf(\"\\n\");\n-    }\n+    std::vector<uint256> GetMerkleBranch(int nIndex) const;\n+    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);\n+    void print() const;\n };\n \n #endif"
      },
      {
        "sha": "17f3ffc3a9ef52ce58cea7d0fc84d54172073619",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 53,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/681a0b48ad27eaca0b74019b6d2074fd4606431b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/681a0b48ad27eaca0b74019b6d2074fd4606431b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=681a0b48ad27eaca0b74019b6d2074fd4606431b",
        "patch": "@@ -4768,59 +4768,6 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n         minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n }\n \n-// Amount compression:\n-// * If the amount is 0, output 0\n-// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)\n-// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)\n-//   * call the result n\n-//   * output 1 + 10*(9*n + d - 1) + e\n-// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n-// (this is decodable, as d is in [1-9] and e is in [0-9])\n-\n-uint64 CTxOutCompressor::CompressAmount(uint64 n)\n-{\n-    if (n == 0)\n-        return 0;\n-    int e = 0;\n-    while (((n % 10) == 0) && e < 9) {\n-        n /= 10;\n-        e++;\n-    }\n-    if (e < 9) {\n-        int d = (n % 10);\n-        assert(d >= 1 && d <= 9);\n-        n /= 10;\n-        return 1 + (n*9 + d - 1)*10 + e;\n-    } else {\n-        return 1 + (n - 1)*10 + 9;\n-    }\n-}\n-\n-uint64 CTxOutCompressor::DecompressAmount(uint64 x)\n-{\n-    // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n-    if (x == 0)\n-        return 0;\n-    x--;\n-    // x = 10*(9*n + d - 1) + e\n-    int e = x % 10;\n-    x /= 10;\n-    uint64 n = 0;\n-    if (e < 9) {\n-        // x = 9*n + d - 1\n-        int d = (x % 9) + 1;\n-        x /= 9;\n-        // x = n\n-        n = x*10 + d;\n-    } else {\n-        n = x+1;\n-    }\n-    while (e) {\n-        n *= 10;\n-        e--;\n-    }\n-    return n;\n-}\n \n \n class CMainCleanup"
      }
    ]
  },
  {
    "sha": "ca1ebfd65e0a0787883c424fab73c740c2fefdba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTFlYmZkNjVlMGEwNzg3ODgzYzQyNGZhYjczYzc0MGMyZmVmZGJh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-06-25T09:31:15Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:32Z"
      },
      "message": "translation update 2013-06-25\n\n- updates bitcoinstrings.cpp and bitcoin_en.ts so new translations can be\n  made on Transifex",
      "tree": {
        "sha": "4f320f97b42ee35809813c10b7c5bf4be71afe48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f320f97b42ee35809813c10b7c5bf4be71afe48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca1ebfd65e0a0787883c424fab73c740c2fefdba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca1ebfd65e0a0787883c424fab73c740c2fefdba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca1ebfd65e0a0787883c424fab73c740c2fefdba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca1ebfd65e0a0787883c424fab73c740c2fefdba/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "681a0b48ad27eaca0b74019b6d2074fd4606431b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681a0b48ad27eaca0b74019b6d2074fd4606431b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/681a0b48ad27eaca0b74019b6d2074fd4606431b"
      }
    ],
    "stats": {
      "total": 215,
      "additions": 123,
      "deletions": 92
    },
    "files": [
      {
        "sha": "cb09e93e76ea65b1edf302dbf681ecad24270b71",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1ebfd65e0a0787883c424fab73c740c2fefdba/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1ebfd65e0a0787883c424fab73c740c2fefdba/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=ca1ebfd65e0a0787883c424fab73c740c2fefdba",
        "patch": "@@ -33,6 +33,10 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Cannot obtain a lock on data directory %s. Bitcoin is probably already \"\n \"running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Enter regression test mode, which uses a special chain in which blocks can \"\n+\"be solved instantly. This is intended for regression testing tools and app \"\n+\"development.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: The transaction was rejected! This might happen if some of the coins \"\n \"in your wallet were already spent, such as if you used a copy of wallet.dat \"\n \"and coins were spent in the copy but not marked as spent here.\"),\n@@ -133,6 +137,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Get help for a command\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"How many blocks to check at startup (default: 288, 0 = all)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"How thorough the block verification is (0-4, default: 3)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Imports blocks from external blk000??.dat file\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Incorrect or no genesis block found. Wrong datadir for network?\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Information\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Insufficient funds\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address: '%s'\"),"
      },
      {
        "sha": "7628b39bd39a889dc1a210a7fb9efff55cbc822f",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 118,
        "deletions": 92,
        "changes": 210,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca1ebfd65e0a0787883c424fab73c740c2fefdba/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca1ebfd65e0a0787883c424fab73c740c2fefdba/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=ca1ebfd65e0a0787883c424fab73c740c2fefdba",
        "patch": "@@ -143,7 +143,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Send &amp;Coins</translation>\n     </message>\n     <message>\n-        <location line=\"+260\"/>\n+        <location line=\"+265\"/>\n         <source>Export Address Book Data</source>\n         <translation>Export Address Book Data</translation>\n     </message>\n@@ -325,17 +325,17 @@ This product includes software developed by the OpenSSL Project for use in the O\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+233\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+257\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+280\"/>\n+        <location line=\"+268\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-349\"/>\n+        <location line=\"-343\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -375,7 +375,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Quit application</translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+7\"/>\n         <source>Show information about Bitcoin</source>\n         <translation>Show information about Bitcoin</translation>\n     </message>\n@@ -395,7 +395,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Options...</translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+9\"/>\n         <source>&amp;Encrypt Wallet...</source>\n         <translation>&amp;Encrypt Wallet...</translation>\n     </message>\n@@ -410,7 +410,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Change Passphrase...</translation>\n     </message>\n     <message>\n-        <location line=\"+285\"/>\n+        <location line=\"+273\"/>\n         <source>Importing blocks from disk...</source>\n         <translation>Importing blocks from disk...</translation>\n     </message>\n@@ -420,17 +420,17 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-347\"/>\n+        <location line=\"-341\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n     <message>\n-        <location line=\"+49\"/>\n+        <location line=\"+52\"/>\n         <source>Modify configuration options for Bitcoin</source>\n         <translation>Modify configuration options for Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+12\"/>\n         <source>Backup wallet to another location</source>\n         <translation>Backup wallet to another location</translation>\n     </message>\n@@ -455,18 +455,20 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"-165\"/>\n+        <location line=\"-183\"/>\n+        <location line=\"+6\"/>\n         <location line=\"+530\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-530\"/>\n+        <location line=\"-536\"/>\n+        <location line=\"+6\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n     <message>\n-        <location line=\"+101\"/>\n+        <location line=\"+107\"/>\n         <source>&amp;Send</source>\n         <translation>&amp;Send</translation>\n     </message>\n@@ -481,12 +483,14 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Addresses</translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+23\"/>\n+        <location line=\"+2\"/>\n         <source>&amp;About Bitcoin</source>\n         <translation>&amp;About Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+10\"/>\n+        <location line=\"+2\"/>\n         <source>&amp;Show / Hide</source>\n         <translation>&amp;Show / Hide</translation>\n     </message>\n@@ -531,18 +535,19 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"+17\"/>\n-        <location line=\"+10\"/>\n+        <location line=\"-228\"/>\n+        <location line=\"+288\"/>\n         <source>[testnet]</source>\n         <translation>[testnet]</translation>\n     </message>\n     <message>\n-        <location line=\"+47\"/>\n+        <location line=\"-5\"/>\n+        <location line=\"+5\"/>\n         <source>Bitcoin client</source>\n         <translation>Bitcoin client</translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+141\"/>\n+        <location line=\"+143\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -684,15 +689,15 @@ Address: %4\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+111\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+109\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</translation>\n     </message>\n </context>\n <context>\n     <name>ClientModel</name>\n     <message>\n-        <location filename=\"../clientmodel.cpp\" line=\"+104\"/>\n+        <location filename=\"../clientmodel.cpp\" line=\"+105\"/>\n         <source>Network Alert</source>\n         <translation>Network Alert</translation>\n     </message>\n@@ -768,7 +773,7 @@ Address: %4\n <context>\n     <name>GUIUtil::HelpMessageBox</name>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+424\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+493\"/>\n         <location line=\"+12\"/>\n         <source>Bitcoin-Qt</source>\n         <translation>Bitcoin-Qt</translation>\n@@ -982,7 +987,7 @@ Address: %4\n         <translation>&amp;Apply</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+53\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+54\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1028,17 +1033,12 @@ Address: %4\n     </message>\n     <message>\n         <location line=\"+50\"/>\n-        <location line=\"+166\"/>\n+        <location line=\"+202\"/>\n         <source>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</source>\n         <translation>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</translation>\n     </message>\n     <message>\n-        <location line=\"-124\"/>\n-        <source>Balance:</source>\n-        <translation>Balance:</translation>\n-    </message>\n-    <message>\n-        <location line=\"+29\"/>\n+        <location line=\"-131\"/>\n         <source>Unconfirmed:</source>\n         <translation>Unconfirmed:</translation>\n     </message>\n@@ -1048,7 +1048,22 @@ Address: %4\n         <translation>Wallet</translation>\n     </message>\n     <message>\n-        <location line=\"+107\"/>\n+        <location line=\"+49\"/>\n+        <source>Confirmed:</source>\n+        <translation>Confirmed:</translation>\n+    </message>\n+    <message>\n+        <location line=\"+16\"/>\n+        <source>Your current spendable balance</source>\n+        <translation>Your current spendable balance</translation>\n+    </message>\n+    <message>\n+        <location line=\"+29\"/>\n+        <source>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</source>\n+        <translation>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</translation>\n+    </message>\n+    <message>\n+        <location line=\"+13\"/>\n         <source>Immature:</source>\n         <translation>Immature:</translation>\n     </message>\n@@ -1058,19 +1073,19 @@ Address: %4\n         <translation>Mined balance that has not yet matured</translation>\n     </message>\n     <message>\n-        <location line=\"+46\"/>\n-        <source>&lt;b&gt;Recent transactions&lt;/b&gt;</source>\n-        <translation>&lt;b&gt;Recent transactions&lt;/b&gt;</translation>\n+        <location line=\"+13\"/>\n+        <source>Total:</source>\n+        <translation>Total:</translation>\n     </message>\n     <message>\n-        <location line=\"-101\"/>\n-        <source>Your current balance</source>\n-        <translation>Your current balance</translation>\n+        <location line=\"+16\"/>\n+        <source>Your current total balance</source>\n+        <translation>Your current total balance</translation>\n     </message>\n     <message>\n-        <location line=\"+29\"/>\n-        <source>Total of transactions that have yet to be confirmed, and do not yet count toward the current balance</source>\n-        <translation>Total of transactions that have yet to be confirmed, and do not yet count toward the current balance</translation>\n+        <location line=\"+53\"/>\n+        <source>&lt;b&gt;Recent transactions&lt;/b&gt;</source>\n+        <translation>&lt;b&gt;Recent transactions&lt;/b&gt;</translation>\n     </message>\n     <message>\n         <location filename=\"../overviewpage.cpp\" line=\"+116\"/>\n@@ -1082,7 +1097,7 @@ Address: %4\n <context>\n     <name>PaymentServer</name>\n     <message>\n-        <location filename=\"../paymentserver.cpp\" line=\"+107\"/>\n+        <location filename=\"../paymentserver.cpp\" line=\"+109\"/>\n         <source>Cannot start bitcoin: click-to-pay handler</source>\n         <translation>Cannot start bitcoin: click-to-pay handler</translation>\n     </message>\n@@ -1120,7 +1135,7 @@ Address: %4\n         <translation>&amp;Save As...</translation>\n     </message>\n     <message>\n-        <location filename=\"../qrcodedialog.cpp\" line=\"+62\"/>\n+        <location filename=\"../qrcodedialog.cpp\" line=\"+64\"/>\n         <source>Error encoding URI into QR Code.</source>\n         <translation>Error encoding URI into QR Code.</translation>\n     </message>\n@@ -1162,7 +1177,7 @@ Address: %4\n         <location line=\"+53\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+339\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+343\"/>\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n@@ -1296,7 +1311,7 @@ Address: %4\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+124\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+128\"/>\n         <location line=\"+5\"/>\n         <location line=\"+5\"/>\n         <location line=\"+5\"/>\n@@ -1347,12 +1362,13 @@ Address: %4\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-59\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-62\"/>\n+        <location line=\"+2\"/>\n         <source>&lt;b&gt;%1&lt;/b&gt; to %2 (%3)</source>\n         <translation>&lt;b&gt;%1&lt;/b&gt; to %2 (%3)</translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+6\"/>\n         <source>Confirm send coins</source>\n         <translation>Confirm send coins</translation>\n     </message>\n@@ -1662,7 +1678,7 @@ Address: %4\n <context>\n     <name>SplashScreen</name>\n     <message>\n-        <location filename=\"../splashscreen.cpp\" line=\"+22\"/>\n+        <location filename=\"../splashscreen.cpp\" line=\"+23\"/>\n         <source>The Bitcoin developers</source>\n         <translation>The Bitcoin developers</translation>\n     </message>\n@@ -2096,7 +2112,7 @@ Address: %4\n         <translation>Show transaction details</translation>\n     </message>\n     <message>\n-        <location line=\"+139\"/>\n+        <location line=\"+143\"/>\n         <source>Export Transaction Data</source>\n         <translation>Export Transaction Data</translation>\n     </message>\n@@ -2172,7 +2188,7 @@ Address: %4\n <context>\n     <name>WalletView</name>\n     <message>\n-        <location filename=\"../walletview.cpp\" line=\"+42\"/>\n+        <location filename=\"../walletview.cpp\" line=\"+46\"/>\n         <source>&amp;Export</source>\n         <translation>&amp;Export</translation>\n     </message>\n@@ -2182,7 +2198,7 @@ Address: %4\n         <translation>Export the data in the current tab to a file</translation>\n     </message>\n     <message>\n-        <location line=\"+193\"/>\n+        <location line=\"+197\"/>\n         <source>Backup Wallet</source>\n         <translation>Backup Wallet</translation>\n     </message>\n@@ -2215,12 +2231,12 @@ Address: %4\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+94\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+98\"/>\n         <source>Bitcoin version</source>\n         <translation>Bitcoin version</translation>\n     </message>\n     <message>\n-        <location line=\"+102\"/>\n+        <location line=\"+103\"/>\n         <source>Usage:</source>\n         <translation>Usage:</translation>\n     </message>\n@@ -2235,12 +2251,12 @@ Address: %4\n         <translation>List commands</translation>\n     </message>\n     <message>\n-        <location line=\"-12\"/>\n+        <location line=\"-13\"/>\n         <source>Get help for a command</source>\n         <translation>Get help for a command</translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+25\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -2275,12 +2291,12 @@ Address: %4\n         <translation>Maintain at most &lt;n&gt; connections to peers (default: 125)</translation>\n     </message>\n     <message>\n-        <location line=\"-48\"/>\n+        <location line=\"-49\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+82\"/>\n+        <location line=\"+83\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n@@ -2290,17 +2306,17 @@ Address: %4\n         <translation>Threshold for disconnecting misbehaving peers (default: 100)</translation>\n     </message>\n     <message>\n-        <location line=\"-134\"/>\n+        <location line=\"-135\"/>\n         <source>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</source>\n         <translation>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</translation>\n     </message>\n     <message>\n-        <location line=\"-29\"/>\n+        <location line=\"-33\"/>\n         <source>An error occurred while setting up the RPC port %u for listening on IPv4: %s</source>\n         <translation>An error occurred while setting up the RPC port %u for listening on IPv4: %s</translation>\n     </message>\n     <message>\n-        <location line=\"+27\"/>\n+        <location line=\"+31\"/>\n         <source>Listen for JSON-RPC connections on &lt;port&gt; (default: 8332 or testnet: 18332)</source>\n         <translation>Listen for JSON-RPC connections on &lt;port&gt; (default: 8332 or testnet: 18332)</translation>\n     </message>\n@@ -2310,7 +2326,7 @@ Address: %4\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"+76\"/>\n+        <location line=\"+77\"/>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n@@ -2320,12 +2336,12 @@ Address: %4\n         <translation>Use the test network</translation>\n     </message>\n     <message>\n-        <location line=\"-112\"/>\n+        <location line=\"-113\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n     <message>\n-        <location line=\"-80\"/>\n+        <location line=\"-84\"/>\n         <source>%s, you must set a rpcpassword in the configuration file:\n %s\n It is recommended you use the following random password:\n@@ -2366,6 +2382,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n     </message>\n     <message>\n         <location line=\"+3\"/>\n+        <source>Enter regression test mode, which uses a special chain in which blocks can be solved instantly. This is intended for regression testing tools and app development.</source>\n+        <translation>Enter regression test mode, which uses a special chain in which blocks can be solved instantly. This is intended for regression testing tools and app development.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n         <source>Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.</source>\n         <translation>Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.</translation>\n     </message>\n@@ -2560,7 +2581,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>How thorough the block verification is (0-4, default: 3)</translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+2\"/>\n+        <source>Incorrect or no genesis block found. Wrong datadir for network?</source>\n+        <translation>Incorrect or no genesis block found. Wrong datadir for network?</translation>\n+    </message>\n+    <message>\n+        <location line=\"+18\"/>\n         <source>Not enough file descriptors available.</source>\n         <translation>Not enough file descriptors available.</translation>\n     </message>\n@@ -2585,7 +2611,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Verifying wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-69\"/>\n+        <location line=\"+4\"/>\n+        <source>You need to rebuild the database using -reindex to change -txindex</source>\n+        <translation>You need to rebuild the database using -reindex to change -txindex</translation>\n+    </message>\n+    <message>\n+        <location line=\"-74\"/>\n         <source>Imports blocks from external blk000??.dat file</source>\n         <translation>Imports blocks from external blk000??.dat file</translation>\n     </message>\n@@ -2595,7 +2626,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Set the number of script verification threads (up to 16, 0 = auto, &lt;0 = leave that many cores free, default: 0)</translation>\n     </message>\n     <message>\n-        <location line=\"+77\"/>\n+        <location line=\"+78\"/>\n         <source>Information</source>\n         <translation>Information</translation>\n     </message>\n@@ -2750,12 +2781,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Warning: This version is obsolete, upgrade required!</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>You need to rebuild the databases using -reindex to change -txindex</source>\n-        <translation>You need to rebuild the databases using -reindex to change -txindex</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>wallet.dat corrupt, salvage failed</source>\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n@@ -2765,22 +2791,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-67\"/>\n+        <location line=\"-68\"/>\n         <source>Allow JSON-RPC connections from specified IP address</source>\n         <translation>Allow JSON-RPC connections from specified IP address</translation>\n     </message>\n     <message>\n-        <location line=\"+76\"/>\n+        <location line=\"+77\"/>\n         <source>Send commands to node running on &lt;ip&gt; (default: 127.0.0.1)</source>\n         <translation>Send commands to node running on &lt;ip&gt; (default: 127.0.0.1)</translation>\n     </message>\n     <message>\n-        <location line=\"-120\"/>\n+        <location line=\"-121\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+147\"/>\n+        <location line=\"+148\"/>\n         <source>Upgrade wallet to latest format</source>\n         <translation>Upgrade wallet to latest format</translation>\n     </message>\n@@ -2810,12 +2836,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Server private key (default: server.pem)</translation>\n     </message>\n     <message>\n-        <location line=\"-151\"/>\n+        <location line=\"-156\"/>\n         <source>Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)</source>\n         <translation>Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)</translation>\n     </message>\n     <message>\n-        <location line=\"+165\"/>\n+        <location line=\"+170\"/>\n         <source>This help message</source>\n         <translation>This help message</translation>\n     </message>\n@@ -2825,7 +2851,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unable to bind to %s on this computer (bind returned error %d, %s)</translation>\n     </message>\n     <message>\n-        <location line=\"-91\"/>\n+        <location line=\"-92\"/>\n         <source>Connect through socks proxy</source>\n         <translation>Connect through socks proxy</translation>\n     </message>\n@@ -2835,12 +2861,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+55\"/>\n+        <location line=\"+56\"/>\n         <source>Loading addresses...</source>\n         <translation>Loading addresses...</translation>\n     </message>\n     <message>\n-        <location line=\"-35\"/>\n+        <location line=\"-36\"/>\n         <source>Error loading wallet.dat: Wallet corrupted</source>\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n@@ -2850,17 +2876,17 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Error loading wallet.dat: Wallet requires newer version of Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"+93\"/>\n+        <location line=\"+94\"/>\n         <source>Wallet needed to be rewritten: restart Bitcoin to complete</source>\n         <translation>Wallet needed to be rewritten: restart Bitcoin to complete</translation>\n     </message>\n     <message>\n-        <location line=\"-95\"/>\n+        <location line=\"-96\"/>\n         <source>Error loading wallet.dat</source>\n         <translation>Error loading wallet.dat</translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+29\"/>\n         <source>Invalid -proxy address: &apos;%s&apos;</source>\n         <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n     </message>\n@@ -2875,7 +2901,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unknown -socks proxy version requested: %i</translation>\n     </message>\n     <message>\n-        <location line=\"-96\"/>\n+        <location line=\"-97\"/>\n         <source>Cannot resolve -bind address: &apos;%s&apos;</source>\n         <translation>Cannot resolve -bind address: &apos;%s&apos;</translation>\n     </message>\n@@ -2885,7 +2911,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot resolve -externalip address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+44\"/>\n+        <location line=\"+45\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</translation>\n     </message>\n@@ -2905,7 +2931,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-57\"/>\n+        <location line=\"-58\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n@@ -2920,12 +2946,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Fee per KB to add to transactions you send</translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+20\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-52\"/>\n+        <location line=\"-53\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -2935,22 +2961,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+64\"/>\n+        <location line=\"+65\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-57\"/>\n+        <location line=\"-58\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>\n     <message>\n-        <location line=\"+82\"/>\n+        <location line=\"+83\"/>\n         <source>To use the %s option</source>\n         <translation>To use the %s option</translation>\n     </message>\n     <message>\n-        <location line=\"-74\"/>\n+        <location line=\"-75\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTk1NmY4YjIyZmU1MDZjZGFhMGUwM2U1YThkZTRkNWQzOWUyMTU3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2013-06-25T13:57:59Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:33Z"
      },
      "message": "Truncate oversize 'tx' messages before relaying/storing.\n\nFixes a memory exhaustion attack on low-memory peers.",
      "tree": {
        "sha": "e2e890bffb5d660c021109dbca36ff373d6c06bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2e890bffb5d660c021109dbca36ff373d6c06bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca1ebfd65e0a0787883c424fab73c740c2fefdba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca1ebfd65e0a0787883c424fab73c740c2fefdba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca1ebfd65e0a0787883c424fab73c740c2fefdba"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d35891440695fa618958bd84b26fb1ec6250e2b6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
        "patch": "@@ -3598,6 +3598,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n+        // Truncate messages to the size of the tx in them\n+        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+        unsigned int oldSize = vMsg.size();\n+        if (nSize < oldSize) {\n+            vMsg.resize(nSize);\n+            printf(\"truncating oversized TX %s (%u -> %u)\\n\",\n+                   tx.GetHash().ToString().c_str(),\n+                   oldSize, nSize);\n+        }\n+\n         bool fMissingInputs = false;\n         CValidationState state;\n         if (mempool.accept(state, tx, true, &fMissingInputs))"
      }
    ]
  },
  {
    "sha": "5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjRlNTQ3NGRmYWYxYWRhMTk5OGZjOGE0Y2MzYjI3ZjQ4YTdmN2Qy",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2013-06-25T15:54:17Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:34Z"
      },
      "message": "Log aborted block database rebuilds",
      "tree": {
        "sha": "ea500c5796f3ce65b766213031c4ec03a3b19c49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea500c5796f3ce65b766213031c4ec03a3b19c49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a956f8b22fe506cdaa0e03e5a8de4d5d39e2157"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1b8ca640404a1788619f9d007a67860ae7842119",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
        "patch": "@@ -785,6 +785,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     fReindex = true;\n                     fRequestShutdown = false;\n                 } else {\n+                    printf(\"Aborted block database rebuild. Exiting.\\n\");\n                     return false;\n                 }\n             } else {"
      }
    ]
  },
  {
    "sha": "711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTFiM2IxZmJjYWE0ZTJhNmNkMzIwOTFlZTJkZjAzZjcxYmUzNWRl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T16:10:15Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:35Z"
      },
      "message": "Added comments to sync.h to make it easier to understand the macros",
      "tree": {
        "sha": "8fb19947859e506602c64aee50cb0260b5e605c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fb19947859e506602c64aee50cb0260b5e605c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f4e5474dfaf1ada1998fc8a4cc3b27f48a7f7d2"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 42,
      "deletions": 0
    },
    "files": [
      {
        "sha": "64de7cc57ce95ff77fcf70c8b6dddfd06e1b98b1",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
        "patch": "@@ -11,6 +11,48 @@\n #include <boost/thread/condition_variable.hpp>\n #include \"threadsafety.h\"\n \n+\n+////////////////////////////////////////////////\n+//                                            //\n+// THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n+//                                            //\n+////////////////////////////////////////////////\n+\n+/*\n+ \n+ \n+ \n+CCriticalSection mutex;\n+    boost::recursive_mutex mutex;\n+\n+LOCK(mutex);\n+    boost::unique_lock<boost::recursive_mutex> criticalblock(mutex);\n+\n+LOCK2(mutex1, mutex2);\n+    boost::unique_lock<boost::recursive_mutex> criticalblock1(mutex1);\n+    boost::unique_lock<boost::recursive_mutex> criticalblock2(mutex2);\n+\n+TRY_LOCK(mutex, name);\n+    boost::unique_lock<boost::recursive_mutex> name(mutex, boost::try_to_lock_t);\n+\n+ENTER_CRITICAL_SECTION(mutex); // no RAII\n+    mutex.lock();\n+\n+LEAVE_CRITICAL_SECTION(mutex); // no RAII\n+    mutex.unlock();\n+ \n+ \n+ \n+ */\n+\n+\n+\n+///////////////////////////////\n+//                           //\n+// THE ACTUAL IMPLEMENTATION //\n+//                           //\n+///////////////////////////////\n+\n // Template mixin that adds -Wthread-safety locking annotations to a\n // subset of the mutex API.\n template <typename PARENT>"
      }
    ]
  },
  {
    "sha": "bc2688c87ace50de93780b15bc6d769a77d612f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzI2ODhjODdhY2U1MGRlOTM3ODBiMTViYzZkNzY5YTc3ZDYxMmYz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-06-27T00:31:34Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:36Z"
      },
      "message": "Fix Gnome bitcoin: URI handler",
      "tree": {
        "sha": "0f40b3ff5a1016cc0023aa3b3328e3316fcaf060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f40b3ff5a1016cc0023aa3b3328e3316fcaf060"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc2688c87ace50de93780b15bc6d769a77d612f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc2688c87ace50de93780b15bc6d769a77d612f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc2688c87ace50de93780b15bc6d769a77d612f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc2688c87ace50de93780b15bc6d769a77d612f3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/711b3b1fbcaa4e2a6cd32091ee2df03f71be35de"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2a2cef622ed7cd73da65cd139b7b53a7c067323",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc2688c87ace50de93780b15bc6d769a77d612f3/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc2688c87ace50de93780b15bc6d769a77d612f3/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=bc2688c87ace50de93780b15bc6d769a77d612f3",
        "patch": "@@ -4,7 +4,7 @@ Name=Bitcoin\n Comment=Bitcoin P2P Cryptocurrency\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n-Exec=/usr/bin/bitcoin-qt\n+Exec=/usr/bin/bitcoin-qt %u\n Terminal=false\n Type=Application\n Icon=/usr/share/pixmaps/bitcoin128.png"
      }
    ]
  },
  {
    "sha": "8a1565e46931dde0a703f89fb634963a296d9e67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTE1NjVlNDY5MzFkZGUwYTcwM2Y4OWZiNjM0OTYzYTI5NmQ5ZTY3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-06-27T15:11:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:37Z"
      },
      "message": "README for contrib/debian",
      "tree": {
        "sha": "8745c6455bb5326de138313150f30699282338d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8745c6455bb5326de138313150f30699282338d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a1565e46931dde0a703f89fb634963a296d9e67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1565e46931dde0a703f89fb634963a296d9e67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a1565e46931dde0a703f89fb634963a296d9e67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1565e46931dde0a703f89fb634963a296d9e67/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc2688c87ace50de93780b15bc6d769a77d612f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc2688c87ace50de93780b15bc6d769a77d612f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc2688c87ace50de93780b15bc6d769a77d612f3"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1cb9b75fbdeb01760815c5154c160cc2fd4c1179",
        "filename": "contrib/debian/README",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1565e46931dde0a703f89fb634963a296d9e67/contrib/debian/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1565e46931dde0a703f89fb634963a296d9e67/contrib/debian/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/README?ref=8a1565e46931dde0a703f89fb634963a296d9e67",
        "patch": "@@ -0,0 +1,20 @@\n+This directory contains files used to package bitcoind/bitcoin-qt\n+for Debian-based Linux systems.\n+\n+If you compile bitcoind/bitcoin-qt yourself, there are some\n+useful files here:\n+\n+bitcoin: URI support\n+--------------------\n+\n+bitcoin-qt.desktop  (Gnome / Open Desktop)\n+To install:\n+  sudo desktop-file-install bitcoin-qt.desktop\n+  sudo update-desktop-database\n+\n+If you build yourself, you will either need to modify the paths in\n+the .desktop file or copy or symlink your bitcoin-qt binary to /usr/bin\n+and the ../../share/pixmaps/bitcoin128.png to /usr/share/pixmaps\n+\n+bitcoin-qt.protocol (KDE)\n+"
      }
    ]
  },
  {
    "sha": "a221402cfc6dc06527c4cc0af0541250888395c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjIxNDAyY2ZjNmRjMDY1MjdjNGNjMGFmMDU0MTI1MDg4ODM5NWMw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-29T12:16:50Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:38Z"
      },
      "message": "Fix build date for from-tarball builds",
      "tree": {
        "sha": "b9cea31be34f37babaf54052bd771be79174b0df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9cea31be34f37babaf54052bd771be79174b0df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a221402cfc6dc06527c4cc0af0541250888395c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a221402cfc6dc06527c4cc0af0541250888395c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a221402cfc6dc06527c4cc0af0541250888395c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a221402cfc6dc06527c4cc0af0541250888395c0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a1565e46931dde0a703f89fb634963a296d9e67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1565e46931dde0a703f89fb634963a296d9e67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a1565e46931dde0a703f89fb634963a296d9e67"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d9d6724a02962a37772c7cfdaf99687ae51f1dfd",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a221402cfc6dc06527c4cc0af0541250888395c0/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a221402cfc6dc06527c4cc0af0541250888395c0/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=a221402cfc6dc06527c4cc0af0541250888395c0",
        "patch": "@@ -36,7 +36,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n // git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n #    define GIT_COMMIT_ID \"$Format:%h$\"\n-#    define GIT_COMMIT_DATE \"$Format:%cD\"\n+#    define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n \n #define BUILD_DESC_FROM_COMMIT(maj,min,rev,build,commit) \\"
      }
    ]
  },
  {
    "sha": "94419ed057f23438d494d14a419b11f475704edc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDQxOWVkMDU3ZjIzNDM4ZDQ5NGQxNGE0MTliMTFmNDc1NzA0ZWRj",
    "commit": {
      "author": {
        "name": "Vinnie Falco",
        "email": "vinnie.falco@gmail.com",
        "date": "2013-07-01T15:36:32Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:40Z"
      },
      "message": "Squashed 'src/leveldb/' changes from aca1ffc..ae6c262\n\nae6c262 Merge branch 'leveldb' into ripple-fork\n28fa222 Looks like a bit more delay is needed to smooth the latency.\na18f3e6 Tidy up JobQueue, add ripple_core module\nab82e57 Release leveldb 1.12\n02c6259 Release leveldb 1.11\n5bbb544 Rate limit compactions with a 25ms pause after each complete file.\n8c29c47 LevelDB issue 178 fix: cannot resize a level 0 compaction set\n18b245c Added GNU/kFreeBSD kernel name (TARGET_OS)\n8be9d12 CondVar::SignalAll was broken, leading to deadlocks on Windows builds. http://code.google.com/p/leveldb/issues/detail?id=149\nc9fc070 Upgrade LevelDB to 1.10.0, mostly for better write stall logging.\n8215b15 Tweak to variable name to support unity build\n\ngit-subtree-dir: src/leveldb\ngit-subtree-split: ae6c2620b2ef3d5c69e63dc0eda865d6a39fa061",
      "tree": {
        "sha": "2d725958831930512112ef4bbbe742651c8cce49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d725958831930512112ef4bbbe742651c8cce49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94419ed057f23438d494d14a419b11f475704edc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94419ed057f23438d494d14a419b11f475704edc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94419ed057f23438d494d14a419b11f475704edc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94419ed057f23438d494d14a419b11f475704edc/comments",
    "author": {
      "login": "vinniefalco",
      "id": 1503976,
      "node_id": "MDQ6VXNlcjE1MDM5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1503976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vinniefalco",
      "html_url": "https://github.com/vinniefalco",
      "followers_url": "https://api.github.com/users/vinniefalco/followers",
      "following_url": "https://api.github.com/users/vinniefalco/following{/other_user}",
      "gists_url": "https://api.github.com/users/vinniefalco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vinniefalco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vinniefalco/subscriptions",
      "organizations_url": "https://api.github.com/users/vinniefalco/orgs",
      "repos_url": "https://api.github.com/users/vinniefalco/repos",
      "events_url": "https://api.github.com/users/vinniefalco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vinniefalco/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a221402cfc6dc06527c4cc0af0541250888395c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a221402cfc6dc06527c4cc0af0541250888395c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a221402cfc6dc06527c4cc0af0541250888395c0"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 190,
      "deletions": 59
    },
    "files": [
      {
        "sha": "fc40194ab94f41405bd48d085b9f3fcbe1704234",
        "filename": "src/leveldb/AUTHORS",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/AUTHORS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/AUTHORS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/AUTHORS?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -6,3 +6,6 @@ Google Inc.\n # Initial version authors:\n Jeffrey Dean <jeff@google.com>\n Sanjay Ghemawat <sanjay@google.com>\n+\n+# Partial list of contributors:\n+Kevin Regan <kevin.d.regan@gmail.com>"
      },
      {
        "sha": "38b9bf7729bfc71205406567cc4790d8b1c6a49b",
        "filename": "src/leveldb/Makefile",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/Makefile?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -42,6 +42,7 @@ TESTS = \\\n \tenv_test \\\n \tfilename_test \\\n \tfilter_block_test \\\n+\tissue178_test \\\n \tlog_test \\\n \tmemenv_test \\\n \tskiplist_test \\\n@@ -69,7 +70,7 @@ SHARED = $(SHARED1)\n else\n # Update db.h if you change these.\n SHARED_MAJOR = 1\n-SHARED_MINOR = 9\n+SHARED_MINOR = 12\n SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)\n SHARED2 = $(SHARED1).$(SHARED_MAJOR)\n SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)\n@@ -146,6 +147,9 @@ filename_test: db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)\n filter_block_test: table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n \n+issue178_test: issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS)\n+\t$(CXX) $(LDFLAGS) issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n+\n log_test: db/log_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) db/log_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n "
      },
      {
        "sha": "af02467b3331091c85e689b44ff7f68ba669a180",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 31,
        "deletions": 10,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -35,6 +35,8 @@\n \n namespace leveldb {\n \n+const int kNumNonTableCacheFiles = 10;\n+\n // Information kept for every waiting writer\n struct DBImpl::Writer {\n   Status status;\n@@ -92,9 +94,9 @@ Options SanitizeOptions(const std::string& dbname,\n   Options result = src;\n   result.comparator = icmp;\n   result.filter_policy = (src.filter_policy != NULL) ? ipolicy : NULL;\n-  ClipToRange(&result.max_open_files,            20,     50000);\n-  ClipToRange(&result.write_buffer_size,         64<<10, 1<<30);\n-  ClipToRange(&result.block_size,                1<<10,  4<<20);\n+  ClipToRange(&result.max_open_files,    64 + kNumNonTableCacheFiles, 50000);\n+  ClipToRange(&result.write_buffer_size, 64<<10,                      1<<30);\n+  ClipToRange(&result.block_size,        1<<10,                       4<<20);\n   if (result.info_log == NULL) {\n     // Open a log file in the same directory as the db\n     src.env->CreateDir(dbname);  // In case it does not exist\n@@ -130,12 +132,13 @@ DBImpl::DBImpl(const Options& options, const std::string& dbname)\n       log_(NULL),\n       tmp_batch_(new WriteBatch),\n       bg_compaction_scheduled_(false),\n-      manual_compaction_(NULL) {\n+      manual_compaction_(NULL),\n+      consecutive_compaction_errors_(0) {\n   mem_->Ref();\n   has_imm_.Release_Store(NULL);\n \n   // Reserve ten files or so for other uses and give the rest to TableCache.\n-  const int table_cache_size = options.max_open_files - 10;\n+  const int table_cache_size = options.max_open_files - kNumNonTableCacheFiles;\n   table_cache_ = new TableCache(dbname_, &options_, table_cache_size);\n \n   versions_ = new VersionSet(dbname_, &options_, table_cache_,\n@@ -310,16 +313,24 @@ Status DBImpl::Recover(VersionEdit* edit) {\n     if (!s.ok()) {\n       return s;\n     }\n+    std::set<uint64_t> expected;\n+    versions_->AddLiveFiles(&expected);\n     uint64_t number;\n     FileType type;\n     std::vector<uint64_t> logs;\n     for (size_t i = 0; i < filenames.size(); i++) {\n-      if (ParseFileName(filenames[i], &number, &type)\n-          && type == kLogFile\n-          && ((number >= min_log) || (number == prev_log))) {\n+      if (ParseFileName(filenames[i], &number, &type)) {\n+        expected.erase(number);\n+        if (type == kLogFile && ((number >= min_log) || (number == prev_log)))\n         logs.push_back(number);\n       }\n     }\n+    if (!expected.empty()) {\n+      char buf[50];\n+      snprintf(buf, sizeof(buf), \"%d missing files; e.g.\",\n+               static_cast<int>(expected.size()));\n+      return Status::Corruption(buf, TableFileName(dbname_, *(expected.begin())));\n+    }\n \n     // Recover in the order in which the logs were generated\n     std::sort(logs.begin(), logs.end());\n@@ -611,6 +622,7 @@ void DBImpl::BackgroundCall() {\n     Status s = BackgroundCompaction();\n     if (s.ok()) {\n       // Success\n+      consecutive_compaction_errors_ = 0;\n     } else if (shutting_down_.Acquire_Load()) {\n       // Error most likely due to shutdown; do not wait\n     } else {\n@@ -622,7 +634,12 @@ void DBImpl::BackgroundCall() {\n       Log(options_.info_log, \"Waiting after background compaction error: %s\",\n           s.ToString().c_str());\n       mutex_.Unlock();\n-      env_->SleepForMicroseconds(1000000);\n+      ++consecutive_compaction_errors_;\n+      int seconds_to_sleep = 1;\n+      for (int i = 0; i < 3 && i < consecutive_compaction_errors_ - 1; ++i) {\n+        seconds_to_sleep *= 2;\n+      }\n+      env_->SleepForMicroseconds(seconds_to_sleep * 1000000);\n       mutex_.Lock();\n     }\n   }\n@@ -805,6 +822,9 @@ Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,\n           (unsigned long long) output_number,\n           (unsigned long long) current_entries,\n           (unsigned long long) current_bytes);\n+\n+      // rate-limit compaction file creation with a 100ms pause\n+      env_->SleepForMicroseconds(100000);\n     }\n   }\n   return s;\n@@ -1268,10 +1288,11 @@ Status DBImpl::MakeRoomForWrite(bool force) {\n     } else if (imm_ != NULL) {\n       // We have filled up the current memtable, but the previous\n       // one is still being compacted, so we wait.\n+      Log(options_.info_log, \"Current memtable full; waiting...\\n\");\n       bg_cv_.Wait();\n     } else if (versions_->NumLevelFiles(0) >= config::kL0_StopWritesTrigger) {\n       // There are too many level-0 files.\n-      Log(options_.info_log, \"waiting...\\n\");\n+      Log(options_.info_log, \"Too many L0 files; waiting...\\n\");\n       bg_cv_.Wait();\n     } else {\n       // Attempt to switch to a new memtable and trigger compaction of old"
      },
      {
        "sha": "3c8d711ae06de2b41dc6d9a3717808947663c09b",
        "filename": "src/leveldb/db/db_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/db_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/db_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.h?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -163,6 +163,7 @@ class DBImpl : public DB {\n \n   // Have we encountered a background error in paranoid mode?\n   Status bg_error_;\n+  int consecutive_compaction_errors_;\n \n   // Per level compaction stats.  stats_[level] stores the stats for\n   // compactions that produced data for the specified \"level\"."
      },
      {
        "sha": "49aae04dbd3bac4b8d057fd490751f71a2d5b294",
        "filename": "src/leveldb/db/db_test.cc",
        "status": "modified",
        "additions": 75,
        "deletions": 10,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/db_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/db_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_test.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -33,8 +33,11 @@ class AtomicCounter {\n  public:\n   AtomicCounter() : count_(0) { }\n   void Increment() {\n+    IncrementBy(1);\n+  }\n+  void IncrementBy(int count) {\n     MutexLock l(&mu_);\n-    count_++;\n+    count_ += count;\n   }\n   int Read() {\n     MutexLock l(&mu_);\n@@ -45,6 +48,10 @@ class AtomicCounter {\n     count_ = 0;\n   }\n };\n+\n+void DelayMilliseconds(int millis) {\n+  Env::Default()->SleepForMicroseconds(millis * 1000);\n+}\n }\n \n // Special Env used to delay background operations\n@@ -69,6 +76,7 @@ class SpecialEnv : public EnvWrapper {\n   AtomicCounter random_read_counter_;\n \n   AtomicCounter sleep_counter_;\n+  AtomicCounter sleep_time_counter_;\n \n   explicit SpecialEnv(Env* base) : EnvWrapper(base) {\n     delay_sstable_sync_.Release_Store(NULL);\n@@ -103,7 +111,7 @@ class SpecialEnv : public EnvWrapper {\n       Status Flush() { return base_->Flush(); }\n       Status Sync() {\n         while (env_->delay_sstable_sync_.Acquire_Load() != NULL) {\n-          env_->SleepForMicroseconds(100000);\n+          DelayMilliseconds(100);\n         }\n         return base_->Sync();\n       }\n@@ -174,8 +182,9 @@ class SpecialEnv : public EnvWrapper {\n \n   virtual void SleepForMicroseconds(int micros) {\n     sleep_counter_.Increment();\n-    target()->SleepForMicroseconds(micros);\n+    sleep_time_counter_.IncrementBy(micros);\n   }\n+\n };\n \n class DBTest {\n@@ -461,6 +470,20 @@ class DBTest {\n     }\n     return result;\n   }\n+\n+  bool DeleteAnSSTFile() {\n+    std::vector<std::string> filenames;\n+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));\n+    uint64_t number;\n+    FileType type;\n+    for (size_t i = 0; i < filenames.size(); i++) {\n+      if (ParseFileName(filenames[i], &number, &type) && type == kTableFile) {\n+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n };\n \n TEST(DBTest, Empty) {\n@@ -611,7 +634,7 @@ TEST(DBTest, GetEncountersEmptyLevel) {\n     }\n \n     // Step 4: Wait for compaction to finish\n-    env_->SleepForMicroseconds(1000000);\n+    DelayMilliseconds(1000);\n \n     ASSERT_EQ(NumTableFilesAtLevel(0), 0);\n   } while (ChangeOptions());\n@@ -1295,7 +1318,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_a) {\n   Reopen();\n   Reopen();\n   ASSERT_EQ(\"(a->v)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(a->v)\", Contents());\n }\n \n@@ -1311,7 +1334,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Put(\"\",\"\");\n   Reopen();\n   Put(\"\",\"\");\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   Reopen();\n   Put(\"d\",\"dv\");\n   Reopen();\n@@ -1321,7 +1344,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Delete(\"b\");\n   Reopen();\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n }\n \n@@ -1506,6 +1529,30 @@ TEST(DBTest, NoSpace) {\n   ASSERT_GE(env_->sleep_counter_.Read(), 5);\n }\n \n+TEST(DBTest, ExponentialBackoff) {\n+  Options options = CurrentOptions();\n+  options.env = env_;\n+  Reopen(&options);\n+\n+  ASSERT_OK(Put(\"foo\", \"v1\"));\n+  ASSERT_EQ(\"v1\", Get(\"foo\"));\n+  Compact(\"a\", \"z\");\n+  env_->non_writable_.Release_Store(env_);  // Force errors for new files\n+  env_->sleep_counter_.Reset();\n+  env_->sleep_time_counter_.Reset();\n+  for (int i = 0; i < 5; i++) {\n+    dbfull()->TEST_CompactRange(2, NULL, NULL);\n+  }\n+  env_->non_writable_.Release_Store(NULL);\n+\n+  // Wait for compaction to finish\n+  DelayMilliseconds(1000);\n+\n+  ASSERT_GE(env_->sleep_counter_.Read(), 5);\n+  ASSERT_LT(env_->sleep_counter_.Read(), 10);\n+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);\n+}\n+\n TEST(DBTest, NonWritableFileSystem) {\n   Options options = CurrentOptions();\n   options.write_buffer_size = 1000;\n@@ -1519,7 +1566,7 @@ TEST(DBTest, NonWritableFileSystem) {\n     fprintf(stderr, \"iter %d; errors %d\\n\", i, errors);\n     if (!Put(\"foo\", big).ok()) {\n       errors++;\n-      env_->SleepForMicroseconds(100000);\n+      DelayMilliseconds(100);\n     }\n   }\n   ASSERT_GT(errors, 0);\n@@ -1567,6 +1614,24 @@ TEST(DBTest, ManifestWriteError) {\n   }\n }\n \n+TEST(DBTest, MissingSSTFile) {\n+  ASSERT_OK(Put(\"foo\", \"bar\"));\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  // Dump the memtable to disk.\n+  dbfull()->TEST_CompactMemTable();\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  Close();\n+  ASSERT_TRUE(DeleteAnSSTFile());\n+  Options options = CurrentOptions();\n+  options.paranoid_checks = true;\n+  Status s = TryReopen(&options);\n+  ASSERT_TRUE(!s.ok());\n+  ASSERT_TRUE(s.ToString().find(\"issing\") != std::string::npos)\n+      << s.ToString();\n+}\n+\n TEST(DBTest, FilesDeletedAfterCompaction) {\n   ASSERT_OK(Put(\"foo\", \"v2\"));\n   Compact(\"a\", \"z\");\n@@ -1711,13 +1776,13 @@ TEST(DBTest, MultiThreaded) {\n     }\n \n     // Let them run for a while\n-    env_->SleepForMicroseconds(kTestSeconds * 1000000);\n+    DelayMilliseconds(kTestSeconds * 1000);\n \n     // Stop the threads and wait for them to finish\n     mt.stop.Release_Store(&mt);\n     for (int id = 0; id < kNumThreads; id++) {\n       while (mt.thread_done[id].Acquire_Load() == NULL) {\n-        env_->SleepForMicroseconds(100000);\n+        DelayMilliseconds(100);\n       }\n     }\n   } while (ChangeOptions());"
      },
      {
        "sha": "20a7ca44626050c01b7bde718581c663d38f42a9",
        "filename": "src/leveldb/db/dbformat.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/dbformat.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/dbformat.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/dbformat.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -26,7 +26,7 @@ std::string ParsedInternalKey::DebugString() const {\n            (unsigned long long) sequence,\n            int(type));\n   std::string result = \"'\";\n-  result += user_key.ToString();\n+  result += EscapeString(user_key.ToString());\n   result += buf;\n   return result;\n }"
      },
      {
        "sha": "5a26da4728f6a0934f12d37d84e845ef6a00e8af",
        "filename": "src/leveldb/db/filename_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/filename_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/filename_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/filename_test.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -70,7 +70,7 @@ TEST(FileNameTest, Parse) {\n   for (int i = 0; i < sizeof(errors) / sizeof(errors[0]); i++) {\n     std::string f = errors[i];\n     ASSERT_TRUE(!ParseFileName(f, &number, &type)) << f;\n-  };\n+  }\n }\n \n TEST(FileNameTest, Construction) {"
      },
      {
        "sha": "4fd1ddef21011ffb379019b65ce64464ad8ca54c",
        "filename": "src/leveldb/db/version_set.cc",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/version_set.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/db/version_set.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -1331,14 +1331,19 @@ Compaction* VersionSet::CompactRange(\n   }\n \n   // Avoid compacting too much in one shot in case the range is large.\n-  const uint64_t limit = MaxFileSizeForLevel(level);\n-  uint64_t total = 0;\n-  for (size_t i = 0; i < inputs.size(); i++) {\n-    uint64_t s = inputs[i]->file_size;\n-    total += s;\n-    if (total >= limit) {\n-      inputs.resize(i + 1);\n-      break;\n+  // But we cannot do this for level-0 since level-0 files can overlap\n+  // and we must not pick one file and drop another older file if the\n+  // two files overlap.\n+  if (level > 0) {\n+    const uint64_t limit = MaxFileSizeForLevel(level);\n+    uint64_t total = 0;\n+    for (size_t i = 0; i < inputs.size(); i++) {\n+      uint64_t s = inputs[i]->file_size;\n+      total += s;\n+      if (total >= limit) {\n+        inputs.resize(i + 1);\n+        break;\n+      }\n     }\n   }\n "
      },
      {
        "sha": "da8b11a8c05b054ef231ba34d88ef51ec1e55eb0",
        "filename": "src/leveldb/include/leveldb/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/include/leveldb/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/include/leveldb/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/db.h?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -14,7 +14,7 @@ namespace leveldb {\n \n // Update Makefile if you change these\n static const int kMajorVersion = 1;\n-static const int kMinorVersion = 9;\n+static const int kMinorVersion = 12;\n \n struct Options;\n struct ReadOptions;"
      },
      {
        "sha": "1b0f060a19caabfbb5dffe8ef87f1d90536d44f2",
        "filename": "src/leveldb/port/port_win.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/port/port_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/port/port_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_win.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -109,12 +109,10 @@ void CondVar::Signal() {\n \n void CondVar::SignalAll() {\n   wait_mtx_.Lock();\n-  for(long i = 0; i < waiting_; ++i) {\n-    ::ReleaseSemaphore(sem1_, 1, NULL);\n-    while(waiting_ > 0) {\n-      --waiting_;\n-      ::WaitForSingleObject(sem2_, INFINITE);\n-    }\n+  ::ReleaseSemaphore(sem1_, waiting_, NULL);\n+  while(waiting_ > 0) {\n+    --waiting_;\n+    ::WaitForSingleObject(sem2_, INFINITE);\n   }\n   wait_mtx_.Unlock();\n }"
      },
      {
        "sha": "79ea9d9ee5fe8af28eb07f48b9534c2979fe842a",
        "filename": "src/leveldb/table/block.cc",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/table/block.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/table/block.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/block.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -16,7 +16,7 @@\n namespace leveldb {\n \n inline uint32_t Block::NumRestarts() const {\n-  assert(size_ >= 2*sizeof(uint32_t));\n+  assert(size_ >= sizeof(uint32_t));\n   return DecodeFixed32(data_ + size_ - sizeof(uint32_t));\n }\n \n@@ -27,11 +27,12 @@ Block::Block(const BlockContents& contents)\n   if (size_ < sizeof(uint32_t)) {\n     size_ = 0;  // Error marker\n   } else {\n-    restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n-    if (restart_offset_ > size_ - sizeof(uint32_t)) {\n-      // The size is too small for NumRestarts() and therefore\n-      // restart_offset_ wrapped around.\n+    size_t max_restarts_allowed = (size_-sizeof(uint32_t)) / sizeof(uint32_t);\n+    if (NumRestarts() > max_restarts_allowed) {\n+      // The size is too small for NumRestarts()\n       size_ = 0;\n+    } else {\n+      restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n     }\n   }\n }\n@@ -253,7 +254,7 @@ class Block::Iter : public Iterator {\n };\n \n Iterator* Block::NewIterator(const Comparator* cmp) {\n-  if (size_ < 2*sizeof(uint32_t)) {\n+  if (size_ < sizeof(uint32_t)) {\n     return NewErrorIterator(Status::Corruption(\"bad block contents\"));\n   }\n   const uint32_t num_restarts = NumRestarts();"
      },
      {
        "sha": "71c1756e5f440c38c3e712e0359886fe22d6d5a0",
        "filename": "src/leveldb/table/table.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/table/table.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/table/table.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -228,7 +228,6 @@ Status Table::InternalGet(const ReadOptions& options, const Slice& k,\n         !filter->KeyMayMatch(handle.offset(), k)) {\n       // Not found\n     } else {\n-      Slice handle = iiter->value();\n       Iterator* block_iter = BlockReader(this, options, iiter->value());\n       block_iter->Seek(k);\n       if (block_iter->Valid()) {"
      },
      {
        "sha": "c723bf84cf5f55fae9b56ab324ebfdc83ba9be52",
        "filename": "src/leveldb/table/table_test.cc",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/table/table_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/table/table_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table_test.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -644,6 +644,36 @@ class Harness {\n   Constructor* constructor_;\n };\n \n+// Test empty table/block.\n+TEST(Harness, Empty) {\n+  for (int i = 0; i < kNumTestArgs; i++) {\n+    Init(kTestArgList[i]);\n+    Random rnd(test::RandomSeed() + 1);\n+    Test(&rnd);\n+  }\n+}\n+\n+// Special test for a block with no restart entries.  The C++ leveldb\n+// code never generates such blocks, but the Java version of leveldb\n+// seems to.\n+TEST(Harness, ZeroRestartPointsInBlock) {\n+  char data[sizeof(uint32_t)];\n+  memset(data, 0, sizeof(data));\n+  BlockContents contents;\n+  contents.data = Slice(data, sizeof(data));\n+  contents.cachable = false;\n+  contents.heap_allocated = false;\n+  Block block(contents);\n+  Iterator* iter = block.NewIterator(BytewiseComparator());\n+  iter->SeekToFirst();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->SeekToLast();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->Seek(\"foo\");\n+  ASSERT_TRUE(!iter->Valid());\n+  delete iter;\n+}\n+\n // Test the empty key\n TEST(Harness, SimpleEmptyKey) {\n   for (int i = 0; i < kNumTestArgs; i++) {"
      },
      {
        "sha": "8b197bc02a98e639dc72a58bd7de59603ab77cbc",
        "filename": "src/leveldb/util/cache.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/cache.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/cache.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/cache.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -116,7 +116,6 @@ class HandleTable {\n       LRUHandle* h = list_[i];\n       while (h != NULL) {\n         LRUHandle* next = h->next_hash;\n-        Slice key = h->key();\n         uint32_t hash = h->hash;\n         LRUHandle** ptr = &new_list[hash & (new_length - 1)];\n         h->next_hash = *ptr;\n@@ -160,7 +159,6 @@ class LRUCache {\n   // mutex_ protects the following state.\n   port::Mutex mutex_;\n   size_t usage_;\n-  uint64_t last_id_;\n \n   // Dummy head of LRU list.\n   // lru.prev is newest entry, lru.next is oldest entry.\n@@ -170,8 +168,7 @@ class LRUCache {\n };\n \n LRUCache::LRUCache()\n-    : usage_(0),\n-      last_id_(0) {\n+    : usage_(0) {\n   // Make empty circular linked list\n   lru_.next = &lru_;\n   lru_.prev = &lru_;"
      },
      {
        "sha": "fb5726e33521d01270b481b93d9c5490c6f0b53f",
        "filename": "src/leveldb/util/coding_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/coding_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/coding_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/coding_test.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -109,7 +109,7 @@ TEST(Coding, Varint64) {\n     values.push_back(power);\n     values.push_back(power-1);\n     values.push_back(power+1);\n-  };\n+  }\n \n   std::string s;\n   for (int i = 0; i < values.size(); i++) {"
      },
      {
        "sha": "6cc319242e3b7d77ca62a3619d92112e680d6bf1",
        "filename": "src/leveldb/util/comparator.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/comparator.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/comparator.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/comparator.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -66,15 +66,15 @@ class BytewiseComparatorImpl : public Comparator {\n };\n }  // namespace\n \n-static port::OnceType once = LEVELDB_ONCE_INIT;\n+static port::OnceType once_comparator = LEVELDB_ONCE_INIT;\n static const Comparator* bytewise;\n \n static void InitModule() {\n   bytewise = new BytewiseComparatorImpl;\n }\n \n const Comparator* BytewiseComparator() {\n-  port::InitOnce(&once, InitModule);\n+  port::InitOnce(&once_comparator, InitModule);\n   return bytewise;\n }\n "
      },
      {
        "sha": "6badfdc230f52f235ec7f7523e213dba9d628451",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -386,7 +386,7 @@ class PosixEnv : public Env {\n   PosixEnv();\n   virtual ~PosixEnv() {\n     fprintf(stderr, \"Destroying Env::Default()\\n\");\n-    exit(1);\n+    abort();\n   }\n \n   virtual Status NewSequentialFile(const std::string& fname,\n@@ -467,23 +467,23 @@ class PosixEnv : public Env {\n       result = IOError(fname, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status CreateDir(const std::string& name) {\n     Status result;\n     if (mkdir(name.c_str(), 0755) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status DeleteDir(const std::string& name) {\n     Status result;\n     if (rmdir(name.c_str()) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status GetFileSize(const std::string& fname, uint64_t* size) {\n     Status s;\n@@ -589,7 +589,7 @@ class PosixEnv : public Env {\n   void PthreadCall(const char* label, int result) {\n     if (result != 0) {\n       fprintf(stderr, \"pthread %s: %s\\n\", label, strerror(result));\n-      exit(1);\n+      abort();\n     }\n   }\n "
      },
      {
        "sha": "07cf022060d41ea2139a438886d268a92cb586af",
        "filename": "src/leveldb/util/hash.cc",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/hash.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94419ed057f23438d494d14a419b11f475704edc/src/leveldb/util/hash.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/hash.cc?ref=94419ed057f23438d494d14a419b11f475704edc",
        "patch": "@@ -6,6 +6,13 @@\n #include \"util/coding.h\"\n #include \"util/hash.h\"\n \n+// The FALLTHROUGH_INTENDED macro can be used to annotate implicit fall-through\n+// between switch labels. The real definition should be provided externally.\n+// This one is a fallback version for unsupported compilers.\n+#ifndef FALLTHROUGH_INTENDED\n+#define FALLTHROUGH_INTENDED do { } while (0)\n+#endif\n+\n namespace leveldb {\n \n uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n@@ -28,10 +35,10 @@ uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n   switch (limit - data) {\n     case 3:\n       h += data[2] << 16;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 2:\n       h += data[1] << 8;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 1:\n       h += data[0];\n       h *= m;"
      }
    ]
  },
  {
    "sha": "786381d3cf0eaa0094a38825c016d82e36d41798",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODYzODFkM2NmMGVhYTAwOTRhMzg4MjVjMDE2ZDgyZTM2ZDQxNzk4",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-07-03T15:02:29Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:41Z"
      },
      "message": "RPC: add getbestblockhash, to return tip of best chain",
      "tree": {
        "sha": "a125b1dad62dc1da08d2234390e8eefc4a551c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a125b1dad62dc1da08d2234390e8eefc4a551c27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/786381d3cf0eaa0094a38825c016d82e36d41798",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786381d3cf0eaa0094a38825c016d82e36d41798",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/786381d3cf0eaa0094a38825c016d82e36d41798",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786381d3cf0eaa0094a38825c016d82e36d41798/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94419ed057f23438d494d14a419b11f475704edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94419ed057f23438d494d14a419b11f475704edc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94419ed057f23438d494d14a419b11f475704edc"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "11fac42213c87d6d085ebc6c724ffef1c4556e38",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/786381d3cf0eaa0094a38825c016d82e36d41798/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/786381d3cf0eaa0094a38825c016d82e36d41798/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=786381d3cf0eaa0094a38825c016d82e36d41798",
        "patch": "@@ -195,6 +195,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"help\",                   &help,                   true,      true },\n     { \"stop\",                   &stop,                   true,      true },\n     { \"getblockcount\",          &getblockcount,          true,      false },\n+    { \"getbestblockhash\",       &getbestblockhash,       true,      false },\n     { \"getconnectioncount\",     &getconnectioncount,     true,      false },\n     { \"getpeerinfo\",            &getpeerinfo,            true,      false },\n     { \"addnode\",                &addnode,                true,      true },"
      },
      {
        "sha": "4d5599be84098b974c95f66f7f1e2686e6fc560b",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/786381d3cf0eaa0094a38825c016d82e36d41798/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/786381d3cf0eaa0094a38825c016d82e36d41798/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=786381d3cf0eaa0094a38825c016d82e36d41798",
        "patch": "@@ -201,6 +201,7 @@ extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, b\n extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getblockcount(const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n+extern json_spirit::Value getbestblockhash(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getdifficulty(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value settxfee(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getrawmempool(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "edaa7322256b9f49304ac313b86ecfefb250ddb5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/786381d3cf0eaa0094a38825c016d82e36d41798/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/786381d3cf0eaa0094a38825c016d82e36d41798/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=786381d3cf0eaa0094a38825c016d82e36d41798",
        "patch": "@@ -82,6 +82,15 @@ Value getblockcount(const Array& params, bool fHelp)\n     return nBestHeight;\n }\n \n+Value getbestblockhash(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getbestblockhash\\n\"\n+            \"Returns the hash of the best (tip) block in the longest block chain.\");\n+\n+    return hashBestChain.GetHex();\n+}\n \n Value getdifficulty(const Array& params, bool fHelp)\n {"
      }
    ]
  },
  {
    "sha": "1a4e4adfb8c12a416f4bb678be82460365eaa517",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTRlNGFkZmI4YzEyYTQxNmY0YmI2NzhiZTgyNDYwMzY1ZWFhNTE3",
    "commit": {
      "author": {
        "name": "Nils Schneider",
        "email": "nils.schneider@gmail.com",
        "date": "2012-06-02T23:19:07Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:42Z"
      },
      "message": "let user select wallet file with -wallet=foo.dat\n\nuse std::string instead of psz for WalletFile\n\nonly allow wallets within $DATADIR\n\nUse strWalletFile in salvage/recover\n\nfix: remove unused variable pszWalletFile\n\nmove strWalletFile to init.h/init.cpp\n\navoid conversion of strWalletfile to c-string",
      "tree": {
        "sha": "dc9f2134d6350db7e1ba1cbdcc2676d6561e9b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc9f2134d6350db7e1ba1cbdcc2676d6561e9b4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a4e4adfb8c12a416f4bb678be82460365eaa517",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a4e4adfb8c12a416f4bb678be82460365eaa517",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a4e4adfb8c12a416f4bb678be82460365eaa517",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a4e4adfb8c12a416f4bb678be82460365eaa517/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "786381d3cf0eaa0094a38825c016d82e36d41798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786381d3cf0eaa0094a38825c016d82e36d41798",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/786381d3cf0eaa0094a38825c016d82e36d41798"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 15,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0e79669afc80e012e58f4f7b961e07c1edde9ec0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e4adfb8c12a416f4bb678be82460365eaa517/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e4adfb8c12a416f4bb678be82460365eaa517/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1a4e4adfb8c12a416f4bb678be82460365eaa517",
        "patch": "@@ -29,6 +29,7 @@\n using namespace std;\n using namespace boost;\n \n+std::string strWalletFile;\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n@@ -169,6 +170,7 @@ std::string HelpMessage()\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n     strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n     strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n+    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n     strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n     strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n     strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\";\n@@ -493,10 +495,16 @@ bool AppInit2(boost::thread_group& threadGroup)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n     }\n \n+    strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();\n \n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+        return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\\n\"), strWalletFile.c_str(), strDataDir.c_str()));\n+\n     // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n@@ -555,13 +563,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (GetBoolArg(\"-salvagewallet\", false))\n     {\n         // Recover readable keypairs:\n-        if (!CWalletDB::Recover(bitdb, \"wallet.dat\", true))\n+        if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n             return false;\n     }\n \n-    if (filesystem::exists(GetDataDir() / \"wallet.dat\"))\n+    if (filesystem::exists(GetDataDir() / strWalletFile))\n     {\n-        CDBEnv::VerifyResult r = bitdb.Verify(\"wallet.dat\", CWalletDB::Recover);\n+        CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n         if (r == CDBEnv::RECOVER_OK)\n         {\n             string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n@@ -839,7 +847,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    pwalletMain = new CWallet(\"wallet.dat\");\n+    pwalletMain = new CWallet(strWalletFile);\n     DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n@@ -904,7 +912,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         pindexRescan = pindexGenesisBlock;\n     else\n     {\n-        CWalletDB walletdb(\"wallet.dat\");\n+        CWalletDB walletdb(strWalletFile);\n         CBlockLocator locator;\n         if (walletdb.ReadBestBlock(locator))\n             pindexRescan = locator.GetBlockIndex();"
      },
      {
        "sha": "a4d5a672524fac7689266fb4db4a0e6b0f1750dd",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e4adfb8c12a416f4bb678be82460365eaa517/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e4adfb8c12a416f4bb678be82460365eaa517/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=1a4e4adfb8c12a416f4bb678be82460365eaa517",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"wallet.h\"\n \n+extern std::string strWalletFile;\n extern CWallet* pwalletMain;\n \n void StartShutdown();"
      },
      {
        "sha": "7ebe5b4755b2b1712a185b239d739bf3a93c3bd2",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e4adfb8c12a416f4bb678be82460365eaa517/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e4adfb8c12a416f4bb678be82460365eaa517/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=1a4e4adfb8c12a416f4bb678be82460365eaa517",
        "patch": "@@ -89,7 +89,7 @@ bool OptionsModel::Upgrade()\n     settings.setValue(\"bImportFinished\", true);\n \n     // Move settings from old wallet.dat (if any):\n-    CWalletDB walletdb(\"wallet.dat\");\n+    CWalletDB walletdb(strWalletFile);\n \n     QList<QString> intOptions;\n     intOptions << \"nDisplayUnit\" << \"nTransactionFee\";"
      }
    ]
  },
  {
    "sha": "0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzY1ZmE4ZjhkNGViMzIzMWQ2NzM0NThmNGY2Yzk0Y2JhYjkzNGU0",
    "commit": {
      "author": {
        "name": "Warren Togami",
        "email": "wtogami@gmail.com",
        "date": "2013-07-07T13:25:22Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:43Z"
      },
      "message": "Add wtogami to gitian download scripts.",
      "tree": {
        "sha": "993b856499c74783889f12b36a3da7785460869f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/993b856499c74783889f12b36a3da7785460869f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/comments",
    "author": {
      "login": "wtogami",
      "id": 93665,
      "node_id": "MDQ6VXNlcjkzNjY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/93665?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wtogami",
      "html_url": "https://github.com/wtogami",
      "followers_url": "https://api.github.com/users/wtogami/followers",
      "following_url": "https://api.github.com/users/wtogami/following{/other_user}",
      "gists_url": "https://api.github.com/users/wtogami/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wtogami/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wtogami/subscriptions",
      "organizations_url": "https://api.github.com/users/wtogami/orgs",
      "repos_url": "https://api.github.com/users/wtogami/repos",
      "events_url": "https://api.github.com/users/wtogami/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wtogami/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a4e4adfb8c12a416f4bb678be82460365eaa517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a4e4adfb8c12a416f4bb678be82460365eaa517",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a4e4adfb8c12a416f4bb678be82460365eaa517"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 139,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8340a5dd24754b0e15767d9c7d0b58053f9b591d",
        "filename": "contrib/gitian-downloader/linux-download-config",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/contrib/gitian-downloader/linux-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/contrib/gitian-downloader/linux-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/linux-download-config?ref=0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
        "patch": "@@ -35,4 +35,8 @@ signers:\n     weight: 40\n     name: \"Wladimir J. van der Laan\"\n     key: laanwj\n+  AEC1884398647C47413C1C3FB1179EB7347DC10D:\n+    weight: 40\n+    name: \"Warren Togami\"\n+    key: wtogami\n minimum_weight: 120"
      },
      {
        "sha": "49d52851b6b8884479b5c4de9137eef1ecd40670",
        "filename": "contrib/gitian-downloader/win32-download-config",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/contrib/gitian-downloader/win32-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/contrib/gitian-downloader/win32-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/win32-download-config?ref=0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
        "patch": "@@ -35,4 +35,8 @@ signers:\n     weight: 40\n     name: \"Wladimir J. van der Laan\"\n     key: laanwj\n+  AEC1884398647C47413C1C3FB1179EB7347DC10D:\n+    weight: 40\n+    name: \"Warren Togami\"\n+    key: wtogami\n minimum_weight: 120"
      },
      {
        "sha": "e0f6c4c5fdf56ffbd6308d4e0a6624290feadff6",
        "filename": "contrib/gitian-downloader/wtogami-key.pgp",
        "status": "added",
        "additions": 131,
        "deletions": 0,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/contrib/gitian-downloader/wtogami-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4/contrib/gitian-downloader/wtogami-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/wtogami-key.pgp?ref=0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
        "patch": "@@ -0,0 +1,131 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1.4.13 (GNU/Linux)\n+\n+mQQNBFHOzpUBIADYwJ1vC5npnYCthOtiSna/siS6tdol0OXc82QRgK4Q2YeFCkpN\n+Fw/T5YK34BLVGWDHPoafG2+r1nXIuMZnJIiGw6QVOL2sP9f7PrMmzck5KJPHD14Y\n+GRd9BPkhmt3dXzOCjhig7jI6hKEYayfJNUNs9nlZEvl4QWIBMmk+IyqQz3f1HMfl\n+/GkFDShBYF8Ny7Ktlx7AaXymajm4DCrTkbj5V2ZDqJgyQM549EoPSwXBQYrEjye3\n+g2viC8rUFRFWFjdnx7jFEb1uhx71YGuqiLxKihUW9pbSNK2cLweFazHSVmh+B/pz\n+fxHfUn+ijLSIAnprTmc/rq89un/iiPt0O/mspcCZ6hE5pFIyX+SC+9PrGz+bFSmw\n+PkMOZzG489G8k4t/uZsit6helkl0emg6JiXLTmS/oTuT7B9Z9/MeEhOXFcxUb0fr\n+2aZkEmH5d1oxSBis3D5nylmNJXOUSCpJAZ8E5Sr/5FbF9IPR+NSzosVacqCx5Dxj\n+vJ7HpZKn6pJfmwrghVXQv04NRTcxbHNmwd98cofBtWX8yBO8M2M+jZrU+BVDUbb/\n+A1oAyIbUUswBP768Oh11bELhCly774VwBqTojm2yodLGSyysx4zoa6qL7myfor0m\n+a+K29y8WH9XGmKGMdUOg+q9z+ODky9aToGvEo2eVhKIlJsk0aFAGy/8awy6qRIIj\n+UqLMq6XoFcYlE7SmnFUDDDPlBK/NkFFqySpFhKNRyt69Ea9kYXOxDnf/EnBwHn8m\n+PiFQpeZqgnmhyj8Nk1SSQBgUi07NyXdQ/WIYpWmqqqfHRVQgSE9C1920T1zg/E97\n+n5yYjI/gQQwq9wikkJmog6Ny7MSiwIU4LYV0pTUdI4//EJMId2FH8YEUfvG5ds+F\n+H/o/D4CAJ86KjspizfH8jEjhn0Rm/OtrxLz1rwA1gtF//P3TYNWw5qruL4stP3Rx\n+9Gve8Bm7oCBU73UT2ZJomEsWE3oqXinLRl3YCsjGDg/d3ySD6i0/BBROLIeXkh3M\n+M1CNCqREDGLA0vxQi1o7Zi7ZA4gWPSzvi/8KtSzY1iAQODxWUmOICRP7KQODWJmt\n+roTqhKgZ39wlR6eqkO8ZfAvRYsjvkL+EZFbbKbHxVJLhKchd2qHS+/Q3ov4SFzWY\n+/cE0ChOPDM587Jkps2bynKQAzQ6810FXmJc0ztrPeD3PEbuyY4KNJV8HGViRDJXi\n+wvs8eqfvTDGDPl4aLYVCKO9VqZ2OJvqhRhh71LQ2xRrX1LGnYLnUGCMuEQYKvMcI\n+TSssM/VAfeWAPJDklD0lVNJ7d9Z5ugvJHFc01SaaB47Aod2SPWp5DeiY4A8dcy2w\n+7f4Wx6FcdP1RXqaRZKCapBooN04vsvGllCshABEBAAG0KFdhcnJlbiBUb2dhbWkg\n+KDIwMTMpIDx3dG9nYW1pQGdtYWlsLmNvbT6JBDgEEwECACIFAlHOzpUCGwMGCwkI\n+BwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJELEXnrc0fcENY4Ef/23L9iC/39ekJ8Is\n+1IZdCoDD7/DgVaZqydDcy/ha9uaDFY4MQ0h9RZYo1axVBth/Yxzh1XnvitW8HFKn\n+DXn5wJI++KWpdLMUsTrc2iWsjAGgicmN5bkQvfTnRwn2pF17EUUEhZ8YyE3qMSVD\n+rDBECLAswT4Oiq9r9yw3VCFsRaxz5bhk9AAzWjam4H7mAfaEAOUvuX221v+KGSDM\n+UsGAAe+GjMPL8KnGgEbISlSUF1Ubcw3EChcqjf3BID2gMLkAnGAoxlCZSYievytg\n+71mcHyIf9yF861QrGcrCh6/objtRdt4IDUVwo9wapunRmYCdZux4ApD0Hit8nAsm\n+QtxftSK6FWBTOCIRoOQTjwE8qj9GYTIbUFppX66Dzh00td5NKkWz0PVze7YSk2hC\n+KCVBYyUYHgkQYVlYLZw7dBrXSXv7ph95vc93RDS031cU7tPOrthqnMmhtg1WAwzH\n+xc2v3az9Gsw1RyxBAOVpkB0AFODiEiVg46xqmxaBPXfQOg/buZA2l4gK4U/pVUZH\n+72lle2CbBw6FoSx40Y3GYZWB2uEdXBTNLlhX7q2Jvo8WdeTxEv5ACZsjI7K/wrzt\n+nmvCHefOmVf4tefkXy1MyEvBt2+Ek9bHmHDL1BSk/JdJzJtam2uaP5pGum/PwIUW\n+KBatmHKZUKwgOIml9btB413C4zSK3GQmC5Y/+TxYybACIdxTDqPSczVZ5Q+jSywX\n+shdOoLXDRyrYhT2sHjZ1W29B8ebokqwousF77EA94sqfQvDDnmFpvfq9+m0WYtOh\n+PFF/yxOtlbPJYX7mnC8+dUgobSA4AR5Yrclt+levgivIyNuBwzevHRDMreMZKl2J\n+uiOT8tkuu66fAwEltIowjjV7TBRfij4QLXl/zfFo8jKU8efL3xluXoRn7g+E5FZ3\n+19KTF/DWMcttfeTUYVnv0QTnstb1RGnVj7w8JMy90mKdMQFpl7IzHd2n6LrhEw1V\n+1AaPF7EcQBOlvsvlZdIFQrFyhKozKoGi3wRrl/bNdebxjIjPzfN9GgbiufFjz2d7\n+DMR9GFXfUMVxLncaqBBy1X7MV17ZF7K4uw6DET4fRoecb4N5mJVUxvYq4iZApnNP\n+npgGdmlcyPD6o3ynx/vkw78m13Gfgw8i2OaUY7xBdOyNVEvkJZBLaC2hw+TKLaZa\n+v0RExtAO0i0QO4Y1eo78Pl9jOpz0wkJ4KG0270l1Jza4IyaIhYRDWagWOfOp/cXU\n+cvKKiuJhLOsX1Bapz+O2Aor9+EwWRdPd3BzE2ABdmKHPwrKobNp75wrCpQ5mZifn\n+DSTJRMPQQJV3wGfB2sP0NE47U8w5CCmVK8gEuqYr6wBl/CCq5tjiRc63VM+to5V4\n+tVNTCJWIRgQQEQIABgUCUc7PqwAKCRBr3f6OVKKs8cYAAKCFCLJ5wc+iAVCFRevh\n+xTcJct0fiQCePHpY37CIeP8s9BH8GqCDftUqh8SIRgQQEQIABgUCUc7YwAAKCRDd\n+f+mrhdawLOVxAJ9Tjud26LtbM2mWcPj2eT7dhqgZrQCdGyMwMMVzp40lsCK44PrV\n++mpFO7KJAhwEEAECAAYFAlHO0BkACgkQw35HI5aSdvXfLw//c2zZxXg4bI2W7gkB\n+ZQJIOWnmPZfhrXQNeFuetyGoWTm4ZWxW362AdDGiQSGNNkXqeBPOitKOkRyZP/Z3\n+h1vwkLkwdFZyWXK00BzYBKfjThWV1BAnArQLewSiLlE7qSnsPEY6FW0PNv711cbL\n+lXSUP1/lW25Nx7L76GAF6sHreoIdglE8YH5y310JuFnqPa0uaJG+qDo8Mb+WkyLy\n+Q2A3Atws1tIB9vHsq2FCt9ACyAEA3AqtHR4uMFmIWpUYy77fJAZdzLZTWf0X5XYw\n+XILNPOl/I0iZrq3LYQAvJfIwjWAC/lm6uTLlvkIJHKyhcIT+RocjMV7bY9ezrC5i\n+Cag3gaOZ7USMt0h59KdmBaHHNa32n3PSHg9XWljqoWMRjuaRdcA7ofK0BHDJbHWE\n+cldKXC09laWOXbyNmJsfug/23vNE7fS/cAKSIgEWszEwHJCahB2i/HqOQF0DUGpq\n+3s5oIXs2xIuN0yT6yIIiQnTU/FkWDDu4D1OZNrDW6QG3cde0PRak/0fr4Kv4iB3E\n+CAzlsRBlWKNu/eE4QBx6cbvLqjriijhGAF+8Y1zvRKNKPr96hSsETfVytuKDTp6F\n+u7PAarrSATGXI92Hy3ThAZla0VOYUyeWPktqUMDNq90tIBZbwKpOMMqvJmZfgdOU\n+4ldDq1f5+2WhAt1aTL1GJVCuYcCJAhwEEAECAAYFAlHO3MQACgkQnSOpPExjO3Gi\n+jxAAsD+luooqqoz3A28ZxwfCDV+ovazQ4Bw6hVU0zKKZIz/2H4jwmLtLSHtucCRM\n+xRksZmnqf1p2nn+BKBXDInx9vI9HziMu7fWkzhuovAIf9+X/l6EYV1kQx0bIM1qU\n+BxXWPgGdrgSZZHl9Qff/BOBnrI8NJmVBDzOh3BSs0BrSR7aFbkSNbjk/JcP0JEyk\n+j6wDKQsop/Ca5AboLL0uQPgTvhxCu4VROKjhu7o3s7G3xlxTpimwYklDQuYFaGKj\n+ZNIGFq2orfIMBnj7ZEQVXzhWltlHcgPVP5TDfgd4pVUbyUB6ras7odJWWIHnUFmj\n+1l5bGidIwRXGFusE4iR8pR528LG2KxNDNQYipsKRY9m+wH+N7gbSgK8DxmocvieV\n+vcILFS5VrPLbEO2oC13NMljmvua3ovDB0CEh9rybaH+/oA+VDS2L3pkgATTju+Vx\n+6+mVdlvnrA4mJ5BoLHzrleKybS4ZkbtVBh1KOYmo95NgVifRvpVPB6hKzwqcjYFV\n+fVYBxTryTBRyd9MLsqpPKnGLBENTFvKDxRCK3iioNyVhXdS0z/UyF1C2hwNTpnjY\n+pGCu+Es3SILJg2TvQcwLM0OoYBA1bcONm2XbkTrdCpTOtQcSewQSkijREunx14iu\n+pvNSWeNmbjQU7gNYhvwcBgh90tWgNCfqTtSa5xSe46tmv0SJAhwEEAECAAYFAlHQ\n+1hgACgkQZwn/QC8Dr2hT/g/+OFUYPXfWo0+ILdxyTGP/v2mSw/X3dBCEYUqefWxD\n+umcwnksey+thEGFBlxbwpyOfAoTzZLUupaG6BacVgRUvv8bTne4v2H1d22aBXyjC\n+HMtQPhupn/giamu8q8hCPFrDp6inIAeFuz1GmQaH6xWO5eYBuYXQtxlvZLWBsuMT\n+74en4e3vjczxGmJu/nvM9ugcYsexA/zcN6SRGr7t2pV4ZElPzPBRyAzhYqhP1YlB\n+Rydz60OjgcWYEoJKWhJOfmFJ3ZoNGAz4TGoBkDIq4olCF0/cxqrtHN+ZnEOLwiZ7\n+4ZX90avcjEFtM+Wb5dBHNpni4ISoHcVI1X0ye6tuAOOt7RywbET/0oIW5iSNMgJ0\n+X4XYgOIQ2+a8yjGBjo9I57k0vp1mL6Ji/eaa0dlppcCGnzvSHss+O0qO212pg5Yk\n+GGfjX1y1ZeSP3ca9C2XyOGIVw2d2Iu7OyqAv/N81xt6ZgG3qixQC0nmgOmn7Kh2B\n+20W12KpLxKS8RQdHawGau3MBGKeqbfK6/eAzm22yD4/yJAoW4hKgm84z3FbKUN8w\n+ulYMK9hS2c4egpoDAOJ/QZLLXFWiyi7/sHZz69G2AweWCjOJh28Otg0cUHoLo7jw\n+oO/L0rCsOQMbUuIumYXBPHNnDwv1xfv2lT8tVzf6GksFJBAw0DybxOMTaOg45Lhz\n+jGS5BA0EUc7OlQEgAN6t+BV705uoCsdHtQBq/HKGGD5tBiOzy7Wd4nF/c6EWzET4\n+QUnmw6bDnqjxrk9MWniPDf1O9MvuB4qIY6g9kEjZ+VSQpWUZpZ5bMXCNHrfh9J2Q\n+6oLWqDmpeZv2OI0O9wxT62QaFei2qBtimSnBudLSCnvmU3S0h1PflmJsbj+tVcko\n+w2yOh2bjH1jkVAODHvEbxqyD6fiZhbfUVbPC49SBmXv8Gv0UywNSkP+iqJdwZAb0\n+XtjRx4WjZCkTwJAnbM4CJ63+5Hd83BtWZAZbGAh76XY/cSkDirXtXC+2LNUmP5W2\n+QY+ur5Bvz8LHaqJMXLAtePdkv5kpd+jXBrZieXUtqovxZaQTinl7C3L2TZd/ivxD\n+F3Rko9BFDuXXcdZrxBY5b3146IvSPp1y0WmHRxhAPb+RuiHQMt8K92nOhPyvtWXB\n+mWz0GnW9L6+CW4LKSPRSnE057hyxYNP/DcDd+fWFH+MmhU9noqHfJXSaLVzdI5PI\n+L8N44AndPIojnlxrxRs7Ik/nW6cTV9H3agg+24yyTdFkACbfIS6wWXOHeHuBzmO6\n+VI7pXOZJ9vZT7zI7M/hVci0R3putsGqgRfByRWWQ2DNeyrwUHexZNR/NYz1uhvA6\n+dBfKcuAwqxbdSrW/BxJ+iJWdkgYGCV67VLlO6S9sO33HgOanpPr5R9V1KsFVh4dN\n+j6BjZ4ALE5FPNW+iONnuXvtZbN2cBlBzMDeFC9oZoYCs1Pkmk8xUY2sAXPUt1R0G\n+D/miIb7ig1N52j9P6vv6fPs1ghmc/hGkhaXyjS54B5T33V6M9g+yba9mIgi8ZxZa\n+G+4rlFFKA4HS7wYYRJoqMvnc/qBYvoWLaPu3Xq6AXrJyuAaN+e3L8++cWbYHBXF9\n+qt+Q2RFL0FNiYUQuwkiaerysnm1a0H7ZtJ4zjl4ZgA1Ej7QcylTIbgFW3L7FnyMH\n+/5weLLN2wdjAtzjhRPYJLbV6V/gFbbpCpr+caDUaxSNizQuhhzVI5UrJegaHCCrx\n+DCiwWRFYzN5pqhtgzcaImK76DmPIk+Yrsum5KJZQeGfzKxvF0YnwxU0bxFzcDZJD\n+X2oCJn828Aw2j0nIlVlrrao0JMkvTBeZehO/11U68M2vKGEqrsQOb/BTXyLCeZwn\n+UGow1WvYfRxEZTrhhiYw94EH06gbqmKG1xsuV4LDI5z63/6ACcQW3orMbMymJCky\n+4HiNVZ7SNeGoYe380CJCwv6GN1opKTAWp84cr2KzhAzONGqNWNpUhznAXlI+GzCc\n+D2H330L1atMqZHjgpEfrkowvJ7WBM5KFKDfylaTKhYvfZcTOZs5OmRZSW3U54wRD\n+RMP0d2+k3vRililNhHIErHbjhYFc6zubVbBhvUMAEQEAAYkEHwQYAQIACQUCUc7O\n+lQIbDAAKCRCxF563NH3BDSX2IACugAdZqX+o/+pTkSrj+NEAcP0ZMci8w5nm/yOP\n+VlGyY6PXGuQKcBtvz3LWtIDdddMc/bD/zmZPwSzTx1MMOWc+gjR0azXe2RrdMHYk\n+8pb4X4Op2Nkasoc/8hNsRKaU24WUAQMqrRREIVBEOuHGl1A52Lj+aFB04rRHrkMl\n+AqjB5bwArPorIBdM417EEl4hjEZ9BpQxbUgBhTgGTZuc1u9PsKz1YvQ79YJIRmSH\n+n72Zaf35zY55eOQeoVBzGmFPq+/UFqtRNWA7jmRhHvMz/yR33B/RSxyTJuPb79zi\n+2mIZOrViG3X/UNL4qtOc1cKXQBi+FjHAMlGrCc+D5lnyOhEvqoEuvQic7V6C8Pvk\n+9q+jngn2Gs4pdJO8FOnwaC5xp/ZNE0v7x/KtAHyBA6iKcaepgoRQPSt1ONiHyfh1\n+iGgJn+Y6IHx4YDYKEY0UIzHhCfWUl8XZWcf4wLGEbGztkRbkCFqrsja5IeaO7umB\n+i6C4f95uSGjV7SiIMJOE8xo/m2g4VCnnmk7U996JwtBMKREMMqa3ABK4trfBL3Kq\n+P6I6ZTlA/C5svkVUVwWOMZau9kLDsxv8keGrFteZtfYa1KPAROFwNuBU82UW0KtX\n+QQbZoBKt1o3LhqEu+hXU3iKocYWSbBThH8u6vPNgSnW2Qcv3gcUU3jGmYeHrGiUO\n+SuEWxwlKUxCxBNfmz1FGswlwve1LsS3RTz/XB/L6Ubhq5L7FevrXz8152kuMqnpy\n+m93sXkL1eJVo07hH+otcRnMzy4vUar9z/N12t3hfTffx29PBKUCc2PKPVpLfJX2i\n+hieHk23fhLnptjc3lm9S+bHO3rqEWHqgNgNp9bpuwiLRsIy6qTtmC8jxXkGXvQrS\n++2Hv6+jRfDcqEAK3vqi1XL7Td81KRjnheBtsKpjS2PFatK3uTo6v1oRWJCdRCxg1\n+HT6a9KvZ+DNKcxlQISKAOLX72qpziaDl4CpBdQy4Zg2pr9oYkLdlfkaDK/OH4J3M\n+wJiVf/uNPPd+yy6xZXK0SPZHf+mf5Yt+Sim93hIbdS9AMdvHKB5n3DR27H+/okPj\n+w3J9z85hxgP5KspizQR6t77AWddPRy/l3BBZeb+HiaeKGBJeSNWXpkPXHkdjLW8U\n+QStzFR8r15FWJTmamIknjJ3XNbytMCpu8cj2ZVZdyjPcHEBL3WbNYYtauSuYmyUO\n+yXBaecM/KoTdvHiERU/mMuf7f1ftftCHehZoNaP+BeIbIud9IHIdrSQBCW+RC1Y1\n+8opDLMtnIOX3OnyCN38ELYcuNLMJxBqnQgi7MVDVcT1+BN/+lFQtG44+rPUkK+T1\n+Jk1/tIJqcyc1BfY6uFHFXWWnqQnjl0XpZo+/bMDxTVy8yND2\n+=icdI\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjI2YzljNmFiZThhMWQ4ZTcyMzJjYzJlNjRmYTdkNWZjNzg5NGFm",
    "commit": {
      "author": {
        "name": "Micha",
        "email": "michagogo@server.fake",
        "date": "2013-07-07T16:24:15Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:44Z"
      },
      "message": "Made the build/release process completable verbatim as listed in\nrelease-process.md",
      "tree": {
        "sha": "97752a287edfc03e9ac744093aee02878d76cda3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97752a287edfc03e9ac744093aee02878d76cda3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af/comments",
    "author": {
      "login": "Michagogo",
      "id": 2559390,
      "node_id": "MDQ6VXNlcjI1NTkzOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2559390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Michagogo",
      "html_url": "https://github.com/Michagogo",
      "followers_url": "https://api.github.com/users/Michagogo/followers",
      "following_url": "https://api.github.com/users/Michagogo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Michagogo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Michagogo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Michagogo/subscriptions",
      "organizations_url": "https://api.github.com/users/Michagogo/orgs",
      "repos_url": "https://api.github.com/users/Michagogo/repos",
      "events_url": "https://api.github.com/users/Michagogo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Michagogo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c65fa8f8d4eb3231d673458f4f6c94cbab934e4"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7b0a73a81e99658bdb4b7de757964f54c5d3f725",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
        "patch": "@@ -31,7 +31,7 @@ Release Process\n   \n \texport SIGNER=(your gitian key, ie bluematt, sipa, etc)\n \texport VERSION=(new version, e.g. 0.8.0)\n-\tcd ./gitian-builder\n+\tpushd ./gitian-builder\n \n  Fetch and build inputs: (first time, or when dependency versions change)\n \n@@ -58,13 +58,14 @@ Release Process\n \t./bin/gsign --signer $SIGNER --release ${VERSION} --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian.yml\n \tpushd build/out\n \tzip -r bitcoin-${VERSION}-linux-gitian.zip *\n-\tmv bitcoin-${VERSION}-linux-gitian.zip ../../\n+\tmv bitcoin-${VERSION}-linux-gitian.zip ../../../\n \tpopd\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win32.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-win32 --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win32.yml\n \tpushd build/out\n \tzip -r bitcoin-${VERSION}-win32-gitian.zip *\n-\tmv bitcoin-${VERSION}-win32-gitian.zip ../../\n+\tmv bitcoin-${VERSION}-win32-gitian.zip ../../../\n+\tpopd\n \tpopd\n \n   Build output expected:"
      }
    ]
  },
  {
    "sha": "bcd853241c7e8d710c305e50040b50062f3286f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2Q4NTMyNDFjN2U4ZDcxMGMzMDVlNTAwNDBiNTAwNjJmMzI4NmY2",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-06-25T19:06:43Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:45Z"
      },
      "message": "Make the rand tests determinstic. (fixes #2714)\n\nThis avoids spurious errors with the old tests but still tests\n enough that if the rng is replaced with a totally broken one\n it should still fail.",
      "tree": {
        "sha": "edf7759517cc5fd4d071ae1686f6d64354abe955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf7759517cc5fd4d071ae1686f6d64354abe955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcd853241c7e8d710c305e50040b50062f3286f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd853241c7e8d710c305e50040b50062f3286f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcd853241c7e8d710c305e50040b50062f3286f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd853241c7e8d710c305e50040b50062f3286f6/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a626c9c6abe8a1d8e7232cc2e64fa7d5fc7894af"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 1,
      "deletions": 33
    },
    "files": [
      {
        "sha": "fd936517fd065af5db1cc1eb2fed870f934b7dab",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 33,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd853241c7e8d710c305e50040b50062f3286f6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd853241c7e8d710c305e50040b50062f3286f6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=bcd853241c7e8d710c305e50040b50062f3286f6",
        "patch": "@@ -263,28 +263,10 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n \n BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n {\n-    // Expected results for the determinstic seed.\n-    const uint32_t exp_vals[11] = {  91632771U,1889679809U,3842137544U,3256031132U,\n-                                   1761911779U, 489223532U,2692793790U,2737472863U,\n-                                   2796262275U,1309899767U,840571781U};\n-    // Expected 0s in rand()%(idx+2) for the determinstic seed.\n-    const int exp_count[9] = {5013,3346,2415,1972,1644,1386,1176,1096,1009};\n     int i;\n     int count=0;\n \n-    seed_insecure_rand();\n-\n-    //Does the non-determistic rand give us results that look too like the determinstic one?\n-    for (i=0;i<10;i++)\n-    {\n-        int match = 0;\n-        uint32_t rval = insecure_rand();\n-        for (int j=0;j<11;j++)match |= rval==exp_vals[j];\n-        count += match;\n-    }\n-    // sum(binomial(10,i)*(11/(2^32))^i*(1-(11/(2^32)))^(10-i),i,0,4) ~= 1-1/2^134.73\n-    // So _very_ unlikely to throw a false failure here.\n-    BOOST_CHECK(count<=4);\n+    seed_insecure_rand(true);\n \n     for (int mod=2;mod<11;mod++)\n     {\n@@ -307,20 +289,6 @@ BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n         BOOST_CHECK(count<=10000/mod+err);\n         BOOST_CHECK(count>=10000/mod-err);\n     }\n-\n-    seed_insecure_rand(true);\n-\n-    for (i=0;i<11;i++)\n-    {\n-        BOOST_CHECK_EQUAL(insecure_rand(),exp_vals[i]);\n-    }\n-\n-    for (int mod=2;mod<11;mod++)\n-    {\n-        count = 0;\n-        for (i=0;i<10000;i++) count += insecure_rand()%mod==0;\n-        BOOST_CHECK_EQUAL(count,exp_count[mod-2]);\n-    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "133c1a6902d39463fb78fb1ac89d41b539ced4b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzNjMWE2OTAyZDM5NDYzZmI3OGZiMWFjODlkNDFiNTM5Y2VkNGIz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2013-07-10T08:01:57Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:46Z"
      },
      "message": "Remove readme-qt.rst and update documentation for readme-qt.md",
      "tree": {
        "sha": "ee69b0353831e74c6fb33e546481790af20a611e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee69b0353831e74c6fb33e546481790af20a611e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/133c1a6902d39463fb78fb1ac89d41b539ced4b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c1a6902d39463fb78fb1ac89d41b539ced4b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/133c1a6902d39463fb78fb1ac89d41b539ced4b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c1a6902d39463fb78fb1ac89d41b539ced4b3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcd853241c7e8d710c305e50040b50062f3286f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd853241c7e8d710c305e50040b50062f3286f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcd853241c7e8d710c305e50040b50062f3286f6"
      }
    ],
    "stats": {
      "total": 174,
      "additions": 5,
      "deletions": 169
    },
    "files": [
      {
        "sha": "4d931e2b5b652a20a9c4ecfb02aa6f97a9329f1e",
        "filename": "INSTALL",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c1a6902d39463fb78fb1ac89d41b539ced4b3/INSTALL",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c1a6902d39463fb78fb1ac89d41b539ced4b3/INSTALL",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL?ref=133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "patch": "@@ -1,9 +1,9 @@\n Building Bitcoin\n \n-See doc/readme-qt.rst for instructions on building Bitcoin-Qt,\n+See doc/readme-qt.md for instructions on building Bitcoin-Qt,\n the intended-for-end-users, nice-graphical-interface, reference\n implementation of Bitcoin.\n \n-See doc/build-*.txt for instructions on building bitcoind,\n+See doc/build-*.md for instructions on building bitcoind,\n the intended-for-services, no-graphical-interface, reference\n implementation of Bitcoin.\n\\ No newline at end of file"
      },
      {
        "sha": "e2dab18abf49a8514f6e9ba0767c592848a21bbf",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c1a6902d39463fb78fb1ac89d41b539ced4b3/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c1a6902d39463fb78fb1ac89d41b539ced4b3/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "patch": "@@ -342,7 +342,6 @@ QMAKE_EXTRA_COMPILERS += TSQM\n \n # \"Other files\" to show in Qt Creator\n OTHER_FILES += README.md \\\n-    doc/*.rst \\\n     doc/*.txt \\\n     doc/*.md \\\n     src/bitcoind.cpp \\"
      },
      {
        "sha": "d348ad7cc3e48ac827dc48b3cea6d6e31fdf38cd",
        "filename": "doc/build-msw.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c1a6902d39463fb78fb1ac89d41b539ced4b3/doc/build-msw.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c1a6902d39463fb78fb1ac89d41b539ced4b3/doc/build-msw.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-msw.md?ref=133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "patch": "@@ -1,7 +1,7 @@\n WINDOWS BUILD NOTES\n ===================\n \n-See [readme-qt.rst](readme-qt.rst) for instructions on building Bitcoin-Qt, the\n+See [readme-qt.md](readme-qt.md) for instructions on building Bitcoin-Qt, the\n graphical user interface.\n \n Compilers Supported"
      },
      {
        "sha": "271f8f55bda627ed26cc2d09c071a47b955203cb",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c1a6902d39463fb78fb1ac89d41b539ced4b3/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c1a6902d39463fb78fb1ac89d41b539ced4b3/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "patch": "@@ -5,7 +5,7 @@ This guide will show you how to build bitcoind(headless client) for OSX.\n Notes\n -----\n \n-* See [readme-qt.rst](readme-qt.rst) for instructions on building Bitcoin-Qt, the\n+* See [readme-qt.md](readme-qt.md) for instructions on building Bitcoin-Qt, the\n graphical user interface.\n * Tested on OS X 10.5 through 10.8 on Intel processors only. PPC is not\n supported because it is big-endian."
      },
      {
        "sha": "4653bba49542b337c11b1cd4f659131ba5f52875",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c1a6902d39463fb78fb1ac89d41b539ced4b3/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c1a6902d39463fb78fb1ac89d41b539ced4b3/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "patch": "@@ -8,7 +8,7 @@ To Build\n \tcd src/\n \tmake -f makefile.unix\t\t# Headless bitcoin\n \n-See readme-qt.rst for instructions on building Bitcoin-Qt, the graphical user interface.\n+See [readme-qt.md](readme-qt.md) for instructions on building Bitcoin-Qt, the graphical user interface.\n \n Dependencies\n ---------------------"
      },
      {
        "sha": "95cb33650f62ecff7e98c2c7918514a675b2353e",
        "filename": "doc/readme-qt.rst",
        "status": "removed",
        "additions": 0,
        "deletions": 163,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd853241c7e8d710c305e50040b50062f3286f6/doc/readme-qt.rst",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd853241c7e8d710c305e50040b50062f3286f6/doc/readme-qt.rst",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/readme-qt.rst?ref=bcd853241c7e8d710c305e50040b50062f3286f6",
        "patch": "@@ -1,163 +0,0 @@\n-Bitcoin-Qt: Qt4 GUI for Bitcoin\n-===============================\n-\n-Build instructions\n-===================\n-\n-Debian\n--------\n-\n-First, make sure that the required packages for Qt4 development of your\n-distribution are installed, these are\n-\n-::\n-\n-for Debian and Ubuntu  <= 11.10 :\n-\n-::\n-\n-    apt-get install qt4-qmake libqt4-dev build-essential libboost-dev libboost-system-dev \\\n-        libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev \\\n-        libssl-dev libdb4.8++-dev\n-\n-for Ubuntu >= 12.04 (please read the 'Berkely DB version warning' below):\n-\n-::\n-\n-    apt-get install qt4-qmake libqt4-dev build-essential libboost-dev libboost-system-dev \\\n-        libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev \\\n-        libssl-dev libdb++-dev libminiupnpc-dev\n-\n-For Qt 5 you need the following, otherwise you get an error with lrelease when running qmake:\n-\n-::\n-\n-    apt-get install qt5-qmake libqt5gui5 libqt5core5 libqt5dbus5 qttools5-dev-tools\n-\n-then execute the following:\n-\n-::\n-\n-    qmake\n-    make\n-\n-Alternatively, install `Qt Creator`_ and open the `bitcoin-qt.pro` file.\n-\n-An executable named `bitcoin-qt` will be built.\n-\n-.. _`Qt Creator`: http://qt-project.org/downloads/\n-\n-Mac OS X\n---------\n-\n-- Download and install the `Qt Mac OS X SDK`_. It is recommended to also install Apple's Xcode with UNIX tools.\n-\n-- Download and install either `MacPorts`_ or `HomeBrew`_.\n-\n-- Execute the following commands in a terminal to get the dependencies using MacPorts:\n-\n-::\n-\n-\tsudo port selfupdate\n-\tsudo port install boost db48 miniupnpc\n-\n-- Execute the following commands in a terminal to get the dependencies using HomeBrew:\n-\n-::\n-\n-\tbrew update\n-\tbrew install boost miniupnpc openssl berkeley-db4\n-\n-- If using HomeBrew,  edit `bitcoin-qt.pro` to account for library location differences. There's a diff in `contrib/homebrew/bitcoin-qt-pro.patch` that shows what you need to change, or you can just patch by doing\n-\n-        patch -p1 < contrib/homebrew/bitcoin.qt.pro.patch\n-\n-- Open the bitcoin-qt.pro file in Qt Creator and build as normal (cmd-B)\n-\n-.. _`Qt Mac OS X SDK`: http://qt-project.org/downloads/\n-.. _`MacPorts`: http://www.macports.org/install.php\n-.. _`HomeBrew`: http://mxcl.github.io/homebrew/\n-\n-\n-Build configuration options\n-============================\n-\n-UPnP port forwarding\n----------------------\n-\n-To use UPnP for port forwarding behind a NAT router (recommended, as more connections overall allow for a faster and more stable bitcoin experience), pass the following argument to qmake:\n-\n-::\n-\n-    qmake \"USE_UPNP=1\"\n-\n-(in **Qt Creator**, you can find the setting for additional qmake arguments under \"Projects\" -> \"Build Settings\" -> \"Build Steps\", then click \"Details\" next to **qmake**)\n-\n-This requires miniupnpc for UPnP port mapping.  It can be downloaded from\n-http://miniupnp.tuxfamily.org/files/.  UPnP support is not compiled in by default.\n-\n-Set USE_UPNP to a different value to control this:\n-\n-+------------+--------------------------------------------------------------------------+\n-| USE_UPNP=- | no UPnP support, miniupnpc not required;                                 |\n-+------------+--------------------------------------------------------------------------+\n-| USE_UPNP=0 | (the default) built with UPnP, support turned off by default at runtime; |\n-+------------+--------------------------------------------------------------------------+\n-| USE_UPNP=1 | build with UPnP support turned on by default at runtime.                 |\n-+------------+--------------------------------------------------------------------------+\n-\n-Notification support for recent (k)ubuntu versions\n----------------------------------------------------\n-\n-To see desktop notifications on (k)ubuntu versions starting from 10.04, enable usage of the\n-FreeDesktop notification interface through DBUS using the following qmake option:\n-\n-::\n-\n-    qmake \"USE_DBUS=1\"\n-\n-Generation of QR codes\n------------------------\n-\n-libqrencode may be used to generate QRCode images for payment requests.\n-It can be downloaded from http://fukuchi.org/works/qrencode/index.html.en, or installed via your package manager. Pass the USE_QRCODE\n-flag to qmake to control this:\n-\n-+--------------+--------------------------------------------------------------------------+\n-| USE_QRCODE=0 | (the default) No QRCode support - libarcode not required                 |\n-+--------------+--------------------------------------------------------------------------+\n-| USE_QRCODE=1 | QRCode support enabled                                                   |\n-+--------------+--------------------------------------------------------------------------+\n-\n-\n-Berkely DB version warning\n-==========================\n-\n-A warning for people using the *static binary* version of Bitcoin on a Linux/UNIX-ish system (tl;dr: **Berkely DB databases are not forward compatible**).\n-\n-The static binary version of Bitcoin is linked against libdb4.8 (see also `this Debian issue`_).\n-\n-Now the nasty thing is that databases from 5.X are not compatible with 4.X.\n-\n-If the globally installed development package of Berkely DB installed on your system is 5.X, any source you\n-build yourself will be linked against that. The first time you run with a 5.X version the database will be upgraded,\n-and 4.X cannot open the new format. This means that you cannot go back to the old statically linked version without\n-significant hassle!\n-\n-.. _`this Debian issue`: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=621425\n-\n-Ubuntu 11.10 warning\n-====================\n-\n-Ubuntu 11.10 has a package called 'qt-at-spi' installed by default.  At the time of writing, having that package\n-installed causes bitcoin-qt to crash intermittently.  The issue has been reported as `launchpad bug 857790`_, but\n-isn't yet fixed.\n-\n-Until the bug is fixed, you can remove the qt-at-spi package to work around the problem, though this will presumably\n-disable screen reader functionality for Qt apps:\n-\n-::\n-\n-    sudo apt-get remove qt-at-spi\n-\n-.. _`launchpad bug 857790`: https://bugs.launchpad.net/ubuntu/+source/qt-at-spi/+bug/857790"
      }
    ]
  },
  {
    "sha": "7f2a726d2d18240b1ec79af4932adbaedadffde7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjJhNzI2ZDJkMTgyNDBiMWVjNzlhZjQ5MzJhZGJhZWRhZGZmZGU3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-13T10:56:52Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:47Z"
      },
      "message": "Fix minor backward incompatibility\n\nThe key refactor changed the way unencrypted private keys with compressed\npublic key are stored in the wallet. Apparently older versions relied on\nthis to verify the correctness of stored keys.\n\nNote that earlier pre-release versions do risk creating wallets that can\nnot be opened by 0.8.3 and earlier.",
      "tree": {
        "sha": "9e87e5cc46efaa6c5959b3dccde1f6b5f8a59fa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e87e5cc46efaa6c5959b3dccde1f6b5f8a59fa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f2a726d2d18240b1ec79af4932adbaedadffde7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f2a726d2d18240b1ec79af4932adbaedadffde7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f2a726d2d18240b1ec79af4932adbaedadffde7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f2a726d2d18240b1ec79af4932adbaedadffde7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c1a6902d39463fb78fb1ac89d41b539ced4b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133c1a6902d39463fb78fb1ac89d41b539ced4b3"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1ab4c62ebfa7daef657764ddda84a6dde9f483f4",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f2a726d2d18240b1ec79af4932adbaedadffde7/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f2a726d2d18240b1ec79af4932adbaedadffde7/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=7f2a726d2d18240b1ec79af4932adbaedadffde7",
        "patch": "@@ -155,7 +155,8 @@ class CECKey {\n         BN_clear_free(&bn);\n     }\n \n-    void GetPrivKey(CPrivKey &privkey) {\n+    void GetPrivKey(CPrivKey &privkey, bool fCompressed) {\n+        EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n         int nSize = i2d_ECPrivateKey(pkey, NULL);\n         assert(nSize);\n         privkey.resize(nSize);\n@@ -304,7 +305,7 @@ CPrivKey CKey::GetPrivKey() const {\n     CECKey key;\n     key.SetSecretBytes(vch);\n     CPrivKey privkey;\n-    key.GetPrivKey(privkey);\n+    key.GetPrivKey(privkey, fCompressed);\n     return privkey;\n }\n "
      }
    ]
  },
  {
    "sha": "bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzQ2NzBiZTdhZmE3ZjFhMjU3ZDYwZTBlNWRiNGI5NzBjZDU4YzE3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-13T11:05:04Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:48Z"
      },
      "message": "fix invalid conversion error with MinGW 4.8.1 in net.cpp\n\n- fixes src\\net.cpp:1601: Error:invalid conversion from 'void*' to\n  'const char*' [-fpermissive] in a setsockopt() call on Win32 that was\n  found by using MinGW 4.8.1 compiler suite",
      "tree": {
        "sha": "719c4a1a72558f02ae7311e376801287b97fa40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/719c4a1a72558f02ae7311e376801287b97fa40a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4670be7afa7f1a257d60e0e5db4b970cd58c17/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f2a726d2d18240b1ec79af4932adbaedadffde7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f2a726d2d18240b1ec79af4932adbaedadffde7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f2a726d2d18240b1ec79af4932adbaedadffde7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd9aa1f50f44676e0455a8d3b511c66b0360d4f1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4670be7afa7f1a257d60e0e5db4b970cd58c17/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4670be7afa7f1a257d60e0e5db4b970cd58c17/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
        "patch": "@@ -1598,8 +1598,12 @@ bool BindListenPort(const CService &addrBind, string& strError)\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {\n #ifdef IPV6_V6ONLY\n+#ifdef WIN32\n+        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (const char*)&nOne, sizeof(int));\n+#else\n         setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (void*)&nOne, sizeof(int));\n #endif\n+#endif\n #ifdef WIN32\n         int nProtLevel = 10 /* PROTECTION_LEVEL_UNRESTRICTED */;\n         int nParameterId = 23 /* IPV6_PROTECTION_LEVEl */;"
      }
    ]
  },
  {
    "sha": "c985b975eea909ca74cec6476cfeb34bf958b480",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTg1Yjk3NWVlYTkwOWNhNzRjZWM2NDc2Y2ZlYjM0YmY5NThiNDgw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-07-15T22:13:42Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:49Z"
      },
      "message": "Bugfix: Move boost/version include from db.cpp to walletdb.cpp where BOOST_VERSION is used",
      "tree": {
        "sha": "d8e010519142a3acf4f3914df89304333745eb1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8e010519142a3acf4f3914df89304333745eb1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c985b975eea909ca74cec6476cfeb34bf958b480",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c985b975eea909ca74cec6476cfeb34bf958b480",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c985b975eea909ca74cec6476cfeb34bf958b480",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c985b975eea909ca74cec6476cfeb34bf958b480/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4670be7afa7f1a257d60e0e5db4b970cd58c17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4670be7afa7f1a257d60e0e5db4b970cd58c17"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "03f46f3c262ccd33511dcb9bdae959632d3870d8",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c985b975eea909ca74cec6476cfeb34bf958b480/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c985b975eea909ca74cec6476cfeb34bf958b480/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=c985b975eea909ca74cec6476cfeb34bf958b480",
        "patch": "@@ -8,7 +8,6 @@\n #include \"util.h\"\n #include \"hash.h\"\n #include \"addrman.h\"\n-#include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <openssl/rand.h>"
      },
      {
        "sha": "7aad779767a070f2c097a15b84897963a512fed3",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c985b975eea909ca74cec6476cfeb34bf958b480/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c985b975eea909ca74cec6476cfeb34bf958b480/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c985b975eea909ca74cec6476cfeb34bf958b480",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"walletdb.h\"\n #include \"wallet.h\"\n+#include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n \n using namespace std;"
      }
    ]
  },
  {
    "sha": "7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDEwNTliMjUwMjJmZjJmYTdlOWNhY2FiNTQ5NWI2MmNlMTE0N2Qw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-04-19T21:28:25Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:50Z"
      },
      "message": "Bugfix: Store last/next wallet resend times unique per CWallet object",
      "tree": {
        "sha": "7349df614b4a64be14dca1dd6b6d71efd9732213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7349df614b4a64be14dca1dd6b6d71efd9732213"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d1059b25022ff2fa7e9cacab5495b62ce1147d0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c985b975eea909ca74cec6476cfeb34bf958b480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c985b975eea909ca74cec6476cfeb34bf958b480",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c985b975eea909ca74cec6476cfeb34bf958b480"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0b4c866f81f6499a4552a8da87a760ea6254cbe5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1059b25022ff2fa7e9cacab5495b62ce1147d0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1059b25022ff2fa7e9cacab5495b62ce1147d0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
        "patch": "@@ -892,19 +892,17 @@ void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n-    static int64 nNextTime;\n-    if (GetTime() < nNextTime)\n+    if (GetTime() < nNextResend)\n         return;\n-    bool fFirst = (nNextTime == 0);\n-    nNextTime = GetTime() + GetRand(30 * 60);\n+    bool fFirst = (nNextResend == 0);\n+    nNextResend = GetTime() + GetRand(30 * 60);\n     if (fFirst)\n         return;\n \n     // Only do it if there's been a new block since last time\n-    static int64 nLastTime;\n-    if (nTimeBestReceived < nLastTime)\n+    if (nTimeBestReceived < nLastResend)\n         return;\n-    nLastTime = GetTime();\n+    nLastResend = GetTime();\n \n     // Rebroadcast any of our txes that aren't in a block yet\n     printf(\"ResendWalletTransactions()\\n\");"
      },
      {
        "sha": "92f893c6b00585637ca1d1a44d3efc177363fe1e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1059b25022ff2fa7e9cacab5495b62ce1147d0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1059b25022ff2fa7e9cacab5495b62ce1147d0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
        "patch": "@@ -80,6 +80,9 @@ class CWallet : public CCryptoKeyStore\n     // the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n     int nWalletMaxVersion;\n \n+    int64 nNextResend;\n+    int64 nLastResend;\n+\n public:\n     mutable CCriticalSection cs_wallet;\n "
      }
    ]
  },
  {
    "sha": "6fc28109e9fb310c869ed0ebad8433d3be380cc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmMyODEwOWU5ZmIzMTBjODY5ZWQwZWJhZDg0MzNkM2JlMzgwY2My",
    "commit": {
      "author": {
        "name": "phelixbtc",
        "email": "github@blockchained.com",
        "date": "2013-07-19T08:20:13Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:51Z"
      },
      "message": "makefile.mingw: Use normal boost libraries instead of debug for Windows\n\nhttps://github.com/bitcoin/bitcoin/pull/2835#issuecomment-21231694",
      "tree": {
        "sha": "679da6d4d43a66af28eba437205f4e81fecac50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/679da6d4d43a66af28eba437205f4e81fecac50d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc28109e9fb310c869ed0ebad8433d3be380cc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc28109e9fb310c869ed0ebad8433d3be380cc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc28109e9fb310c869ed0ebad8433d3be380cc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc28109e9fb310c869ed0ebad8433d3be380cc2/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d1059b25022ff2fa7e9cacab5495b62ce1147d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d1059b25022ff2fa7e9cacab5495b62ce1147d0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "002e36d3e238037ed48a8831bef5cb318ecab188",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc28109e9fb310c869ed0ebad8433d3be380cc2/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc28109e9fb310c869ed0ebad8433d3be380cc2/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=6fc28109e9fb310c869ed0ebad8433d3be380cc2",
        "patch": "@@ -21,7 +21,7 @@ USE_UPNP:=-\n USE_IPV6:=1\n \n DEPSDIR?=/usr/local\n-BOOST_SUFFIX?=-mgw46-mt-sd-1_52\n+BOOST_SUFFIX?=-mgw46-mt-s-1_52\n \n INCLUDEPATHS= \\\n  -I\"$(CURDIR)\" \\"
      }
    ]
  },
  {
    "sha": "e7f985219265ec02225a800a88693e3fd2767a03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2Y5ODUyMTkyNjVlYzAyMjI1YTgwMGE4ODY5M2UzZmQyNzY3YTAz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-07-21T16:13:00Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:53Z"
      },
      "message": "Bugfix: Include block creation and SSL options headings in usage",
      "tree": {
        "sha": "11547477ccb0c72db10b77cbaeab37584069a69f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11547477ccb0c72db10b77cbaeab37584069a69f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7f985219265ec02225a800a88693e3fd2767a03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f985219265ec02225a800a88693e3fd2767a03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f985219265ec02225a800a88693e3fd2767a03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f985219265ec02225a800a88693e3fd2767a03/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fc28109e9fb310c869ed0ebad8433d3be380cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc28109e9fb310c869ed0ebad8433d3be380cc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc28109e9fb310c869ed0ebad8433d3be380cc2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "90dbad61b7b441c316529395ab4217ad216499ed",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7f985219265ec02225a800a88693e3fd2767a03/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7f985219265ec02225a800a88693e3fd2767a03/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e7f985219265ec02225a800a88693e3fd2767a03",
        "patch": "@@ -239,12 +239,12 @@ std::string HelpMessage()\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\";\n     strUsage += \"  -par=<n>               \" + _(\"Set the number of script verification threads (up to 16, 0 = auto, <0 = leave that many cores free, default: 0)\") + \"\\n\";\n \n-    strUsage += \"\\n\"; _(\"Block creation options:\") + \"\\n\";\n+    strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n     strUsage += \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\";\n     strUsage += \"  -blockmaxsize=<n>      \"   + _(\"Set maximum block size in bytes (default: 250000)\") + \"\\n\";\n     strUsage += \"  -blockprioritysize=<n> \"   + _(\"Set maximum size of high-priority/low-fee transactions in bytes (default: 27000)\") + \"\\n\";\n \n-    strUsage += \"\\n\"; _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n+    strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\";\n     strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\";"
      }
    ]
  },
  {
    "sha": "8257d6ede601532dfde99c71be47c39cc6f9a503",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjU3ZDZlZGU2MDE1MzJkZmRlOTljNzFiZTQ3YzM5Y2M2ZjlhNTAz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-05-07T16:33:52Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:54Z"
      },
      "message": "Detect any sufficiently long fork and add a warning.\n\nSuch a fork is defined as being at least 7 blocks long and\nhaving a tip which is within 72 blocks of our best block.",
      "tree": {
        "sha": "dfb403e168fc14e9457ca0eac46108cf394ff5de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfb403e168fc14e9457ca0eac46108cf394ff5de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8257d6ede601532dfde99c71be47c39cc6f9a503",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8257d6ede601532dfde99c71be47c39cc6f9a503",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8257d6ede601532dfde99c71be47c39cc6f9a503",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8257d6ede601532dfde99c71be47c39cc6f9a503/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7f985219265ec02225a800a88693e3fd2767a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f985219265ec02225a800a88693e3fd2767a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f985219265ec02225a800a88693e3fd2767a03"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 56,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2e79c874d71b5abfe152fe133a52f5579e0e984f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 5,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8257d6ede601532dfde99c71be47c39cc6f9a503/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8257d6ede601532dfde99c71be47c39cc6f9a503/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8257d6ede601532dfde99c71be47c39cc6f9a503",
        "patch": "@@ -1383,6 +1383,56 @@ bool IsInitialBlockDownload()\n             pindexBest->GetBlockTime() < GetTime() - 24 * 60 * 60);\n }\n \n+bool fLargeWorkForkFound = false;\n+CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n+\n+void CheckForkWarningConditions()\n+{\n+    // If our best fork is no longer within 72 blocks (+/- 12 hours if no one mines it)\n+    // of our head, drop it\n+    if (pindexBestForkTip && nBestHeight - pindexBestForkTip->nHeight >= 72)\n+        pindexBestForkTip = NULL;\n+\n+    if (pindexBestForkTip || nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n+    {\n+        fLargeWorkForkFound = true;\n+        printf(\"CheckForkWarningConditions: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n+    } else\n+        fLargeWorkForkFound = false;\n+}\n+\n+void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n+{\n+    // If we are on a fork that is sufficiently large, set a warning flag\n+    CBlockIndex* pfork = pindexNewForkTip;\n+    CBlockIndex* plonger = pindexBest;\n+    while (pfork && pfork != plonger)\n+    {\n+        while (plonger && plonger->nHeight > pfork->nHeight)\n+            plonger = plonger->pprev;\n+        if (pfork == plonger)\n+            break;\n+        pfork = pfork->pprev;\n+    }\n+\n+    // We define a condition which we should warn the user about as a fork of at least 7 blocks\n+    // who's tip is within 72 blocks (+/- 12 hours if no one mines it) of ours\n+    // We use 7 blocks rather arbitrarily as it represents just under 10% of sustained network\n+    // hash rate operating on the fork.\n+    // or a chain that is entirely longer than ours and invalid (note that this should be detected by both)\n+    // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n+    // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n+    if (pfork && (!pindexBestForkTip || (pindexBestForkTip && pindexNewForkTip->nHeight > pindexBestForkTip->nHeight)) &&\n+            pindexNewForkTip->nChainWork - pfork->nChainWork > (pfork->GetBlockWork() * 7).getuint256() &&\n+            nBestHeight - pindexNewForkTip->nHeight < 72)\n+    {\n+        pindexBestForkTip = pindexNewForkTip;\n+        pindexBestForkBase = pfork;\n+    }\n+\n+    CheckForkWarningConditions();\n+}\n+\n void static InvalidChainFound(CBlockIndex* pindexNew)\n {\n     if (pindexNew->nChainWork > nBestInvalidWork)\n@@ -1398,8 +1448,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     printf(\"InvalidChainFound:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n       hashBestChain.ToString().c_str(), nBestHeight, log(nBestChainWork.getdouble())/log(2.0),\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n-    if (pindexBest && nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n-        printf(\"InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n+    CheckForkWarningConditions();\n }\n \n void static InvalidBlockFound(CBlockIndex *pindex) {\n@@ -2110,11 +2159,14 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n \n     if (pindexNew == pindexBest)\n     {\n+        // Clear fork warning if its no longer applicable\n+        CheckForkWarningConditions();\n         // Notify UI to display prev block's coinbase if it was ours\n         static uint256 hashPrevBestCoinBase;\n         UpdatedTransaction(hashPrevBestCoinBase);\n         hashPrevBestCoinBase = block.GetTxHash(0);\n-    }\n+    } else\n+        CheckForkWarningConditionsOnNewFork(pindexNew);\n \n     if (!pblocktree->Flush())\n         return state.Abort(_(\"Failed to sync block index\"));\n@@ -3073,8 +3125,7 @@ string GetWarnings(string strFor)\n         strStatusBar = strMiscWarning;\n     }\n \n-    // Longer invalid proof-of-work chain\n-    if (pindexBest && nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n+    if (fLargeWorkForkFound)\n     {\n         nPriority = 2000;\n         strStatusBar = strRPC = _(\"Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\");"
      }
    ]
  },
  {
    "sha": "4e9636c442c215a647aaf2a0a4971aeced7797b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTk2MzZjNDQyYzIxNWE2NDdhYWYyYTBhNDk3MWFlY2VkNzc5N2Ix",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-05-07T16:37:37Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:55Z"
      },
      "message": "Call the -alertnotify script when we see a long or invalid fork.",
      "tree": {
        "sha": "cd213faa5cb2f647b4ec74d41748ce7748cb878a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd213faa5cb2f647b4ec74d41748ce7748cb878a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e9636c442c215a647aaf2a0a4971aeced7797b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e9636c442c215a647aaf2a0a4971aeced7797b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e9636c442c215a647aaf2a0a4971aeced7797b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e9636c442c215a647aaf2a0a4971aeced7797b1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8257d6ede601532dfde99c71be47c39cc6f9a503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8257d6ede601532dfde99c71be47c39cc6f9a503",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8257d6ede601532dfde99c71be47c39cc6f9a503"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e21e79bea3419b243dcc390a640731d7640eeacc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e9636c442c215a647aaf2a0a4971aeced7797b1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e9636c442c215a647aaf2a0a4971aeced7797b1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4e9636c442c215a647aaf2a0a4971aeced7797b1",
        "patch": "@@ -227,7 +227,7 @@ std::string HelpMessage()\n     strUsage += \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\";\n     strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received (%s in cmd is replaced by message)\") + \"\\n\";\n+    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n     strUsage += \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";"
      },
      {
        "sha": "b206b68036ee2964e1a6e89084880263d7a7c91e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e9636c442c215a647aaf2a0a4971aeced7797b1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e9636c442c215a647aaf2a0a4971aeced7797b1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4e9636c442c215a647aaf2a0a4971aeced7797b1",
        "patch": "@@ -1395,6 +1395,16 @@ void CheckForkWarningConditions()\n \n     if (pindexBestForkTip || nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n     {\n+        if (!fLargeWorkForkFound)\n+        {\n+            std::string strCmd = GetArg(\"-alertnotify\", \"\");\n+            if (!strCmd.empty())\n+            {\n+                std::string warning(\"'Warning: Large-work fork detected. You may need to upgrade, or other nodes may need to upgrade.'\");\n+                boost::replace_all(strCmd, \"%s\", warning);\n+                boost::thread t(runCommand, strCmd); // thread runs free\n+            }\n+        }\n         fLargeWorkForkFound = true;\n         printf(\"CheckForkWarningConditions: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n     } else"
      }
    ]
  },
  {
    "sha": "7169ffaac1988279c0a480a4110bf87fef108f8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTY5ZmZhYWMxOTg4Mjc5YzBhNDgwYTQxMTBiZjg3ZmVmMTA4Zjhj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-05-18T01:09:28Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:56Z"
      },
      "message": "Better warning/\"alert\" messages for large-work forks.",
      "tree": {
        "sha": "ac564e2a0e7783f6fc65196f4a82e0d8a2000f43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac564e2a0e7783f6fc65196f4a82e0d8a2000f43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7169ffaac1988279c0a480a4110bf87fef108f8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7169ffaac1988279c0a480a4110bf87fef108f8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7169ffaac1988279c0a480a4110bf87fef108f8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7169ffaac1988279c0a480a4110bf87fef108f8c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e9636c442c215a647aaf2a0a4971aeced7797b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e9636c442c215a647aaf2a0a4971aeced7797b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e9636c442c215a647aaf2a0a4971aeced7797b1"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 26,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7dc51fc9dcdc1394b86ef85d8d437ff858872a9d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 5,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7169ffaac1988279c0a480a4110bf87fef108f8c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7169ffaac1988279c0a480a4110bf87fef108f8c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7169ffaac1988279c0a480a4110bf87fef108f8c",
        "patch": "@@ -1384,6 +1384,7 @@ bool IsInitialBlockDownload()\n }\n \n bool fLargeWorkForkFound = false;\n+bool fLargeWorkInvalidChainFound = false;\n CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n \n void CheckForkWarningConditions()\n@@ -1400,15 +1401,30 @@ void CheckForkWarningConditions()\n             std::string strCmd = GetArg(\"-alertnotify\", \"\");\n             if (!strCmd.empty())\n             {\n-                std::string warning(\"'Warning: Large-work fork detected. You may need to upgrade, or other nodes may need to upgrade.'\");\n+                std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n+                                      pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n                 boost::replace_all(strCmd, \"%s\", warning);\n                 boost::thread t(runCommand, strCmd); // thread runs free\n             }\n         }\n-        fLargeWorkForkFound = true;\n-        printf(\"CheckForkWarningConditions: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n-    } else\n+        if (pindexBestForkTip)\n+        {\n+            printf(\"CheckForkWarningConditions: Warning: Large valid fork found\\n  forking the chain at height %d (%s)\\n  lasting to height %d (%s).\\nChain state database corruption likely.\\n\",\n+                   pindexBestForkBase->nHeight, pindexBestForkBase->phashBlock->ToString().c_str(),\n+                   pindexBestForkTip->nHeight, pindexBestForkTip->phashBlock->ToString().c_str());\n+            fLargeWorkForkFound = true;\n+        }\n+        else\n+        {\n+            printf(\"CheckForkWarningConditions: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\");\n+            fLargeWorkInvalidChainFound = true;\n+        }\n+    }\n+    else\n+    {\n         fLargeWorkForkFound = false;\n+        fLargeWorkInvalidChainFound = false;\n+    }\n }\n \n void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n@@ -3138,7 +3154,12 @@ string GetWarnings(string strFor)\n     if (fLargeWorkForkFound)\n     {\n         nPriority = 2000;\n-        strStatusBar = strRPC = _(\"Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\");\n+        strStatusBar = strRPC = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n+    }\n+    else if (fLargeWorkInvalidChainFound)\n+    {\n+        nPriority = 2000;\n+        strStatusBar = strRPC = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n     }\n \n     // Alerts"
      }
    ]
  },
  {
    "sha": "5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Njc4ZjNkZjllODFlMTZhNzUzNmI4NTkzOGViNmNjMWQ4YzBlNWIz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-23T06:52:24Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:57Z"
      },
      "message": "Bitcoin-Qt: fix QApplication includes to match our include defaults\n\n- move all QApplication includes to top of included Qt headers\n- undef our loop macro where it would cause compilation errors otherwise",
      "tree": {
        "sha": "0835012e6892ebf426c67f4310a6ebe46657c3f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0835012e6892ebf426c67f4310a6ebe46657c3f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7169ffaac1988279c0a480a4110bf87fef108f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7169ffaac1988279c0a480a4110bf87fef108f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7169ffaac1988279c0a480a4110bf87fef108f8c"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4e9180b88ca637b3b2450edf0bbb9e1b95622fe4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -2,8 +2,6 @@\n  * W.J. van der Laan 2011-2012\n  */\n \n-#include <QApplication>\n-\n #include \"bitcoingui.h\"\n #include \"clientmodel.h\"\n #include \"walletmodel.h\"\n@@ -17,6 +15,8 @@\n #include \"splashscreen.h\"\n #include \"intro.h\"\n \n+#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n+#include <QApplication>\n #include <QMessageBox>\n #if QT_VERSION < 0x050000\n #include <QTextCodec>"
      },
      {
        "sha": "eeb6fe89bbc3b0b8dd435f99fa25dfd02c87c03b",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -4,10 +4,11 @@\n #include \"bitcoinunits.h\"\n #include \"guiconstants.h\"\n \n+#include <QApplication>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n #include <QDoubleSpinBox>\n-#include <QApplication>\n+\n #include <qmath.h> // for qPow()\n \n BitcoinAmountField::BitcoinAmountField(QWidget *parent):"
      },
      {
        "sha": "11767cf31228ba7de1312310d2f5881389d639e5",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -5,8 +5,6 @@\n  * The Bitcoin Developers 2011-2012\n  */\n \n-#include <QApplication>\n-\n #include \"bitcoingui.h\"\n \n #include \"transactiontablemodel.h\"\n@@ -30,6 +28,8 @@\n #include \"macdockiconhandler.h\"\n #endif\n \n+#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n+#include <QApplication>\n #include <QMenuBar>\n #include <QMenu>\n #include <QIcon>"
      },
      {
        "sha": "521d9bddd81818f996f7f9782d7490e5f507ee24",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -1,5 +1,3 @@\n-#include <QApplication>\n-\n #include \"guiutil.h\"\n \n #include \"bitcoinaddressvalidator.h\"\n@@ -9,6 +7,8 @@\n #include \"util.h\"\n #include \"init.h\"\n \n+#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n+#include <QApplication>\n #include <QDateTime>\n #include <QDoubleValidator>\n #include <QFont>"
      },
      {
        "sha": "903c54b39df32a4a074cf48dd537cd0b18b87cc4",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -1,9 +1,9 @@\n #include \"notificator.h\"\n \n+#include <QApplication>\n #include <QMetaType>\n #include <QVariant>\n #include <QIcon>\n-#include <QApplication>\n #include <QStyle>\n #include <QByteArray>\n #include <QSystemTrayIcon>"
      },
      {
        "sha": "8178065bcc5be90ade255ffbf8015c86387099a8",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <QApplication>\n-\n #include \"paymentserver.h\"\n \n #include \"guiconstants.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n+#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n+#include <QApplication>\n #include <QByteArray>\n #include <QDataStream>\n #include <QDebug>"
      },
      {
        "sha": "43430a858e9d5738905034fae5570be638354df7",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "patch": "@@ -2,9 +2,9 @@\n #include \"clientversion.h\"\n #include \"util.h\"\n \n-#include <QPainter>\n-#undef loop /* ugh, remove this when the #define loop is gone from util.h */\n+#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n #include <QApplication>\n+#include <QPainter>\n \n SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f) :\n     QSplashScreen(pixmap, f)"
      }
    ]
  },
  {
    "sha": "84fe45abd6ae526066052817cd63814cdac58a02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGZlNDVhYmQ2YWU1MjYwNjYwNTI4MTdjZDYzODE0Y2RhYzU4YTAy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-23T07:08:02Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:58Z"
      },
      "message": "update bitcoin_en.ts to current master (2013-07-23)",
      "tree": {
        "sha": "acf35c66b02ad01b6ce77ef5a553d87094bd7243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf35c66b02ad01b6ce77ef5a553d87094bd7243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84fe45abd6ae526066052817cd63814cdac58a02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fe45abd6ae526066052817cd63814cdac58a02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84fe45abd6ae526066052817cd63814cdac58a02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fe45abd6ae526066052817cd63814cdac58a02/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5678f3df9e81e16a7536b85938eb6cc1d8c0e5b3"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 98,
      "deletions": 4
    },
    "files": [
      {
        "sha": "61af88d056050f87476f79c72a582e3ad3ba2a49",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 98,
        "deletions": 4,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84fe45abd6ae526066052817cd63814cdac58a02/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84fe45abd6ae526066052817cd63814cdac58a02/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=84fe45abd6ae526066052817cd63814cdac58a02",
        "patch": "@@ -1,7 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <!DOCTYPE TS>\n <TS version=\"2.0\" language=\"en\">\n-<defaultcodec>UTF-8</defaultcodec>\n <context>\n     <name>AboutDialog</name>\n     <message>\n@@ -689,7 +688,7 @@ Address: %4\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+109\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+111\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</translation>\n     </message>\n@@ -770,16 +769,39 @@ Address: %4\n         <translation>New key generation failed.</translation>\n     </message>\n </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    <message>\n+        <location filename=\"../intro.cpp\" line=\"+60\"/>\n+        <source>A new data directory will be created.</source>\n+        <translation>A new data directory will be created.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+17\"/>\n+        <source>Directory already exists. Add &lt;code&gt;%1name&lt;/code&gt; if you intend to create a new directory here.</source>\n+        <translation>Directory already exists. Add &lt;code&gt;%1name&lt;/code&gt; if you intend to create a new directory here.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Path already exists, and is not a directory.</source>\n+        <translation>Path already exists, and is not a directory.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+7\"/>\n+        <source>Cannot create data directory here.</source>\n+        <translation>Cannot create data directory here.</translation>\n+    </message>\n+</context>\n <context>\n     <name>GUIUtil::HelpMessageBox</name>\n     <message>\n         <location filename=\"../guiutil.cpp\" line=\"+493\"/>\n-        <location line=\"+12\"/>\n+        <location line=\"+13\"/>\n         <source>Bitcoin-Qt</source>\n         <translation>Bitcoin-Qt</translation>\n     </message>\n     <message>\n-        <location line=\"-12\"/>\n+        <location line=\"-13\"/>\n         <source>version</source>\n         <translation>version</translation>\n     </message>\n@@ -813,6 +835,59 @@ Address: %4\n         <source>Show splash screen on startup (default: 1)</source>\n         <translation>Show splash screen on startup (default: 1)</translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Choose data directory on startup (default: 0)</source>\n+        <translation>Choose data directory on startup (default: 0)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>Intro</name>\n+    <message>\n+        <location filename=\"../forms/intro.ui\" line=\"+14\"/>\n+        <source>Welcome</source>\n+        <translation>Welcome</translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>Welcome to Bitcoin-Qt.</source>\n+        <translation>Welcome to Bitcoin-Qt.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+26\"/>\n+        <source>As this is the first time the program is launched, you can choose where Bitcoin-Qt will store its data.</source>\n+        <translation>As this is the first time the program is launched, you can choose where Bitcoin-Qt will store its data.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>Bitcoin-Qt will download and store a copy of the Bitcoin block chain. At least %1GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</source>\n+        <translation>Bitcoin-Qt will download and store a copy of the Bitcoin block chain. At least %1GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>Use the default data directory</source>\n+        <translation>Use the default data directory</translation>\n+    </message>\n+    <message>\n+        <location line=\"+7\"/>\n+        <source>Use a custom data directory:</source>\n+        <translation>Use a custom data directory:</translation>\n+    </message>\n+    <message>\n+        <location filename=\"../intro.cpp\" line=\"+100\"/>\n+        <source>Error</source>\n+        <translation>Error</translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>GB of free space available</source>\n+        <translation>GB of free space available</translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>(of %1GB needed)</source>\n+        <translation>(of %1GB needed)</translation>\n+    </message>\n </context>\n <context>\n     <name>OptionsDialog</name>\n@@ -1102,6 +1177,25 @@ Address: %4\n         <translation>Cannot start bitcoin: click-to-pay handler</translation>\n     </message>\n </context>\n+<context>\n+    <name>QObject</name>\n+    <message>\n+        <location filename=\"../bitcoin.cpp\" line=\"+92\"/>\n+        <location filename=\"../intro.cpp\" line=\"-32\"/>\n+        <source>Bitcoin</source>\n+        <translation>Bitcoin</translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Error: Specified data directory &quot;%1&quot; does not exist.</source>\n+        <translation>Error: Specified data directory &quot;%1&quot; does not exist.</translation>\n+    </message>\n+    <message>\n+        <location filename=\"../intro.cpp\" line=\"+1\"/>\n+        <source>Error: Specified data directory &quot;%1&quot; can not be created.</source>\n+        <translation>Error: Specified data directory &quot;%1&quot; can not be created.</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRCodeDialog</name>\n     <message>"
      }
    ]
  },
  {
    "sha": "7c63c6e018adae612852703dd352848d98946cee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzYzYzZlMDE4YWRhZTYxMjg1MjcwM2RkMzUyODQ4ZDk4OTQ2Y2Vl",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2013-07-23T09:12:38Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:39:59Z"
      },
      "message": "Add unittests for multiple ELSEs in a row\n\nIF ELSE ELSE ENDIF is a valid construct; execution or non-execution\ninverts on each ELSE encountered.",
      "tree": {
        "sha": "ca915ff84cc21926708a0359ddc80b77cb2f8cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca915ff84cc21926708a0359ddc80b77cb2f8cdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c63c6e018adae612852703dd352848d98946cee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c63c6e018adae612852703dd352848d98946cee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c63c6e018adae612852703dd352848d98946cee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c63c6e018adae612852703dd352848d98946cee/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84fe45abd6ae526066052817cd63814cdac58a02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fe45abd6ae526066052817cd63814cdac58a02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84fe45abd6ae526066052817cd63814cdac58a02"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 30,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6964d16a7e0f73b1e0242dd8f6b5a0b5aeff0325",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c63c6e018adae612852703dd352848d98946cee/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c63c6e018adae612852703dd352848d98946cee/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=7c63c6e018adae612852703dd352848d98946cee",
        "patch": "@@ -13,7 +13,9 @@\n [\"0\",\"NOP\"],\n [\"1\", \"IF VER ELSE 1 ENDIF\", \"VER non-functional\"],\n [\"0\", \"IF VERIF ELSE 1 ENDIF\", \"VERIF illegal everywhere\"],\n-[\"0\", \"IF VERNOTIF ELSE 1 ENDIF\", \"VERNOT illegal everywhere\"],\n+[\"0\", \"IF ELSE 1 ELSE VERIF ENDIF\", \"VERIF illegal everywhere\"],\n+[\"0\", \"IF VERNOTIF ELSE 1 ENDIF\", \"VERNOTIF illegal everywhere\"],\n+[\"0\", \"IF ELSE 1 ELSE VERNOTIF ENDIF\", \"VERNOTIF illegal everywhere\"],\n \n [\"1 IF\", \"1 ENDIF\", \"IF/ENDIF can't span scriptSig/scriptPubKey\"],\n [\"1 IF 0 ENDIF\", \"1 ENDIF\"],\n@@ -36,6 +38,18 @@\n [\"1 1\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\"],\n [\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\"],\n \n+[\"1\", \"IF RETURN ELSE ELSE 1 ENDIF\", \"Multiple ELSEs\"],\n+[\"1\", \"IF 1 ELSE ELSE RETURN ENDIF\"],\n+\n+[\"1\", \"ENDIF\", \"Malformed IF/ELSE/ENDIF sequence\"],\n+[\"1\", \"ELSE ENDIF\"],\n+[\"1\", \"ENDIF ELSE\"],\n+[\"1\", \"ENDIF ELSE IF\"],\n+[\"1\", \"IF ELSE ENDIF ELSE\"],\n+[\"1\", \"IF ELSE ENDIF ELSE ENDIF\"],\n+[\"1\", \"IF ENDIF ENDIF\"],\n+[\"1\", \"IF ELSE ELSE ENDIF ENDIF\"],\n+\n [\"1\", \"RETURN\"],\n [\"1\", \"DUP IF RETURN ENDIF\"],\n "
      },
      {
        "sha": "cc56a310aea8201bfb775eb26d4f8461b673c1d6",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c63c6e018adae612852703dd352848d98946cee/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c63c6e018adae612852703dd352848d98946cee/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=7c63c6e018adae612852703dd352848d98946cee",
        "patch": "@@ -34,6 +34,21 @@\n [\"1 0\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\"],\n [\"0 1\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\"],\n \n+[\"0\", \"IF 0 ELSE 1 ELSE 0 ENDIF\", \"Multiple ELSE's are valid and executed inverts on each ELSE encountered\"],\n+[\"1\", \"IF 1 ELSE 0 ELSE ENDIF\"],\n+[\"1\", \"IF ELSE 0 ELSE 1 ENDIF\"],\n+[\"1\", \"IF 1 ELSE 0 ELSE 1 ENDIF ADD 2 EQUAL\"],\n+[\"'' 1\", \"IF SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ENDIF 0x14 0x68ca4fec736264c13b859bac43d5173df6871682 EQUAL\"],\n+\n+[\"1\", \"NOTIF 0 ELSE 1 ELSE 0 ENDIF\", \"Multiple ELSE's are valid and execution inverts on each ELSE encountered\"],\n+[\"0\", \"NOTIF 1 ELSE 0 ELSE ENDIF\"],\n+[\"0\", \"NOTIF ELSE 0 ELSE 1 ENDIF\"],\n+[\"0\", \"NOTIF 1 ELSE 0 ELSE 1 ENDIF ADD 2 EQUAL\"],\n+[\"'' 0\", \"NOTIF SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ELSE ELSE SHA1 ENDIF 0x14 0x68ca4fec736264c13b859bac43d5173df6871682 EQUAL\"],\n+\n+[\"0\", \"IF 1 IF RETURN ELSE RETURN ELSE RETURN ENDIF ELSE 1 IF 1 ELSE RETURN ELSE 1 ENDIF ELSE RETURN ENDIF ADD 2 EQUAL\", \"Nested ELSE ELSE\"],\n+[\"1\", \"NOTIF 0 NOTIF RETURN ELSE RETURN ELSE RETURN ENDIF ELSE 0 NOTIF 1 ELSE RETURN ELSE 1 ENDIF ELSE RETURN ENDIF ADD 2 EQUAL\"],\n+\n [\"0\", \"IF RETURN ENDIF 1\", \"RETURN only works if executed\"],\n \n [\"1 1\", \"VERIFY\"],"
      }
    ]
  },
  {
    "sha": "bc6a45b9f75d60e072193915f893d46bdad6af56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzZhNDViOWY3NWQ2MGUwNzIxOTM5MTVmODkzZDQ2YmRhZDZhZjU2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-07-23T15:46:05Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:00Z"
      },
      "message": "Don't use checkpoints and accept nonstd txn on -regtest",
      "tree": {
        "sha": "c031ac0515462c1df136b4b9cf07ee86aaa8ff76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c031ac0515462c1df136b4b9cf07ee86aaa8ff76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc6a45b9f75d60e072193915f893d46bdad6af56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6a45b9f75d60e072193915f893d46bdad6af56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6a45b9f75d60e072193915f893d46bdad6af56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6a45b9f75d60e072193915f893d46bdad6af56/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c63c6e018adae612852703dd352848d98946cee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c63c6e018adae612852703dd352848d98946cee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c63c6e018adae612852703dd352848d98946cee"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0716cfca314ca555ae9721e7b0a8c31035cb011c",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6a45b9f75d60e072193915f893d46bdad6af56/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6a45b9f75d60e072193915f893d46bdad6af56/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=bc6a45b9f75d60e072193915f893d46bdad6af56",
        "patch": "@@ -67,11 +67,24 @@ namespace Checkpoints\n         300\n     };\n \n+    static MapCheckpoints mapCheckpointsRegtest =\n+        boost::assign::map_list_of\n+        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ;\n+    static const CCheckpointData dataRegtest = {\n+        &mapCheckpointsRegtest,\n+        0,\n+        0,\n+        0\n+    };\n+\n     const CCheckpointData &Checkpoints() {\n-        if (TestNet())\n+        if (Params().NetworkID() == CChainParams::TESTNET)\n             return dataTestnet;\n-        else\n+        else if (Params().NetworkID() == CChainParams::MAIN)\n             return data;\n+        else\n+            return dataRegtest;\n     }\n \n     bool CheckBlock(int nHeight, const uint256& hash)"
      },
      {
        "sha": "a98f3fdd193a003014e9b44cabdb6eb738ab52c6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6a45b9f75d60e072193915f893d46bdad6af56/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6a45b9f75d60e072193915f893d46bdad6af56/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bc6a45b9f75d60e072193915f893d46bdad6af56",
        "patch": "@@ -810,9 +810,9 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n     if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n \n-    // Rather not work on nonstandard transactions (unless -testnet)\n+    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (!TestNet() && !IsStandardTx(tx, reason))\n+    if (Params().NetworkID() == CChainParams::MAIN && !IsStandardTx(tx, reason))\n         return error(\"CTxMemPool::accept() : nonstandard transaction: %s\",\n                      reason.c_str());\n \n@@ -888,7 +888,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!TestNet() && !AreInputsStandard(tx, view))\n+        if (Params().NetworkID() == CChainParams::MAIN && !AreInputsStandard(tx, view))\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then"
      }
    ]
  },
  {
    "sha": "aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWZlNGVhYjY1NDcwMTFhOGUwN2YyMDg1NTFkNmYwYWQ3YjZlZTQ2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-07-23T15:51:28Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:01Z"
      },
      "message": "Fix multi-block reorg transaction resurrection",
      "tree": {
        "sha": "e781f15af1f1b27c13967a65d427e1d357e1768f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e781f15af1f1b27c13967a65d427e1d357e1768f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefe4eab6547011a8e07f208551d6f0ad7b6ee46/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc6a45b9f75d60e072193915f893d46bdad6af56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6a45b9f75d60e072193915f893d46bdad6af56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6a45b9f75d60e072193915f893d46bdad6af56"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d957642eb1088a47ff039eac4d70943d69387738",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aefe4eab6547011a8e07f208551d6f0ad7b6ee46/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aefe4eab6547011a8e07f208551d6f0ad7b6ee46/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
        "patch": "@@ -2013,7 +2013,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     }\n \n     // Disconnect shorter branch\n-    vector<CTransaction> vResurrect;\n+    list<CTransaction> vResurrect;\n     BOOST_FOREACH(CBlockIndex* pindex, vDisconnect) {\n         CBlock block;\n         if (!ReadBlockFromDisk(block, pindex))\n@@ -2027,9 +2027,9 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         // Queue memory transactions to resurrect.\n         // We only do this for blocks after the last checkpoint (reorganisation before that\n         // point should only happen with -reindex/-loadblock, or a misbehaving peer.\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        BOOST_REVERSE_FOREACH(const CTransaction& tx, block.vtx)\n             if (!tx.IsCoinBase() && pindex->nHeight > Checkpoints::GetTotalBlocksEstimate())\n-                vResurrect.push_back(tx);\n+                vResurrect.push_front(tx);\n     }\n \n     // Connect longer branch"
      }
    ]
  },
  {
    "sha": "0576de4aef15b85b673c709a09f9eacb0154852d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTc2ZGU0YWVmMTViODViNjczYzcwOWEwOWY5ZWFjYjAxNTQ4NTJk",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-24T07:30:09Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:02Z"
      },
      "message": "exclude CreatePidFile() function on WIN32 as it is unused",
      "tree": {
        "sha": "0f6d74b625ae2f3c6cd181734f6335ad906b820d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f6d74b625ae2f3c6cd181734f6335ad906b820d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0576de4aef15b85b673c709a09f9eacb0154852d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0576de4aef15b85b673c709a09f9eacb0154852d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0576de4aef15b85b673c709a09f9eacb0154852d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0576de4aef15b85b673c709a09f9eacb0154852d/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefe4eab6547011a8e07f208551d6f0ad7b6ee46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aefe4eab6547011a8e07f208551d6f0ad7b6ee46"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be18f9ae833895c92475da43f66b52f3ce8fd9ed",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0576de4aef15b85b673c709a09f9eacb0154852d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0576de4aef15b85b673c709a09f9eacb0154852d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0576de4aef15b85b673c709a09f9eacb0154852d",
        "patch": "@@ -74,7 +74,7 @@ bool AppInit(int argc, char* argv[])\n             int ret = CommandLineRPC(argc, argv);\n             exit(ret);\n         }\n-#if !defined(WIN32)\n+#ifndef WIN32\n         fDaemon = GetBoolArg(\"-daemon\", false);\n         if (fDaemon)\n         {"
      },
      {
        "sha": "00e1174a4f34dd2a7850ac442ca9ea0d96e630a3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0576de4aef15b85b673c709a09f9eacb0154852d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0576de4aef15b85b673c709a09f9eacb0154852d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0576de4aef15b85b673c709a09f9eacb0154852d",
        "patch": "@@ -1118,6 +1118,7 @@ boost::filesystem::path GetPidFile()\n     return pathPidFile;\n }\n \n+#ifndef WIN32\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n {\n     FILE* file = fopen(path.string().c_str(), \"w\");\n@@ -1127,6 +1128,7 @@ void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n         fclose(file);\n     }\n }\n+#endif\n \n bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n {"
      },
      {
        "sha": "1bdc67a1ab9c88b90d4a5612c885d62d18851e95",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0576de4aef15b85b673c709a09f9eacb0154852d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0576de4aef15b85b673c709a09f9eacb0154852d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=0576de4aef15b85b673c709a09f9eacb0154852d",
        "patch": "@@ -208,7 +208,9 @@ boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n boost::filesystem::path GetConfigFile();\n boost::filesystem::path GetPidFile();\n+#ifndef WIN32\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n+#endif\n void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);"
      }
    ]
  },
  {
    "sha": "a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmU1NTE2M2E1ZjFmY2M4ZmZjMWY1NzdjYmIwNjkyYzM3OGI1ZTBm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-24T12:53:45Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:03Z"
      },
      "message": "cleanup compat.h Windows stuff\n\n- remove an unneded include for mswsock.h as we use winsock2.h anyway\n- move typedef u_int SOCKET; into the #ifndef WIN32 part\n- remove typedef int socklen_t;  as this is defined in ws2tcpip.h",
      "tree": {
        "sha": "94fdb0a4f5f711098066f8e04f892bd1c3648bb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94fdb0a4f5f711098066f8e04f892bd1c3648bb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0576de4aef15b85b673c709a09f9eacb0154852d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0576de4aef15b85b673c709a09f9eacb0154852d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0576de4aef15b85b673c709a09f9eacb0154852d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4e98b46c1cf56acc41686b3d6e4a25db28d40308",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef _BITCOIN_COMPAT_H\n-#define _BITCOIN_COMPAT_H 1\n+#define _BITCOIN_COMPAT_H\n \n #ifdef WIN32\n #define _WIN32_WINNT 0x0501\n@@ -13,7 +13,6 @@\n #endif\n #define FD_SETSIZE 1024 // max number of fds in fd_set\n #include <winsock2.h>\n-#include <mswsock.h>\n #include <ws2tcpip.h>\n #else\n #include <sys/types.h>\n@@ -26,12 +25,11 @@\n #include <ifaddrs.h>\n #endif\n \n-typedef u_int SOCKET;\n #ifdef WIN32\n #define MSG_NOSIGNAL        0\n #define MSG_DONTWAIT        0\n-typedef int socklen_t;\n #else\n+typedef u_int SOCKET;\n #include \"errno.h\"\n #define WSAGetLastError()   errno\n #define WSAEINVAL           EINVAL"
      }
    ]
  },
  {
    "sha": "c640fb6c57ac521209e7286818b76afdd0bbd4e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjQwZmI2YzU3YWM1MjEyMDllNzI4NjgxOGI3NmFmZGQwYmJkNGU2",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-24T08:57:03Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:04Z"
      },
      "message": "remove windows.h from crypter.cpp includes\n\n- remove an unneeded windows.h include (comes from allocators.h, which is\n  included in crypter.h)",
      "tree": {
        "sha": "e0214cf8cc64dee96ec573443a9fb6f7a691f3cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0214cf8cc64dee96ec573443a9fb6f7a691f3cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c640fb6c57ac521209e7286818b76afdd0bbd4e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c640fb6c57ac521209e7286818b76afdd0bbd4e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c640fb6c57ac521209e7286818b76afdd0bbd4e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c640fb6c57ac521209e7286818b76afdd0bbd4e6/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2e55163a5f1fcc8ffc1f577cbb0692c378b5e0f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "754de536a90863f5ff19e27cffd0ef46f2190eba",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c640fb6c57ac521209e7286818b76afdd0bbd4e6/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c640fb6c57ac521209e7286818b76afdd0bbd4e6/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=c640fb6c57ac521209e7286818b76afdd0bbd4e6",
        "patch": "@@ -6,9 +6,6 @@\n #include <openssl/evp.h>\n #include <vector>\n #include <string>\n-#ifdef WIN32\n-#include <windows.h>\n-#endif\n \n #include \"crypter.h\"\n "
      }
    ]
  },
  {
    "sha": "f07a22c2198305fa9a7e7a3f595e517c3399e16e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDdhMjJjMjE5ODMwNWZhOWE3ZTdhM2Y1OTVlNTE3YzMzOTllMTZl",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-23T10:00:41Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:05Z"
      },
      "message": "fix possible infinite loop in intro.cpp thread\n\n- it was possible to trigger an infinite loop in FreespaceChecker::check() by\n  simply removing the drive letter on Windows (which leads to an infinite\n  loop in the FreespaceChecker thread)\n- this was caused by not checking if we make progress with\n  parentDir.parent_path()",
      "tree": {
        "sha": "1c2b9de3f8e2d493d2a4002a2c4f17466e0d0a3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c2b9de3f8e2d493d2a4002a2c4f17466e0d0a3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f07a22c2198305fa9a7e7a3f595e517c3399e16e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f07a22c2198305fa9a7e7a3f595e517c3399e16e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f07a22c2198305fa9a7e7a3f595e517c3399e16e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f07a22c2198305fa9a7e7a3f595e517c3399e16e/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c640fb6c57ac521209e7286818b76afdd0bbd4e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c640fb6c57ac521209e7286818b76afdd0bbd4e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c640fb6c57ac521209e7286818b76afdd0bbd4e6"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "944899d3e8009233e33324dece6ef5965ae72661",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f07a22c2198305fa9a7e7a3f595e517c3399e16e/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f07a22c2198305fa9a7e7a3f595e517c3399e16e/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=f07a22c2198305fa9a7e7a3f595e517c3399e16e",
        "patch": "@@ -25,6 +25,7 @@ static const uint64 BLOCK_CHAIN_SIZE = 10LL * GB_BYTES;\n class FreespaceChecker : public QObject\n {\n     Q_OBJECT\n+\n public:\n     FreespaceChecker(Intro *intro);\n \n@@ -61,9 +62,16 @@ void FreespaceChecker::check()\n \n     /* Find first parent that exists, so that fs::space does not fail */\n     fs::path parentDir = dataDir;\n+    fs::path parentDirOld = fs::path();\n     while(parentDir.has_parent_path() && !fs::exists(parentDir))\n     {\n         parentDir = parentDir.parent_path();\n+\n+        /* Check if we make any progress, break if not to prevent an infinite loop here */\n+        if (parentDirOld == parentDir)\n+            break;\n+\n+        parentDirOld = parentDir;\n     }\n \n     try {\n@@ -201,7 +209,7 @@ void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable\n         } else {\n             ui->freeSpace->setStyleSheet(\"\");\n         }\n-        ui->freeSpace->setText(freeString+\".\");\n+        ui->freeSpace->setText(freeString + \".\");\n     }\n     /* Don't allow confirm in ERROR state */\n     ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(status != FreespaceChecker::ST_ERROR);"
      },
      {
        "sha": "788799b7b0c45955dc6c1c6befffc7fd5d18a8db",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f07a22c2198305fa9a7e7a3f595e517c3399e16e/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f07a22c2198305fa9a7e7a3f595e517c3399e16e/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=f07a22c2198305fa9a7e7a3f595e517c3399e16e",
        "patch": "@@ -37,6 +37,7 @@ class Intro : public QDialog\n      * Determine default data directory for operating system.\n      */\n     static QString getDefaultDataDirectory();\n+\n signals:\n     void requestCheck();\n     void stopThread();"
      }
    ]
  },
  {
    "sha": "15f188f8ae13988c0ee54d89ffd5659676ca0150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWYxODhmOGFlMTM5ODhjMGVlNTRkODlmZmQ1NjU5Njc2Y2EwMTUw",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2013-07-27T21:22:42Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:06Z"
      },
      "message": "Fix typo in README.md",
      "tree": {
        "sha": "bc53e4d234f406d746ae298da1eddf72d9d3c595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc53e4d234f406d746ae298da1eddf72d9d3c595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f188f8ae13988c0ee54d89ffd5659676ca0150",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f188f8ae13988c0ee54d89ffd5659676ca0150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15f188f8ae13988c0ee54d89ffd5659676ca0150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f188f8ae13988c0ee54d89ffd5659676ca0150/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f07a22c2198305fa9a7e7a3f595e517c3399e16e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f07a22c2198305fa9a7e7a3f595e517c3399e16e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f07a22c2198305fa9a7e7a3f595e517c3399e16e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd5dd6ddd9408d062154a06bd5470fb2ca4280b9",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f188f8ae13988c0ee54d89ffd5659676ca0150/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f188f8ae13988c0ee54d89ffd5659676ca0150/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=15f188f8ae13988c0ee54d89ffd5659676ca0150",
        "patch": "@@ -15,7 +15,7 @@ out collectively by the network. Bitcoin is also the name of the open source\n software which enables the use of this currency.\n \n For more information, as well as an immediately useable, binary version of\n-the Bitcoin client sofware, see http://www.bitcoin.org.\n+the Bitcoin client software, see http://www.bitcoin.org.\n \n License\n -------"
      }
    ]
  },
  {
    "sha": "d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGM4NmZkNWI1NTEwOGVlZGQ0ZTc0NDZkNzk0MDRiOWU1ZjdkZjNl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-29T00:34:01Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:07Z"
      },
      "message": "Make sure new wallet variables are initialized",
      "tree": {
        "sha": "99d1ded683c00f8f8bf0b53b200af2f01fc72d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99d1ded683c00f8f8bf0b53b200af2f01fc72d31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15f188f8ae13988c0ee54d89ffd5659676ca0150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f188f8ae13988c0ee54d89ffd5659676ca0150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15f188f8ae13988c0ee54d89ffd5659676ca0150"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3474045e32ebb8c26be343a93137c8dd8c8d5224",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
        "patch": "@@ -104,6 +104,8 @@ class CWallet : public CCryptoKeyStore\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = NULL;\n         nOrderPosNext = 0;\n+        nNextResend = 0;\n+        nLastResend = 0;\n     }\n     CWallet(std::string strWalletFileIn)\n     {\n@@ -114,6 +116,8 @@ class CWallet : public CCryptoKeyStore\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = NULL;\n         nOrderPosNext = 0;\n+        nNextResend = 0;\n+        nLastResend = 0;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;"
      }
    ]
  },
  {
    "sha": "c575af35712a085fad53f3576e22e3d110863eb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTc1YWYzNTcxMmEwODVmYWQ1M2YzNTc2ZTIyZTNkMTEwODYzZWI0",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-13T11:14:23Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:08Z"
      },
      "message": "Bitcoin-Qt: save and restore position of debug window\n\n- move the code for saving and restoring window positions from BitcoinGUI\n  to GUIUtil, make it more generic and also use it for saving/restoring\n  debug window positions",
      "tree": {
        "sha": "60d2318227d1ee08c1440108217c09b5b2270134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60d2318227d1ee08c1440108217c09b5b2270134"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c575af35712a085fad53f3576e22e3d110863eb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c575af35712a085fad53f3576e22e3d110863eb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c575af35712a085fad53f3576e22e3d110863eb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c575af35712a085fad53f3576e22e3d110863eb4/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8c86fd5b55108eedd4e7446d79404b9e5f7df3e"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 34,
      "deletions": 30
    },
    "files": [
      {
        "sha": "15541f914d127a2fffe83bc3e64481d37ddbb252",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 26,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c575af35712a085fad53f3576e22e3d110863eb4",
        "patch": "@@ -49,8 +49,6 @@\n #endif\n #include <QMimeData>\n #include <QStyle>\n-#include <QSettings>\n-#include <QDesktopWidget>\n #include <QListWidget>\n \n #include <iostream>\n@@ -68,7 +66,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     rpcConsole(0),\n     prevBlocks(0)\n {\n-    restoreWindowGeometry();\n+    GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n \n #ifndef Q_OS_MAC\n     if (!fIsTestnet)\n@@ -166,7 +164,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n \n BitcoinGUI::~BitcoinGUI()\n {\n-    saveWindowGeometry();\n+    GUIUtil::saveWindowGeometry(\"nWindow\", this);\n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)\n         trayIcon->hide();\n #ifdef Q_OS_MAC\n@@ -425,28 +423,6 @@ void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)\n }\n #endif\n \n-void BitcoinGUI::saveWindowGeometry()\n-{\n-    QSettings settings;\n-    settings.setValue(\"nWindowPos\", pos());\n-    settings.setValue(\"nWindowSize\", size());\n-}\n-\n-void BitcoinGUI::restoreWindowGeometry()\n-{\n-    QSettings settings;\n-    QPoint pos = settings.value(\"nWindowPos\").toPoint();\n-    QSize size = settings.value(\"nWindowSize\", QSize(850, 550)).toSize();\n-    if (!pos.x() && !pos.y())\n-    {\n-        QRect screen = QApplication::desktop()->screenGeometry();\n-        pos.setX((screen.width()-size.width())/2);\n-        pos.setY((screen.height()-size.height())/2);\n-    }\n-    resize(size);\n-    move(pos);\n-}\n-\n void BitcoinGUI::optionsClicked()\n {\n     if(!clientModel || !clientModel->getOptionsModel())"
      },
      {
        "sha": "6b9161539cc0817d725cb2e724da4447f902b3ea",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=c575af35712a085fad53f3576e22e3d110863eb4",
        "patch": "@@ -122,10 +122,6 @@ class BitcoinGUI : public QMainWindow\n     void createTrayIcon(bool fIsTestnet);\n     /** Create system tray menu (or setup the dock menu) */\n     void createTrayIconMenu();\n-    /** Save window size and position */\n-    void saveWindowGeometry();\n-    /** Restore window size and position */\n-    void restoreWindowGeometry();\n \n public slots:\n     /** Set number of connections shown in the UI */"
      },
      {
        "sha": "d51b68e0403159a8e8f1981e830d72c1003c842a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c575af35712a085fad53f3576e22e3d110863eb4",
        "patch": "@@ -24,6 +24,8 @@\n #include <QFileDialog>\n #include <QDesktopServices>\n #include <QThread>\n+#include <QSettings>\n+#include <QDesktopWidget>\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -487,6 +489,29 @@ bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n \n #endif\n \n+void saveWindowGeometry(const QString& strSetting, QWidget *parent)\n+{\n+    QSettings settings;\n+    settings.setValue(strSetting + \"Pos\", parent->pos());\n+    settings.setValue(strSetting + \"Size\", parent->size());\n+}\n+\n+void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize, QWidget *parent)\n+{\n+    QSettings settings;\n+    QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n+    QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n+\n+    if (!pos.x() && !pos.y()) {\n+        QRect screen = QApplication::desktop()->screenGeometry();\n+        pos.setX((screen.width() - size.width()) / 2);\n+        pos.setY((screen.height() - size.height()) / 2);\n+    }\n+\n+    parent->resize(size);\n+    parent->move(pos);\n+}\n+\n HelpMessageBox::HelpMessageBox(QWidget *parent) :\n     QMessageBox(parent)\n {"
      },
      {
        "sha": "ca3e7fe91dbd843f9c5eec6b0e2dbed307fa803e",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=c575af35712a085fad53f3576e22e3d110863eb4",
        "patch": "@@ -96,6 +96,11 @@ namespace GUIUtil\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n \n+    /** Save window size and position */\n+    void saveWindowGeometry(const QString& strSetting, QWidget *parent);\n+    /** Restore window size and position */\n+    void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n+\n     /** Help message for Bitcoin-Qt, shown with --help. */\n     class HelpMessageBox : public QMessageBox\n     {"
      },
      {
        "sha": "8953c3657920e41df26c1446495e4c4b26939057",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c575af35712a085fad53f3576e22e3d110863eb4/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c575af35712a085fad53f3576e22e3d110863eb4",
        "patch": "@@ -187,6 +187,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n     historyPtr(0)\n {\n     ui->setupUi(this);\n+    GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n \n #ifndef Q_OS_MAC\n     ui->openDebugLogfileButton->setIcon(QIcon(\":/icons/export\"));\n@@ -209,6 +210,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n \n RPCConsole::~RPCConsole()\n {\n+    GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n     emit stopExecutor();\n     delete ui;\n }"
      }
    ]
  },
  {
    "sha": "08613209e17414cc09121ad84cf361551c1b01d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODYxMzIwOWUxNzQxNGNjMDkxMjFhZDg0Y2YzNjE1NTFjMWIwMWQ2",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-07-29T14:09:15Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:09Z"
      },
      "message": "fix string in intro.cpp, which is untranslatable on Transifex\n\n- seems the code tags in the original string cause errors, when using the\n  Transifex site for translation",
      "tree": {
        "sha": "c30a9c10e78e46846e0be00646a4987b0b83cc00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c30a9c10e78e46846e0be00646a4987b0b83cc00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08613209e17414cc09121ad84cf361551c1b01d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08613209e17414cc09121ad84cf361551c1b01d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08613209e17414cc09121ad84cf361551c1b01d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08613209e17414cc09121ad84cf361551c1b01d6/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c575af35712a085fad53f3576e22e3d110863eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c575af35712a085fad53f3576e22e3d110863eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c575af35712a085fad53f3576e22e3d110863eb4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "99db141c94e089130725a1118caebb5e74fd2630",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08613209e17414cc09121ad84cf361551c1b01d6/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08613209e17414cc09121ad84cf361551c1b01d6/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=08613209e17414cc09121ad84cf361551c1b01d6",
        "patch": "@@ -80,9 +80,9 @@ void FreespaceChecker::check()\n         {\n             if(fs::is_directory(dataDir))\n             {\n-                QString separator = QDir::toNativeSeparators(\"/\");\n+                QString separator = \"<code>\" + QDir::toNativeSeparators(\"/\") + tr(\"name\") + \"</code>\";\n                 replyStatus = ST_OK;\n-                replyMessage = tr(\"Directory already exists. Add <code>%1name</code> if you intend to create a new directory here.\").arg(separator);\n+                replyMessage = tr(\"Directory already exists. Add %1 if you intend to create a new directory here.\").arg(separator);\n             } else {\n                 replyStatus = ST_ERROR;\n                 replyMessage = tr(\"Path already exists, and is not a directory.\");"
      }
    ]
  },
  {
    "sha": "a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzI1Y2VlNGQyYWNjNDQ4NWM5MjhhYTFlMGFjNWE1MDZiMDBiY2Ey",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-31T04:06:44Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:10Z"
      },
      "message": "Remove #define loop from util.h\n\nReplace the loop macro with while (true). The #define caused\nproblems for Qt.",
      "tree": {
        "sha": "8d7972e91dde21939faceec18ad0b98746077e5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d7972e91dde21939faceec18ad0b98746077e5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08613209e17414cc09121ad84cf361551c1b01d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08613209e17414cc09121ad84cf361551c1b01d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08613209e17414cc09121ad84cf361551c1b01d6"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 17,
      "deletions": 23
    },
    "files": [
      {
        "sha": "7a3e6560abbd7d9c70fdc206aae9646dbc2d01bf",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -414,7 +414,7 @@ int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n int ReadHTTPHeaders(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n {\n     int nLen = 0;\n-    loop\n+    while (true)\n     {\n         string str;\n         std::getline(stream, str);"
      },
      {
        "sha": "275b075a26078473c5e00790dac7646c5ec11aab",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -4697,7 +4697,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n-    try { loop {\n+    try { while (true) {\n         if (Params().NetworkID() != CChainParams::REGTEST) {\n             // Busy-wait for the network to come online so we don't waste time mining\n             // on an obsolete chain. In regtest mode we expect to fly solo.\n@@ -4741,7 +4741,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n         uint256 hashbuf[2];\n         uint256& hash = *alignup<16>(hashbuf);\n-        loop\n+        while (true)\n         {\n             unsigned int nHashesDone = 0;\n             unsigned int nNonceFound;"
      },
      {
        "sha": "4ee1895a80bf8f9b2224b00c0e97a74a0ba003c6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -129,7 +129,7 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n bool RecvLine(SOCKET hSocket, string& strLine)\n {\n     strLine = \"\";\n-    loop\n+    while (true)\n     {\n         char c;\n         int nBytes = recv(hSocket, &c, 1, 0);\n@@ -301,7 +301,7 @@ bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const cha\n     {\n         if (strLine.empty()) // HTTP response is separated from headers by blank line\n         {\n-            loop\n+            while (true)\n             {\n                 if (!RecvLine(hSocket, strLine))\n                 {\n@@ -741,7 +741,7 @@ static list<CNode*> vNodesDisconnected;\n void ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n-    loop\n+    while (true)\n     {\n         //\n         // Disconnect nodes\n@@ -1105,7 +1105,7 @@ void ThreadMapPort()\n         string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n         try {\n-            loop {\n+            while (true) {\n #ifndef UPNPDISCOVER_SUCCESS\n                 /* miniupnpc 1.5 */\n                 r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n@@ -1268,7 +1268,7 @@ void ThreadOpenConnections()\n \n     // Initiate network connections\n     int64 nStart = GetTime();\n-    loop\n+    while (true)\n     {\n         ProcessOneShot();\n \n@@ -1309,7 +1309,7 @@ void ThreadOpenConnections()\n         int64 nANow = GetAdjustedTime();\n \n         int nTries = 0;\n-        loop\n+        while (true)\n         {\n             // use an nUnkBias between 10 (no outgoing connections) and 90 (8 outgoing connections)\n             CAddress addr = addrman.Select(10 + min(nOutbound,8)*10);"
      },
      {
        "sha": "3b98334696a5618987957e21019d95fb7ea0ce13",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -15,7 +15,6 @@\n #include \"splashscreen.h\"\n #include \"intro.h\"\n \n-#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n #include <QApplication>\n #include <QMessageBox>\n #if QT_VERSION < 0x050000"
      },
      {
        "sha": "8ec2f03fad3bd7b525d245e9e7874ceb9416c134",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -28,7 +28,6 @@\n #include \"macdockiconhandler.h\"\n #endif\n \n-#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n #include <QApplication>\n #include <QMenuBar>\n #include <QMenu>"
      },
      {
        "sha": "32131bc39d3abb98d575a5e1644501f79c2087ec",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -7,7 +7,6 @@\n #include \"util.h\"\n #include \"init.h\"\n \n-#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n #include <QApplication>\n #include <QDateTime>\n #include <QDoubleValidator>"
      },
      {
        "sha": "0d31f24a13f6e951972ae5e1b66a98c7ba3c256d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -8,7 +8,6 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n-#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n #include <QApplication>\n #include <QByteArray>\n #include <QDataStream>"
      },
      {
        "sha": "22cf04486b5bb8e8716a53d78d8e345f0b62cd35",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -2,7 +2,6 @@\n #include \"clientversion.h\"\n #include \"util.h\"\n \n-#undef loop /* Todo: ugh, remove this when the #define loop is gone from util.h */\n #include <QApplication>\n #include <QPainter>\n "
      },
      {
        "sha": "5699fbfb6a4ad6ec2b0098890c600db4d5f0b300",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -1163,7 +1163,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         // Compare\n         CScript::const_iterator pc1 = script1.begin();\n         CScript::const_iterator pc2 = script2.begin();\n-        loop\n+        while (true)\n         {\n             if (pc1 == script1.end() && pc2 == script2.end())\n             {"
      },
      {
        "sha": "049e55b7d6b8b32bc4b74a3b583073acb7ddb50a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -311,7 +311,7 @@ string vstrprintf(const char *format, va_list ap)\n     char* p = buffer;\n     int limit = sizeof(buffer);\n     int ret;\n-    loop\n+    while (true)\n     {\n         va_list arg_ptr;\n         va_copy(arg_ptr, ap);\n@@ -371,7 +371,7 @@ void ParseString(const string& str, char c, vector<string>& v)\n         return;\n     string::size_type i1 = 0;\n     string::size_type i2;\n-    loop\n+    while (true)\n     {\n         i2 = str.find(c, i1);\n         if (i2 == str.npos)\n@@ -487,7 +487,7 @@ vector<unsigned char> ParseHex(const char* psz)\n {\n     // convert hex dump to vector\n     vector<unsigned char> vch;\n-    loop\n+    while (true)\n     {\n         while (isspace(*psz))\n             psz++;\n@@ -941,7 +941,7 @@ string DecodeBase32(const string& str)\n \n bool WildcardMatch(const char* psz, const char* mask)\n {\n-    loop\n+    while (true)\n     {\n         switch (*mask)\n         {"
      },
      {
        "sha": "9aea56440602de2bed5cdbc3529ec94aabeae28c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -35,7 +35,6 @@ typedef unsigned long long  uint64;\n static const int64 COIN = 100000000;\n static const int64 CENT = 1000000;\n \n-#define loop                for (;;)\n #define BEGIN(a)            ((char*)&(a))\n #define END(a)              ((char*)&((&(a))[1]))\n #define UBEGIN(a)           ((unsigned char*)&(a))"
      },
      {
        "sha": "88b07c9d76a50048f2824dbf35a024a829180628",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -1194,7 +1194,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n         LOCK2(cs_main, cs_wallet);\n         {\n             nFeeRet = nTransactionFee;\n-            loop\n+            while (true)\n             {\n                 wtxNew.vin.clear();\n                 wtxNew.vout.clear();"
      },
      {
        "sha": "014d8cbe293f933fa884783f876cf06a14316013",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a725cee4d2acc4485c928aa1e0ac5a506b00bca2/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "patch": "@@ -73,7 +73,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     if (!pcursor)\n         throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n-    loop\n+    while (true)\n     {\n         // Read next record\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n@@ -437,7 +437,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n             return DB_CORRUPT;\n         }\n \n-        loop\n+        while (true)\n         {\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);"
      }
    ]
  },
  {
    "sha": "bc65eb98f9bc753d3c4858ac678b0ced55da063a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzY1ZWI5OGY5YmM3NTNkM2M0ODU4YWM2NzhiMGNlZDU1ZGEwNjNh",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-07-31T12:45:49Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:11Z"
      },
      "message": "Minor miner fixes (hey hey it's fun to say)\n\n* Fix UpdateCoins() definition in main.h\n* Remove pwalletMain reference from BitcoinMiner(), as it is passed\n  a wallet argument.",
      "tree": {
        "sha": "ef670ab2a9b132cbf1555cfbfa120956cd8e522a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef670ab2a9b132cbf1555cfbfa120956cd8e522a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc65eb98f9bc753d3c4858ac678b0ced55da063a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc65eb98f9bc753d3c4858ac678b0ced55da063a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc65eb98f9bc753d3c4858ac678b0ced55da063a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc65eb98f9bc753d3c4858ac678b0ced55da063a/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a725cee4d2acc4485c928aa1e0ac5a506b00bca2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a725cee4d2acc4485c928aa1e0ac5a506b00bca2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "440746f5692476b5891869e10209b5800c34936c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc65eb98f9bc753d3c4858ac678b0ced55da063a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc65eb98f9bc753d3c4858ac678b0ced55da063a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bc65eb98f9bc753d3c4858ac678b0ced55da063a",
        "patch": "@@ -4763,7 +4763,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     assert(hash == pblock->GetHash());\n \n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock, *pwalletMain, reservekey);\n+                    CheckWork(pblock, *pwallet, reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n                     // In regression test mode, stop mining after a block is found. This"
      },
      {
        "sha": "a42f7968fdf62bf0345f4cd3edce7399d099a990",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc65eb98f9bc753d3c4858ac678b0ced55da063a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc65eb98f9bc753d3c4858ac678b0ced55da063a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bc65eb98f9bc753d3c4858ac678b0ced55da063a",
        "patch": "@@ -318,7 +318,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                  std::vector<CScriptCheck> *pvChecks = NULL);\n \n // Apply the effects of this transaction on the UTXO set represented by view\n-bool UpdateCoins(const CTransaction& tx, CCoinsViewCache &view, CTxUndo &txundo, int nHeight, const uint256 &txhash);\n+void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash);\n \n // Context-independent validity checks\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);"
      }
    ]
  },
  {
    "sha": "a9db77e0c24babc38288b5f45ce67670587cd2c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWRiNzdlMGMyNGJhYmMzODI4OGI1ZjQ1Y2U2NzY3MDU4N2NkMmM5",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-07-31T13:43:35Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:12Z"
      },
      "message": "Move internal miner/block creation to separate miner.cpp module.\n\nPublic functions referenced elsewhere are added to miner.h.",
      "tree": {
        "sha": "c1e98db229f7cfead45f4047025b2f6fa5a30cf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1e98db229f7cfead45f4047025b2f6fa5a30cf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9db77e0c24babc38288b5f45ce67670587cd2c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9db77e0c24babc38288b5f45ce67670587cd2c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9db77e0c24babc38288b5f45ce67670587cd2c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9db77e0c24babc38288b5f45ce67670587cd2c9/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc65eb98f9bc753d3c4858ac678b0ced55da063a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc65eb98f9bc753d3c4858ac678b0ced55da063a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc65eb98f9bc753d3c4858ac678b0ced55da063a"
      }
    ],
    "stats": {
      "total": 1368,
      "additions": 700,
      "deletions": 668
    },
    "files": [
      {
        "sha": "13c9d4cf2410dbf99efb6034d1f2d76cdca42708",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -157,6 +157,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/serialize.h \\\n     src/core.h \\\n     src/main.h \\\n+    src/miner.h \\\n     src/net.h \\\n     src/key.h \\\n     src/db.h \\\n@@ -240,6 +241,7 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/core.cpp \\\n     src/main.cpp \\\n     src/init.cpp \\\n+    src/miner.cpp \\\n     src/net.cpp \\\n     src/bloom.cpp \\\n     src/checkpoints.cpp \\"
      },
      {
        "sha": "562a70eb3a064e732bb7e1950c7c2db7caf5c745",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -12,6 +12,7 @@\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"util.h\"\n+#include \"miner.h\"\n #include \"ui_interface.h\"\n #include \"checkpoints.h\"\n "
      },
      {
        "sha": "ae9fe05566ea894106ac4bbb8931b29c49f27e1a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 658,
        "changes": 660,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -1244,7 +1244,7 @@ uint256 static GetOrphanRoot(const CBlockHeader* pblock)\n     return pblock->GetHash();\n }\n \n-int64 static GetBlockValue(int nHeight, int64 nFees)\n+int64 GetBlockValue(int nHeight, int64 nFees)\n {\n     int64 nSubsidy = 50 * COIN;\n \n@@ -1284,7 +1284,7 @@ unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n     return bnResult.GetCompact();\n }\n \n-unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {\n     unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n \n@@ -4206,662 +4206,6 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n \n \n \n-\n-\n-\n-\n-\n-\n-\n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// BitcoinMiner\n-//\n-\n-int static FormatHashBlocks(void* pbuffer, unsigned int len)\n-{\n-    unsigned char* pdata = (unsigned char*)pbuffer;\n-    unsigned int blocks = 1 + ((len + 8) / 64);\n-    unsigned char* pend = pdata + 64 * blocks;\n-    memset(pdata + len, 0, 64 * blocks - len);\n-    pdata[len] = 0x80;\n-    unsigned int bits = len * 8;\n-    pend[-1] = (bits >> 0) & 0xff;\n-    pend[-2] = (bits >> 8) & 0xff;\n-    pend[-3] = (bits >> 16) & 0xff;\n-    pend[-4] = (bits >> 24) & 0xff;\n-    return blocks;\n-}\n-\n-static const unsigned int pSHA256InitState[8] =\n-{0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n-\n-void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n-{\n-    SHA256_CTX ctx;\n-    unsigned char data[64];\n-\n-    SHA256_Init(&ctx);\n-\n-    for (int i = 0; i < 16; i++)\n-        ((uint32_t*)data)[i] = ByteReverse(((uint32_t*)pinput)[i]);\n-\n-    for (int i = 0; i < 8; i++)\n-        ctx.h[i] = ((uint32_t*)pinit)[i];\n-\n-    SHA256_Update(&ctx, data, sizeof(data));\n-    for (int i = 0; i < 8; i++)\n-        ((uint32_t*)pstate)[i] = ctx.h[i];\n-}\n-\n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// It operates on big endian data.  Caller does the byte reversing.\n-// All input buffers are 16-byte aligned.  nNonce is usually preserved\n-// between calls, but periodically or if nNonce is 0xffff0000 or above,\n-// the block is rebuilt and nNonce starts over at zero.\n-//\n-unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n-{\n-    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n-    for (;;)\n-    {\n-        // Crypto++ SHA256\n-        // Hash pdata using pmidstate as the starting state into\n-        // pre-formatted buffer phash1, then hash phash1 into phash\n-        nNonce++;\n-        SHA256Transform(phash1, pdata, pmidstate);\n-        SHA256Transform(phash, phash1, pSHA256InitState);\n-\n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((unsigned short*)phash)[14] == 0)\n-            return nNonce;\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-        {\n-            nHashesDone = 0xffff+1;\n-            return (unsigned int) -1;\n-        }\n-        if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n-    }\n-}\n-\n-// Some explaining would be appreciated\n-class COrphan\n-{\n-public:\n-    CTransaction* ptx;\n-    set<uint256> setDependsOn;\n-    double dPriority;\n-    double dFeePerKb;\n-\n-    COrphan(CTransaction* ptxIn)\n-    {\n-        ptx = ptxIn;\n-        dPriority = dFeePerKb = 0;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n-               ptx->GetHash().ToString().c_str(), dPriority, dFeePerKb);\n-        BOOST_FOREACH(uint256 hash, setDependsOn)\n-            printf(\"   setDependsOn %s\\n\", hash.ToString().c_str());\n-    }\n-};\n-\n-\n-uint64 nLastBlockTx = 0;\n-uint64 nLastBlockSize = 0;\n-\n-// We want to sort transactions by priority and fee, so:\n-typedef boost::tuple<double, double, CTransaction*> TxPriority;\n-class TxPriorityCompare\n-{\n-    bool byFee;\n-public:\n-    TxPriorityCompare(bool _byFee) : byFee(_byFee) { }\n-    bool operator()(const TxPriority& a, const TxPriority& b)\n-    {\n-        if (byFee)\n-        {\n-            if (a.get<1>() == b.get<1>())\n-                return a.get<0>() < b.get<0>();\n-            return a.get<1>() < b.get<1>();\n-        }\n-        else\n-        {\n-            if (a.get<0>() == b.get<0>())\n-                return a.get<1>() < b.get<1>();\n-            return a.get<0>() < b.get<0>();\n-        }\n-    }\n-};\n-\n-CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n-{\n-    // Create new block\n-    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n-    if(!pblocktemplate.get())\n-        return NULL;\n-    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n-\n-    // Create coinbase tx\n-    CTransaction txNew;\n-    txNew.vin.resize(1);\n-    txNew.vin[0].prevout.SetNull();\n-    txNew.vout.resize(1);\n-    CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n-        return NULL;\n-    txNew.vout[0].scriptPubKey << pubkey << OP_CHECKSIG;\n-\n-    // Add our coinbase tx as first transaction\n-    pblock->vtx.push_back(txNew);\n-    pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n-\n-    // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", MAX_BLOCK_SIZE_GEN/2);\n-    // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n-\n-    // How much of the block should be dedicated to high-priority transactions,\n-    // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n-    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n-\n-    // Minimum block size you want to create; block will be filled with free transactions\n-    // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", 0);\n-    nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n-\n-    // Collect memory pool transactions into the block\n-    int64 nFees = 0;\n-    {\n-        LOCK2(cs_main, mempool.cs);\n-        CBlockIndex* pindexPrev = pindexBest;\n-        CCoinsViewCache view(*pcoinsTip, true);\n-\n-        // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n-\n-        // This vector will be sorted into a priority queue:\n-        vector<TxPriority> vecPriority;\n-        vecPriority.reserve(mempool.mapTx.size());\n-        for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n-        {\n-            CTransaction& tx = (*mi).second;\n-            if (tx.IsCoinBase() || !IsFinalTx(tx))\n-                continue;\n-\n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n-            int64 nTotalIn = 0;\n-            bool fMissingInputs = false;\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                // Read prev transaction\n-                if (!view.HaveCoins(txin.prevout.hash))\n-                {\n-                    // This should never happen; all transactions in the memory\n-                    // pool should connect to either transactions in the chain\n-                    // or other transactions in the memory pool.\n-                    if (!mempool.mapTx.count(txin.prevout.hash))\n-                    {\n-                        printf(\"ERROR: mempool transaction missing input\\n\");\n-                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n-                        fMissingInputs = true;\n-                        if (porphan)\n-                            vOrphan.pop_back();\n-                        break;\n-                    }\n-\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].vout[txin.prevout.n].nValue;\n-                    continue;\n-                }\n-                const CCoins &coins = view.GetCoins(txin.prevout.hash);\n-\n-                int64 nValueIn = coins.vout[txin.prevout.n].nValue;\n-                nTotalIn += nValueIn;\n-\n-                int nConf = pindexPrev->nHeight - coins.nHeight + 1;\n-\n-                dPriority += (double)nValueIn * nConf;\n-            }\n-            if (fMissingInputs) continue;\n-\n-            // Priority is sum(valuein * age) / txsize\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            dPriority /= nTxSize;\n-\n-            // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n-            // client code rounds up the size to the nearest 1K. That's good, because it gives an\n-            // incentive to create smaller transactions.\n-            double dFeePerKb =  double(nTotalIn-GetValueOut(tx)) / (double(nTxSize)/1000.0);\n-\n-            if (porphan)\n-            {\n-                porphan->dPriority = dPriority;\n-                porphan->dFeePerKb = dFeePerKb;\n-            }\n-            else\n-                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &(*mi).second));\n-        }\n-\n-        // Collect transactions into block\n-        uint64 nBlockSize = 1000;\n-        uint64 nBlockTx = 0;\n-        int nBlockSigOps = 100;\n-        bool fSortedByFee = (nBlockPrioritySize <= 0);\n-\n-        TxPriorityCompare comparer(fSortedByFee);\n-        std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-\n-        while (!vecPriority.empty())\n-        {\n-            // Take highest priority transaction off the priority queue:\n-            double dPriority = vecPriority.front().get<0>();\n-            double dFeePerKb = vecPriority.front().get<1>();\n-            CTransaction& tx = *(vecPriority.front().get<2>());\n-\n-            std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-            vecPriority.pop_back();\n-\n-            // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            if (nBlockSize + nTxSize >= nBlockMaxSize)\n-                continue;\n-\n-            // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n-\n-            // Skip free transactions if we're past the minimum block size:\n-            if (fSortedByFee && (dFeePerKb < CTransaction::nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n-                continue;\n-\n-            // Prioritize by fee once past the priority size or we run out of high-priority\n-            // transactions:\n-            if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n-            {\n-                fSortedByFee = true;\n-                comparer = TxPriorityCompare(fSortedByFee);\n-                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-            }\n-\n-            if (!view.HaveInputs(tx))\n-                continue;\n-\n-            int64 nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n-\n-            nTxSigOps += GetP2SHSigOpCount(tx, view);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n-\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, SCRIPT_VERIFY_P2SH))\n-                continue;\n-\n-            CTxUndo txundo;\n-            uint256 hash = tx.GetHash();\n-            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1, hash);\n-\n-            // Added\n-            pblock->vtx.push_back(tx);\n-            pblocktemplate->vTxFees.push_back(nTxFees);\n-            pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n-            nBlockSize += nTxSize;\n-            ++nBlockTx;\n-            nBlockSigOps += nTxSigOps;\n-            nFees += nTxFees;\n-\n-            if (fPrintPriority)\n-            {\n-                printf(\"priority %.1f feeperkb %.1f txid %s\\n\",\n-                       dPriority, dFeePerKb, tx.GetHash().ToString().c_str());\n-            }\n-\n-            // Add transactions that depend on this one to the priority queue\n-            if (mapDependers.count(hash))\n-            {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n-                {\n-                    if (!porphan->setDependsOn.empty())\n-                    {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                        {\n-                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->dFeePerKb, porphan->ptx));\n-                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        nLastBlockTx = nBlockTx;\n-        nLastBlockSize = nBlockSize;\n-        printf(\"CreateNewBlock(): total size %\"PRI64u\"\\n\", nBlockSize);\n-\n-        pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n-        pblocktemplate->vTxFees[0] = -nFees;\n-\n-        // Fill in header\n-        pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(*pblock, pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n-        pblock->nNonce         = 0;\n-        pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n-        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n-\n-        CBlockIndex indexDummy(*pblock);\n-        indexDummy.pprev = pindexPrev;\n-        indexDummy.nHeight = pindexPrev->nHeight + 1;\n-        CCoinsViewCache viewNew(*pcoinsTip, true);\n-        CValidationState state;\n-        if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n-            throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n-    }\n-\n-    return pblocktemplate.release();\n-}\n-\n-\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n-{\n-    // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n-    {\n-        nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n-    }\n-    ++nExtraNonce;\n-    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n-    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n-    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n-\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-}\n-\n-\n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n-{\n-    //\n-    // Pre-build hash buffers\n-    //\n-    struct\n-    {\n-        struct unnamed2\n-        {\n-            int nVersion;\n-            uint256 hashPrevBlock;\n-            uint256 hashMerkleRoot;\n-            unsigned int nTime;\n-            unsigned int nBits;\n-            unsigned int nNonce;\n-        }\n-        block;\n-        unsigned char pchPadding0[64];\n-        uint256 hash1;\n-        unsigned char pchPadding1[64];\n-    }\n-    tmp;\n-    memset(&tmp, 0, sizeof(tmp));\n-\n-    tmp.block.nVersion       = pblock->nVersion;\n-    tmp.block.hashPrevBlock  = pblock->hashPrevBlock;\n-    tmp.block.hashMerkleRoot = pblock->hashMerkleRoot;\n-    tmp.block.nTime          = pblock->nTime;\n-    tmp.block.nBits          = pblock->nBits;\n-    tmp.block.nNonce         = pblock->nNonce;\n-\n-    FormatHashBlocks(&tmp.block, sizeof(tmp.block));\n-    FormatHashBlocks(&tmp.hash1, sizeof(tmp.hash1));\n-\n-    // Byte swap all the input buffer\n-    for (unsigned int i = 0; i < sizeof(tmp)/4; i++)\n-        ((unsigned int*)&tmp)[i] = ByteReverse(((unsigned int*)&tmp)[i]);\n-\n-    // Precalc the first half of the first hash, which stays constant\n-    SHA256Transform(pmidstate, &tmp.block, pSHA256InitState);\n-\n-    memcpy(pdata, &tmp.block, 128);\n-    memcpy(phash1, &tmp.hash1, 64);\n-}\n-\n-\n-bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n-{\n-    uint256 hash = pblock->GetHash();\n-    uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-\n-    if (hash > hashTarget)\n-        return false;\n-\n-    //// debug print\n-    printf(\"BitcoinMiner:\\n\");\n-    printf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());\n-    pblock->print();\n-    printf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue).c_str());\n-\n-    // Found a solution\n-    {\n-        LOCK(cs_main);\n-        if (pblock->hashPrevBlock != hashBestChain)\n-            return error(\"BitcoinMiner : generated block is stale\");\n-\n-        // Remove key from key pool\n-        reservekey.KeepKey();\n-\n-        // Track how many getdata requests this block gets\n-        {\n-            LOCK(wallet.cs_wallet);\n-            wallet.mapRequestCount[pblock->GetHash()] = 0;\n-        }\n-\n-        // Process this block the same as if we had received it from another node\n-        CValidationState state;\n-        if (!ProcessBlock(state, NULL, pblock))\n-            return error(\"BitcoinMiner : ProcessBlock, block not accepted\");\n-    }\n-\n-    return true;\n-}\n-\n-void static BitcoinMiner(CWallet *pwallet)\n-{\n-    printf(\"BitcoinMiner started\\n\");\n-    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-    RenameThread(\"bitcoin-miner\");\n-\n-    // Each thread has its own key and counter\n-    CReserveKey reservekey(pwallet);\n-    unsigned int nExtraNonce = 0;\n-\n-    try { while (true) {\n-        if (Params().NetworkID() != CChainParams::REGTEST) {\n-            // Busy-wait for the network to come online so we don't waste time mining\n-            // on an obsolete chain. In regtest mode we expect to fly solo.\n-            while (vNodes.empty())\n-                MilliSleep(1000);\n-        }\n-\n-        //\n-        // Create new block\n-        //\n-        unsigned int nTransactionsUpdatedLast = nTransactionsUpdated;\n-        CBlockIndex* pindexPrev = pindexBest;\n-\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(reservekey));\n-        if (!pblocktemplate.get())\n-            return;\n-        CBlock *pblock = &pblocktemplate->block;\n-        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n-\n-        printf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n-               ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n-\n-        //\n-        // Pre-build hash buffers\n-        //\n-        char pmidstatebuf[32+16]; char* pmidstate = alignup<16>(pmidstatebuf);\n-        char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n-        char phash1buf[64+16];    char* phash1    = alignup<16>(phash1buf);\n-\n-        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n-\n-        unsigned int& nBlockTime = *(unsigned int*)(pdata + 64 + 4);\n-        unsigned int& nBlockBits = *(unsigned int*)(pdata + 64 + 8);\n-        unsigned int& nBlockNonce = *(unsigned int*)(pdata + 64 + 12);\n-\n-\n-        //\n-        // Search\n-        //\n-        int64 nStart = GetTime();\n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-        uint256 hashbuf[2];\n-        uint256& hash = *alignup<16>(hashbuf);\n-        while (true)\n-        {\n-            unsigned int nHashesDone = 0;\n-            unsigned int nNonceFound;\n-\n-            // Crypto++ SHA256\n-            nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n-                                            (char*)&hash, nHashesDone);\n-\n-            // Check if something found\n-            if (nNonceFound != (unsigned int) -1)\n-            {\n-                for (unsigned int i = 0; i < sizeof(hash)/4; i++)\n-                    ((unsigned int*)&hash)[i] = ByteReverse(((unsigned int*)&hash)[i]);\n-\n-                if (hash <= hashTarget)\n-                {\n-                    // Found a solution\n-                    pblock->nNonce = ByteReverse(nNonceFound);\n-                    assert(hash == pblock->GetHash());\n-\n-                    SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock, *pwallet, reservekey);\n-                    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-\n-                    // In regression test mode, stop mining after a block is found. This\n-                    // allows developers to controllably generate a block on demand.\n-                    if (Params().NetworkID() == CChainParams::REGTEST)\n-                        throw boost::thread_interrupted();\n-\n-                    break;\n-                }\n-            }\n-\n-            // Meter hashes/sec\n-            static int64 nHashCounter;\n-            if (nHPSTimerStart == 0)\n-            {\n-                nHPSTimerStart = GetTimeMillis();\n-                nHashCounter = 0;\n-            }\n-            else\n-                nHashCounter += nHashesDone;\n-            if (GetTimeMillis() - nHPSTimerStart > 4000)\n-            {\n-                static CCriticalSection cs;\n-                {\n-                    LOCK(cs);\n-                    if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                    {\n-                        dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                        nHPSTimerStart = GetTimeMillis();\n-                        nHashCounter = 0;\n-                        static int64 nLogTime;\n-                        if (GetTime() - nLogTime > 30 * 60)\n-                        {\n-                            nLogTime = GetTime();\n-                            printf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                        }\n-                    }\n-                }\n-            }\n-\n-            // Check for stop or if block needs to be rebuilt\n-            boost::this_thread::interruption_point();\n-            if (vNodes.empty() && Params().NetworkID() != CChainParams::REGTEST)\n-                break;\n-            if (nBlockNonce >= 0xffff0000)\n-                break;\n-            if (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n-                break;\n-            if (pindexPrev != pindexBest)\n-                break;\n-\n-            // Update nTime every few seconds\n-            UpdateTime(*pblock, pindexPrev);\n-            nBlockTime = ByteReverse(pblock->nTime);\n-            if (TestNet())\n-            {\n-                // Changing pblock->nTime can change work required on testnet:\n-                nBlockBits = ByteReverse(pblock->nBits);\n-                hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-            }\n-        }\n-    } }\n-    catch (boost::thread_interrupted)\n-    {\n-        printf(\"BitcoinMiner terminated\\n\");\n-        throw;\n-    }\n-}\n-\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n-{\n-    static boost::thread_group* minerThreads = NULL;\n-\n-    int nThreads = GetArg(\"-genproclimit\", -1);\n-    if (nThreads < 0) {\n-        if (Params().NetworkID() == CChainParams::REGTEST)\n-            nThreads = 1;\n-        else\n-            nThreads = boost::thread::hardware_concurrency();\n-    }\n-\n-    if (minerThreads != NULL)\n-    {\n-        minerThreads->interrupt_all();\n-        delete minerThreads;\n-        minerThreads = NULL;\n-    }\n-\n-    if (nThreads == 0 || !fGenerate)\n-        return;\n-\n-    minerThreads = new boost::thread_group();\n-    for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n-}\n-\n-\n-\n class CMainCleanup\n {\n public:"
      },
      {
        "sha": "cb0ee1aaa85ede7b5107d0f3f4c960dc13a07bba",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -159,16 +159,6 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n-/** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n-/** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(CReserveKey& reservekey);\n-/** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-/** Do mining precalculation */\n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n-/** Check mined block */\n-bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n /** Calculate the minimum amount of work a received block needs, without knowing its direct parent */\n@@ -185,6 +175,8 @@ bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, b\n bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew);\n /** Find the best known block, and make it the tip of the block chain */\n bool ConnectBestBlock(CValidationState &state);\n+int64 GetBlockValue(int nHeight, int64 nFees);\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n \n void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev);\n "
      },
      {
        "sha": "51830f2342c26880f5118bee8cf46bb6614a974a",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -75,6 +75,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/core.o \\\n     obj/main.o \\\n+    obj/miner.o \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\"
      },
      {
        "sha": "464f69b1c9e654036791b1e0b769a2173a5db008",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -83,6 +83,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/core.o \\\n     obj/main.o \\\n+    obj/miner.o \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\"
      },
      {
        "sha": "ee364f5c4a1d6697a0ec8290218301c9a090d064",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -86,6 +86,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/core.o \\\n     obj/main.o \\\n+    obj/miner.o \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\"
      },
      {
        "sha": "e00db09a33b2b25019ad0695f0b8dc1a68b36d49",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -125,6 +125,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/core.o \\\n     obj/main.o \\\n+    obj/miner.o \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\"
      },
      {
        "sha": "e50c0b576df0d62f56828680d7975f1a0cbb62c4",
        "filename": "src/miner.cpp",
        "status": "added",
        "additions": 663,
        "deletions": 0,
        "changes": 663,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -0,0 +1,663 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"core.h\"\n+#include \"wallet.h\"\n+#include \"miner.h\"\n+#include \"main.h\"\n+\n+\n+\n+\n+\n+\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// BitcoinMiner\n+//\n+\n+int static FormatHashBlocks(void* pbuffer, unsigned int len)\n+{\n+    unsigned char* pdata = (unsigned char*)pbuffer;\n+    unsigned int blocks = 1 + ((len + 8) / 64);\n+    unsigned char* pend = pdata + 64 * blocks;\n+    memset(pdata + len, 0, 64 * blocks - len);\n+    pdata[len] = 0x80;\n+    unsigned int bits = len * 8;\n+    pend[-1] = (bits >> 0) & 0xff;\n+    pend[-2] = (bits >> 8) & 0xff;\n+    pend[-3] = (bits >> 16) & 0xff;\n+    pend[-4] = (bits >> 24) & 0xff;\n+    return blocks;\n+}\n+\n+static const unsigned int pSHA256InitState[8] =\n+{0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n+\n+void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n+{\n+    SHA256_CTX ctx;\n+    unsigned char data[64];\n+\n+    SHA256_Init(&ctx);\n+\n+    for (int i = 0; i < 16; i++)\n+        ((uint32_t*)data)[i] = ByteReverse(((uint32_t*)pinput)[i]);\n+\n+    for (int i = 0; i < 8; i++)\n+        ctx.h[i] = ((uint32_t*)pinit)[i];\n+\n+    SHA256_Update(&ctx, data, sizeof(data));\n+    for (int i = 0; i < 8; i++)\n+        ((uint32_t*)pstate)[i] = ctx.h[i];\n+}\n+\n+//\n+// ScanHash scans nonces looking for a hash with at least some zero bits.\n+// It operates on big endian data.  Caller does the byte reversing.\n+// All input buffers are 16-byte aligned.  nNonce is usually preserved\n+// between calls, but periodically or if nNonce is 0xffff0000 or above,\n+// the block is rebuilt and nNonce starts over at zero.\n+//\n+unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n+{\n+    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n+    for (;;)\n+    {\n+        // Crypto++ SHA256\n+        // Hash pdata using pmidstate as the starting state into\n+        // pre-formatted buffer phash1, then hash phash1 into phash\n+        nNonce++;\n+        SHA256Transform(phash1, pdata, pmidstate);\n+        SHA256Transform(phash, phash1, pSHA256InitState);\n+\n+        // Return the nonce if the hash has at least some zero bits,\n+        // caller will check if it has enough to reach the target\n+        if (((unsigned short*)phash)[14] == 0)\n+            return nNonce;\n+\n+        // If nothing found after trying for a while, return -1\n+        if ((nNonce & 0xffff) == 0)\n+        {\n+            nHashesDone = 0xffff+1;\n+            return (unsigned int) -1;\n+        }\n+        if ((nNonce & 0xfff) == 0)\n+            boost::this_thread::interruption_point();\n+    }\n+}\n+\n+// Some explaining would be appreciated\n+class COrphan\n+{\n+public:\n+    CTransaction* ptx;\n+    set<uint256> setDependsOn;\n+    double dPriority;\n+    double dFeePerKb;\n+\n+    COrphan(CTransaction* ptxIn)\n+    {\n+        ptx = ptxIn;\n+        dPriority = dFeePerKb = 0;\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n+               ptx->GetHash().ToString().c_str(), dPriority, dFeePerKb);\n+        BOOST_FOREACH(uint256 hash, setDependsOn)\n+            printf(\"   setDependsOn %s\\n\", hash.ToString().c_str());\n+    }\n+};\n+\n+\n+uint64 nLastBlockTx = 0;\n+uint64 nLastBlockSize = 0;\n+\n+// We want to sort transactions by priority and fee, so:\n+typedef boost::tuple<double, double, CTransaction*> TxPriority;\n+class TxPriorityCompare\n+{\n+    bool byFee;\n+public:\n+    TxPriorityCompare(bool _byFee) : byFee(_byFee) { }\n+    bool operator()(const TxPriority& a, const TxPriority& b)\n+    {\n+        if (byFee)\n+        {\n+            if (a.get<1>() == b.get<1>())\n+                return a.get<0>() < b.get<0>();\n+            return a.get<1>() < b.get<1>();\n+        }\n+        else\n+        {\n+            if (a.get<0>() == b.get<0>())\n+                return a.get<1>() < b.get<1>();\n+            return a.get<0>() < b.get<0>();\n+        }\n+    }\n+};\n+\n+CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n+{\n+    // Create new block\n+    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n+    if(!pblocktemplate.get())\n+        return NULL;\n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Create coinbase tx\n+    CTransaction txNew;\n+    txNew.vin.resize(1);\n+    txNew.vin[0].prevout.SetNull();\n+    txNew.vout.resize(1);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey))\n+        return NULL;\n+    txNew.vout[0].scriptPubKey << pubkey << OP_CHECKSIG;\n+\n+    // Add our coinbase tx as first transaction\n+    pblock->vtx.push_back(txNew);\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n+\n+    // Largest block you're willing to create:\n+    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", MAX_BLOCK_SIZE_GEN/2);\n+    // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+\n+    // How much of the block should be dedicated to high-priority transactions,\n+    // included regardless of the fees they pay\n+    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n+    nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n+\n+    // Minimum block size you want to create; block will be filled with free transactions\n+    // until there are no more or the block reaches this size:\n+    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", 0);\n+    nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n+\n+    // Collect memory pool transactions into the block\n+    int64 nFees = 0;\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CBlockIndex* pindexPrev = pindexBest;\n+        CCoinsViewCache view(*pcoinsTip, true);\n+\n+        // Priority order to process transactions\n+        list<COrphan> vOrphan; // list memory doesn't move\n+        map<uint256, vector<COrphan*> > mapDependers;\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n+\n+        // This vector will be sorted into a priority queue:\n+        vector<TxPriority> vecPriority;\n+        vecPriority.reserve(mempool.mapTx.size());\n+        for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n+        {\n+            CTransaction& tx = (*mi).second;\n+            if (tx.IsCoinBase() || !IsFinalTx(tx))\n+                continue;\n+\n+            COrphan* porphan = NULL;\n+            double dPriority = 0;\n+            int64 nTotalIn = 0;\n+            bool fMissingInputs = false;\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            {\n+                // Read prev transaction\n+                if (!view.HaveCoins(txin.prevout.hash))\n+                {\n+                    // This should never happen; all transactions in the memory\n+                    // pool should connect to either transactions in the chain\n+                    // or other transactions in the memory pool.\n+                    if (!mempool.mapTx.count(txin.prevout.hash))\n+                    {\n+                        printf(\"ERROR: mempool transaction missing input\\n\");\n+                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n+                        fMissingInputs = true;\n+                        if (porphan)\n+                            vOrphan.pop_back();\n+                        break;\n+                    }\n+\n+                    // Has to wait for dependencies\n+                    if (!porphan)\n+                    {\n+                        // Use list for automatic deletion\n+                        vOrphan.push_back(COrphan(&tx));\n+                        porphan = &vOrphan.back();\n+                    }\n+                    mapDependers[txin.prevout.hash].push_back(porphan);\n+                    porphan->setDependsOn.insert(txin.prevout.hash);\n+                    nTotalIn += mempool.mapTx[txin.prevout.hash].vout[txin.prevout.n].nValue;\n+                    continue;\n+                }\n+                const CCoins &coins = view.GetCoins(txin.prevout.hash);\n+\n+                int64 nValueIn = coins.vout[txin.prevout.n].nValue;\n+                nTotalIn += nValueIn;\n+\n+                int nConf = pindexPrev->nHeight - coins.nHeight + 1;\n+\n+                dPriority += (double)nValueIn * nConf;\n+            }\n+            if (fMissingInputs) continue;\n+\n+            // Priority is sum(valuein * age) / txsize\n+            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+            dPriority /= nTxSize;\n+\n+            // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n+            // client code rounds up the size to the nearest 1K. That's good, because it gives an\n+            // incentive to create smaller transactions.\n+            double dFeePerKb =  double(nTotalIn-GetValueOut(tx)) / (double(nTxSize)/1000.0);\n+\n+            if (porphan)\n+            {\n+                porphan->dPriority = dPriority;\n+                porphan->dFeePerKb = dFeePerKb;\n+            }\n+            else\n+                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &(*mi).second));\n+        }\n+\n+        // Collect transactions into block\n+        uint64 nBlockSize = 1000;\n+        uint64 nBlockTx = 0;\n+        int nBlockSigOps = 100;\n+        bool fSortedByFee = (nBlockPrioritySize <= 0);\n+\n+        TxPriorityCompare comparer(fSortedByFee);\n+        std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+\n+        while (!vecPriority.empty())\n+        {\n+            // Take highest priority transaction off the priority queue:\n+            double dPriority = vecPriority.front().get<0>();\n+            double dFeePerKb = vecPriority.front().get<1>();\n+            CTransaction& tx = *(vecPriority.front().get<2>());\n+\n+            std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+            vecPriority.pop_back();\n+\n+            // Size limits\n+            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+            if (nBlockSize + nTxSize >= nBlockMaxSize)\n+                continue;\n+\n+            // Legacy limits on sigOps:\n+            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+                continue;\n+\n+            // Skip free transactions if we're past the minimum block size:\n+            if (fSortedByFee && (dFeePerKb < CTransaction::nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n+                continue;\n+\n+            // Prioritize by fee once past the priority size or we run out of high-priority\n+            // transactions:\n+            if (!fSortedByFee &&\n+                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n+            {\n+                fSortedByFee = true;\n+                comparer = TxPriorityCompare(fSortedByFee);\n+                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+            }\n+\n+            if (!view.HaveInputs(tx))\n+                continue;\n+\n+            int64 nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n+\n+            nTxSigOps += GetP2SHSigOpCount(tx, view);\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+                continue;\n+\n+            CValidationState state;\n+            if (!CheckInputs(tx, state, view, true, SCRIPT_VERIFY_P2SH))\n+                continue;\n+\n+            CTxUndo txundo;\n+            uint256 hash = tx.GetHash();\n+            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1, hash);\n+\n+            // Added\n+            pblock->vtx.push_back(tx);\n+            pblocktemplate->vTxFees.push_back(nTxFees);\n+            pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n+            nBlockSize += nTxSize;\n+            ++nBlockTx;\n+            nBlockSigOps += nTxSigOps;\n+            nFees += nTxFees;\n+\n+            if (fPrintPriority)\n+            {\n+                printf(\"priority %.1f feeperkb %.1f txid %s\\n\",\n+                       dPriority, dFeePerKb, tx.GetHash().ToString().c_str());\n+            }\n+\n+            // Add transactions that depend on this one to the priority queue\n+            if (mapDependers.count(hash))\n+            {\n+                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n+                {\n+                    if (!porphan->setDependsOn.empty())\n+                    {\n+                        porphan->setDependsOn.erase(hash);\n+                        if (porphan->setDependsOn.empty())\n+                        {\n+                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->dFeePerKb, porphan->ptx));\n+                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        nLastBlockTx = nBlockTx;\n+        nLastBlockSize = nBlockSize;\n+        printf(\"CreateNewBlock(): total size %\"PRI64u\"\\n\", nBlockSize);\n+\n+        pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+        pblocktemplate->vTxFees[0] = -nFees;\n+\n+        // Fill in header\n+        pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n+        UpdateTime(*pblock, pindexPrev);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nNonce         = 0;\n+        pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n+        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+\n+        CBlockIndex indexDummy(*pblock);\n+        indexDummy.pprev = pindexPrev;\n+        indexDummy.nHeight = pindexPrev->nHeight + 1;\n+        CCoinsViewCache viewNew(*pcoinsTip, true);\n+        CValidationState state;\n+        if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n+            throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n+    }\n+\n+    return pblocktemplate.release();\n+}\n+\n+\n+void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+{\n+    // Update nExtraNonce\n+    static uint256 hashPrevBlock;\n+    if (hashPrevBlock != pblock->hashPrevBlock)\n+    {\n+        nExtraNonce = 0;\n+        hashPrevBlock = pblock->hashPrevBlock;\n+    }\n+    ++nExtraNonce;\n+    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n+    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n+    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n+\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+\n+void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n+{\n+    //\n+    // Pre-build hash buffers\n+    //\n+    struct\n+    {\n+        struct unnamed2\n+        {\n+            int nVersion;\n+            uint256 hashPrevBlock;\n+            uint256 hashMerkleRoot;\n+            unsigned int nTime;\n+            unsigned int nBits;\n+            unsigned int nNonce;\n+        }\n+        block;\n+        unsigned char pchPadding0[64];\n+        uint256 hash1;\n+        unsigned char pchPadding1[64];\n+    }\n+    tmp;\n+    memset(&tmp, 0, sizeof(tmp));\n+\n+    tmp.block.nVersion       = pblock->nVersion;\n+    tmp.block.hashPrevBlock  = pblock->hashPrevBlock;\n+    tmp.block.hashMerkleRoot = pblock->hashMerkleRoot;\n+    tmp.block.nTime          = pblock->nTime;\n+    tmp.block.nBits          = pblock->nBits;\n+    tmp.block.nNonce         = pblock->nNonce;\n+\n+    FormatHashBlocks(&tmp.block, sizeof(tmp.block));\n+    FormatHashBlocks(&tmp.hash1, sizeof(tmp.hash1));\n+\n+    // Byte swap all the input buffer\n+    for (unsigned int i = 0; i < sizeof(tmp)/4; i++)\n+        ((unsigned int*)&tmp)[i] = ByteReverse(((unsigned int*)&tmp)[i]);\n+\n+    // Precalc the first half of the first hash, which stays constant\n+    SHA256Transform(pmidstate, &tmp.block, pSHA256InitState);\n+\n+    memcpy(pdata, &tmp.block, 128);\n+    memcpy(phash1, &tmp.hash1, 64);\n+}\n+\n+\n+bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+{\n+    uint256 hash = pblock->GetHash();\n+    uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+\n+    if (hash > hashTarget)\n+        return false;\n+\n+    //// debug print\n+    printf(\"BitcoinMiner:\\n\");\n+    printf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());\n+    pblock->print();\n+    printf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue).c_str());\n+\n+    // Found a solution\n+    {\n+        LOCK(cs_main);\n+        if (pblock->hashPrevBlock != hashBestChain)\n+            return error(\"BitcoinMiner : generated block is stale\");\n+\n+        // Remove key from key pool\n+        reservekey.KeepKey();\n+\n+        // Track how many getdata requests this block gets\n+        {\n+            LOCK(wallet.cs_wallet);\n+            wallet.mapRequestCount[pblock->GetHash()] = 0;\n+        }\n+\n+        // Process this block the same as if we had received it from another node\n+        CValidationState state;\n+        if (!ProcessBlock(state, NULL, pblock))\n+            return error(\"BitcoinMiner : ProcessBlock, block not accepted\");\n+    }\n+\n+    return true;\n+}\n+\n+void static BitcoinMiner(CWallet *pwallet)\n+{\n+    printf(\"BitcoinMiner started\\n\");\n+    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+    RenameThread(\"bitcoin-miner\");\n+\n+    // Each thread has its own key and counter\n+    CReserveKey reservekey(pwallet);\n+    unsigned int nExtraNonce = 0;\n+\n+    try { while (true) {\n+        if (Params().NetworkID() != CChainParams::REGTEST) {\n+            // Busy-wait for the network to come online so we don't waste time mining\n+            // on an obsolete chain. In regtest mode we expect to fly solo.\n+            while (vNodes.empty())\n+                MilliSleep(1000);\n+        }\n+\n+        //\n+        // Create new block\n+        //\n+        unsigned int nTransactionsUpdatedLast = nTransactionsUpdated;\n+        CBlockIndex* pindexPrev = pindexBest;\n+\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(reservekey));\n+        if (!pblocktemplate.get())\n+            return;\n+        CBlock *pblock = &pblocktemplate->block;\n+        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n+\n+        printf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n+               ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n+\n+        //\n+        // Pre-build hash buffers\n+        //\n+        char pmidstatebuf[32+16]; char* pmidstate = alignup<16>(pmidstatebuf);\n+        char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n+        char phash1buf[64+16];    char* phash1    = alignup<16>(phash1buf);\n+\n+        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n+\n+        unsigned int& nBlockTime = *(unsigned int*)(pdata + 64 + 4);\n+        unsigned int& nBlockBits = *(unsigned int*)(pdata + 64 + 8);\n+        unsigned int& nBlockNonce = *(unsigned int*)(pdata + 64 + 12);\n+\n+\n+        //\n+        // Search\n+        //\n+        int64 nStart = GetTime();\n+        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+        uint256 hashbuf[2];\n+        uint256& hash = *alignup<16>(hashbuf);\n+        while (true)\n+        {\n+            unsigned int nHashesDone = 0;\n+            unsigned int nNonceFound;\n+\n+            // Crypto++ SHA256\n+            nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n+                                            (char*)&hash, nHashesDone);\n+\n+            // Check if something found\n+            if (nNonceFound != (unsigned int) -1)\n+            {\n+                for (unsigned int i = 0; i < sizeof(hash)/4; i++)\n+                    ((unsigned int*)&hash)[i] = ByteReverse(((unsigned int*)&hash)[i]);\n+\n+                if (hash <= hashTarget)\n+                {\n+                    // Found a solution\n+                    pblock->nNonce = ByteReverse(nNonceFound);\n+                    assert(hash == pblock->GetHash());\n+\n+                    SetThreadPriority(THREAD_PRIORITY_NORMAL);\n+                    CheckWork(pblock, *pwallet, reservekey);\n+                    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+\n+                    // In regression test mode, stop mining after a block is found. This\n+                    // allows developers to controllably generate a block on demand.\n+                    if (Params().NetworkID() == CChainParams::REGTEST)\n+                        throw boost::thread_interrupted();\n+\n+                    break;\n+                }\n+            }\n+\n+            // Meter hashes/sec\n+            static int64 nHashCounter;\n+            if (nHPSTimerStart == 0)\n+            {\n+                nHPSTimerStart = GetTimeMillis();\n+                nHashCounter = 0;\n+            }\n+            else\n+                nHashCounter += nHashesDone;\n+            if (GetTimeMillis() - nHPSTimerStart > 4000)\n+            {\n+                static CCriticalSection cs;\n+                {\n+                    LOCK(cs);\n+                    if (GetTimeMillis() - nHPSTimerStart > 4000)\n+                    {\n+                        dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n+                        nHPSTimerStart = GetTimeMillis();\n+                        nHashCounter = 0;\n+                        static int64 nLogTime;\n+                        if (GetTime() - nLogTime > 30 * 60)\n+                        {\n+                            nLogTime = GetTime();\n+                            printf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            // Check for stop or if block needs to be rebuilt\n+            boost::this_thread::interruption_point();\n+            if (vNodes.empty() && Params().NetworkID() != CChainParams::REGTEST)\n+                break;\n+            if (nBlockNonce >= 0xffff0000)\n+                break;\n+            if (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n+                break;\n+            if (pindexPrev != pindexBest)\n+                break;\n+\n+            // Update nTime every few seconds\n+            UpdateTime(*pblock, pindexPrev);\n+            nBlockTime = ByteReverse(pblock->nTime);\n+            if (TestNet())\n+            {\n+                // Changing pblock->nTime can change work required on testnet:\n+                nBlockBits = ByteReverse(pblock->nBits);\n+                hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+            }\n+        }\n+    } }\n+    catch (boost::thread_interrupted)\n+    {\n+        printf(\"BitcoinMiner terminated\\n\");\n+        throw;\n+    }\n+}\n+\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n+{\n+    static boost::thread_group* minerThreads = NULL;\n+\n+    int nThreads = GetArg(\"-genproclimit\", -1);\n+    if (nThreads < 0) {\n+        if (Params().NetworkID() == CChainParams::REGTEST)\n+            nThreads = 1;\n+        else\n+            nThreads = boost::thread::hardware_concurrency();\n+    }\n+\n+    if (minerThreads != NULL)\n+    {\n+        minerThreads->interrupt_all();\n+        delete minerThreads;\n+        minerThreads = NULL;\n+    }\n+\n+    if (nThreads == 0 || !fGenerate)\n+        return;\n+\n+    minerThreads = new boost::thread_group();\n+    for (int i = 0; i < nThreads; i++)\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n+}\n+\n+\n+"
      },
      {
        "sha": "51d6a2e3eaded4b07cde6587b68cb49c512475d8",
        "filename": "src/miner.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_MINER_H\n+#define BITCOIN_MINER_H\n+\n+#include \"core.h\"\n+#include \"wallet.h\"\n+\n+/** Run the miner threads */\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n+/** Generate a new block, without valid proof-of-work */\n+CBlockTemplate* CreateNewBlock(CReserveKey& reservekey);\n+/** Modify the extranonce in a block */\n+void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+/** Do mining precalculation */\n+void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n+/** Check mined block */\n+bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n+/** Base sha256 mining transform */\n+void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n+\n+#endif // BITCOIN_MINER_H"
      },
      {
        "sha": "25111d3787239682b2b5fa179e8e0f688805ef72",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -6,6 +6,7 @@\n #include \"chainparams.h\"\n #include \"db.h\"\n #include \"init.h\"\n+#include \"miner.h\"\n #include \"bitcoinrpc.h\"\n \n using namespace json_spirit;"
      },
      {
        "sha": "bd1d998c4f2db2ff22dd409660a5645c0c8b9a1e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9db77e0c24babc38288b5f45ce67670587cd2c9/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "patch": "@@ -4,6 +4,7 @@\n #include \"main.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"miner.h\"\n #include \"wallet.h\"\n \n extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);"
      }
    ]
  },
  {
    "sha": "e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDlhODVmNmNhMmI1YTcwNDA3NDE4YmQ4MWFkMjNhZTRjNjIxMWI0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-02T05:50:04Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:13Z"
      },
      "message": "Revert \"Truncate oversize 'tx' messages before relaying/storing.\"\n\nThis reverts commit c40a5aaaf484855a4350fd702e8e72fd21a68155.",
      "tree": {
        "sha": "19e545021ee4b3458b8c9b0f6d1f06e5d1ac8d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19e545021ee4b3458b8c9b0f6d1f06e5d1ac8d89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9db77e0c24babc38288b5f45ce67670587cd2c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9db77e0c24babc38288b5f45ce67670587cd2c9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "6ebf1648ee7e123ae1f0c6121f5737102b585dd9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
        "patch": "@@ -3680,16 +3680,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        // Truncate messages to the size of the tx in them\n-        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-        unsigned int oldSize = vMsg.size();\n-        if (nSize < oldSize) {\n-            vMsg.resize(nSize);\n-            printf(\"truncating oversized TX %s (%u -> %u)\\n\",\n-                   tx.GetHash().ToString().c_str(),\n-                   oldSize, nSize);\n-        }\n-\n         bool fMissingInputs = false;\n         CValidationState state;\n         if (mempool.accept(state, tx, true, &fMissingInputs))"
      }
    ]
  },
  {
    "sha": "27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2NmYzE1MmY5YmI4NWM3Y2RiMTE1ZmE2OTAxZTg3M2RjNGM5MmE5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-02T05:14:44Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:14Z"
      },
      "message": "Simplify storage of orphan transactions\n\nOrphan transactions were stored as a CDataStream pointer;\nthis changes the mapOrphanTransactions data structures to\nstore orphans as a CTransaction.\n\nThis also fixes CVE-2013-4627 by always re-serializing\ntransactions before relaying them.",
      "tree": {
        "sha": "4544f46c1d88fb19989989c9ba3983348fff06ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4544f46c1d88fb19989989c9ba3983348fff06ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e49a85f6ca2b5a70407418bd81ad23ae4c6211b4"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 39,
      "deletions": 60
    },
    "files": [
      {
        "sha": "72b1f773c738d7f4a086c6976526fd627a0bf8b2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 38,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
        "patch": "@@ -59,8 +59,8 @@ CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes\n map<uint256, CBlock*> mapOrphanBlocks;\n multimap<uint256, CBlock*> mapOrphanBlocksByPrev;\n \n-map<uint256, CDataStream*> mapOrphanTransactions;\n-map<uint256, map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;\n+map<uint256, CTransaction> mapOrphanTransactions;\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n \n // Constant stuff for coinbase transactions we create:\n CScript COINBASE_FLAGS;\n@@ -399,33 +399,29 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CDataStream& vMsg)\n+bool AddOrphanTx(const CTransaction& tx)\n {\n-    CTransaction tx;\n-    CDataStream(vMsg) >> tx;\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n         return false;\n \n-    CDataStream* pvMsg = new CDataStream(vMsg);\n-\n     // Ignore big transactions, to avoid a\n     // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n     // large transaction with a missing parent then we assume\n     // it will rebroadcast it later, after the parent transaction(s)\n     // have been mined or received.\n     // 10,000 orphans, each of which is at most 5,000 bytes big is\n     // at most 500 megabytes of orphans:\n-    if (pvMsg->size() > 5000)\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz > 5000)\n     {\n-        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().c_str());\n-        delete pvMsg;\n+        printf(\"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString().c_str());\n         return false;\n     }\n \n-    mapOrphanTransactions[hash] = pvMsg;\n+    mapOrphanTransactions[hash] = tx;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n     printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().c_str(),\n         mapOrphanTransactions.size());\n@@ -436,16 +432,13 @@ void static EraseOrphanTx(uint256 hash)\n {\n     if (!mapOrphanTransactions.count(hash))\n         return;\n-    const CDataStream* pvMsg = mapOrphanTransactions[hash];\n-    CTransaction tx;\n-    CDataStream(*pvMsg) >> tx;\n+    const CTransaction& tx = mapOrphanTransactions[hash];\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n         if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n             mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n     }\n-    delete pvMsg;\n     mapOrphanTransactions.erase(hash);\n }\n \n@@ -456,7 +449,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, CDataStream*>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -793,7 +786,7 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n     }\n }\n \n-bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFree,\n+bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs)\n {\n     if (pfMissingInputs)\n@@ -960,7 +953,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n }\n \n \n-bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTransaction &tx)\n {\n     // Add to memory pool without checking anything.  Don't call this directly,\n     // call CTxMemPool::accept to properly check the transaction first.\n@@ -3684,7 +3677,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CValidationState state;\n         if (mempool.accept(state, tx, true, &fMissingInputs))\n         {\n-            RelayTransaction(tx, inv.hash, vMsg);\n+            RelayTransaction(tx, inv.hash);\n             mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n@@ -3693,31 +3686,31 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n                 uint256 hashPrev = vWorkQueue[i];\n-                for (map<uint256, CDataStream*>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n+                for (set<uint256>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n                      mi != mapOrphanTransactionsByPrev[hashPrev].end();\n                      ++mi)\n                 {\n-                    const CDataStream& vMsg = *((*mi).second);\n-                    CTransaction tx;\n-                    CDataStream(vMsg) >> tx;\n-                    CInv inv(MSG_TX, tx.GetHash());\n+                    const uint256& orphanHash = *mi;\n+                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n                     bool fMissingInputs2 = false;\n-                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get anyone relaying LegitTxX banned)\n+                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n+                    // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n+                    // anyone relaying LegitTxX banned)\n                     CValidationState stateDummy;\n \n-                    if (mempool.accept(stateDummy, tx, true, &fMissingInputs2))\n+                    if (mempool.accept(stateDummy, orphanTx, true, &fMissingInputs2))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().c_str());\n-                        RelayTransaction(tx, inv.hash, vMsg);\n-                        mapAlreadyAskedFor.erase(inv);\n-                        vWorkQueue.push_back(inv.hash);\n-                        vEraseQueue.push_back(inv.hash);\n+                        printf(\"   accepted orphan tx %s\\n\", orphanHash.ToString().c_str());\n+                        RelayTransaction(orphanTx, orphanHash);\n+                        mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n+                        vWorkQueue.push_back(orphanHash);\n+                        vEraseQueue.push_back(orphanHash);\n                     }\n                     else if (!fMissingInputs2)\n                     {\n                         // invalid or too-little-fee orphan\n-                        vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().c_str());\n+                        vEraseQueue.push_back(orphanHash);\n+                        printf(\"   removed orphan tx %s\\n\", orphanHash.ToString().c_str());\n                     }\n                 }\n             }\n@@ -3727,7 +3720,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n         else if (fMissingInputs)\n         {\n-            AddOrphanTx(vMsg);\n+            AddOrphanTx(tx);\n \n             // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n             unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n@@ -4214,9 +4207,6 @@ class CMainCleanup\n         mapOrphanBlocks.clear();\n \n         // orphan transactions\n-        std::map<uint256, CDataStream*>::iterator it3 = mapOrphanTransactions.begin();\n-        for (; it3 != mapOrphanTransactions.end(); it3++)\n-            delete (*it3).second;\n         mapOrphanTransactions.clear();\n     }\n } instance_of_cmaincleanup;"
      },
      {
        "sha": "ea86a2bcc08005607cfb452b025b41e0850008be",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
        "patch": "@@ -1081,8 +1081,8 @@ class CTxMemPool\n     std::map<uint256, CTransaction> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n-    bool accept(CValidationState &state, CTransaction &tx, bool fLimitFree, bool* pfMissingInputs);\n-    bool addUnchecked(const uint256& hash, CTransaction &tx);\n+    bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree, bool* pfMissingInputs);\n+    bool addUnchecked(const uint256& hash, const CTransaction &tx);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);\n     void clear();"
      },
      {
        "sha": "c7f968da7ce8a80350b623eea895fc6b6124cbbf",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 20,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
        "patch": "@@ -17,10 +17,10 @@\n #include <stdint.h>\n \n // Tests this internal-to-main.cpp method:\n-extern bool AddOrphanTx(const CDataStream& vMsg);\n+extern bool AddOrphanTx(const CTransaction& tx);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern std::map<uint256, CDataStream*> mapOrphanTransactions;\n-extern std::map<uint256, std::map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;\n+extern std::map<uint256, CTransaction> mapOrphanTransactions;\n+extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n \n CService ip(uint32_t i)\n {\n@@ -134,14 +134,11 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n CTransaction RandomOrphan()\n {\n-    std::map<uint256, CDataStream*>::iterator it;\n+    std::map<uint256, CTransaction>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n-    const CDataStream* pvMsg = it->second;\n-    CTransaction tx;\n-    CDataStream(*pvMsg) >> tx;\n-    return tx;\n+    return it->second;\n }\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n@@ -163,9 +160,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // ... and 50 that depend on other orphans:\n@@ -182,9 +177,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // This really-big orphan should be ignored:\n@@ -208,9 +201,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        BOOST_CHECK(!AddOrphanTx(ds));\n+        BOOST_CHECK(!AddOrphanTx(tx));\n     }\n \n     // Test LimitOrphanTxSize() function:\n@@ -247,9 +238,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // Create a transaction that depends on orphans:"
      }
    ]
  },
  {
    "sha": "38066f17c45b8719a3dafa68155b0f8da27c656e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODA2NmYxN2M0NWI4NzE5YTNkYWZhNjgxNTViMGY4ZGEyN2M2NTZl",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-08-05T09:06:45Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:15Z"
      },
      "message": "translations update for Transifex 2013-08-05",
      "tree": {
        "sha": "ab0259c91d4b62a2e7d73fd89b52b98c23b02738",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab0259c91d4b62a2e7d73fd89b52b98c23b02738"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38066f17c45b8719a3dafa68155b0f8da27c656e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38066f17c45b8719a3dafa68155b0f8da27c656e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38066f17c45b8719a3dafa68155b0f8da27c656e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38066f17c45b8719a3dafa68155b0f8da27c656e/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27cfc152f9bb85c7cdb115fa6901e873dc4c92a9"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 59,
      "deletions": 40
    },
    "files": [
      {
        "sha": "534e4f3d4672758229ced28cce034f2a26ba8896",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38066f17c45b8719a3dafa68155b0f8da27c656e/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38066f17c45b8719a3dafa68155b0f8da27c656e/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=38066f17c45b8719a3dafa68155b0f8da27c656e",
        "patch": "@@ -186,6 +186,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify configuration file (default: bitcoin.\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify connection timeout in milliseconds (default: 5000)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify data directory\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify pid file (default: bitcoind.pid)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify wallet file (within data directory)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify your own public address\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"System error: \"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This help message\"),\n@@ -207,6 +208,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use the test network\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet...\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside data directory %s\\n\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart Bitcoin to complete\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: This version is obsolete, upgrade required!\"),"
      },
      {
        "sha": "d7d792a4586505f66e023af4f1b68f6942851484",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 57,
        "deletions": 40,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38066f17c45b8719a3dafa68155b0f8da27c656e/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38066f17c45b8719a3dafa68155b0f8da27c656e/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=38066f17c45b8719a3dafa68155b0f8da27c656e",
        "patch": "@@ -324,17 +324,17 @@ This product includes software developed by the OpenSSL Project for use in the O\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+257\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+254\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+268\"/>\n+        <location line=\"+246\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-343\"/>\n+        <location line=\"-321\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -409,7 +409,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Change Passphrase...</translation>\n     </message>\n     <message>\n-        <location line=\"+273\"/>\n+        <location line=\"+251\"/>\n         <source>Importing blocks from disk...</source>\n         <translation>Importing blocks from disk...</translation>\n     </message>\n@@ -419,7 +419,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-341\"/>\n+        <location line=\"-319\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -456,12 +456,12 @@ This product includes software developed by the OpenSSL Project for use in the O\n     <message>\n         <location line=\"-183\"/>\n         <location line=\"+6\"/>\n-        <location line=\"+530\"/>\n+        <location line=\"+508\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-536\"/>\n+        <location line=\"-514\"/>\n         <location line=\"+6\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n@@ -546,7 +546,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Bitcoin client</translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+143\"/>\n+        <location line=\"+121\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -688,7 +688,7 @@ Address: %4\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+111\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+110\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</translation>\n     </message>\n@@ -772,14 +772,19 @@ Address: %4\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+60\"/>\n+        <location filename=\"../intro.cpp\" line=\"+61\"/>\n         <source>A new data directory will be created.</source>\n         <translation>A new data directory will be created.</translation>\n     </message>\n     <message>\n-        <location line=\"+17\"/>\n-        <source>Directory already exists. Add &lt;code&gt;%1name&lt;/code&gt; if you intend to create a new directory here.</source>\n-        <translation>Directory already exists. Add &lt;code&gt;%1name&lt;/code&gt; if you intend to create a new directory here.</translation>\n+        <location line=\"+22\"/>\n+        <source>name</source>\n+        <translation>name</translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Directory already exists. Add %1 if you intend to create a new directory here.</source>\n+        <translation>Directory already exists. Add %1 if you intend to create a new directory here.</translation>\n     </message>\n     <message>\n         <location line=\"+3\"/>\n@@ -795,7 +800,7 @@ Address: %4\n <context>\n     <name>GUIUtil::HelpMessageBox</name>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+493\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+517\"/>\n         <location line=\"+13\"/>\n         <source>Bitcoin-Qt</source>\n         <translation>Bitcoin-Qt</translation>\n@@ -1172,7 +1177,7 @@ Address: %4\n <context>\n     <name>PaymentServer</name>\n     <message>\n-        <location filename=\"../paymentserver.cpp\" line=\"+109\"/>\n+        <location filename=\"../paymentserver.cpp\" line=\"+108\"/>\n         <source>Cannot start bitcoin: click-to-pay handler</source>\n         <translation>Cannot start bitcoin: click-to-pay handler</translation>\n     </message>\n@@ -1271,7 +1276,7 @@ Address: %4\n         <location line=\"+53\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+343\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+345\"/>\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n@@ -1772,7 +1777,7 @@ Address: %4\n <context>\n     <name>SplashScreen</name>\n     <message>\n-        <location filename=\"../splashscreen.cpp\" line=\"+23\"/>\n+        <location filename=\"../splashscreen.cpp\" line=\"+22\"/>\n         <source>The Bitcoin developers</source>\n         <translation>The Bitcoin developers</translation>\n     </message>\n@@ -2330,12 +2335,12 @@ Address: %4\n         <translation>Bitcoin version</translation>\n     </message>\n     <message>\n-        <location line=\"+103\"/>\n+        <location line=\"+104\"/>\n         <source>Usage:</source>\n         <translation>Usage:</translation>\n     </message>\n     <message>\n-        <location line=\"-29\"/>\n+        <location line=\"-30\"/>\n         <source>Send command to -server or bitcoind</source>\n         <translation>Send command to -server or bitcoind</translation>\n     </message>\n@@ -2390,7 +2395,7 @@ Address: %4\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+83\"/>\n+        <location line=\"+84\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n@@ -2400,7 +2405,7 @@ Address: %4\n         <translation>Threshold for disconnecting misbehaving peers (default: 100)</translation>\n     </message>\n     <message>\n-        <location line=\"-135\"/>\n+        <location line=\"-136\"/>\n         <source>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</source>\n         <translation>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</translation>\n     </message>\n@@ -2425,12 +2430,12 @@ Address: %4\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+38\"/>\n         <source>Use the test network</source>\n         <translation>Use the test network</translation>\n     </message>\n     <message>\n-        <location line=\"-113\"/>\n+        <location line=\"-114\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n@@ -2695,7 +2700,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Set the number of threads to service RPC calls (default: 4)</translation>\n     </message>\n     <message>\n-        <location line=\"+26\"/>\n+        <location line=\"+7\"/>\n+        <source>Specify wallet file (within data directory)</source>\n+        <translation>Specify wallet file (within data directory)</translation>\n+    </message>\n+    <message>\n+        <location line=\"+20\"/>\n         <source>Verifying blocks...</source>\n         <translation>Verifying blocks...</translation>\n     </message>\n@@ -2704,13 +2714,20 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <source>Verifying wallet...</source>\n         <translation>Verifying wallet...</translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Wallet %s resides outside data directory %s\n+</source>\n+        <translation>Wallet %s resides outside data directory %s\n+</translation>\n+    </message>\n     <message>\n         <location line=\"+4\"/>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>You need to rebuild the database using -reindex to change -txindex</translation>\n     </message>\n     <message>\n-        <location line=\"-74\"/>\n+        <location line=\"-76\"/>\n         <source>Imports blocks from external blk000??.dat file</source>\n         <translation>Imports blocks from external blk000??.dat file</translation>\n     </message>\n@@ -2825,7 +2842,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Specify connection timeout in milliseconds (default: 5000)</translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>System error: </source>\n         <translation>System error: </translation>\n     </message>\n@@ -2865,7 +2882,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Username for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Warning</source>\n         <translation>Warning</translation>\n     </message>\n@@ -2880,7 +2897,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-50\"/>\n+        <location line=\"-52\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n@@ -2900,12 +2917,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+148\"/>\n+        <location line=\"+149\"/>\n         <source>Upgrade wallet to latest format</source>\n         <translation>Upgrade wallet to latest format</translation>\n     </message>\n     <message>\n-        <location line=\"-21\"/>\n+        <location line=\"-22\"/>\n         <source>Set key pool size to &lt;n&gt; (default: 100)</source>\n         <translation>Set key pool size to &lt;n&gt; (default: 100)</translation>\n     </message>\n@@ -2915,12 +2932,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Rescan the block chain for missing wallet transactions</translation>\n     </message>\n     <message>\n-        <location line=\"+35\"/>\n+        <location line=\"+36\"/>\n         <source>Use OpenSSL (https) for JSON-RPC connections</source>\n         <translation>Use OpenSSL (https) for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-26\"/>\n+        <location line=\"-27\"/>\n         <source>Server certificate file (default: server.cert)</source>\n         <translation>Server certificate file (default: server.cert)</translation>\n     </message>\n@@ -2935,7 +2952,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)</translation>\n     </message>\n     <message>\n-        <location line=\"+170\"/>\n+        <location line=\"+171\"/>\n         <source>This help message</source>\n         <translation>This help message</translation>\n     </message>\n@@ -2945,7 +2962,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unable to bind to %s on this computer (bind returned error %d, %s)</translation>\n     </message>\n     <message>\n-        <location line=\"-92\"/>\n+        <location line=\"-93\"/>\n         <source>Connect through socks proxy</source>\n         <translation>Connect through socks proxy</translation>\n     </message>\n@@ -2970,12 +2987,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Error loading wallet.dat: Wallet requires newer version of Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"+94\"/>\n+        <location line=\"+96\"/>\n         <source>Wallet needed to be rewritten: restart Bitcoin to complete</source>\n         <translation>Wallet needed to be rewritten: restart Bitcoin to complete</translation>\n     </message>\n     <message>\n-        <location line=\"-96\"/>\n+        <location line=\"-98\"/>\n         <source>Error loading wallet.dat</source>\n         <translation>Error loading wallet.dat</translation>\n     </message>\n@@ -2985,7 +3002,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+56\"/>\n+        <location line=\"+57\"/>\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n@@ -2995,7 +3012,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unknown -socks proxy version requested: %i</translation>\n     </message>\n     <message>\n-        <location line=\"-97\"/>\n+        <location line=\"-98\"/>\n         <source>Cannot resolve -bind address: &apos;%s&apos;</source>\n         <translation>Cannot resolve -bind address: &apos;%s&apos;</translation>\n     </message>\n@@ -3065,12 +3082,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Done loading</translation>\n     </message>\n     <message>\n-        <location line=\"+83\"/>\n+        <location line=\"+84\"/>\n         <source>To use the %s option</source>\n         <translation>To use the %s option</translation>\n     </message>\n     <message>\n-        <location line=\"-75\"/>\n+        <location line=\"-76\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "a0513351eb032e60a9cb7c197875665f42c75727",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDUxMzM1MWViMDMyZTYwYTljYjdjMTk3ODc1NjY1ZjQyYzc1NzI3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-08-06T08:28:52Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:16Z"
      },
      "message": "remove a newline from a string in init.cpp\n\n- to match all other translatable strings in init.cpp and to simplify\n  translations via Transifex",
      "tree": {
        "sha": "8e16bca7e7ff1006a146b5daef33996a6b6713f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e16bca7e7ff1006a146b5daef33996a6b6713f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0513351eb032e60a9cb7c197875665f42c75727",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0513351eb032e60a9cb7c197875665f42c75727",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0513351eb032e60a9cb7c197875665f42c75727",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0513351eb032e60a9cb7c197875665f42c75727/comments",
    "author": null,
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38066f17c45b8719a3dafa68155b0f8da27c656e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38066f17c45b8719a3dafa68155b0f8da27c656e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38066f17c45b8719a3dafa68155b0f8da27c656e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "09871c012c70719d14fd0c8615e1825c52229caf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0513351eb032e60a9cb7c197875665f42c75727/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0513351eb032e60a9cb7c197875665f42c75727/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a0513351eb032e60a9cb7c197875665f42c75727",
        "patch": "@@ -504,7 +504,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // Wallet file must be a plain filename without a directory\n     if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n-        return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\\n\"), strWalletFile.c_str(), strDataDir.c_str()));\n+        return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\"), strWalletFile.c_str(), strDataDir.c_str()));\n \n     // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";"
      },
      {
        "sha": "fc0e53887ae88e3571b237ba3206d18f607d3166",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0513351eb032e60a9cb7c197875665f42c75727/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0513351eb032e60a9cb7c197875665f42c75727/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=a0513351eb032e60a9cb7c197875665f42c75727",
        "patch": "@@ -208,7 +208,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use the test network\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet...\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside data directory %s\\n\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside data directory %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart Bitcoin to complete\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: This version is obsolete, upgrade required!\"),"
      },
      {
        "sha": "5ae067d9b8a5488b9d72bae3123f115751340417",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0513351eb032e60a9cb7c197875665f42c75727/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0513351eb032e60a9cb7c197875665f42c75727/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=a0513351eb032e60a9cb7c197875665f42c75727",
        "patch": "@@ -2716,10 +2716,8 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Wallet %s resides outside data directory %s\n-</source>\n-        <translation>Wallet %s resides outside data directory %s\n-</translation>\n+        <source>Wallet %s resides outside data directory %s</source>\n+        <translation>Wallet %s resides outside data directory %s</translation>\n     </message>\n     <message>\n         <location line=\"+4\"/>"
      }
    ]
  },
  {
    "sha": "6158af464191cfb8a39e0208470a66ce2482a2b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTU4YWY0NjQxOTFjZmI4YTM5ZTAyMDg0NzBhNjZjZTI0ODJhMmIy",
    "commit": {
      "author": {
        "name": "Han Lin Yap",
        "email": "codler@gmail.com",
        "date": "2013-08-06T11:31:42Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:17Z"
      },
      "message": "fix typo in README.md",
      "tree": {
        "sha": "a9881cc027bf6bcceeb8409ca90328e3711c5d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9881cc027bf6bcceeb8409ca90328e3711c5d00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6158af464191cfb8a39e0208470a66ce2482a2b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6158af464191cfb8a39e0208470a66ce2482a2b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6158af464191cfb8a39e0208470a66ce2482a2b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6158af464191cfb8a39e0208470a66ce2482a2b2/comments",
    "author": {
      "login": "codler",
      "id": 102052,
      "node_id": "MDQ6VXNlcjEwMjA1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/102052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codler",
      "html_url": "https://github.com/codler",
      "followers_url": "https://api.github.com/users/codler/followers",
      "following_url": "https://api.github.com/users/codler/following{/other_user}",
      "gists_url": "https://api.github.com/users/codler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codler/subscriptions",
      "organizations_url": "https://api.github.com/users/codler/orgs",
      "repos_url": "https://api.github.com/users/codler/repos",
      "events_url": "https://api.github.com/users/codler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0513351eb032e60a9cb7c197875665f42c75727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0513351eb032e60a9cb7c197875665f42c75727",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0513351eb032e60a9cb7c197875665f42c75727"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5453f998dc23b797145244a57584e3f1c3fa20ef",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6158af464191cfb8a39e0208470a66ce2482a2b2/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6158af464191cfb8a39e0208470a66ce2482a2b2/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=6158af464191cfb8a39e0208470a66ce2482a2b2",
        "patch": "@@ -38,7 +38,7 @@ submitter will be asked to start a discussion (if they haven't already) on the\n \n The patch will be accepted if there is broad consensus that it is a good thing.\n Developers should expect to rework and resubmit patches if the code doesn't\n-match the project's coding conventions (see `doc/coding.txt`) or are\n+match the project's coding conventions (see `doc/coding.md`) or are\n controversial.\n \n The `master` branch is regularly built and tested, but is not guaranteed to be"
      }
    ]
  },
  {
    "sha": "33b2e19910b3ede94c315cebfbf4a1247e850c91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2IyZTE5OTEwYjNlZGU5NGMzMTVjZWJmYmY0YTEyNDdlODUwYzkx",
    "commit": {
      "author": {
        "name": "Han Lin Yap",
        "email": "codler@gmail.com",
        "date": "2013-08-06T11:52:38Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:18Z"
      },
      "message": "Use existing RPC_INVALID_PARAMETER constant",
      "tree": {
        "sha": "9eb4ed2f12412a2b1903b54008f0592712dc9743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eb4ed2f12412a2b1903b54008f0592712dc9743"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33b2e19910b3ede94c315cebfbf4a1247e850c91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b2e19910b3ede94c315cebfbf4a1247e850c91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33b2e19910b3ede94c315cebfbf4a1247e850c91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b2e19910b3ede94c315cebfbf4a1247e850c91/comments",
    "author": {
      "login": "codler",
      "id": 102052,
      "node_id": "MDQ6VXNlcjEwMjA1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/102052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codler",
      "html_url": "https://github.com/codler",
      "followers_url": "https://api.github.com/users/codler/followers",
      "following_url": "https://api.github.com/users/codler/following{/other_user}",
      "gists_url": "https://api.github.com/users/codler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codler/subscriptions",
      "organizations_url": "https://api.github.com/users/codler/orgs",
      "repos_url": "https://api.github.com/users/codler/repos",
      "events_url": "https://api.github.com/users/codler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6158af464191cfb8a39e0208470a66ce2482a2b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6158af464191cfb8a39e0208470a66ce2482a2b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6158af464191cfb8a39e0208470a66ce2482a2b2"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c4f14b492198ad162ab7b5cd11ee2e8c25e682a6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33b2e19910b3ede94c315cebfbf4a1247e850c91/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33b2e19910b3ede94c315cebfbf4a1247e850c91/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=33b2e19910b3ede94c315cebfbf4a1247e850c91",
        "patch": "@@ -1492,18 +1492,18 @@ Value lockunspent(const Array& params, bool fHelp)\n     BOOST_FOREACH(Value& output, outputs)\n     {\n         if (output.type() != obj_type)\n-            throw JSONRPCError(-8, \"Invalid parameter, expected object\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n         RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))\n-            throw JSONRPCError(-8, \"Invalid parameter, expected hex txid\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n \n         int nOutput = find_value(o, \"vout\").get_int();\n         if (nOutput < 0)\n-            throw JSONRPCError(-8, \"Invalid parameter, vout must be positive\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n         COutPoint outpt(uint256(txid), nOutput);\n "
      }
    ]
  },
  {
    "sha": "428b0f4cda9f9d7db7df8a30d5342664617d9876",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjhiMGY0Y2RhOWY5ZDdkYjdkZjhhMzBkNTM0MjY2NDYxN2Q5ODc2",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2013-08-10T13:26:12Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:19Z"
      },
      "message": "do not call BuildMerkleTree() unnecessarily twice",
      "tree": {
        "sha": "4ec1b12ff0aaee473e8918f9ac4d41b2d733caa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ec1b12ff0aaee473e8918f9ac4d41b2d733caa1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/428b0f4cda9f9d7db7df8a30d5342664617d9876",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428b0f4cda9f9d7db7df8a30d5342664617d9876",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/428b0f4cda9f9d7db7df8a30d5342664617d9876",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428b0f4cda9f9d7db7df8a30d5342664617d9876/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33b2e19910b3ede94c315cebfbf4a1247e850c91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33b2e19910b3ede94c315cebfbf4a1247e850c91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33b2e19910b3ede94c315cebfbf4a1247e850c91"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e78e055147f2b86f07b0963658c27914717cea03",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/428b0f4cda9f9d7db7df8a30d5342664617d9876/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/428b0f4cda9f9d7db7df8a30d5342664617d9876/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=428b0f4cda9f9d7db7df8a30d5342664617d9876",
        "patch": "@@ -2342,7 +2342,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkle root\n-    if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n+    if (fCheckMerkleRoot && block.hashMerkleRoot != block.vMerkleTree.back())\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n     return true;"
      }
    ]
  },
  {
    "sha": "e526376ab60e78c3a00b745d72330d19d14aa520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTI2Mzc2YWI2MGU3OGMzYTAwYjc0NWQ3MjMzMGQxOWQxNGFhNTIw",
    "commit": {
      "author": {
        "name": "Roman Mindalev",
        "email": "r000n@r000n.net",
        "date": "2013-08-12T14:28:23Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:40:20Z"
      },
      "message": "Add missing 0x prefix in chainparams.cpp",
      "tree": {
        "sha": "cc4171a7f6b5158a69ee7f0678978adb07211d7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc4171a7f6b5158a69ee7f0678978adb07211d7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e526376ab60e78c3a00b745d72330d19d14aa520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e526376ab60e78c3a00b745d72330d19d14aa520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e526376ab60e78c3a00b745d72330d19d14aa520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e526376ab60e78c3a00b745d72330d19d14aa520/comments",
    "author": {
      "login": "r000n",
      "id": 2118167,
      "node_id": "MDQ6VXNlcjIxMTgxNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2118167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/r000n",
      "html_url": "https://github.com/r000n",
      "followers_url": "https://api.github.com/users/r000n/followers",
      "following_url": "https://api.github.com/users/r000n/following{/other_user}",
      "gists_url": "https://api.github.com/users/r000n/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/r000n/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/r000n/subscriptions",
      "organizations_url": "https://api.github.com/users/r000n/orgs",
      "repos_url": "https://api.github.com/users/r000n/repos",
      "events_url": "https://api.github.com/users/r000n/events{/privacy}",
      "received_events_url": "https://api.github.com/users/r000n/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "428b0f4cda9f9d7db7df8a30d5342664617d9876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428b0f4cda9f9d7db7df8a30d5342664617d9876",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/428b0f4cda9f9d7db7df8a30d5342664617d9876"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6b836240402ef4bfa28f634bd38b880c33eeb771",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e526376ab60e78c3a00b745d72330d19d14aa520/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e526376ab60e78c3a00b745d72330d19d14aa520/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e526376ab60e78c3a00b745d72330d19d14aa520",
        "patch": "@@ -196,7 +196,7 @@ class CTestNetParams : public CMainParams {\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n         hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        assert(hashGenesisBlock == uint256(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();"
      }
    ]
  },
  {
    "sha": "d91b9e91b33c5f95fc78cc9eb2a43472d06c3f5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTFiOWU5MWIzM2M1Zjk1ZmM3OGNjOWViMmE0MzQ3MmQwNmMzZjVi",
    "commit": {
      "author": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:41:51Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2013-08-14T23:41:51Z"
      },
      "message": "Removed duplicate doc files.\n\nSeems like some of the old files got left behind when they were changed\nto markdown.",
      "tree": {
        "sha": "91ce9ee666a7a62df926354a2e06cf4b5a8647e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ce9ee666a7a62df926354a2e06cf4b5a8647e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d91b9e91b33c5f95fc78cc9eb2a43472d06c3f5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d91b9e91b33c5f95fc78cc9eb2a43472d06c3f5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d91b9e91b33c5f95fc78cc9eb2a43472d06c3f5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d91b9e91b33c5f95fc78cc9eb2a43472d06c3f5b/comments",
    "author": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e526376ab60e78c3a00b745d72330d19d14aa520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e526376ab60e78c3a00b745d72330d19d14aa520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e526376ab60e78c3a00b745d72330d19d14aa520"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 0,
      "deletions": 199
    },
    "files": [
      {
        "sha": "b26fab3be8c3818cf801c73262ea84db12edbe88",
        "filename": "doc/README_windows.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e526376ab60e78c3a00b745d72330d19d14aa520/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e526376ab60e78c3a00b745d72330d19d14aa520/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=e526376ab60e78c3a00b745d72330d19d14aa520",
        "patch": "@@ -1,30 +0,0 @@\n-Bitcoin 0.8.2 BETA\r\n-\r\n-Copyright (c) 2009-2013 Bitcoin Developers\r\n-Distributed under the MIT/X11 software license, see the accompanying\r\n-file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n-This product includes software developed by the OpenSSL Project for use in\r\n-the OpenSSL Toolkit (http://www.openssl.org/).  This product includes\r\n-cryptographic software written by Eric Young (eay@cryptsoft.com).\r\n-\r\n-\r\n-Intro\r\n------\r\n-Bitcoin is a free open source peer-to-peer electronic cash system that is\r\n-completely decentralized, without the need for a central server or trusted\r\n-parties.  Users hold the crypto keys to their own money and transact directly\r\n-with each other, with the help of a P2P network to check for double-spending.\r\n-\r\n-\r\n-Setup\r\n------\r\n-Unpack the files into a directory and run bitcoin-qt.exe.\r\n-\r\n-Bitcoin-Qt is the original Bitcoin client and it builds the backbone of the network.\r\n-However, it downloads and stores the entire history of Bitcoin transactions;\r\n-depending on the speed of your computer and network connection, the synchronization\r\n-process can take anywhere from a few hours to a day or more.\r\n-\r\n-See the bitcoin wiki at:\r\n-  https://en.bitcoin.it/wiki/Main_Page\r\n-for more help and information.\r"
      },
      {
        "sha": "386e3b54666ccd1e2262ae2d28d96bcb9fcccbc6",
        "filename": "doc/Tor.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 92,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e526376ab60e78c3a00b745d72330d19d14aa520/doc/Tor.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e526376ab60e78c3a00b745d72330d19d14aa520/doc/Tor.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Tor.txt?ref=e526376ab60e78c3a00b745d72330d19d14aa520",
        "patch": "@@ -1,92 +0,0 @@\n-TOR SUPPORT IN BITCOIN\n-======================\n-\n-It is possible to run Bitcoin as a Tor hidden service, and connect to such services.\n-\n-The following directions assume you have a Tor proxy running on port 9050. Many distributions\n-default to having a SOCKS proxy listening on port 9050, but others may not.\n-In particular, the Tor Browser Bundle defaults to listening on a random port. See\n-https://www.torproject.org/docs/faq.html.en#TBBSocksPort for how to properly\n-configure Tor.\n-\n-\n-1. Run bitcoin behind a Tor proxy\n----------------------------------\n-\n-The first step is running Bitcoin behind a Tor proxy. This will already make all\n-outgoing connections be anonimized, but more is possible.\n-\n--socks=5        SOCKS5 supports connecting-to-hostname, which can be used instead\n-                of doing a (leaking) local DNS lookup. SOCKS5 is the default,\n-                but SOCKS4 does not support this. (SOCKS4a does, but isn't\n-                implemented).\n-\n--proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n-                server will be used to try to reach .onion addresses as well.\n-\n--tor=ip:port    Set the proxy server to use for tor hidden services. You do not\n-                need to set this if it's the same as -proxy. You can use -notor\n-                to explicitly disable access to hidden service.\n-\n--listen         When using -proxy, listening is disabled by default. If you want\n-                to run a hidden service (see next section), you'll need to enable\n-                it explicitly.\n-\n--connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n--addnode=X      of IP addresses or hostnames in these parameters. It requires\n--seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n-                other P2P nodes.\n-\n-In a typical situation, this suffices to run behind a Tor proxy:\n-\n-  ./bitcoin -proxy=127.0.0.1:9050\n-\n-\n-2. Run a bitcoin hidden server\n-------------------------------\n-\n-If you configure your Tor system accordingly, it is possible to make your node also\n-reachable from the Tor network. Add these lines to your /etc/tor/torrc (or equivalent\n-config file):\n-\n-  HiddenServiceDir /var/lib/tor/bitcoin-service/\n-  HiddenServicePort 8333 127.0.0.1:8333\n-\n-The directory can be different of course, but (both) port numbers should be equal to\n-your bitcoind's P2P listen port (8333 by default).\n-\n--externalip=X   You can tell bitcoin about its publicly reachable address using\n-                this option, and this can be a .onion address. Given the above\n-                configuration, you can find your onion address in\n-                /var/lib/tor/bitcoin-service/hostname. Onion addresses are given\n-                preference for your node to advertize itself with, for connections\n-                coming from unroutable addresses (such as 127.0.0.1, where the\n-                Tor proxy typically runs).\n-\n--listen         You'll need to enable listening for incoming connections, as this\n-                is off by default behind a proxy.\n-\n--discover       When -externalip is specified, no attempt is made to discover local\n-                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n-                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n-                other addresses using -externalip, or explicitly enable -discover.\n-                Note that both addresses of a dual-stack system may be easily\n-                linkable using traffic analysis.\n-\n-In a typical situation, where you're only reachable via Tor, this should suffice:\n-\n-  ./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n-\n-(obviously, replace the Onion address with your own). If you don't care too much\n-about hiding your node, and want to be reachable on IPv4 as well, additionally\n-specify:\n-\n-  ./bitcoind ... -discover\n-\n-and open port 8333 on your firewall (or use -upnp).\n-\n-If you only want to use Tor to reach onion addresses, but not use it as a proxy\n-for normal IPv4/IPv6 communication, use:\n-\n-  ./bitcoin -tor=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n-"
      },
      {
        "sha": "2069c5d6e0418bf0a3e3175f57f41a4815bd8dac",
        "filename": "doc/assets-attribution.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e526376ab60e78c3a00b745d72330d19d14aa520/doc/assets-attribution.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e526376ab60e78c3a00b745d72330d19d14aa520/doc/assets-attribution.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.txt?ref=e526376ab60e78c3a00b745d72330d19d14aa520",
        "patch": "@@ -1,58 +0,0 @@\n-Icon: src/qt/res/icons/clock*.png, src/qt/res/icons/tx*.png,\n-      src/qt/res/src/clock_green.svg, src/qt/res/src/clock1.svg,\n-      src/qt/res/src/clock2.svg, src/qt/res/src/clock3.svg,\n-      src/qt/res/src/clock4.svg, src/qt/res/src/clock5.svg,\n-      src/qt/res/src/inout.svg, src/qt/res/src/questionmark.svg\n-Designer: Wladimir van der Laan\n-License: MIT\n-\n-Icon: src/qt/res/icons/address-book.png, src/qt/res/icons/export.png,\n-      src/qt/res/icons/history.png, src/qt/res/icons/key.png,\n-      src/qt/res/icons/lock_*.png, src/qt/res/icons/overview.png,\n-      src/qt/res/icons/receive.png, src/qt/res/icons/send.png,\n-      src/qt/res/icons/synced.png, src/qt/res/icons/filesave.png\n-Icon Pack: NUVOLA ICON THEME for KDE 3.x\n-Designer: David Vignoni (david@icon-king.com)\n-          ICON KING - www.icon-king.com\n-License: LGPL\n-Site: http://www.icon-king.com/projects/nuvola/\n-\n-Icon: src/qt/res/icons/connect*.png\n-Icon Pack: Human-O2\n-Designer: schollidesign\n-License: GNU/GPL\n-Site: http://findicons.com/icon/93743/blocks_gnome_netstatus_0\n-\n-Icon: src/qt/res/icons/transaction*.png\n-Designer: md2k7\n-Site: https://bitcointalk.org/index.php?topic=15276.0\n-License: You are free to do with these icons as you wish, including selling,\n- copying, modifying etc.\n-License: MIT\n-\n-Icon: src/qt/res/icons/configure.png, src/qt/res/icons/quit.png,\n-      src/qt/res/icons/editcopy.png, src/qt/res/icons/editpaste.png,\n-      src/qt/res/icons/add.png, src/qt/res/icons/edit.png,\n-      src/qt/res/icons/remove.png (edited)\n-Designer: http://www.everaldo.com\n-Icon Pack: Crystal SVG\n-License: LGPL\n-\n-Icon:  scripts/img/reload.xcf (modified), src/qt/res/movies/update_spinner.mng\n-Icon Pack: Kids\n-Designer: Everaldo (Everaldo Coelho)\n-License: GNU/GPL \n-Site: http://findicons.com/icon/17102/reload?id=17102\n-\n-Icon: src/qt/res/icons/debugwindow.png\n-Designer: Vignoni David\n-Site: http://www.oxygen-icons.org/\n-License: Oxygen icon theme is dual licensed. You may copy it under the Creative Common Attribution-ShareAlike 3.0 License or the GNU Library General Public License.\n-\n-Icon: src/qt/res/icons/bitcoin.icns, src/qt/res/src/bitcoin.svg,\n-      src/qt/res/src/bitcoin.ico, src/qt/res/src/bitcoin.png,\n-      src/qt/res/src/bitcoin_testnet.png, docs/bitcoin_logo_doxygen.png,\n-      src/qt/res/icons/toolbar.png, src/qt/res/icons/toolbar_testnet.png,\n-      src/qt/res/images/splash.png, src/qt/res/images/splash_testnet.png\n-Designer: Jonas Schnelli (based on the original bitcoin logo from Bitboy)\n-License: MIT"
      },
      {
        "sha": "5d4cdabf8d1e32962672a94532446ebeef5b62e3",
        "filename": "doc/files.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e526376ab60e78c3a00b745d72330d19d14aa520/doc/files.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e526376ab60e78c3a00b745d72330d19d14aa520/doc/files.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.txt?ref=e526376ab60e78c3a00b745d72330d19d14aa520",
        "patch": "@@ -1,19 +0,0 @@\n-Used in 0.8.0:\n-* wallet.dat: personal wallet (BDB) with keys and transactions\n-* peers.dat: peer IP address database (custom format); since 0.7.0\n-* blocks/blk000??.dat: block data (custom, 128 MiB per file); since 0.8.0\n-* blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n-* blocks/index/*; block index (LevelDB); since 0.8.0\n-* chainstate/*; block chain state database (LevelDB); since 0.8.0\n-* database/*: BDB database environment; only used for wallet since 0.8.0\n-\n-Only used in pre-0.8.0:\n-* blktree/*; block chain index (LevelDB); since pre-0.8, replaced by blocks/index/* in 0.8.0\n-* coins/*; unspent transaction output database (LevelDB); since pre-0.8, replaced by chainstate/* in 0.8.0\n-\n-Only used before 0.8.0:\n-* blkindex.dat: block chain index database (BDB); replaced by {chainstate/*,blocks/index/*,blocks/rev000??.dat} in 0.8.0\n-* blk000?.dat: block data (custom, 2 GiB per file); replaced by blocks/blk000??.dat in 0.8.0\n-\n-Only used before 0.7.0:\n-* addr.dat: peer IP address database (BDB); replaced by peers.dat in 0.7.0"
      }
    ]
  }
]