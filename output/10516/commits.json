[
  {
    "sha": "c5adf8f267b2b4b633af2738c8f21005d4382496",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWFkZjhmMjY3YjJiNGI2MzNhZjI3MzhjOGYyMTAwNWQ0MzgyNDk2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-06T09:42:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-06T09:49:49Z"
      },
      "message": "[Qt] Show more significant warning if we fall back to the default fee",
      "tree": {
        "sha": "c53e54680cc01d90035e92a4203429781e3f8c61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c53e54680cc01d90035e92a4203429781e3f8c61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5adf8f267b2b4b633af2738c8f21005d4382496",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhvaD0ACgkQKdS8tkFv\nU+w/YA/+LgO0eW1U2N7vIbeOl1gmvrWbOsT5YCjtLOkQiuYqVBHLC5s+HwLypPfj\nKZ4kkquwNg8IwaEQblJshgqRWW/1CtCgHOPPXuteB3+yn6zhfxJ0r2iZR0M+erod\nx9f7bIVLQQISp8GmHwYzp+6lfsDSlSnmSXffsOqP1nw1lFt+AFXscgc+YqxiHjOS\nz6cYoaO4BqFElOBmW3d9d0E40+xt+Au7dhDzPrz7AY9yHNTa8Ud/D3cNe/WHYYBw\n2TtqK9Tw5Kg9zbd3VTtdbYQoO+OpqR1R9t5tnsRg4pxUDrdI0v0zSCFjaMKlLrht\nGRh+7nSZ1ZPXPEh7RLh3hGRggeZzXCErECxF99YcPl2kzLrjbiC3S2TA5BZ91yaI\nd/buiMVWLMeYAlW0woCG9c5Vn1SzcQT9bl5CHfRo+AaEsF4QoqiU/w9WcGkA601J\naoWnpXR2ICYZ7tNN4H/A5rNi/xVuOyULoBWROVUpD52iDgA86iw1yXjQ8kieYd1A\nKZZUaxM3ar/BIFiSnALoSvELkh/3437ed4EGEKcMIXzhzPOvMuMTJqolZZIUYdDS\nuaHCA9VFsCE37YGFqFNH/k+pg+8Zu4ys+28eQnxtdLP1sxdCgJHnxbl2QK17W8D/\n+/VCuXyRs5iwuV9+876aozXgN2sw4v+XUGIKGTGSkEjnRK7ze/o=\n=3UFu\n-----END PGP SIGNATURE-----",
        "payload": "tree c53e54680cc01d90035e92a4203429781e3f8c61\nparent f646275b90b1de93bc62b4c4d045d75ac0b96eee\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483695747 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483696189 +0100\n\n[Qt] Show more significant warning if we fall back to the default fee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5adf8f267b2b4b633af2738c8f21005d4382496",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5adf8f267b2b4b633af2738c8f21005d4382496",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5adf8f267b2b4b633af2738c8f21005d4382496/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f646275b90b1de93bc62b4c4d045d75ac0b96eee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f646275b90b1de93bc62b4c4d045d75ac0b96eee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f646275b90b1de93bc62b4c4d045d75ac0b96eee"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2eb3276a8deb431d1734f306da4148b1d3a415c7",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5adf8f267b2b4b633af2738c8f21005d4382496/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5adf8f267b2b4b633af2738c8f21005d4382496/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=c5adf8f267b2b4b633af2738c8f21005d4382496",
        "patch": "@@ -759,11 +759,31 @@\n             </item>\n            </layout>\n           </item>\n+          <item>\n+           <widget class=\"QLabel\" name=\"fallbackFeeWarningLabel\">\n+            <property name=\"toolTip\">\n+             <string>Using the fallbackfee can result in sending a transaction that will take serval hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n+            </property>\n+            <property name=\"styleSheet\">\n+             <string notr=\"true\">color: rgb(255, 150, 0);\n+font-weight: bold;</string>\n+            </property>\n+            <property name=\"text\">\n+             <string>Warning: Fee estimation is currently not possible.</string>\n+            </property>\n+            <property name=\"wordWrap\">\n+             <bool>false</bool>\n+            </property>\n+           </widget>\n+          </item>\n           <item>\n            <spacer name=\"horizontalSpacer_4\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal</enum>\n             </property>\n+            <property name=\"sizeType\">\n+             <enum>QSizePolicy::MinimumExpanding</enum>\n+            </property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>40</width>"
      },
      {
        "sha": "6180107b0e4b5ace3c34c0d90127f39cf712b999",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5adf8f267b2b4b633af2738c8f21005d4382496/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5adf8f267b2b4b633af2738c8f21005d4382496/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c5adf8f267b2b4b633af2738c8f21005d4382496",
        "patch": "@@ -655,13 +655,15 @@ void SendCoinsDialog::updateSmartFeeLabel()\n                                                                 std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n+        ui->fallbackFeeWarningLabel->setVisible(true);\n     }\n     else\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n                                                                 std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n+        ui->fallbackFeeWarningLabel->setVisible(false);\n     }\n \n     updateFeeMinimizedLabel();"
      }
    ]
  },
  {
    "sha": "e2073424fd5a185781750347fbfbb0c108ef66fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjA3MzQyNGZkNWExODU3ODE3NTAzNDdmYmZiYjBjMTA4ZWY2NmZk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-09T16:13:37Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-20T23:18:59Z"
      },
      "message": "Fix CCheckQueue IsIdle (potential) race condition and remove dangerous constructors.",
      "tree": {
        "sha": "a5946f8ef62e3545b9e10edef17d3d56b2a0b4eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5946f8ef62e3545b9e10edef17d3d56b2a0b4eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2073424fd5a185781750347fbfbb0c108ef66fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2073424fd5a185781750347fbfbb0c108ef66fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2073424fd5a185781750347fbfbb0c108ef66fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2073424fd5a185781750347fbfbb0c108ef66fd/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25720fc394e27a951bcad26095fb5a711bfacb8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25720fc394e27a951bcad26095fb5a711bfacb8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25720fc394e27a951bcad26095fb5a711bfacb8f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ea12df66dd0e5caf8f021b1a9271eab606bd94d3",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2073424fd5a185781750347fbfbb0c108ef66fd/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2073424fd5a185781750347fbfbb0c108ef66fd/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=e2073424fd5a185781750347fbfbb0c108ef66fd",
        "patch": "@@ -127,6 +127,9 @@ class CCheckQueue\n     }\n \n public:\n+    //! Mutex to ensure only one concurrent CCheckQueueControl\n+    boost::mutex ControlMutex;\n+\n     //! Create a new check queue\n     CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n@@ -161,12 +164,6 @@ class CCheckQueue\n     {\n     }\n \n-    bool IsIdle()\n-    {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n-    }\n-\n };\n \n /** \n@@ -177,16 +174,18 @@ template <typename T>\n class CCheckQueueControl\n {\n private:\n-    CCheckQueue<T>* pqueue;\n+    CCheckQueue<T> * const pqueue;\n     bool fDone;\n \n public:\n-    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)\n+    CCheckQueueControl() = delete;\n+    CCheckQueueControl(const CCheckQueueControl&) = delete;\n+    CCheckQueueControl& operator=(const CCheckQueueControl&) = delete;\n+    explicit CCheckQueueControl(CCheckQueue<T> * const pqueueIn) : pqueue(pqueueIn), fDone(false)\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            bool isIdle = pqueue->IsIdle();\n-            assert(isIdle);\n+            ENTER_CRITICAL_SECTION(pqueue->ControlMutex);\n         }\n     }\n \n@@ -209,6 +208,9 @@ class CCheckQueueControl\n     {\n         if (!fDone)\n             Wait();\n+        if (pqueue != NULL) {\n+            LEAVE_CRITICAL_SECTION(pqueue->ControlMutex);\n+        }\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "96c7f2c3458950061b057fcd3daaf47b57e6bac7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmM3ZjJjMzQ1ODk1MDA2MWIwNTdmY2QzZGFhZjQ3YjU3ZTZiYWM3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-08T00:51:23Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-02-16T06:37:53Z"
      },
      "message": "Add CheckQueue Tests",
      "tree": {
        "sha": "750bdc0c450e7427c74ab6be39c9afd84d66d534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/750bdc0c450e7427c74ab6be39c9afd84d66d534"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96c7f2c3458950061b057fcd3daaf47b57e6bac7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c7f2c3458950061b057fcd3daaf47b57e6bac7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96c7f2c3458950061b057fcd3daaf47b57e6bac7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c7f2c3458950061b057fcd3daaf47b57e6bac7/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2073424fd5a185781750347fbfbb0c108ef66fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2073424fd5a185781750347fbfbb0c108ef66fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2073424fd5a185781750347fbfbb0c108ef66fd"
      }
    ],
    "stats": {
      "total": 443,
      "additions": 443,
      "deletions": 0
    },
    "files": [
      {
        "sha": "26b1b1067f771b00059d1d6b8f7d0f0242c92fa9",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c7f2c3458950061b057fcd3daaf47b57e6bac7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c7f2c3458950061b057fcd3daaf47b57e6bac7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=96c7f2c3458950061b057fcd3daaf47b57e6bac7",
        "patch": "@@ -67,6 +67,7 @@ BITCOIN_TESTS =\\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\\n+  test/checkqueue_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "d89f9b770bce360012aefbbf667e7aa5840ae41c",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "added",
        "additions": 442,
        "deletions": 0,
        "changes": 442,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c7f2c3458950061b057fcd3daaf47b57e6bac7/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c7f2c3458950061b057fcd3daaf47b57e6bac7/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=96c7f2c3458950061b057fcd3daaf47b57e6bac7",
        "patch": "@@ -0,0 +1,442 @@\n+// Copyright (c) 2012-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"util.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+#include \"checkqueue.h\"\n+#include <boost/test/unit_test.hpp>\n+#include <boost/thread.hpp>\n+#include <atomic>\n+#include <thread>\n+#include <vector>\n+#include <mutex>\n+#include <condition_variable>\n+\n+#include <unordered_set>\n+#include <memory>\n+#include \"random.h\"\n+\n+// BasicTestingSetup not sufficient because nScriptCheckThreads is not set\n+// otherwise.\n+BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n+\n+static const int QUEUE_BATCH_SIZE = 128;\n+\n+struct FakeCheck {\n+    bool operator()()\n+    {\n+        return true;\n+    }\n+    void swap(FakeCheck& x){};\n+};\n+\n+struct FakeCheckCheckCompletion {\n+    static std::atomic<size_t> n_calls;\n+    bool operator()()\n+    {\n+        ++n_calls;\n+        return true;\n+    }\n+    void swap(FakeCheckCheckCompletion& x){};\n+};\n+\n+struct FailingCheck {\n+    bool fails;\n+    FailingCheck(bool fails) : fails(fails){};\n+    FailingCheck() : fails(true){};\n+    bool operator()()\n+    {\n+        return !fails;\n+    }\n+    void swap(FailingCheck& x)\n+    {\n+        std::swap(fails, x.fails);\n+    };\n+};\n+\n+struct UniqueCheck {\n+    static std::mutex m;\n+    static std::unordered_multiset<size_t> results;\n+    size_t check_id;\n+    UniqueCheck(size_t check_id_in) : check_id(check_id_in){};\n+    UniqueCheck() : check_id(0){};\n+    bool operator()()\n+    {\n+        std::lock_guard<std::mutex> l(m);\n+        results.insert(check_id);\n+        return true;\n+    }\n+    void swap(UniqueCheck& x) { std::swap(x.check_id, check_id); };\n+};\n+\n+\n+struct MemoryCheck {\n+    static std::atomic<size_t> fake_allocated_memory;\n+    bool b {false};\n+    bool operator()()\n+    {\n+        return true;\n+    }\n+    MemoryCheck(){};\n+    MemoryCheck(const MemoryCheck& x)\n+    {\n+        // We have to do this to make sure that destructor calls are paired\n+        //\n+        // Really, copy constructor should be deletable, but CCheckQueue breaks\n+        // if it is deleted because of internal push_back.\n+        fake_allocated_memory += b;\n+    };\n+    MemoryCheck(bool b_) : b(b_)\n+    {\n+        fake_allocated_memory += b;\n+    };\n+    ~MemoryCheck(){\n+        fake_allocated_memory -= b;\n+    \n+    };\n+    void swap(MemoryCheck& x) { std::swap(b, x.b); };\n+};\n+\n+struct FrozenCleanupCheck {\n+    static std::atomic<uint64_t> nFrozen;\n+    static std::condition_variable cv;\n+    static std::mutex m;\n+    // Freezing can't be the default initialized behavior given how the queue\n+    // swaps in default initialized Checks.\n+    bool should_freeze {false};\n+    bool operator()()\n+    {\n+        return true;\n+    }\n+    FrozenCleanupCheck() {}\n+    ~FrozenCleanupCheck()\n+    {\n+        if (should_freeze) {\n+            std::unique_lock<std::mutex> l(m);\n+            nFrozen = 1;\n+            cv.notify_one();\n+            cv.wait(l, []{ return nFrozen == 0;});\n+        }\n+    }\n+    void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};\n+};\n+\n+// Static Allocations\n+std::mutex FrozenCleanupCheck::m{};\n+std::atomic<uint64_t> FrozenCleanupCheck::nFrozen{0};\n+std::condition_variable FrozenCleanupCheck::cv{};\n+std::mutex UniqueCheck::m;\n+std::unordered_multiset<size_t> UniqueCheck::results;\n+std::atomic<size_t> FakeCheckCheckCompletion::n_calls{0};\n+std::atomic<size_t> MemoryCheck::fake_allocated_memory{0};\n+\n+// Queue Typedefs\n+typedef CCheckQueue<FakeCheckCheckCompletion> Correct_Queue;\n+typedef CCheckQueue<FakeCheck> Standard_Queue;\n+typedef CCheckQueue<FailingCheck> Failing_Queue;\n+typedef CCheckQueue<UniqueCheck> Unique_Queue;\n+typedef CCheckQueue<MemoryCheck> Memory_Queue;\n+typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n+\n+\n+/** This test case checks that the CCheckQueue works properly\n+ * with each specified size_t Checks pushed.\n+ */\n+void Correct_Queue_range(std::vector<size_t> range)\n+{\n+    auto small_queue = std::unique_ptr<Correct_Queue>(new Correct_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{small_queue->Thread();});\n+    }\n+    // Make vChecks here to save on malloc (this test can be slow...)\n+    std::vector<FakeCheckCheckCompletion> vChecks;\n+    for (auto i : range) {\n+        size_t total = i;\n+        FakeCheckCheckCompletion::n_calls = 0;\n+        CCheckQueueControl<FakeCheckCheckCompletion> control(small_queue.get());\n+        while (total) {\n+            vChecks.resize(std::min(total, (size_t) GetRand(10)));\n+            total -= vChecks.size();\n+            control.Add(vChecks);\n+        }\n+        BOOST_REQUIRE(control.Wait());\n+        if (FakeCheckCheckCompletion::n_calls != i) {\n+            BOOST_REQUIRE_EQUAL(FakeCheckCheckCompletion::n_calls, i);\n+            BOOST_TEST_MESSAGE(\"Failure on trial \" << i << \" expected, got \" << FakeCheckCheckCompletion::n_calls);\n+        }\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+/** Test that 0 checks is correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Zero)\n+{\n+    std::vector<size_t> range;\n+    range.push_back((size_t)0);\n+    Correct_Queue_range(range);\n+}\n+/** Test that 1 check is correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_One)\n+{\n+    std::vector<size_t> range;\n+    range.push_back((size_t)1);\n+    Correct_Queue_range(range);\n+}\n+/** Test that MAX check is correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Max)\n+{\n+    std::vector<size_t> range;\n+    range.push_back(100000);\n+    Correct_Queue_range(range);\n+}\n+/** Test that random numbers of checks are correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n+{\n+    std::vector<size_t> range;\n+    range.reserve(100000/1000);\n+    for (size_t i = 2; i < 100000; i += std::max((size_t)1, (size_t)GetRand(std::min((size_t)1000, ((size_t)100000) - i))))\n+        range.push_back(i);\n+    Correct_Queue_range(range);\n+}\n+\n+\n+/** Test that failing checks are caught */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n+{\n+    auto fail_queue = std::unique_ptr<Failing_Queue>(new Failing_Queue {QUEUE_BATCH_SIZE});\n+\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{fail_queue->Thread();});\n+    }\n+\n+    for (size_t i = 0; i < 1001; ++i) {\n+        CCheckQueueControl<FailingCheck> control(fail_queue.get());\n+        size_t remaining = i;\n+        while (remaining) {\n+            size_t r = GetRand(10);\n+\n+            std::vector<FailingCheck> vChecks;\n+            vChecks.reserve(r);\n+            for (size_t k = 0; k < r && remaining; k++, remaining--)\n+                vChecks.emplace_back(remaining == 1);\n+            control.Add(vChecks);\n+        }\n+        bool success = control.Wait();\n+        if (i > 0) {\n+            BOOST_REQUIRE(!success);\n+        } else if (i == 0) {\n+            BOOST_REQUIRE(success);\n+        }\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+// Test that a block validation which fails does not interfere with\n+// future blocks, ie, the bad state is cleared.\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n+{\n+    auto fail_queue = std::unique_ptr<Failing_Queue>(new Failing_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{fail_queue->Thread();});\n+    }\n+\n+    for (auto times = 0; times < 10; ++times) {\n+        for (bool end_fails : {true, false}) {\n+            CCheckQueueControl<FailingCheck> control(fail_queue.get());\n+            {\n+                std::vector<FailingCheck> vChecks;\n+                vChecks.resize(100, false);\n+                vChecks[99] = end_fails;\n+                control.Add(vChecks);\n+            }\n+            bool r =control.Wait();\n+            BOOST_REQUIRE(r || end_fails);\n+        }\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// Test that unique checks are actually all called individually, rather than\n+// just one check being called repeatedly. Test that checks are not called\n+// more than once as well\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n+{\n+    auto queue = std::unique_ptr<Unique_Queue>(new Unique_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{queue->Thread();});\n+\n+    }\n+\n+    size_t COUNT = 100000;\n+    size_t total = COUNT;\n+    {\n+        CCheckQueueControl<UniqueCheck> control(queue.get());\n+        while (total) {\n+            size_t r = GetRand(10);\n+            std::vector<UniqueCheck> vChecks;\n+            for (size_t k = 0; k < r && total; k++)\n+                vChecks.emplace_back(--total);\n+            control.Add(vChecks);\n+        }\n+    }\n+    bool r = true;\n+    BOOST_REQUIRE_EQUAL(UniqueCheck::results.size(), COUNT);\n+    for (size_t i = 0; i < COUNT; ++i)\n+        r = r && UniqueCheck::results.count(i) == 1;\n+    BOOST_REQUIRE(r);\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+\n+// Test that blocks which might allocate lots of memory free their memory agressively.\n+//\n+// This test attempts to catch a pathological case where by lazily freeing\n+// checks might mean leaving a check un-swapped out, and decreasing by 1 each\n+// time could leave the data hanging across a sequence of blocks.\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n+{\n+    auto queue = std::unique_ptr<Memory_Queue>(new Memory_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{queue->Thread();});\n+    }\n+    for (size_t i = 0; i < 1000; ++i) {\n+        size_t total = i;\n+        {\n+            CCheckQueueControl<MemoryCheck> control(queue.get());\n+            while (total) {\n+                size_t r = GetRand(10);\n+                std::vector<MemoryCheck> vChecks;\n+                for (size_t k = 0; k < r && total; k++) {\n+                    total--;\n+                    // Each iteration leaves data at the front, back, and middle\n+                    // to catch any sort of deallocation failure\n+                    vChecks.emplace_back(total == 0 || total == i || total == i/2);\n+                }\n+                control.Add(vChecks);\n+            }\n+        }\n+        BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0);\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// Test that a new verification cannot occur until all checks \n+// have been destructed\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n+{\n+    auto queue = std::unique_ptr<FrozenCleanup_Queue>(new FrozenCleanup_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    bool fails = false;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+        tg.create_thread([&]{queue->Thread();});\n+    }\n+    std::thread t0([&]() {\n+        CCheckQueueControl<FrozenCleanupCheck> control(queue.get());\n+        std::vector<FrozenCleanupCheck> vChecks(1);\n+        // Freezing can't be the default initialized behavior given how the queue\n+        // swaps in default initialized Checks (otherwise freezing destructor\n+        // would get called twice).\n+        vChecks[0].should_freeze = true;\n+        control.Add(vChecks);\n+        control.Wait(); // Hangs here\n+    });\n+    {\n+        std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);\n+        // Wait until the queue has finished all jobs and frozen\n+        FrozenCleanupCheck::cv.wait(l, [](){return FrozenCleanupCheck::nFrozen == 1;});\n+        // Try to get control of the queue a bunch of times\n+        for (auto x = 0; x < 100 && !fails; ++x) {\n+            fails = queue->ControlMutex.try_lock();\n+        }\n+        // Unfreeze\n+        FrozenCleanupCheck::nFrozen = 0;\n+    }\n+    // Awaken frozen destructor\n+    FrozenCleanupCheck::cv.notify_one();\n+    // Wait for control to finish\n+    t0.join();\n+    tg.interrupt_all();\n+    tg.join_all();\n+    BOOST_REQUIRE(!fails);\n+}\n+\n+\n+/** Test that CCheckQueueControl is threadsafe */\n+BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n+{\n+    auto queue = std::unique_ptr<Standard_Queue>(new Standard_Queue{QUEUE_BATCH_SIZE});\n+    {\n+        boost::thread_group tg;\n+        std::atomic<int> nThreads {0};\n+        std::atomic<int> fails {0};\n+        for (size_t i = 0; i < 3; ++i) {\n+            tg.create_thread(\n+                    [&]{\n+                    CCheckQueueControl<FakeCheck> control(queue.get());\n+                    // While sleeping, no other thread should execute to this point\n+                    auto observed = ++nThreads;\n+                    MilliSleep(10);\n+                    fails += observed  != nThreads;\n+                    });\n+        }\n+        tg.join_all();\n+        BOOST_REQUIRE_EQUAL(fails, 0);\n+    }\n+    {\n+        boost::thread_group tg;\n+        std::mutex m;\n+        bool has_lock {false};\n+        bool has_tried {false};\n+        bool done {false};\n+        bool done_ack {false};\n+        std::condition_variable cv;\n+        {\n+            std::unique_lock<std::mutex> l(m);\n+            tg.create_thread([&]{\n+                    CCheckQueueControl<FakeCheck> control(queue.get());\n+                    std::unique_lock<std::mutex> l(m);\n+                    has_lock = true;\n+                    cv.notify_one();\n+                    cv.wait(l, [&]{return has_tried;});\n+                    done = true;\n+                    cv.notify_one();\n+                    // Wait until the done is acknowledged\n+                    //\n+                    cv.wait(l, [&]{return done_ack;});\n+                    });\n+            // Wait for thread to get the lock\n+            cv.wait(l, [&](){return has_lock;});\n+            bool fails = false;\n+            for (auto x = 0; x < 100 && !fails; ++x) {\n+                fails = queue->ControlMutex.try_lock();\n+            }\n+            has_tried = true;\n+            cv.notify_one();\n+            cv.wait(l, [&](){return done;});\n+            // Acknowledge the done\n+            done_ack = true;\n+            cv.notify_one();\n+            BOOST_REQUIRE(!fails);\n+        }\n+        tg.join_all();\n+    }\n+}\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  },
  {
    "sha": "3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTRkN2JmY2I3ZDlmNmQ4OGI2MTIwZjQ0YmI2Y2I3ZmE5M2Q3YWRm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-17T08:18:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-17T10:00:46Z"
      },
      "message": "Qt/Send: Figure a decent warning colour from theme",
      "tree": {
        "sha": "b3f51f202b5572577aa9f1fa172b67c6fc6e788a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3f51f202b5572577aa9f1fa172b67c6fc6e788a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlimyc4ACgkQKdS8tkFv\nU+zs3hAAmxoSNz/SEpJk0RGMEytjRODD1csocavDWMK+gZ6D5n2XzhfPJfgF+lqi\nYPsWY/G/koO0DQj9VXMrh6ziFpyHJ1AzhBwNmIzoYWJ7VBPPc9SeV1oHD67WJIyw\n3949xFo+XNcsCvxiFobI/U4DqOgyp+833Z30DRuwBaeDDqwqwmRBWtLRrePq28cD\n68HvwLuJBEHS2ZAf2FjsFZt8r6Fun5uj1lGInxk2frIYl8/2PZHNxXCVu52wGUvK\nhCnrzQLLsM8Cjqh+IH8rRO5lJiLrHNOXptDCCMbXCJG2rN3V8DqfWS1YVHwW7p19\nlm4mP+v+0JMHhbKAUKzC7OyZ8OnSbclcV13WqE1wl4ZvkM4K9IucrenASdSjXiNy\nuvLOIXP+8zsFuExHrePfct+fLjj8xe2ZiaVAKrJb4oct+JsoCHeIjKXf0SQbnbAP\np6Xb7toncnDvvrRN8lyhuijZyrDC48DR/XwHyRBoQJmarhxWnC53n3/IoPrXISX2\nuQLbRsR9oQRVrot/eza1z6TqQMyK4G6HIimE8BpDv9tEehYakMdTMrlKyVrQP7Zi\nhVp6jo63JoCPUCDYFeBjjjyM/nUGnkfI5W84ksvnyDpzwn9J8v2l5s199K7ghMFm\n2u+gSzr6Q86xuhJ1sdFH7mbX2sOCu2es0Q7YMlUfviSwaBJUxCg=\n=j+3U\n-----END PGP SIGNATURE-----",
        "payload": "tree b3f51f202b5572577aa9f1fa172b67c6fc6e788a\nparent c5adf8f267b2b4b633af2738c8f21005d4382496\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1487319512 +0000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487325646 +0100\n\nQt/Send: Figure a decent warning colour from theme\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5adf8f267b2b4b633af2738c8f21005d4382496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5adf8f267b2b4b633af2738c8f21005d4382496",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5adf8f267b2b4b633af2738c8f21005d4382496"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ca2da6bf372e686f08de609742624e451560570a",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
        "patch": "@@ -764,9 +764,11 @@\n             <property name=\"toolTip\">\n              <string>Using the fallbackfee can result in sending a transaction that will take serval hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n             </property>\n-            <property name=\"styleSheet\">\n-             <string notr=\"true\">color: rgb(255, 150, 0);\n-font-weight: bold;</string>\n+            <property name=\"font\">\n+            <font>\n+                <weight>75</weight>\n+                <bold>true</bold>\n+            </font>\n             </property>\n             <property name=\"text\">\n              <string>Warning: Fee estimation is currently not possible.</string>"
      },
      {
        "sha": "d39f92dda3ae5fda2463b2294b612df68f5193a4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
        "patch": "@@ -656,6 +656,9 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);\n+        int lightness = ui->fallbackFeeWarningLabel->palette().color(QPalette::WindowText).lightness();\n+        QColor warning_colour(255 - (lightness / 5), 176 - (lightness / 3), 48 - (lightness / 14));\n+        ui->fallbackFeeWarningLabel->setStyleSheet(\"QLabel { color: \" + warning_colour.name() + \"; }\");\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "7abe7bbf61d90dc003647f2cc5019e4652182399",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWJlN2JiZjYxZDkwZGMwMDM2NDdmMmNjNTAxOWU0NjUyMTgyMzk5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-17T08:41:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-17T10:00:52Z"
      },
      "message": "Qt/Send: Give fallback fee a reasonable indent",
      "tree": {
        "sha": "37f711086429eb6de05ef3f6102f93ea9a4f85b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37f711086429eb6de05ef3f6102f93ea9a4f85b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7abe7bbf61d90dc003647f2cc5019e4652182399",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlimydQACgkQKdS8tkFv\nU+y3mw/+Lrq9WyTbMpY+gJfy4XpFMfthBDJS1FQknEtrBvBpqsfqK/D++LjVw6bT\nHowgT9yqmtqA3uTtCTZj4hqqAHqCc5YzM+Fx78xNFDQq3IWl5Q/unqV75/PugDhm\n5mittG5s4CwvSbj4bce7m9eiblrOrT3BqvSieQ0qaRTvczzpVwEfYTdu65INqxHV\nnS8pIDBOmZBZ33nsNKiDyPd4TsVBGHAFoeqPxfN+h5HvzdMYxTFVfiI5WES9+g+3\nIBe+Z6Sjm0KiS6lVKzRTxBqXy64a+4GtleJrcJPikEWysYDHG1BGv8nBoAF66REH\nALKVzdS/ciB/LuHYP6TvVrsMtZCxEKqpwF7me1oA9Bdq49/teeHT0N9KStFKHivf\nUqU7Q90ZOqo7fwku+EdH7/Q6UUGyPBY1PH6+a5vKEykoY3oZIRz4274BSzx8NbWP\nU4HHrD6aLRUJ+UfWpgY3dogUVj8UyRGTFKcF28E/4hmV1aHjNP9OScTzvNP5mYkm\ny8CLSg7NJr/8a7ciLKb7x2V2VYde+ri365Vwwv4q5Zc8+UJiq7eQYQ5RxRrH5KuD\nftJgv56nVNvtmLQpgY/PJT6Lc7GQyhrTFVIYAI4uhigUA1F+g5uRXaL63F9hi91i\nJTzKmobyCnIfXVp78sIESsqr4hIlxbqMziy3SHUh1wd3TqKnsL0=\n=irB5\n-----END PGP SIGNATURE-----",
        "payload": "tree 37f711086429eb6de05ef3f6102f93ea9a4f85b4\nparent 3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1487320917 +0000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487325652 +0100\n\nQt/Send: Give fallback fee a reasonable indent\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abe7bbf61d90dc003647f2cc5019e4652182399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7abe7bbf61d90dc003647f2cc5019e4652182399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abe7bbf61d90dc003647f2cc5019e4652182399/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4d7bfcb7d9f6d88b6120f44bb6cb7fa93d7adf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "39f8285014a56fa58b94598b38a476c46e4d903b",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7abe7bbf61d90dc003647f2cc5019e4652182399/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7abe7bbf61d90dc003647f2cc5019e4652182399/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=7abe7bbf61d90dc003647f2cc5019e4652182399",
        "patch": "@@ -22,6 +22,7 @@\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n+#include <QFontMetrics>\n #include <QMessageBox>\n #include <QScrollBar>\n #include <QSettings>\n@@ -659,6 +660,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         int lightness = ui->fallbackFeeWarningLabel->palette().color(QPalette::WindowText).lightness();\n         QColor warning_colour(255 - (lightness / 5), 176 - (lightness / 3), 48 - (lightness / 14));\n         ui->fallbackFeeWarningLabel->setStyleSheet(\"QLabel { color: \" + warning_colour.name() + \"; }\");\n+        ui->fallbackFeeWarningLabel->setIndent(QFontMetrics(ui->fallbackFeeWarningLabel->font()).width(\"x\"));\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "d28d58382076c77dc7f8ec59997c5ce2fde99f70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjhkNTgzODIwNzZjNzdkYzdmOGVjNTk5OTdjNWNlMmZkZTk5Zjcw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-03T20:31:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-04-19T20:10:02Z"
      },
      "message": "Bugfix: PrioritiseTransaction updates the mempool tx counter\n\nThe mempool's nTransactionsUpdated is used by getblocktemplate\nto trigger new invocations of CreateNewBlock().\n\nGithub-Pull: #10196\nRebased-From: 909306cde3770ed7019e7b635e24cedbd9de66ce",
      "tree": {
        "sha": "d32478f70ec654f1f485fb0a9ddd62880f276755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d32478f70ec654f1f485fb0a9ddd62880f276755"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d28d58382076c77dc7f8ec59997c5ce2fde99f70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d28d58382076c77dc7f8ec59997c5ce2fde99f70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d28d58382076c77dc7f8ec59997c5ce2fde99f70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d28d58382076c77dc7f8ec59997c5ce2fde99f70/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33fadc20bae4828788d6d82c582c457adc6941e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33fadc20bae4828788d6d82c582c457adc6941e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33fadc20bae4828788d6d82c582c457adc6941e1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "72547b58282b2d931303f607d43c18ee77b8400b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d28d58382076c77dc7f8ec59997c5ce2fde99f70/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d28d58382076c77dc7f8ec59997c5ce2fde99f70/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d28d58382076c77dc7f8ec59997c5ce2fde99f70",
        "patch": "@@ -945,6 +945,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string str\n             BOOST_FOREACH(txiter descendantIt, setDescendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n             }\n+            ++nTransactionsUpdated;\n         }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));"
      },
      {
        "sha": "12c9e59f5f08cb8d6b3613496324b361bbae7ef9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d28d58382076c77dc7f8ec59997c5ce2fde99f70/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d28d58382076c77dc7f8ec59997c5ce2fde99f70/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d28d58382076c77dc7f8ec59997c5ce2fde99f70",
        "patch": "@@ -432,7 +432,7 @@ class CTxMemPool\n {\n private:\n     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n-    unsigned int nTransactionsUpdated;\n+    unsigned int nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141."
      }
    ]
  },
  {
    "sha": "71463a7d18bb143da62e790f9194193dfaf8f320",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTQ2M2E3ZDE4YmIxNDNkYTYyZTc5MGY5MTk0MTkzZGZhZjhmMzIw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-18T16:52:08Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-04-21T12:38:23Z"
      },
      "message": "[qa] Test prioritise_transaction / getblocktemplate interaction\n\nGithub-Pull: #10196\nRebased-From: 6a61424c9eed072ae8d79d68aac71f525c1608b5",
      "tree": {
        "sha": "18cf6bd6f0f518cafd69fdd3f4f7e3e9d4e8080a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18cf6bd6f0f518cafd69fdd3f4f7e3e9d4e8080a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71463a7d18bb143da62e790f9194193dfaf8f320",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71463a7d18bb143da62e790f9194193dfaf8f320",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71463a7d18bb143da62e790f9194193dfaf8f320",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71463a7d18bb143da62e790f9194193dfaf8f320/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d28d58382076c77dc7f8ec59997c5ce2fde99f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d28d58382076c77dc7f8ec59997c5ce2fde99f70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d28d58382076c77dc7f8ec59997c5ce2fde99f70"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "16874a6b53ba34da27ebe88ae6866899229d7339",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71463a7d18bb143da62e790f9194193dfaf8f320/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71463a7d18bb143da62e790f9194193dfaf8f320/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=71463a7d18bb143da62e790f9194193dfaf8f320",
        "patch": "@@ -16,7 +16,7 @@ class PrioritiseTransactionTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n \n         self.txouts = gen_return_txouts()\n \n@@ -25,8 +25,11 @@ def setup_network(self):\n         self.is_network_split = False\n \n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        connect_nodes(self.nodes[0], 1)\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n+\n     def run_test(self):\n         utxo_count = 90\n         utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], utxo_count)\n@@ -139,5 +142,16 @@ def run_test(self):\n         assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n         assert(tx2_id in self.nodes[0].getrawmempool())\n \n+        # Test that calling prioritisetransaction is sufficient to trigger\n+        # getblocktemplate to (eventually) return a new block.\n+        mock_time = int(time.time())\n+        self.nodes[0].setmocktime(mock_time)\n+        template = self.nodes[0].getblocktemplate()\n+        self.nodes[0].prioritisetransaction(txid, 0, -int(self.relayfee*COIN))\n+        self.nodes[0].setmocktime(mock_time+10)\n+        new_template = self.nodes[0].getblocktemplate()\n+\n+        assert(template != new_template)\n+\n if __name__ == '__main__':\n     PrioritiseTransactionTest().main()"
      }
    ]
  },
  {
    "sha": "ef810c4cd440dec00a651b944d74ed4ae85603c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjgxMGM0Y2Q0NDBkZWMwMGE2NTFiOTQ0ZDc0ZWQ0YWU4NTYwM2My",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-03-16T08:05:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-03T21:19:05Z"
      },
      "message": "[trivial] Fix a typo (introduced two days ago) in the default fee warning\n\nGithub-Pull: #10008\nRebased-From: a3ca43bb32520fdc049bc2112a29a554188126cc",
      "tree": {
        "sha": "722da5afbf2de3beb4c14435a92be95af978b6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/722da5afbf2de3beb4c14435a92be95af978b6f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef810c4cd440dec00a651b944d74ed4ae85603c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef810c4cd440dec00a651b944d74ed4ae85603c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef810c4cd440dec00a651b944d74ed4ae85603c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef810c4cd440dec00a651b944d74ed4ae85603c2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7abe7bbf61d90dc003647f2cc5019e4652182399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abe7bbf61d90dc003647f2cc5019e4652182399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7abe7bbf61d90dc003647f2cc5019e4652182399"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f13b0d9cf926784d8f8d5ac30ef94c80613a511d",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef810c4cd440dec00a651b944d74ed4ae85603c2/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef810c4cd440dec00a651b944d74ed4ae85603c2/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=ef810c4cd440dec00a651b944d74ed4ae85603c2",
        "patch": "@@ -762,7 +762,7 @@\n           <item>\n            <widget class=\"QLabel\" name=\"fallbackFeeWarningLabel\">\n             <property name=\"toolTip\">\n-             <string>Using the fallbackfee can result in sending a transaction that will take serval hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n+             <string>Using the fallbackfee can result in sending a transaction that will take several hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n             </property>\n             <property name=\"font\">\n             <font>"
      }
    ]
  },
  {
    "sha": "c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTRlMjYyZDRiZjY0Zjc1ZTk3ZDQ3OGE1YTJlOGQ3NTA2N2Q0M2Uz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-03T13:54:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-03T21:59:36Z"
      },
      "message": "Update contrib/debian to latest Ubuntu PPA upload.\n\nThis:\n * Partially reverts 9f68ed6 (which fixed spelling in a changelog,\n   though generally changelogs should be append-only).\n * Disables UPnP support (PPA has not had it for a while, and I\n   still don't trust miniupnpc, plus it seems uneccessary - its\n   been a while since we needed to care about Bitcoin-Qt home users\n   getting their inbound ports auto-mapped).\n * Enables ZMQ.\n * Forces GUI to Qt4 to fix various issues people have been seeing\n   on Ubuntu and elsewhere with Qt5.\n * Reverts 70899d70b (Bitcoin does not enable \"instant payments\",\n   not is transaction management \"carried out collectively by the\n   network\", for whatever \"transaction management\" means, finally\n   Bitcoin Core is not the only way to use the Bitcoin currency,\n   as seemingly implied in the description).\n\nGithub-Pull: #10328\nRebased-From: 997021986e02f8e59024ffca6437857d9d17f396",
      "tree": {
        "sha": "a5bc2b2faa1ad5dc746d8985a8e959ff6c31e847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5bc2b2faa1ad5dc746d8985a8e959ff6c31e847"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 131,
      "deletions": 28
    },
    "files": [
      {
        "sha": "4f73f6042c56b5b3f197164b4ea9c787b2600c6c",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 104,
        "deletions": 3,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
        "patch": "@@ -1,3 +1,104 @@\n+bitcoin (0.14.1-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Sat, 22 Apr 2017 17:10:00 -0400\n+\n+bitcoin (0.14.0-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 08 Mar 2017 10:30:00 -0500\n+\n+bitcoin (0.13.2-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 05 Jan 2017 09:59:00 -0500\n+\n+bitcoin (0.13.1-trusty2) trusty; urgency=medium\n+\n+  * Revert to Qt4, due to https://github.com/bitcoin/bitcoin/issues/9038\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Mon, 31 Oct 2016 11:16:00 -0400\n+\n+bitcoin (0.13.1-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+  * Backport updated bitcoin-qt.desktop from upstream master\n+  * Add zmq dependency\n+  * Switch to Qt5 (breaks precise, but that was already broken by C++11)\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 27 Oct 2016 17:32:00 -0400\n+\n+bitcoin (0.13.0-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Sun, 04 Sep 2016 22:09:00 -0400\n+\n+bitcoin (0.12.1-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Mon, 18 Apr 2016 14:26:00 -0700\n+\n+bitcoin (0.12.0-trusty6) trusty; urgency=medium\n+\n+  * Fix program-options dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 25 Mar 2016 21:41:00 -0700\n+\n+bitcoin (0.12.0-trusty5) trusty; urgency=medium\n+\n+  * Test explicit --with-gui\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 23:25:00 -0800\n+\n+bitcoin (0.12.0-trusty4) trusty; urgency=medium\n+\n+  * Fix libevent-dev dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 23:25:00 -0800\n+\n+bitcoin (0.12.0-trusty3) trusty; urgency=medium\n+\n+  * Fix precise boost dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 19:55:00 -0800\n+\n+bitcoin (0.12.0-trusty2) trusty; urgency=medium\n+\n+  * Fix libevent dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 19:53:00 -0800\n+\n+bitcoin (0.12.0-trusty1) trusty; urgency=medium\n+\n+  * New upstream release\n+  * Various updates to contrib/debian were merged, a few were not\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 19:29:00 -0800\n+\n+bitcoin (0.11.2-trusty1) trusty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 13 Nov 2015 18:39:00 -0800\n+\n+bitcoin (0.11.1-trusty2) trusty; urgency=low\n+\n+  * Remove minupnpc builddep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 14 Oct 2015 23:06:00 -1000\n+\n+bitcoin (0.11.1-trusty1) trusty; urgency=high\n+\n+  * New upstream release.\n+  * Disable all UPnP support.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 14 Oct 2015 13:57:00 -1000\n+\n bitcoin (0.11.0-precise1) precise; urgency=medium\n \n   * New upstream release.\n@@ -179,7 +280,7 @@ bitcoin (0.5.3-natty0) natty; urgency=low\n bitcoin (0.5.2-natty1) natty; urgency=low\n \n   * Remove mentions on anonymity in package descriptions and manpage.\n-    These should never have been there, bitcoin isn't anonymous without\n+    These should never have been there, bitcoin isnt anonymous without\n     a ton of work that virtually no users will ever be willing and\n     capable of doing\n \n@@ -220,7 +321,7 @@ bitcoin (0.5.0~rc1-natty1) natty; urgency=low\n \n   * Add test_bitcoin to build test\n   * Fix clean\n-  * Remove unnecessary build-dependancies\n+  * Remove uneccessary build-dependancies\n \n  -- Matt Corallo <matt@bluematt.me>  Wed, 26 Oct 2011 14:37:18 -0400\n \n@@ -380,7 +481,7 @@ bitcoin (0.3.20.01~dfsg-1) unstable; urgency=low\n \n bitcoin (0.3.19~dfsg-6) unstable; urgency=low\n \n-  * Fix override aggressive optimizations.\n+  * Fix override agressive optimizations.\n   * Fix tighten build-dependencies to really fit backporting to Lenny:\n     + Add fallback build-dependency on libdb4.6++-dev.\n     + Tighten unversioned Boost build-dependencies to recent versions,"
      },
      {
        "sha": "8cb703e1bc08a7478d1fb4d9ab57ddcff4d606ab",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 26,
        "deletions": 24,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
        "patch": "@@ -1,27 +1,29 @@\n Source: bitcoin\n Section: utils\n Priority: optional\n-Maintainer: Jonas Smedegaard <dr@jones.dk>\n-Uploaders: Micah Anderson <micah@debian.org>\n+Maintainer: Matt Corallo <matt@mattcorallo.com>\n+Uploaders: Matt Corallo <matt@mattcorallo.com>\n Build-Depends: debhelper,\n  devscripts,\n  automake,\n  libtool,\n  bash-completion,\n- libboost-system-dev (>> 1.35) | libboost-system1.35-dev,\n  libdb4.8++-dev,\n  libssl-dev,\n  pkg-config,\n- libminiupnpc8-dev | libminiupnpc-dev (>> 1.6),\n- libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n- libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n- libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,\n- libboost-test-dev (>> 1.35) | libboost-test1.35-dev,\n+ libevent-dev,\n+ libboost-system1.48-dev | libboost-system-dev (>> 1.35),\n+ libboost-filesystem1.48-dev | libboost-filesystem-dev (>> 1.35),\n+ libboost-program-options1.48-dev | libboost-program-options-dev (>> 1.35),\n+ libboost-thread1.48-dev | libboost-thread-dev (>> 1.35),\n+ libboost-test1.48-dev | libboost-test-dev (>> 1.35),\n+ libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.35),\n  qt4-qmake,\n  libqt4-dev,\n  libqrencode-dev,\n  libprotobuf-dev, protobuf-compiler,\n- python\n+ python,\n+ libzmq3-dev\n Standards-Version: 3.9.2\n Homepage: https://bitcoincore.org/\n Vcs-Git: git://github.com/bitcoin/bitcoin.git\n@@ -31,11 +33,11 @@ Package: bitcoind\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - daemon\n- Bitcoin is an experimental new digital currency that enables instant\n- payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n- technology to operate with no central authority: managing transactions\n- and issuing money are carried out collectively by the network. Bitcoin Core\n- is the name of the open source software which enables the use of this currency.\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n  .\n  This package provides the daemon, bitcoind, and the CLI tool\n  bitcoin-cli to interact with the daemon.\n@@ -44,23 +46,23 @@ Package: bitcoin-qt\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - Qt GUI\n- Bitcoin is an experimental new digital currency that enables instant\n- payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n- technology to operate with no central authority: managing transactions\n- and issuing money are carried out collectively by the network. Bitcoin Core\n- is the name of the open source software which enables the use of this currency.\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n  .\n  This package provides Bitcoin-Qt, a GUI for Bitcoin based on Qt.\n \n Package: bitcoin-tx\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer digital currency - standalone transaction tool\n- Bitcoin is an experimental new digital currency that enables instant\n- payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n- technology to operate with no central authority: managing transactions\n- and issuing money are carried out collectively by the network. Bitcoin Core\n- is the name of the open source software which enables the use of this currency.\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n  .\n  This package provides bitcoin-tx, a command-line transaction creation\n  tool which can be used without a bitcoin daemon.  Some means of"
      },
      {
        "sha": "8db0b2dba581bec845a6f5c4c7e84827baf85ab0",
        "filename": "contrib/debian/rules",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/contrib/debian/rules",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c94e262d4bf64f75e97d478a5a2e8d75067d43e3/contrib/debian/rules",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/rules?ref=c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
        "patch": "@@ -15,7 +15,7 @@ override_dh_auto_clean:\n # Yea, autogen should be run on the source archive, but I like doing git archive\n override_dh_auto_configure:\n \t./autogen.sh\n-\t./configure\n+\t./configure --without-miniupnpc --with-gui=qt4\n \n override_dh_auto_test:\n \tmake check"
      }
    ]
  },
  {
    "sha": "2ea035832f0ba56db046eff318d3b91f097e1ca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWEwMzU4MzJmMGJhNTZkYjA0NmVmZjMxOGQzYjkxZjA5N2UxY2E0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-04T21:13:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-03T21:59:36Z"
      },
      "message": "Bump minimum boost version in contrib/debian\n\nGithub-Pull: #10328\nRebased-From: a8e928699a6ab612459e836ba24af143eae37b0f",
      "tree": {
        "sha": "39a843b898d3f1a6e13c1c23624b7e5dbe55dc92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39a843b898d3f1a6e13c1c23624b7e5dbe55dc92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ea035832f0ba56db046eff318d3b91f097e1ca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea035832f0ba56db046eff318d3b91f097e1ca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ea035832f0ba56db046eff318d3b91f097e1ca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea035832f0ba56db046eff318d3b91f097e1ca4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94e262d4bf64f75e97d478a5a2e8d75067d43e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c94e262d4bf64f75e97d478a5a2e8d75067d43e3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f38d6da83ac31123a6acef40fee1317245900860",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea035832f0ba56db046eff318d3b91f097e1ca4/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea035832f0ba56db046eff318d3b91f097e1ca4/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=2ea035832f0ba56db046eff318d3b91f097e1ca4",
        "patch": "@@ -1,3 +1,9 @@\n+bitcoin (0.14.1-trusty2) trusty; urgency=medium\n+\n+  * Bump minimum boost version in deps.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 04 May 2017 17:12:00 -0400\n+\n bitcoin (0.14.1-trusty1) trusty; urgency=medium\n \n   * New upstream release."
      },
      {
        "sha": "53dd4faf41789b823babc1b287f673ab7cd1912b",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea035832f0ba56db046eff318d3b91f097e1ca4/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea035832f0ba56db046eff318d3b91f097e1ca4/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=2ea035832f0ba56db046eff318d3b91f097e1ca4",
        "patch": "@@ -12,12 +12,12 @@ Build-Depends: debhelper,\n  libssl-dev,\n  pkg-config,\n  libevent-dev,\n- libboost-system1.48-dev | libboost-system-dev (>> 1.35),\n- libboost-filesystem1.48-dev | libboost-filesystem-dev (>> 1.35),\n- libboost-program-options1.48-dev | libboost-program-options-dev (>> 1.35),\n- libboost-thread1.48-dev | libboost-thread-dev (>> 1.35),\n- libboost-test1.48-dev | libboost-test-dev (>> 1.35),\n- libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.35),\n+ libboost-system1.48-dev | libboost-system-dev (>> 1.47),\n+ libboost-filesystem1.48-dev | libboost-filesystem-dev (>> 1.47),\n+ libboost-program-options1.48-dev | libboost-program-options-dev (>> 1.47),\n+ libboost-thread1.48-dev | libboost-thread-dev (>> 1.47),\n+ libboost-test1.48-dev | libboost-test-dev (>> 1.47),\n+ libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.47),\n  qt4-qmake,\n  libqt4-dev,\n  libqrencode-dev,"
      }
    ]
  },
  {
    "sha": "e9a0d89bf7593a1ae7ac9b059793281f0b754540",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWEwZDg5YmY3NTkzYTFhZTdhYzliMDU5NzkzMjgxZjBiNzU0NTQw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-04T21:15:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-03T21:59:36Z"
      },
      "message": "Build with QT5 on Debian-based systems using contrib/debian\n\nGithub-Pull: #10328\nRebased-From: c5071e1f03085b4025f2a33fb2c3079d823d660c",
      "tree": {
        "sha": "96fec13ff46f9370fca0acfa46ccc9ac04c25ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96fec13ff46f9370fca0acfa46ccc9ac04c25ec9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9a0d89bf7593a1ae7ac9b059793281f0b754540",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a0d89bf7593a1ae7ac9b059793281f0b754540",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a0d89bf7593a1ae7ac9b059793281f0b754540",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a0d89bf7593a1ae7ac9b059793281f0b754540/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ea035832f0ba56db046eff318d3b91f097e1ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea035832f0ba56db046eff318d3b91f097e1ca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ea035832f0ba56db046eff318d3b91f097e1ca4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1bef910398c3f30d432165b7fcd00082e89f06f6",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a0d89bf7593a1ae7ac9b059793281f0b754540/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a0d89bf7593a1ae7ac9b059793281f0b754540/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=e9a0d89bf7593a1ae7ac9b059793281f0b754540",
        "patch": "@@ -1,3 +1,9 @@\n+bitcoin (0.14.1-trusty3) trusty; urgency=medium\n+\n+  * Build with qt5 if we are on a non-Ubuntu (ie non-Unity) distro.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 04 May 2017 17:13:00 -0400\n+\n bitcoin (0.14.1-trusty2) trusty; urgency=medium\n \n   * Bump minimum boost version in deps."
      },
      {
        "sha": "523b4f936b3891ee128202703515210ff3dfc759",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a0d89bf7593a1ae7ac9b059793281f0b754540/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a0d89bf7593a1ae7ac9b059793281f0b754540/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=e9a0d89bf7593a1ae7ac9b059793281f0b754540",
        "patch": "@@ -18,8 +18,8 @@ Build-Depends: debhelper,\n  libboost-thread1.48-dev | libboost-thread-dev (>> 1.47),\n  libboost-test1.48-dev | libboost-test-dev (>> 1.47),\n  libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.47),\n- qt4-qmake,\n- libqt4-dev,\n+ qt4-qmake, libqt4-dev,\n+ qttools5-dev-tools, qttools5-dev,\n  libqrencode-dev,\n  libprotobuf-dev, protobuf-compiler,\n  python,"
      },
      {
        "sha": "354f15f320e7c12cf73e88ca07b0347f2b395e2d",
        "filename": "contrib/debian/rules",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a0d89bf7593a1ae7ac9b059793281f0b754540/contrib/debian/rules",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a0d89bf7593a1ae7ac9b059793281f0b754540/contrib/debian/rules",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/rules?ref=e9a0d89bf7593a1ae7ac9b059793281f0b754540",
        "patch": "@@ -12,10 +12,12 @@ override_dh_auto_clean:\n \tif [ -f Makefile ]; then $(MAKE) distclean; fi\n \trm -rf Makefile.in aclocal.m4 configure src/Makefile.in src/bitcoin-config.h.in src/build-aux src/qt/Makefile.in src/qt/test/Makefile.in src/test/Makefile.in\n \n+QT=$(shell dpkg-vendor --derives-from Ubuntu && echo qt4 || echo qt5)\n+\n # Yea, autogen should be run on the source archive, but I like doing git archive\n override_dh_auto_configure:\n \t./autogen.sh\n-\t./configure --without-miniupnpc --with-gui=qt4\n+\t./configure --without-miniupnpc --with-gui=$(QT)\n \n override_dh_auto_test:\n \tmake check"
      }
    ]
  },
  {
    "sha": "6ad45b8f8bd1f33842160d109d391deae0d615e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWQ0NWI4ZjhiZDFmMzM4NDIxNjBkMTA5ZDM5MWRlYWUwZDYxNWU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-05T17:29:18Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-03T21:59:37Z"
      },
      "message": "Re-enable upnp support in contrib/debian\n\nGithub-Pull: #10328\nRebased-From: 91700aa1df57c1a9209284e743224119396604d5",
      "tree": {
        "sha": "b297358140592d84c3410b13b2656b8cc9667a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b297358140592d84c3410b13b2656b8cc9667a25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad45b8f8bd1f33842160d109d391deae0d615e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad45b8f8bd1f33842160d109d391deae0d615e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad45b8f8bd1f33842160d109d391deae0d615e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad45b8f8bd1f33842160d109d391deae0d615e7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9a0d89bf7593a1ae7ac9b059793281f0b754540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a0d89bf7593a1ae7ac9b059793281f0b754540",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a0d89bf7593a1ae7ac9b059793281f0b754540"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "33dab9b6388890a5ba10e47fcd3b833bb0875dc4",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad45b8f8bd1f33842160d109d391deae0d615e7/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad45b8f8bd1f33842160d109d391deae0d615e7/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=6ad45b8f8bd1f33842160d109d391deae0d615e7",
        "patch": "@@ -1,3 +1,9 @@\n+bitcoin (0.14.1-trusty4) trusty; urgency=medium\n+\n+  * Re-enable UPnP support.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 05 May 2017 13:28:00 -0400\n+\n bitcoin (0.14.1-trusty3) trusty; urgency=medium\n \n   * Build with qt5 if we are on a non-Ubuntu (ie non-Unity) distro."
      },
      {
        "sha": "0d6ad25e249fe9b7b89a738aba89c2ca1d495587",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad45b8f8bd1f33842160d109d391deae0d615e7/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad45b8f8bd1f33842160d109d391deae0d615e7/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=6ad45b8f8bd1f33842160d109d391deae0d615e7",
        "patch": "@@ -18,6 +18,7 @@ Build-Depends: debhelper,\n  libboost-thread1.48-dev | libboost-thread-dev (>> 1.47),\n  libboost-test1.48-dev | libboost-test-dev (>> 1.47),\n  libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.47),\n+ libminiupnpc8-dev | libminiupnpc-dev,\n  qt4-qmake, libqt4-dev,\n  qttools5-dev-tools, qttools5-dev,\n  libqrencode-dev,"
      },
      {
        "sha": "6885e3852126f17e910cbe4236b4f773a1fd8de6",
        "filename": "contrib/debian/rules",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad45b8f8bd1f33842160d109d391deae0d615e7/contrib/debian/rules",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad45b8f8bd1f33842160d109d391deae0d615e7/contrib/debian/rules",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/rules?ref=6ad45b8f8bd1f33842160d109d391deae0d615e7",
        "patch": "@@ -17,7 +17,7 @@ QT=$(shell dpkg-vendor --derives-from Ubuntu && echo qt4 || echo qt5)\n # Yea, autogen should be run on the source archive, but I like doing git archive\n override_dh_auto_configure:\n \t./autogen.sh\n-\t./configure --without-miniupnpc --with-gui=$(QT)\n+\t./configure --with-gui=$(QT)\n \n override_dh_auto_test:\n \tmake check"
      }
    ]
  },
  {
    "sha": "3ad00b4b32842e005af6378fd71eb9e293804cef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWQwMGI0YjMyODQyZTAwNWFmNjM3OGZkNzFlYjllMjkzODA0Y2Vm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T19:27:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:01:16Z"
      },
      "message": "Return correct error codes in bumpfee().\n\nThe bumpfee() RPC was returning misleading or incorrect error codes\n(for example RPC_INVALID_ADDRESS_OR_KEY when the transaction was not\nBIP125 replacable). This commit fixes those error codes:\n\n- RPC_INVALID_ADDRESS_OR_KEY if an invalid address was provided:\n    - Invalid change address given\n- RPC_INVALID_PARAMETER if a single (non-address/key) parameter is incorrect\n    - confTarget and totalFee options should not both be set.\n    - Invalid confTarget\n    - Insufficient totalFee (cannot be less than required fee)\n- RPC_WALLET_ERROR for any other error\n    - Transaction has descendants in the wallet\n    - Transaction has descendants in the mempool\n    - Transaction has been mined, or is conflicted with a mined transaction\n    - Transaction is not BIP 125 replaceable\n    - Transaction has already been bumped\n    - Transaction contains inputs that don't belong to the wallet\n    - Transaction has multiple change outputs\n    - Transaction does not have a change output\n    - Fee is higher than maxTxFee\n    - New fee rate is less than the minimum fee rate\n    - Change output is too small.\n\nThis commit also updates the test cases to explicitly test the error code.\n\nGithub-Pull: #9853\nRebased-From: 6d07c62322f60eb2702c6654e994fc353bcfcf8c",
      "tree": {
        "sha": "242da567d49ed86d274f1320368e4f16fb336ebd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/242da567d49ed86d274f1320368e4f16fb336ebd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ad00b4b32842e005af6378fd71eb9e293804cef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ad00b4b32842e005af6378fd71eb9e293804cef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ad00b4b32842e005af6378fd71eb9e293804cef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ad00b4b32842e005af6378fd71eb9e293804cef/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21e1ed48989e1d150e9f85770fd098534e0f81f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21e1ed48989e1d150e9f85770fd098534e0f81f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21e1ed48989e1d150e9f85770fd098534e0f81f1"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 20,
      "deletions": 22
    },
    "files": [
      {
        "sha": "7ed2beb176e7d9a086e532a092d944e39f89e691",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ad00b4b32842e005af6378fd71eb9e293804cef/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ad00b4b32842e005af6378fd71eb9e293804cef/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=3ad00b4b32842e005af6378fd71eb9e293804cef",
        "patch": "@@ -129,7 +129,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n-    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -149,7 +149,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -160,7 +160,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -175,7 +175,7 @@ def test_small_output_fails(rbf_node, dest_address):\n                             Decimal(\"0.00100000\"),\n                             {dest_address: 0.00080000,\n                              get_change_address(rbf_node): Decimal(\"0.00010000\")})\n-    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n+    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -210,15 +210,15 @@ def test_rebumping(rbf_node, dest_address):\n     rbf_node.settxfee(Decimal(\"0.00001000\"))\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n-    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_message(JSONRPCException, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -269,7 +269,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()\n-    assert_raises_message(JSONRPCException, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -316,9 +316,7 @@ def submit_block_with_tx(node, tx):\n     block.rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.solve()\n-    error = node.submitblock(bytes_to_hex_str(block.serialize(True)))\n-    if error is not None:\n-        raise Exception(error)\n+    node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block\n \n "
      },
      {
        "sha": "c141c0ca1593a0493de457a0449d446e326edcb1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ad00b4b32842e005af6378fd71eb9e293804cef/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ad00b4b32842e005af6378fd71eb9e293804cef/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3ad00b4b32842e005af6378fd71eb9e293804cef",
        "patch": "@@ -2603,7 +2603,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n \n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid bitcoin address\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"changeAddress must be a valid bitcoin address\");\n \n             changeAddress = address.Get();\n         }\n@@ -2756,33 +2756,33 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n     if (pwalletMain->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the wallet\");\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it = mempool.mapTx.find(hash);\n         if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the mempool\");\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n     }\n \n     if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n     }\n \n     // figure out which output was change\n@@ -2791,13 +2791,13 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n         if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n     }\n \n     // Calculate the expected size of the new transaction.\n@@ -2888,7 +2888,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n      if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_MISC_ERROR,\n+         throw JSONRPCError(RPC_WALLET_ERROR,\n                             strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n                                       FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n      }\n@@ -2900,7 +2900,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n     }\n \n     // Now modify the output to increase the fee.\n@@ -2910,7 +2910,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CMutableTransaction tx(*(wtx.tx));\n     CTxOut* poutput = &(tx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)"
      }
    ]
  },
  {
    "sha": "fe51c8924e62bf146a722f632324c99c2f97bc75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTUxYzg5MjRlNjJiZjE0NmE3MjJmNjMyMzI0Yzk5YzJmOTdiYzc1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T21:39:18Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:01:16Z"
      },
      "message": "Return correct error codes in blockchain.cpp.\n\nRPCs in blockchain.cpp were returning misleading or incorrect error\ncodes (for example getblock() returning RPC_INTERNAL_ERROR when the\nblock had been pruned). This commit fixes those error codes:\n\n- RPC_INTERNAL_ERROR should not be returned for application-level\n  errors, only for genuine internal errors such as corrupted data.\n- RPC_METHOD_NOT_FOUND should not be returned in response to a\n  JSON request for an existing method.\n\nThose error codes have been replaced with RPC_MISC_ERROR or\nRPC_INVALID_PARAMETER as appropriate.\n\nGithub-Pull: #9853\nRebased-From: c1190963b388590dc0a346bf625c7e84f69cee8d",
      "tree": {
        "sha": "04981c77e5cf65b1e66cafba77f3ad2a37cf7958",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04981c77e5cf65b1e66cafba77f3ad2a37cf7958"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe51c8924e62bf146a722f632324c99c2f97bc75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe51c8924e62bf146a722f632324c99c2f97bc75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe51c8924e62bf146a722f632324c99c2f97bc75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe51c8924e62bf146a722f632324c99c2f97bc75/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ad00b4b32842e005af6378fd71eb9e293804cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ad00b4b32842e005af6378fd71eb9e293804cef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ad00b4b32842e005af6378fd71eb9e293804cef"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 31,
      "deletions": 47
    },
    "files": [
      {
        "sha": "4ebf2766202beec126e2a1ab0a97cdd1817be137",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 9,
        "deletions": 21,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe51c8924e62bf146a722f632324c99c2f97bc75/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe51c8924e62bf146a722f632324c99c2f97bc75/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=fe51c8924e62bf146a722f632324c99c2f97bc75",
        "patch": "@@ -199,11 +199,8 @@ def run_test(self):\n                 assert_equal(x['status'], \"headers-only\")\n \n         # But this block should be accepted by node0 since it has more work.\n-        try:\n-            self.nodes[0].getblock(blocks_h3[0].hash)\n-            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n-        except:\n-            raise AssertionError(\"Unrequested more work block was not processed\")\n+        self.nodes[0].getblock(blocks_h3[0].hash)\n+        print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n@@ -227,26 +224,17 @@ def run_test(self):\n                 tips[j] = next_block\n \n         time.sleep(2)\n-        for x in all_blocks:\n-            try:\n-                self.nodes[0].getblock(x.hash)\n-                if x == all_blocks[287]:\n-                    raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n-            except:\n-                if x == all_blocks[287]:\n-                    print(\"Unrequested block too far-ahead not processed\")\n-                else:\n-                    raise AssertionError(\"Unrequested block with more work should have been accepted\")\n+        # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n+        for x in all_blocks[:-1]:\n+            self.nodes[0].getblock(x.hash)\n+        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip\n         white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        try:\n-            white_node.sync_with_ping()\n-            self.nodes[1].getblock(tips[1].hash)\n-            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n-        except:\n-            raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n+        white_node.sync_with_ping()\n+        self.nodes[1].getblock(tips[1].hash)\n+        print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n \n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more"
      },
      {
        "sha": "3308bd1dc5e8993f96e1f3ec383a3367d3f2661b",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 11,
        "deletions": 20,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe51c8924e62bf146a722f632324c99c2f97bc75/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe51c8924e62bf146a722f632324c99c2f97bc75/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fe51c8924e62bf146a722f632324c99c2f97bc75",
        "patch": "@@ -186,11 +186,8 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        try:\n-            self.nodes[2].getblock(self.forkhash)\n-            raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n-        except JSONRPCException as e:\n-            print(\"Will need to redownload block\",self.forkheight)\n+        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -235,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_message(JSONRPCException, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n         self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n@@ -267,14 +264,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_message(JSONRPCException, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_message(JSONRPCException, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)\n@@ -320,25 +317,19 @@ def has_block(index):\n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         print(\"Stop and start pruning node to trigger wallet rescan\")\n-        try:\n-            self.stop_node(2)\n-            start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n-            print(\"Success\")\n-        except Exception as detail:\n-            raise AssertionError(\"Wallet test: unable to re-start the pruning node\")\n+        self.stop_node(2)\n+        start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n+        print(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         print (\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n-        try:\n-            self.stop_node(5) #stop and start to trigger rescan\n-            start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n-            print (\"Success\")\n-        except Exception as detail:\n-            raise AssertionError(\"Wallet test: unable to re-start node5\")\n+        self.stop_node(5) #stop and start to trigger rescan\n+        start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n+        print (\"Success\")\n \n     def run_test(self):\n         print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")"
      },
      {
        "sha": "6080650f89876fe975391c0856b4064a6b62d755",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe51c8924e62bf146a722f632324c99c2f97bc75/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe51c8924e62bf146a722f632324c99c2f97bc75/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fe51c8924e62bf146a722f632324c99c2f97bc75",
        "patch": "@@ -744,10 +744,15 @@ UniValue getblock(const JSONRPCRequest& request)\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n \n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n \n-    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+        // Block not found on disk. This could be because we have the block\n+        // header in our index but don't have the block (for example if a\n+        // non-whitelisted node sends us an unrequested long chain of valid\n+        // blocks, we add the headers to our index, but don't accept the\n+        // block).\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not found on disk\");\n \n     if (!fVerbose)\n     {\n@@ -829,7 +834,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n \n     if (!fPruneMode)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Cannot prune blocks because node is not in prune mode.\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     LOCK(cs_main);\n \n@@ -843,15 +848,15 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n         CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n         if (!pindex) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }\n \n     unsigned int height = (unsigned int) heightParam;\n     unsigned int chainHeight = (unsigned int) chainActive.Height();\n     if (chainHeight < Params().PruneAfterHeight())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Blockchain is too short for pruning.\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Blockchain is shorter than the attempted prune height.\");\n     else if (height > chainHeight - MIN_BLOCKS_TO_KEEP) {"
      }
    ]
  },
  {
    "sha": "18c109ddb10e8f2e1075ee4078519cfefd4de47d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGMxMDlkZGIxMGU4ZjJlMTA3NWVlNDA3ODUxOWNmZWZkNGRlNDdk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T21:27:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:01:16Z"
      },
      "message": "Return correct error codes in removeprunedfunds().\n\nThe removeprunedfunds() RPC was returning misleading or incorrect error\ncodes (for example RPC_INTERNAL_ERROR when the transaction was\nnot found in the wallet). This commit fixes those error codes:\n\n- RPC_INTERNAL_ERROR should not be returned for application-level\nerrors, only for genuine internal errors such as corrupted data.\n\nThis error code has been replaced with RPC_WALLET_ERROR.\n\nThis commit also updates the test cases to explicitly test the error code.\n\nGithub-Pull: #9853\nRebased-From: 960bc7f778d8dd618e65f1e37ec734e2d4734051",
      "tree": {
        "sha": "be5ac35545f41f0ae0f63a455bd3858087aedf0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be5ac35545f41f0ae0f63a455bd3858087aedf0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18c109ddb10e8f2e1075ee4078519cfefd4de47d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c109ddb10e8f2e1075ee4078519cfefd4de47d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18c109ddb10e8f2e1075ee4078519cfefd4de47d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c109ddb10e8f2e1075ee4078519cfefd4de47d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe51c8924e62bf146a722f632324c99c2f97bc75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe51c8924e62bf146a722f632324c99c2f97bc75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe51c8924e62bf146a722f632324c99c2f97bc75"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 4,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b289f9be5756f0ff54d7b662503167576308bd2d",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c109ddb10e8f2e1075ee4078519cfefd4de47d/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c109ddb10e8f2e1075ee4078519cfefd4de47d/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=18c109ddb10e8f2e1075ee4078519cfefd4de47d",
        "patch": "@@ -76,12 +76,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        try:\n-            self.nodes[1].importprunedfunds(rawtxn1, proof1)\n-        except JSONRPCException as e:\n-            assert('No addresses' in e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -112,12 +107,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        try:\n-            self.nodes[1].removeprunedfunds(txnid1)\n-        except JSONRPCException as e:\n-            assert('does not exist' in e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "dc61a4505ed88db3bda65a69705877d8b9586862",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c109ddb10e8f2e1075ee4078519cfefd4de47d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c109ddb10e8f2e1075ee4078519cfefd4de47d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=18c109ddb10e8f2e1075ee4078519cfefd4de47d",
        "patch": "@@ -340,11 +340,11 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     vector<uint256> vHashOut;\n \n     if(pwalletMain->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Could not properly delete the transaction.\");\n     }\n \n     if(vHashOut.empty()) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction does not exist in wallet.\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction does not exist in wallet.\");\n     }\n \n     return NullUniValue;"
      }
    ]
  },
  {
    "sha": "4943d7a9feb8e4f5461622f548032e53eb714175",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTQzZDdhOWZlYjhlNGY1NDYxNjIyZjU0ODAzMmU1M2ViNzE0MTc1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T17:57:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:01:16Z"
      },
      "message": "Return correct error codes in setban().\n\nThe setban() RPC was returning misleading or incorrect error\ncodes (for example RPC_CLIENT_NODE_ALREADY_ADDED when an invalid IP\naddress was entered). This commit fixes those error codes:\n\n- RPC_CLIENT_INVALID_IP_OR_SUBNET should be returned if the client\n  enters an invalid IP address or subnet.\n\nThis commit also updates the test cases to explicitly test the error code.\n\nThis commit also adds a testcase for trying to setban on an invalid subnet.\n\nGithub-Pull: #9853\nRebased-From: a012087667edb35a36f25ae06b42b1644d80e649",
      "tree": {
        "sha": "db2ede0515024288004c5181118b281be31706a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db2ede0515024288004c5181118b281be31706a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4943d7a9feb8e4f5461622f548032e53eb714175",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4943d7a9feb8e4f5461622f548032e53eb714175",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4943d7a9feb8e4f5461622f548032e53eb714175",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4943d7a9feb8e4f5461622f548032e53eb714175/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18c109ddb10e8f2e1075ee4078519cfefd4de47d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c109ddb10e8f2e1075ee4078519cfefd4de47d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18c109ddb10e8f2e1075ee4078519cfefd4de47d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "634dba7c8e623155bbe252b071e9e032e30406df",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4943d7a9feb8e4f5461622f548032e53eb714175/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4943d7a9feb8e4f5461622f548032e53eb714175/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=4943d7a9feb8e4f5461622f548032e53eb714175",
        "patch": "@@ -32,15 +32,13 @@ def run_test(self):\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n         self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n-        except:\n-            pass\n+        # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n+        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n+        # This will throw an exception because 127.0.0.1/42 is not a real subnet\n+        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n-        except:\n-            pass\n+        # This will throw an exception because 127.0.0.1 was not added above\n+        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n         self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 0)"
      },
      {
        "sha": "42f5db94f94610f3af0547d7a8dd75a1c6de4d21",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4943d7a9feb8e4f5461622f548032e53eb714175/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4943d7a9feb8e4f5461622f548032e53eb714175/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4943d7a9feb8e4f5461622f548032e53eb714175",
        "patch": "@@ -506,7 +506,7 @@ UniValue setban(const JSONRPCRequest& request)\n         LookupSubNet(request.params[0].get_str().c_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n-        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n+        throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Invalid IP/Subnet\");\n \n     if (strCommand == \"add\")\n     {\n@@ -526,7 +526,7 @@ UniValue setban(const JSONRPCRequest& request)\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? g_connman->Unban(subNet) : g_connman->Unban(netAddr) ))\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n+            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n     }\n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "f5efe82a832a050d1e8f483904913d238dde2e93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWVmZTgyYTgzMmEwNTBkMWU4ZjQ4MzkwNDkxM2QyMzhkZGUyZTkz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T20:48:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:01:16Z"
      },
      "message": "Return correct error codes in fundrawtransaction().\n\nThe fundrawtransaction() RPC was returning misleading or incorrect error\ncodes (for example RPC_INTERNAL_ERROR when funding the transaction\nfailed). This commit fixes those error codes:\n\n- RPC_INTERNAL_ERROR should not be returned for application-level\nerrors, only for genuine internal errors such as corrupted data.\n\nThat error code has been replaced with RPC_WALLET_ERROR.\n\nThis commit also updates the test cases to explicitly test the error code.\n\nGithub-Pull: #9853\nRebased-From: dab804c18a427901684ebe936b2069a97e04a268",
      "tree": {
        "sha": "fe3477c6002175c401abcdc76f3c7a61b14248fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe3477c6002175c401abcdc76f3c7a61b14248fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5efe82a832a050d1e8f483904913d238dde2e93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efe82a832a050d1e8f483904913d238dde2e93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5efe82a832a050d1e8f483904913d238dde2e93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efe82a832a050d1e8f483904913d238dde2e93/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4943d7a9feb8e4f5461622f548032e53eb714175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4943d7a9feb8e4f5461622f548032e53eb714175",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4943d7a9feb8e4f5461622f548032e53eb714175"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 16,
      "deletions": 47
    },
    "files": [
      {
        "sha": "511faf740eb545fe5618300ebfc36bd8ba178394",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 34,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efe82a832a050d1e8f483904913d238dde2e93/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efe82a832a050d1e8f483904913d238dde2e93/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=f5efe82a832a050d1e8f483904913d238dde2e93",
        "patch": "@@ -186,12 +186,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        try:\n-            self.nodes[2].fundrawtransaction(rawtx, {'foo': 'bar'})\n-            raise AssertionError(\"Accepted invalid option foo\")\n-        except JSONRPCException as e:\n-            assert(\"Unexpected key foo\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -204,12 +199,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        try:\n-            self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n-            raise AssertionError(\"Accepted invalid bitcoin address\")\n-        except JSONRPCException as e:\n-            assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -223,12 +213,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 2})\n-        except JSONRPCException as e:\n-            assert('changePosition out of bounds' == e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -337,12 +322,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-            raise AssertionError(\"Spent more than available\")\n-        except JSONRPCException as e:\n-            assert(\"Insufficient\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -498,21 +478,13 @@ def run_test(self):\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        try:\n-            fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-            raise AssertionError(\"Wallet unlocked without passphrase\")\n-        except JSONRPCException as e:\n-            assert('Keypool ran out' in e.error['message'])\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].walletlock()\n \n-        try:\n-            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2)\n-            raise AssertionError(\"Wallet unlocked without passphrase\")\n-        except JSONRPCException as e:\n-            assert('walletpassphrase' in e.error['message'])\n+        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "2e27bbabb03e75c5497d2dd4aba1d2cc86116c99",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efe82a832a050d1e8f483904913d238dde2e93/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efe82a832a050d1e8f483904913d238dde2e93/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=f5efe82a832a050d1e8f483904913d238dde2e93",
        "patch": "@@ -61,13 +61,8 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n-        try:\n-            rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n-        except JSONRPCException as e:\n-            assert(\"Missing inputs\" in e.error['message'])\n-        else:\n-            assert(False)\n-\n+        # This will raise an exception since there are missing inputs\n+        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -161,27 +156,29 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n         decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n         \n+        # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n         \n+        # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n         \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "7cc0320165013a967f2fb5a8c3d29fa61ca37d46",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efe82a832a050d1e8f483904913d238dde2e93/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efe82a832a050d1e8f483904913d238dde2e93/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f5efe82a832a050d1e8f483904913d238dde2e93",
        "patch": "@@ -2657,7 +2657,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     string strFailReason;\n \n     if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", EncodeHexTx(tx)));"
      }
    ]
  },
  {
    "sha": "c25d0a8739cfcb736ddbf4a5204f25830842eb46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjVkMGE4NzM5Y2ZjYjczNmRkYmY0YTUyMDRmMjU4MzA4NDJlYjQ2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-08T19:23:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:02:01Z"
      },
      "message": "Update release notes to include RPC error code changes.\n\nGithub-Pull: #9853\nRebased-From: adaa281da12bcc697779f97973cea6b103eec4ab",
      "tree": {
        "sha": "0b821b8c483886eed81144274185981e8aac9b49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b821b8c483886eed81144274185981e8aac9b49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c25d0a8739cfcb736ddbf4a5204f25830842eb46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d0a8739cfcb736ddbf4a5204f25830842eb46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c25d0a8739cfcb736ddbf4a5204f25830842eb46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d0a8739cfcb736ddbf4a5204f25830842eb46/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5efe82a832a050d1e8f483904913d238dde2e93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efe82a832a050d1e8f483904913d238dde2e93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5efe82a832a050d1e8f483904913d238dde2e93"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "248c2f15258aea32898216298f555ab55103a2a4",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c25d0a8739cfcb736ddbf4a5204f25830842eb46/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c25d0a8739cfcb736ddbf4a5204f25830842eb46/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c25d0a8739cfcb736ddbf4a5204f25830842eb46",
        "patch": "@@ -30,6 +30,55 @@ frequently tested on them.\n Notable changes\n ===============\n \n+Low-level RPC changes\n+---------------------\n+\n+- Error codes have been updated to be more accurate for the following error cases:\n+  - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for\n+  example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.\n+  - `pruneblockchain` now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned\n+  because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address\n+  or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban\n+  a node that has not previously been banned. Previously returned RPC_MISC_ERROR.\n+  - `removeprunedfunds` now returns RPC_WALLET_ERROR if bitcoind is unable to remove\n+  the transaction. Previously returned RPC_INTERNAL_ERROR.\n+  - `removeprunedfunds` now returns RPC_INVALID_PARAMETER if the transaction does not\n+  exist in the wallet. Previously returned RPC_INTERNAL_ERROR.\n+  - `fundrawtransaction` now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change\n+  address is provided. Previously returned RPC_INVALID_PARAMETER.\n+  - `fundrawtransaction` now returns RPC_WALLET_ERROR if bitcoind is unable to create\n+  the transaction. The error message provides further details. Previously returned\n+  RPC_INTERNAL_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the wallet. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the mempool. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has\n+  has been mined or conflicts with a mined transaction. Previously returned\n+  RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction is not\n+  BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has already\n+  been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction contains\n+  inputs which don't belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has multiple change\n+  outputs. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has no change\n+  output. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too high. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too low. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n+  fee. Previously returned RPC_MISC_ERROR.\n+\n miniupnp CVE-2017-8798\n ----------------------------\n "
      }
    ]
  },
  {
    "sha": "5bc75bb8eea566258ddd9c858e2cf6361318d777",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmM3NWJiOGVlYTU2NjI1OGRkZDljODU4ZTJjZjYzNjEzMThkNzc3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T15:07:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:26:13Z"
      },
      "message": "[tests] fix nodehandling.py flake8 warnings\n\nGithub-Pull: #10143\nRebased-From: d6564a26f4afc28d7d1a24b94946916387c9bf24",
      "tree": {
        "sha": "ac998dd64aaf57384620a601460df109a6f67c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac998dd64aaf57384620a601460df109a6f67c74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bc75bb8eea566258ddd9c858e2cf6361318d777",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bc75bb8eea566258ddd9c858e2cf6361318d777",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bc75bb8eea566258ddd9c858e2cf6361318d777",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bc75bb8eea566258ddd9c858e2cf6361318d777/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c25d0a8739cfcb736ddbf4a5204f25830842eb46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d0a8739cfcb736ddbf4a5204f25830842eb46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c25d0a8739cfcb736ddbf4a5204f25830842eb46"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "95dec42fe0991abd6b49e376ac7739aae474c292",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bc75bb8eea566258ddd9c858e2cf6361318d777/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bc75bb8eea566258ddd9c858e2cf6361318d777/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=5bc75bb8eea566258ddd9c858e2cf6361318d777",
        "patch": "@@ -6,13 +6,19 @@\n #\n # Test node handling\n #\n+import time\n+import urllib.parse\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-import urllib.parse\n+from test_framework.util import (assert_equal,\n+                                 assert_raises_jsonrpc,\n+                                 connect_nodes_bi,\n+                                 p2p_port,\n+                                 start_node,\n+                                 stop_node,\n+                                 )\n \n-class NodeHandlingTest (BitcoinTestFramework):\n+class NodeHandlingTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n@@ -23,10 +29,10 @@ def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n         ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 4)  # we should have 4 nodes at this point\n         self.nodes[2].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3) #wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n+        time.sleep(3)  # wait till the nodes are disconected\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n         self.nodes[2].clearbanned()\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n@@ -36,7 +42,7 @@ def run_test(self):\n         assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n         # This will throw an exception because 127.0.0.1/42 is not a real subnet\n         assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        assert_equal(len(self.nodes[2].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n         # This will throw an exception because 127.0.0.1 was not added above\n         assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n@@ -45,16 +51,16 @@ def run_test(self):\n         self.nodes[2].clearbanned()\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n \n-        ##test persisted banlist\n+        # test persisted banlist\n         self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n         self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n-        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n+        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n+        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n         listBeforeShutdown = self.nodes[2].listbanned()\n-        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address']) #must be here\n-        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n+        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])  # must be here\n+        time.sleep(2)  # make 100% sure we expired 192.168.0.1 node time\n \n-        #stop node\n+        # stop node\n         stop_node(self.nodes[2], 2)\n \n         self.nodes[2] = start_node(2, self.options.tmpdir)\n@@ -67,17 +73,17 @@ def run_test(self):\n         # RPC disconnectnode test #\n         ###########################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n-        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n-        time.sleep(2) #disconnecting a node needs a little bit of time\n+        self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n+        time.sleep(2)  # disconnecting a node needs a little bit of time\n         for node in self.nodes[0].getpeerinfo():\n-            assert(node['addr'] != url.hostname+\":\"+str(p2p_port(1)))\n+            assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n \n-        connect_nodes_bi(self.nodes,0,1) #reconnect the node\n+        connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n         found = False\n         for node in self.nodes[0].getpeerinfo():\n-            if node['addr'] == url.hostname+\":\"+str(p2p_port(1)):\n+            if node['addr'] == url.hostname + \":\" + str(p2p_port(1)):\n                 found = True\n         assert(found)\n \n if __name__ == '__main__':\n-    NodeHandlingTest ().main ()\n+    NodeHandlingTest().main()"
      }
    ]
  },
  {
    "sha": "bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmQxY2Y2NzEzZjFmNDRiODhiMTM1Yzk5NWI5ZGRiOWU5OWZmN2Fh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T15:25:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:26:13Z"
      },
      "message": "[tests] disconnectban test - only use two nodes\n\nGithub-Pull: #10143\nRebased-From: 395561becfa612fedec74fd841cb4f28afdc23d7",
      "tree": {
        "sha": "981a1141f9f8e8e18e9d31db827b0a2f1efa54f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981a1141f9f8e8e18e9d31db827b0a2f1efa54f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bc75bb8eea566258ddd9c858e2cf6361318d777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bc75bb8eea566258ddd9c858e2cf6361318d777",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bc75bb8eea566258ddd9c858e2cf6361318d777"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 34,
      "deletions": 26
    },
    "files": [
      {
        "sha": "ec32cb069fbbf5bb5241268cd2d0427d27059e59",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 34,
        "deletions": 26,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
        "patch": "@@ -22,53 +22,61 @@ class NodeHandlingTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 4\n+        self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def setup_network(self):\n+        self.nodes = self.setup_nodes()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n     def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n         ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4)  # we should have 4 nodes at this point\n-        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n+        self.nodes[1].setban(\"127.0.0.1\", \"add\")\n         time.sleep(3)  # wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n+        self.nodes[1].clearbanned()\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n         # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n         # This will throw an exception because 127.0.0.1/42 is not a real subnet\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n         # This will throw an exception because 127.0.0.1 was not added above\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"remove\")\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n+        self.nodes[1].clearbanned()\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n \n         # test persisted banlist\n-        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n-        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n-        listBeforeShutdown = self.nodes[2].listbanned()\n+        self.nodes[1].setban(\"127.0.0.0/32\", \"add\")\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+        self.nodes[1].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n+        self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n+        listBeforeShutdown = self.nodes[1].listbanned()\n         assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])  # must be here\n         time.sleep(2)  # make 100% sure we expired 192.168.0.1 node time\n \n         # stop node\n-        stop_node(self.nodes[2], 2)\n+        stop_node(self.nodes[1], 1)\n \n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n-        listAfterShutdown = self.nodes[2].listbanned()\n+        self.nodes[1] = start_node(1, self.options.tmpdir)\n+        listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])\n         assert_equal(\"/19\" in listAfterShutdown[2]['address'], True)\n \n+        # Clear ban lists\n+        self.nodes[1].clearbanned()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n         ###########################\n         # RPC disconnectnode test #\n         ###########################"
      }
    ]
  },
  {
    "sha": "74653a41fee027b1c85b229a2d7460bb862c6b02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDY1M2E0MWZlZTAyN2IxYzg1YjIyOWEyZDc0NjBiYjg2MmM2YjAy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:32:56Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:33:01Z"
      },
      "message": "Merge #10196 via branch 'prioritisetx_gbtcache-0.14' into 0.14.2_fixes",
      "tree": {
        "sha": "a0c68f3d637aad0ae6daacf1ef7752e0d56e77ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0c68f3d637aad0ae6daacf1ef7752e0d56e77ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74653a41fee027b1c85b229a2d7460bb862c6b02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74653a41fee027b1c85b229a2d7460bb862c6b02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74653a41fee027b1c85b229a2d7460bb862c6b02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74653a41fee027b1c85b229a2d7460bb862c6b02/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21e1ed48989e1d150e9f85770fd098534e0f81f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21e1ed48989e1d150e9f85770fd098534e0f81f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21e1ed48989e1d150e9f85770fd098534e0f81f1"
      },
      {
        "sha": "71463a7d18bb143da62e790f9194193dfaf8f320",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71463a7d18bb143da62e790f9194193dfaf8f320",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71463a7d18bb143da62e790f9194193dfaf8f320"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "16874a6b53ba34da27ebe88ae6866899229d7339",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74653a41fee027b1c85b229a2d7460bb862c6b02/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74653a41fee027b1c85b229a2d7460bb862c6b02/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=74653a41fee027b1c85b229a2d7460bb862c6b02",
        "patch": "@@ -16,7 +16,7 @@ class PrioritiseTransactionTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n \n         self.txouts = gen_return_txouts()\n \n@@ -25,8 +25,11 @@ def setup_network(self):\n         self.is_network_split = False\n \n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        connect_nodes(self.nodes[0], 1)\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n+\n     def run_test(self):\n         utxo_count = 90\n         utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], utxo_count)\n@@ -139,5 +142,16 @@ def run_test(self):\n         assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n         assert(tx2_id in self.nodes[0].getrawmempool())\n \n+        # Test that calling prioritisetransaction is sufficient to trigger\n+        # getblocktemplate to (eventually) return a new block.\n+        mock_time = int(time.time())\n+        self.nodes[0].setmocktime(mock_time)\n+        template = self.nodes[0].getblocktemplate()\n+        self.nodes[0].prioritisetransaction(txid, 0, -int(self.relayfee*COIN))\n+        self.nodes[0].setmocktime(mock_time+10)\n+        new_template = self.nodes[0].getblocktemplate()\n+\n+        assert(template != new_template)\n+\n if __name__ == '__main__':\n     PrioritiseTransactionTest().main()"
      },
      {
        "sha": "72547b58282b2d931303f607d43c18ee77b8400b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74653a41fee027b1c85b229a2d7460bb862c6b02/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74653a41fee027b1c85b229a2d7460bb862c6b02/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=74653a41fee027b1c85b229a2d7460bb862c6b02",
        "patch": "@@ -945,6 +945,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string str\n             BOOST_FOREACH(txiter descendantIt, setDescendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n             }\n+            ++nTransactionsUpdated;\n         }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));"
      },
      {
        "sha": "12c9e59f5f08cb8d6b3613496324b361bbae7ef9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74653a41fee027b1c85b229a2d7460bb862c6b02/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74653a41fee027b1c85b229a2d7460bb862c6b02/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=74653a41fee027b1c85b229a2d7460bb862c6b02",
        "patch": "@@ -432,7 +432,7 @@ class CTxMemPool\n {\n private:\n     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n-    unsigned int nTransactionsUpdated;\n+    unsigned int nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141."
      }
    ]
  },
  {
    "sha": "99e5dbd0aa4304918b4fcfe125c4479c04eede40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWU1ZGJkMGFhNDMwNDkxOGI0ZmNmZTEyNWM0NDc5YzA0ZWVkZTQw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:33:18Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T19:33:18Z"
      },
      "message": "Merge #9853 via branch 'fixerrorcodes-0.14' into 0.14.2_fixes",
      "tree": {
        "sha": "050a12222152d1ab0a2c09da8cf822188e34b15b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/050a12222152d1ab0a2c09da8cf822188e34b15b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99e5dbd0aa4304918b4fcfe125c4479c04eede40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e5dbd0aa4304918b4fcfe125c4479c04eede40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99e5dbd0aa4304918b4fcfe125c4479c04eede40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e5dbd0aa4304918b4fcfe125c4479c04eede40/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74653a41fee027b1c85b229a2d7460bb862c6b02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74653a41fee027b1c85b229a2d7460bb862c6b02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74653a41fee027b1c85b229a2d7460bb862c6b02"
      },
      {
        "sha": "c25d0a8739cfcb736ddbf4a5204f25830842eb46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d0a8739cfcb736ddbf4a5204f25830842eb46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c25d0a8739cfcb736ddbf4a5204f25830842eb46"
      }
    ],
    "stats": {
      "total": 268,
      "additions": 128,
      "deletions": 140
    },
    "files": [
      {
        "sha": "248c2f15258aea32898216298f555ab55103a2a4",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -30,6 +30,55 @@ frequently tested on them.\n Notable changes\n ===============\n \n+Low-level RPC changes\n+---------------------\n+\n+- Error codes have been updated to be more accurate for the following error cases:\n+  - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for\n+  example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.\n+  - `pruneblockchain` now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned\n+  because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address\n+  or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban\n+  a node that has not previously been banned. Previously returned RPC_MISC_ERROR.\n+  - `removeprunedfunds` now returns RPC_WALLET_ERROR if bitcoind is unable to remove\n+  the transaction. Previously returned RPC_INTERNAL_ERROR.\n+  - `removeprunedfunds` now returns RPC_INVALID_PARAMETER if the transaction does not\n+  exist in the wallet. Previously returned RPC_INTERNAL_ERROR.\n+  - `fundrawtransaction` now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change\n+  address is provided. Previously returned RPC_INVALID_PARAMETER.\n+  - `fundrawtransaction` now returns RPC_WALLET_ERROR if bitcoind is unable to create\n+  the transaction. The error message provides further details. Previously returned\n+  RPC_INTERNAL_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the wallet. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the mempool. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has\n+  has been mined or conflicts with a mined transaction. Previously returned\n+  RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction is not\n+  BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has already\n+  been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction contains\n+  inputs which don't belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has multiple change\n+  outputs. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has no change\n+  output. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too high. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too low. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n+  fee. Previously returned RPC_MISC_ERROR.\n+\n miniupnp CVE-2017-8798\n ----------------------------\n "
      },
      {
        "sha": "7ed2beb176e7d9a086e532a092d944e39f89e691",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -129,7 +129,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n-    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -149,7 +149,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -160,7 +160,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -175,7 +175,7 @@ def test_small_output_fails(rbf_node, dest_address):\n                             Decimal(\"0.00100000\"),\n                             {dest_address: 0.00080000,\n                              get_change_address(rbf_node): Decimal(\"0.00010000\")})\n-    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n+    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -210,15 +210,15 @@ def test_rebumping(rbf_node, dest_address):\n     rbf_node.settxfee(Decimal(\"0.00001000\"))\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n-    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_message(JSONRPCException, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -269,7 +269,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()\n-    assert_raises_message(JSONRPCException, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -316,9 +316,7 @@ def submit_block_with_tx(node, tx):\n     block.rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.solve()\n-    error = node.submitblock(bytes_to_hex_str(block.serialize(True)))\n-    if error is not None:\n-        raise Exception(error)\n+    node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block\n \n "
      },
      {
        "sha": "511faf740eb545fe5618300ebfc36bd8ba178394",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 34,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -186,12 +186,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        try:\n-            self.nodes[2].fundrawtransaction(rawtx, {'foo': 'bar'})\n-            raise AssertionError(\"Accepted invalid option foo\")\n-        except JSONRPCException as e:\n-            assert(\"Unexpected key foo\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -204,12 +199,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        try:\n-            self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n-            raise AssertionError(\"Accepted invalid bitcoin address\")\n-        except JSONRPCException as e:\n-            assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -223,12 +213,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 2})\n-        except JSONRPCException as e:\n-            assert('changePosition out of bounds' == e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -337,12 +322,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-            raise AssertionError(\"Spent more than available\")\n-        except JSONRPCException as e:\n-            assert(\"Insufficient\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -498,21 +478,13 @@ def run_test(self):\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        try:\n-            fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-            raise AssertionError(\"Wallet unlocked without passphrase\")\n-        except JSONRPCException as e:\n-            assert('Keypool ran out' in e.error['message'])\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].walletlock()\n \n-        try:\n-            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2)\n-            raise AssertionError(\"Wallet unlocked without passphrase\")\n-        except JSONRPCException as e:\n-            assert('walletpassphrase' in e.error['message'])\n+        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "b289f9be5756f0ff54d7b662503167576308bd2d",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -76,12 +76,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        try:\n-            self.nodes[1].importprunedfunds(rawtxn1, proof1)\n-        except JSONRPCException as e:\n-            assert('No addresses' in e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -112,12 +107,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        try:\n-            self.nodes[1].removeprunedfunds(txnid1)\n-        except JSONRPCException as e:\n-            assert('does not exist' in e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "634dba7c8e623155bbe252b071e9e032e30406df",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -32,15 +32,13 @@ def run_test(self):\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n         self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n-        except:\n-            pass\n+        # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n+        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n+        # This will throw an exception because 127.0.0.1/42 is not a real subnet\n+        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n-        except:\n-            pass\n+        # This will throw an exception because 127.0.0.1 was not added above\n+        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n         self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 0)"
      },
      {
        "sha": "4ebf2766202beec126e2a1ab0a97cdd1817be137",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 9,
        "deletions": 21,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -199,11 +199,8 @@ def run_test(self):\n                 assert_equal(x['status'], \"headers-only\")\n \n         # But this block should be accepted by node0 since it has more work.\n-        try:\n-            self.nodes[0].getblock(blocks_h3[0].hash)\n-            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n-        except:\n-            raise AssertionError(\"Unrequested more work block was not processed\")\n+        self.nodes[0].getblock(blocks_h3[0].hash)\n+        print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n@@ -227,26 +224,17 @@ def run_test(self):\n                 tips[j] = next_block\n \n         time.sleep(2)\n-        for x in all_blocks:\n-            try:\n-                self.nodes[0].getblock(x.hash)\n-                if x == all_blocks[287]:\n-                    raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n-            except:\n-                if x == all_blocks[287]:\n-                    print(\"Unrequested block too far-ahead not processed\")\n-                else:\n-                    raise AssertionError(\"Unrequested block with more work should have been accepted\")\n+        # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n+        for x in all_blocks[:-1]:\n+            self.nodes[0].getblock(x.hash)\n+        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip\n         white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        try:\n-            white_node.sync_with_ping()\n-            self.nodes[1].getblock(tips[1].hash)\n-            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n-        except:\n-            raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n+        white_node.sync_with_ping()\n+        self.nodes[1].getblock(tips[1].hash)\n+        print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n \n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more"
      },
      {
        "sha": "3308bd1dc5e8993f96e1f3ec383a3367d3f2661b",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 11,
        "deletions": 20,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -186,11 +186,8 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        try:\n-            self.nodes[2].getblock(self.forkhash)\n-            raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n-        except JSONRPCException as e:\n-            print(\"Will need to redownload block\",self.forkheight)\n+        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -235,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_message(JSONRPCException, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n         self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n@@ -267,14 +264,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_message(JSONRPCException, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_message(JSONRPCException, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)\n@@ -320,25 +317,19 @@ def has_block(index):\n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         print(\"Stop and start pruning node to trigger wallet rescan\")\n-        try:\n-            self.stop_node(2)\n-            start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n-            print(\"Success\")\n-        except Exception as detail:\n-            raise AssertionError(\"Wallet test: unable to re-start the pruning node\")\n+        self.stop_node(2)\n+        start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n+        print(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         print (\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n-        try:\n-            self.stop_node(5) #stop and start to trigger rescan\n-            start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n-            print (\"Success\")\n-        except Exception as detail:\n-            raise AssertionError(\"Wallet test: unable to re-start node5\")\n+        self.stop_node(5) #stop and start to trigger rescan\n+        start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n+        print (\"Success\")\n \n     def run_test(self):\n         print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")"
      },
      {
        "sha": "2e27bbabb03e75c5497d2dd4aba1d2cc86116c99",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -61,13 +61,8 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n-        try:\n-            rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n-        except JSONRPCException as e:\n-            assert(\"Missing inputs\" in e.error['message'])\n-        else:\n-            assert(False)\n-\n+        # This will raise an exception since there are missing inputs\n+        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -161,27 +156,29 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n         decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n         \n+        # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n         \n+        # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n         \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "6080650f89876fe975391c0856b4064a6b62d755",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -744,10 +744,15 @@ UniValue getblock(const JSONRPCRequest& request)\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n \n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n \n-    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+        // Block not found on disk. This could be because we have the block\n+        // header in our index but don't have the block (for example if a\n+        // non-whitelisted node sends us an unrequested long chain of valid\n+        // blocks, we add the headers to our index, but don't accept the\n+        // block).\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not found on disk\");\n \n     if (!fVerbose)\n     {\n@@ -829,7 +834,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n \n     if (!fPruneMode)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Cannot prune blocks because node is not in prune mode.\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     LOCK(cs_main);\n \n@@ -843,15 +848,15 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n         CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n         if (!pindex) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }\n \n     unsigned int height = (unsigned int) heightParam;\n     unsigned int chainHeight = (unsigned int) chainActive.Height();\n     if (chainHeight < Params().PruneAfterHeight())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Blockchain is too short for pruning.\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Blockchain is shorter than the attempted prune height.\");\n     else if (height > chainHeight - MIN_BLOCKS_TO_KEEP) {"
      },
      {
        "sha": "42f5db94f94610f3af0547d7a8dd75a1c6de4d21",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -506,7 +506,7 @@ UniValue setban(const JSONRPCRequest& request)\n         LookupSubNet(request.params[0].get_str().c_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n-        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n+        throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Invalid IP/Subnet\");\n \n     if (strCommand == \"add\")\n     {\n@@ -526,7 +526,7 @@ UniValue setban(const JSONRPCRequest& request)\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? g_connman->Unban(subNet) : g_connman->Unban(netAddr) ))\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n+            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n     }\n     return NullUniValue;\n }"
      },
      {
        "sha": "dc61a4505ed88db3bda65a69705877d8b9586862",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -340,11 +340,11 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     vector<uint256> vHashOut;\n \n     if(pwalletMain->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Could not properly delete the transaction.\");\n     }\n \n     if(vHashOut.empty()) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction does not exist in wallet.\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction does not exist in wallet.\");\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "7cc0320165013a967f2fb5a8c3d29fa61ca37d46",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e5dbd0aa4304918b4fcfe125c4479c04eede40/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "patch": "@@ -2603,7 +2603,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n \n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid bitcoin address\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"changeAddress must be a valid bitcoin address\");\n \n             changeAddress = address.Get();\n         }\n@@ -2657,7 +2657,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     string strFailReason;\n \n     if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n@@ -2756,33 +2756,33 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n     if (pwalletMain->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the wallet\");\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it = mempool.mapTx.find(hash);\n         if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the mempool\");\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n     }\n \n     if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n     }\n \n     // figure out which output was change\n@@ -2791,13 +2791,13 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n         if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n     }\n \n     // Calculate the expected size of the new transaction.\n@@ -2888,7 +2888,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n      if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_MISC_ERROR,\n+         throw JSONRPCError(RPC_WALLET_ERROR,\n                             strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n                                       FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n      }\n@@ -2900,7 +2900,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n     }\n \n     // Now modify the output to increase the fee.\n@@ -2910,7 +2910,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CMutableTransaction tx(*(wtx.tx));\n     CTxOut* poutput = &(tx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)"
      }
    ]
  },
  {
    "sha": "98bd0c338b1886d12ea3d90597ab0438acbc07ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGJkMGMzMzhiMTg4NmQxMmVhM2Q5MDU5N2FiMDQzOGFjYmMwN2Zm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T16:42:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:55:10Z"
      },
      "message": "[tests] disconnect_ban: use wait_until instead of sleep\n\nGithub-Pull: #10143\nRebased-From: 12de2f252c8f48e05c579cb679866a68af8c660e",
      "tree": {
        "sha": "721234c95b1e89172eb19f674b8ae1d20f39fd13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/721234c95b1e89172eb19f674b8ae1d20f39fd13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98bd0c338b1886d12ea3d90597ab0438acbc07ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98bd0c338b1886d12ea3d90597ab0438acbc07ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98bd0c338b1886d12ea3d90597ab0438acbc07ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98bd0c338b1886d12ea3d90597ab0438acbc07ff/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd1cf6713f1f44b88b135c995b9ddb9e99ff7aa"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f540d3aa958f90004ca18b8dfd5117841a2bb922",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bd0c338b1886d12ea3d90597ab0438acbc07ff/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bd0c338b1886d12ea3d90597ab0438acbc07ff/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=98bd0c338b1886d12ea3d90597ab0438acbc07ff",
        "patch": "@@ -6,9 +6,9 @@\n #\n # Test node handling\n #\n-import time\n import urllib.parse\n \n+from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n                                  assert_raises_jsonrpc,\n@@ -35,7 +35,7 @@ def run_test(self):\n         ###########################\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3)  # wait till the nodes are disconected\n+        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n         self.nodes[1].clearbanned()\n@@ -61,10 +61,9 @@ def run_test(self):\n         self.nodes[1].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n         self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n         listBeforeShutdown = self.nodes[1].listbanned()\n-        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])  # must be here\n-        time.sleep(2)  # make 100% sure we expired 192.168.0.1 node time\n+        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])\n+        wait_until(lambda: len(self.nodes[1].listbanned()) == 3)\n \n-        # stop node\n         stop_node(self.nodes[1], 1)\n \n         self.nodes[1] = start_node(1, self.options.tmpdir)\n@@ -82,7 +81,7 @@ def run_test(self):\n         ###########################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n-        time.sleep(2)  # disconnecting a node needs a little bit of time\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n         for node in self.nodes[0].getpeerinfo():\n             assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n "
      }
    ]
  },
  {
    "sha": "04226938a3c675faaca81906ae9ff7a936bcb6a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDIyNjkzOGEzYzY3NWZhYWNhODE5MDZhZTlmZjdhOTM2YmNiNmE3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:35:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:56:04Z"
      },
      "message": "[tests] disconnect_ban: remove dependency on urllib\n\nGithub-Pull: #10143\nRebased-From: 5cc3ee24d29397737f2746d78b19a2509c0dedbb",
      "tree": {
        "sha": "9fd3efaa2916d009f59854bfb89711f616ac071e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fd3efaa2916d009f59854bfb89711f616ac071e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04226938a3c675faaca81906ae9ff7a936bcb6a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04226938a3c675faaca81906ae9ff7a936bcb6a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04226938a3c675faaca81906ae9ff7a936bcb6a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04226938a3c675faaca81906ae9ff7a936bcb6a7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98bd0c338b1886d12ea3d90597ab0438acbc07ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98bd0c338b1886d12ea3d90597ab0438acbc07ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98bd0c338b1886d12ea3d90597ab0438acbc07ff"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 4,
      "deletions": 11
    },
    "files": [
      {
        "sha": "df6e2bc6af3ddd606027f7ae9c3e931835a8e5f3",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04226938a3c675faaca81906ae9ff7a936bcb6a7/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04226938a3c675faaca81906ae9ff7a936bcb6a7/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=04226938a3c675faaca81906ae9ff7a936bcb6a7",
        "patch": "@@ -6,14 +6,12 @@\n #\n # Test node handling\n #\n-import urllib.parse\n \n from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n                                  assert_raises_jsonrpc,\n                                  connect_nodes_bi,\n-                                 p2p_port,\n                                  start_node,\n                                  stop_node,\n                                  )\n@@ -79,18 +77,13 @@ def run_test(self):\n         ###########################\n         # RPC disconnectnode test #\n         ###########################\n-        url = urllib.parse.urlparse(self.nodes[1].url)\n-        self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n+        address1 = self.nodes[0].getpeerinfo()[0]['addr']\n+        self.nodes[0].disconnectnode(address=address1)\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n-        for node in self.nodes[0].getpeerinfo():\n-            assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n+        assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n-        found = False\n-        for node in self.nodes[0].getpeerinfo():\n-            if node['addr'] == url.hostname + \":\" + str(p2p_port(1)):\n-                found = True\n-        assert(found)\n+        assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n if __name__ == '__main__':\n     NodeHandlingTest().main()"
      }
    ]
  },
  {
    "sha": "d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjg5YjU2NGUzYWUxMjVjYjU0YzNkOTE1N2ExM2U3YmFkNDhjNWY1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T16:49:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:56:05Z"
      },
      "message": "[net] listbanned RPC and QT should show correct banned subnets\n\nGithub-Pull: #10234\nRebased-From: 77c54b270dd3b469d662c8f69e06f7b00fc4136d",
      "tree": {
        "sha": "5057986a44e16c014e05f9c11460ca28b0e99692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5057986a44e16c014e05f9c11460ca28b0e99692"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d289b564e3ae125cb54c3d9157a13e7bad48c5f5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04226938a3c675faaca81906ae9ff7a936bcb6a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04226938a3c675faaca81906ae9ff7a936bcb6a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04226938a3c675faaca81906ae9ff7a936bcb6a7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5bc886c34089e357d6bb051421841134989efbfb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d289b564e3ae125cb54c3d9157a13e7bad48c5f5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d289b564e3ae125cb54c3d9157a13e7bad48c5f5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
        "patch": "@@ -413,10 +413,10 @@ void CConnman::DumpBanlist()\n \n     CBanDB bandb;\n     banmap_t banmap;\n-    SetBannedSetDirty(false);\n     GetBanned(banmap);\n-    if (!bandb.Write(banmap))\n-        SetBannedSetDirty(true);\n+    if (bandb.Write(banmap)) {\n+        SetBannedSetDirty(false);\n+    }\n \n     LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n         banmap.size(), GetTimeMillis() - nStart);\n@@ -536,6 +536,8 @@ bool CConnman::Unban(const CSubNet &subNet) {\n void CConnman::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n+    // Sweep the banlist so expired bans are not returned\n+    SweepBanned();\n     banMap = setBanned; //create a thread safe copy\n }\n "
      }
    ]
  },
  {
    "sha": "ee1a60d15609930954b1b85da7f33774711123cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTFhNjBkMTU2MDk5MzA5NTRiMWI4NWRhN2YzMzc3NDcxMTEyM2Nk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-25T14:11:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:56:22Z"
      },
      "message": "[tests] update disconnect_ban.py test case to work with listbanned\n\nGithub-Pull: #10234\nRebased-From: d6732d832aa901e733e63799260d409821a2c37a",
      "tree": {
        "sha": "b31233a1cf1d7fdc5a31ff81c77c3dd81ab01b41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b31233a1cf1d7fdc5a31ff81c77c3dd81ab01b41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee1a60d15609930954b1b85da7f33774711123cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee1a60d15609930954b1b85da7f33774711123cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee1a60d15609930954b1b85da7f33774711123cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee1a60d15609930954b1b85da7f33774711123cd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d289b564e3ae125cb54c3d9157a13e7bad48c5f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d289b564e3ae125cb54c3d9157a13e7bad48c5f5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "61be27ae2b67a7593d8f8c9ca914e8e46fba24ee",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee1a60d15609930954b1b85da7f33774711123cd/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee1a60d15609930954b1b85da7f33774711123cd/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=ee1a60d15609930954b1b85da7f33774711123cd",
        "patch": "@@ -33,7 +33,7 @@ def run_test(self):\n         ###########################\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0)\n+        assert wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n         self.nodes[1].clearbanned()\n@@ -60,7 +60,7 @@ def run_test(self):\n         self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n         listBeforeShutdown = self.nodes[1].listbanned()\n         assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])\n-        wait_until(lambda: len(self.nodes[1].listbanned()) == 3)\n+        assert wait_until(lambda: len(self.nodes[1].listbanned()) == 3, timeout=10)\n \n         stop_node(self.nodes[1], 1)\n \n@@ -79,7 +79,7 @@ def run_test(self):\n         ###########################\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         self.nodes[0].disconnectnode(address=address1)\n-        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n+        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node"
      }
    ]
  },
  {
    "sha": "e05799a381191d603f697225d7a972a735ec8608",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDU3OTlhMzgxMTkxZDYwM2Y2OTcyMjVkN2E5NzJhNzM1ZWM4NjA4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:57:27Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:57:27Z"
      },
      "message": "Merge #10234, #10143 (fixes only), and #9853 via branch 'disconnect_ban_fixes-0.14' into 0.14.2_fixes",
      "tree": {
        "sha": "ceb437d58d4f441209b6b072856589d0c0a1c48b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ceb437d58d4f441209b6b072856589d0c0a1c48b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e05799a381191d603f697225d7a972a735ec8608",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e05799a381191d603f697225d7a972a735ec8608",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e05799a381191d603f697225d7a972a735ec8608",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e05799a381191d603f697225d7a972a735ec8608/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e5dbd0aa4304918b4fcfe125c4479c04eede40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99e5dbd0aa4304918b4fcfe125c4479c04eede40"
      },
      {
        "sha": "ee1a60d15609930954b1b85da7f33774711123cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee1a60d15609930954b1b85da7f33774711123cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee1a60d15609930954b1b85da7f33774711123cd"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 58,
      "deletions": 50
    },
    "files": [
      {
        "sha": "61be27ae2b67a7593d8f8c9ca914e8e46fba24ee",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 53,
        "deletions": 47,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e05799a381191d603f697225d7a972a735ec8608/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e05799a381191d603f697225d7a972a735ec8608/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=e05799a381191d603f697225d7a972a735ec8608",
        "patch": "@@ -7,77 +7,83 @@\n # Test node handling\n #\n \n+from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (assert_equal,\n+                                 assert_raises_jsonrpc,\n+                                 connect_nodes_bi,\n+                                 start_node,\n+                                 stop_node,\n+                                 )\n \n-import urllib.parse\n-\n-class NodeHandlingTest (BitcoinTestFramework):\n+class NodeHandlingTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 4\n+        self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def setup_network(self):\n+        self.nodes = self.setup_nodes()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n     def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n         ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n-        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3) #wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n+        self.nodes[1].setban(\"127.0.0.1\", \"add\")\n+        assert wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n+        self.nodes[1].clearbanned()\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n         # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n         # This will throw an exception because 127.0.0.1/42 is not a real subnet\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n         # This will throw an exception because 127.0.0.1 was not added above\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"remove\")\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n+        self.nodes[1].clearbanned()\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n \n-        ##test persisted banlist\n-        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n-        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n-        listBeforeShutdown = self.nodes[2].listbanned()\n-        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address']) #must be here\n-        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n+        # test persisted banlist\n+        self.nodes[1].setban(\"127.0.0.0/32\", \"add\")\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+        self.nodes[1].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n+        self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n+        listBeforeShutdown = self.nodes[1].listbanned()\n+        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])\n+        assert wait_until(lambda: len(self.nodes[1].listbanned()) == 3, timeout=10)\n \n-        #stop node\n-        stop_node(self.nodes[2], 2)\n+        stop_node(self.nodes[1], 1)\n \n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n-        listAfterShutdown = self.nodes[2].listbanned()\n+        self.nodes[1] = start_node(1, self.options.tmpdir)\n+        listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])\n         assert_equal(\"/19\" in listAfterShutdown[2]['address'], True)\n \n+        # Clear ban lists\n+        self.nodes[1].clearbanned()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n         ###########################\n         # RPC disconnectnode test #\n         ###########################\n-        url = urllib.parse.urlparse(self.nodes[1].url)\n-        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n-        time.sleep(2) #disconnecting a node needs a little bit of time\n-        for node in self.nodes[0].getpeerinfo():\n-            assert(node['addr'] != url.hostname+\":\"+str(p2p_port(1)))\n+        address1 = self.nodes[0].getpeerinfo()[0]['addr']\n+        self.nodes[0].disconnectnode(address=address1)\n+        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n-        connect_nodes_bi(self.nodes,0,1) #reconnect the node\n-        found = False\n-        for node in self.nodes[0].getpeerinfo():\n-            if node['addr'] == url.hostname+\":\"+str(p2p_port(1)):\n-                found = True\n-        assert(found)\n+        connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n+        assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n if __name__ == '__main__':\n-    NodeHandlingTest ().main ()\n+    NodeHandlingTest().main()"
      },
      {
        "sha": "5bc886c34089e357d6bb051421841134989efbfb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e05799a381191d603f697225d7a972a735ec8608/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e05799a381191d603f697225d7a972a735ec8608/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e05799a381191d603f697225d7a972a735ec8608",
        "patch": "@@ -413,10 +413,10 @@ void CConnman::DumpBanlist()\n \n     CBanDB bandb;\n     banmap_t banmap;\n-    SetBannedSetDirty(false);\n     GetBanned(banmap);\n-    if (!bandb.Write(banmap))\n-        SetBannedSetDirty(true);\n+    if (bandb.Write(banmap)) {\n+        SetBannedSetDirty(false);\n+    }\n \n     LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n         banmap.size(), GetTimeMillis() - nStart);\n@@ -536,6 +536,8 @@ bool CConnman::Unban(const CSubNet &subNet) {\n void CConnman::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n+    // Sweep the banlist so expired bans are not returned\n+    SweepBanned();\n     banMap = setBanned; //create a thread safe copy\n }\n "
      }
    ]
  },
  {
    "sha": "aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2E0YjZkYmNiMWMyYjdmMGMzODA4ZmQ4YWQzZWI3ZGNlMTU4NTU1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:57:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:57:35Z"
      },
      "message": "Merge #9481 via remote-tracking branch 'jonas/2017/01/fee_warning' into 0.14.2_fixes",
      "tree": {
        "sha": "f9ee7790c9de23ea3ea9c6ef88356db0a5ef1bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9ee7790c9de23ea3ea9c6ef88356db0a5ef1bef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e05799a381191d603f697225d7a972a735ec8608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e05799a381191d603f697225d7a972a735ec8608",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e05799a381191d603f697225d7a972a735ec8608"
      },
      {
        "sha": "7abe7bbf61d90dc003647f2cc5019e4652182399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abe7bbf61d90dc003647f2cc5019e4652182399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7abe7bbf61d90dc003647f2cc5019e4652182399"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca2da6bf372e686f08de609742624e451560570a",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
        "patch": "@@ -759,11 +759,33 @@\n             </item>\n            </layout>\n           </item>\n+          <item>\n+           <widget class=\"QLabel\" name=\"fallbackFeeWarningLabel\">\n+            <property name=\"toolTip\">\n+             <string>Using the fallbackfee can result in sending a transaction that will take serval hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n+            </property>\n+            <property name=\"font\">\n+            <font>\n+                <weight>75</weight>\n+                <bold>true</bold>\n+            </font>\n+            </property>\n+            <property name=\"text\">\n+             <string>Warning: Fee estimation is currently not possible.</string>\n+            </property>\n+            <property name=\"wordWrap\">\n+             <bool>false</bool>\n+            </property>\n+           </widget>\n+          </item>\n           <item>\n            <spacer name=\"horizontalSpacer_4\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal</enum>\n             </property>\n+            <property name=\"sizeType\">\n+             <enum>QSizePolicy::MinimumExpanding</enum>\n+            </property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>40</width>"
      },
      {
        "sha": "65ca00755203cc6141a3e0c034f969e91f11fe78",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
        "patch": "@@ -23,6 +23,7 @@\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n+#include <QFontMetrics>\n #include <QMessageBox>\n #include <QScrollBar>\n #include <QSettings>\n@@ -656,13 +657,19 @@ void SendCoinsDialog::updateSmartFeeLabel()\n                                                                 std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n+        ui->fallbackFeeWarningLabel->setVisible(true);\n+        int lightness = ui->fallbackFeeWarningLabel->palette().color(QPalette::WindowText).lightness();\n+        QColor warning_colour(255 - (lightness / 5), 176 - (lightness / 3), 48 - (lightness / 14));\n+        ui->fallbackFeeWarningLabel->setStyleSheet(\"QLabel { color: \" + warning_colour.name() + \"; }\");\n+        ui->fallbackFeeWarningLabel->setIndent(QFontMetrics(ui->fallbackFeeWarningLabel->font()).width(\"x\"));\n     }\n     else\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n                                                                 std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n+        ui->fallbackFeeWarningLabel->setVisible(false);\n     }\n \n     updateFeeMinimizedLabel();"
      }
    ]
  },
  {
    "sha": "77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2RlOWJiYzU3YTc2YzUyZjZmMzBlNmMzMzY4NjlmMDU0MGNmNmJm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:57:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:57:49Z"
      },
      "message": "Merge #10008 via branch 'fee_warning-0.14' into 0.14.2_fixes",
      "tree": {
        "sha": "6d6b5783e6208de8bc8f939c041156a0ddd29385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d6b5783e6208de8bc8f939c041156a0ddd29385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77de9bbc57a76c52f6f30e6c336869f0540cf6bf/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aca4b6dbcb1c2b7f0c3808fd8ad3eb7dce158555"
      },
      {
        "sha": "ef810c4cd440dec00a651b944d74ed4ae85603c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef810c4cd440dec00a651b944d74ed4ae85603c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef810c4cd440dec00a651b944d74ed4ae85603c2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f13b0d9cf926784d8f8d5ac30ef94c80613a511d",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77de9bbc57a76c52f6f30e6c336869f0540cf6bf/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77de9bbc57a76c52f6f30e6c336869f0540cf6bf/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
        "patch": "@@ -762,7 +762,7 @@\n           <item>\n            <widget class=\"QLabel\" name=\"fallbackFeeWarningLabel\">\n             <property name=\"toolTip\">\n-             <string>Using the fallbackfee can result in sending a transaction that will take serval hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n+             <string>Using the fallbackfee can result in sending a transaction that will take several hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n             </property>\n             <property name=\"font\">\n             <font>"
      }
    ]
  },
  {
    "sha": "1b864c9820abc0ba05093b97b813f4719584759b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjg2NGM5ODIwYWJjMGJhMDUwOTNiOTdiODEzZjQ3MTk1ODQ3NTli",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:00Z"
      },
      "message": "Merge #9497 via remote-tracking branch 'origin-pull/9497/head' into 0.14.2_fixes",
      "tree": {
        "sha": "79100b06c6fd16da0cd3c3c7bd5e16ad2c4aea8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79100b06c6fd16da0cd3c3c7bd5e16ad2c4aea8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b864c9820abc0ba05093b97b813f4719584759b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b864c9820abc0ba05093b97b813f4719584759b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b864c9820abc0ba05093b97b813f4719584759b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b864c9820abc0ba05093b97b813f4719584759b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77de9bbc57a76c52f6f30e6c336869f0540cf6bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77de9bbc57a76c52f6f30e6c336869f0540cf6bf"
      },
      {
        "sha": "96c7f2c3458950061b057fcd3daaf47b57e6bac7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c7f2c3458950061b057fcd3daaf47b57e6bac7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96c7f2c3458950061b057fcd3daaf47b57e6bac7"
      }
    ],
    "stats": {
      "total": 465,
      "additions": 455,
      "deletions": 10
    },
    "files": [
      {
        "sha": "99c25a1d4d985b4dd0537909ced927f1e46c6d82",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b864c9820abc0ba05093b97b813f4719584759b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b864c9820abc0ba05093b97b813f4719584759b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1b864c9820abc0ba05093b97b813f4719584759b",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_TESTS =\\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\\n+  test/checkqueue_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "ea12df66dd0e5caf8f021b1a9271eab606bd94d3",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b864c9820abc0ba05093b97b813f4719584759b/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b864c9820abc0ba05093b97b813f4719584759b/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=1b864c9820abc0ba05093b97b813f4719584759b",
        "patch": "@@ -127,6 +127,9 @@ class CCheckQueue\n     }\n \n public:\n+    //! Mutex to ensure only one concurrent CCheckQueueControl\n+    boost::mutex ControlMutex;\n+\n     //! Create a new check queue\n     CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n@@ -161,12 +164,6 @@ class CCheckQueue\n     {\n     }\n \n-    bool IsIdle()\n-    {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n-    }\n-\n };\n \n /** \n@@ -177,16 +174,18 @@ template <typename T>\n class CCheckQueueControl\n {\n private:\n-    CCheckQueue<T>* pqueue;\n+    CCheckQueue<T> * const pqueue;\n     bool fDone;\n \n public:\n-    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)\n+    CCheckQueueControl() = delete;\n+    CCheckQueueControl(const CCheckQueueControl&) = delete;\n+    CCheckQueueControl& operator=(const CCheckQueueControl&) = delete;\n+    explicit CCheckQueueControl(CCheckQueue<T> * const pqueueIn) : pqueue(pqueueIn), fDone(false)\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            bool isIdle = pqueue->IsIdle();\n-            assert(isIdle);\n+            ENTER_CRITICAL_SECTION(pqueue->ControlMutex);\n         }\n     }\n \n@@ -209,6 +208,9 @@ class CCheckQueueControl\n     {\n         if (!fDone)\n             Wait();\n+        if (pqueue != NULL) {\n+            LEAVE_CRITICAL_SECTION(pqueue->ControlMutex);\n+        }\n     }\n };\n "
      },
      {
        "sha": "d89f9b770bce360012aefbbf667e7aa5840ae41c",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "added",
        "additions": 442,
        "deletions": 0,
        "changes": 442,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b864c9820abc0ba05093b97b813f4719584759b/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b864c9820abc0ba05093b97b813f4719584759b/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=1b864c9820abc0ba05093b97b813f4719584759b",
        "patch": "@@ -0,0 +1,442 @@\n+// Copyright (c) 2012-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"util.h\"\n+#include \"utiltime.h\"\n+#include \"validation.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+#include \"checkqueue.h\"\n+#include <boost/test/unit_test.hpp>\n+#include <boost/thread.hpp>\n+#include <atomic>\n+#include <thread>\n+#include <vector>\n+#include <mutex>\n+#include <condition_variable>\n+\n+#include <unordered_set>\n+#include <memory>\n+#include \"random.h\"\n+\n+// BasicTestingSetup not sufficient because nScriptCheckThreads is not set\n+// otherwise.\n+BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n+\n+static const int QUEUE_BATCH_SIZE = 128;\n+\n+struct FakeCheck {\n+    bool operator()()\n+    {\n+        return true;\n+    }\n+    void swap(FakeCheck& x){};\n+};\n+\n+struct FakeCheckCheckCompletion {\n+    static std::atomic<size_t> n_calls;\n+    bool operator()()\n+    {\n+        ++n_calls;\n+        return true;\n+    }\n+    void swap(FakeCheckCheckCompletion& x){};\n+};\n+\n+struct FailingCheck {\n+    bool fails;\n+    FailingCheck(bool fails) : fails(fails){};\n+    FailingCheck() : fails(true){};\n+    bool operator()()\n+    {\n+        return !fails;\n+    }\n+    void swap(FailingCheck& x)\n+    {\n+        std::swap(fails, x.fails);\n+    };\n+};\n+\n+struct UniqueCheck {\n+    static std::mutex m;\n+    static std::unordered_multiset<size_t> results;\n+    size_t check_id;\n+    UniqueCheck(size_t check_id_in) : check_id(check_id_in){};\n+    UniqueCheck() : check_id(0){};\n+    bool operator()()\n+    {\n+        std::lock_guard<std::mutex> l(m);\n+        results.insert(check_id);\n+        return true;\n+    }\n+    void swap(UniqueCheck& x) { std::swap(x.check_id, check_id); };\n+};\n+\n+\n+struct MemoryCheck {\n+    static std::atomic<size_t> fake_allocated_memory;\n+    bool b {false};\n+    bool operator()()\n+    {\n+        return true;\n+    }\n+    MemoryCheck(){};\n+    MemoryCheck(const MemoryCheck& x)\n+    {\n+        // We have to do this to make sure that destructor calls are paired\n+        //\n+        // Really, copy constructor should be deletable, but CCheckQueue breaks\n+        // if it is deleted because of internal push_back.\n+        fake_allocated_memory += b;\n+    };\n+    MemoryCheck(bool b_) : b(b_)\n+    {\n+        fake_allocated_memory += b;\n+    };\n+    ~MemoryCheck(){\n+        fake_allocated_memory -= b;\n+    \n+    };\n+    void swap(MemoryCheck& x) { std::swap(b, x.b); };\n+};\n+\n+struct FrozenCleanupCheck {\n+    static std::atomic<uint64_t> nFrozen;\n+    static std::condition_variable cv;\n+    static std::mutex m;\n+    // Freezing can't be the default initialized behavior given how the queue\n+    // swaps in default initialized Checks.\n+    bool should_freeze {false};\n+    bool operator()()\n+    {\n+        return true;\n+    }\n+    FrozenCleanupCheck() {}\n+    ~FrozenCleanupCheck()\n+    {\n+        if (should_freeze) {\n+            std::unique_lock<std::mutex> l(m);\n+            nFrozen = 1;\n+            cv.notify_one();\n+            cv.wait(l, []{ return nFrozen == 0;});\n+        }\n+    }\n+    void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};\n+};\n+\n+// Static Allocations\n+std::mutex FrozenCleanupCheck::m{};\n+std::atomic<uint64_t> FrozenCleanupCheck::nFrozen{0};\n+std::condition_variable FrozenCleanupCheck::cv{};\n+std::mutex UniqueCheck::m;\n+std::unordered_multiset<size_t> UniqueCheck::results;\n+std::atomic<size_t> FakeCheckCheckCompletion::n_calls{0};\n+std::atomic<size_t> MemoryCheck::fake_allocated_memory{0};\n+\n+// Queue Typedefs\n+typedef CCheckQueue<FakeCheckCheckCompletion> Correct_Queue;\n+typedef CCheckQueue<FakeCheck> Standard_Queue;\n+typedef CCheckQueue<FailingCheck> Failing_Queue;\n+typedef CCheckQueue<UniqueCheck> Unique_Queue;\n+typedef CCheckQueue<MemoryCheck> Memory_Queue;\n+typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n+\n+\n+/** This test case checks that the CCheckQueue works properly\n+ * with each specified size_t Checks pushed.\n+ */\n+void Correct_Queue_range(std::vector<size_t> range)\n+{\n+    auto small_queue = std::unique_ptr<Correct_Queue>(new Correct_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{small_queue->Thread();});\n+    }\n+    // Make vChecks here to save on malloc (this test can be slow...)\n+    std::vector<FakeCheckCheckCompletion> vChecks;\n+    for (auto i : range) {\n+        size_t total = i;\n+        FakeCheckCheckCompletion::n_calls = 0;\n+        CCheckQueueControl<FakeCheckCheckCompletion> control(small_queue.get());\n+        while (total) {\n+            vChecks.resize(std::min(total, (size_t) GetRand(10)));\n+            total -= vChecks.size();\n+            control.Add(vChecks);\n+        }\n+        BOOST_REQUIRE(control.Wait());\n+        if (FakeCheckCheckCompletion::n_calls != i) {\n+            BOOST_REQUIRE_EQUAL(FakeCheckCheckCompletion::n_calls, i);\n+            BOOST_TEST_MESSAGE(\"Failure on trial \" << i << \" expected, got \" << FakeCheckCheckCompletion::n_calls);\n+        }\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+/** Test that 0 checks is correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Zero)\n+{\n+    std::vector<size_t> range;\n+    range.push_back((size_t)0);\n+    Correct_Queue_range(range);\n+}\n+/** Test that 1 check is correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_One)\n+{\n+    std::vector<size_t> range;\n+    range.push_back((size_t)1);\n+    Correct_Queue_range(range);\n+}\n+/** Test that MAX check is correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Max)\n+{\n+    std::vector<size_t> range;\n+    range.push_back(100000);\n+    Correct_Queue_range(range);\n+}\n+/** Test that random numbers of checks are correct\n+ */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n+{\n+    std::vector<size_t> range;\n+    range.reserve(100000/1000);\n+    for (size_t i = 2; i < 100000; i += std::max((size_t)1, (size_t)GetRand(std::min((size_t)1000, ((size_t)100000) - i))))\n+        range.push_back(i);\n+    Correct_Queue_range(range);\n+}\n+\n+\n+/** Test that failing checks are caught */\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n+{\n+    auto fail_queue = std::unique_ptr<Failing_Queue>(new Failing_Queue {QUEUE_BATCH_SIZE});\n+\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{fail_queue->Thread();});\n+    }\n+\n+    for (size_t i = 0; i < 1001; ++i) {\n+        CCheckQueueControl<FailingCheck> control(fail_queue.get());\n+        size_t remaining = i;\n+        while (remaining) {\n+            size_t r = GetRand(10);\n+\n+            std::vector<FailingCheck> vChecks;\n+            vChecks.reserve(r);\n+            for (size_t k = 0; k < r && remaining; k++, remaining--)\n+                vChecks.emplace_back(remaining == 1);\n+            control.Add(vChecks);\n+        }\n+        bool success = control.Wait();\n+        if (i > 0) {\n+            BOOST_REQUIRE(!success);\n+        } else if (i == 0) {\n+            BOOST_REQUIRE(success);\n+        }\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+// Test that a block validation which fails does not interfere with\n+// future blocks, ie, the bad state is cleared.\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n+{\n+    auto fail_queue = std::unique_ptr<Failing_Queue>(new Failing_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{fail_queue->Thread();});\n+    }\n+\n+    for (auto times = 0; times < 10; ++times) {\n+        for (bool end_fails : {true, false}) {\n+            CCheckQueueControl<FailingCheck> control(fail_queue.get());\n+            {\n+                std::vector<FailingCheck> vChecks;\n+                vChecks.resize(100, false);\n+                vChecks[99] = end_fails;\n+                control.Add(vChecks);\n+            }\n+            bool r =control.Wait();\n+            BOOST_REQUIRE(r || end_fails);\n+        }\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// Test that unique checks are actually all called individually, rather than\n+// just one check being called repeatedly. Test that checks are not called\n+// more than once as well\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n+{\n+    auto queue = std::unique_ptr<Unique_Queue>(new Unique_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{queue->Thread();});\n+\n+    }\n+\n+    size_t COUNT = 100000;\n+    size_t total = COUNT;\n+    {\n+        CCheckQueueControl<UniqueCheck> control(queue.get());\n+        while (total) {\n+            size_t r = GetRand(10);\n+            std::vector<UniqueCheck> vChecks;\n+            for (size_t k = 0; k < r && total; k++)\n+                vChecks.emplace_back(--total);\n+            control.Add(vChecks);\n+        }\n+    }\n+    bool r = true;\n+    BOOST_REQUIRE_EQUAL(UniqueCheck::results.size(), COUNT);\n+    for (size_t i = 0; i < COUNT; ++i)\n+        r = r && UniqueCheck::results.count(i) == 1;\n+    BOOST_REQUIRE(r);\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+\n+// Test that blocks which might allocate lots of memory free their memory agressively.\n+//\n+// This test attempts to catch a pathological case where by lazily freeing\n+// checks might mean leaving a check un-swapped out, and decreasing by 1 each\n+// time could leave the data hanging across a sequence of blocks.\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n+{\n+    auto queue = std::unique_ptr<Memory_Queue>(new Memory_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+       tg.create_thread([&]{queue->Thread();});\n+    }\n+    for (size_t i = 0; i < 1000; ++i) {\n+        size_t total = i;\n+        {\n+            CCheckQueueControl<MemoryCheck> control(queue.get());\n+            while (total) {\n+                size_t r = GetRand(10);\n+                std::vector<MemoryCheck> vChecks;\n+                for (size_t k = 0; k < r && total; k++) {\n+                    total--;\n+                    // Each iteration leaves data at the front, back, and middle\n+                    // to catch any sort of deallocation failure\n+                    vChecks.emplace_back(total == 0 || total == i || total == i/2);\n+                }\n+                control.Add(vChecks);\n+            }\n+        }\n+        BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0);\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// Test that a new verification cannot occur until all checks \n+// have been destructed\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n+{\n+    auto queue = std::unique_ptr<FrozenCleanup_Queue>(new FrozenCleanup_Queue {QUEUE_BATCH_SIZE});\n+    boost::thread_group tg;\n+    bool fails = false;\n+    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+        tg.create_thread([&]{queue->Thread();});\n+    }\n+    std::thread t0([&]() {\n+        CCheckQueueControl<FrozenCleanupCheck> control(queue.get());\n+        std::vector<FrozenCleanupCheck> vChecks(1);\n+        // Freezing can't be the default initialized behavior given how the queue\n+        // swaps in default initialized Checks (otherwise freezing destructor\n+        // would get called twice).\n+        vChecks[0].should_freeze = true;\n+        control.Add(vChecks);\n+        control.Wait(); // Hangs here\n+    });\n+    {\n+        std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);\n+        // Wait until the queue has finished all jobs and frozen\n+        FrozenCleanupCheck::cv.wait(l, [](){return FrozenCleanupCheck::nFrozen == 1;});\n+        // Try to get control of the queue a bunch of times\n+        for (auto x = 0; x < 100 && !fails; ++x) {\n+            fails = queue->ControlMutex.try_lock();\n+        }\n+        // Unfreeze\n+        FrozenCleanupCheck::nFrozen = 0;\n+    }\n+    // Awaken frozen destructor\n+    FrozenCleanupCheck::cv.notify_one();\n+    // Wait for control to finish\n+    t0.join();\n+    tg.interrupt_all();\n+    tg.join_all();\n+    BOOST_REQUIRE(!fails);\n+}\n+\n+\n+/** Test that CCheckQueueControl is threadsafe */\n+BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n+{\n+    auto queue = std::unique_ptr<Standard_Queue>(new Standard_Queue{QUEUE_BATCH_SIZE});\n+    {\n+        boost::thread_group tg;\n+        std::atomic<int> nThreads {0};\n+        std::atomic<int> fails {0};\n+        for (size_t i = 0; i < 3; ++i) {\n+            tg.create_thread(\n+                    [&]{\n+                    CCheckQueueControl<FakeCheck> control(queue.get());\n+                    // While sleeping, no other thread should execute to this point\n+                    auto observed = ++nThreads;\n+                    MilliSleep(10);\n+                    fails += observed  != nThreads;\n+                    });\n+        }\n+        tg.join_all();\n+        BOOST_REQUIRE_EQUAL(fails, 0);\n+    }\n+    {\n+        boost::thread_group tg;\n+        std::mutex m;\n+        bool has_lock {false};\n+        bool has_tried {false};\n+        bool done {false};\n+        bool done_ack {false};\n+        std::condition_variable cv;\n+        {\n+            std::unique_lock<std::mutex> l(m);\n+            tg.create_thread([&]{\n+                    CCheckQueueControl<FakeCheck> control(queue.get());\n+                    std::unique_lock<std::mutex> l(m);\n+                    has_lock = true;\n+                    cv.notify_one();\n+                    cv.wait(l, [&]{return has_tried;});\n+                    done = true;\n+                    cv.notify_one();\n+                    // Wait until the done is acknowledged\n+                    //\n+                    cv.wait(l, [&]{return done_ack;});\n+                    });\n+            // Wait for thread to get the lock\n+            cv.wait(l, [&](){return has_lock;});\n+            bool fails = false;\n+            for (auto x = 0; x < 100 && !fails; ++x) {\n+                fails = queue->ControlMutex.try_lock();\n+            }\n+            has_tried = true;\n+            cv.notify_one();\n+            cv.wait(l, [&](){return done;});\n+            // Acknowledge the done\n+            done_ack = true;\n+            cv.notify_one();\n+            BOOST_REQUIRE(!fails);\n+        }\n+        tg.join_all();\n+    }\n+}\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  },
  {
    "sha": "a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDBkNjllMGI4NWFmNGNhZmE4MWRiMzhmMWUzNmY4Y2Y1Zjg2YjNm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:07Z"
      },
      "message": "Merge #10328 via branch 'debianppa-0.14' into 0.14.2_fixes",
      "tree": {
        "sha": "4d36ca8146df9c9457df8c81cb607204e5ac9357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d36ca8146df9c9457df8c81cb607204e5ac9357"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b864c9820abc0ba05093b97b813f4719584759b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b864c9820abc0ba05093b97b813f4719584759b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b864c9820abc0ba05093b97b813f4719584759b"
      },
      {
        "sha": "6ad45b8f8bd1f33842160d109d391deae0d615e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad45b8f8bd1f33842160d109d391deae0d615e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad45b8f8bd1f33842160d109d391deae0d615e7"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 154,
      "deletions": 30
    },
    "files": [
      {
        "sha": "33dab9b6388890a5ba10e47fcd3b833bb0875dc4",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 122,
        "deletions": 3,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
        "patch": "@@ -1,3 +1,122 @@\n+bitcoin (0.14.1-trusty4) trusty; urgency=medium\n+\n+  * Re-enable UPnP support.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 05 May 2017 13:28:00 -0400\n+\n+bitcoin (0.14.1-trusty3) trusty; urgency=medium\n+\n+  * Build with qt5 if we are on a non-Ubuntu (ie non-Unity) distro.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 04 May 2017 17:13:00 -0400\n+\n+bitcoin (0.14.1-trusty2) trusty; urgency=medium\n+\n+  * Bump minimum boost version in deps.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 04 May 2017 17:12:00 -0400\n+\n+bitcoin (0.14.1-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Sat, 22 Apr 2017 17:10:00 -0400\n+\n+bitcoin (0.14.0-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 08 Mar 2017 10:30:00 -0500\n+\n+bitcoin (0.13.2-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 05 Jan 2017 09:59:00 -0500\n+\n+bitcoin (0.13.1-trusty2) trusty; urgency=medium\n+\n+  * Revert to Qt4, due to https://github.com/bitcoin/bitcoin/issues/9038\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Mon, 31 Oct 2016 11:16:00 -0400\n+\n+bitcoin (0.13.1-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+  * Backport updated bitcoin-qt.desktop from upstream master\n+  * Add zmq dependency\n+  * Switch to Qt5 (breaks precise, but that was already broken by C++11)\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Thu, 27 Oct 2016 17:32:00 -0400\n+\n+bitcoin (0.13.0-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Sun, 04 Sep 2016 22:09:00 -0400\n+\n+bitcoin (0.12.1-trusty1) trusty; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Mon, 18 Apr 2016 14:26:00 -0700\n+\n+bitcoin (0.12.0-trusty6) trusty; urgency=medium\n+\n+  * Fix program-options dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 25 Mar 2016 21:41:00 -0700\n+\n+bitcoin (0.12.0-trusty5) trusty; urgency=medium\n+\n+  * Test explicit --with-gui\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 23:25:00 -0800\n+\n+bitcoin (0.12.0-trusty4) trusty; urgency=medium\n+\n+  * Fix libevent-dev dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 23:25:00 -0800\n+\n+bitcoin (0.12.0-trusty3) trusty; urgency=medium\n+\n+  * Fix precise boost dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 19:55:00 -0800\n+\n+bitcoin (0.12.0-trusty2) trusty; urgency=medium\n+\n+  * Fix libevent dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 19:53:00 -0800\n+\n+bitcoin (0.12.0-trusty1) trusty; urgency=medium\n+\n+  * New upstream release\n+  * Various updates to contrib/debian were merged, a few were not\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 23 Feb 2015 19:29:00 -0800\n+\n+bitcoin (0.11.2-trusty1) trusty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 13 Nov 2015 18:39:00 -0800\n+\n+bitcoin (0.11.1-trusty2) trusty; urgency=low\n+\n+  * Remove minupnpc builddep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 14 Oct 2015 23:06:00 -1000\n+\n+bitcoin (0.11.1-trusty1) trusty; urgency=high\n+\n+  * New upstream release.\n+  * Disable all UPnP support.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 14 Oct 2015 13:57:00 -1000\n+\n bitcoin (0.11.0-precise1) precise; urgency=medium\n \n   * New upstream release.\n@@ -179,7 +298,7 @@ bitcoin (0.5.3-natty0) natty; urgency=low\n bitcoin (0.5.2-natty1) natty; urgency=low\n \n   * Remove mentions on anonymity in package descriptions and manpage.\n-    These should never have been there, bitcoin isn't anonymous without\n+    These should never have been there, bitcoin isnt anonymous without\n     a ton of work that virtually no users will ever be willing and\n     capable of doing\n \n@@ -220,7 +339,7 @@ bitcoin (0.5.0~rc1-natty1) natty; urgency=low\n \n   * Add test_bitcoin to build test\n   * Fix clean\n-  * Remove unnecessary build-dependancies\n+  * Remove uneccessary build-dependancies\n \n  -- Matt Corallo <matt@bluematt.me>  Wed, 26 Oct 2011 14:37:18 -0400\n \n@@ -380,7 +499,7 @@ bitcoin (0.3.20.01~dfsg-1) unstable; urgency=low\n \n bitcoin (0.3.19~dfsg-6) unstable; urgency=low\n \n-  * Fix override aggressive optimizations.\n+  * Fix override agressive optimizations.\n   * Fix tighten build-dependencies to really fit backporting to Lenny:\n     + Add fallback build-dependency on libdb4.6++-dev.\n     + Tighten unversioned Boost build-dependencies to recent versions,"
      },
      {
        "sha": "0d6ad25e249fe9b7b89a738aba89c2ca1d495587",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 29,
        "deletions": 26,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
        "patch": "@@ -1,27 +1,30 @@\n Source: bitcoin\n Section: utils\n Priority: optional\n-Maintainer: Jonas Smedegaard <dr@jones.dk>\n-Uploaders: Micah Anderson <micah@debian.org>\n+Maintainer: Matt Corallo <matt@mattcorallo.com>\n+Uploaders: Matt Corallo <matt@mattcorallo.com>\n Build-Depends: debhelper,\n  devscripts,\n  automake,\n  libtool,\n  bash-completion,\n- libboost-system-dev (>> 1.35) | libboost-system1.35-dev,\n  libdb4.8++-dev,\n  libssl-dev,\n  pkg-config,\n- libminiupnpc8-dev | libminiupnpc-dev (>> 1.6),\n- libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n- libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n- libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,\n- libboost-test-dev (>> 1.35) | libboost-test1.35-dev,\n- qt4-qmake,\n- libqt4-dev,\n+ libevent-dev,\n+ libboost-system1.48-dev | libboost-system-dev (>> 1.47),\n+ libboost-filesystem1.48-dev | libboost-filesystem-dev (>> 1.47),\n+ libboost-program-options1.48-dev | libboost-program-options-dev (>> 1.47),\n+ libboost-thread1.48-dev | libboost-thread-dev (>> 1.47),\n+ libboost-test1.48-dev | libboost-test-dev (>> 1.47),\n+ libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.47),\n+ libminiupnpc8-dev | libminiupnpc-dev,\n+ qt4-qmake, libqt4-dev,\n+ qttools5-dev-tools, qttools5-dev,\n  libqrencode-dev,\n  libprotobuf-dev, protobuf-compiler,\n- python\n+ python,\n+ libzmq3-dev\n Standards-Version: 3.9.2\n Homepage: https://bitcoincore.org/\n Vcs-Git: git://github.com/bitcoin/bitcoin.git\n@@ -31,11 +34,11 @@ Package: bitcoind\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - daemon\n- Bitcoin is an experimental new digital currency that enables instant\n- payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n- technology to operate with no central authority: managing transactions\n- and issuing money are carried out collectively by the network. Bitcoin Core\n- is the name of the open source software which enables the use of this currency.\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n  .\n  This package provides the daemon, bitcoind, and the CLI tool\n  bitcoin-cli to interact with the daemon.\n@@ -44,23 +47,23 @@ Package: bitcoin-qt\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer network based digital currency - Qt GUI\n- Bitcoin is an experimental new digital currency that enables instant\n- payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n- technology to operate with no central authority: managing transactions\n- and issuing money are carried out collectively by the network. Bitcoin Core\n- is the name of the open source software which enables the use of this currency.\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n  .\n  This package provides Bitcoin-Qt, a GUI for Bitcoin based on Qt.\n \n Package: bitcoin-tx\n Architecture: any\n Depends: ${shlibs:Depends}, ${misc:Depends}\n Description: peer-to-peer digital currency - standalone transaction tool\n- Bitcoin is an experimental new digital currency that enables instant\n- payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer\n- technology to operate with no central authority: managing transactions\n- and issuing money are carried out collectively by the network. Bitcoin Core\n- is the name of the open source software which enables the use of this currency.\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n  .\n  This package provides bitcoin-tx, a command-line transaction creation\n  tool which can be used without a bitcoin daemon.  Some means of"
      },
      {
        "sha": "6885e3852126f17e910cbe4236b4f773a1fd8de6",
        "filename": "contrib/debian/rules",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/contrib/debian/rules",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f/contrib/debian/rules",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/rules?ref=a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
        "patch": "@@ -12,10 +12,12 @@ override_dh_auto_clean:\n \tif [ -f Makefile ]; then $(MAKE) distclean; fi\n \trm -rf Makefile.in aclocal.m4 configure src/Makefile.in src/bitcoin-config.h.in src/build-aux src/qt/Makefile.in src/qt/test/Makefile.in src/test/Makefile.in\n \n+QT=$(shell dpkg-vendor --derives-from Ubuntu && echo qt4 || echo qt5)\n+\n # Yea, autogen should be run on the source archive, but I like doing git archive\n override_dh_auto_configure:\n \t./autogen.sh\n-\t./configure\n+\t./configure --with-gui=$(QT)\n \n override_dh_auto_test:\n \tmake check"
      }
    ]
  },
  {
    "sha": "e23cef0c9469cc360e603a614bb3f0b22c6656bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjNjZWYwYzk0NjljYzM2MGU2MDNhNjE0YmIzZjBiMjJjNjY1NmJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-13T09:33:04Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:23Z"
      },
      "message": "Fix some empty vector references\n\nstreams.h has some methods that can be tricked into dereferencing\nnull pointers or end() iterators. Fix this.\n\nGithub-Pull: #10250\nRebased-From: f478d98fe49d3c0c0f2c79b3f8d9dbfc1aafd407",
      "tree": {
        "sha": "e6a0ed0c3a1941ca0061f226e9f7533449746684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6a0ed0c3a1941ca0061f226e9f7533449746684"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e23cef0c9469cc360e603a614bb3f0b22c6656bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e23cef0c9469cc360e603a614bb3f0b22c6656bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e23cef0c9469cc360e603a614bb3f0b22c6656bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e23cef0c9469cc360e603a614bb3f0b22c6656bf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a40d69e0b85af4cafa81db38f1e36f8cf5f86b3f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e49a9e354695cc58a431b297513acee0dd2014f4",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e23cef0c9469cc360e603a614bb3f0b22c6656bf/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e23cef0c9469cc360e603a614bb3f0b22c6656bf/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=e23cef0c9469cc360e603a614bb3f0b22c6656bf",
        "patch": "@@ -248,7 +248,8 @@ class CDataStream\n \n     void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)\n     {\n-        assert(last - first >= 0);\n+        if (last == first) return;\n+        assert(last - first > 0);\n         if (it == vch.begin() + nReadPos && (unsigned int)(last - first) <= nReadPos)\n         {\n             // special case for inserting at the front when there's room\n@@ -261,7 +262,8 @@ class CDataStream\n \n     void insert(iterator it, const char* first, const char* last)\n     {\n-        assert(last - first >= 0);\n+        if (last == first) return;\n+        assert(last - first > 0);\n         if (it == vch.begin() + nReadPos && (unsigned int)(last - first) <= nReadPos)\n         {\n             // special case for inserting at the front when there's room\n@@ -339,6 +341,8 @@ class CDataStream\n \n     void read(char* pch, size_t nSize)\n     {\n+        if (nSize == 0) return;\n+\n         // Read from the beginning of the buffer\n         unsigned int nReadPosNext = nReadPos + nSize;\n         if (nReadPosNext >= vch.size())"
      }
    ]
  },
  {
    "sha": "ff13f592c5813b18340a6e9e65abb4e356aac400",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjEzZjU5MmM1ODEzYjE4MzQwYTZlOWU2NWFiYjRlMzU2YWFjNDAw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-23T23:48:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:24Z"
      },
      "message": "[wallet] Make sure pindex is non-null before possibly referencing in LogPrintf call.\n\nGithub-Pull: #10265\nRebased-From: c36ea693ee16611e0337aec682d1ce80b90e1bd3",
      "tree": {
        "sha": "29342841f1c7646a99815288aa54cdb6c3d37dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29342841f1c7646a99815288aa54cdb6c3d37dec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff13f592c5813b18340a6e9e65abb4e356aac400",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff13f592c5813b18340a6e9e65abb4e356aac400",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff13f592c5813b18340a6e9e65abb4e356aac400",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff13f592c5813b18340a6e9e65abb4e356aac400/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e23cef0c9469cc360e603a614bb3f0b22c6656bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e23cef0c9469cc360e603a614bb3f0b22c6656bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e23cef0c9469cc360e603a614bb3f0b22c6656bf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2697a3769ac1faa0fc9bae311d7bb9b7474995b6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff13f592c5813b18340a6e9e65abb4e356aac400/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff13f592c5813b18340a6e9e65abb4e356aac400/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ff13f592c5813b18340a6e9e65abb4e356aac400",
        "patch": "@@ -1572,6 +1572,10 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+            if (GetTime() >= nNow + 60) {\n+                nNow = GetTime();\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+            }\n \n             CBlock block;\n             if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n@@ -1585,10 +1589,6 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n                 ret = nullptr;\n             }\n             pindex = chainActive.Next(pindex);\n-            if (GetTime() >= nNow + 60) {\n-                nNow = GetTime();\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n-            }\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n     }"
      }
    ]
  },
  {
    "sha": "28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGI4YjhiNjAzOGM0NWNlMmRjMmU3ZGMxMWY4OGRjODM0ZGRkMTlh",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-03-23T21:07:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:24Z"
      },
      "message": "[wallet] Securely erase potentially sensitive keys/values\n\nGithub-Pull: #10308\nRebased-From: 6c914ac176624468c66febdb1ad0e24ff2118a5f",
      "tree": {
        "sha": "36a2a6a8006540b13357890a65fc078e7371241f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a2a6a8006540b13357890a65fc078e7371241f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff13f592c5813b18340a6e9e65abb4e356aac400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff13f592c5813b18340a6e9e65abb4e356aac400",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff13f592c5813b18340a6e9e65abb4e356aac400"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 23,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f020216c7300a6a7894da8157cc2ffe87b3f62a3",
        "filename": "src/support/cleanse.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <stdlib.h>\n \n+// Attempt to overwrite data in the specified memory span.\n void memory_cleanse(void *ptr, size_t len);\n \n #endif // BITCOIN_SUPPORT_CLEANSE_H"
      },
      {
        "sha": "ea562003230ca5f32098158d6a539d1bbc9ff1a4",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
        "patch": "@@ -126,22 +126,23 @@ class CDB\n         Dbt datValue;\n         datValue.set_flags(DB_DBT_MALLOC);\n         int ret = pdb->get(activeTxn, &datKey, &datValue, 0);\n-        memset(datKey.get_data(), 0, datKey.get_size());\n-        if (datValue.get_data() == NULL)\n-            return false;\n-\n-        // Unserialize value\n-        try {\n-            CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n-            ssValue >> value;\n-        } catch (const std::exception&) {\n-            return false;\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        bool success = false;\n+        if (datValue.get_data() != NULL) {\n+            // Unserialize value\n+            try {\n+                CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n+                ssValue >> value;\n+                success = true;\n+            } catch (const std::exception&) {\n+                // In this case success remains 'false'\n+            }\n+\n+            // Clear and free memory\n+            memory_cleanse(datValue.get_data(), datValue.get_size());\n+            free(datValue.get_data());\n         }\n-\n-        // Clear and free memory\n-        memset(datValue.get_data(), 0, datValue.get_size());\n-        free(datValue.get_data());\n-        return (ret == 0);\n+        return ret == 0 && success;\n     }\n \n     template <typename K, typename T>\n@@ -168,8 +169,8 @@ class CDB\n         int ret = pdb->put(activeTxn, &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\n \n         // Clear memory in case it was a private key\n-        memset(datKey.get_data(), 0, datKey.get_size());\n-        memset(datValue.get_data(), 0, datValue.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        memory_cleanse(datValue.get_data(), datValue.get_size());\n         return (ret == 0);\n     }\n \n@@ -191,7 +192,7 @@ class CDB\n         int ret = pdb->del(activeTxn, &datKey, 0);\n \n         // Clear memory\n-        memset(datKey.get_data(), 0, datKey.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n         return (ret == 0 || ret == DB_NOTFOUND);\n     }\n \n@@ -211,7 +212,7 @@ class CDB\n         int ret = pdb->exists(activeTxn, &datKey, 0);\n \n         // Clear memory\n-        memset(datKey.get_data(), 0, datKey.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n         return (ret == 0);\n     }\n \n@@ -254,8 +255,8 @@ class CDB\n         ssValue.write((char*)datValue.get_data(), datValue.get_size());\n \n         // Clear and free memory\n-        memset(datKey.get_data(), 0, datKey.get_size());\n-        memset(datValue.get_data(), 0, datValue.get_size());\n+        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        memory_cleanse(datValue.get_data(), datValue.get_size());\n         free(datKey.get_data());\n         free(datValue.get_data());\n         return 0;"
      }
    ]
  },
  {
    "sha": "87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2EyMWQ1OTIyZjNjZGM3YTdlMjEwOTBkYzcwNzhlMDc3NGMxYzFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-23T17:04:14Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:25Z"
      },
      "message": "Fix: make CCoinsViewDbCursor::Seek work for missing keys\n\nThanks to Suhas Daftuar for figuring this out.\n\nGithub-Pull: #10445\nRebased-From: 822755a424d0abfa408dc34313f4aca4b816f54f",
      "tree": {
        "sha": "36aec167f07ac4400e3117833c9d0f29e480bfe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36aec167f07ac4400e3117833c9d0f29e480bfe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28b8b8b6038c45ce2dc2e7dc11f88dc834ddd19a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "662e7cb06d3a89ac57e1296dff23bc8421f02c13",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
        "patch": "@@ -98,7 +98,11 @@ CCoinsViewCursor *CCoinsViewDB::Cursor() const\n        that restriction.  */\n     i->pcursor->Seek(DB_COINS);\n     // Cache key of first record\n-    i->pcursor->GetKey(i->keyTmp);\n+    if (i->pcursor->Valid()) {\n+        i->pcursor->GetKey(i->keyTmp);\n+    } else {\n+        i->keyTmp.first = 0; // Make sure Valid() and GetKey() return false\n+    }\n     return i;\n }\n "
      }
    ]
  },
  {
    "sha": "692dbb0288d6582e311a47951ff4afd63ea9d90c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTJkYmIwMjg4ZDY1ODJlMzExYTQ3OTUxZmY0YWZkNjNlYTlkOTBj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-04-23T00:47:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:53Z"
      },
      "message": "[doc] Minor corrections to osx dependencies\n\nGithub-Pull: #10260\nRebased-From: 661caf83b3dcae6376e59b6cae07f0a2a4d37fe9",
      "tree": {
        "sha": "188b14a8dd9e3a33f9e6f2d9857a6057b54343dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/188b14a8dd9e3a33f9e6f2d9857a6057b54343dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/692dbb0288d6582e311a47951ff4afd63ea9d90c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692dbb0288d6582e311a47951ff4afd63ea9d90c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/692dbb0288d6582e311a47951ff4afd63ea9d90c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692dbb0288d6582e311a47951ff4afd63ea9d90c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87a21d5922f3cdc7a7e21090dc7078e0774c1c1f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "32d7dbd69e7d694f4b27c151343c815c1708eed9",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692dbb0288d6582e311a47951ff4afd63ea9d90c/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692dbb0288d6582e311a47951ff4afd63ea9d90c/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=692dbb0288d6582e311a47951ff4afd63ea9d90c",
        "patch": "@@ -11,14 +11,14 @@ Install the OS X command line tools:\n \n When the popup appears, click `Install`.\n \n-Then install [Homebrew](http://brew.sh).\n+Then install [Homebrew](https://brew.sh).\n \n Dependencies\n ----------------------\n \n-    brew install automake berkeley-db4 libtool boost --c++11 miniupnpc openssl pkg-config protobuf --c++11 qt5 libevent\n+    brew install automake berkeley-db4 libtool boost --c++11 miniupnpc openssl pkg-config protobuf qt libevent\n \n-In case you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG\n+If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG\n \n     brew install librsvg\n "
      }
    ]
  },
  {
    "sha": "3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjEyMjE5ZjlhMThhMmJkMWRkZWJiMWI5MGY1NTZhYTI5NTg2YmZk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-25T01:56:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:53Z"
      },
      "message": "contrib/init/bitcoind.openrcconf: Don't disable wallet by default\n\nIt's harmless if it goes unused, and confused when a wallet is desired\n\nGithub-Pull: #10451\nRebased-From: afc693dea695b75721db55d0decee3b11dcb3625",
      "tree": {
        "sha": "511f90716afcc30a1afb5b7e150cd9a0c4ddbab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/511f90716afcc30a1afb5b7e150cd9a0c4ddbab7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3612219f9a18a2bd1ddebb1b90f556aa29586bfd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "692dbb0288d6582e311a47951ff4afd63ea9d90c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692dbb0288d6582e311a47951ff4afd63ea9d90c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/692dbb0288d6582e311a47951ff4afd63ea9d90c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f70e25cb5fdd29e49de2c89b81bd92633e5b93df",
        "filename": "contrib/init/bitcoind.openrcconf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3612219f9a18a2bd1ddebb1b90f556aa29586bfd/contrib/init/bitcoind.openrcconf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3612219f9a18a2bd1ddebb1b90f556aa29586bfd/contrib/init/bitcoind.openrcconf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrcconf?ref=3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
        "patch": "@@ -23,7 +23,7 @@\n #BITCOIND_NICE=0\n \n # Additional options (avoid -conf and -datadir, use flags above)\n-BITCOIND_OPTS=\"-disablewallet\"\n+#BITCOIND_OPTS=\"\"\n \n # The timeout in seconds OpenRC will wait for bitcoind to terminate\n # after a SIGTERM has been raised."
      }
    ]
  },
  {
    "sha": "d2ec96909acc3eda76ee507456d8f3722a965921",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmVjOTY5MDlhY2MzZWRhNzZlZTUwNzQ1NmQ4ZjM3MjJhOTY1OTIx",
    "commit": {
      "author": {
        "name": "Mikerah",
        "email": "mikerah14@gmail.com",
        "date": "2017-04-22T11:22:17Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:53Z"
      },
      "message": "Fixed typo in documentation for merkleblock.h\n\nGithub-Pull: #10258\nRebased-From: dd07068d6b11e738bc954c998800b5660d160959",
      "tree": {
        "sha": "391b453329c7b4c4f37c47994be7f3d91821c94d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/391b453329c7b4c4f37c47994be7f3d91821c94d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2ec96909acc3eda76ee507456d8f3722a965921",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ec96909acc3eda76ee507456d8f3722a965921",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ec96909acc3eda76ee507456d8f3722a965921",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ec96909acc3eda76ee507456d8f3722a965921/comments",
    "author": {
      "login": "Mikerah",
      "id": 4249799,
      "node_id": "MDQ6VXNlcjQyNDk3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4249799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mikerah",
      "html_url": "https://github.com/Mikerah",
      "followers_url": "https://api.github.com/users/Mikerah/followers",
      "following_url": "https://api.github.com/users/Mikerah/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mikerah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mikerah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mikerah/subscriptions",
      "organizations_url": "https://api.github.com/users/Mikerah/orgs",
      "repos_url": "https://api.github.com/users/Mikerah/repos",
      "events_url": "https://api.github.com/users/Mikerah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mikerah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3612219f9a18a2bd1ddebb1b90f556aa29586bfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3612219f9a18a2bd1ddebb1b90f556aa29586bfd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de4c5c8d29e7329b36c64b07f0ee5a768c8c7544",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ec96909acc3eda76ee507456d8f3722a965921/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ec96909acc3eda76ee507456d8f3722a965921/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=d2ec96909acc3eda76ee507456d8f3722a965921",
        "patch": "@@ -23,7 +23,7 @@\n  * storing a bit for each traversed node, signifying whether the node is the\n  * parent of at least one matched leaf txid (or a matched txid itself). In\n  * case we are at the leaf level, or this bit is 0, its merkle node hash is\n- * stored, and its children are not explorer further. Otherwise, no hash is\n+ * stored, and its children are not explored further. Otherwise, no hash is\n  * stored, but we recurse into both (or the only) child branch. During\n  * decoding, the same depth-first traversal is performed, consuming bits and\n  * hashes as they written during encoding."
      }
    ]
  },
  {
    "sha": "12adedff0bf813f2a2e790f422e41cc8d84cfc99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmFkZWRmZjBiZjgxM2YyYTJlNzkwZjQyMmU0MWNjOGQ4NGNmYzk5",
    "commit": {
      "author": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2017-05-01T21:18:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:53Z"
      },
      "message": "Trivial: remove extra character from comment\n\nGithub-Pull: #10309\nRebased-From: 3503716f1e37a0cc3ab13c8f4e774061ff4ae2f8",
      "tree": {
        "sha": "0b12c24ddd842535db8a0a7e51a48cbc009cd569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b12c24ddd842535db8a0a7e51a48cbc009cd569"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12adedff0bf813f2a2e790f422e41cc8d84cfc99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12adedff0bf813f2a2e790f422e41cc8d84cfc99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12adedff0bf813f2a2e790f422e41cc8d84cfc99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12adedff0bf813f2a2e790f422e41cc8d84cfc99/comments",
    "author": {
      "login": "CryptAxe",
      "id": 8107318,
      "node_id": "MDQ6VXNlcjgxMDczMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptAxe",
      "html_url": "https://github.com/CryptAxe",
      "followers_url": "https://api.github.com/users/CryptAxe/followers",
      "following_url": "https://api.github.com/users/CryptAxe/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptAxe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
      "repos_url": "https://api.github.com/users/CryptAxe/repos",
      "events_url": "https://api.github.com/users/CryptAxe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2ec96909acc3eda76ee507456d8f3722a965921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ec96909acc3eda76ee507456d8f3722a965921",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ec96909acc3eda76ee507456d8f3722a965921"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "78d7cd60010529afa6b3310eba69f5bccb0df7ee",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12adedff0bf813f2a2e790f422e41cc8d84cfc99/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12adedff0bf813f2a2e790f422e41cc8d84cfc99/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=12adedff0bf813f2a2e790f422e41cc8d84cfc99",
        "patch": "@@ -65,7 +65,7 @@ uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::ve\n     } else {\n         // calculate left hash\n         uint256 left = CalcHash(height-1, pos*2, vTxid), right;\n-        // calculate right hash if not beyond the end of the array - copy left hash otherwise1\n+        // calculate right hash if not beyond the end of the array - copy left hash otherwise\n         if (pos*2+1 < CalcTreeWidth(height-1))\n             right = CalcHash(height-1, pos*2+1, vTxid);\n         else"
      }
    ]
  },
  {
    "sha": "76f9cf9ac9916f9a29b3f236225d49501ccf230a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmY5Y2Y5YWM5OTE2ZjlhMjliM2YyMzYyMjVkNDk1MDFjY2YyMzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-01T08:38:29Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:53Z"
      },
      "message": "contrib: Update location of seeds.txt\n\nUpdate the steps for updating the hardcoded seed nodes to point to the\nnew filename on @sipa's server, and add command to decompress it.\n\nRef: #10163\n\nGithub-Pull: #10495\nRebased-From: ac9cd953d91e2448d24851b2f4973c7be8f4c3cd",
      "tree": {
        "sha": "df2c84f0acf5a084d096d1366db8bde178113a0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df2c84f0acf5a084d096d1366db8bde178113a0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76f9cf9ac9916f9a29b3f236225d49501ccf230a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f9cf9ac9916f9a29b3f236225d49501ccf230a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76f9cf9ac9916f9a29b3f236225d49501ccf230a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f9cf9ac9916f9a29b3f236225d49501ccf230a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12adedff0bf813f2a2e790f422e41cc8d84cfc99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12adedff0bf813f2a2e790f422e41cc8d84cfc99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12adedff0bf813f2a2e790f422e41cc8d84cfc99"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "139c03181fc806a9854a3ad307146883df0e47cf",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f9cf9ac9916f9a29b3f236225d49501ccf230a/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f9cf9ac9916f9a29b3f236225d49501ccf230a/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=76f9cf9ac9916f9a29b3f236225d49501ccf230a",
        "patch": "@@ -8,7 +8,7 @@ and remove old versions as necessary.\n \n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n-    curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt\n+    curl -s http://bitcoin.sipa.be/seeds.txt.gz | gzip -dc > seeds_main.txt\n     python3 makeseeds.py < seeds_main.txt > nodes_main.txt\n     python3 generate-seeds.py . > ../../src/chainparamsseeds.h\n "
      }
    ]
  },
  {
    "sha": "ff274d3b00737d9f93c85c0bcff51f1f548354b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjI3NGQzYjAwNzM3ZDlmOTNjODVjMGJjZmY1MWYxZjU0ODM1NGI2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-05-06T03:51:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-05T22:58:53Z"
      },
      "message": "[doc] Add hint about getmempoolentry to getrawmempool help.\n\nGithub-Pull: #10310\nRebased-From: 3a0a5bc2341ea6a453306f6fe1c065b937294cfb",
      "tree": {
        "sha": "8acf3028df9326aa045543eb4715dfcecf25dbeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8acf3028df9326aa045543eb4715dfcecf25dbeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff274d3b00737d9f93c85c0bcff51f1f548354b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff274d3b00737d9f93c85c0bcff51f1f548354b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff274d3b00737d9f93c85c0bcff51f1f548354b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff274d3b00737d9f93c85c0bcff51f1f548354b6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76f9cf9ac9916f9a29b3f236225d49501ccf230a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f9cf9ac9916f9a29b3f236225d49501ccf230a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76f9cf9ac9916f9a29b3f236225d49501ccf230a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd8f52a5cb0a91d8c93c6a6fb05e083171c96756",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff274d3b00737d9f93c85c0bcff51f1f548354b6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff274d3b00737d9f93c85c0bcff51f1f548354b6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ff274d3b00737d9f93c85c0bcff51f1f548354b6",
        "patch": "@@ -417,6 +417,7 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult: (for verbose = false):\\n\""
      }
    ]
  }
]